{
  "id": 11435979,
  "slug": "xi2mh9",
  "title": "栈",
  "book_id": 24854102,
  "book": {
    "id": 24854102,
    "type": "Book",
    "slug": "gm8h7g",
    "name": "算法 algorithm",
    "user_id": 732231,
    "description": "算法基础、leetCode",
    "creator_id": 732231,
    "public": 0,
    "items_count": 18,
    "likes_count": 0,
    "watches_count": 1,
    "content_updated_at": "2023-11-11T18:15:30.855Z",
    "updated_at": "2023-11-11T18:15:31.000Z",
    "created_at": "2022-02-21T07:49:26.000Z",
    "namespace": "wcywxq/gm8h7g",
    "user": {
      "id": 732231,
      "type": "User",
      "login": "wcywxq",
      "name": "magic",
      "description": null,
      "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/732231/1606968271774-avatar/886ad88b-d2cc-4c9e-a674-f70eb51a679c.png",
      "books_count": 18,
      "public_books_count": 0,
      "followers_count": 0,
      "following_count": 0,
      "created_at": "2020-01-08T14:21:31.000Z",
      "updated_at": "2023-11-13T09:32:35.000Z",
      "_serializer": "v2.user"
    },
    "_serializer": "v2.book"
  },
  "user_id": 732231,
  "creator": {
    "id": 732231,
    "type": "User",
    "login": "wcywxq",
    "name": "magic",
    "description": null,
    "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/732231/1606968271774-avatar/886ad88b-d2cc-4c9e-a674-f70eb51a679c.png",
    "books_count": 18,
    "public_books_count": 0,
    "followers_count": 0,
    "following_count": 0,
    "created_at": "2020-01-08T14:21:31.000Z",
    "updated_at": "2023-11-13T09:32:35.000Z",
    "_serializer": "v2.user"
  },
  "format": "lake",
  "body": "[链接](https://www.cnblogs.com/jaxu/p/11264017.html)\n\n在计算机编程中，栈是一种很常见的数据结构，它遵从后进先出（LIFO——Last In First Out）原则，新添加或待删除的元素保存在栈的同一端，称作栈顶，另一端称作栈底。在栈中，新元素总是靠近栈顶，而旧元素总是接近栈底。<br />让我们来看看在 JavaScript 中如何实现栈这种数据结构。<br />\n\n```javascript\nfunction Stack() {\n    let items = []\n\n    // 向栈添加新元素\n    this.push = function (element) {\n        items.push(element)\n    }\n\n    // 从栈内弹出一个元素\n    this.pop = function () {\n        return items.pop()\n    }\n\n    // 返回栈顶的元素\n    this.peek = function () {\n        return items[items.length - 1]\n    }\n\n    // 判断栈是否为空\n    this.isEmpty = function () {\n        return items.length === 0\n    }\n\n    // 返回栈的长度\n    this.size = function () {\n        return items.length\n    }\n\n    // 清空栈\n    this.clear = function () {\n        items = []\n    }\n\n    // 打印栈内的所有元素\n    this.print = function () {\n        console.log(items.toString())\n    }\n}\n```\n\n我们用最简单的方式定义了一个 Stack 类。在 JavaScript 中，我们用 function 来表示一个类。然后我们在这个类中定义了一些方法，用来模拟栈的操作，以及一些辅助方法。代码很简单，看起来一目了然，接下来我们尝试写一些测试用例来看看这个类的一些用法。\n\n```javascript\nlet stack = new Stack()\nconsole.log(stack.isEmpty()) // true\n\nstack.push(5)\nstack.push(8)\nconsole.log(stack.peek()) // 8\n\nstack.push(11)\nconsole.log(stack.size()) // 3\nconsole.log(stack.isEmpty()) // false\n\nstack.push(15)\nstack.pop()\nstack.pop()\nconsole.log(stack.size()) // 2\nstack.print() // 5,8\n\nstack.clear()\nstack.print() // undefined\n```\n\n返回结果也和预期的一样！我们成功地用 JavaScript 模拟了栈的实现。但是这里有个小问题，由于我们用 JavaScript 的 function 来模拟类的行为，并且在其中声明了一个私有变量 items，因此这个类的每个实例都会创建一个 items 变量的副本，如果有多个 Stack 类的实例的话，这显然不是最佳方案。我们尝试用 ES6（ECMAScript 6）的语法重写 Stack 类。\n\n```javascript\nclass Stack {\n    constructor() {\n        this.items = []\n    }\n\n    push(element) {\n        this.items.push(element)\n    }\n\n    pop() {\n        return this.items.pop()\n    }\n\n    peek() {\n        return this.items[this.items.length - 1]\n    }\n\n    isEmpty() {\n        return this.items.length === 0\n    }\n\n    size() {\n        return this.items.length\n    }\n\n    clear() {\n        this.items = []\n    }\n\n    print() {\n        console.log(this.items.toString())\n    }\n}\n```\n\n没有太大的改变，我们只是用 ES6 的简化语法将上面的 Stack 函数转换成了 Stack 类。类的成员变量只能放到 constructor 构造函数中来声明。虽然代码看起来更像类了，但是成员变量 items 仍然是公有的，我们不希望在类的外部访问 items 变量而对其中的元素进行操作，因为这样会破坏栈这种数据结构的基本特性。我们可以借用 ES6 的 Symbol 来限定变量的作用域。\n\n```javascript\nlet _items = Symbol()\n\nclass Stack {\n    constructor() {\n        this[_items] = []\n    }\n\n    push(element) {\n        this[_items].push(element)\n    }\n\n    pop() {\n        return this[_items].pop()\n    }\n\n    peek() {\n        return this[_items][this[_items].length - 1]\n    }\n\n    isEmpty() {\n        return this[_items].length === 0\n    }\n\n    size() {\n        return this[_items].length\n    }\n\n    clear() {\n        this[_items] = []\n    }\n\n    print() {\n        console.log(this[_items].toString())\n    }\n}\n```\n\n这样，我们就不能再通过 Stack 类的实例来访问其内部成员变量_items 了。但是仍然可以有变通的方法来访问_items：\n\n```javascript\nlet stack = new Stack()\nlet objectSymbols = Object.getOwenPropertySymbols(stack)\n```\n\n通过 Object.getOwenPropertySymbols()方法，我们可以获取到类的实例中的所有 Symbols 属性，然后就可以对其进行操作了，如此说来，这个方法仍然不能完美实现我们想要的效果。我们可以使用 ES6 的 WeakMap 类来确保 Stack 类的属性是私有的：\n\n```javascript\nconst items = new WeakMap()\n\nclass Stack {\n    constructor() {\n        items.set(this, [])\n    }\n\n    push(element) {\n        let s = items.get(this)\n        s.push(element)\n    }\n\n    pop() {\n        let s = items.get(this)\n        return s.pop()\n    }\n\n    peek() {\n        let s = items.get(this)\n        return s[s.length - 1]\n    }\n\n    isEmpty() {\n        return items.get(this).length === 0\n    }\n\n    size() {\n        return items.get(this).length\n    }\n\n    clear() {\n        items.set(this, [])\n    }\n\n    print() {\n        console.log(items.get(this).toString())\n    }\n}\n```\n\n现在，items 在 Stack 类里是真正的私有属性了，但是，它是在 Stack 类的外部声明的，这就意味着谁都可以对它进行操作，虽然我们可以将 Stack 类和 items 变量的声明放到[闭包](https://www.w3schools.com/js/js_function_closures.asp)中，但是这样却又失去了类本身的一些特性（如扩展类无法继承私有属性）。所以，尽管我们可以用 ES6 的新语法来简化一个类的实现，但是毕竟不能像其它强类型语言一样声明类的私有属性和方法。有许多方法都可以达到相同的效果，但无论是语法还是性能，都会有各自的优缺点。\n\n```javascript\nlet Stack = (function () {\n    const items = new WeakMap()\n    class Stack {\n        constructor() {\n            items.set(this, [])\n        }\n\n        push(element) {\n            let s = items.get(this)\n            s.push(element)\n        }\n\n        pop() {\n            let s = items.get(this)\n            return s.pop()\n        }\n\n        peek() {\n            let s = items.get(this)\n            return s[s.length - 1]\n        }\n\n        isEmpty() {\n            return items.get(this).length === 0\n        }\n\n        size() {\n            return items.get(this).length\n        }\n\n        clear() {\n            items.set(this, [])\n        }\n\n        print() {\n            console.log(items.get(this).toString())\n        }\n    }\n    return Stack\n})()\n```\n\n下面我们来看看栈在实际编程中的应用。\n\n<a name=\"d8936c87\"></a>\n### 进制转换算法\n\n将十进制数字 10 转换成二进制数字，过程大致如下：<br />10 / 2 = 5，余数为 0<br />5 / 2 = 2，余数为 1<br />2 / 2 = 1，余数为 0<br />1 / 2 = 0, 余数为 1<br />我们将上述每一步的余数颠倒顺序排列起来，就得到转换之后的结果：1010。<br />按照这个逻辑，我们实现下面的算法：\n\n```javascript\nfunction divideBy2(decNumber) {\n    let remStack = new Stack()\n    let rem,\n        binaryString = \"\"\n\n    while (decNumber > 0) {\n        rem = Math.floor(decNumber % 2)\n        remStack.push(rem)\n        decNumber = Math.floor(decNumber / 2)\n    }\n\n    while (!remStack.isEmpty()) {\n        binaryString += remStack.pop().toString()\n    }\n\n    return binaryString\n}\n\nconsole.log(divideBy2(233)) // 11101001\nconsole.log(divideBy2(10)) // 1010\nconsole.log(divideBy2(1000)) // 1111101000\n```\n\nStack 类可以自行引用本文前面定义的任意一个版本。我们将这个函数再进一步抽象一下，使之可以实现任意进制之间的转换。\n\n```javascript\nfunction baseConverter(decNumber, base) {\n    let remStack = new Stack()\n    let rem,\n        baseString = \"\"\n    let digits = \"0123456789ABCDEF\"\n\n    while (decNumber > 0) {\n        rem = Math.floor(decNumber % base)\n        remStack.push(rem)\n        decNumber = Math.floor(decNumber / base)\n    }\n\n    while (!remStack.isEmpty()) {\n        baseString += digits[remStack.pop()]\n    }\n\n    return baseString\n}\n\nconsole.log(baseConverter(233, 2)) // 11101001\nconsole.log(baseConverter(10, 2)) // 1010\nconsole.log(baseConverter(1000, 2)) // 1111101000\n\nconsole.log(baseConverter(233, 8)) // 351\nconsole.log(baseConverter(10, 8)) // 12\nconsole.log(baseConverter(1000, 8)) // 1750\n\nconsole.log(baseConverter(233, 16)) // E9\nconsole.log(baseConverter(10, 16)) // A\nconsole.log(baseConverter(1000, 16)) // 3E8\n```\n\n我们定义了一个变量 digits，用来存储各进制转换时每一步的余数所代表的符号。如：二进制转换时余数为 0，对应的符号为 digits[0]，即 0；八进制转换时余数为 7，对应的符号为 digits[7]，即 7；十六进制转换时余数为 11，对应的符号为 digits[11]，即 B。\n\n<a name=\"a0e1b915\"></a>\n### 汉诺塔\n\n有关汉诺塔的传说和由来，读者可以自行百度。这里有两个和汉诺塔相似的小故事，可以跟大家分享一下。\n\n1. 有一个古老的传说，印度的舍罕王（Shirham）打算重赏国际象棋的发明人和进贡者，宰相西萨·班·达依尔（Sissa Ben Dahir）。这位聪明的大臣的胃口看来并不大，他跪在国王面前说：“陛下，请您在这张棋盘的第一个小格内，赏给我一粒小麦；在第二个小格内给两粒，第三格内给四粒，照这样下去，每一小格内都比前一小格加一倍。陛下啊，把这样摆满棋盘上所有 64 格的麦粒，都赏给您的仆人吧！”。“爱卿。你所求的并不多啊。”国王说道，心里为自己对这样一件奇妙的发明所许下的慷慨赏诺不致破费太多而暗喜。“你当然会如愿以偿的。”说着，他令人把一袋麦子拿到宝座前。计数麦粒的工作开始了。第一格内放一粒，第二格内放两粒，第三格内放四粒，......还没到第二十格，袋子已经空了。一袋又一袋的麦子被扛到国王面前来。但是，麦粒数一格接以各地增长得那样迅速，很快就可以看出，即便拿来全印度的粮食，国王也兑现不了他对西萨·班·达依尔许下的诺言了，因为这需要有 18 446 744 073 709 551 615 颗麦粒呀！<br />![image.png](https://cdn.nlark.com/yuque/0/2022/png/732231/1646367650655-5a155bd1-4026-4116-948a-bdbb58ed52cd.png#clientId=u56547286-e857-4&from=paste&id=u47669f70&margin=%5Bobject%20Object%5D&name=image.png&originHeight=390&originWidth=583&originalType=url&ratio=1&size=71874&status=done&style=none&taskId=u64278ee2-622f-4390-bbfe-e8a172dda41#id=jr7vE&originHeight=390&originWidth=583&originalType=binary&ratio=1&status=done&style=none)<br />这个故事其实是一个数学级数问题，这位聪明的宰相所要求的麦粒数可以写成数学式子：1 + 2 + 22 + 23 + 24 + ...... 262 + 263<br />推算出来就是：<br />![image.png](https://cdn.nlark.com/yuque/0/2022/png/732231/1646367650631-eb8bcd7a-6466-4986-a482-e3d89ffbe20f.png#clientId=u56547286-e857-4&from=paste&id=uada7f861&margin=%5Bobject%20Object%5D&name=image.png&originHeight=86&originWidth=199&originalType=url&ratio=1&size=2457&status=done&style=none&taskId=udb9bd341-20c5-43fb-be5a-85af4ba751a#id=eu7uH&originHeight=86&originWidth=199&originalType=binary&ratio=1&status=done&style=none)<br />其计算结果就是 18 446 744 073 709 551 615，这是一个相当大的数！如果按照这位宰相的要求，需要全世界在 2000 年内所生产的全部小麦才能满足。\n2. 另外一个故事也是出自印度。在世界中心贝拿勒斯的圣庙里，安放着一个黄铜板，板上插着三根宝石针。每根针高约 1 腕尺，像韭菜叶那样粗细。梵天在创造世界的时候，在其中的一根针上从下到上放下了由大到小的 64 片金片。这就是所谓的梵塔。不论白天黑夜，都有一个值班的僧侣按照梵天不渝的法则，把这些金片在三根针上移来移去：一次只能移一片，并且要求不管在哪一根针上，小片永远在大片的上面。当所有 64 片都从梵天创造世界时所放的那根针上移到另外一根针上时，世界就将在一声霹雳中消灭，梵塔、庙宇和众生都将同归于尽。这其实就是我们要说的汉诺塔问题，和第一个故事一样，要把这座梵塔全部 64 片金片都移到另一根针上，所需要的时间按照数学级数公式计算出来：1 + 2 + 22 + 23 + 24 + ...... 262 + 263 = 264 - 1 = 18 446 744 073 709 551 615<br />一年有 31 558 000 秒，假如僧侣们每一秒钟移动一次，日夜不停，节假日照常干，也需要将近 5800 亿年才能完成！<br />![image.png](https://cdn.nlark.com/yuque/0/2022/png/732231/1646367650656-a3db3098-012f-48b1-9072-363e383678b5.png#clientId=u56547286-e857-4&from=paste&id=ua1ee19ac&margin=%5Bobject%20Object%5D&name=image.png&originHeight=368&originWidth=534&originalType=url&ratio=1&size=83571&status=done&style=none&taskId=ud349a5ee-2813-4a8a-8281-378cbe4ace4#id=cdU7M&originHeight=368&originWidth=534&originalType=binary&ratio=1&status=done&style=none)<br />好了，现在让我们来试着实现汉诺塔的算法。<br />为了说明汉诺塔中每一个小块的移动过程，我们先考虑简单一点的情况。假设汉诺塔只有三层，借用百度百科的图，移动过程如下：<br />![51946-20190730103200105-567503357.gif](https://cdn.nlark.com/yuque/0/2022/gif/732231/1646367814670-24dfb426-bdfc-4f30-af1c-a845f9539101.gif#clientId=u56547286-e857-4&from=ui&id=u1671700d&margin=%5Bobject%20Object%5D&name=51946-20190730103200105-567503357.gif&originHeight=77&originWidth=250&originalType=binary&ratio=1&size=75186&status=done&style=none&taskId=u6fa84026-cdb0-4db9-b73c-2e32f667a9a#id=ASeA5&originHeight=77&originWidth=250&originalType=binary&ratio=1&status=done&style=none)<br />一共需要七步。我们用代码描述如下：\n\n```javascript\nfunction hanoi(plates, source, helper, dest, moves = []) {\n    if (plates <= 0) {\n        return moves\n    }\n    if (plates === 1) {\n        moves.push([source, dest])\n    } else {\n        hanoi(plates - 1, source, dest, helper, moves)\n        moves.push([source, dest])\n        hanoi(plates - 1, helper, source, dest, moves)\n    }\n    return moves\n}\n```\n\n下面是执行结果：\n\n```javascript\nconsole.log(hanoi(3, \"source\", \"helper\", \"dest\"))\n```\n\n```shell\n[\n  [ 'source', 'dest' ],\n  [ 'source', 'helper' ],\n  [ 'dest', 'helper' ],\n  [ 'source', 'dest' ],\n  [ 'helper', 'source' ],\n  [ 'helper', 'dest' ],\n  [ 'source', 'dest' ]\n]\n```\n\n可以试着将 3 改成大一点的数，例如 14，你将会得到如下图一样的结果：<br />![image.png](https://cdn.nlark.com/yuque/0/2022/png/732231/1646367698991-76170915-1cbb-400b-835f-1ffa2ea571a9.png#clientId=u56547286-e857-4&from=paste&id=ucedc4178&margin=%5Bobject%20Object%5D&name=image.png&originHeight=674&originWidth=633&originalType=url&ratio=1&size=114244&status=done&style=none&taskId=uf2104cf8-948b-425e-8722-38361df3b3d#id=ddfw6&originHeight=674&originWidth=633&originalType=binary&ratio=1&status=done&style=none)<br />如果我们将数改成 64 呢？就像上面第二个故事里所描述的一样。恐怕要令你失望了！这时候你会发现你的程序无法正确返回结果，甚至会由于超出递归调用的嵌套次数而报错。这是由于移动 64 层的汉诺塔所需要的步骤是一个很大的数字，我们在前面的故事中已经描述过了。如果真要实现这个过程，这个小程序恐怕很难做到了。<br />搞清楚了汉诺塔的移动过程，我们可以将上面的代码进行扩充，把我们在前面定义的栈的数据结构应用进来，完整的代码如下：\n\n```javascript\nfunction towerOfHanoi(plates, source, helper, dest, sourceName, helperName, destName, moves = []) {\n    if (plates <= 0) {\n        return moves\n    }\n    if (plates === 1) {\n        dest.push(source.pop())\n        const move = {}\n        move[sourceName] = source.toString()\n        move[helperName] = helper.toString()\n        move[destName] = dest.toString()\n        moves.push(move)\n    } else {\n        towerOfHanoi(plates - 1, source, dest, helper, sourceName, destName, helperName, moves)\n        dest.push(source.pop())\n        const move = {}\n        move[sourceName] = source.toString()\n        move[helperName] = helper.toString()\n        move[destName] = dest.toString()\n        moves.push(move)\n        towerOfHanoi(plates - 1, helper, source, dest, helperName, sourceName, destName, moves)\n    }\n    return moves\n}\n\nfunction hanoiStack(plates) {\n    const source = new Stack()\n    const dest = new Stack()\n    const helper = new Stack()\n\n    for (let i = plates; i > 0; i--) {\n        source.push(i)\n    }\n\n    return towerOfHanoi(plates, source, helper, dest, \"source\", \"helper\", \"dest\")\n}\n```\n\n我们定义了三个栈，用来表示汉诺塔中的三个针塔，然后按照函数 hanoi()中相同的逻辑来移动这三个栈中的元素。当 plates 的数量为 3 时，执行结果如下：\n\n```\n[\n  {\n    source: '[object Object]',\n    helper: '[object Object]',\n    dest: '[object Object]'\n  },\n  {\n    source: '[object Object]',\n    dest: '[object Object]',\n    helper: '[object Object]'\n  },\n  {\n    dest: '[object Object]',\n    source: '[object Object]',\n    helper: '[object Object]'\n  },\n  {\n    source: '[object Object]',\n    helper: '[object Object]',\n    dest: '[object Object]'\n  },\n  {\n    helper: '[object Object]',\n    dest: '[object Object]',\n    source: '[object Object]'\n  },\n  {\n    helper: '[object Object]',\n    source: '[object Object]',\n    dest: '[object Object]'\n  },\n  {\n    source: '[object Object]',\n    helper: '[object Object]',\n    dest: '[object Object]'\n  }\n]\n```\n",
  "body_draft": "",
  "body_html": "<!doctype html><div class=\"lake-content\" typography=\"traditional\"><p id=\"u42188a9e\" class=\"ne-p\"><a href=\"https://www.cnblogs.com/jaxu/p/11264017.html\" data-href=\"https://www.cnblogs.com/jaxu/p/11264017.html\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">链接</span></a><span class=\"ne-text\"><br /></span></p><p id=\"ub228f267\" class=\"ne-p\"><br></p><p id=\"ub6d120c5\" class=\"ne-p\"><span class=\"ne-text\">在计算机编程中，栈是一种很常见的数据结构，它遵从后进先出（LIFO——Last In First Out）原则，新添加或待删除的元素保存在栈的同一端，称作栈顶，另一端称作栈底。在栈中，新元素总是靠近栈顶，而旧元素总是接近栈底。<br /></span><span class=\"ne-text\">让我们来看看在 JavaScript 中如何实现栈这种数据结构。<br /></span><span class=\"ne-text\"></span></p><p id=\"ua6b7bfa9\" class=\"ne-p\"><br></p><pre data-language=\"javascript\" id=\"302c6bd5\" class=\"ne-codeblock language-javascript\">function Stack() {\n    let items = []\n\n    // 向栈添加新元素\n    this.push = function (element) {\n        items.push(element)\n    }\n\n    // 从栈内弹出一个元素\n    this.pop = function () {\n        return items.pop()\n    }\n\n    // 返回栈顶的元素\n    this.peek = function () {\n        return items[items.length - 1]\n    }\n\n    // 判断栈是否为空\n    this.isEmpty = function () {\n        return items.length === 0\n    }\n\n    // 返回栈的长度\n    this.size = function () {\n        return items.length\n    }\n\n    // 清空栈\n    this.clear = function () {\n        items = []\n    }\n\n    // 打印栈内的所有元素\n    this.print = function () {\n        console.log(items.toString())\n    }\n}</pre><p id=\"u76cba884\" class=\"ne-p\"><br></p><p id=\"u9b5076db\" class=\"ne-p\"><span class=\"ne-text\">我们用最简单的方式定义了一个 Stack 类。在 JavaScript 中，我们用 function 来表示一个类。然后我们在这个类中定义了一些方法，用来模拟栈的操作，以及一些辅助方法。代码很简单，看起来一目了然，接下来我们尝试写一些测试用例来看看这个类的一些用法。</span></p><p id=\"u4789729e\" class=\"ne-p\"><br></p><pre data-language=\"javascript\" id=\"0dc5e260\" class=\"ne-codeblock language-javascript\">let stack = new Stack()\nconsole.log(stack.isEmpty()) // true\n\nstack.push(5)\nstack.push(8)\nconsole.log(stack.peek()) // 8\n\nstack.push(11)\nconsole.log(stack.size()) // 3\nconsole.log(stack.isEmpty()) // false\n\nstack.push(15)\nstack.pop()\nstack.pop()\nconsole.log(stack.size()) // 2\nstack.print() // 5,8\n\nstack.clear()\nstack.print() // undefined</pre><p id=\"u8d5c1006\" class=\"ne-p\"><br></p><p id=\"u290cb4b7\" class=\"ne-p\"><span class=\"ne-text\">返回结果也和预期的一样！我们成功地用 JavaScript 模拟了栈的实现。但是这里有个小问题，由于我们用 JavaScript 的 function 来模拟类的行为，并且在其中声明了一个私有变量 items，因此这个类的每个实例都会创建一个 items 变量的副本，如果有多个 Stack 类的实例的话，这显然不是最佳方案。我们尝试用 ES6（ECMAScript 6）的语法重写 Stack 类。</span></p><p id=\"ue99d0b5c\" class=\"ne-p\"><br></p><pre data-language=\"javascript\" id=\"f4e7fe53\" class=\"ne-codeblock language-javascript\">class Stack {\n    constructor() {\n        this.items = []\n    }\n\n    push(element) {\n        this.items.push(element)\n    }\n\n    pop() {\n        return this.items.pop()\n    }\n\n    peek() {\n        return this.items[this.items.length - 1]\n    }\n\n    isEmpty() {\n        return this.items.length === 0\n    }\n\n    size() {\n        return this.items.length\n    }\n\n    clear() {\n        this.items = []\n    }\n\n    print() {\n        console.log(this.items.toString())\n    }\n}</pre><p id=\"ue9808824\" class=\"ne-p\"><br></p><p id=\"ucee2d344\" class=\"ne-p\"><span class=\"ne-text\">没有太大的改变，我们只是用 ES6 的简化语法将上面的 Stack 函数转换成了 Stack 类。类的成员变量只能放到 constructor 构造函数中来声明。虽然代码看起来更像类了，但是成员变量 items 仍然是公有的，我们不希望在类的外部访问 items 变量而对其中的元素进行操作，因为这样会破坏栈这种数据结构的基本特性。我们可以借用 ES6 的 Symbol 来限定变量的作用域。</span></p><p id=\"u04ec5541\" class=\"ne-p\"><br></p><pre data-language=\"javascript\" id=\"c6a5686e\" class=\"ne-codeblock language-javascript\">let _items = Symbol()\n\nclass Stack {\n    constructor() {\n        this[_items] = []\n    }\n\n    push(element) {\n        this[_items].push(element)\n    }\n\n    pop() {\n        return this[_items].pop()\n    }\n\n    peek() {\n        return this[_items][this[_items].length - 1]\n    }\n\n    isEmpty() {\n        return this[_items].length === 0\n    }\n\n    size() {\n        return this[_items].length\n    }\n\n    clear() {\n        this[_items] = []\n    }\n\n    print() {\n        console.log(this[_items].toString())\n    }\n}</pre><p id=\"uf585edb7\" class=\"ne-p\"><br></p><p id=\"u1b965fae\" class=\"ne-p\"><span class=\"ne-text\">这样，我们就不能再通过 Stack 类的实例来访问其内部成员变量_items 了。但是仍然可以有变通的方法来访问_items：</span></p><p id=\"ua825e673\" class=\"ne-p\"><br></p><pre data-language=\"javascript\" id=\"1643e0b5\" class=\"ne-codeblock language-javascript\">let stack = new Stack()\nlet objectSymbols = Object.getOwenPropertySymbols(stack)</pre><p id=\"u5a87bd60\" class=\"ne-p\"><br></p><p id=\"ue5024f33\" class=\"ne-p\"><span class=\"ne-text\">通过 Object.getOwenPropertySymbols()方法，我们可以获取到类的实例中的所有 Symbols 属性，然后就可以对其进行操作了，如此说来，这个方法仍然不能完美实现我们想要的效果。我们可以使用 ES6 的 WeakMap 类来确保 Stack 类的属性是私有的：</span></p><p id=\"u26438abf\" class=\"ne-p\"><br></p><pre data-language=\"javascript\" id=\"e7544f5f\" class=\"ne-codeblock language-javascript\">const items = new WeakMap()\n\nclass Stack {\n    constructor() {\n        items.set(this, [])\n    }\n\n    push(element) {\n        let s = items.get(this)\n        s.push(element)\n    }\n\n    pop() {\n        let s = items.get(this)\n        return s.pop()\n    }\n\n    peek() {\n        let s = items.get(this)\n        return s[s.length - 1]\n    }\n\n    isEmpty() {\n        return items.get(this).length === 0\n    }\n\n    size() {\n        return items.get(this).length\n    }\n\n    clear() {\n        items.set(this, [])\n    }\n\n    print() {\n        console.log(items.get(this).toString())\n    }\n}</pre><p id=\"u385a4a2f\" class=\"ne-p\"><br></p><p id=\"uc262d646\" class=\"ne-p\"><span class=\"ne-text\">现在，items 在 Stack 类里是真正的私有属性了，但是，它是在 Stack 类的外部声明的，这就意味着谁都可以对它进行操作，虽然我们可以将 Stack 类和 items 变量的声明放到</span><a href=\"https://www.w3schools.com/js/js_function_closures.asp\" data-href=\"https://www.w3schools.com/js/js_function_closures.asp\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">闭包</span></a><span class=\"ne-text\">中，但是这样却又失去了类本身的一些特性（如扩展类无法继承私有属性）。所以，尽管我们可以用 ES6 的新语法来简化一个类的实现，但是毕竟不能像其它强类型语言一样声明类的私有属性和方法。有许多方法都可以达到相同的效果，但无论是语法还是性能，都会有各自的优缺点。</span></p><p id=\"ubd48ecbf\" class=\"ne-p\"><br></p><pre data-language=\"javascript\" id=\"fc869475\" class=\"ne-codeblock language-javascript\">let Stack = (function () {\n    const items = new WeakMap()\n    class Stack {\n        constructor() {\n            items.set(this, [])\n        }\n\n        push(element) {\n            let s = items.get(this)\n            s.push(element)\n        }\n\n        pop() {\n            let s = items.get(this)\n            return s.pop()\n        }\n\n        peek() {\n            let s = items.get(this)\n            return s[s.length - 1]\n        }\n\n        isEmpty() {\n            return items.get(this).length === 0\n        }\n\n        size() {\n            return items.get(this).length\n        }\n\n        clear() {\n            items.set(this, [])\n        }\n\n        print() {\n            console.log(items.get(this).toString())\n        }\n    }\n    return Stack\n})()</pre><p id=\"u3bffa476\" class=\"ne-p\"><br></p><p id=\"uf3833fc8\" class=\"ne-p\"><span class=\"ne-text\">下面我们来看看栈在实际编程中的应用。</span></p><p id=\"u692c4b09\" class=\"ne-p\"><br></p><h3 id=\"d8936c87\"><span class=\"ne-text\">进制转换算法</span></h3><p id=\"u7a7397d0\" class=\"ne-p\"><br></p><p id=\"ub59be0ca\" class=\"ne-p\"><span class=\"ne-text\">将十进制数字 10 转换成二进制数字，过程大致如下：<br /></span><span class=\"ne-text\">10 / 2 = 5，余数为 0<br /></span><span class=\"ne-text\">5 / 2 = 2，余数为 1<br /></span><span class=\"ne-text\">2 / 2 = 1，余数为 0<br /></span><span class=\"ne-text\">1 / 2 = 0, 余数为 1<br /></span><span class=\"ne-text\">我们将上述每一步的余数颠倒顺序排列起来，就得到转换之后的结果：1010。<br /></span><span class=\"ne-text\">按照这个逻辑，我们实现下面的算法：</span></p><p id=\"u8b6829f7\" class=\"ne-p\"><br></p><pre data-language=\"javascript\" id=\"b03e474c\" class=\"ne-codeblock language-javascript\">function divideBy2(decNumber) {\n    let remStack = new Stack()\n    let rem,\n        binaryString = &quot;&quot;\n\n    while (decNumber &gt; 0) {\n        rem = Math.floor(decNumber % 2)\n        remStack.push(rem)\n        decNumber = Math.floor(decNumber / 2)\n    }\n\n    while (!remStack.isEmpty()) {\n        binaryString += remStack.pop().toString()\n    }\n\n    return binaryString\n}\n\nconsole.log(divideBy2(233)) // 11101001\nconsole.log(divideBy2(10)) // 1010\nconsole.log(divideBy2(1000)) // 1111101000</pre><p id=\"u9b9f3170\" class=\"ne-p\"><br></p><p id=\"u6149012a\" class=\"ne-p\"><span class=\"ne-text\">Stack 类可以自行引用本文前面定义的任意一个版本。我们将这个函数再进一步抽象一下，使之可以实现任意进制之间的转换。</span></p><p id=\"udb325c32\" class=\"ne-p\"><br></p><pre data-language=\"javascript\" id=\"398ba59c\" class=\"ne-codeblock language-javascript\">function baseConverter(decNumber, base) {\n    let remStack = new Stack()\n    let rem,\n        baseString = &quot;&quot;\n    let digits = &quot;0123456789ABCDEF&quot;\n\n    while (decNumber &gt; 0) {\n        rem = Math.floor(decNumber % base)\n        remStack.push(rem)\n        decNumber = Math.floor(decNumber / base)\n    }\n\n    while (!remStack.isEmpty()) {\n        baseString += digits[remStack.pop()]\n    }\n\n    return baseString\n}\n\nconsole.log(baseConverter(233, 2)) // 11101001\nconsole.log(baseConverter(10, 2)) // 1010\nconsole.log(baseConverter(1000, 2)) // 1111101000\n\nconsole.log(baseConverter(233, 8)) // 351\nconsole.log(baseConverter(10, 8)) // 12\nconsole.log(baseConverter(1000, 8)) // 1750\n\nconsole.log(baseConverter(233, 16)) // E9\nconsole.log(baseConverter(10, 16)) // A\nconsole.log(baseConverter(1000, 16)) // 3E8</pre><p id=\"u4ffadafc\" class=\"ne-p\"><br></p><p id=\"u666324d9\" class=\"ne-p\"><span class=\"ne-text\">我们定义了一个变量 digits，用来存储各进制转换时每一步的余数所代表的符号。如：二进制转换时余数为 0，对应的符号为 digits[0]，即 0；八进制转换时余数为 7，对应的符号为 digits[7]，即 7；十六进制转换时余数为 11，对应的符号为 digits[11]，即 B。</span></p><p id=\"u1fe227c0\" class=\"ne-p\"><br></p><h3 id=\"a0e1b915\"><span class=\"ne-text\">汉诺塔</span></h3><p id=\"u31670344\" class=\"ne-p\"><br></p><p id=\"u80fe1b59\" class=\"ne-p\"><span class=\"ne-text\">有关汉诺塔的传说和由来，读者可以自行百度。这里有两个和汉诺塔相似的小故事，可以跟大家分享一下。</span></p><p id=\"u76c3aefa\" class=\"ne-p\"><br></p><ol class=\"ne-ol\"><li id=\"u92ff5dfb\"><span class=\"ne-text\">有一个古老的传说，印度的舍罕王（Shirham）打算重赏国际象棋的发明人和进贡者，宰相西萨·班·达依尔（Sissa Ben Dahir）。这位聪明的大臣的胃口看来并不大，他跪在国王面前说：“陛下，请您在这张棋盘的第一个小格内，赏给我一粒小麦；在第二个小格内给两粒，第三格内给四粒，照这样下去，每一小格内都比前一小格加一倍。陛下啊，把这样摆满棋盘上所有 64 格的麦粒，都赏给您的仆人吧！”。“爱卿。你所求的并不多啊。”国王说道，心里为自己对这样一件奇妙的发明所许下的慷慨赏诺不致破费太多而暗喜。“你当然会如愿以偿的。”说着，他令人把一袋麦子拿到宝座前。计数麦粒的工作开始了。第一格内放一粒，第二格内放两粒，第三格内放四粒，......还没到第二十格，袋子已经空了。一袋又一袋的麦子被扛到国王面前来。但是，麦粒数一格接以各地增长得那样迅速，很快就可以看出，即便拿来全印度的粮食，国王也兑现不了他对西萨·班·达依尔许下的诺言了，因为这需要有 18 446 744 073 709 551 615 颗麦粒呀！<br /></span><img src=\"https://cdn.nlark.com/yuque/0/2022/png/732231/1646367650655-5a155bd1-4026-4116-948a-bdbb58ed52cd.png#clientId=u56547286-e857-4&amp;from=paste&amp;id=u47669f70&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=390&amp;originWidth=583&amp;originalType=url&amp;ratio=1&amp;size=71874&amp;status=done&amp;style=none&amp;taskId=u64278ee2-622f-4390-bbfe-e8a172dda41\" width=\"583\" id=\"jr7vE\" class=\"ne-image\"><span class=\"ne-text\"><br /></span><span class=\"ne-text\">这个故事其实是一个数学级数问题，这位聪明的宰相所要求的麦粒数可以写成数学式子：1 + 2 + 22 + 23 + 24 + ...... 262 + 263<br /></span><span class=\"ne-text\">推算出来就是：<br /></span><img src=\"https://cdn.nlark.com/yuque/0/2022/png/732231/1646367650631-eb8bcd7a-6466-4986-a482-e3d89ffbe20f.png#clientId=u56547286-e857-4&amp;from=paste&amp;id=uada7f861&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=86&amp;originWidth=199&amp;originalType=url&amp;ratio=1&amp;size=2457&amp;status=done&amp;style=none&amp;taskId=udb9bd341-20c5-43fb-be5a-85af4ba751a\" width=\"199\" id=\"eu7uH\" class=\"ne-image\"><span class=\"ne-text\"><br /></span><span class=\"ne-text\">其计算结果就是 18 446 744 073 709 551 615，这是一个相当大的数！如果按照这位宰相的要求，需要全世界在 2000 年内所生产的全部小麦才能满足。</span></li><li id=\"u958d540e\"><span class=\"ne-text\">另外一个故事也是出自印度。在世界中心贝拿勒斯的圣庙里，安放着一个黄铜板，板上插着三根宝石针。每根针高约 1 腕尺，像韭菜叶那样粗细。梵天在创造世界的时候，在其中的一根针上从下到上放下了由大到小的 64 片金片。这就是所谓的梵塔。不论白天黑夜，都有一个值班的僧侣按照梵天不渝的法则，把这些金片在三根针上移来移去：一次只能移一片，并且要求不管在哪一根针上，小片永远在大片的上面。当所有 64 片都从梵天创造世界时所放的那根针上移到另外一根针上时，世界就将在一声霹雳中消灭，梵塔、庙宇和众生都将同归于尽。这其实就是我们要说的汉诺塔问题，和第一个故事一样，要把这座梵塔全部 64 片金片都移到另一根针上，所需要的时间按照数学级数公式计算出来：1 + 2 + 22 + 23 + 24 + ...... 262 + 263 = 264 - 1 = 18 446 744 073 709 551 615<br /></span><span class=\"ne-text\">一年有 31 558 000 秒，假如僧侣们每一秒钟移动一次，日夜不停，节假日照常干，也需要将近 5800 亿年才能完成！<br /></span><img src=\"https://cdn.nlark.com/yuque/0/2022/png/732231/1646367650656-a3db3098-012f-48b1-9072-363e383678b5.png#clientId=u56547286-e857-4&amp;from=paste&amp;id=ua1ee19ac&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=368&amp;originWidth=534&amp;originalType=url&amp;ratio=1&amp;size=83571&amp;status=done&amp;style=none&amp;taskId=ud349a5ee-2813-4a8a-8281-378cbe4ace4\" width=\"534\" id=\"cdU7M\" class=\"ne-image\"><span class=\"ne-text\"><br /></span><span class=\"ne-text\">好了，现在让我们来试着实现汉诺塔的算法。<br /></span><span class=\"ne-text\">为了说明汉诺塔中每一个小块的移动过程，我们先考虑简单一点的情况。假设汉诺塔只有三层，借用百度百科的图，移动过程如下：<br /></span><img src=\"https://cdn.nlark.com/yuque/0/2022/gif/732231/1646367814670-24dfb426-bdfc-4f30-af1c-a845f9539101.gif#clientId=u56547286-e857-4&amp;from=ui&amp;id=u1671700d&amp;margin=%5Bobject%20Object%5D&amp;name=51946-20190730103200105-567503357.gif&amp;originHeight=77&amp;originWidth=250&amp;originalType=binary&amp;ratio=1&amp;size=75186&amp;status=done&amp;style=none&amp;taskId=u6fa84026-cdb0-4db9-b73c-2e32f667a9a\" width=\"250\" id=\"ASeA5\" class=\"ne-image\"><span class=\"ne-text\"><br /></span><span class=\"ne-text\">一共需要七步。我们用代码描述如下：</span></li></ol><p id=\"u7bbef7f7\" class=\"ne-p\"><br></p><pre data-language=\"javascript\" id=\"dbe50fb8\" class=\"ne-codeblock language-javascript\">function hanoi(plates, source, helper, dest, moves = []) {\n    if (plates &lt;= 0) {\n        return moves\n    }\n    if (plates === 1) {\n        moves.push([source, dest])\n    } else {\n        hanoi(plates - 1, source, dest, helper, moves)\n        moves.push([source, dest])\n        hanoi(plates - 1, helper, source, dest, moves)\n    }\n    return moves\n}</pre><p id=\"ud972f0ea\" class=\"ne-p\"><br></p><p id=\"u20e5eb83\" class=\"ne-p\"><span class=\"ne-text\">下面是执行结果：</span></p><p id=\"u89af3835\" class=\"ne-p\"><br></p><pre data-language=\"javascript\" id=\"0da88584\" class=\"ne-codeblock language-javascript\">console.log(hanoi(3, &quot;source&quot;, &quot;helper&quot;, &quot;dest&quot;))</pre><p id=\"ucb173d94\" class=\"ne-p\"><br></p><pre data-language=\"shell\" id=\"ba5719e9\" class=\"ne-codeblock language-shell\">[\n  [ 'source', 'dest' ],\n  [ 'source', 'helper' ],\n  [ 'dest', 'helper' ],\n  [ 'source', 'dest' ],\n  [ 'helper', 'source' ],\n  [ 'helper', 'dest' ],\n  [ 'source', 'dest' ]\n]</pre><p id=\"u01973810\" class=\"ne-p\"><br></p><p id=\"u47f16649\" class=\"ne-p\"><span class=\"ne-text\">可以试着将 3 改成大一点的数，例如 14，你将会得到如下图一样的结果：<br /></span><img src=\"https://cdn.nlark.com/yuque/0/2022/png/732231/1646367698991-76170915-1cbb-400b-835f-1ffa2ea571a9.png#clientId=u56547286-e857-4&amp;from=paste&amp;id=ucedc4178&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=674&amp;originWidth=633&amp;originalType=url&amp;ratio=1&amp;size=114244&amp;status=done&amp;style=none&amp;taskId=uf2104cf8-948b-425e-8722-38361df3b3d\" width=\"633\" id=\"ddfw6\" class=\"ne-image\"><span class=\"ne-text\"><br /></span><span class=\"ne-text\">如果我们将数改成 64 呢？就像上面第二个故事里所描述的一样。恐怕要令你失望了！这时候你会发现你的程序无法正确返回结果，甚至会由于超出递归调用的嵌套次数而报错。这是由于移动 64 层的汉诺塔所需要的步骤是一个很大的数字，我们在前面的故事中已经描述过了。如果真要实现这个过程，这个小程序恐怕很难做到了。<br /></span><span class=\"ne-text\">搞清楚了汉诺塔的移动过程，我们可以将上面的代码进行扩充，把我们在前面定义的栈的数据结构应用进来，完整的代码如下：</span></p><p id=\"u9e1928e7\" class=\"ne-p\"><br></p><pre data-language=\"javascript\" id=\"953002f8\" class=\"ne-codeblock language-javascript\">function towerOfHanoi(plates, source, helper, dest, sourceName, helperName, destName, moves = []) {\n    if (plates &lt;= 0) {\n        return moves\n    }\n    if (plates === 1) {\n        dest.push(source.pop())\n        const move = {}\n        move[sourceName] = source.toString()\n        move[helperName] = helper.toString()\n        move[destName] = dest.toString()\n        moves.push(move)\n    } else {\n        towerOfHanoi(plates - 1, source, dest, helper, sourceName, destName, helperName, moves)\n        dest.push(source.pop())\n        const move = {}\n        move[sourceName] = source.toString()\n        move[helperName] = helper.toString()\n        move[destName] = dest.toString()\n        moves.push(move)\n        towerOfHanoi(plates - 1, helper, source, dest, helperName, sourceName, destName, moves)\n    }\n    return moves\n}\n\nfunction hanoiStack(plates) {\n    const source = new Stack()\n    const dest = new Stack()\n    const helper = new Stack()\n\n    for (let i = plates; i &gt; 0; i--) {\n        source.push(i)\n    }\n\n    return towerOfHanoi(plates, source, helper, dest, &quot;source&quot;, &quot;helper&quot;, &quot;dest&quot;)\n}</pre><p id=\"ua8a6efc4\" class=\"ne-p\"><br></p><p id=\"uf9352b07\" class=\"ne-p\"><span class=\"ne-text\">我们定义了三个栈，用来表示汉诺塔中的三个针塔，然后按照函数 hanoi()中相同的逻辑来移动这三个栈中的元素。当 plates 的数量为 3 时，执行结果如下：</span></p><p id=\"u0d0ce2e5\" class=\"ne-p\"><br></p><pre data-language=\"plain\" id=\"4bb14506\" class=\"ne-codeblock language-plain\">[\n  {\n    source: '[object Object]',\n    helper: '[object Object]',\n    dest: '[object Object]'\n  },\n  {\n    source: '[object Object]',\n    dest: '[object Object]',\n    helper: '[object Object]'\n  },\n  {\n    dest: '[object Object]',\n    source: '[object Object]',\n    helper: '[object Object]'\n  },\n  {\n    source: '[object Object]',\n    helper: '[object Object]',\n    dest: '[object Object]'\n  },\n  {\n    helper: '[object Object]',\n    dest: '[object Object]',\n    source: '[object Object]'\n  },\n  {\n    helper: '[object Object]',\n    source: '[object Object]',\n    dest: '[object Object]'\n  },\n  {\n    source: '[object Object]',\n    helper: '[object Object]',\n    dest: '[object Object]'\n  }\n]</pre></div>",
  "body_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"traditional\" /><meta name=\"viewport\" content=\"adapt\" /><p data-lake-id=\"u42188a9e\" id=\"u42188a9e\"><a href=\"https://www.cnblogs.com/jaxu/p/11264017.html\" target=\"_blank\" data-lake-id=\"u8217b645\" id=\"u8217b645\"><span data-lake-id=\"u54443c19\" id=\"u54443c19\">链接</span></a><span data-lake-id=\"u198827ec\" id=\"u198827ec\"><br /><br /></span></p><p data-lake-id=\"ub228f267\" id=\"ub228f267\"><br></p><p data-lake-id=\"ub6d120c5\" id=\"ub6d120c5\"><span data-lake-id=\"u1103ab34\" id=\"u1103ab34\">在计算机编程中，栈是一种很常见的数据结构，它遵从后进先出（LIFO——Last In First Out）原则，新添加或待删除的元素保存在栈的同一端，称作栈顶，另一端称作栈底。在栈中，新元素总是靠近栈顶，而旧元素总是接近栈底。<br /></span><span data-lake-id=\"u6c749485\" id=\"u6c749485\">让我们来看看在 JavaScript 中如何实现栈这种数据结构。<br /></span><span data-lake-id=\"ueedefd6c\" id=\"ueedefd6c\">​</span></p><p data-lake-id=\"ua6b7bfa9\" id=\"ua6b7bfa9\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22function%20Stack()%20%7B%5Cn%20%20%20%20let%20items%20%3D%20%5B%5D%5Cn%5Cn%20%20%20%20%2F%2F%20%E5%90%91%E6%A0%88%E6%B7%BB%E5%8A%A0%E6%96%B0%E5%85%83%E7%B4%A0%5Cn%20%20%20%20this.push%20%3D%20function%20(element)%20%7B%5Cn%20%20%20%20%20%20%20%20items.push(element)%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%2F%2F%20%E4%BB%8E%E6%A0%88%E5%86%85%E5%BC%B9%E5%87%BA%E4%B8%80%E4%B8%AA%E5%85%83%E7%B4%A0%5Cn%20%20%20%20this.pop%20%3D%20function%20()%20%7B%5Cn%20%20%20%20%20%20%20%20return%20items.pop()%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%2F%2F%20%E8%BF%94%E5%9B%9E%E6%A0%88%E9%A1%B6%E7%9A%84%E5%85%83%E7%B4%A0%5Cn%20%20%20%20this.peek%20%3D%20function%20()%20%7B%5Cn%20%20%20%20%20%20%20%20return%20items%5Bitems.length%20-%201%5D%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%2F%2F%20%E5%88%A4%E6%96%AD%E6%A0%88%E6%98%AF%E5%90%A6%E4%B8%BA%E7%A9%BA%5Cn%20%20%20%20this.isEmpty%20%3D%20function%20()%20%7B%5Cn%20%20%20%20%20%20%20%20return%20items.length%20%3D%3D%3D%200%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%2F%2F%20%E8%BF%94%E5%9B%9E%E6%A0%88%E7%9A%84%E9%95%BF%E5%BA%A6%5Cn%20%20%20%20this.size%20%3D%20function%20()%20%7B%5Cn%20%20%20%20%20%20%20%20return%20items.length%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%2F%2F%20%E6%B8%85%E7%A9%BA%E6%A0%88%5Cn%20%20%20%20this.clear%20%3D%20function%20()%20%7B%5Cn%20%20%20%20%20%20%20%20items%20%3D%20%5B%5D%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%2F%2F%20%E6%89%93%E5%8D%B0%E6%A0%88%E5%86%85%E7%9A%84%E6%89%80%E6%9C%89%E5%85%83%E7%B4%A0%5Cn%20%20%20%20this.print%20%3D%20function%20()%20%7B%5Cn%20%20%20%20%20%20%20%20console.log(items.toString())%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22302c6bd5%22%7D\"></card><p data-lake-id=\"u76cba884\" id=\"u76cba884\"><br></p><p data-lake-id=\"u9b5076db\" id=\"u9b5076db\"><span data-lake-id=\"uf137b210\" id=\"uf137b210\">我们用最简单的方式定义了一个 Stack 类。在 JavaScript 中，我们用 function 来表示一个类。然后我们在这个类中定义了一些方法，用来模拟栈的操作，以及一些辅助方法。代码很简单，看起来一目了然，接下来我们尝试写一些测试用例来看看这个类的一些用法。</span></p><p data-lake-id=\"u4789729e\" id=\"u4789729e\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22let%20stack%20%3D%20new%20Stack()%5Cnconsole.log(stack.isEmpty())%20%2F%2F%20true%5Cn%5Cnstack.push(5)%5Cnstack.push(8)%5Cnconsole.log(stack.peek())%20%2F%2F%208%5Cn%5Cnstack.push(11)%5Cnconsole.log(stack.size())%20%2F%2F%203%5Cnconsole.log(stack.isEmpty())%20%2F%2F%20false%5Cn%5Cnstack.push(15)%5Cnstack.pop()%5Cnstack.pop()%5Cnconsole.log(stack.size())%20%2F%2F%202%5Cnstack.print()%20%2F%2F%205%2C8%5Cn%5Cnstack.clear()%5Cnstack.print()%20%2F%2F%20undefined%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%220dc5e260%22%7D\"></card><p data-lake-id=\"u8d5c1006\" id=\"u8d5c1006\"><br></p><p data-lake-id=\"u290cb4b7\" id=\"u290cb4b7\"><span data-lake-id=\"u29268939\" id=\"u29268939\">返回结果也和预期的一样！我们成功地用 JavaScript 模拟了栈的实现。但是这里有个小问题，由于我们用 JavaScript 的 function 来模拟类的行为，并且在其中声明了一个私有变量 items，因此这个类的每个实例都会创建一个 items 变量的副本，如果有多个 Stack 类的实例的话，这显然不是最佳方案。我们尝试用 ES6（ECMAScript 6）的语法重写 Stack 类。</span></p><p data-lake-id=\"ue99d0b5c\" id=\"ue99d0b5c\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22class%20Stack%20%7B%5Cn%20%20%20%20constructor()%20%7B%5Cn%20%20%20%20%20%20%20%20this.items%20%3D%20%5B%5D%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20push(element)%20%7B%5Cn%20%20%20%20%20%20%20%20this.items.push(element)%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20pop()%20%7B%5Cn%20%20%20%20%20%20%20%20return%20this.items.pop()%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20peek()%20%7B%5Cn%20%20%20%20%20%20%20%20return%20this.items%5Bthis.items.length%20-%201%5D%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20isEmpty()%20%7B%5Cn%20%20%20%20%20%20%20%20return%20this.items.length%20%3D%3D%3D%200%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20size()%20%7B%5Cn%20%20%20%20%20%20%20%20return%20this.items.length%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20clear()%20%7B%5Cn%20%20%20%20%20%20%20%20this.items%20%3D%20%5B%5D%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20print()%20%7B%5Cn%20%20%20%20%20%20%20%20console.log(this.items.toString())%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22f4e7fe53%22%7D\"></card><p data-lake-id=\"ue9808824\" id=\"ue9808824\"><br></p><p data-lake-id=\"ucee2d344\" id=\"ucee2d344\"><span data-lake-id=\"u1e0c5768\" id=\"u1e0c5768\">没有太大的改变，我们只是用 ES6 的简化语法将上面的 Stack 函数转换成了 Stack 类。类的成员变量只能放到 constructor 构造函数中来声明。虽然代码看起来更像类了，但是成员变量 items 仍然是公有的，我们不希望在类的外部访问 items 变量而对其中的元素进行操作，因为这样会破坏栈这种数据结构的基本特性。我们可以借用 ES6 的 Symbol 来限定变量的作用域。</span></p><p data-lake-id=\"u04ec5541\" id=\"u04ec5541\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22let%20_items%20%3D%20Symbol()%5Cn%5Cnclass%20Stack%20%7B%5Cn%20%20%20%20constructor()%20%7B%5Cn%20%20%20%20%20%20%20%20this%5B_items%5D%20%3D%20%5B%5D%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20push(element)%20%7B%5Cn%20%20%20%20%20%20%20%20this%5B_items%5D.push(element)%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20pop()%20%7B%5Cn%20%20%20%20%20%20%20%20return%20this%5B_items%5D.pop()%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20peek()%20%7B%5Cn%20%20%20%20%20%20%20%20return%20this%5B_items%5D%5Bthis%5B_items%5D.length%20-%201%5D%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20isEmpty()%20%7B%5Cn%20%20%20%20%20%20%20%20return%20this%5B_items%5D.length%20%3D%3D%3D%200%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20size()%20%7B%5Cn%20%20%20%20%20%20%20%20return%20this%5B_items%5D.length%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20clear()%20%7B%5Cn%20%20%20%20%20%20%20%20this%5B_items%5D%20%3D%20%5B%5D%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20print()%20%7B%5Cn%20%20%20%20%20%20%20%20console.log(this%5B_items%5D.toString())%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22c6a5686e%22%7D\"></card><p data-lake-id=\"uf585edb7\" id=\"uf585edb7\"><br></p><p data-lake-id=\"u1b965fae\" id=\"u1b965fae\"><span data-lake-id=\"u9d21f0a4\" id=\"u9d21f0a4\">这样，我们就不能再通过 Stack 类的实例来访问其内部成员变量_items 了。但是仍然可以有变通的方法来访问_items：</span></p><p data-lake-id=\"ua825e673\" id=\"ua825e673\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22let%20stack%20%3D%20new%20Stack()%5Cnlet%20objectSymbols%20%3D%20Object.getOwenPropertySymbols(stack)%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%221643e0b5%22%7D\"></card><p data-lake-id=\"u5a87bd60\" id=\"u5a87bd60\"><br></p><p data-lake-id=\"ue5024f33\" id=\"ue5024f33\"><span data-lake-id=\"u9d22e36e\" id=\"u9d22e36e\">通过 Object.getOwenPropertySymbols()方法，我们可以获取到类的实例中的所有 Symbols 属性，然后就可以对其进行操作了，如此说来，这个方法仍然不能完美实现我们想要的效果。我们可以使用 ES6 的 WeakMap 类来确保 Stack 类的属性是私有的：</span></p><p data-lake-id=\"u26438abf\" id=\"u26438abf\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22const%20items%20%3D%20new%20WeakMap()%5Cn%5Cnclass%20Stack%20%7B%5Cn%20%20%20%20constructor()%20%7B%5Cn%20%20%20%20%20%20%20%20items.set(this%2C%20%5B%5D)%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20push(element)%20%7B%5Cn%20%20%20%20%20%20%20%20let%20s%20%3D%20items.get(this)%5Cn%20%20%20%20%20%20%20%20s.push(element)%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20pop()%20%7B%5Cn%20%20%20%20%20%20%20%20let%20s%20%3D%20items.get(this)%5Cn%20%20%20%20%20%20%20%20return%20s.pop()%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20peek()%20%7B%5Cn%20%20%20%20%20%20%20%20let%20s%20%3D%20items.get(this)%5Cn%20%20%20%20%20%20%20%20return%20s%5Bs.length%20-%201%5D%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20isEmpty()%20%7B%5Cn%20%20%20%20%20%20%20%20return%20items.get(this).length%20%3D%3D%3D%200%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20size()%20%7B%5Cn%20%20%20%20%20%20%20%20return%20items.get(this).length%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20clear()%20%7B%5Cn%20%20%20%20%20%20%20%20items.set(this%2C%20%5B%5D)%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20print()%20%7B%5Cn%20%20%20%20%20%20%20%20console.log(items.get(this).toString())%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22e7544f5f%22%7D\"></card><p data-lake-id=\"u385a4a2f\" id=\"u385a4a2f\"><br></p><p data-lake-id=\"uc262d646\" id=\"uc262d646\"><span data-lake-id=\"u25e63300\" id=\"u25e63300\">现在，items 在 Stack 类里是真正的私有属性了，但是，它是在 Stack 类的外部声明的，这就意味着谁都可以对它进行操作，虽然我们可以将 Stack 类和 items 变量的声明放到</span><a href=\"https://www.w3schools.com/js/js_function_closures.asp\" target=\"_blank\" data-lake-id=\"u11d866da\" id=\"u11d866da\"><span data-lake-id=\"uf9183d9f\" id=\"uf9183d9f\">闭包</span></a><span data-lake-id=\"u60e7a4de\" id=\"u60e7a4de\">中，但是这样却又失去了类本身的一些特性（如扩展类无法继承私有属性）。所以，尽管我们可以用 ES6 的新语法来简化一个类的实现，但是毕竟不能像其它强类型语言一样声明类的私有属性和方法。有许多方法都可以达到相同的效果，但无论是语法还是性能，都会有各自的优缺点。</span></p><p data-lake-id=\"ubd48ecbf\" id=\"ubd48ecbf\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22let%20Stack%20%3D%20(function%20()%20%7B%5Cn%20%20%20%20const%20items%20%3D%20new%20WeakMap()%5Cn%20%20%20%20class%20Stack%20%7B%5Cn%20%20%20%20%20%20%20%20constructor()%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20items.set(this%2C%20%5B%5D)%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%20%20%20%20push(element)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20let%20s%20%3D%20items.get(this)%5Cn%20%20%20%20%20%20%20%20%20%20%20%20s.push(element)%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%20%20%20%20pop()%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20let%20s%20%3D%20items.get(this)%5Cn%20%20%20%20%20%20%20%20%20%20%20%20return%20s.pop()%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%20%20%20%20peek()%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20let%20s%20%3D%20items.get(this)%5Cn%20%20%20%20%20%20%20%20%20%20%20%20return%20s%5Bs.length%20-%201%5D%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%20%20%20%20isEmpty()%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20return%20items.get(this).length%20%3D%3D%3D%200%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%20%20%20%20size()%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20return%20items.get(this).length%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%20%20%20%20clear()%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20items.set(this%2C%20%5B%5D)%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%20%20%20%20print()%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20console.log(items.get(this).toString())%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%7D%5Cn%20%20%20%20return%20Stack%5Cn%7D)()%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22fc869475%22%7D\"></card><p data-lake-id=\"u3bffa476\" id=\"u3bffa476\"><br></p><p data-lake-id=\"uf3833fc8\" id=\"uf3833fc8\"><span data-lake-id=\"u35401dbb\" id=\"u35401dbb\">下面我们来看看栈在实际编程中的应用。</span></p><p data-lake-id=\"u692c4b09\" id=\"u692c4b09\"><br></p><h3 data-lake-id=\"d8936c87\" id=\"d8936c87\"><span data-lake-id=\"u6a9efcae\" id=\"u6a9efcae\">进制转换算法</span></h3><p data-lake-id=\"u7a7397d0\" id=\"u7a7397d0\"><br></p><p data-lake-id=\"ub59be0ca\" id=\"ub59be0ca\"><span data-lake-id=\"u67bddfa2\" id=\"u67bddfa2\">将十进制数字 10 转换成二进制数字，过程大致如下：<br /></span><span data-lake-id=\"uaed963ef\" id=\"uaed963ef\">10 / 2 = 5，余数为 0<br /></span><span data-lake-id=\"ue8a99724\" id=\"ue8a99724\">5 / 2 = 2，余数为 1<br /></span><span data-lake-id=\"u9c5903a7\" id=\"u9c5903a7\">2 / 2 = 1，余数为 0<br /></span><span data-lake-id=\"u4ff7777d\" id=\"u4ff7777d\">1 / 2 = 0, 余数为 1<br /></span><span data-lake-id=\"ucd52c427\" id=\"ucd52c427\">我们将上述每一步的余数颠倒顺序排列起来，就得到转换之后的结果：1010。<br /></span><span data-lake-id=\"u391b6651\" id=\"u391b6651\">按照这个逻辑，我们实现下面的算法：</span></p><p data-lake-id=\"u8b6829f7\" id=\"u8b6829f7\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22function%20divideBy2(decNumber)%20%7B%5Cn%20%20%20%20let%20remStack%20%3D%20new%20Stack()%5Cn%20%20%20%20let%20rem%2C%5Cn%20%20%20%20%20%20%20%20binaryString%20%3D%20%5C%22%5C%22%5Cn%5Cn%20%20%20%20while%20(decNumber%20%3E%200)%20%7B%5Cn%20%20%20%20%20%20%20%20rem%20%3D%20Math.floor(decNumber%20%25%202)%5Cn%20%20%20%20%20%20%20%20remStack.push(rem)%5Cn%20%20%20%20%20%20%20%20decNumber%20%3D%20Math.floor(decNumber%20%2F%202)%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20while%20(!remStack.isEmpty())%20%7B%5Cn%20%20%20%20%20%20%20%20binaryString%20%2B%3D%20remStack.pop().toString()%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20return%20binaryString%5Cn%7D%5Cn%5Cnconsole.log(divideBy2(233))%20%2F%2F%2011101001%5Cnconsole.log(divideBy2(10))%20%2F%2F%201010%5Cnconsole.log(divideBy2(1000))%20%2F%2F%201111101000%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22b03e474c%22%7D\"></card><p data-lake-id=\"u9b9f3170\" id=\"u9b9f3170\"><br></p><p data-lake-id=\"u6149012a\" id=\"u6149012a\"><span data-lake-id=\"uce598e52\" id=\"uce598e52\">Stack 类可以自行引用本文前面定义的任意一个版本。我们将这个函数再进一步抽象一下，使之可以实现任意进制之间的转换。</span></p><p data-lake-id=\"udb325c32\" id=\"udb325c32\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22function%20baseConverter(decNumber%2C%20base)%20%7B%5Cn%20%20%20%20let%20remStack%20%3D%20new%20Stack()%5Cn%20%20%20%20let%20rem%2C%5Cn%20%20%20%20%20%20%20%20baseString%20%3D%20%5C%22%5C%22%5Cn%20%20%20%20let%20digits%20%3D%20%5C%220123456789ABCDEF%5C%22%5Cn%5Cn%20%20%20%20while%20(decNumber%20%3E%200)%20%7B%5Cn%20%20%20%20%20%20%20%20rem%20%3D%20Math.floor(decNumber%20%25%20base)%5Cn%20%20%20%20%20%20%20%20remStack.push(rem)%5Cn%20%20%20%20%20%20%20%20decNumber%20%3D%20Math.floor(decNumber%20%2F%20base)%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20while%20(!remStack.isEmpty())%20%7B%5Cn%20%20%20%20%20%20%20%20baseString%20%2B%3D%20digits%5BremStack.pop()%5D%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20return%20baseString%5Cn%7D%5Cn%5Cnconsole.log(baseConverter(233%2C%202))%20%2F%2F%2011101001%5Cnconsole.log(baseConverter(10%2C%202))%20%2F%2F%201010%5Cnconsole.log(baseConverter(1000%2C%202))%20%2F%2F%201111101000%5Cn%5Cnconsole.log(baseConverter(233%2C%208))%20%2F%2F%20351%5Cnconsole.log(baseConverter(10%2C%208))%20%2F%2F%2012%5Cnconsole.log(baseConverter(1000%2C%208))%20%2F%2F%201750%5Cn%5Cnconsole.log(baseConverter(233%2C%2016))%20%2F%2F%20E9%5Cnconsole.log(baseConverter(10%2C%2016))%20%2F%2F%20A%5Cnconsole.log(baseConverter(1000%2C%2016))%20%2F%2F%203E8%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22398ba59c%22%7D\"></card><p data-lake-id=\"u4ffadafc\" id=\"u4ffadafc\"><br></p><p data-lake-id=\"u666324d9\" id=\"u666324d9\"><span data-lake-id=\"u650ef229\" id=\"u650ef229\">我们定义了一个变量 digits，用来存储各进制转换时每一步的余数所代表的符号。如：二进制转换时余数为 0，对应的符号为 digits[0]，即 0；八进制转换时余数为 7，对应的符号为 digits[7]，即 7；十六进制转换时余数为 11，对应的符号为 digits[11]，即 B。</span></p><p data-lake-id=\"u1fe227c0\" id=\"u1fe227c0\"><br></p><h3 data-lake-id=\"a0e1b915\" id=\"a0e1b915\"><span data-lake-id=\"ucf9a7258\" id=\"ucf9a7258\">汉诺塔</span></h3><p data-lake-id=\"u31670344\" id=\"u31670344\"><br></p><p data-lake-id=\"u80fe1b59\" id=\"u80fe1b59\"><span data-lake-id=\"ucde77dab\" id=\"ucde77dab\">有关汉诺塔的传说和由来，读者可以自行百度。这里有两个和汉诺塔相似的小故事，可以跟大家分享一下。</span></p><p data-lake-id=\"u76c3aefa\" id=\"u76c3aefa\"><br></p><ol list=\"ud15b00f3\"><li fid=\"u3b035b0c\" data-lake-id=\"u92ff5dfb\" id=\"u92ff5dfb\"><span data-lake-id=\"u7b6a8622\" id=\"u7b6a8622\">有一个古老的传说，印度的舍罕王（Shirham）打算重赏国际象棋的发明人和进贡者，宰相西萨·班·达依尔（Sissa Ben Dahir）。这位聪明的大臣的胃口看来并不大，他跪在国王面前说：“陛下，请您在这张棋盘的第一个小格内，赏给我一粒小麦；在第二个小格内给两粒，第三格内给四粒，照这样下去，每一小格内都比前一小格加一倍。陛下啊，把这样摆满棋盘上所有 64 格的麦粒，都赏给您的仆人吧！”。“爱卿。你所求的并不多啊。”国王说道，心里为自己对这样一件奇妙的发明所许下的慷慨赏诺不致破费太多而暗喜。“你当然会如愿以偿的。”说着，他令人把一袋麦子拿到宝座前。计数麦粒的工作开始了。第一格内放一粒，第二格内放两粒，第三格内放四粒，......还没到第二十格，袋子已经空了。一袋又一袋的麦子被扛到国王面前来。但是，麦粒数一格接以各地增长得那样迅速，很快就可以看出，即便拿来全印度的粮食，国王也兑现不了他对西萨·班·达依尔许下的诺言了，因为这需要有 18 446 744 073 709 551 615 颗麦粒呀！<br /></span><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2022%2Fpng%2F732231%2F1646367650655-5a155bd1-4026-4116-948a-bdbb58ed52cd.png%23clientId%3Du56547286-e857-4%26from%3Dpaste%26id%3Du47669f70%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D390%26originWidth%3D583%26originalType%3Durl%26ratio%3D1%26size%3D71874%26status%3Ddone%26style%3Dnone%26taskId%3Du64278ee2-622f-4390-bbfe-e8a172dda41%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A583%2C%22originHeight%22%3A390%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22id%22%3A%22jr7vE%22%7D\"></card><span data-lake-id=\"u986df4ae\" id=\"u986df4ae\"><br /></span><span data-lake-id=\"ua06d425f\" id=\"ua06d425f\">这个故事其实是一个数学级数问题，这位聪明的宰相所要求的麦粒数可以写成数学式子：1 + 2 + 22 + 23 + 24 + ...... 262 + 263<br /></span><span data-lake-id=\"ua6322352\" id=\"ua6322352\">推算出来就是：<br /></span><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2022%2Fpng%2F732231%2F1646367650631-eb8bcd7a-6466-4986-a482-e3d89ffbe20f.png%23clientId%3Du56547286-e857-4%26from%3Dpaste%26id%3Duada7f861%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D86%26originWidth%3D199%26originalType%3Durl%26ratio%3D1%26size%3D2457%26status%3Ddone%26style%3Dnone%26taskId%3Dudb9bd341-20c5-43fb-be5a-85af4ba751a%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A199%2C%22originHeight%22%3A86%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22id%22%3A%22eu7uH%22%7D\"></card><span data-lake-id=\"u7b94e666\" id=\"u7b94e666\"><br /></span><span data-lake-id=\"u6b1d9541\" id=\"u6b1d9541\">其计算结果就是 18 446 744 073 709 551 615，这是一个相当大的数！如果按照这位宰相的要求，需要全世界在 2000 年内所生产的全部小麦才能满足。</span></li><li fid=\"u3b035b0c\" data-lake-id=\"u958d540e\" id=\"u958d540e\"><span data-lake-id=\"ub5a5d6ac\" id=\"ub5a5d6ac\">另外一个故事也是出自印度。在世界中心贝拿勒斯的圣庙里，安放着一个黄铜板，板上插着三根宝石针。每根针高约 1 腕尺，像韭菜叶那样粗细。梵天在创造世界的时候，在其中的一根针上从下到上放下了由大到小的 64 片金片。这就是所谓的梵塔。不论白天黑夜，都有一个值班的僧侣按照梵天不渝的法则，把这些金片在三根针上移来移去：一次只能移一片，并且要求不管在哪一根针上，小片永远在大片的上面。当所有 64 片都从梵天创造世界时所放的那根针上移到另外一根针上时，世界就将在一声霹雳中消灭，梵塔、庙宇和众生都将同归于尽。这其实就是我们要说的汉诺塔问题，和第一个故事一样，要把这座梵塔全部 64 片金片都移到另一根针上，所需要的时间按照数学级数公式计算出来：1 + 2 + 22 + 23 + 24 + ...... 262 + 263 = 264 - 1 = 18 446 744 073 709 551 615<br /></span><span data-lake-id=\"u1f23d15e\" id=\"u1f23d15e\">一年有 31 558 000 秒，假如僧侣们每一秒钟移动一次，日夜不停，节假日照常干，也需要将近 5800 亿年才能完成！<br /></span><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2022%2Fpng%2F732231%2F1646367650656-a3db3098-012f-48b1-9072-363e383678b5.png%23clientId%3Du56547286-e857-4%26from%3Dpaste%26id%3Dua1ee19ac%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D368%26originWidth%3D534%26originalType%3Durl%26ratio%3D1%26size%3D83571%26status%3Ddone%26style%3Dnone%26taskId%3Dud349a5ee-2813-4a8a-8281-378cbe4ace4%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A534%2C%22originHeight%22%3A368%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22id%22%3A%22cdU7M%22%7D\"></card><span data-lake-id=\"ub5e7c2d9\" id=\"ub5e7c2d9\"><br /></span><span data-lake-id=\"u8926f0a7\" id=\"u8926f0a7\">好了，现在让我们来试着实现汉诺塔的算法。<br /></span><span data-lake-id=\"ud441a082\" id=\"ud441a082\">为了说明汉诺塔中每一个小块的移动过程，我们先考虑简单一点的情况。假设汉诺塔只有三层，借用百度百科的图，移动过程如下：<br /></span><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2022%2Fgif%2F732231%2F1646367814670-24dfb426-bdfc-4f30-af1c-a845f9539101.gif%23clientId%3Du56547286-e857-4%26from%3Dui%26id%3Du1671700d%26margin%3D%255Bobject%2520Object%255D%26name%3D51946-20190730103200105-567503357.gif%26originHeight%3D77%26originWidth%3D250%26originalType%3Dbinary%26ratio%3D1%26size%3D75186%26status%3Ddone%26style%3Dnone%26taskId%3Du6fa84026-cdb0-4db9-b73c-2e32f667a9a%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A250%2C%22originHeight%22%3A77%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22id%22%3A%22ASeA5%22%7D\"></card><span data-lake-id=\"uf7953c9b\" id=\"uf7953c9b\"><br /></span><span data-lake-id=\"u2835e069\" id=\"u2835e069\">一共需要七步。我们用代码描述如下：</span></li></ol><p data-lake-id=\"u7bbef7f7\" id=\"u7bbef7f7\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22function%20hanoi(plates%2C%20source%2C%20helper%2C%20dest%2C%20moves%20%3D%20%5B%5D)%20%7B%5Cn%20%20%20%20if%20(plates%20%3C%3D%200)%20%7B%5Cn%20%20%20%20%20%20%20%20return%20moves%5Cn%20%20%20%20%7D%5Cn%20%20%20%20if%20(plates%20%3D%3D%3D%201)%20%7B%5Cn%20%20%20%20%20%20%20%20moves.push(%5Bsource%2C%20dest%5D)%5Cn%20%20%20%20%7D%20else%20%7B%5Cn%20%20%20%20%20%20%20%20hanoi(plates%20-%201%2C%20source%2C%20dest%2C%20helper%2C%20moves)%5Cn%20%20%20%20%20%20%20%20moves.push(%5Bsource%2C%20dest%5D)%5Cn%20%20%20%20%20%20%20%20hanoi(plates%20-%201%2C%20helper%2C%20source%2C%20dest%2C%20moves)%5Cn%20%20%20%20%7D%5Cn%20%20%20%20return%20moves%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22dbe50fb8%22%7D\"></card><p data-lake-id=\"ud972f0ea\" id=\"ud972f0ea\"><br></p><p data-lake-id=\"u20e5eb83\" id=\"u20e5eb83\"><span data-lake-id=\"u49de4974\" id=\"u49de4974\">下面是执行结果：</span></p><p data-lake-id=\"u89af3835\" id=\"u89af3835\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22console.log(hanoi(3%2C%20%5C%22source%5C%22%2C%20%5C%22helper%5C%22%2C%20%5C%22dest%5C%22))%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%220da88584%22%7D\"></card><p data-lake-id=\"ucb173d94\" id=\"ucb173d94\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22shell%22%2C%22code%22%3A%22%5B%5Cn%20%20%5B%20'source'%2C%20'dest'%20%5D%2C%5Cn%20%20%5B%20'source'%2C%20'helper'%20%5D%2C%5Cn%20%20%5B%20'dest'%2C%20'helper'%20%5D%2C%5Cn%20%20%5B%20'source'%2C%20'dest'%20%5D%2C%5Cn%20%20%5B%20'helper'%2C%20'source'%20%5D%2C%5Cn%20%20%5B%20'helper'%2C%20'dest'%20%5D%2C%5Cn%20%20%5B%20'source'%2C%20'dest'%20%5D%5Cn%5D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22ba5719e9%22%7D\"></card><p data-lake-id=\"u01973810\" id=\"u01973810\"><br></p><p data-lake-id=\"u47f16649\" id=\"u47f16649\"><span data-lake-id=\"uf2ffa375\" id=\"uf2ffa375\">可以试着将 3 改成大一点的数，例如 14，你将会得到如下图一样的结果：<br /></span><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2022%2Fpng%2F732231%2F1646367698991-76170915-1cbb-400b-835f-1ffa2ea571a9.png%23clientId%3Du56547286-e857-4%26from%3Dpaste%26id%3Ducedc4178%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D674%26originWidth%3D633%26originalType%3Durl%26ratio%3D1%26size%3D114244%26status%3Ddone%26style%3Dnone%26taskId%3Duf2104cf8-948b-425e-8722-38361df3b3d%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A633%2C%22originHeight%22%3A674%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22id%22%3A%22ddfw6%22%7D\"></card><span data-lake-id=\"u685ae20a\" id=\"u685ae20a\"><br /></span><span data-lake-id=\"u2e021927\" id=\"u2e021927\">如果我们将数改成 64 呢？就像上面第二个故事里所描述的一样。恐怕要令你失望了！这时候你会发现你的程序无法正确返回结果，甚至会由于超出递归调用的嵌套次数而报错。这是由于移动 64 层的汉诺塔所需要的步骤是一个很大的数字，我们在前面的故事中已经描述过了。如果真要实现这个过程，这个小程序恐怕很难做到了。<br /></span><span data-lake-id=\"ub3c3ed14\" id=\"ub3c3ed14\">搞清楚了汉诺塔的移动过程，我们可以将上面的代码进行扩充，把我们在前面定义的栈的数据结构应用进来，完整的代码如下：</span></p><p data-lake-id=\"u9e1928e7\" id=\"u9e1928e7\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22function%20towerOfHanoi(plates%2C%20source%2C%20helper%2C%20dest%2C%20sourceName%2C%20helperName%2C%20destName%2C%20moves%20%3D%20%5B%5D)%20%7B%5Cn%20%20%20%20if%20(plates%20%3C%3D%200)%20%7B%5Cn%20%20%20%20%20%20%20%20return%20moves%5Cn%20%20%20%20%7D%5Cn%20%20%20%20if%20(plates%20%3D%3D%3D%201)%20%7B%5Cn%20%20%20%20%20%20%20%20dest.push(source.pop())%5Cn%20%20%20%20%20%20%20%20const%20move%20%3D%20%7B%7D%5Cn%20%20%20%20%20%20%20%20move%5BsourceName%5D%20%3D%20source.toString()%5Cn%20%20%20%20%20%20%20%20move%5BhelperName%5D%20%3D%20helper.toString()%5Cn%20%20%20%20%20%20%20%20move%5BdestName%5D%20%3D%20dest.toString()%5Cn%20%20%20%20%20%20%20%20moves.push(move)%5Cn%20%20%20%20%7D%20else%20%7B%5Cn%20%20%20%20%20%20%20%20towerOfHanoi(plates%20-%201%2C%20source%2C%20dest%2C%20helper%2C%20sourceName%2C%20destName%2C%20helperName%2C%20moves)%5Cn%20%20%20%20%20%20%20%20dest.push(source.pop())%5Cn%20%20%20%20%20%20%20%20const%20move%20%3D%20%7B%7D%5Cn%20%20%20%20%20%20%20%20move%5BsourceName%5D%20%3D%20source.toString()%5Cn%20%20%20%20%20%20%20%20move%5BhelperName%5D%20%3D%20helper.toString()%5Cn%20%20%20%20%20%20%20%20move%5BdestName%5D%20%3D%20dest.toString()%5Cn%20%20%20%20%20%20%20%20moves.push(move)%5Cn%20%20%20%20%20%20%20%20towerOfHanoi(plates%20-%201%2C%20helper%2C%20source%2C%20dest%2C%20helperName%2C%20sourceName%2C%20destName%2C%20moves)%5Cn%20%20%20%20%7D%5Cn%20%20%20%20return%20moves%5Cn%7D%5Cn%5Cnfunction%20hanoiStack(plates)%20%7B%5Cn%20%20%20%20const%20source%20%3D%20new%20Stack()%5Cn%20%20%20%20const%20dest%20%3D%20new%20Stack()%5Cn%20%20%20%20const%20helper%20%3D%20new%20Stack()%5Cn%5Cn%20%20%20%20for%20(let%20i%20%3D%20plates%3B%20i%20%3E%200%3B%20i--)%20%7B%5Cn%20%20%20%20%20%20%20%20source.push(i)%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20return%20towerOfHanoi(plates%2C%20source%2C%20helper%2C%20dest%2C%20%5C%22source%5C%22%2C%20%5C%22helper%5C%22%2C%20%5C%22dest%5C%22)%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22953002f8%22%7D\"></card><p data-lake-id=\"ua8a6efc4\" id=\"ua8a6efc4\"><br></p><p data-lake-id=\"uf9352b07\" id=\"uf9352b07\"><span data-lake-id=\"ue9cf7708\" id=\"ue9cf7708\">我们定义了三个栈，用来表示汉诺塔中的三个针塔，然后按照函数 hanoi()中相同的逻辑来移动这三个栈中的元素。当 plates 的数量为 3 时，执行结果如下：</span></p><p data-lake-id=\"u0d0ce2e5\" id=\"u0d0ce2e5\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22plain%22%2C%22code%22%3A%22%5B%5Cn%20%20%7B%5Cn%20%20%20%20source%3A%20'%5Bobject%20Object%5D'%2C%5Cn%20%20%20%20helper%3A%20'%5Bobject%20Object%5D'%2C%5Cn%20%20%20%20dest%3A%20'%5Bobject%20Object%5D'%5Cn%20%20%7D%2C%5Cn%20%20%7B%5Cn%20%20%20%20source%3A%20'%5Bobject%20Object%5D'%2C%5Cn%20%20%20%20dest%3A%20'%5Bobject%20Object%5D'%2C%5Cn%20%20%20%20helper%3A%20'%5Bobject%20Object%5D'%5Cn%20%20%7D%2C%5Cn%20%20%7B%5Cn%20%20%20%20dest%3A%20'%5Bobject%20Object%5D'%2C%5Cn%20%20%20%20source%3A%20'%5Bobject%20Object%5D'%2C%5Cn%20%20%20%20helper%3A%20'%5Bobject%20Object%5D'%5Cn%20%20%7D%2C%5Cn%20%20%7B%5Cn%20%20%20%20source%3A%20'%5Bobject%20Object%5D'%2C%5Cn%20%20%20%20helper%3A%20'%5Bobject%20Object%5D'%2C%5Cn%20%20%20%20dest%3A%20'%5Bobject%20Object%5D'%5Cn%20%20%7D%2C%5Cn%20%20%7B%5Cn%20%20%20%20helper%3A%20'%5Bobject%20Object%5D'%2C%5Cn%20%20%20%20dest%3A%20'%5Bobject%20Object%5D'%2C%5Cn%20%20%20%20source%3A%20'%5Bobject%20Object%5D'%5Cn%20%20%7D%2C%5Cn%20%20%7B%5Cn%20%20%20%20helper%3A%20'%5Bobject%20Object%5D'%2C%5Cn%20%20%20%20source%3A%20'%5Bobject%20Object%5D'%2C%5Cn%20%20%20%20dest%3A%20'%5Bobject%20Object%5D'%5Cn%20%20%7D%2C%5Cn%20%20%7B%5Cn%20%20%20%20source%3A%20'%5Bobject%20Object%5D'%2C%5Cn%20%20%20%20helper%3A%20'%5Bobject%20Object%5D'%2C%5Cn%20%20%20%20dest%3A%20'%5Bobject%20Object%5D'%5Cn%20%20%7D%5Cn%5D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%224bb14506%22%7D\"></card>",
  "body_draft_lake": "",
  "public": 0,
  "status": 1,
  "view_status": 0,
  "read_status": 1,
  "likes_count": 0,
  "comments_count": 0,
  "content_updated_at": "2022-03-04T07:17:54.000Z",
  "deleted_at": null,
  "created_at": "2020-08-09T08:04:02.000Z",
  "updated_at": "2022-03-04T07:17:54.000Z",
  "published_at": "2022-03-04T07:17:54.000Z",
  "first_published_at": "2020-08-09T08:04:02.000Z",
  "word_count": 3285,
  "cover": null,
  "description": "链接在计算机编程中，栈是一种很常见的数据结构，它遵从后进先出（LIFO——Last In First Out）原则，新添加或待删除的元素保存在栈的同一端，称作栈顶，另一端称作栈底。在栈中，新元素总是靠近栈顶，而旧元素总是接近栈底。让我们来看看在 JavaScript 中如何实现栈这种数据结构。...",
  "custom_description": null,
  "hits": 0,
  "_serializer": "v2.doc_detail"
}