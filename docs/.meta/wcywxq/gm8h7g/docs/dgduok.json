{
  "id": 11435966,
  "slug": "dgduok",
  "title": "图",
  "book_id": 24854102,
  "book": {
    "id": 24854102,
    "type": "Book",
    "slug": "gm8h7g",
    "name": "算法 algorithm",
    "user_id": 732231,
    "description": "算法基础、leetCode",
    "creator_id": 732231,
    "public": 0,
    "items_count": 18,
    "likes_count": 0,
    "watches_count": 1,
    "content_updated_at": "2023-11-11T18:15:30.855Z",
    "updated_at": "2023-11-11T18:15:31.000Z",
    "created_at": "2022-02-21T07:49:26.000Z",
    "namespace": "wcywxq/gm8h7g",
    "user": {
      "id": 732231,
      "type": "User",
      "login": "wcywxq",
      "name": "magic",
      "description": null,
      "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/732231/1606968271774-avatar/886ad88b-d2cc-4c9e-a674-f70eb51a679c.png",
      "books_count": 18,
      "public_books_count": 0,
      "followers_count": 0,
      "following_count": 0,
      "created_at": "2020-01-08T14:21:31.000Z",
      "updated_at": "2023-11-13T09:32:35.000Z",
      "_serializer": "v2.user"
    },
    "_serializer": "v2.book"
  },
  "user_id": 732231,
  "creator": {
    "id": 732231,
    "type": "User",
    "login": "wcywxq",
    "name": "magic",
    "description": null,
    "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/732231/1606968271774-avatar/886ad88b-d2cc-4c9e-a674-f70eb51a679c.png",
    "books_count": 18,
    "public_books_count": 0,
    "followers_count": 0,
    "following_count": 0,
    "created_at": "2020-01-08T14:21:31.000Z",
    "updated_at": "2023-11-13T09:32:35.000Z",
    "_serializer": "v2.user"
  },
  "format": "lake",
  "body": "[链接](https://www.cnblogs.com/jaxu/p/11338294.html)\n\n在计算机科学中，图是一种网络结构的抽象模型，它是一组由边连接的顶点组成。一个图 `G = (V, E)`由以下元素组成：\n\n- V：一组顶点\n- E：一组边，连接 V 中的顶点\n\n下图表示了一个图的结构：<br />![image.png](https://cdn.nlark.com/yuque/0/2022/png/732231/1646359057027-63af84f0-687b-43ac-8c8a-8be0ee50fd7e.png#clientId=u798dd5a7-9dbb-4&from=paste&id=ua740d26a&margin=%5Bobject%20Object%5D&name=image.png&originHeight=304&originWidth=439&originalType=url&ratio=1&size=18355&status=done&style=none&taskId=u81764242-bb39-41af-a0b8-a002e0329e3#averageHue=%23f9f9f9&id=Jd4mS&originHeight=304&originWidth=439&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)<br />在介绍如何用 JavaScript 实现图之前，我们先介绍一些和图相关的术语。<br />如上图所示，由一条边连接在一起的顶点称为**相邻顶点**，A 和 B 是相邻顶点，A 和 D 是相邻顶点，A 和 C 是相邻顶点......A 和 E 是不相邻顶点。一个顶点的**度**是其相邻顶点的数量，A 和其它三个顶点相连，所以 A 的度为 3，E 和其它两个顶点相连，所以 E 的度为 2......**路径**是一组相邻顶点的连续序列，如上图中包含路径 ABEI、路径 ACDG、路径 ABE、路径 ACDH 等。**简单路径**要求路径中不包含有重复的顶点，如果将**环**的最后一个顶点去掉，它也是一个简单路径。例如路径 ADCA 是一个环，它不是一个简单路径，如果将路径中的最后一个顶点 A 去掉，那么它就是一个简单路径。如果图中不存在环，则称该图是**无环的**。如果图中任何两个顶点间都存在路径，则该图是**连通的**，如上图就是一个连通图。如果图的边没有方向，则该图是**无向图**，上图所示为无向图，反之则称为**有向图**，下图所示为有向图：<br />\n\n![image.png](https://cdn.nlark.com/yuque/0/2022/png/732231/1646359204782-45e54d18-2341-48fa-bdc4-2d96b4a94202.png#clientId=u798dd5a7-9dbb-4&from=paste&id=uee32e657&margin=%5Bobject%20Object%5D&name=image.png&originHeight=290&originWidth=423&originalType=url&ratio=1&size=18892&status=done&style=none&taskId=ufeba9f93-c4d6-4dc6-b71c-ae1fbe3bb20#averageHue=%23f7f7f7&id=gTavA&originHeight=290&originWidth=423&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)<br />在有向图中，如果两个顶点间在双向上都存在路径，则称这两个顶点是**强连通**的，如上图中 C 和 D 是强连通的，而 A 和 B 是非强连通的。如果有向图中的任何两个顶点间在双向上都存在路径，则该有向图是**强连通的**，非强连通的图也称为**稀疏图**。<br />此外，图还可以是**加权的**。前面我们看到的图都是**未加权的**，下图为一个加权的图：<br />![image.png](https://cdn.nlark.com/yuque/0/2022/png/732231/1646359204782-be3407f1-9aff-42bc-8206-849976186cc5.png#clientId=u798dd5a7-9dbb-4&from=paste&id=u54eef93d&margin=%5Bobject%20Object%5D&name=image.png&originHeight=290&originWidth=416&originalType=url&ratio=1&size=19618&status=done&style=none&taskId=uac9ea293-54c1-45b9-97c9-bf89598461e#averageHue=%23f7f7f7&id=VPtOy&originHeight=290&originWidth=416&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)<br />可以想象一下，前面我们介绍的[树](https://www.cnblogs.com/jaxu/p/11309385.html)和[链表](https://www.cnblogs.com/jaxu/p/11277732.html)也属于图的一种特殊形式。图在计算机科学中的应用十分广泛，例如我们可以搜索图中的一个特定顶点或一条特定的边，或者寻找两个顶点间的路径以及最短路径，检测图中是否存在环等等。<br />存在多种不同的方式来实现图的数据结构，下面介绍几种常用的方式。<br />\n\n<a name=\"7e76b5ae\"></a>\n### 邻接矩阵\n\n在邻接矩阵中，我们用一个二维数组来表示图中顶点之间的连接，如果两个顶点之间存在连接，则这两个顶点对应的二维数组下标的元素的值为 1，否则为 0。下图是用邻接矩阵方式表示的图：<br />![image.png](https://cdn.nlark.com/yuque/0/2022/png/732231/1646359226265-8f9cea7c-3845-4ed4-88b7-81e5af6a0f9b.png#clientId=u798dd5a7-9dbb-4&from=paste&id=u38f083b2&margin=%5Bobject%20Object%5D&name=image.png&originHeight=348&originWidth=642&originalType=url&ratio=1&size=28876&status=done&style=none&taskId=u4d6fff9e-f3aa-415d-9855-4ff24e42ad8#averageHue=%23f7f7f7&id=wlRok&originHeight=348&originWidth=642&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)<br />如果是加权的图，我们可以将邻接矩阵中二维数组里的值 1 改成对应的加权数。邻接矩阵方式存在一个缺点，如果图是非强连通的，则二维数组中会有很多的 0，这表示我们使用了很多的存储空间来表示根本不存在的边。另一个缺点就是当图的顶点发生改变时，对于二维数组的修改会变得不太灵活。\n\n<a name=\"3f1e1131\"></a>\n### 邻接表\n\n图的另外一种实现方式是邻接表，它是对邻接矩阵的一种改进。邻接表由图中每个顶点的相邻顶点列表所组成。如下图所示，我们可以用数组、链表、字典或散列表来表示邻接表。<br />![image.png](https://cdn.nlark.com/yuque/0/2022/png/732231/1646359226296-96283b12-d7fd-44bb-8960-5b82cf258204.png#clientId=u798dd5a7-9dbb-4&from=paste&id=uaaa23eb3&margin=%5Bobject%20Object%5D&name=image.png&originHeight=358&originWidth=633&originalType=url&ratio=1&size=27109&status=done&style=none&taskId=u49b517d3-e5bf-4293-9cfb-5718f478568#averageHue=%23f9f9f9&id=m8eMN&originHeight=358&originWidth=633&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)\n\n<a name=\"6b638f34\"></a>\n### 关联矩阵\n\n我们还可以用关联矩阵来表示图。在关联矩阵中，矩阵的行表示顶点，列表示边。关联矩阵通常用于边的数量比顶点多的情况下，以节省存储空间。如下图所示为关联矩阵方式表示的图：<br />![image.png](https://cdn.nlark.com/yuque/0/2022/png/732231/1646359226362-2c31bf00-76bb-4511-a668-ec07ef77921e.png#clientId=u798dd5a7-9dbb-4&from=paste&id=u5a488b89&margin=%5Bobject%20Object%5D&name=image.png&originHeight=353&originWidth=730&originalType=url&ratio=1&size=32692&status=done&style=none&taskId=u216fca26-b4df-47c1-81d8-40de0ffaafb#averageHue=%23f7f7f7&id=PUJb5&originHeight=353&originWidth=730&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)<br />下面我们重点看下如何用邻接表的方式表示图。我们的 Graph 类的骨架如下，它用邻接表方式来实现无向图：<br />\n\n```javascript\nclass Graph {\n    constructor() {\n        this.vertices = [] // 用来存放图中的顶点\n        this.adjList = new Dictionary() // 用来存放图中的边\n    }\n\n    // 向图中添加一个新顶点\n    addVertex(v) {}\n\n    // 向图中添加a和b两个顶点之间的边\n    addEdge(a, b) {}\n}\n```\n\n在 Graph 类中，我们用数组 vertices 来保存图中的所有顶点，用字典（请参考[《JavaScript 数据结构——字典和散列表的实现》](https://www.cnblogs.com/jaxu/p/11302315.html)一文中的 Dictionary 类）adjList 来保存图中每一个顶点到相邻顶点的关系列表，在字典中，顶点被作为键值。请参考前面我们给出的邻接表的示意图。然后在 Graph 类中，我们提供两个方法，方法 addVertex()用来向图中添加一个新顶点，方法 addEdge()用来向图中添加给定的顶点 a 和顶点 b 之间的边。让我们来看下这两个方法的实现。\n\n```javascript\naddVertex (v) {\n    if (!this.vertices.includes(v)) {\n        this.vertices.push(v);\n        this.adjList.set(v, []);\n    }\n}\n```\n\n要添加一个新顶点，首先要判断该顶点在图中是否已经存在了，如果已经存在则不能添加。如果不存在，就在 vertices 数组中添加一个新元素，然后在字典 adjList 中添加一个以该顶点作为 key 的新元素，值为空数组。\n\n```javascript\naddEdge (a, b) {\n    // 如果图中没有顶点a，先添加顶点a\n    if (!this.adjList.has(a)) {\n        this.addVertex(a);\n    }\n    // 如果图中没有顶点b，先添加顶点b\n    if (!this.adjList.has(b)) {\n        this.addVertex(b);\n    }\n\n    this.adjList.get(a).push(b); // 在顶点a中添加指向顶点b的边\n    this.adjList.get(b).push(a); // 在顶点b中添加指向顶点a的边\n}\n```\n\naddEdge()方法也很简单，首先要确保给定的两个顶点 a 和 b 在图中必须存在，如果不存在，则调用 addVertex()方法进行添加，然后分别在字典中找到键值为顶点 a 和键值为顶点 b 的元素，在对应的值中添加一个新元素。<br />下面是 Graph 类的完整代码，其中的 toString()方法是为了我们测试用的，它的存在不是必须的。\n\n```javascript\nclass Graph {\n    constructor() {\n        this.vertices = [] // 用来存放图中的顶点\n        this.adjList = new Dictionary() // 用来存放图中的边\n    }\n\n    // 向图中添加一个新顶点\n    addVertex(v) {\n        if (!this.vertices.includes(v)) {\n            this.vertices.push(v)\n            this.adjList.set(v, [])\n        }\n    }\n\n    // 向图中添加a和b两个顶点之间的边\n    addEdge(a, b) {\n        // 如果图中没有顶点a，先添加顶点a\n        if (!this.adjList.has(a)) {\n            this.addVertex(a)\n        }\n        // 如果图中没有顶点b，先添加顶点b\n        if (!this.adjList.has(b)) {\n            this.addVertex(b)\n        }\n\n        this.adjList.get(a).push(b) // 在顶点a中添加指向顶点b的边\n        this.adjList.get(b).push(a) // 在顶点b中添加指向顶点a的边\n    }\n\n    // 获取图的vertices\n    getVertices() {\n        return this.vertices\n    }\n\n    // 获取图中的adjList\n    getAdjList() {\n        return this.adjList\n    }\n\n    toString() {\n        let s = \"\"\n        this.vertices.forEach(v => {\n            s += `${v} -> `\n            this.adjList.get(v).forEach(n => {\n                s += `${n} `\n            })\n            s += \"\\n\"\n        })\n        return s\n    }\n}\n```\n\n对于本文一开始给出的图，我们添加下面的测试用例：\n\n```javascript\nlet graph = new Graph()\nlet myVertices = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\"]\nmyVertices.forEach(v => {\n    graph.addVertex(v)\n})\ngraph.addEdge(\"A\", \"B\")\ngraph.addEdge(\"A\", \"C\")\ngraph.addEdge(\"A\", \"D\")\ngraph.addEdge(\"C\", \"D\")\ngraph.addEdge(\"C\", \"G\")\ngraph.addEdge(\"D\", \"G\")\ngraph.addEdge(\"D\", \"H\")\ngraph.addEdge(\"B\", \"E\")\ngraph.addEdge(\"B\", \"F\")\ngraph.addEdge(\"E\", \"I\")\n\nconsole.log(graph.toString())\n```\n\n下面是测试结果：\n\n```javascript\nA -> B C D\nB -> A E F\nC -> A D G\nD -> A C G H\nE -> B I\nF -> B\nG -> C D\nH -> D\nI -> E\n```\n\n可以看到，与示意图是相符合的。<br />和[树](https://www.cnblogs.com/jaxu/p/11309385.html)类似，我们也可以对图进行遍历，以访问图中的所有顶点。图的遍历方式分为两种：**广度优先**（Breadth-First Search，BFS）和**深度优先**（Depth-First Search，DFS）。对图的遍历可以用来寻找特定的顶点或两个顶点之间的最短路径，以及检查图是否连通、图中是否含有环等。\n\n| **算法** | **数据结构** | **描述** |\n| --- | --- | --- |\n| 深度优先 | 栈 | 将图的顶点存入栈中（有关栈的介绍可以参考[《JavaScript 数据结构——栈的实现与应用》](https://www.cnblogs.com/jaxu/p/11264017.html) |\n| ），顶点是沿着路径被探索的，存在新的相邻顶点就去访问。 |  |  |\n| 广度优先 | 队列 | 将图的顶点存入队列中（有关队列的介绍可以参考[《JavaScript 数据结构——队列的实现与应用》](https://www.cnblogs.com/jaxu/p/11268862.html) |\n| ），最先入队列的顶点先被探索。 |  |  |\n\n\n在接下来要实现的算法中，我们按照如下的约定对图中的顶点进行遍历，每个顶点最多访问两次：\n\n- 白色：表示该顶点未被访问。\n- 灰色：表示该顶点被访问过，但未被探索。\n- 黑色：表示该顶点被访问并且被探索过。\n\n\n\n<a name=\"274c2782\"></a>\n### 广度优先\n\n广度优先算法会从指定的第一个顶点开始遍历图，先访问这个顶点的所有相邻顶点，然后再访问这些相邻顶点的相邻顶点，以此类推。最终，广度优先算法会先广后深地访问图中的所有顶点。下面是广度优先遍历的示意图：<br />![image.png](https://cdn.nlark.com/yuque/0/2022/png/732231/1646359383875-9a363ae2-7439-49a4-b554-442c57770ccd.png#clientId=u798dd5a7-9dbb-4&from=paste&id=u0c0cb847&margin=%5Bobject%20Object%5D&name=image.png&originHeight=476&originWidth=438&originalType=url&ratio=1&size=33943&status=done&style=none&taskId=u658bc8b2-11eb-4d9a-a7fa-06fc6031f5d#averageHue=%23f7f7f7&id=xITTe&originHeight=476&originWidth=438&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)<br />由于我们采用邻接表的方式来存储图的数据，对于图的每个顶点，都有一个字典与之对应，字典的键值为顶点的值，字典的内容为与该顶点相邻的顶点列表。基于这种数据结构，我们可以考虑将所有顶点的邻接顶点存入队列，然后依次处理队列中的顶点。下面是具体的遍历步骤：\n\n1. 将开始顶点存入队列。\n2. 遍历开始顶点的所有邻接顶点，如果这些邻接顶点没有被访问过（颜色为白色），则将它们标记为被访问（颜色为灰色），然后加入队列。\n3. 将开始顶点标记为被处理（颜色为黑色）。\n4. 循环处理队列中的顶点，直到队列为空。\n\n下面是该算法的具体实现：\n\n```javascript\nlet Colors = {\n    WHITE: 0,\n    GREY: 1,\n    BLACK: 2\n}\n\nlet initializeColor = vertices => {\n    let color = {}\n    vertices.forEach(v => (color[v] = Colors.WHITE))\n    return color\n}\n\nlet breadthFirstSearch = (graph, startVertex, callback) => {\n    let vertices = graph.getVertices()\n    let adjList = graph.getAdjList()\n    let color = initializeColor(vertices)\n    let queue = new Queue()\n\n    queue.enqueue(startVertex)\n\n    while (!queue.isEmpty()) {\n        let u = queue.dequeue()\n        adjList.get(u).forEach(n => {\n            if (color[n] === Colors.WHITE) {\n                color[n] = Colors.GREY\n                queue.enqueue(n)\n            }\n        })\n\n        color[u] = Colors.BLACK\n        if (callback) callback(u)\n    }\n}\n```\n\nbreadthFirstSearch()方法接收一个 graph 对象，图的数据通过该对象传入。参数 startVertex 指定了遍历的起始顶点。回调函数 callback 规定了要如何处理被遍历到的顶点。<br />首先通过 initializeColor()函数将所有的顶点标记为未被访问过（颜色为白色），这些颜色保存在以顶点值为 key 的 color 对象中。图的 vertices 和 adjList 属性可以通过 getVertices()和 getAdjList()方法得到，然后构造一个队列 queue（有关队列类 Queue 请参考[《JavaScript 数据结构——队列的实现与应用》](https://www.cnblogs.com/jaxu/p/11268862.html)），按照上面描述的步骤对图的顶点进行遍历。<br />在前面我们给出的测试用例的基础上，添加下面的代码，来看看 breadthFirstSearch()方法的执行结果：\n\n```javascript\nbreadthFirstSearch(graph, \"A\", value => console.log(`visited vertex: ${value}`))\n```\n\n参数 graph 为前面测试用例中 Graph 类的实例，也就是我们用来保存图的数据的对象，'A'被作为遍历的起始顶点，在回调函数中，打印一行文本，用来展示顶点被遍历的顺序。下面是测试结果：\n\n```javascript\nvisited vertex: A\nvisited vertex: B\nvisited vertex: C\nvisited vertex: D\nvisited vertex: E\nvisited vertex: F\nvisited vertex: G\nvisited vertex: H\nvisited vertex: I\n```\n\n尝试将'I'作为起始顶点，看看执行结果：\n\n```javascript\nvisited vertex: I\nvisited vertex: E\nvisited vertex: B\nvisited vertex: A\nvisited vertex: F\nvisited vertex: C\nvisited vertex: D\nvisited vertex: G\nvisited vertex: H\n```\n\n为了方便理解，我们将顶点 I 放到最上面。从顶点 I 开始，首先遍历到的是它的相邻顶点 E，然后是 E 的相邻顶点 B，其次是 B 的相邻顶点 A 和 F，A 的相邻顶点 C 和 D，C 的相邻顶点 G（D 已经被遍历过了），最后是 D 的相邻顶点 H（C 和 G 已经被遍历过了）。<br />![image.png](https://cdn.nlark.com/yuque/0/2022/png/732231/1646359485089-46d19b10-8906-49a2-accd-5151e03c3716.png#clientId=u798dd5a7-9dbb-4&from=paste&id=u5b3b336f&margin=%5Bobject%20Object%5D&name=image.png&originHeight=298&originWidth=412&originalType=url&ratio=1&size=18082&status=done&style=none&taskId=u3d9e91c2-b651-4a12-848d-2ad7d01ed4c#id=SRyW5&originHeight=298&originWidth=412&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)\n\n<a name=\"603d9318\"></a>\n#### 寻找最短路径\n\n前面展示了广度优先算法的工作原理，我们可以使用它做更多的事情，例如在一个图 G 中，从顶点 v 开始到其它所有顶点间的最短距离。我们考虑一下如何用 BFS 来实现寻找最短路径。<br />假设两个相邻顶点间的距离为 1，从顶点 v 开始，在其路径上每经过一个顶点，距离加 1。下面是对 breadthFirstSearch()方法的改进，用来返回从起始顶点开始到其它所有顶点间的距离，以及所有顶点的前置顶点。\n\n```javascript\nlet BFS = (graph, startVertex) => {\n    let vertices = graph.getVertices()\n    let adjList = graph.getAdjList()\n    let color = initializeColor(vertices)\n    let queue = new Queue()\n    let distances = {}\n    let predecessors = {}\n\n    queue.enqueue(startVertex)\n\n    // 初始化所有顶点的距离为0，前置节点为null\n    vertices.forEach(v => {\n        distances[v] = 0\n        predecessors[v] = null\n    })\n\n    while (!queue.isEmpty()) {\n        let u = queue.dequeue()\n        adjList.get(u).forEach(n => {\n            if (color[n] === Colors.WHITE) {\n                color[n] = Colors.GREY\n                distances[n] = distances[u] + 1\n                predecessors[n] = u\n                queue.enqueue(n)\n            }\n        })\n\n        color[u] = Colors.BLACK\n    }\n\n    return { distances, predecessors }\n}\n```\n\n在 BFS()方法中，我们定义了两个对象 distances 和 predecessors，用来保存从起始顶点出发到其它所有顶点的距离以及这些顶点的前置顶点。BFS()方法不需要 callback 回调函数，因为它会自行输出最终结果。与 breadthFirstSearch()方法的逻辑类似，只不过在开始的时候将所有顶点的距离初始化为 0，前置顶点初始化为 null，然后在遍历的过程中，重新设置顶点的 distances 值和 predecessors 值。我们仍然将顶点 A 作为起始顶点，来看看测试结果：\n\n```javascript\nconsole.log(BFS(graph, \"A\"))\n```\n\n```javascript\n{\n  distances: { A: 0, B: 1, C: 1, D: 1, E: 2, F: 2, G: 2, H: 2, I: 3 },\n  predecessors: {\n    A: null,\n    B: 'A',\n    C: 'A',\n    D: 'A',\n    E: 'B',\n    F: 'B',\n    G: 'C',\n    H: 'D',\n    I: 'E'\n  }\n}\n```\n\n如你所见，distances 为从顶点 A 开始到其它所有顶点的最短距离（相邻顶点间的距离为 1），predecessors 记录了所有顶点的前置顶点。以 BFS()方法的返回结果为基础，通过下面的代码，我们可以得出从顶点 A 开始到其它所有顶点的最短路径：\n\n```javascript\nlet shortestPathA = BFS(graph, \"A\")\nlet startVertex = \"A\"\nmyVertices.forEach(v => {\n    let path = new Stack()\n    for (let v2 = v; v2 !== startVertex; v2 = shortestPathA.predecessors[v2]) {\n        path.push(v2)\n    }\n\n    path.push(startVertex)\n    let s = path.pop()\n    while (!path.isEmpty()) {\n        s += ` - ${path.pop()}`\n    }\n\n    console.log(s)\n})\n```\n\n其中的 Stack 类可以参考[《JavaScript 数据结构——栈的实现与应用》](https://www.cnblogs.com/jaxu/p/11264017.html)。下面是对应的执行结果：\n\n```\nA\nA - B\nA - C\nA - D\nA - B - E\nA - B - F\nA - C - G\nA - D - H\nA - B - E - I\n```\n\n以上我们说的都是未加权的图，对于加权的图，广度优先算法并不是最合适的。下面给出了另外几种最短路径算法：<br />**Dijkstra** - 寻找从指定顶点到其它所有顶点的最短路径的贪心算法。\n\n```javascript\nconst INF = Number.MAX_SAFE_INTEGER\nconst minDistance = (dist, visited) => {\n    let min = INF\n    let minIndex = -1\n    for (let v = 0; v < dist.length; v++) {\n        if (visited[v] === false && dist[v] <= min) {\n            min = dist[v]\n            minIndex = v\n        }\n    }\n    return minIndex\n}\nconst dijkstra = (graph, src) => {\n    const dist = []\n    const visited = []\n    const { length } = graph\n    for (let i = 0; i < length; i++) {\n        dist[i] = INF\n        visited[i] = false\n    }\n    dist[src] = 0\n    for (let i = 0; i < length - 1; i++) {\n        const u = minDistance(dist, visited)\n        visited[u] = true\n        for (let v = 0; v < length; v++) {\n            if (!visited[v] && graph[u][v] !== 0 && dist[u] !== INF && dist[u] + graph[u][v] < dist[v]) {\n                dist[v] = dist[u] + graph[u][v]\n            }\n        }\n    }\n    return dist\n}\n```\n\n**Floyd-Warshall** - 计算图中所有最短路径的动态规划算法。\n\n```javascript\nconst floydWarshall = graph => {\n    const dist = []\n    const { length } = graph\n    for (let i = 0; i < length; i++) {\n        dist[i] = []\n        for (let j = 0; j < length; j++) {\n            if (i === j) {\n                dist[i][j] = 0\n            } else if (!isFinite(graph[i][j])) {\n                dist[i][j] = Infinity\n            } else {\n                dist[i][j] = graph[i][j]\n            }\n        }\n    }\n    for (let k = 0; k < length; k++) {\n        for (let i = 0; i < length; i++) {\n            for (let j = 0; j < length; j++) {\n                if (dist[i][k] + dist[k][j] < dist[i][j]) {\n                    dist[i][j] = dist[i][k] + dist[k][j]\n                }\n            }\n        }\n    }\n    return dist\n}\n```\n\n**Kruskal** - 求解加权无向连通图的最小生成树（MST）的贪心算法。\n\n```javascript\nconst INF = Number.MAX_SAFE_INTEGER\nconst find = (i, parent) => {\n    while (parent[i]) {\n        i = parent[i] // eslint-disable-line prefer-destructuring\n    }\n    return i\n}\nconst union = (i, j, parent) => {\n    if (i !== j) {\n        parent[j] = i\n        return true\n    }\n    return false\n}\nconst initializeCost = graph => {\n    const cost = []\n    const { length } = graph\n    for (let i = 0; i < length; i++) {\n        cost[i] = []\n        for (let j = 0; j < length; j++) {\n            if (graph[i][j] === 0) {\n                cost[i][j] = INF\n            } else {\n                cost[i][j] = graph[i][j]\n            }\n        }\n    }\n    return cost\n}\nconst kruskal = graph => {\n    const { length } = graph\n    const parent = []\n    let ne = 0\n    let a\n    let b\n    let u\n    let v\n    const cost = initializeCost(graph)\n    while (ne < length - 1) {\n        for (let i = 0, min = INF; i < length; i++) {\n            for (let j = 0; j < length; j++) {\n                if (cost[i][j] < min) {\n                    min = cost[i][j]\n                    a = u = i\n                    b = v = j\n                }\n            }\n        }\n        u = find(u, parent)\n        v = find(v, parent)\n        if (union(u, v, parent)) {\n            ne++\n        }\n        cost[a][b] = cost[b][a] = INF\n    }\n    return parent\n}\n```\n\n**Prime** - 求解加权无向连通图的最小生成树（MST）的贪心算法。\n\n```javascript\nconst INF = Number.MAX_SAFE_INTEGER\nconst minKey = (graph, key, visited) => {\n    // Initialize min value\n    let min = INF\n    let minIndex = 0\n    for (let v = 0; v < graph.length; v++) {\n        if (visited[v] === false && key[v] < min) {\n            min = key[v]\n            minIndex = v\n        }\n    }\n    return minIndex\n}\nconst prim = graph => {\n    const parent = []\n    const key = []\n    const visited = []\n    const { length } = graph\n    for (let i = 0; i < length; i++) {\n        key[i] = INF\n        visited[i] = false\n    }\n    key[0] = 0\n    parent[0] = -1\n    for (let i = 0; i < length - 1; i++) {\n        const u = minKey(graph, key, visited)\n        visited[u] = true\n        for (let v = 0; v < length; v++) {\n            if (graph[u][v] && !visited[v] && graph[u][v] < key[v]) {\n                parent[v] = u\n                key[v] = graph[u][v]\n            }\n        }\n    }\n    return parent\n}\n```\n\n<a name=\"dbeedf11\"></a>\n### 深度优先\n\n深度优先算法从图的第一个顶点开始，沿着这个顶点的一条路径递归查找到最后一个顶点，然后返回并探查路径上的其它路径，直到所有路径都被访问到。最终，深度优先算法会先深后广地访问图中的所有顶点。下面是深度优先遍历的示意图：<br />![image.png](https://cdn.nlark.com/yuque/0/2022/png/732231/1646359650620-e05fd2c0-2641-4ae5-83fd-2e75494ac5ee.png#clientId=u798dd5a7-9dbb-4&from=paste&id=uae415c13&margin=%5Bobject%20Object%5D&name=image.png&originHeight=291&originWidth=427&originalType=url&ratio=1&size=22514&status=done&style=none&taskId=uc30c9e03-bf0a-4bd1-bd91-a6f1224342d#id=sgbgB&originHeight=291&originWidth=427&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)<br />我们仍然采用和广度优先算法一样的思路，一开始将所有的顶点初始化为白色，然后沿着路径递归探查其余顶点，当顶点被访问过，将颜色改为灰色，如果顶点被探索过（处理过），则将颜色改为黑色。下面是深度优先算法的具体实现：\n\n```javascript\nlet depthFirstSearchVisit = (u, color, adjList, callback) => {\n    color[u] = Colors.GREY\n    if (callback) callback(u)\n\n    adjList.get(u).forEach(n => {\n        if (color[n] === Colors.WHITE) {\n            depthFirstSearchVisit(n, color, adjList, callback)\n        }\n    })\n\n    color[u] = Colors.BLACK\n}\n\nlet depthFirstSearch = (graph, callback) => {\n    let vertices = graph.getVertices()\n    let adjList = graph.getAdjList()\n    let color = initializeColor(vertices)\n\n    vertices.forEach(v => {\n        if (color[v] === Colors.WHITE) {\n            depthFirstSearchVisit(v, color, adjList, callback)\n        }\n    })\n}\n```\n\n具体执行步骤为：\n\n1. 将图中所有顶点的颜色初始化为白色。\n2. 遍历顶点，此时 A 作为第一个顶点，它的颜色为白色，于是调用函数 depthFirstSearchVisit()，并将顶点 A、color、graph.adjList 作为参数传入。\n3. 在 depthFirstSearchVisit()函数内部，由于顶点 A 被访问过了，所以将颜色设置为灰色，并执行 callback 回调函数（如果存在），然后遍历 A 的邻接顶点 B、C、D。\n4. B 未被访问过，颜色为白色，所以将 B 作为参数递归调用 depthFirstSearchVisit()函数。B 设置为灰色，callback('B')。遍历 B 的邻接节点 E 和 F。\n5. E 未被访问过，颜色为白色，所以将 E 作为参数递归调用 depthFirstSearchVisit()函数。E 设置为灰色，callback('E')。遍历 E 的邻接节点 I。\n6. I 未被访问过，颜色为白色，所以将 I 作为参数递归调用 depthFirstSearchVisit()函数。I 设置为灰色，callback('I')。I 没有邻接节点，然后将 I 设置为黑色。递归返回到 5。\n7. E 没有其它邻接节点，将 E 设置为黑色。递归返回到 4。\n8. 遍历 B 的另一个邻接节点 F，F 未被访问过，颜色为白色，所以将 F 作为参数递归调用 depthFirstSearchVisit()函数。F 设置为灰色，callback('F')。F 没有邻接节点，然后将 F 设置为黑色。递归返回到 4。\n9. B 的所有邻接节点都被访问过了，将 B 设置为黑色。递归返回到 3。\n10. 访问 A 的第二个邻接节点 C，C 未被访问过，颜色为白色，所以将 C 作为参数递归调用 depthFirstSearchVisit()函数。C 设置为灰色，callback('C')。遍历 C 的邻接节点 D、G。\n11. D 未被访问过，颜色为白色，所以将 D 作为参数递归调用 depthFirstSearchVisit()函数。D 设置为灰色，callback('D')。遍历 D 的邻接节点 G 和 H。\n12. G 未被访问过，颜色为白色，所以将 G 作为参数递归调用 depthFirstSearchVisit()函数。G 设置为灰色，callback('G')。G 没有邻接节点，然后将 G 设置为黑色。递归返回到 11。\n13. 遍历 D 的另一个邻接节点 H，H 未被访问过，颜色为白色，所以将 H 作为参数递归调用 depthFirstSearchVisit()函数。H 设置为灰色，callback('H')。H 没有邻接节点，然后将 H 设置为黑色。递归返回到 11。\n14. D 的所有邻接节点都被访问过了，将 D 设置为黑色。递归返回到 10。\n15. 遍历 C 的另一个邻接节点 G，由于 G 已经被访问过，对 C 的邻接节点的遍历结束。将 C 设置为黑色。递归返回到 3。\n16. 访问 A 的最后一个邻接节点 D，由于 D 已经被访问过，对 A 的邻接节点的遍历结束。将 A 设置为黑色。\n17. 然后对剩余的节点进行遍历。由于剩余的节点都被设置为黑色了，所以程序结束。\n\n对应的测试用例及执行结果如下：\n\n```javascript\ndepthFirstSearch(graph, value => console.log(`visited vertex: ${value}`))\n```\n\n```\nvisited vertex: A\nvisited vertex: B\nvisited vertex: E\nvisited vertex: I\nvisited vertex: F\nvisited vertex: C\nvisited vertex: D\nvisited vertex: G\nvisited vertex: H\n```\n\n为了便于理解，我们将整个遍历过程用下面的示意图来展示：<br />![image.png](https://cdn.nlark.com/yuque/0/2022/png/732231/1646359703841-9e34b06c-7934-4672-bdf1-ad331b0de3ab.png#clientId=u798dd5a7-9dbb-4&from=paste&id=u38ad8f9e&margin=%5Bobject%20Object%5D&name=image.png&originHeight=1110&originWidth=1221&originalType=url&ratio=1&size=153210&status=done&style=none&taskId=ua0fecf59-e663-456b-ba03-3393d181ba6#id=ghlzZ&originHeight=1110&originWidth=1221&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)<br />前面说过，深度优先算法的数据结构是栈，然而这里我们并没有使用栈来存储任何数据，而是使用了函数的递归调用，其实递归也是栈的一种表现形式。另外一点，如果图是连通的（即图中任何两个顶点之间都存在路径），我们可以对上述代码中的 depthFirstSearch()方法进行改进，只需要对图的起始顶点开始遍历一次就可以了，而不需要遍历图的所有顶点，因为从起始顶点开始的递归就可以覆盖图的所有顶点。\n\n<a name=\"65cd2e8d\"></a>\n#### 拓扑排序\n\n前面展示了深度优先算法的工作原理，我们可以使用它做更多的事情，例如拓扑排序（toplogical sorting，也叫做 topsort 或者 toposort）。与广度优先算法类似，我们也对上面的 depthFirstSeach()方法进行改进，以说明如何使用深度优先算法来实现拓扑排序：\n\n```javascript\nlet DFSVisit = (u, color, discovery, finished, predecessors, time, adjList) => {\n    color[u] = Colors.GREY\n    discovery[u] = ++time.count\n\n    adjList.get(u).forEach(n => {\n        if (color[n] === Colors.WHITE) {\n            predecessors[n] = u\n            DFSVisit(n, color, discovery, finished, predecessors, time, adjList)\n        }\n    })\n\n    color[u] = Colors.BLACK\n    finished[u] = ++time.count\n}\n\nlet DFS = graph => {\n    let vertices = graph.getVertices()\n    let adjList = graph.getAdjList()\n    let color = initializeColor(vertices)\n    let discovery = {}\n    let finished = {}\n    let predecessors = {}\n    let time = { count: 0 }\n\n    vertices.forEach(v => {\n        finished[v] = 0\n        discovery[v] = 0\n        predecessors[v] = null\n    })\n\n    vertices.forEach(v => {\n        if (color[v] === Colors.WHITE) {\n            DFSVisit(v, color, discovery, finished, predecessors, time, adjList)\n        }\n    })\n\n    return { discovery, finished, predecessors }\n}\n```\n\nDFS()方法会输出图中每个顶点的发现时间和探索时间，我们假定时间从 0 开始，每经过一步时间值加 1。在 DFS()方法中，我们用变量 discovery，finished，predecessors 来保存每个顶点的发现时间、探索时间和前置顶点（这个和广度优先算法中寻找最短路径中的一致，但最终执行结果会有区别），最终的输出结果中也会反映这三个值。这里需要注意的是，变量 time 之所以被定义为对象而不是一个普通的数字，是因为我们需要在函数间传递这个变量，如果只是作为值传递，函数内部对变量的修改不会影响到它的原始值，但是我们就是需要在函数递归调用的过程中不断记录 time 的变化过程，所以采用值传递的方式显然不行。因此我们将 time 定义为一个对象，对象被作为引用传递给函数，这样在函数内部对它的修改就会反映到原始值上。<br />\n\n来看看对 DFS()方法的测试结果：<br />\n\n```javascript\nconsole.log(DFS(graph))\n```\n\n```javascript\n{\n  discovery: { A: 1, B: 2, C: 10, D: 11, E: 3, F: 7, G: 12, H: 14, I: 4 },\n  finished: { A: 18, B: 9, C: 17, D: 16, E: 6, F: 8, G: 13, H: 15, I: 5 },\n  predecessors: {\n    A: null,\n    B: 'A',\n    C: 'A',\n    D: 'C',\n    E: 'B',\n    F: 'B',\n    G: 'D',\n    H: 'D',\n    I: 'E'\n  }\n}\n```\n\n我们将结果反映到示意图上，这样更加直观：<br />![image.png](https://cdn.nlark.com/yuque/0/2022/png/732231/1646359760721-1f89ad9d-2ae4-4814-8f88-22b56fc6ffd6.png#clientId=u798dd5a7-9dbb-4&from=paste&id=uf0b1ade3&margin=%5Bobject%20Object%5D&name=image.png&originHeight=308&originWidth=448&originalType=url&ratio=1&size=21795&status=done&style=none&taskId=u9ecc304f-0cfb-41b3-8d7e-61fa9672b13#id=uHvL2&originHeight=308&originWidth=448&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)<br />示意图上每一个顶点左边的数字是顶点的发现时间，右边的数字是顶点的探索时间，全部完成时间是 18，可以结合前面的深度优先算法遍历过程示意图来看，它们是对应的。同时我们也看到，深度优先算法的 predecessors 和广度优先算法的 predecessors 会有所不同。<br />拓扑排序只能应用于**有向无环图**（DAG）。基于上面 DFS()方法的返回结果，我们可以对顶点的完成时间（探索时间 finished）进行排序，以得到我们需要的拓扑排序结果。<br />如果要实现有向图，只需要对前面我们实现的 Graph 类的 addEdge()方法略加修改，将最后一行删掉。当然，我们也可以在 Graph 类的构造函数中指明是有向图还是无向图，下面是改进后的 Graph 类：\n\n```javascript\nclass Graph {\n    constructor(isDirected = false) {\n        this.isDirected = isDirected\n        this.vertices = [] // 用来存放图中的顶点\n        this.adjList = new Dictionary() // 用来存放图中的边\n    }\n\n    // 向图中添加一个新顶点\n    addVertex(v) {\n        if (!this.vertices.includes(v)) {\n            this.vertices.push(v)\n            this.adjList.set(v, [])\n        }\n    }\n\n    // 向图中添加a和b两个顶点之间的边\n    addEdge(a, b) {\n        // 如果图中没有顶点a，先添加顶点a\n        if (!this.adjList.has(a)) {\n            this.addVertex(a)\n        }\n        // 如果图中没有顶点b，先添加顶点b\n        if (!this.adjList.has(b)) {\n            this.addVertex(b)\n        }\n\n        this.adjList.get(a).push(b) // 在顶点a中添加指向顶点b的边\n        if (this.isDirected !== true) {\n            this.adjList.get(b).push(a) // 如果为无向图，则在顶点b中添加指向顶点a的边\n        }\n    }\n\n    // 获取图的vertices\n    getVertices() {\n        return this.vertices\n    }\n\n    // 获取图中的adjList\n    getAdjList() {\n        return this.adjList\n    }\n\n    toString() {\n        let s = \"\"\n        this.vertices.forEach(v => {\n            s += `${v} -> `\n            this.adjList.get(v).forEach(n => {\n                s += `${n} `\n            })\n            s += \"\\n\"\n        })\n        return s\n    }\n}\n```\n\n然后我们对有向图应用 DFS 算法：\n\n```javascript\nlet graph = new Graph()\nlet myVertices = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]\nmyVertices.forEach(v => {\n    graph.addVertex(v)\n})\ngraph.addEdge(\"A\", \"C\")\ngraph.addEdge(\"A\", \"D\")\ngraph.addEdge(\"B\", \"D\")\ngraph.addEdge(\"B\", \"E\")\ngraph.addEdge(\"C\", \"F\")\ngraph.addEdge(\"F\", \"E\")\nconsole.log(DFS(graph))\n```\n\n下面是返回结果：\n\n```javascript\n{\n  discovery: { A: 1, B: 11, C: 2, D: 8, E: 4, F: 3 },\n  finished: { A: 10, B: 12, C: 7, D: 9, E: 5, F: 6 },\n  predecessors: { A: null, B: null, C: 'A', D: 'A', E: 'F', F: 'C' }\n}\n```\n\n示意图如下：<br />![image.png](https://cdn.nlark.com/yuque/0/2022/png/732231/1646359804089-a9661d27-f4b6-4237-aa72-305a8afe1a22.png#clientId=u798dd5a7-9dbb-4&from=paste&id=ud2095508&margin=%5Bobject%20Object%5D&name=image.png&originHeight=289&originWidth=280&originalType=url&ratio=1&size=14552&status=done&style=none&taskId=ud81ccd28-3fab-4de0-9e47-c9729fcecbd#id=sDURb&originHeight=289&originWidth=280&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)<br />对顶点的完成时间进行倒序排序，得到的拓扑排序结果为：B - A - D - C - F - E。\n",
  "body_draft": "",
  "body_html": "<!doctype html><div class=\"lake-content\" typography=\"traditional\"><p id=\"u839e286f\" class=\"ne-p\"><a href=\"https://www.cnblogs.com/jaxu/p/11338294.html\" data-href=\"https://www.cnblogs.com/jaxu/p/11338294.html\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">链接</span></a><span class=\"ne-text\"><br /></span></p><p id=\"u27f9b656\" class=\"ne-p\"><br></p><p id=\"u543f5b21\" class=\"ne-p\"><span class=\"ne-text\">在计算机科学中，图是一种网络结构的抽象模型，它是一组由边连接的顶点组成。一个图 </span><code class=\"ne-code\"><span class=\"ne-text\">G = (V, E)</span></code><span class=\"ne-text\">由以下元素组成：</span></p><p id=\"u08668d47\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"u48135979\" data-lake-index-type=\"0\"><span class=\"ne-text\">V：一组顶点</span></li><li id=\"u0ce4178d\" data-lake-index-type=\"0\"><span class=\"ne-text\">E：一组边，连接 V 中的顶点</span></li></ul><p id=\"u6528ceb1\" class=\"ne-p\"><br></p><p id=\"u84a944e8\" class=\"ne-p\"><span class=\"ne-text\">下图表示了一个图的结构：<br /></span><img src=\"https://cdn.nlark.com/yuque/0/2022/png/732231/1646359057027-63af84f0-687b-43ac-8c8a-8be0ee50fd7e.png#clientId=u798dd5a7-9dbb-4&amp;from=paste&amp;id=ua740d26a&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=304&amp;originWidth=439&amp;originalType=url&amp;ratio=1&amp;size=18355&amp;status=done&amp;style=none&amp;taskId=u81764242-bb39-41af-a0b8-a002e0329e3\" width=\"439\" id=\"Jd4mS\" class=\"ne-image\"><span class=\"ne-text\"><br /></span><span class=\"ne-text\">在介绍如何用 JavaScript 实现图之前，我们先介绍一些和图相关的术语。<br /></span><span class=\"ne-text\">如上图所示，由一条边连接在一起的顶点称为</span><strong><span class=\"ne-text\">相邻顶点</span></strong><span class=\"ne-text\">，A 和 B 是相邻顶点，A 和 D 是相邻顶点，A 和 C 是相邻顶点......A 和 E 是不相邻顶点。一个顶点的</span><strong><span class=\"ne-text\">度</span></strong><span class=\"ne-text\">是其相邻顶点的数量，A 和其它三个顶点相连，所以 A 的度为 3，E 和其它两个顶点相连，所以 E 的度为 2......</span><strong><span class=\"ne-text\">路径</span></strong><span class=\"ne-text\">是一组相邻顶点的连续序列，如上图中包含路径 ABEI、路径 ACDG、路径 ABE、路径 ACDH 等。</span><strong><span class=\"ne-text\">简单路径</span></strong><span class=\"ne-text\">要求路径中不包含有重复的顶点，如果将</span><strong><span class=\"ne-text\">环</span></strong><span class=\"ne-text\">的最后一个顶点去掉，它也是一个简单路径。例如路径 ADCA 是一个环，它不是一个简单路径，如果将路径中的最后一个顶点 A 去掉，那么它就是一个简单路径。如果图中不存在环，则称该图是</span><strong><span class=\"ne-text\">无环的</span></strong><span class=\"ne-text\">。如果图中任何两个顶点间都存在路径，则该图是</span><strong><span class=\"ne-text\">连通的</span></strong><span class=\"ne-text\">，如上图就是一个连通图。如果图的边没有方向，则该图是</span><strong><span class=\"ne-text\">无向图</span></strong><span class=\"ne-text\">，上图所示为无向图，反之则称为</span><strong><span class=\"ne-text\">有向图</span></strong><span class=\"ne-text\">，下图所示为有向图：<br /></span><span class=\"ne-text\"></span></p><p id=\"uf8f6e649\" class=\"ne-p\"><br></p><p id=\"u93b0013a\" class=\"ne-p\"><img src=\"https://cdn.nlark.com/yuque/0/2022/png/732231/1646359204782-45e54d18-2341-48fa-bdc4-2d96b4a94202.png#clientId=u798dd5a7-9dbb-4&amp;from=paste&amp;id=uee32e657&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=290&amp;originWidth=423&amp;originalType=url&amp;ratio=1&amp;size=18892&amp;status=done&amp;style=none&amp;taskId=ufeba9f93-c4d6-4dc6-b71c-ae1fbe3bb20\" width=\"423\" id=\"gTavA\" class=\"ne-image\"><span class=\"ne-text\"><br /></span><span class=\"ne-text\">在有向图中，如果两个顶点间在双向上都存在路径，则称这两个顶点是</span><strong><span class=\"ne-text\">强连通</span></strong><span class=\"ne-text\">的，如上图中 C 和 D 是强连通的，而 A 和 B 是非强连通的。如果有向图中的任何两个顶点间在双向上都存在路径，则该有向图是</span><strong><span class=\"ne-text\">强连通的</span></strong><span class=\"ne-text\">，非强连通的图也称为</span><strong><span class=\"ne-text\">稀疏图</span></strong><span class=\"ne-text\">。<br /></span><span class=\"ne-text\">此外，图还可以是</span><strong><span class=\"ne-text\">加权的</span></strong><span class=\"ne-text\">。前面我们看到的图都是</span><strong><span class=\"ne-text\">未加权的</span></strong><span class=\"ne-text\">，下图为一个加权的图：<br /></span><img src=\"https://cdn.nlark.com/yuque/0/2022/png/732231/1646359204782-be3407f1-9aff-42bc-8206-849976186cc5.png#clientId=u798dd5a7-9dbb-4&amp;from=paste&amp;id=u54eef93d&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=290&amp;originWidth=416&amp;originalType=url&amp;ratio=1&amp;size=19618&amp;status=done&amp;style=none&amp;taskId=uac9ea293-54c1-45b9-97c9-bf89598461e\" width=\"416\" id=\"VPtOy\" class=\"ne-image\"><span class=\"ne-text\"><br /></span><span class=\"ne-text\">可以想象一下，前面我们介绍的</span><a href=\"https://www.cnblogs.com/jaxu/p/11309385.html\" data-href=\"https://www.cnblogs.com/jaxu/p/11309385.html\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">树</span></a><span class=\"ne-text\">和</span><a href=\"https://www.cnblogs.com/jaxu/p/11277732.html\" data-href=\"https://www.cnblogs.com/jaxu/p/11277732.html\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">链表</span></a><span class=\"ne-text\">也属于图的一种特殊形式。图在计算机科学中的应用十分广泛，例如我们可以搜索图中的一个特定顶点或一条特定的边，或者寻找两个顶点间的路径以及最短路径，检测图中是否存在环等等。<br /></span><span class=\"ne-text\">存在多种不同的方式来实现图的数据结构，下面介绍几种常用的方式。<br /></span><span class=\"ne-text\"></span></p><p id=\"u9b16d5ac\" class=\"ne-p\"><br></p><h3 id=\"7e76b5ae\"><span class=\"ne-text\">邻接矩阵</span></h3><p id=\"u3639d674\" class=\"ne-p\"><br></p><p id=\"u374080ba\" class=\"ne-p\"><span class=\"ne-text\">在邻接矩阵中，我们用一个二维数组来表示图中顶点之间的连接，如果两个顶点之间存在连接，则这两个顶点对应的二维数组下标的元素的值为 1，否则为 0。下图是用邻接矩阵方式表示的图：<br /></span><img src=\"https://cdn.nlark.com/yuque/0/2022/png/732231/1646359226265-8f9cea7c-3845-4ed4-88b7-81e5af6a0f9b.png#clientId=u798dd5a7-9dbb-4&amp;from=paste&amp;id=u38f083b2&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=348&amp;originWidth=642&amp;originalType=url&amp;ratio=1&amp;size=28876&amp;status=done&amp;style=none&amp;taskId=u4d6fff9e-f3aa-415d-9855-4ff24e42ad8\" width=\"642\" id=\"wlRok\" class=\"ne-image\"><span class=\"ne-text\"><br /></span><span class=\"ne-text\">如果是加权的图，我们可以将邻接矩阵中二维数组里的值 1 改成对应的加权数。邻接矩阵方式存在一个缺点，如果图是非强连通的，则二维数组中会有很多的 0，这表示我们使用了很多的存储空间来表示根本不存在的边。另一个缺点就是当图的顶点发生改变时，对于二维数组的修改会变得不太灵活。</span></p><p id=\"udf2e9fce\" class=\"ne-p\"><br></p><h3 id=\"3f1e1131\"><span class=\"ne-text\">邻接表</span></h3><p id=\"u891f7d6d\" class=\"ne-p\"><br></p><p id=\"ucc03205c\" class=\"ne-p\"><span class=\"ne-text\">图的另外一种实现方式是邻接表，它是对邻接矩阵的一种改进。邻接表由图中每个顶点的相邻顶点列表所组成。如下图所示，我们可以用数组、链表、字典或散列表来表示邻接表。<br /></span><img src=\"https://cdn.nlark.com/yuque/0/2022/png/732231/1646359226296-96283b12-d7fd-44bb-8960-5b82cf258204.png#clientId=u798dd5a7-9dbb-4&amp;from=paste&amp;id=uaaa23eb3&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=358&amp;originWidth=633&amp;originalType=url&amp;ratio=1&amp;size=27109&amp;status=done&amp;style=none&amp;taskId=u49b517d3-e5bf-4293-9cfb-5718f478568\" width=\"633\" id=\"m8eMN\" class=\"ne-image\"></p><p id=\"ub89d65f3\" class=\"ne-p\"><br></p><h3 id=\"6b638f34\"><span class=\"ne-text\">关联矩阵</span></h3><p id=\"ua6137d1c\" class=\"ne-p\"><br></p><p id=\"uc1e6cc6e\" class=\"ne-p\"><span class=\"ne-text\">我们还可以用关联矩阵来表示图。在关联矩阵中，矩阵的行表示顶点，列表示边。关联矩阵通常用于边的数量比顶点多的情况下，以节省存储空间。如下图所示为关联矩阵方式表示的图：<br /></span><img src=\"https://cdn.nlark.com/yuque/0/2022/png/732231/1646359226362-2c31bf00-76bb-4511-a668-ec07ef77921e.png#clientId=u798dd5a7-9dbb-4&amp;from=paste&amp;id=u5a488b89&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=353&amp;originWidth=730&amp;originalType=url&amp;ratio=1&amp;size=32692&amp;status=done&amp;style=none&amp;taskId=u216fca26-b4df-47c1-81d8-40de0ffaafb\" width=\"730\" id=\"PUJb5\" class=\"ne-image\"><span class=\"ne-text\"><br /></span><span class=\"ne-text\">下面我们重点看下如何用邻接表的方式表示图。我们的 Graph 类的骨架如下，它用邻接表方式来实现无向图：<br /></span><span class=\"ne-text\"></span></p><p id=\"u5a5b54f7\" class=\"ne-p\"><br></p><pre data-language=\"javascript\" id=\"c2bc605d\" class=\"ne-codeblock language-javascript\"><code>class Graph {\n    constructor() {\n        this.vertices = [] // 用来存放图中的顶点\n        this.adjList = new Dictionary() // 用来存放图中的边\n    }\n\n    // 向图中添加一个新顶点\n    addVertex(v) {}\n\n    // 向图中添加a和b两个顶点之间的边\n    addEdge(a, b) {}\n}</code></pre><p id=\"u1b3190a2\" class=\"ne-p\"><br></p><p id=\"u1a5363a7\" class=\"ne-p\"><span class=\"ne-text\">在 Graph 类中，我们用数组 vertices 来保存图中的所有顶点，用字典（请参考</span><a href=\"https://www.cnblogs.com/jaxu/p/11302315.html\" data-href=\"https://www.cnblogs.com/jaxu/p/11302315.html\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">《JavaScript 数据结构——字典和散列表的实现》</span></a><span class=\"ne-text\">一文中的 Dictionary 类）adjList 来保存图中每一个顶点到相邻顶点的关系列表，在字典中，顶点被作为键值。请参考前面我们给出的邻接表的示意图。然后在 Graph 类中，我们提供两个方法，方法 addVertex()用来向图中添加一个新顶点，方法 addEdge()用来向图中添加给定的顶点 a 和顶点 b 之间的边。让我们来看下这两个方法的实现。</span></p><p id=\"u51f56914\" class=\"ne-p\"><br></p><pre data-language=\"javascript\" id=\"51a81e59\" class=\"ne-codeblock language-javascript\"><code>addVertex (v) {\n    if (!this.vertices.includes(v)) {\n        this.vertices.push(v);\n        this.adjList.set(v, []);\n    }\n}</code></pre><p id=\"u74cff0dd\" class=\"ne-p\"><br></p><p id=\"u62c7ecbf\" class=\"ne-p\"><span class=\"ne-text\">要添加一个新顶点，首先要判断该顶点在图中是否已经存在了，如果已经存在则不能添加。如果不存在，就在 vertices 数组中添加一个新元素，然后在字典 adjList 中添加一个以该顶点作为 key 的新元素，值为空数组。</span></p><p id=\"u7fe79749\" class=\"ne-p\"><br></p><pre data-language=\"javascript\" id=\"9e9ec86f\" class=\"ne-codeblock language-javascript\"><code>addEdge (a, b) {\n    // 如果图中没有顶点a，先添加顶点a\n    if (!this.adjList.has(a)) {\n        this.addVertex(a);\n    }\n    // 如果图中没有顶点b，先添加顶点b\n    if (!this.adjList.has(b)) {\n        this.addVertex(b);\n    }\n\n    this.adjList.get(a).push(b); // 在顶点a中添加指向顶点b的边\n    this.adjList.get(b).push(a); // 在顶点b中添加指向顶点a的边\n}</code></pre><p id=\"ua540b512\" class=\"ne-p\"><br></p><p id=\"u66260584\" class=\"ne-p\"><span class=\"ne-text\">addEdge()方法也很简单，首先要确保给定的两个顶点 a 和 b 在图中必须存在，如果不存在，则调用 addVertex()方法进行添加，然后分别在字典中找到键值为顶点 a 和键值为顶点 b 的元素，在对应的值中添加一个新元素。<br /></span><span class=\"ne-text\">下面是 Graph 类的完整代码，其中的 toString()方法是为了我们测试用的，它的存在不是必须的。</span></p><p id=\"u4754d7d7\" class=\"ne-p\"><br></p><pre data-language=\"javascript\" id=\"0c8cffeb\" class=\"ne-codeblock language-javascript\"><code>class Graph {\n    constructor() {\n        this.vertices = [] // 用来存放图中的顶点\n        this.adjList = new Dictionary() // 用来存放图中的边\n    }\n\n    // 向图中添加一个新顶点\n    addVertex(v) {\n        if (!this.vertices.includes(v)) {\n            this.vertices.push(v)\n            this.adjList.set(v, [])\n        }\n    }\n\n    // 向图中添加a和b两个顶点之间的边\n    addEdge(a, b) {\n        // 如果图中没有顶点a，先添加顶点a\n        if (!this.adjList.has(a)) {\n            this.addVertex(a)\n        }\n        // 如果图中没有顶点b，先添加顶点b\n        if (!this.adjList.has(b)) {\n            this.addVertex(b)\n        }\n\n        this.adjList.get(a).push(b) // 在顶点a中添加指向顶点b的边\n        this.adjList.get(b).push(a) // 在顶点b中添加指向顶点a的边\n    }\n\n    // 获取图的vertices\n    getVertices() {\n        return this.vertices\n    }\n\n    // 获取图中的adjList\n    getAdjList() {\n        return this.adjList\n    }\n\n    toString() {\n        let s = &quot;&quot;\n        this.vertices.forEach(v =&gt; {\n            s += `${v} -&gt; `\n            this.adjList.get(v).forEach(n =&gt; {\n                s += `${n} `\n            })\n            s += &quot;\\n&quot;\n        })\n        return s\n    }\n}</code></pre><p id=\"u8e8ff762\" class=\"ne-p\"><br></p><p id=\"udd37663c\" class=\"ne-p\"><span class=\"ne-text\">对于本文一开始给出的图，我们添加下面的测试用例：</span></p><p id=\"ue81c2fbe\" class=\"ne-p\"><br></p><pre data-language=\"javascript\" id=\"269f96ec\" class=\"ne-codeblock language-javascript\"><code>let graph = new Graph()\nlet myVertices = [&quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;, &quot;E&quot;, &quot;F&quot;, &quot;G&quot;, &quot;H&quot;, &quot;I&quot;]\nmyVertices.forEach(v =&gt; {\n    graph.addVertex(v)\n})\ngraph.addEdge(&quot;A&quot;, &quot;B&quot;)\ngraph.addEdge(&quot;A&quot;, &quot;C&quot;)\ngraph.addEdge(&quot;A&quot;, &quot;D&quot;)\ngraph.addEdge(&quot;C&quot;, &quot;D&quot;)\ngraph.addEdge(&quot;C&quot;, &quot;G&quot;)\ngraph.addEdge(&quot;D&quot;, &quot;G&quot;)\ngraph.addEdge(&quot;D&quot;, &quot;H&quot;)\ngraph.addEdge(&quot;B&quot;, &quot;E&quot;)\ngraph.addEdge(&quot;B&quot;, &quot;F&quot;)\ngraph.addEdge(&quot;E&quot;, &quot;I&quot;)\n\nconsole.log(graph.toString())</code></pre><p id=\"u3163bc06\" class=\"ne-p\"><br></p><p id=\"ub75d0f8f\" class=\"ne-p\"><span class=\"ne-text\">下面是测试结果：</span></p><p id=\"ua556b239\" class=\"ne-p\"><br></p><pre data-language=\"javascript\" id=\"3f4250d7\" class=\"ne-codeblock language-javascript\"><code>A -&gt; B C D\nB -&gt; A E F\nC -&gt; A D G\nD -&gt; A C G H\nE -&gt; B I\nF -&gt; B\nG -&gt; C D\nH -&gt; D\nI -&gt; E</code></pre><p id=\"u493f1a39\" class=\"ne-p\"><br></p><p id=\"uedcbea6c\" class=\"ne-p\"><span class=\"ne-text\">可以看到，与示意图是相符合的。<br /></span><span class=\"ne-text\">和</span><a href=\"https://www.cnblogs.com/jaxu/p/11309385.html\" data-href=\"https://www.cnblogs.com/jaxu/p/11309385.html\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">树</span></a><span class=\"ne-text\">类似，我们也可以对图进行遍历，以访问图中的所有顶点。图的遍历方式分为两种：</span><strong><span class=\"ne-text\">广度优先</span></strong><span class=\"ne-text\">（Breadth-First Search，BFS）和</span><strong><span class=\"ne-text\">深度优先</span></strong><span class=\"ne-text\">（Depth-First Search，DFS）。对图的遍历可以用来寻找特定的顶点或两个顶点之间的最短路径，以及检查图是否连通、图中是否含有环等。</span></p><table id=\"a3a91a54\" class=\"ne-table\" style=\"width: 750px\"><tbody><tr style=\"height: 33px\"><td width=\"250\"><p id=\"ue79c6402\" class=\"ne-p\"><strong><span class=\"ne-text\">算法</span></strong></p></td><td width=\"250\"><p id=\"u37fe634d\" class=\"ne-p\"><strong><span class=\"ne-text\">数据结构</span></strong></p></td><td width=\"250\"><p id=\"u37fc1960\" class=\"ne-p\"><strong><span class=\"ne-text\">描述</span></strong></p></td></tr><tr style=\"height: 33px\"><td width=\"250\"><p id=\"ub2a455f1\" class=\"ne-p\"><span class=\"ne-text\">深度优先</span></p></td><td width=\"250\"><p id=\"uf14df054\" class=\"ne-p\"><span class=\"ne-text\">栈</span></p></td><td width=\"250\"><p id=\"ud3a0f588\" class=\"ne-p\"><span class=\"ne-text\">将图的顶点存入栈中（有关栈的介绍可以参考</span><a href=\"https://www.cnblogs.com/jaxu/p/11264017.html\" data-href=\"https://www.cnblogs.com/jaxu/p/11264017.html\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">《JavaScript 数据结构——栈的实现与应用》</span></a></p></td></tr><tr style=\"height: 33px\"><td width=\"250\"><p id=\"ufb8b7a52\" class=\"ne-p\"><span class=\"ne-text\">），顶点是沿着路径被探索的，存在新的相邻顶点就去访问。</span></p></td><td width=\"250\"></td><td width=\"250\"></td></tr><tr style=\"height: 33px\"><td width=\"250\"><p id=\"u689245d6\" class=\"ne-p\"><span class=\"ne-text\">广度优先</span></p></td><td width=\"250\"><p id=\"ub71b308c\" class=\"ne-p\"><span class=\"ne-text\">队列</span></p></td><td width=\"250\"><p id=\"ub1245977\" class=\"ne-p\"><span class=\"ne-text\">将图的顶点存入队列中（有关队列的介绍可以参考</span><a href=\"https://www.cnblogs.com/jaxu/p/11268862.html\" data-href=\"https://www.cnblogs.com/jaxu/p/11268862.html\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">《JavaScript 数据结构——队列的实现与应用》</span></a></p></td></tr><tr style=\"height: 33px\"><td width=\"250\"><p id=\"ue5c20f02\" class=\"ne-p\"><span class=\"ne-text\">），最先入队列的顶点先被探索。</span></p></td><td width=\"250\"></td><td width=\"250\"></td></tr></tbody></table><p id=\"ucdd5e3b5\" class=\"ne-p\"><br></p><p id=\"u4b4304d6\" class=\"ne-p\"><span class=\"ne-text\">在接下来要实现的算法中，我们按照如下的约定对图中的顶点进行遍历，每个顶点最多访问两次：</span></p><p id=\"ub9ae80a1\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"uf72f2d54\" data-lake-index-type=\"0\"><span class=\"ne-text\">白色：表示该顶点未被访问。</span></li><li id=\"uc084232d\" data-lake-index-type=\"0\"><span class=\"ne-text\">灰色：表示该顶点被访问过，但未被探索。</span></li><li id=\"uc4657560\" data-lake-index-type=\"0\"><span class=\"ne-text\">黑色：表示该顶点被访问并且被探索过。</span></li></ul><p id=\"ua9ac7b18\" class=\"ne-p\"><br></p><p id=\"ud41ae23f\" class=\"ne-p\"><span class=\"ne-text\"></span></p><p id=\"u19271b7c\" class=\"ne-p\"><br></p><h3 id=\"274c2782\"><span class=\"ne-text\">广度优先</span></h3><p id=\"u4527fd52\" class=\"ne-p\"><br></p><p id=\"u5047dcb7\" class=\"ne-p\"><span class=\"ne-text\">广度优先算法会从指定的第一个顶点开始遍历图，先访问这个顶点的所有相邻顶点，然后再访问这些相邻顶点的相邻顶点，以此类推。最终，广度优先算法会先广后深地访问图中的所有顶点。下面是广度优先遍历的示意图：<br /></span><img src=\"https://cdn.nlark.com/yuque/0/2022/png/732231/1646359383875-9a363ae2-7439-49a4-b554-442c57770ccd.png#clientId=u798dd5a7-9dbb-4&amp;from=paste&amp;id=u0c0cb847&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=476&amp;originWidth=438&amp;originalType=url&amp;ratio=1&amp;size=33943&amp;status=done&amp;style=none&amp;taskId=u658bc8b2-11eb-4d9a-a7fa-06fc6031f5d\" width=\"438\" id=\"xITTe\" class=\"ne-image\"><span class=\"ne-text\"><br /></span><span class=\"ne-text\">由于我们采用邻接表的方式来存储图的数据，对于图的每个顶点，都有一个字典与之对应，字典的键值为顶点的值，字典的内容为与该顶点相邻的顶点列表。基于这种数据结构，我们可以考虑将所有顶点的邻接顶点存入队列，然后依次处理队列中的顶点。下面是具体的遍历步骤：</span></p><p id=\"ua3cfcbb3\" class=\"ne-p\"><br></p><ol class=\"ne-ol\"><li id=\"u3e190dff\" data-lake-index-type=\"0\"><span class=\"ne-text\">将开始顶点存入队列。</span></li><li id=\"ude20bd49\" data-lake-index-type=\"0\"><span class=\"ne-text\">遍历开始顶点的所有邻接顶点，如果这些邻接顶点没有被访问过（颜色为白色），则将它们标记为被访问（颜色为灰色），然后加入队列。</span></li><li id=\"u82f56123\" data-lake-index-type=\"0\"><span class=\"ne-text\">将开始顶点标记为被处理（颜色为黑色）。</span></li><li id=\"ue3664ab9\" data-lake-index-type=\"0\"><span class=\"ne-text\">循环处理队列中的顶点，直到队列为空。</span></li></ol><p id=\"u8d737686\" class=\"ne-p\"><br></p><p id=\"uf38ad889\" class=\"ne-p\"><span class=\"ne-text\">下面是该算法的具体实现：</span></p><p id=\"uaed95ba1\" class=\"ne-p\"><br></p><pre data-language=\"javascript\" id=\"d657890e\" class=\"ne-codeblock language-javascript\"><code>let Colors = {\n    WHITE: 0,\n    GREY: 1,\n    BLACK: 2\n}\n\nlet initializeColor = vertices =&gt; {\n    let color = {}\n    vertices.forEach(v =&gt; (color[v] = Colors.WHITE))\n    return color\n}\n\nlet breadthFirstSearch = (graph, startVertex, callback) =&gt; {\n    let vertices = graph.getVertices()\n    let adjList = graph.getAdjList()\n    let color = initializeColor(vertices)\n    let queue = new Queue()\n\n    queue.enqueue(startVertex)\n\n    while (!queue.isEmpty()) {\n        let u = queue.dequeue()\n        adjList.get(u).forEach(n =&gt; {\n            if (color[n] === Colors.WHITE) {\n                color[n] = Colors.GREY\n                queue.enqueue(n)\n            }\n        })\n\n        color[u] = Colors.BLACK\n        if (callback) callback(u)\n    }\n}</code></pre><p id=\"ub55c3635\" class=\"ne-p\"><br></p><p id=\"uf6232383\" class=\"ne-p\"><span class=\"ne-text\">breadthFirstSearch()方法接收一个 graph 对象，图的数据通过该对象传入。参数 startVertex 指定了遍历的起始顶点。回调函数 callback 规定了要如何处理被遍历到的顶点。<br /></span><span class=\"ne-text\">首先通过 initializeColor()函数将所有的顶点标记为未被访问过（颜色为白色），这些颜色保存在以顶点值为 key 的 color 对象中。图的 vertices 和 adjList 属性可以通过 getVertices()和 getAdjList()方法得到，然后构造一个队列 queue（有关队列类 Queue 请参考</span><a href=\"https://www.cnblogs.com/jaxu/p/11268862.html\" data-href=\"https://www.cnblogs.com/jaxu/p/11268862.html\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">《JavaScript 数据结构——队列的实现与应用》</span></a><span class=\"ne-text\">），按照上面描述的步骤对图的顶点进行遍历。<br /></span><span class=\"ne-text\">在前面我们给出的测试用例的基础上，添加下面的代码，来看看 breadthFirstSearch()方法的执行结果：</span></p><p id=\"ud96529e7\" class=\"ne-p\"><br></p><pre data-language=\"javascript\" id=\"719994a2\" class=\"ne-codeblock language-javascript\"><code>breadthFirstSearch(graph, &quot;A&quot;, value =&gt; console.log(`visited vertex: ${value}`))</code></pre><p id=\"u09afaf43\" class=\"ne-p\"><br></p><p id=\"ub6080907\" class=\"ne-p\"><span class=\"ne-text\">参数 graph 为前面测试用例中 Graph 类的实例，也就是我们用来保存图的数据的对象，'A'被作为遍历的起始顶点，在回调函数中，打印一行文本，用来展示顶点被遍历的顺序。下面是测试结果：</span></p><p id=\"ub4f3d563\" class=\"ne-p\"><br></p><pre data-language=\"javascript\" id=\"c3e83fb4\" class=\"ne-codeblock language-javascript\"><code>visited vertex: A\nvisited vertex: B\nvisited vertex: C\nvisited vertex: D\nvisited vertex: E\nvisited vertex: F\nvisited vertex: G\nvisited vertex: H\nvisited vertex: I</code></pre><p id=\"ue36ba175\" class=\"ne-p\"><br></p><p id=\"uacff4eba\" class=\"ne-p\"><span class=\"ne-text\">尝试将'I'作为起始顶点，看看执行结果：</span></p><p id=\"uebe9f9ca\" class=\"ne-p\"><br></p><pre data-language=\"javascript\" id=\"25c3f2ec\" class=\"ne-codeblock language-javascript\"><code>visited vertex: I\nvisited vertex: E\nvisited vertex: B\nvisited vertex: A\nvisited vertex: F\nvisited vertex: C\nvisited vertex: D\nvisited vertex: G\nvisited vertex: H</code></pre><p id=\"ucdd0cedf\" class=\"ne-p\"><br></p><p id=\"ubcd8a49d\" class=\"ne-p\"><span class=\"ne-text\">为了方便理解，我们将顶点 I 放到最上面。从顶点 I 开始，首先遍历到的是它的相邻顶点 E，然后是 E 的相邻顶点 B，其次是 B 的相邻顶点 A 和 F，A 的相邻顶点 C 和 D，C 的相邻顶点 G（D 已经被遍历过了），最后是 D 的相邻顶点 H（C 和 G 已经被遍历过了）。<br /></span><img src=\"https://cdn.nlark.com/yuque/0/2022/png/732231/1646359485089-46d19b10-8906-49a2-accd-5151e03c3716.png#clientId=u798dd5a7-9dbb-4&amp;from=paste&amp;id=u5b3b336f&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=298&amp;originWidth=412&amp;originalType=url&amp;ratio=1&amp;size=18082&amp;status=done&amp;style=none&amp;taskId=u3d9e91c2-b651-4a12-848d-2ad7d01ed4c\" width=\"412\" id=\"SRyW5\" class=\"ne-image\"></p><p id=\"uc376c5ca\" class=\"ne-p\"><br></p><h4 id=\"603d9318\"><span class=\"ne-text\">寻找最短路径</span></h4><p id=\"u5dc0cc71\" class=\"ne-p\"><br></p><p id=\"u5a2a0b60\" class=\"ne-p\"><span class=\"ne-text\">前面展示了广度优先算法的工作原理，我们可以使用它做更多的事情，例如在一个图 G 中，从顶点 v 开始到其它所有顶点间的最短距离。我们考虑一下如何用 BFS 来实现寻找最短路径。<br /></span><span class=\"ne-text\">假设两个相邻顶点间的距离为 1，从顶点 v 开始，在其路径上每经过一个顶点，距离加 1。下面是对 breadthFirstSearch()方法的改进，用来返回从起始顶点开始到其它所有顶点间的距离，以及所有顶点的前置顶点。</span></p><p id=\"u57ba9e94\" class=\"ne-p\"><br></p><pre data-language=\"javascript\" id=\"f2607260\" class=\"ne-codeblock language-javascript\"><code>let BFS = (graph, startVertex) =&gt; {\n    let vertices = graph.getVertices()\n    let adjList = graph.getAdjList()\n    let color = initializeColor(vertices)\n    let queue = new Queue()\n    let distances = {}\n    let predecessors = {}\n\n    queue.enqueue(startVertex)\n\n    // 初始化所有顶点的距离为0，前置节点为null\n    vertices.forEach(v =&gt; {\n        distances[v] = 0\n        predecessors[v] = null\n    })\n\n    while (!queue.isEmpty()) {\n        let u = queue.dequeue()\n        adjList.get(u).forEach(n =&gt; {\n            if (color[n] === Colors.WHITE) {\n                color[n] = Colors.GREY\n                distances[n] = distances[u] + 1\n                predecessors[n] = u\n                queue.enqueue(n)\n            }\n        })\n\n        color[u] = Colors.BLACK\n    }\n\n    return { distances, predecessors }\n}</code></pre><p id=\"u803ece7b\" class=\"ne-p\"><br></p><p id=\"uf540a29c\" class=\"ne-p\"><span class=\"ne-text\">在 BFS()方法中，我们定义了两个对象 distances 和 predecessors，用来保存从起始顶点出发到其它所有顶点的距离以及这些顶点的前置顶点。BFS()方法不需要 callback 回调函数，因为它会自行输出最终结果。与 breadthFirstSearch()方法的逻辑类似，只不过在开始的时候将所有顶点的距离初始化为 0，前置顶点初始化为 null，然后在遍历的过程中，重新设置顶点的 distances 值和 predecessors 值。我们仍然将顶点 A 作为起始顶点，来看看测试结果：</span></p><p id=\"uadec4f59\" class=\"ne-p\"><br></p><pre data-language=\"javascript\" id=\"73832fcd\" class=\"ne-codeblock language-javascript\"><code>console.log(BFS(graph, &quot;A&quot;))</code></pre><p id=\"u22772013\" class=\"ne-p\"><br></p><pre data-language=\"javascript\" id=\"6cb925fb\" class=\"ne-codeblock language-javascript\"><code>{\n  distances: { A: 0, B: 1, C: 1, D: 1, E: 2, F: 2, G: 2, H: 2, I: 3 },\n  predecessors: {\n    A: null,\n    B: 'A',\n    C: 'A',\n    D: 'A',\n    E: 'B',\n    F: 'B',\n    G: 'C',\n    H: 'D',\n    I: 'E'\n  }\n}</code></pre><p id=\"ucdc6cf0e\" class=\"ne-p\"><br></p><p id=\"u852936cf\" class=\"ne-p\"><span class=\"ne-text\">如你所见，distances 为从顶点 A 开始到其它所有顶点的最短距离（相邻顶点间的距离为 1），predecessors 记录了所有顶点的前置顶点。以 BFS()方法的返回结果为基础，通过下面的代码，我们可以得出从顶点 A 开始到其它所有顶点的最短路径：</span></p><p id=\"uec4e388e\" class=\"ne-p\"><br></p><pre data-language=\"javascript\" id=\"158bcf97\" class=\"ne-codeblock language-javascript\"><code>let shortestPathA = BFS(graph, &quot;A&quot;)\nlet startVertex = &quot;A&quot;\nmyVertices.forEach(v =&gt; {\n    let path = new Stack()\n    for (let v2 = v; v2 !== startVertex; v2 = shortestPathA.predecessors[v2]) {\n        path.push(v2)\n    }\n\n    path.push(startVertex)\n    let s = path.pop()\n    while (!path.isEmpty()) {\n        s += ` - ${path.pop()}`\n    }\n\n    console.log(s)\n})</code></pre><p id=\"u908b0246\" class=\"ne-p\"><br></p><p id=\"u9f919569\" class=\"ne-p\"><span class=\"ne-text\">其中的 Stack 类可以参考</span><a href=\"https://www.cnblogs.com/jaxu/p/11264017.html\" data-href=\"https://www.cnblogs.com/jaxu/p/11264017.html\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">《JavaScript 数据结构——栈的实现与应用》</span></a><span class=\"ne-text\">。下面是对应的执行结果：</span></p><p id=\"u7dad597f\" class=\"ne-p\"><br></p><pre data-language=\"plain\" id=\"0dd786f7\" class=\"ne-codeblock language-plain\"><code>A\nA - B\nA - C\nA - D\nA - B - E\nA - B - F\nA - C - G\nA - D - H\nA - B - E - I</code></pre><p id=\"u559c46ff\" class=\"ne-p\"><br></p><p id=\"u66719562\" class=\"ne-p\"><span class=\"ne-text\">以上我们说的都是未加权的图，对于加权的图，广度优先算法并不是最合适的。下面给出了另外几种最短路径算法：<br /></span><strong><span class=\"ne-text\">Dijkstra</span></strong><span class=\"ne-text\"> - 寻找从指定顶点到其它所有顶点的最短路径的贪心算法。</span></p><p id=\"u738115b8\" class=\"ne-p\"><br></p><pre data-language=\"javascript\" id=\"8026fe84\" class=\"ne-codeblock language-javascript\"><code>const INF = Number.MAX_SAFE_INTEGER\nconst minDistance = (dist, visited) =&gt; {\n    let min = INF\n    let minIndex = -1\n    for (let v = 0; v &lt; dist.length; v++) {\n        if (visited[v] === false &amp;&amp; dist[v] &lt;= min) {\n            min = dist[v]\n            minIndex = v\n        }\n    }\n    return minIndex\n}\nconst dijkstra = (graph, src) =&gt; {\n    const dist = []\n    const visited = []\n    const { length } = graph\n    for (let i = 0; i &lt; length; i++) {\n        dist[i] = INF\n        visited[i] = false\n    }\n    dist[src] = 0\n    for (let i = 0; i &lt; length - 1; i++) {\n        const u = minDistance(dist, visited)\n        visited[u] = true\n        for (let v = 0; v &lt; length; v++) {\n            if (!visited[v] &amp;&amp; graph[u][v] !== 0 &amp;&amp; dist[u] !== INF &amp;&amp; dist[u] + graph[u][v] &lt; dist[v]) {\n                dist[v] = dist[u] + graph[u][v]\n            }\n        }\n    }\n    return dist\n}</code></pre><p id=\"udfc58e85\" class=\"ne-p\"><br></p><p id=\"u9ccd5b9b\" class=\"ne-p\"><strong><span class=\"ne-text\">Floyd-Warshall</span></strong><span class=\"ne-text\"> - 计算图中所有最短路径的动态规划算法。</span></p><p id=\"u3604f92b\" class=\"ne-p\"><br></p><pre data-language=\"javascript\" id=\"604f6e27\" class=\"ne-codeblock language-javascript\"><code>const floydWarshall = graph =&gt; {\n    const dist = []\n    const { length } = graph\n    for (let i = 0; i &lt; length; i++) {\n        dist[i] = []\n        for (let j = 0; j &lt; length; j++) {\n            if (i === j) {\n                dist[i][j] = 0\n            } else if (!isFinite(graph[i][j])) {\n                dist[i][j] = Infinity\n            } else {\n                dist[i][j] = graph[i][j]\n            }\n        }\n    }\n    for (let k = 0; k &lt; length; k++) {\n        for (let i = 0; i &lt; length; i++) {\n            for (let j = 0; j &lt; length; j++) {\n                if (dist[i][k] + dist[k][j] &lt; dist[i][j]) {\n                    dist[i][j] = dist[i][k] + dist[k][j]\n                }\n            }\n        }\n    }\n    return dist\n}</code></pre><p id=\"uefdcdf56\" class=\"ne-p\"><br></p><p id=\"u6affaa39\" class=\"ne-p\"><strong><span class=\"ne-text\">Kruskal</span></strong><span class=\"ne-text\"> - 求解加权无向连通图的最小生成树（MST）的贪心算法。</span></p><p id=\"ud678902f\" class=\"ne-p\"><br></p><pre data-language=\"javascript\" id=\"d4d432aa\" class=\"ne-codeblock language-javascript\"><code>const INF = Number.MAX_SAFE_INTEGER\nconst find = (i, parent) =&gt; {\n    while (parent[i]) {\n        i = parent[i] // eslint-disable-line prefer-destructuring\n    }\n    return i\n}\nconst union = (i, j, parent) =&gt; {\n    if (i !== j) {\n        parent[j] = i\n        return true\n    }\n    return false\n}\nconst initializeCost = graph =&gt; {\n    const cost = []\n    const { length } = graph\n    for (let i = 0; i &lt; length; i++) {\n        cost[i] = []\n        for (let j = 0; j &lt; length; j++) {\n            if (graph[i][j] === 0) {\n                cost[i][j] = INF\n            } else {\n                cost[i][j] = graph[i][j]\n            }\n        }\n    }\n    return cost\n}\nconst kruskal = graph =&gt; {\n    const { length } = graph\n    const parent = []\n    let ne = 0\n    let a\n    let b\n    let u\n    let v\n    const cost = initializeCost(graph)\n    while (ne &lt; length - 1) {\n        for (let i = 0, min = INF; i &lt; length; i++) {\n            for (let j = 0; j &lt; length; j++) {\n                if (cost[i][j] &lt; min) {\n                    min = cost[i][j]\n                    a = u = i\n                    b = v = j\n                }\n            }\n        }\n        u = find(u, parent)\n        v = find(v, parent)\n        if (union(u, v, parent)) {\n            ne++\n        }\n        cost[a][b] = cost[b][a] = INF\n    }\n    return parent\n}</code></pre><p id=\"u2051f1d7\" class=\"ne-p\"><br></p><p id=\"ub413e613\" class=\"ne-p\"><strong><span class=\"ne-text\">Prime</span></strong><span class=\"ne-text\"> - 求解加权无向连通图的最小生成树（MST）的贪心算法。</span></p><p id=\"u0f55c6cf\" class=\"ne-p\"><br></p><pre data-language=\"javascript\" id=\"20d8debb\" class=\"ne-codeblock language-javascript\"><code>const INF = Number.MAX_SAFE_INTEGER\nconst minKey = (graph, key, visited) =&gt; {\n    // Initialize min value\n    let min = INF\n    let minIndex = 0\n    for (let v = 0; v &lt; graph.length; v++) {\n        if (visited[v] === false &amp;&amp; key[v] &lt; min) {\n            min = key[v]\n            minIndex = v\n        }\n    }\n    return minIndex\n}\nconst prim = graph =&gt; {\n    const parent = []\n    const key = []\n    const visited = []\n    const { length } = graph\n    for (let i = 0; i &lt; length; i++) {\n        key[i] = INF\n        visited[i] = false\n    }\n    key[0] = 0\n    parent[0] = -1\n    for (let i = 0; i &lt; length - 1; i++) {\n        const u = minKey(graph, key, visited)\n        visited[u] = true\n        for (let v = 0; v &lt; length; v++) {\n            if (graph[u][v] &amp;&amp; !visited[v] &amp;&amp; graph[u][v] &lt; key[v]) {\n                parent[v] = u\n                key[v] = graph[u][v]\n            }\n        }\n    }\n    return parent\n}</code></pre><p id=\"u8c1d4abe\" class=\"ne-p\"><br></p><h3 id=\"dbeedf11\"><span class=\"ne-text\">深度优先</span></h3><p id=\"ucfc94cc6\" class=\"ne-p\"><br></p><p id=\"u7303ec8e\" class=\"ne-p\"><span class=\"ne-text\">深度优先算法从图的第一个顶点开始，沿着这个顶点的一条路径递归查找到最后一个顶点，然后返回并探查路径上的其它路径，直到所有路径都被访问到。最终，深度优先算法会先深后广地访问图中的所有顶点。下面是深度优先遍历的示意图：<br /></span><img src=\"https://cdn.nlark.com/yuque/0/2022/png/732231/1646359650620-e05fd2c0-2641-4ae5-83fd-2e75494ac5ee.png#clientId=u798dd5a7-9dbb-4&amp;from=paste&amp;id=uae415c13&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=291&amp;originWidth=427&amp;originalType=url&amp;ratio=1&amp;size=22514&amp;status=done&amp;style=none&amp;taskId=uc30c9e03-bf0a-4bd1-bd91-a6f1224342d\" width=\"427\" id=\"sgbgB\" class=\"ne-image\"><span class=\"ne-text\"><br /></span><span class=\"ne-text\">我们仍然采用和广度优先算法一样的思路，一开始将所有的顶点初始化为白色，然后沿着路径递归探查其余顶点，当顶点被访问过，将颜色改为灰色，如果顶点被探索过（处理过），则将颜色改为黑色。下面是深度优先算法的具体实现：</span></p><p id=\"u053c6c55\" class=\"ne-p\"><br></p><pre data-language=\"javascript\" id=\"84455d8c\" class=\"ne-codeblock language-javascript\"><code>let depthFirstSearchVisit = (u, color, adjList, callback) =&gt; {\n    color[u] = Colors.GREY\n    if (callback) callback(u)\n\n    adjList.get(u).forEach(n =&gt; {\n        if (color[n] === Colors.WHITE) {\n            depthFirstSearchVisit(n, color, adjList, callback)\n        }\n    })\n\n    color[u] = Colors.BLACK\n}\n\nlet depthFirstSearch = (graph, callback) =&gt; {\n    let vertices = graph.getVertices()\n    let adjList = graph.getAdjList()\n    let color = initializeColor(vertices)\n\n    vertices.forEach(v =&gt; {\n        if (color[v] === Colors.WHITE) {\n            depthFirstSearchVisit(v, color, adjList, callback)\n        }\n    })\n}</code></pre><p id=\"u782bc005\" class=\"ne-p\"><br></p><p id=\"u72e4a09c\" class=\"ne-p\"><span class=\"ne-text\">具体执行步骤为：</span></p><p id=\"u1a7a92dc\" class=\"ne-p\"><br></p><ol class=\"ne-ol\"><li id=\"ufe780589\" data-lake-index-type=\"0\"><span class=\"ne-text\">将图中所有顶点的颜色初始化为白色。</span></li><li id=\"u32f6ec10\" data-lake-index-type=\"0\"><span class=\"ne-text\">遍历顶点，此时 A 作为第一个顶点，它的颜色为白色，于是调用函数 depthFirstSearchVisit()，并将顶点 A、color、graph.adjList 作为参数传入。</span></li><li id=\"ub8854b17\" data-lake-index-type=\"0\"><span class=\"ne-text\">在 depthFirstSearchVisit()函数内部，由于顶点 A 被访问过了，所以将颜色设置为灰色，并执行 callback 回调函数（如果存在），然后遍历 A 的邻接顶点 B、C、D。</span></li><li id=\"uac3e26c2\" data-lake-index-type=\"0\"><span class=\"ne-text\">B 未被访问过，颜色为白色，所以将 B 作为参数递归调用 depthFirstSearchVisit()函数。B 设置为灰色，callback('B')。遍历 B 的邻接节点 E 和 F。</span></li><li id=\"u0f15885f\" data-lake-index-type=\"0\"><span class=\"ne-text\">E 未被访问过，颜色为白色，所以将 E 作为参数递归调用 depthFirstSearchVisit()函数。E 设置为灰色，callback('E')。遍历 E 的邻接节点 I。</span></li><li id=\"u54694e0c\" data-lake-index-type=\"0\"><span class=\"ne-text\">I 未被访问过，颜色为白色，所以将 I 作为参数递归调用 depthFirstSearchVisit()函数。I 设置为灰色，callback('I')。I 没有邻接节点，然后将 I 设置为黑色。递归返回到 5。</span></li><li id=\"u5a7634b1\" data-lake-index-type=\"0\"><span class=\"ne-text\">E 没有其它邻接节点，将 E 设置为黑色。递归返回到 4。</span></li><li id=\"uec224401\" data-lake-index-type=\"0\"><span class=\"ne-text\">遍历 B 的另一个邻接节点 F，F 未被访问过，颜色为白色，所以将 F 作为参数递归调用 depthFirstSearchVisit()函数。F 设置为灰色，callback('F')。F 没有邻接节点，然后将 F 设置为黑色。递归返回到 4。</span></li><li id=\"u7c87b4ee\" data-lake-index-type=\"0\"><span class=\"ne-text\">B 的所有邻接节点都被访问过了，将 B 设置为黑色。递归返回到 3。</span></li><li id=\"u13d182bc\" data-lake-index-type=\"0\"><span class=\"ne-text\">访问 A 的第二个邻接节点 C，C 未被访问过，颜色为白色，所以将 C 作为参数递归调用 depthFirstSearchVisit()函数。C 设置为灰色，callback('C')。遍历 C 的邻接节点 D、G。</span></li><li id=\"ud2534a9b\" data-lake-index-type=\"0\"><span class=\"ne-text\">D 未被访问过，颜色为白色，所以将 D 作为参数递归调用 depthFirstSearchVisit()函数。D 设置为灰色，callback('D')。遍历 D 的邻接节点 G 和 H。</span></li><li id=\"ud49b4f03\" data-lake-index-type=\"0\"><span class=\"ne-text\">G 未被访问过，颜色为白色，所以将 G 作为参数递归调用 depthFirstSearchVisit()函数。G 设置为灰色，callback('G')。G 没有邻接节点，然后将 G 设置为黑色。递归返回到 11。</span></li><li id=\"u39cabbfa\" data-lake-index-type=\"0\"><span class=\"ne-text\">遍历 D 的另一个邻接节点 H，H 未被访问过，颜色为白色，所以将 H 作为参数递归调用 depthFirstSearchVisit()函数。H 设置为灰色，callback('H')。H 没有邻接节点，然后将 H 设置为黑色。递归返回到 11。</span></li><li id=\"ua629df56\" data-lake-index-type=\"0\"><span class=\"ne-text\">D 的所有邻接节点都被访问过了，将 D 设置为黑色。递归返回到 10。</span></li><li id=\"ufa0dea1d\" data-lake-index-type=\"0\"><span class=\"ne-text\">遍历 C 的另一个邻接节点 G，由于 G 已经被访问过，对 C 的邻接节点的遍历结束。将 C 设置为黑色。递归返回到 3。</span></li><li id=\"u5173edc9\" data-lake-index-type=\"0\"><span class=\"ne-text\">访问 A 的最后一个邻接节点 D，由于 D 已经被访问过，对 A 的邻接节点的遍历结束。将 A 设置为黑色。</span></li><li id=\"u8bba97a9\" data-lake-index-type=\"0\"><span class=\"ne-text\">然后对剩余的节点进行遍历。由于剩余的节点都被设置为黑色了，所以程序结束。</span></li></ol><p id=\"uc768ec94\" class=\"ne-p\"><br></p><p id=\"u301c4f8b\" class=\"ne-p\"><span class=\"ne-text\">对应的测试用例及执行结果如下：</span></p><p id=\"uf5d8cb0d\" class=\"ne-p\"><br></p><pre data-language=\"javascript\" id=\"82b39cde\" class=\"ne-codeblock language-javascript\"><code>depthFirstSearch(graph, value =&gt; console.log(`visited vertex: ${value}`))</code></pre><p id=\"udf6e1541\" class=\"ne-p\"><br></p><pre data-language=\"plain\" id=\"a67a6dfc\" class=\"ne-codeblock language-plain\"><code>visited vertex: A\nvisited vertex: B\nvisited vertex: E\nvisited vertex: I\nvisited vertex: F\nvisited vertex: C\nvisited vertex: D\nvisited vertex: G\nvisited vertex: H</code></pre><p id=\"u3c92837a\" class=\"ne-p\"><br></p><p id=\"udfd271f0\" class=\"ne-p\"><span class=\"ne-text\">为了便于理解，我们将整个遍历过程用下面的示意图来展示：<br /></span><img src=\"https://cdn.nlark.com/yuque/0/2022/png/732231/1646359703841-9e34b06c-7934-4672-bdf1-ad331b0de3ab.png#clientId=u798dd5a7-9dbb-4&amp;from=paste&amp;id=u38ad8f9e&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=1110&amp;originWidth=1221&amp;originalType=url&amp;ratio=1&amp;size=153210&amp;status=done&amp;style=none&amp;taskId=ua0fecf59-e663-456b-ba03-3393d181ba6\" width=\"1221\" id=\"ghlzZ\" class=\"ne-image\"><span class=\"ne-text\"><br /></span><span class=\"ne-text\">前面说过，深度优先算法的数据结构是栈，然而这里我们并没有使用栈来存储任何数据，而是使用了函数的递归调用，其实递归也是栈的一种表现形式。另外一点，如果图是连通的（即图中任何两个顶点之间都存在路径），我们可以对上述代码中的 depthFirstSearch()方法进行改进，只需要对图的起始顶点开始遍历一次就可以了，而不需要遍历图的所有顶点，因为从起始顶点开始的递归就可以覆盖图的所有顶点。</span></p><p id=\"u433c4e15\" class=\"ne-p\"><br></p><h4 id=\"65cd2e8d\"><span class=\"ne-text\">拓扑排序</span></h4><p id=\"u36e420cf\" class=\"ne-p\"><br></p><p id=\"u197d2be9\" class=\"ne-p\"><span class=\"ne-text\">前面展示了深度优先算法的工作原理，我们可以使用它做更多的事情，例如拓扑排序（toplogical sorting，也叫做 topsort 或者 toposort）。与广度优先算法类似，我们也对上面的 depthFirstSeach()方法进行改进，以说明如何使用深度优先算法来实现拓扑排序：</span></p><p id=\"u4bad9229\" class=\"ne-p\"><br></p><pre data-language=\"javascript\" id=\"7c7534d9\" class=\"ne-codeblock language-javascript\"><code>let DFSVisit = (u, color, discovery, finished, predecessors, time, adjList) =&gt; {\n    color[u] = Colors.GREY\n    discovery[u] = ++time.count\n\n    adjList.get(u).forEach(n =&gt; {\n        if (color[n] === Colors.WHITE) {\n            predecessors[n] = u\n            DFSVisit(n, color, discovery, finished, predecessors, time, adjList)\n        }\n    })\n\n    color[u] = Colors.BLACK\n    finished[u] = ++time.count\n}\n\nlet DFS = graph =&gt; {\n    let vertices = graph.getVertices()\n    let adjList = graph.getAdjList()\n    let color = initializeColor(vertices)\n    let discovery = {}\n    let finished = {}\n    let predecessors = {}\n    let time = { count: 0 }\n\n    vertices.forEach(v =&gt; {\n        finished[v] = 0\n        discovery[v] = 0\n        predecessors[v] = null\n    })\n\n    vertices.forEach(v =&gt; {\n        if (color[v] === Colors.WHITE) {\n            DFSVisit(v, color, discovery, finished, predecessors, time, adjList)\n        }\n    })\n\n    return { discovery, finished, predecessors }\n}</code></pre><p id=\"u536adffc\" class=\"ne-p\"><br></p><p id=\"uaf6a91be\" class=\"ne-p\"><span class=\"ne-text\">DFS()方法会输出图中每个顶点的发现时间和探索时间，我们假定时间从 0 开始，每经过一步时间值加 1。在 DFS()方法中，我们用变量 discovery，finished，predecessors 来保存每个顶点的发现时间、探索时间和前置顶点（这个和广度优先算法中寻找最短路径中的一致，但最终执行结果会有区别），最终的输出结果中也会反映这三个值。这里需要注意的是，变量 time 之所以被定义为对象而不是一个普通的数字，是因为我们需要在函数间传递这个变量，如果只是作为值传递，函数内部对变量的修改不会影响到它的原始值，但是我们就是需要在函数递归调用的过程中不断记录 time 的变化过程，所以采用值传递的方式显然不行。因此我们将 time 定义为一个对象，对象被作为引用传递给函数，这样在函数内部对它的修改就会反映到原始值上。<br /></span><span class=\"ne-text\"></span></p><p id=\"ucae04f88\" class=\"ne-p\"><br></p><p id=\"uc7316cf3\" class=\"ne-p\"><span class=\"ne-text\">来看看对 DFS()方法的测试结果：<br /></span><span class=\"ne-text\"></span></p><p id=\"ucff77ff3\" class=\"ne-p\"><br></p><pre data-language=\"javascript\" id=\"d8ed72d4\" class=\"ne-codeblock language-javascript\"><code>console.log(DFS(graph))</code></pre><p id=\"u0ddb0f54\" class=\"ne-p\"><br></p><pre data-language=\"javascript\" id=\"be621a5c\" class=\"ne-codeblock language-javascript\"><code>{\n  discovery: { A: 1, B: 2, C: 10, D: 11, E: 3, F: 7, G: 12, H: 14, I: 4 },\n  finished: { A: 18, B: 9, C: 17, D: 16, E: 6, F: 8, G: 13, H: 15, I: 5 },\n  predecessors: {\n    A: null,\n    B: 'A',\n    C: 'A',\n    D: 'C',\n    E: 'B',\n    F: 'B',\n    G: 'D',\n    H: 'D',\n    I: 'E'\n  }\n}</code></pre><p id=\"u3004b7c8\" class=\"ne-p\"><br></p><p id=\"ue483cd84\" class=\"ne-p\"><span class=\"ne-text\">我们将结果反映到示意图上，这样更加直观：<br /></span><img src=\"https://cdn.nlark.com/yuque/0/2022/png/732231/1646359760721-1f89ad9d-2ae4-4814-8f88-22b56fc6ffd6.png#clientId=u798dd5a7-9dbb-4&amp;from=paste&amp;id=uf0b1ade3&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=308&amp;originWidth=448&amp;originalType=url&amp;ratio=1&amp;size=21795&amp;status=done&amp;style=none&amp;taskId=u9ecc304f-0cfb-41b3-8d7e-61fa9672b13\" width=\"448\" id=\"uHvL2\" class=\"ne-image\"><span class=\"ne-text\"><br /></span><span class=\"ne-text\">示意图上每一个顶点左边的数字是顶点的发现时间，右边的数字是顶点的探索时间，全部完成时间是 18，可以结合前面的深度优先算法遍历过程示意图来看，它们是对应的。同时我们也看到，深度优先算法的 predecessors 和广度优先算法的 predecessors 会有所不同。<br /></span><span class=\"ne-text\">拓扑排序只能应用于</span><strong><span class=\"ne-text\">有向无环图</span></strong><span class=\"ne-text\">（DAG）。基于上面 DFS()方法的返回结果，我们可以对顶点的完成时间（探索时间 finished）进行排序，以得到我们需要的拓扑排序结果。<br /></span><span class=\"ne-text\">如果要实现有向图，只需要对前面我们实现的 Graph 类的 addEdge()方法略加修改，将最后一行删掉。当然，我们也可以在 Graph 类的构造函数中指明是有向图还是无向图，下面是改进后的 Graph 类：</span></p><p id=\"uc4e149f8\" class=\"ne-p\"><br></p><pre data-language=\"javascript\" id=\"554c367e\" class=\"ne-codeblock language-javascript\"><code>class Graph {\n    constructor(isDirected = false) {\n        this.isDirected = isDirected\n        this.vertices = [] // 用来存放图中的顶点\n        this.adjList = new Dictionary() // 用来存放图中的边\n    }\n\n    // 向图中添加一个新顶点\n    addVertex(v) {\n        if (!this.vertices.includes(v)) {\n            this.vertices.push(v)\n            this.adjList.set(v, [])\n        }\n    }\n\n    // 向图中添加a和b两个顶点之间的边\n    addEdge(a, b) {\n        // 如果图中没有顶点a，先添加顶点a\n        if (!this.adjList.has(a)) {\n            this.addVertex(a)\n        }\n        // 如果图中没有顶点b，先添加顶点b\n        if (!this.adjList.has(b)) {\n            this.addVertex(b)\n        }\n\n        this.adjList.get(a).push(b) // 在顶点a中添加指向顶点b的边\n        if (this.isDirected !== true) {\n            this.adjList.get(b).push(a) // 如果为无向图，则在顶点b中添加指向顶点a的边\n        }\n    }\n\n    // 获取图的vertices\n    getVertices() {\n        return this.vertices\n    }\n\n    // 获取图中的adjList\n    getAdjList() {\n        return this.adjList\n    }\n\n    toString() {\n        let s = &quot;&quot;\n        this.vertices.forEach(v =&gt; {\n            s += `${v} -&gt; `\n            this.adjList.get(v).forEach(n =&gt; {\n                s += `${n} `\n            })\n            s += &quot;\\n&quot;\n        })\n        return s\n    }\n}</code></pre><p id=\"ub9257ab0\" class=\"ne-p\"><br></p><p id=\"u867846fd\" class=\"ne-p\"><span class=\"ne-text\">然后我们对有向图应用 DFS 算法：</span></p><p id=\"u8aaea2e5\" class=\"ne-p\"><br></p><pre data-language=\"javascript\" id=\"f3c54733\" class=\"ne-codeblock language-javascript\"><code>let graph = new Graph()\nlet myVertices = [&quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;, &quot;E&quot;, &quot;F&quot;]\nmyVertices.forEach(v =&gt; {\n    graph.addVertex(v)\n})\ngraph.addEdge(&quot;A&quot;, &quot;C&quot;)\ngraph.addEdge(&quot;A&quot;, &quot;D&quot;)\ngraph.addEdge(&quot;B&quot;, &quot;D&quot;)\ngraph.addEdge(&quot;B&quot;, &quot;E&quot;)\ngraph.addEdge(&quot;C&quot;, &quot;F&quot;)\ngraph.addEdge(&quot;F&quot;, &quot;E&quot;)\nconsole.log(DFS(graph))</code></pre><p id=\"u27cdbf88\" class=\"ne-p\"><br></p><p id=\"u2d1dd4fc\" class=\"ne-p\"><span class=\"ne-text\">下面是返回结果：</span></p><p id=\"ucf4746c1\" class=\"ne-p\"><br></p><pre data-language=\"javascript\" id=\"ac9eb6b3\" class=\"ne-codeblock language-javascript\"><code>{\n  discovery: { A: 1, B: 11, C: 2, D: 8, E: 4, F: 3 },\n  finished: { A: 10, B: 12, C: 7, D: 9, E: 5, F: 6 },\n  predecessors: { A: null, B: null, C: 'A', D: 'A', E: 'F', F: 'C' }\n}</code></pre><p id=\"u669ccc16\" class=\"ne-p\"><br></p><p id=\"ud0141b0e\" class=\"ne-p\"><span class=\"ne-text\">示意图如下：<br /></span><img src=\"https://cdn.nlark.com/yuque/0/2022/png/732231/1646359804089-a9661d27-f4b6-4237-aa72-305a8afe1a22.png#clientId=u798dd5a7-9dbb-4&amp;from=paste&amp;id=ud2095508&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=289&amp;originWidth=280&amp;originalType=url&amp;ratio=1&amp;size=14552&amp;status=done&amp;style=none&amp;taskId=ud81ccd28-3fab-4de0-9e47-c9729fcecbd\" width=\"280\" id=\"sDURb\" class=\"ne-image\"><span class=\"ne-text\"><br /></span><span class=\"ne-text\">对顶点的完成时间进行倒序排序，得到的拓扑排序结果为：B - A - D - C - F - E。</span></p></div>",
  "body_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"viewport\" content=\"fixed\" /><p data-lake-id=\"u839e286f\" id=\"u839e286f\"><a href=\"https://www.cnblogs.com/jaxu/p/11338294.html\" target=\"_blank\" data-lake-id=\"u1dff6e8e\" id=\"u1dff6e8e\"><span data-lake-id=\"u4f77b242\" id=\"u4f77b242\">链接</span></a><span data-lake-id=\"u3124c720\" id=\"u3124c720\"><br /><br /></span></p><p data-lake-id=\"u27f9b656\" id=\"u27f9b656\"><br></p><p data-lake-id=\"u543f5b21\" id=\"u543f5b21\"><span data-lake-id=\"u5be491db\" id=\"u5be491db\">在计算机科学中，图是一种网络结构的抽象模型，它是一组由边连接的顶点组成。一个图 </span><code data-lake-id=\"u58afc7e5\" id=\"u58afc7e5\"><span data-lake-id=\"u2d068fdf\" id=\"u2d068fdf\">G = (V, E)</span></code><span data-lake-id=\"uf6f87397\" id=\"uf6f87397\">由以下元素组成：</span></p><p data-lake-id=\"u08668d47\" id=\"u08668d47\"><br></p><ul list=\"ube5baddb\"><li fid=\"ue1397043\" data-lake-id=\"u48135979\" id=\"u48135979\"><span data-lake-id=\"u136e6dc6\" id=\"u136e6dc6\">V：一组顶点</span></li><li fid=\"ue1397043\" data-lake-id=\"u0ce4178d\" id=\"u0ce4178d\"><span data-lake-id=\"u35c281a5\" id=\"u35c281a5\">E：一组边，连接 V 中的顶点</span></li></ul><p data-lake-id=\"u6528ceb1\" id=\"u6528ceb1\"><br></p><p data-lake-id=\"u84a944e8\" id=\"u84a944e8\"><span data-lake-id=\"u30709136\" id=\"u30709136\">下图表示了一个图的结构：<br /></span><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2022%2Fpng%2F732231%2F1646359057027-63af84f0-687b-43ac-8c8a-8be0ee50fd7e.png%23clientId%3Du798dd5a7-9dbb-4%26from%3Dpaste%26id%3Dua740d26a%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D304%26originWidth%3D439%26originalType%3Durl%26ratio%3D1%26size%3D18355%26status%3Ddone%26style%3Dnone%26taskId%3Du81764242-bb39-41af-a0b8-a002e0329e3%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A439%2C%22originHeight%22%3A304%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23f9f9f9%22%2C%22id%22%3A%22Jd4mS%22%7D\"></card><span data-lake-id=\"udb3351fc\" id=\"udb3351fc\"><br /></span><span data-lake-id=\"u10ced064\" id=\"u10ced064\">在介绍如何用 JavaScript 实现图之前，我们先介绍一些和图相关的术语。<br /></span><span data-lake-id=\"ufb3d00b4\" id=\"ufb3d00b4\">如上图所示，由一条边连接在一起的顶点称为</span><strong><span data-lake-id=\"u77c5bb57\" id=\"u77c5bb57\">相邻顶点</span></strong><span data-lake-id=\"ud6f6e502\" id=\"ud6f6e502\">，A 和 B 是相邻顶点，A 和 D 是相邻顶点，A 和 C 是相邻顶点......A 和 E 是不相邻顶点。一个顶点的</span><strong><span data-lake-id=\"u4b1434ec\" id=\"u4b1434ec\">度</span></strong><span data-lake-id=\"u0a10afe2\" id=\"u0a10afe2\">是其相邻顶点的数量，A 和其它三个顶点相连，所以 A 的度为 3，E 和其它两个顶点相连，所以 E 的度为 2......</span><strong><span data-lake-id=\"u556e4b5b\" id=\"u556e4b5b\">路径</span></strong><span data-lake-id=\"u6a160346\" id=\"u6a160346\">是一组相邻顶点的连续序列，如上图中包含路径 ABEI、路径 ACDG、路径 ABE、路径 ACDH 等。</span><strong><span data-lake-id=\"uda1b3baa\" id=\"uda1b3baa\">简单路径</span></strong><span data-lake-id=\"u85373c35\" id=\"u85373c35\">要求路径中不包含有重复的顶点，如果将</span><strong><span data-lake-id=\"ue710013b\" id=\"ue710013b\">环</span></strong><span data-lake-id=\"uaac1c84e\" id=\"uaac1c84e\">的最后一个顶点去掉，它也是一个简单路径。例如路径 ADCA 是一个环，它不是一个简单路径，如果将路径中的最后一个顶点 A 去掉，那么它就是一个简单路径。如果图中不存在环，则称该图是</span><strong><span data-lake-id=\"u72dc408a\" id=\"u72dc408a\">无环的</span></strong><span data-lake-id=\"u0889de0b\" id=\"u0889de0b\">。如果图中任何两个顶点间都存在路径，则该图是</span><strong><span data-lake-id=\"u903422d7\" id=\"u903422d7\">连通的</span></strong><span data-lake-id=\"u6aa10af0\" id=\"u6aa10af0\">，如上图就是一个连通图。如果图的边没有方向，则该图是</span><strong><span data-lake-id=\"u5ac973f0\" id=\"u5ac973f0\">无向图</span></strong><span data-lake-id=\"ud2ccea36\" id=\"ud2ccea36\">，上图所示为无向图，反之则称为</span><strong><span data-lake-id=\"u625010e9\" id=\"u625010e9\">有向图</span></strong><span data-lake-id=\"u08f986a2\" id=\"u08f986a2\">，下图所示为有向图：<br /></span><span data-lake-id=\"u5d8dc919\" id=\"u5d8dc919\">​</span></p><p data-lake-id=\"uf8f6e649\" id=\"uf8f6e649\"><br></p><p data-lake-id=\"u93b0013a\" id=\"u93b0013a\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2022%2Fpng%2F732231%2F1646359204782-45e54d18-2341-48fa-bdc4-2d96b4a94202.png%23clientId%3Du798dd5a7-9dbb-4%26from%3Dpaste%26id%3Duee32e657%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D290%26originWidth%3D423%26originalType%3Durl%26ratio%3D1%26size%3D18892%26status%3Ddone%26style%3Dnone%26taskId%3Dufeba9f93-c4d6-4dc6-b71c-ae1fbe3bb20%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A423%2C%22originHeight%22%3A290%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23f7f7f7%22%2C%22id%22%3A%22gTavA%22%7D\"></card><span data-lake-id=\"u4d97e16f\" id=\"u4d97e16f\"><br /></span><span data-lake-id=\"u2b5f5573\" id=\"u2b5f5573\">在有向图中，如果两个顶点间在双向上都存在路径，则称这两个顶点是</span><strong><span data-lake-id=\"u19d0a69a\" id=\"u19d0a69a\">强连通</span></strong><span data-lake-id=\"ucfecaa13\" id=\"ucfecaa13\">的，如上图中 C 和 D 是强连通的，而 A 和 B 是非强连通的。如果有向图中的任何两个顶点间在双向上都存在路径，则该有向图是</span><strong><span data-lake-id=\"u0e43399d\" id=\"u0e43399d\">强连通的</span></strong><span data-lake-id=\"u140499cf\" id=\"u140499cf\">，非强连通的图也称为</span><strong><span data-lake-id=\"u374d5c61\" id=\"u374d5c61\">稀疏图</span></strong><span data-lake-id=\"u540268dc\" id=\"u540268dc\">。<br /></span><span data-lake-id=\"u1d0c91bd\" id=\"u1d0c91bd\">此外，图还可以是</span><strong><span data-lake-id=\"u41dbf144\" id=\"u41dbf144\">加权的</span></strong><span data-lake-id=\"u5b162474\" id=\"u5b162474\">。前面我们看到的图都是</span><strong><span data-lake-id=\"ub6c906e9\" id=\"ub6c906e9\">未加权的</span></strong><span data-lake-id=\"uaa551b59\" id=\"uaa551b59\">，下图为一个加权的图：<br /></span><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2022%2Fpng%2F732231%2F1646359204782-be3407f1-9aff-42bc-8206-849976186cc5.png%23clientId%3Du798dd5a7-9dbb-4%26from%3Dpaste%26id%3Du54eef93d%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D290%26originWidth%3D416%26originalType%3Durl%26ratio%3D1%26size%3D19618%26status%3Ddone%26style%3Dnone%26taskId%3Duac9ea293-54c1-45b9-97c9-bf89598461e%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A416%2C%22originHeight%22%3A290%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23f7f7f7%22%2C%22id%22%3A%22VPtOy%22%7D\"></card><span data-lake-id=\"u37905d0e\" id=\"u37905d0e\"><br /></span><span data-lake-id=\"uc81f3155\" id=\"uc81f3155\">可以想象一下，前面我们介绍的</span><a href=\"https://www.cnblogs.com/jaxu/p/11309385.html\" target=\"_blank\" data-lake-id=\"u54c3ea79\" id=\"u54c3ea79\"><span data-lake-id=\"u2dc66cb9\" id=\"u2dc66cb9\">树</span></a><span data-lake-id=\"uadf215ad\" id=\"uadf215ad\">和</span><a href=\"https://www.cnblogs.com/jaxu/p/11277732.html\" target=\"_blank\" data-lake-id=\"u24af53eb\" id=\"u24af53eb\"><span data-lake-id=\"u62452c6d\" id=\"u62452c6d\">链表</span></a><span data-lake-id=\"u8a6bc7d0\" id=\"u8a6bc7d0\">也属于图的一种特殊形式。图在计算机科学中的应用十分广泛，例如我们可以搜索图中的一个特定顶点或一条特定的边，或者寻找两个顶点间的路径以及最短路径，检测图中是否存在环等等。<br /></span><span data-lake-id=\"u9da9e616\" id=\"u9da9e616\">存在多种不同的方式来实现图的数据结构，下面介绍几种常用的方式。<br /></span><span data-lake-id=\"u3a33da42\" id=\"u3a33da42\">​</span></p><p data-lake-id=\"u9b16d5ac\" id=\"u9b16d5ac\"><br></p><h3 data-lake-id=\"7e76b5ae\" id=\"7e76b5ae\"><span data-lake-id=\"ube4de4b5\" id=\"ube4de4b5\">邻接矩阵</span></h3><p data-lake-id=\"u3639d674\" id=\"u3639d674\"><br></p><p data-lake-id=\"u374080ba\" id=\"u374080ba\"><span data-lake-id=\"u142ca17d\" id=\"u142ca17d\">在邻接矩阵中，我们用一个二维数组来表示图中顶点之间的连接，如果两个顶点之间存在连接，则这两个顶点对应的二维数组下标的元素的值为 1，否则为 0。下图是用邻接矩阵方式表示的图：<br /></span><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2022%2Fpng%2F732231%2F1646359226265-8f9cea7c-3845-4ed4-88b7-81e5af6a0f9b.png%23clientId%3Du798dd5a7-9dbb-4%26from%3Dpaste%26id%3Du38f083b2%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D348%26originWidth%3D642%26originalType%3Durl%26ratio%3D1%26size%3D28876%26status%3Ddone%26style%3Dnone%26taskId%3Du4d6fff9e-f3aa-415d-9855-4ff24e42ad8%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A642%2C%22originHeight%22%3A348%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23f7f7f7%22%2C%22id%22%3A%22wlRok%22%7D\"></card><span data-lake-id=\"u386d4e1b\" id=\"u386d4e1b\"><br /></span><span data-lake-id=\"u1bf977aa\" id=\"u1bf977aa\">如果是加权的图，我们可以将邻接矩阵中二维数组里的值 1 改成对应的加权数。邻接矩阵方式存在一个缺点，如果图是非强连通的，则二维数组中会有很多的 0，这表示我们使用了很多的存储空间来表示根本不存在的边。另一个缺点就是当图的顶点发生改变时，对于二维数组的修改会变得不太灵活。</span></p><p data-lake-id=\"udf2e9fce\" id=\"udf2e9fce\"><br></p><h3 data-lake-id=\"3f1e1131\" id=\"3f1e1131\"><span data-lake-id=\"u5581b369\" id=\"u5581b369\">邻接表</span></h3><p data-lake-id=\"u891f7d6d\" id=\"u891f7d6d\"><br></p><p data-lake-id=\"ucc03205c\" id=\"ucc03205c\"><span data-lake-id=\"u5a77e7c9\" id=\"u5a77e7c9\">图的另外一种实现方式是邻接表，它是对邻接矩阵的一种改进。邻接表由图中每个顶点的相邻顶点列表所组成。如下图所示，我们可以用数组、链表、字典或散列表来表示邻接表。<br /></span><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2022%2Fpng%2F732231%2F1646359226296-96283b12-d7fd-44bb-8960-5b82cf258204.png%23clientId%3Du798dd5a7-9dbb-4%26from%3Dpaste%26id%3Duaaa23eb3%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D358%26originWidth%3D633%26originalType%3Durl%26ratio%3D1%26size%3D27109%26status%3Ddone%26style%3Dnone%26taskId%3Du49b517d3-e5bf-4293-9cfb-5718f478568%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A633%2C%22originHeight%22%3A358%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23f9f9f9%22%2C%22id%22%3A%22m8eMN%22%7D\"></card></p><p data-lake-id=\"ub89d65f3\" id=\"ub89d65f3\"><br></p><h3 data-lake-id=\"6b638f34\" id=\"6b638f34\"><span data-lake-id=\"u24040e94\" id=\"u24040e94\">关联矩阵</span></h3><p data-lake-id=\"ua6137d1c\" id=\"ua6137d1c\"><br></p><p data-lake-id=\"uc1e6cc6e\" id=\"uc1e6cc6e\"><span data-lake-id=\"ud65b3527\" id=\"ud65b3527\">我们还可以用关联矩阵来表示图。在关联矩阵中，矩阵的行表示顶点，列表示边。关联矩阵通常用于边的数量比顶点多的情况下，以节省存储空间。如下图所示为关联矩阵方式表示的图：<br /></span><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2022%2Fpng%2F732231%2F1646359226362-2c31bf00-76bb-4511-a668-ec07ef77921e.png%23clientId%3Du798dd5a7-9dbb-4%26from%3Dpaste%26id%3Du5a488b89%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D353%26originWidth%3D730%26originalType%3Durl%26ratio%3D1%26size%3D32692%26status%3Ddone%26style%3Dnone%26taskId%3Du216fca26-b4df-47c1-81d8-40de0ffaafb%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A730%2C%22originHeight%22%3A353%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23f7f7f7%22%2C%22id%22%3A%22PUJb5%22%7D\"></card><span data-lake-id=\"ud6d58efe\" id=\"ud6d58efe\"><br /></span><span data-lake-id=\"u57228e7c\" id=\"u57228e7c\">下面我们重点看下如何用邻接表的方式表示图。我们的 Graph 类的骨架如下，它用邻接表方式来实现无向图：<br /></span><span data-lake-id=\"u3412d3b8\" id=\"u3412d3b8\">​</span></p><p data-lake-id=\"u5a5b54f7\" id=\"u5a5b54f7\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22javascript%22%2C%22code%22%3A%22class%20Graph%20%7B%5Cn%20%20%20%20constructor()%20%7B%5Cn%20%20%20%20%20%20%20%20this.vertices%20%3D%20%5B%5D%20%2F%2F%20%E7%94%A8%E6%9D%A5%E5%AD%98%E6%94%BE%E5%9B%BE%E4%B8%AD%E7%9A%84%E9%A1%B6%E7%82%B9%5Cn%20%20%20%20%20%20%20%20this.adjList%20%3D%20new%20Dictionary()%20%2F%2F%20%E7%94%A8%E6%9D%A5%E5%AD%98%E6%94%BE%E5%9B%BE%E4%B8%AD%E7%9A%84%E8%BE%B9%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%2F%2F%20%E5%90%91%E5%9B%BE%E4%B8%AD%E6%B7%BB%E5%8A%A0%E4%B8%80%E4%B8%AA%E6%96%B0%E9%A1%B6%E7%82%B9%5Cn%20%20%20%20addVertex(v)%20%7B%7D%5Cn%5Cn%20%20%20%20%2F%2F%20%E5%90%91%E5%9B%BE%E4%B8%AD%E6%B7%BB%E5%8A%A0a%E5%92%8Cb%E4%B8%A4%E4%B8%AA%E9%A1%B6%E7%82%B9%E4%B9%8B%E9%97%B4%E7%9A%84%E8%BE%B9%5Cn%20%20%20%20addEdge(a%2C%20b)%20%7B%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22id%22%3A%22c2bc605d%22%7D\"></card><p data-lake-id=\"u1b3190a2\" id=\"u1b3190a2\"><br></p><p data-lake-id=\"u1a5363a7\" id=\"u1a5363a7\"><span data-lake-id=\"u3af72b77\" id=\"u3af72b77\">在 Graph 类中，我们用数组 vertices 来保存图中的所有顶点，用字典（请参考</span><a href=\"https://www.cnblogs.com/jaxu/p/11302315.html\" target=\"_blank\" data-lake-id=\"ua504651b\" id=\"ua504651b\"><span data-lake-id=\"u118a1b2b\" id=\"u118a1b2b\">《JavaScript 数据结构——字典和散列表的实现》</span></a><span data-lake-id=\"ufb65fc72\" id=\"ufb65fc72\">一文中的 Dictionary 类）adjList 来保存图中每一个顶点到相邻顶点的关系列表，在字典中，顶点被作为键值。请参考前面我们给出的邻接表的示意图。然后在 Graph 类中，我们提供两个方法，方法 addVertex()用来向图中添加一个新顶点，方法 addEdge()用来向图中添加给定的顶点 a 和顶点 b 之间的边。让我们来看下这两个方法的实现。</span></p><p data-lake-id=\"u51f56914\" id=\"u51f56914\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22javascript%22%2C%22code%22%3A%22addVertex%20(v)%20%7B%5Cn%20%20%20%20if%20(!this.vertices.includes(v))%20%7B%5Cn%20%20%20%20%20%20%20%20this.vertices.push(v)%3B%5Cn%20%20%20%20%20%20%20%20this.adjList.set(v%2C%20%5B%5D)%3B%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22id%22%3A%2251a81e59%22%7D\"></card><p data-lake-id=\"u74cff0dd\" id=\"u74cff0dd\"><br></p><p data-lake-id=\"u62c7ecbf\" id=\"u62c7ecbf\"><span data-lake-id=\"ub62266bd\" id=\"ub62266bd\">要添加一个新顶点，首先要判断该顶点在图中是否已经存在了，如果已经存在则不能添加。如果不存在，就在 vertices 数组中添加一个新元素，然后在字典 adjList 中添加一个以该顶点作为 key 的新元素，值为空数组。</span></p><p data-lake-id=\"u7fe79749\" id=\"u7fe79749\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22javascript%22%2C%22code%22%3A%22addEdge%20(a%2C%20b)%20%7B%5Cn%20%20%20%20%2F%2F%20%E5%A6%82%E6%9E%9C%E5%9B%BE%E4%B8%AD%E6%B2%A1%E6%9C%89%E9%A1%B6%E7%82%B9a%EF%BC%8C%E5%85%88%E6%B7%BB%E5%8A%A0%E9%A1%B6%E7%82%B9a%5Cn%20%20%20%20if%20(!this.adjList.has(a))%20%7B%5Cn%20%20%20%20%20%20%20%20this.addVertex(a)%3B%5Cn%20%20%20%20%7D%5Cn%20%20%20%20%2F%2F%20%E5%A6%82%E6%9E%9C%E5%9B%BE%E4%B8%AD%E6%B2%A1%E6%9C%89%E9%A1%B6%E7%82%B9b%EF%BC%8C%E5%85%88%E6%B7%BB%E5%8A%A0%E9%A1%B6%E7%82%B9b%5Cn%20%20%20%20if%20(!this.adjList.has(b))%20%7B%5Cn%20%20%20%20%20%20%20%20this.addVertex(b)%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20this.adjList.get(a).push(b)%3B%20%2F%2F%20%E5%9C%A8%E9%A1%B6%E7%82%B9a%E4%B8%AD%E6%B7%BB%E5%8A%A0%E6%8C%87%E5%90%91%E9%A1%B6%E7%82%B9b%E7%9A%84%E8%BE%B9%5Cn%20%20%20%20this.adjList.get(b).push(a)%3B%20%2F%2F%20%E5%9C%A8%E9%A1%B6%E7%82%B9b%E4%B8%AD%E6%B7%BB%E5%8A%A0%E6%8C%87%E5%90%91%E9%A1%B6%E7%82%B9a%E7%9A%84%E8%BE%B9%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22id%22%3A%229e9ec86f%22%7D\"></card><p data-lake-id=\"ua540b512\" id=\"ua540b512\"><br></p><p data-lake-id=\"u66260584\" id=\"u66260584\"><span data-lake-id=\"ubed4cf63\" id=\"ubed4cf63\">addEdge()方法也很简单，首先要确保给定的两个顶点 a 和 b 在图中必须存在，如果不存在，则调用 addVertex()方法进行添加，然后分别在字典中找到键值为顶点 a 和键值为顶点 b 的元素，在对应的值中添加一个新元素。<br /></span><span data-lake-id=\"u7fab97d2\" id=\"u7fab97d2\">下面是 Graph 类的完整代码，其中的 toString()方法是为了我们测试用的，它的存在不是必须的。</span></p><p data-lake-id=\"u4754d7d7\" id=\"u4754d7d7\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22javascript%22%2C%22code%22%3A%22class%20Graph%20%7B%5Cn%20%20%20%20constructor()%20%7B%5Cn%20%20%20%20%20%20%20%20this.vertices%20%3D%20%5B%5D%20%2F%2F%20%E7%94%A8%E6%9D%A5%E5%AD%98%E6%94%BE%E5%9B%BE%E4%B8%AD%E7%9A%84%E9%A1%B6%E7%82%B9%5Cn%20%20%20%20%20%20%20%20this.adjList%20%3D%20new%20Dictionary()%20%2F%2F%20%E7%94%A8%E6%9D%A5%E5%AD%98%E6%94%BE%E5%9B%BE%E4%B8%AD%E7%9A%84%E8%BE%B9%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%2F%2F%20%E5%90%91%E5%9B%BE%E4%B8%AD%E6%B7%BB%E5%8A%A0%E4%B8%80%E4%B8%AA%E6%96%B0%E9%A1%B6%E7%82%B9%5Cn%20%20%20%20addVertex(v)%20%7B%5Cn%20%20%20%20%20%20%20%20if%20(!this.vertices.includes(v))%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20this.vertices.push(v)%5Cn%20%20%20%20%20%20%20%20%20%20%20%20this.adjList.set(v%2C%20%5B%5D)%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%2F%2F%20%E5%90%91%E5%9B%BE%E4%B8%AD%E6%B7%BB%E5%8A%A0a%E5%92%8Cb%E4%B8%A4%E4%B8%AA%E9%A1%B6%E7%82%B9%E4%B9%8B%E9%97%B4%E7%9A%84%E8%BE%B9%5Cn%20%20%20%20addEdge(a%2C%20b)%20%7B%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E5%A6%82%E6%9E%9C%E5%9B%BE%E4%B8%AD%E6%B2%A1%E6%9C%89%E9%A1%B6%E7%82%B9a%EF%BC%8C%E5%85%88%E6%B7%BB%E5%8A%A0%E9%A1%B6%E7%82%B9a%5Cn%20%20%20%20%20%20%20%20if%20(!this.adjList.has(a))%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20this.addVertex(a)%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E5%A6%82%E6%9E%9C%E5%9B%BE%E4%B8%AD%E6%B2%A1%E6%9C%89%E9%A1%B6%E7%82%B9b%EF%BC%8C%E5%85%88%E6%B7%BB%E5%8A%A0%E9%A1%B6%E7%82%B9b%5Cn%20%20%20%20%20%20%20%20if%20(!this.adjList.has(b))%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20this.addVertex(b)%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%20%20%20%20this.adjList.get(a).push(b)%20%2F%2F%20%E5%9C%A8%E9%A1%B6%E7%82%B9a%E4%B8%AD%E6%B7%BB%E5%8A%A0%E6%8C%87%E5%90%91%E9%A1%B6%E7%82%B9b%E7%9A%84%E8%BE%B9%5Cn%20%20%20%20%20%20%20%20this.adjList.get(b).push(a)%20%2F%2F%20%E5%9C%A8%E9%A1%B6%E7%82%B9b%E4%B8%AD%E6%B7%BB%E5%8A%A0%E6%8C%87%E5%90%91%E9%A1%B6%E7%82%B9a%E7%9A%84%E8%BE%B9%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%2F%2F%20%E8%8E%B7%E5%8F%96%E5%9B%BE%E7%9A%84vertices%5Cn%20%20%20%20getVertices()%20%7B%5Cn%20%20%20%20%20%20%20%20return%20this.vertices%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%2F%2F%20%E8%8E%B7%E5%8F%96%E5%9B%BE%E4%B8%AD%E7%9A%84adjList%5Cn%20%20%20%20getAdjList()%20%7B%5Cn%20%20%20%20%20%20%20%20return%20this.adjList%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20toString()%20%7B%5Cn%20%20%20%20%20%20%20%20let%20s%20%3D%20%5C%22%5C%22%5Cn%20%20%20%20%20%20%20%20this.vertices.forEach(v%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20s%20%2B%3D%20%60%24%7Bv%7D%20-%3E%20%60%5Cn%20%20%20%20%20%20%20%20%20%20%20%20this.adjList.get(v).forEach(n%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20s%20%2B%3D%20%60%24%7Bn%7D%20%60%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D)%5Cn%20%20%20%20%20%20%20%20%20%20%20%20s%20%2B%3D%20%5C%22%5C%5Cn%5C%22%5Cn%20%20%20%20%20%20%20%20%7D)%5Cn%20%20%20%20%20%20%20%20return%20s%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22id%22%3A%220c8cffeb%22%7D\"></card><p data-lake-id=\"u8e8ff762\" id=\"u8e8ff762\"><br></p><p data-lake-id=\"udd37663c\" id=\"udd37663c\"><span data-lake-id=\"ub4bbc22d\" id=\"ub4bbc22d\">对于本文一开始给出的图，我们添加下面的测试用例：</span></p><p data-lake-id=\"ue81c2fbe\" id=\"ue81c2fbe\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22javascript%22%2C%22code%22%3A%22let%20graph%20%3D%20new%20Graph()%5Cnlet%20myVertices%20%3D%20%5B%5C%22A%5C%22%2C%20%5C%22B%5C%22%2C%20%5C%22C%5C%22%2C%20%5C%22D%5C%22%2C%20%5C%22E%5C%22%2C%20%5C%22F%5C%22%2C%20%5C%22G%5C%22%2C%20%5C%22H%5C%22%2C%20%5C%22I%5C%22%5D%5CnmyVertices.forEach(v%20%3D%3E%20%7B%5Cn%20%20%20%20graph.addVertex(v)%5Cn%7D)%5Cngraph.addEdge(%5C%22A%5C%22%2C%20%5C%22B%5C%22)%5Cngraph.addEdge(%5C%22A%5C%22%2C%20%5C%22C%5C%22)%5Cngraph.addEdge(%5C%22A%5C%22%2C%20%5C%22D%5C%22)%5Cngraph.addEdge(%5C%22C%5C%22%2C%20%5C%22D%5C%22)%5Cngraph.addEdge(%5C%22C%5C%22%2C%20%5C%22G%5C%22)%5Cngraph.addEdge(%5C%22D%5C%22%2C%20%5C%22G%5C%22)%5Cngraph.addEdge(%5C%22D%5C%22%2C%20%5C%22H%5C%22)%5Cngraph.addEdge(%5C%22B%5C%22%2C%20%5C%22E%5C%22)%5Cngraph.addEdge(%5C%22B%5C%22%2C%20%5C%22F%5C%22)%5Cngraph.addEdge(%5C%22E%5C%22%2C%20%5C%22I%5C%22)%5Cn%5Cnconsole.log(graph.toString())%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22id%22%3A%22269f96ec%22%7D\"></card><p data-lake-id=\"u3163bc06\" id=\"u3163bc06\"><br></p><p data-lake-id=\"ub75d0f8f\" id=\"ub75d0f8f\"><span data-lake-id=\"u75285b10\" id=\"u75285b10\">下面是测试结果：</span></p><p data-lake-id=\"ua556b239\" id=\"ua556b239\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22javascript%22%2C%22code%22%3A%22A%20-%3E%20B%20C%20D%5CnB%20-%3E%20A%20E%20F%5CnC%20-%3E%20A%20D%20G%5CnD%20-%3E%20A%20C%20G%20H%5CnE%20-%3E%20B%20I%5CnF%20-%3E%20B%5CnG%20-%3E%20C%20D%5CnH%20-%3E%20D%5CnI%20-%3E%20E%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22id%22%3A%223f4250d7%22%7D\"></card><p data-lake-id=\"u493f1a39\" id=\"u493f1a39\"><br></p><p data-lake-id=\"uedcbea6c\" id=\"uedcbea6c\"><span data-lake-id=\"udd6fedca\" id=\"udd6fedca\">可以看到，与示意图是相符合的。<br /></span><span data-lake-id=\"u8b8ceecc\" id=\"u8b8ceecc\">和</span><a href=\"https://www.cnblogs.com/jaxu/p/11309385.html\" target=\"_blank\" data-lake-id=\"u371f719d\" id=\"u371f719d\"><span data-lake-id=\"ud7ad6f2f\" id=\"ud7ad6f2f\">树</span></a><span data-lake-id=\"u6cba5934\" id=\"u6cba5934\">类似，我们也可以对图进行遍历，以访问图中的所有顶点。图的遍历方式分为两种：</span><strong><span data-lake-id=\"u9f74a03c\" id=\"u9f74a03c\">广度优先</span></strong><span data-lake-id=\"u56a54b57\" id=\"u56a54b57\">（Breadth-First Search，BFS）和</span><strong><span data-lake-id=\"u1b14fa9c\" id=\"u1b14fa9c\">深度优先</span></strong><span data-lake-id=\"u8959b672\" id=\"u8959b672\">（Depth-First Search，DFS）。对图的遍历可以用来寻找特定的顶点或两个顶点之间的最短路径，以及检查图是否连通、图中是否含有环等。</span></p><table data-lake-id=\"a3a91a54\" id=\"a3a91a54\" margin=\"true\" class=\"lake-table\" style=\"width: 750px\"><colgroup><col width=\"250\"><col width=\"250\"><col width=\"250\"></colgroup><tbody><tr data-lake-id=\"u4eeff5c7\" id=\"u4eeff5c7\"><td data-lake-id=\"ud952bfbf\" id=\"ud952bfbf\"><p data-lake-id=\"ue79c6402\" id=\"ue79c6402\"><strong><span data-lake-id=\"u4b27bbf6\" id=\"u4b27bbf6\">算法</span></strong></p></td><td data-lake-id=\"ucff8fb0a\" id=\"ucff8fb0a\"><p data-lake-id=\"u37fe634d\" id=\"u37fe634d\"><strong><span data-lake-id=\"u186ce52e\" id=\"u186ce52e\">数据结构</span></strong></p></td><td data-lake-id=\"ub21a6401\" id=\"ub21a6401\"><p data-lake-id=\"u37fc1960\" id=\"u37fc1960\"><strong><span data-lake-id=\"u8605dc24\" id=\"u8605dc24\">描述</span></strong></p></td></tr><tr data-lake-id=\"u3bcc0734\" id=\"u3bcc0734\"><td data-lake-id=\"uf886abd8\" id=\"uf886abd8\"><p data-lake-id=\"ub2a455f1\" id=\"ub2a455f1\"><span data-lake-id=\"uce6eb572\" id=\"uce6eb572\">深度优先</span></p></td><td data-lake-id=\"u92f5ad2f\" id=\"u92f5ad2f\"><p data-lake-id=\"uf14df054\" id=\"uf14df054\"><span data-lake-id=\"u12ab0382\" id=\"u12ab0382\">栈</span></p></td><td data-lake-id=\"u19058d32\" id=\"u19058d32\"><p data-lake-id=\"ud3a0f588\" id=\"ud3a0f588\"><span data-lake-id=\"uf70a617f\" id=\"uf70a617f\">将图的顶点存入栈中（有关栈的介绍可以参考</span><a href=\"https://www.cnblogs.com/jaxu/p/11264017.html\" target=\"_blank\" data-lake-id=\"u67de67e3\" id=\"u67de67e3\"><span data-lake-id=\"u9e94a8a6\" id=\"u9e94a8a6\">《JavaScript 数据结构——栈的实现与应用》</span></a></p></td></tr><tr data-lake-id=\"ucbf0fa6d\" id=\"ucbf0fa6d\"><td data-lake-id=\"u3def307a\" id=\"u3def307a\"><p data-lake-id=\"ufb8b7a52\" id=\"ufb8b7a52\"><span data-lake-id=\"uadb0de2c\" id=\"uadb0de2c\">），顶点是沿着路径被探索的，存在新的相邻顶点就去访问。</span></p></td><td data-lake-id=\"u889a1520\" id=\"u889a1520\"></td><td data-lake-id=\"u2daa8e0b\" id=\"u2daa8e0b\"></td></tr><tr data-lake-id=\"uba669db1\" id=\"uba669db1\"><td data-lake-id=\"ub7545957\" id=\"ub7545957\"><p data-lake-id=\"u689245d6\" id=\"u689245d6\"><span data-lake-id=\"u020236be\" id=\"u020236be\">广度优先</span></p></td><td data-lake-id=\"u865dddbd\" id=\"u865dddbd\"><p data-lake-id=\"ub71b308c\" id=\"ub71b308c\"><span data-lake-id=\"u972a3177\" id=\"u972a3177\">队列</span></p></td><td data-lake-id=\"u787f4d03\" id=\"u787f4d03\"><p data-lake-id=\"ub1245977\" id=\"ub1245977\"><span data-lake-id=\"u7c918e25\" id=\"u7c918e25\">将图的顶点存入队列中（有关队列的介绍可以参考</span><a href=\"https://www.cnblogs.com/jaxu/p/11268862.html\" target=\"_blank\" data-lake-id=\"u0904bfb5\" id=\"u0904bfb5\"><span data-lake-id=\"uf84dab63\" id=\"uf84dab63\">《JavaScript 数据结构——队列的实现与应用》</span></a></p></td></tr><tr data-lake-id=\"ud40d5165\" id=\"ud40d5165\"><td data-lake-id=\"u0d416164\" id=\"u0d416164\"><p data-lake-id=\"ue5c20f02\" id=\"ue5c20f02\"><span data-lake-id=\"ufd447d71\" id=\"ufd447d71\">），最先入队列的顶点先被探索。</span></p></td><td data-lake-id=\"udf96fac0\" id=\"udf96fac0\"></td><td data-lake-id=\"u33884f31\" id=\"u33884f31\"></td></tr></tbody></table><p data-lake-id=\"ucdd5e3b5\" id=\"ucdd5e3b5\"><br></p><p data-lake-id=\"u4b4304d6\" id=\"u4b4304d6\"><span data-lake-id=\"u8e2d515e\" id=\"u8e2d515e\">在接下来要实现的算法中，我们按照如下的约定对图中的顶点进行遍历，每个顶点最多访问两次：</span></p><p data-lake-id=\"ub9ae80a1\" id=\"ub9ae80a1\"><br></p><ul list=\"u662f6f6d\"><li fid=\"ub8cc0a0c\" data-lake-id=\"uf72f2d54\" id=\"uf72f2d54\"><span data-lake-id=\"u7544fe4e\" id=\"u7544fe4e\">白色：表示该顶点未被访问。</span></li><li fid=\"ub8cc0a0c\" data-lake-id=\"uc084232d\" id=\"uc084232d\"><span data-lake-id=\"u3d426d5b\" id=\"u3d426d5b\">灰色：表示该顶点被访问过，但未被探索。</span></li><li fid=\"ub8cc0a0c\" data-lake-id=\"uc4657560\" id=\"uc4657560\"><span data-lake-id=\"u8a0912ad\" id=\"u8a0912ad\">黑色：表示该顶点被访问并且被探索过。</span></li></ul><p data-lake-id=\"ua9ac7b18\" id=\"ua9ac7b18\"><br></p><p data-lake-id=\"ud41ae23f\" id=\"ud41ae23f\"><span data-lake-id=\"ud1d3799e\" id=\"ud1d3799e\">​</span><br></p><p data-lake-id=\"u19271b7c\" id=\"u19271b7c\"><br></p><h3 data-lake-id=\"274c2782\" id=\"274c2782\"><span data-lake-id=\"u58a8a938\" id=\"u58a8a938\">广度优先</span></h3><p data-lake-id=\"u4527fd52\" id=\"u4527fd52\"><br></p><p data-lake-id=\"u5047dcb7\" id=\"u5047dcb7\"><span data-lake-id=\"u7b83f448\" id=\"u7b83f448\">广度优先算法会从指定的第一个顶点开始遍历图，先访问这个顶点的所有相邻顶点，然后再访问这些相邻顶点的相邻顶点，以此类推。最终，广度优先算法会先广后深地访问图中的所有顶点。下面是广度优先遍历的示意图：<br /></span><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2022%2Fpng%2F732231%2F1646359383875-9a363ae2-7439-49a4-b554-442c57770ccd.png%23clientId%3Du798dd5a7-9dbb-4%26from%3Dpaste%26id%3Du0c0cb847%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D476%26originWidth%3D438%26originalType%3Durl%26ratio%3D1%26size%3D33943%26status%3Ddone%26style%3Dnone%26taskId%3Du658bc8b2-11eb-4d9a-a7fa-06fc6031f5d%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A438%2C%22originHeight%22%3A476%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23f7f7f7%22%2C%22id%22%3A%22xITTe%22%7D\"></card><span data-lake-id=\"u4c53fd23\" id=\"u4c53fd23\"><br /></span><span data-lake-id=\"u049bd943\" id=\"u049bd943\">由于我们采用邻接表的方式来存储图的数据，对于图的每个顶点，都有一个字典与之对应，字典的键值为顶点的值，字典的内容为与该顶点相邻的顶点列表。基于这种数据结构，我们可以考虑将所有顶点的邻接顶点存入队列，然后依次处理队列中的顶点。下面是具体的遍历步骤：</span></p><p data-lake-id=\"ua3cfcbb3\" id=\"ua3cfcbb3\"><br></p><ol list=\"u6f30517f\"><li fid=\"u9be513eb\" data-lake-id=\"u3e190dff\" id=\"u3e190dff\"><span data-lake-id=\"u469a620c\" id=\"u469a620c\">将开始顶点存入队列。</span></li><li fid=\"u9be513eb\" data-lake-id=\"ude20bd49\" id=\"ude20bd49\"><span data-lake-id=\"u24aab224\" id=\"u24aab224\">遍历开始顶点的所有邻接顶点，如果这些邻接顶点没有被访问过（颜色为白色），则将它们标记为被访问（颜色为灰色），然后加入队列。</span></li><li fid=\"u9be513eb\" data-lake-id=\"u82f56123\" id=\"u82f56123\"><span data-lake-id=\"u31e593e1\" id=\"u31e593e1\">将开始顶点标记为被处理（颜色为黑色）。</span></li><li fid=\"u9be513eb\" data-lake-id=\"ue3664ab9\" id=\"ue3664ab9\"><span data-lake-id=\"uaf16a3d8\" id=\"uaf16a3d8\">循环处理队列中的顶点，直到队列为空。</span></li></ol><p data-lake-id=\"u8d737686\" id=\"u8d737686\"><br></p><p data-lake-id=\"uf38ad889\" id=\"uf38ad889\"><span data-lake-id=\"u673ec2a4\" id=\"u673ec2a4\">下面是该算法的具体实现：</span></p><p data-lake-id=\"uaed95ba1\" id=\"uaed95ba1\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22javascript%22%2C%22code%22%3A%22let%20Colors%20%3D%20%7B%5Cn%20%20%20%20WHITE%3A%200%2C%5Cn%20%20%20%20GREY%3A%201%2C%5Cn%20%20%20%20BLACK%3A%202%5Cn%7D%5Cn%5Cnlet%20initializeColor%20%3D%20vertices%20%3D%3E%20%7B%5Cn%20%20%20%20let%20color%20%3D%20%7B%7D%5Cn%20%20%20%20vertices.forEach(v%20%3D%3E%20(color%5Bv%5D%20%3D%20Colors.WHITE))%5Cn%20%20%20%20return%20color%5Cn%7D%5Cn%5Cnlet%20breadthFirstSearch%20%3D%20(graph%2C%20startVertex%2C%20callback)%20%3D%3E%20%7B%5Cn%20%20%20%20let%20vertices%20%3D%20graph.getVertices()%5Cn%20%20%20%20let%20adjList%20%3D%20graph.getAdjList()%5Cn%20%20%20%20let%20color%20%3D%20initializeColor(vertices)%5Cn%20%20%20%20let%20queue%20%3D%20new%20Queue()%5Cn%5Cn%20%20%20%20queue.enqueue(startVertex)%5Cn%5Cn%20%20%20%20while%20(!queue.isEmpty())%20%7B%5Cn%20%20%20%20%20%20%20%20let%20u%20%3D%20queue.dequeue()%5Cn%20%20%20%20%20%20%20%20adjList.get(u).forEach(n%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20if%20(color%5Bn%5D%20%3D%3D%3D%20Colors.WHITE)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20color%5Bn%5D%20%3D%20Colors.GREY%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20queue.enqueue(n)%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%7D)%5Cn%5Cn%20%20%20%20%20%20%20%20color%5Bu%5D%20%3D%20Colors.BLACK%5Cn%20%20%20%20%20%20%20%20if%20(callback)%20callback(u)%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22id%22%3A%22d657890e%22%7D\"></card><p data-lake-id=\"ub55c3635\" id=\"ub55c3635\"><br></p><p data-lake-id=\"uf6232383\" id=\"uf6232383\"><span data-lake-id=\"u5c9c9a4c\" id=\"u5c9c9a4c\">breadthFirstSearch()方法接收一个 graph 对象，图的数据通过该对象传入。参数 startVertex 指定了遍历的起始顶点。回调函数 callback 规定了要如何处理被遍历到的顶点。<br /></span><span data-lake-id=\"u72f9a192\" id=\"u72f9a192\">首先通过 initializeColor()函数将所有的顶点标记为未被访问过（颜色为白色），这些颜色保存在以顶点值为 key 的 color 对象中。图的 vertices 和 adjList 属性可以通过 getVertices()和 getAdjList()方法得到，然后构造一个队列 queue（有关队列类 Queue 请参考</span><a href=\"https://www.cnblogs.com/jaxu/p/11268862.html\" target=\"_blank\" data-lake-id=\"u79653920\" id=\"u79653920\"><span data-lake-id=\"u878ab8cc\" id=\"u878ab8cc\">《JavaScript 数据结构——队列的实现与应用》</span></a><span data-lake-id=\"u11b1ed61\" id=\"u11b1ed61\">），按照上面描述的步骤对图的顶点进行遍历。<br /></span><span data-lake-id=\"u23e94101\" id=\"u23e94101\">在前面我们给出的测试用例的基础上，添加下面的代码，来看看 breadthFirstSearch()方法的执行结果：</span></p><p data-lake-id=\"ud96529e7\" id=\"ud96529e7\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22javascript%22%2C%22code%22%3A%22breadthFirstSearch(graph%2C%20%5C%22A%5C%22%2C%20value%20%3D%3E%20console.log(%60visited%20vertex%3A%20%24%7Bvalue%7D%60))%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22id%22%3A%22719994a2%22%7D\"></card><p data-lake-id=\"u09afaf43\" id=\"u09afaf43\"><br></p><p data-lake-id=\"ub6080907\" id=\"ub6080907\"><span data-lake-id=\"u595d83a7\" id=\"u595d83a7\">参数 graph 为前面测试用例中 Graph 类的实例，也就是我们用来保存图的数据的对象，'A'被作为遍历的起始顶点，在回调函数中，打印一行文本，用来展示顶点被遍历的顺序。下面是测试结果：</span></p><p data-lake-id=\"ub4f3d563\" id=\"ub4f3d563\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22javascript%22%2C%22code%22%3A%22visited%20vertex%3A%20A%5Cnvisited%20vertex%3A%20B%5Cnvisited%20vertex%3A%20C%5Cnvisited%20vertex%3A%20D%5Cnvisited%20vertex%3A%20E%5Cnvisited%20vertex%3A%20F%5Cnvisited%20vertex%3A%20G%5Cnvisited%20vertex%3A%20H%5Cnvisited%20vertex%3A%20I%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22id%22%3A%22c3e83fb4%22%7D\"></card><p data-lake-id=\"ue36ba175\" id=\"ue36ba175\"><br></p><p data-lake-id=\"uacff4eba\" id=\"uacff4eba\"><span data-lake-id=\"ua41d2390\" id=\"ua41d2390\">尝试将'I'作为起始顶点，看看执行结果：</span></p><p data-lake-id=\"uebe9f9ca\" id=\"uebe9f9ca\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22javascript%22%2C%22code%22%3A%22visited%20vertex%3A%20I%5Cnvisited%20vertex%3A%20E%5Cnvisited%20vertex%3A%20B%5Cnvisited%20vertex%3A%20A%5Cnvisited%20vertex%3A%20F%5Cnvisited%20vertex%3A%20C%5Cnvisited%20vertex%3A%20D%5Cnvisited%20vertex%3A%20G%5Cnvisited%20vertex%3A%20H%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22id%22%3A%2225c3f2ec%22%7D\"></card><p data-lake-id=\"ucdd0cedf\" id=\"ucdd0cedf\"><br></p><p data-lake-id=\"ubcd8a49d\" id=\"ubcd8a49d\"><span data-lake-id=\"uc65aa8de\" id=\"uc65aa8de\">为了方便理解，我们将顶点 I 放到最上面。从顶点 I 开始，首先遍历到的是它的相邻顶点 E，然后是 E 的相邻顶点 B，其次是 B 的相邻顶点 A 和 F，A 的相邻顶点 C 和 D，C 的相邻顶点 G（D 已经被遍历过了），最后是 D 的相邻顶点 H（C 和 G 已经被遍历过了）。<br /></span><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2022%2Fpng%2F732231%2F1646359485089-46d19b10-8906-49a2-accd-5151e03c3716.png%23clientId%3Du798dd5a7-9dbb-4%26from%3Dpaste%26id%3Du5b3b336f%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D298%26originWidth%3D412%26originalType%3Durl%26ratio%3D1%26size%3D18082%26status%3Ddone%26style%3Dnone%26taskId%3Du3d9e91c2-b651-4a12-848d-2ad7d01ed4c%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A412%2C%22originHeight%22%3A298%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22id%22%3A%22SRyW5%22%7D\"></card></p><p data-lake-id=\"uc376c5ca\" id=\"uc376c5ca\"><br></p><h4 data-lake-id=\"603d9318\" id=\"603d9318\"><span data-lake-id=\"u8ce674a7\" id=\"u8ce674a7\">寻找最短路径</span></h4><p data-lake-id=\"u5dc0cc71\" id=\"u5dc0cc71\"><br></p><p data-lake-id=\"u5a2a0b60\" id=\"u5a2a0b60\"><span data-lake-id=\"u804a420b\" id=\"u804a420b\">前面展示了广度优先算法的工作原理，我们可以使用它做更多的事情，例如在一个图 G 中，从顶点 v 开始到其它所有顶点间的最短距离。我们考虑一下如何用 BFS 来实现寻找最短路径。<br /></span><span data-lake-id=\"u676ef8b9\" id=\"u676ef8b9\">假设两个相邻顶点间的距离为 1，从顶点 v 开始，在其路径上每经过一个顶点，距离加 1。下面是对 breadthFirstSearch()方法的改进，用来返回从起始顶点开始到其它所有顶点间的距离，以及所有顶点的前置顶点。</span></p><p data-lake-id=\"u57ba9e94\" id=\"u57ba9e94\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22javascript%22%2C%22code%22%3A%22let%20BFS%20%3D%20(graph%2C%20startVertex)%20%3D%3E%20%7B%5Cn%20%20%20%20let%20vertices%20%3D%20graph.getVertices()%5Cn%20%20%20%20let%20adjList%20%3D%20graph.getAdjList()%5Cn%20%20%20%20let%20color%20%3D%20initializeColor(vertices)%5Cn%20%20%20%20let%20queue%20%3D%20new%20Queue()%5Cn%20%20%20%20let%20distances%20%3D%20%7B%7D%5Cn%20%20%20%20let%20predecessors%20%3D%20%7B%7D%5Cn%5Cn%20%20%20%20queue.enqueue(startVertex)%5Cn%5Cn%20%20%20%20%2F%2F%20%E5%88%9D%E5%A7%8B%E5%8C%96%E6%89%80%E6%9C%89%E9%A1%B6%E7%82%B9%E7%9A%84%E8%B7%9D%E7%A6%BB%E4%B8%BA0%EF%BC%8C%E5%89%8D%E7%BD%AE%E8%8A%82%E7%82%B9%E4%B8%BAnull%5Cn%20%20%20%20vertices.forEach(v%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20%20%20distances%5Bv%5D%20%3D%200%5Cn%20%20%20%20%20%20%20%20predecessors%5Bv%5D%20%3D%20null%5Cn%20%20%20%20%7D)%5Cn%5Cn%20%20%20%20while%20(!queue.isEmpty())%20%7B%5Cn%20%20%20%20%20%20%20%20let%20u%20%3D%20queue.dequeue()%5Cn%20%20%20%20%20%20%20%20adjList.get(u).forEach(n%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20if%20(color%5Bn%5D%20%3D%3D%3D%20Colors.WHITE)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20color%5Bn%5D%20%3D%20Colors.GREY%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20distances%5Bn%5D%20%3D%20distances%5Bu%5D%20%2B%201%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20predecessors%5Bn%5D%20%3D%20u%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20queue.enqueue(n)%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%7D)%5Cn%5Cn%20%20%20%20%20%20%20%20color%5Bu%5D%20%3D%20Colors.BLACK%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20return%20%7B%20distances%2C%20predecessors%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22id%22%3A%22f2607260%22%7D\"></card><p data-lake-id=\"u803ece7b\" id=\"u803ece7b\"><br></p><p data-lake-id=\"uf540a29c\" id=\"uf540a29c\"><span data-lake-id=\"u80c823b0\" id=\"u80c823b0\">在 BFS()方法中，我们定义了两个对象 distances 和 predecessors，用来保存从起始顶点出发到其它所有顶点的距离以及这些顶点的前置顶点。BFS()方法不需要 callback 回调函数，因为它会自行输出最终结果。与 breadthFirstSearch()方法的逻辑类似，只不过在开始的时候将所有顶点的距离初始化为 0，前置顶点初始化为 null，然后在遍历的过程中，重新设置顶点的 distances 值和 predecessors 值。我们仍然将顶点 A 作为起始顶点，来看看测试结果：</span></p><p data-lake-id=\"uadec4f59\" id=\"uadec4f59\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22javascript%22%2C%22code%22%3A%22console.log(BFS(graph%2C%20%5C%22A%5C%22))%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22id%22%3A%2273832fcd%22%7D\"></card><p data-lake-id=\"u22772013\" id=\"u22772013\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%7B%5Cn%20%20distances%3A%20%7B%20A%3A%200%2C%20B%3A%201%2C%20C%3A%201%2C%20D%3A%201%2C%20E%3A%202%2C%20F%3A%202%2C%20G%3A%202%2C%20H%3A%202%2C%20I%3A%203%20%7D%2C%5Cn%20%20predecessors%3A%20%7B%5Cn%20%20%20%20A%3A%20null%2C%5Cn%20%20%20%20B%3A%20'A'%2C%5Cn%20%20%20%20C%3A%20'A'%2C%5Cn%20%20%20%20D%3A%20'A'%2C%5Cn%20%20%20%20E%3A%20'B'%2C%5Cn%20%20%20%20F%3A%20'B'%2C%5Cn%20%20%20%20G%3A%20'C'%2C%5Cn%20%20%20%20H%3A%20'D'%2C%5Cn%20%20%20%20I%3A%20'E'%5Cn%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22id%22%3A%226cb925fb%22%7D\"></card><p data-lake-id=\"ucdc6cf0e\" id=\"ucdc6cf0e\"><br></p><p data-lake-id=\"u852936cf\" id=\"u852936cf\"><span data-lake-id=\"u99cdd490\" id=\"u99cdd490\">如你所见，distances 为从顶点 A 开始到其它所有顶点的最短距离（相邻顶点间的距离为 1），predecessors 记录了所有顶点的前置顶点。以 BFS()方法的返回结果为基础，通过下面的代码，我们可以得出从顶点 A 开始到其它所有顶点的最短路径：</span></p><p data-lake-id=\"uec4e388e\" id=\"uec4e388e\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22javascript%22%2C%22code%22%3A%22let%20shortestPathA%20%3D%20BFS(graph%2C%20%5C%22A%5C%22)%5Cnlet%20startVertex%20%3D%20%5C%22A%5C%22%5CnmyVertices.forEach(v%20%3D%3E%20%7B%5Cn%20%20%20%20let%20path%20%3D%20new%20Stack()%5Cn%20%20%20%20for%20(let%20v2%20%3D%20v%3B%20v2%20!%3D%3D%20startVertex%3B%20v2%20%3D%20shortestPathA.predecessors%5Bv2%5D)%20%7B%5Cn%20%20%20%20%20%20%20%20path.push(v2)%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20path.push(startVertex)%5Cn%20%20%20%20let%20s%20%3D%20path.pop()%5Cn%20%20%20%20while%20(!path.isEmpty())%20%7B%5Cn%20%20%20%20%20%20%20%20s%20%2B%3D%20%60%20-%20%24%7Bpath.pop()%7D%60%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20console.log(s)%5Cn%7D)%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22id%22%3A%22158bcf97%22%7D\"></card><p data-lake-id=\"u908b0246\" id=\"u908b0246\"><br></p><p data-lake-id=\"u9f919569\" id=\"u9f919569\"><span data-lake-id=\"u3e537c00\" id=\"u3e537c00\">其中的 Stack 类可以参考</span><a href=\"https://www.cnblogs.com/jaxu/p/11264017.html\" target=\"_blank\" data-lake-id=\"u529c26b2\" id=\"u529c26b2\"><span data-lake-id=\"u6664c1fb\" id=\"u6664c1fb\">《JavaScript 数据结构——栈的实现与应用》</span></a><span data-lake-id=\"u8e4a3017\" id=\"u8e4a3017\">。下面是对应的执行结果：</span></p><p data-lake-id=\"u7dad597f\" id=\"u7dad597f\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22plain%22%2C%22code%22%3A%22A%5CnA%20-%20B%5CnA%20-%20C%5CnA%20-%20D%5CnA%20-%20B%20-%20E%5CnA%20-%20B%20-%20F%5CnA%20-%20C%20-%20G%5CnA%20-%20D%20-%20H%5CnA%20-%20B%20-%20E%20-%20I%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22id%22%3A%220dd786f7%22%7D\"></card><p data-lake-id=\"u559c46ff\" id=\"u559c46ff\"><br></p><p data-lake-id=\"u66719562\" id=\"u66719562\"><span data-lake-id=\"u5cb56227\" id=\"u5cb56227\">以上我们说的都是未加权的图，对于加权的图，广度优先算法并不是最合适的。下面给出了另外几种最短路径算法：<br /></span><strong><span data-lake-id=\"u7d1e4ff7\" id=\"u7d1e4ff7\">Dijkstra</span></strong><span data-lake-id=\"ufcdcd806\" id=\"ufcdcd806\"> - 寻找从指定顶点到其它所有顶点的最短路径的贪心算法。</span></p><p data-lake-id=\"u738115b8\" id=\"u738115b8\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22javascript%22%2C%22code%22%3A%22const%20INF%20%3D%20Number.MAX_SAFE_INTEGER%5Cnconst%20minDistance%20%3D%20(dist%2C%20visited)%20%3D%3E%20%7B%5Cn%20%20%20%20let%20min%20%3D%20INF%5Cn%20%20%20%20let%20minIndex%20%3D%20-1%5Cn%20%20%20%20for%20(let%20v%20%3D%200%3B%20v%20%3C%20dist.length%3B%20v%2B%2B)%20%7B%5Cn%20%20%20%20%20%20%20%20if%20(visited%5Bv%5D%20%3D%3D%3D%20false%20%26%26%20dist%5Bv%5D%20%3C%3D%20min)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20min%20%3D%20dist%5Bv%5D%5Cn%20%20%20%20%20%20%20%20%20%20%20%20minIndex%20%3D%20v%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%7D%5Cn%20%20%20%20return%20minIndex%5Cn%7D%5Cnconst%20dijkstra%20%3D%20(graph%2C%20src)%20%3D%3E%20%7B%5Cn%20%20%20%20const%20dist%20%3D%20%5B%5D%5Cn%20%20%20%20const%20visited%20%3D%20%5B%5D%5Cn%20%20%20%20const%20%7B%20length%20%7D%20%3D%20graph%5Cn%20%20%20%20for%20(let%20i%20%3D%200%3B%20i%20%3C%20length%3B%20i%2B%2B)%20%7B%5Cn%20%20%20%20%20%20%20%20dist%5Bi%5D%20%3D%20INF%5Cn%20%20%20%20%20%20%20%20visited%5Bi%5D%20%3D%20false%5Cn%20%20%20%20%7D%5Cn%20%20%20%20dist%5Bsrc%5D%20%3D%200%5Cn%20%20%20%20for%20(let%20i%20%3D%200%3B%20i%20%3C%20length%20-%201%3B%20i%2B%2B)%20%7B%5Cn%20%20%20%20%20%20%20%20const%20u%20%3D%20minDistance(dist%2C%20visited)%5Cn%20%20%20%20%20%20%20%20visited%5Bu%5D%20%3D%20true%5Cn%20%20%20%20%20%20%20%20for%20(let%20v%20%3D%200%3B%20v%20%3C%20length%3B%20v%2B%2B)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20if%20(!visited%5Bv%5D%20%26%26%20graph%5Bu%5D%5Bv%5D%20!%3D%3D%200%20%26%26%20dist%5Bu%5D%20!%3D%3D%20INF%20%26%26%20dist%5Bu%5D%20%2B%20graph%5Bu%5D%5Bv%5D%20%3C%20dist%5Bv%5D)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20dist%5Bv%5D%20%3D%20dist%5Bu%5D%20%2B%20graph%5Bu%5D%5Bv%5D%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%7D%5Cn%20%20%20%20return%20dist%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22id%22%3A%228026fe84%22%7D\"></card><p data-lake-id=\"udfc58e85\" id=\"udfc58e85\"><br></p><p data-lake-id=\"u9ccd5b9b\" id=\"u9ccd5b9b\"><strong><span data-lake-id=\"u3c02b038\" id=\"u3c02b038\">Floyd-Warshall</span></strong><span data-lake-id=\"u52bcd5fa\" id=\"u52bcd5fa\"> - 计算图中所有最短路径的动态规划算法。</span></p><p data-lake-id=\"u3604f92b\" id=\"u3604f92b\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22javascript%22%2C%22code%22%3A%22const%20floydWarshall%20%3D%20graph%20%3D%3E%20%7B%5Cn%20%20%20%20const%20dist%20%3D%20%5B%5D%5Cn%20%20%20%20const%20%7B%20length%20%7D%20%3D%20graph%5Cn%20%20%20%20for%20(let%20i%20%3D%200%3B%20i%20%3C%20length%3B%20i%2B%2B)%20%7B%5Cn%20%20%20%20%20%20%20%20dist%5Bi%5D%20%3D%20%5B%5D%5Cn%20%20%20%20%20%20%20%20for%20(let%20j%20%3D%200%3B%20j%20%3C%20length%3B%20j%2B%2B)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20if%20(i%20%3D%3D%3D%20j)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20dist%5Bi%5D%5Bj%5D%20%3D%200%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%20else%20if%20(!isFinite(graph%5Bi%5D%5Bj%5D))%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20dist%5Bi%5D%5Bj%5D%20%3D%20Infinity%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%20else%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20dist%5Bi%5D%5Bj%5D%20%3D%20graph%5Bi%5D%5Bj%5D%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%7D%5Cn%20%20%20%20for%20(let%20k%20%3D%200%3B%20k%20%3C%20length%3B%20k%2B%2B)%20%7B%5Cn%20%20%20%20%20%20%20%20for%20(let%20i%20%3D%200%3B%20i%20%3C%20length%3B%20i%2B%2B)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20for%20(let%20j%20%3D%200%3B%20j%20%3C%20length%3B%20j%2B%2B)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20if%20(dist%5Bi%5D%5Bk%5D%20%2B%20dist%5Bk%5D%5Bj%5D%20%3C%20dist%5Bi%5D%5Bj%5D)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20dist%5Bi%5D%5Bj%5D%20%3D%20dist%5Bi%5D%5Bk%5D%20%2B%20dist%5Bk%5D%5Bj%5D%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%7D%5Cn%20%20%20%20return%20dist%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22id%22%3A%22604f6e27%22%7D\"></card><p data-lake-id=\"uefdcdf56\" id=\"uefdcdf56\"><br></p><p data-lake-id=\"u6affaa39\" id=\"u6affaa39\"><strong><span data-lake-id=\"u5fbcd9c5\" id=\"u5fbcd9c5\">Kruskal</span></strong><span data-lake-id=\"u6c0bdc25\" id=\"u6c0bdc25\"> - 求解加权无向连通图的最小生成树（MST）的贪心算法。</span></p><p data-lake-id=\"ud678902f\" id=\"ud678902f\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22javascript%22%2C%22code%22%3A%22const%20INF%20%3D%20Number.MAX_SAFE_INTEGER%5Cnconst%20find%20%3D%20(i%2C%20parent)%20%3D%3E%20%7B%5Cn%20%20%20%20while%20(parent%5Bi%5D)%20%7B%5Cn%20%20%20%20%20%20%20%20i%20%3D%20parent%5Bi%5D%20%2F%2F%20eslint-disable-line%20prefer-destructuring%5Cn%20%20%20%20%7D%5Cn%20%20%20%20return%20i%5Cn%7D%5Cnconst%20union%20%3D%20(i%2C%20j%2C%20parent)%20%3D%3E%20%7B%5Cn%20%20%20%20if%20(i%20!%3D%3D%20j)%20%7B%5Cn%20%20%20%20%20%20%20%20parent%5Bj%5D%20%3D%20i%5Cn%20%20%20%20%20%20%20%20return%20true%5Cn%20%20%20%20%7D%5Cn%20%20%20%20return%20false%5Cn%7D%5Cnconst%20initializeCost%20%3D%20graph%20%3D%3E%20%7B%5Cn%20%20%20%20const%20cost%20%3D%20%5B%5D%5Cn%20%20%20%20const%20%7B%20length%20%7D%20%3D%20graph%5Cn%20%20%20%20for%20(let%20i%20%3D%200%3B%20i%20%3C%20length%3B%20i%2B%2B)%20%7B%5Cn%20%20%20%20%20%20%20%20cost%5Bi%5D%20%3D%20%5B%5D%5Cn%20%20%20%20%20%20%20%20for%20(let%20j%20%3D%200%3B%20j%20%3C%20length%3B%20j%2B%2B)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20if%20(graph%5Bi%5D%5Bj%5D%20%3D%3D%3D%200)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20cost%5Bi%5D%5Bj%5D%20%3D%20INF%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%20else%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20cost%5Bi%5D%5Bj%5D%20%3D%20graph%5Bi%5D%5Bj%5D%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%7D%5Cn%20%20%20%20return%20cost%5Cn%7D%5Cnconst%20kruskal%20%3D%20graph%20%3D%3E%20%7B%5Cn%20%20%20%20const%20%7B%20length%20%7D%20%3D%20graph%5Cn%20%20%20%20const%20parent%20%3D%20%5B%5D%5Cn%20%20%20%20let%20ne%20%3D%200%5Cn%20%20%20%20let%20a%5Cn%20%20%20%20let%20b%5Cn%20%20%20%20let%20u%5Cn%20%20%20%20let%20v%5Cn%20%20%20%20const%20cost%20%3D%20initializeCost(graph)%5Cn%20%20%20%20while%20(ne%20%3C%20length%20-%201)%20%7B%5Cn%20%20%20%20%20%20%20%20for%20(let%20i%20%3D%200%2C%20min%20%3D%20INF%3B%20i%20%3C%20length%3B%20i%2B%2B)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20for%20(let%20j%20%3D%200%3B%20j%20%3C%20length%3B%20j%2B%2B)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20if%20(cost%5Bi%5D%5Bj%5D%20%3C%20min)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20min%20%3D%20cost%5Bi%5D%5Bj%5D%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20a%20%3D%20u%20%3D%20i%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20b%20%3D%20v%20%3D%20j%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20u%20%3D%20find(u%2C%20parent)%5Cn%20%20%20%20%20%20%20%20v%20%3D%20find(v%2C%20parent)%5Cn%20%20%20%20%20%20%20%20if%20(union(u%2C%20v%2C%20parent))%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20ne%2B%2B%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20cost%5Ba%5D%5Bb%5D%20%3D%20cost%5Bb%5D%5Ba%5D%20%3D%20INF%5Cn%20%20%20%20%7D%5Cn%20%20%20%20return%20parent%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22id%22%3A%22d4d432aa%22%7D\"></card><p data-lake-id=\"u2051f1d7\" id=\"u2051f1d7\"><br></p><p data-lake-id=\"ub413e613\" id=\"ub413e613\"><strong><span data-lake-id=\"uad3b24c2\" id=\"uad3b24c2\">Prime</span></strong><span data-lake-id=\"u163e22d6\" id=\"u163e22d6\"> - 求解加权无向连通图的最小生成树（MST）的贪心算法。</span></p><p data-lake-id=\"u0f55c6cf\" id=\"u0f55c6cf\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22javascript%22%2C%22code%22%3A%22const%20INF%20%3D%20Number.MAX_SAFE_INTEGER%5Cnconst%20minKey%20%3D%20(graph%2C%20key%2C%20visited)%20%3D%3E%20%7B%5Cn%20%20%20%20%2F%2F%20Initialize%20min%20value%5Cn%20%20%20%20let%20min%20%3D%20INF%5Cn%20%20%20%20let%20minIndex%20%3D%200%5Cn%20%20%20%20for%20(let%20v%20%3D%200%3B%20v%20%3C%20graph.length%3B%20v%2B%2B)%20%7B%5Cn%20%20%20%20%20%20%20%20if%20(visited%5Bv%5D%20%3D%3D%3D%20false%20%26%26%20key%5Bv%5D%20%3C%20min)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20min%20%3D%20key%5Bv%5D%5Cn%20%20%20%20%20%20%20%20%20%20%20%20minIndex%20%3D%20v%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%7D%5Cn%20%20%20%20return%20minIndex%5Cn%7D%5Cnconst%20prim%20%3D%20graph%20%3D%3E%20%7B%5Cn%20%20%20%20const%20parent%20%3D%20%5B%5D%5Cn%20%20%20%20const%20key%20%3D%20%5B%5D%5Cn%20%20%20%20const%20visited%20%3D%20%5B%5D%5Cn%20%20%20%20const%20%7B%20length%20%7D%20%3D%20graph%5Cn%20%20%20%20for%20(let%20i%20%3D%200%3B%20i%20%3C%20length%3B%20i%2B%2B)%20%7B%5Cn%20%20%20%20%20%20%20%20key%5Bi%5D%20%3D%20INF%5Cn%20%20%20%20%20%20%20%20visited%5Bi%5D%20%3D%20false%5Cn%20%20%20%20%7D%5Cn%20%20%20%20key%5B0%5D%20%3D%200%5Cn%20%20%20%20parent%5B0%5D%20%3D%20-1%5Cn%20%20%20%20for%20(let%20i%20%3D%200%3B%20i%20%3C%20length%20-%201%3B%20i%2B%2B)%20%7B%5Cn%20%20%20%20%20%20%20%20const%20u%20%3D%20minKey(graph%2C%20key%2C%20visited)%5Cn%20%20%20%20%20%20%20%20visited%5Bu%5D%20%3D%20true%5Cn%20%20%20%20%20%20%20%20for%20(let%20v%20%3D%200%3B%20v%20%3C%20length%3B%20v%2B%2B)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20if%20(graph%5Bu%5D%5Bv%5D%20%26%26%20!visited%5Bv%5D%20%26%26%20graph%5Bu%5D%5Bv%5D%20%3C%20key%5Bv%5D)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20parent%5Bv%5D%20%3D%20u%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20key%5Bv%5D%20%3D%20graph%5Bu%5D%5Bv%5D%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%7D%5Cn%20%20%20%20return%20parent%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22id%22%3A%2220d8debb%22%7D\"></card><p data-lake-id=\"u8c1d4abe\" id=\"u8c1d4abe\"><br></p><h3 data-lake-id=\"dbeedf11\" id=\"dbeedf11\"><span data-lake-id=\"u70ebd2cf\" id=\"u70ebd2cf\">深度优先</span></h3><p data-lake-id=\"ucfc94cc6\" id=\"ucfc94cc6\"><br></p><p data-lake-id=\"u7303ec8e\" id=\"u7303ec8e\"><span data-lake-id=\"ucdff77fe\" id=\"ucdff77fe\">深度优先算法从图的第一个顶点开始，沿着这个顶点的一条路径递归查找到最后一个顶点，然后返回并探查路径上的其它路径，直到所有路径都被访问到。最终，深度优先算法会先深后广地访问图中的所有顶点。下面是深度优先遍历的示意图：<br /></span><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2022%2Fpng%2F732231%2F1646359650620-e05fd2c0-2641-4ae5-83fd-2e75494ac5ee.png%23clientId%3Du798dd5a7-9dbb-4%26from%3Dpaste%26id%3Duae415c13%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D291%26originWidth%3D427%26originalType%3Durl%26ratio%3D1%26size%3D22514%26status%3Ddone%26style%3Dnone%26taskId%3Duc30c9e03-bf0a-4bd1-bd91-a6f1224342d%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A427%2C%22originHeight%22%3A291%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22id%22%3A%22sgbgB%22%7D\"></card><span data-lake-id=\"u1501efe6\" id=\"u1501efe6\"><br /></span><span data-lake-id=\"ue8b8deef\" id=\"ue8b8deef\">我们仍然采用和广度优先算法一样的思路，一开始将所有的顶点初始化为白色，然后沿着路径递归探查其余顶点，当顶点被访问过，将颜色改为灰色，如果顶点被探索过（处理过），则将颜色改为黑色。下面是深度优先算法的具体实现：</span></p><p data-lake-id=\"u053c6c55\" id=\"u053c6c55\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22javascript%22%2C%22code%22%3A%22let%20depthFirstSearchVisit%20%3D%20(u%2C%20color%2C%20adjList%2C%20callback)%20%3D%3E%20%7B%5Cn%20%20%20%20color%5Bu%5D%20%3D%20Colors.GREY%5Cn%20%20%20%20if%20(callback)%20callback(u)%5Cn%5Cn%20%20%20%20adjList.get(u).forEach(n%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20%20%20if%20(color%5Bn%5D%20%3D%3D%3D%20Colors.WHITE)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20depthFirstSearchVisit(n%2C%20color%2C%20adjList%2C%20callback)%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%7D)%5Cn%5Cn%20%20%20%20color%5Bu%5D%20%3D%20Colors.BLACK%5Cn%7D%5Cn%5Cnlet%20depthFirstSearch%20%3D%20(graph%2C%20callback)%20%3D%3E%20%7B%5Cn%20%20%20%20let%20vertices%20%3D%20graph.getVertices()%5Cn%20%20%20%20let%20adjList%20%3D%20graph.getAdjList()%5Cn%20%20%20%20let%20color%20%3D%20initializeColor(vertices)%5Cn%5Cn%20%20%20%20vertices.forEach(v%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20%20%20if%20(color%5Bv%5D%20%3D%3D%3D%20Colors.WHITE)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20depthFirstSearchVisit(v%2C%20color%2C%20adjList%2C%20callback)%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%7D)%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22id%22%3A%2284455d8c%22%7D\"></card><p data-lake-id=\"u782bc005\" id=\"u782bc005\"><br></p><p data-lake-id=\"u72e4a09c\" id=\"u72e4a09c\"><span data-lake-id=\"u5c7c72c0\" id=\"u5c7c72c0\">具体执行步骤为：</span></p><p data-lake-id=\"u1a7a92dc\" id=\"u1a7a92dc\"><br></p><ol list=\"uc2541f9c\"><li fid=\"u863d1883\" data-lake-id=\"ufe780589\" id=\"ufe780589\"><span data-lake-id=\"u3cbe2920\" id=\"u3cbe2920\">将图中所有顶点的颜色初始化为白色。</span></li><li fid=\"u863d1883\" data-lake-id=\"u32f6ec10\" id=\"u32f6ec10\"><span data-lake-id=\"u0f768c9f\" id=\"u0f768c9f\">遍历顶点，此时 A 作为第一个顶点，它的颜色为白色，于是调用函数 depthFirstSearchVisit()，并将顶点 A、color、graph.adjList 作为参数传入。</span></li><li fid=\"u863d1883\" data-lake-id=\"ub8854b17\" id=\"ub8854b17\"><span data-lake-id=\"u4e82751c\" id=\"u4e82751c\">在 depthFirstSearchVisit()函数内部，由于顶点 A 被访问过了，所以将颜色设置为灰色，并执行 callback 回调函数（如果存在），然后遍历 A 的邻接顶点 B、C、D。</span></li><li fid=\"u863d1883\" data-lake-id=\"uac3e26c2\" id=\"uac3e26c2\"><span data-lake-id=\"u5fc0738d\" id=\"u5fc0738d\">B 未被访问过，颜色为白色，所以将 B 作为参数递归调用 depthFirstSearchVisit()函数。B 设置为灰色，callback('B')。遍历 B 的邻接节点 E 和 F。</span></li><li fid=\"u863d1883\" data-lake-id=\"u0f15885f\" id=\"u0f15885f\"><span data-lake-id=\"uec9dded7\" id=\"uec9dded7\">E 未被访问过，颜色为白色，所以将 E 作为参数递归调用 depthFirstSearchVisit()函数。E 设置为灰色，callback('E')。遍历 E 的邻接节点 I。</span></li><li fid=\"u863d1883\" data-lake-id=\"u54694e0c\" id=\"u54694e0c\"><span data-lake-id=\"u3d6aea6c\" id=\"u3d6aea6c\">I 未被访问过，颜色为白色，所以将 I 作为参数递归调用 depthFirstSearchVisit()函数。I 设置为灰色，callback('I')。I 没有邻接节点，然后将 I 设置为黑色。递归返回到 5。</span></li><li fid=\"u863d1883\" data-lake-id=\"u5a7634b1\" id=\"u5a7634b1\"><span data-lake-id=\"u24071306\" id=\"u24071306\">E 没有其它邻接节点，将 E 设置为黑色。递归返回到 4。</span></li><li fid=\"u863d1883\" data-lake-id=\"uec224401\" id=\"uec224401\"><span data-lake-id=\"u7351f040\" id=\"u7351f040\">遍历 B 的另一个邻接节点 F，F 未被访问过，颜色为白色，所以将 F 作为参数递归调用 depthFirstSearchVisit()函数。F 设置为灰色，callback('F')。F 没有邻接节点，然后将 F 设置为黑色。递归返回到 4。</span></li><li fid=\"u863d1883\" data-lake-id=\"u7c87b4ee\" id=\"u7c87b4ee\"><span data-lake-id=\"u534d278f\" id=\"u534d278f\">B 的所有邻接节点都被访问过了，将 B 设置为黑色。递归返回到 3。</span></li><li fid=\"u863d1883\" data-lake-id=\"u13d182bc\" id=\"u13d182bc\"><span data-lake-id=\"ude3af690\" id=\"ude3af690\">访问 A 的第二个邻接节点 C，C 未被访问过，颜色为白色，所以将 C 作为参数递归调用 depthFirstSearchVisit()函数。C 设置为灰色，callback('C')。遍历 C 的邻接节点 D、G。</span></li><li fid=\"u863d1883\" data-lake-id=\"ud2534a9b\" id=\"ud2534a9b\"><span data-lake-id=\"u496e702e\" id=\"u496e702e\">D 未被访问过，颜色为白色，所以将 D 作为参数递归调用 depthFirstSearchVisit()函数。D 设置为灰色，callback('D')。遍历 D 的邻接节点 G 和 H。</span></li><li fid=\"u863d1883\" data-lake-id=\"ud49b4f03\" id=\"ud49b4f03\"><span data-lake-id=\"u76352fb5\" id=\"u76352fb5\">G 未被访问过，颜色为白色，所以将 G 作为参数递归调用 depthFirstSearchVisit()函数。G 设置为灰色，callback('G')。G 没有邻接节点，然后将 G 设置为黑色。递归返回到 11。</span></li><li fid=\"u863d1883\" data-lake-id=\"u39cabbfa\" id=\"u39cabbfa\"><span data-lake-id=\"u8dd809f9\" id=\"u8dd809f9\">遍历 D 的另一个邻接节点 H，H 未被访问过，颜色为白色，所以将 H 作为参数递归调用 depthFirstSearchVisit()函数。H 设置为灰色，callback('H')。H 没有邻接节点，然后将 H 设置为黑色。递归返回到 11。</span></li><li fid=\"u863d1883\" data-lake-id=\"ua629df56\" id=\"ua629df56\"><span data-lake-id=\"u5f1fef7b\" id=\"u5f1fef7b\">D 的所有邻接节点都被访问过了，将 D 设置为黑色。递归返回到 10。</span></li><li fid=\"u863d1883\" data-lake-id=\"ufa0dea1d\" id=\"ufa0dea1d\"><span data-lake-id=\"udf7745d9\" id=\"udf7745d9\">遍历 C 的另一个邻接节点 G，由于 G 已经被访问过，对 C 的邻接节点的遍历结束。将 C 设置为黑色。递归返回到 3。</span></li><li fid=\"u863d1883\" data-lake-id=\"u5173edc9\" id=\"u5173edc9\"><span data-lake-id=\"u40cff73a\" id=\"u40cff73a\">访问 A 的最后一个邻接节点 D，由于 D 已经被访问过，对 A 的邻接节点的遍历结束。将 A 设置为黑色。</span></li><li fid=\"u863d1883\" data-lake-id=\"u8bba97a9\" id=\"u8bba97a9\"><span data-lake-id=\"u1172675d\" id=\"u1172675d\">然后对剩余的节点进行遍历。由于剩余的节点都被设置为黑色了，所以程序结束。</span></li></ol><p data-lake-id=\"uc768ec94\" id=\"uc768ec94\"><br></p><p data-lake-id=\"u301c4f8b\" id=\"u301c4f8b\"><span data-lake-id=\"uba43b25e\" id=\"uba43b25e\">对应的测试用例及执行结果如下：</span></p><p data-lake-id=\"uf5d8cb0d\" id=\"uf5d8cb0d\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22javascript%22%2C%22code%22%3A%22depthFirstSearch(graph%2C%20value%20%3D%3E%20console.log(%60visited%20vertex%3A%20%24%7Bvalue%7D%60))%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22id%22%3A%2282b39cde%22%7D\"></card><p data-lake-id=\"udf6e1541\" id=\"udf6e1541\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22plain%22%2C%22code%22%3A%22visited%20vertex%3A%20A%5Cnvisited%20vertex%3A%20B%5Cnvisited%20vertex%3A%20E%5Cnvisited%20vertex%3A%20I%5Cnvisited%20vertex%3A%20F%5Cnvisited%20vertex%3A%20C%5Cnvisited%20vertex%3A%20D%5Cnvisited%20vertex%3A%20G%5Cnvisited%20vertex%3A%20H%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22id%22%3A%22a67a6dfc%22%7D\"></card><p data-lake-id=\"u3c92837a\" id=\"u3c92837a\"><br></p><p data-lake-id=\"udfd271f0\" id=\"udfd271f0\"><span data-lake-id=\"u7d6bd364\" id=\"u7d6bd364\">为了便于理解，我们将整个遍历过程用下面的示意图来展示：<br /></span><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2022%2Fpng%2F732231%2F1646359703841-9e34b06c-7934-4672-bdf1-ad331b0de3ab.png%23clientId%3Du798dd5a7-9dbb-4%26from%3Dpaste%26id%3Du38ad8f9e%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D1110%26originWidth%3D1221%26originalType%3Durl%26ratio%3D1%26size%3D153210%26status%3Ddone%26style%3Dnone%26taskId%3Dua0fecf59-e663-456b-ba03-3393d181ba6%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A1221%2C%22originHeight%22%3A1110%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22id%22%3A%22ghlzZ%22%7D\"></card><span data-lake-id=\"u9dce18d8\" id=\"u9dce18d8\"><br /></span><span data-lake-id=\"ub0992555\" id=\"ub0992555\">前面说过，深度优先算法的数据结构是栈，然而这里我们并没有使用栈来存储任何数据，而是使用了函数的递归调用，其实递归也是栈的一种表现形式。另外一点，如果图是连通的（即图中任何两个顶点之间都存在路径），我们可以对上述代码中的 depthFirstSearch()方法进行改进，只需要对图的起始顶点开始遍历一次就可以了，而不需要遍历图的所有顶点，因为从起始顶点开始的递归就可以覆盖图的所有顶点。</span></p><p data-lake-id=\"u433c4e15\" id=\"u433c4e15\"><br></p><h4 data-lake-id=\"65cd2e8d\" id=\"65cd2e8d\"><span data-lake-id=\"u9cc52371\" id=\"u9cc52371\">拓扑排序</span></h4><p data-lake-id=\"u36e420cf\" id=\"u36e420cf\"><br></p><p data-lake-id=\"u197d2be9\" id=\"u197d2be9\"><span data-lake-id=\"u2580c6cb\" id=\"u2580c6cb\">前面展示了深度优先算法的工作原理，我们可以使用它做更多的事情，例如拓扑排序（toplogical sorting，也叫做 topsort 或者 toposort）。与广度优先算法类似，我们也对上面的 depthFirstSeach()方法进行改进，以说明如何使用深度优先算法来实现拓扑排序：</span></p><p data-lake-id=\"u4bad9229\" id=\"u4bad9229\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22javascript%22%2C%22code%22%3A%22let%20DFSVisit%20%3D%20(u%2C%20color%2C%20discovery%2C%20finished%2C%20predecessors%2C%20time%2C%20adjList)%20%3D%3E%20%7B%5Cn%20%20%20%20color%5Bu%5D%20%3D%20Colors.GREY%5Cn%20%20%20%20discovery%5Bu%5D%20%3D%20%2B%2Btime.count%5Cn%5Cn%20%20%20%20adjList.get(u).forEach(n%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20%20%20if%20(color%5Bn%5D%20%3D%3D%3D%20Colors.WHITE)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20predecessors%5Bn%5D%20%3D%20u%5Cn%20%20%20%20%20%20%20%20%20%20%20%20DFSVisit(n%2C%20color%2C%20discovery%2C%20finished%2C%20predecessors%2C%20time%2C%20adjList)%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%7D)%5Cn%5Cn%20%20%20%20color%5Bu%5D%20%3D%20Colors.BLACK%5Cn%20%20%20%20finished%5Bu%5D%20%3D%20%2B%2Btime.count%5Cn%7D%5Cn%5Cnlet%20DFS%20%3D%20graph%20%3D%3E%20%7B%5Cn%20%20%20%20let%20vertices%20%3D%20graph.getVertices()%5Cn%20%20%20%20let%20adjList%20%3D%20graph.getAdjList()%5Cn%20%20%20%20let%20color%20%3D%20initializeColor(vertices)%5Cn%20%20%20%20let%20discovery%20%3D%20%7B%7D%5Cn%20%20%20%20let%20finished%20%3D%20%7B%7D%5Cn%20%20%20%20let%20predecessors%20%3D%20%7B%7D%5Cn%20%20%20%20let%20time%20%3D%20%7B%20count%3A%200%20%7D%5Cn%5Cn%20%20%20%20vertices.forEach(v%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20%20%20finished%5Bv%5D%20%3D%200%5Cn%20%20%20%20%20%20%20%20discovery%5Bv%5D%20%3D%200%5Cn%20%20%20%20%20%20%20%20predecessors%5Bv%5D%20%3D%20null%5Cn%20%20%20%20%7D)%5Cn%5Cn%20%20%20%20vertices.forEach(v%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20%20%20if%20(color%5Bv%5D%20%3D%3D%3D%20Colors.WHITE)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20DFSVisit(v%2C%20color%2C%20discovery%2C%20finished%2C%20predecessors%2C%20time%2C%20adjList)%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%7D)%5Cn%5Cn%20%20%20%20return%20%7B%20discovery%2C%20finished%2C%20predecessors%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22id%22%3A%227c7534d9%22%7D\"></card><p data-lake-id=\"u536adffc\" id=\"u536adffc\"><br></p><p data-lake-id=\"uaf6a91be\" id=\"uaf6a91be\"><span data-lake-id=\"u65cffc30\" id=\"u65cffc30\">DFS()方法会输出图中每个顶点的发现时间和探索时间，我们假定时间从 0 开始，每经过一步时间值加 1。在 DFS()方法中，我们用变量 discovery，finished，predecessors 来保存每个顶点的发现时间、探索时间和前置顶点（这个和广度优先算法中寻找最短路径中的一致，但最终执行结果会有区别），最终的输出结果中也会反映这三个值。这里需要注意的是，变量 time 之所以被定义为对象而不是一个普通的数字，是因为我们需要在函数间传递这个变量，如果只是作为值传递，函数内部对变量的修改不会影响到它的原始值，但是我们就是需要在函数递归调用的过程中不断记录 time 的变化过程，所以采用值传递的方式显然不行。因此我们将 time 定义为一个对象，对象被作为引用传递给函数，这样在函数内部对它的修改就会反映到原始值上。<br /></span><span data-lake-id=\"u553efc34\" id=\"u553efc34\">​</span></p><p data-lake-id=\"ucae04f88\" id=\"ucae04f88\"><br></p><p data-lake-id=\"uc7316cf3\" id=\"uc7316cf3\"><span data-lake-id=\"u8ed1dfc5\" id=\"u8ed1dfc5\">来看看对 DFS()方法的测试结果：<br /></span><span data-lake-id=\"u3acc6bf0\" id=\"u3acc6bf0\">​</span></p><p data-lake-id=\"ucff77ff3\" id=\"ucff77ff3\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22javascript%22%2C%22code%22%3A%22console.log(DFS(graph))%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22id%22%3A%22d8ed72d4%22%7D\"></card><p data-lake-id=\"u0ddb0f54\" id=\"u0ddb0f54\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%7B%5Cn%20%20discovery%3A%20%7B%20A%3A%201%2C%20B%3A%202%2C%20C%3A%2010%2C%20D%3A%2011%2C%20E%3A%203%2C%20F%3A%207%2C%20G%3A%2012%2C%20H%3A%2014%2C%20I%3A%204%20%7D%2C%5Cn%20%20finished%3A%20%7B%20A%3A%2018%2C%20B%3A%209%2C%20C%3A%2017%2C%20D%3A%2016%2C%20E%3A%206%2C%20F%3A%208%2C%20G%3A%2013%2C%20H%3A%2015%2C%20I%3A%205%20%7D%2C%5Cn%20%20predecessors%3A%20%7B%5Cn%20%20%20%20A%3A%20null%2C%5Cn%20%20%20%20B%3A%20'A'%2C%5Cn%20%20%20%20C%3A%20'A'%2C%5Cn%20%20%20%20D%3A%20'C'%2C%5Cn%20%20%20%20E%3A%20'B'%2C%5Cn%20%20%20%20F%3A%20'B'%2C%5Cn%20%20%20%20G%3A%20'D'%2C%5Cn%20%20%20%20H%3A%20'D'%2C%5Cn%20%20%20%20I%3A%20'E'%5Cn%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22id%22%3A%22be621a5c%22%7D\"></card><p data-lake-id=\"u3004b7c8\" id=\"u3004b7c8\"><br></p><p data-lake-id=\"ue483cd84\" id=\"ue483cd84\"><span data-lake-id=\"u2ef52b73\" id=\"u2ef52b73\">我们将结果反映到示意图上，这样更加直观：<br /></span><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2022%2Fpng%2F732231%2F1646359760721-1f89ad9d-2ae4-4814-8f88-22b56fc6ffd6.png%23clientId%3Du798dd5a7-9dbb-4%26from%3Dpaste%26id%3Duf0b1ade3%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D308%26originWidth%3D448%26originalType%3Durl%26ratio%3D1%26size%3D21795%26status%3Ddone%26style%3Dnone%26taskId%3Du9ecc304f-0cfb-41b3-8d7e-61fa9672b13%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A448%2C%22originHeight%22%3A308%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22id%22%3A%22uHvL2%22%7D\"></card><span data-lake-id=\"u0740c954\" id=\"u0740c954\"><br /></span><span data-lake-id=\"uf94a572f\" id=\"uf94a572f\">示意图上每一个顶点左边的数字是顶点的发现时间，右边的数字是顶点的探索时间，全部完成时间是 18，可以结合前面的深度优先算法遍历过程示意图来看，它们是对应的。同时我们也看到，深度优先算法的 predecessors 和广度优先算法的 predecessors 会有所不同。<br /></span><span data-lake-id=\"u802442e2\" id=\"u802442e2\">拓扑排序只能应用于</span><strong><span data-lake-id=\"u28b9e776\" id=\"u28b9e776\">有向无环图</span></strong><span data-lake-id=\"ue1212a02\" id=\"ue1212a02\">（DAG）。基于上面 DFS()方法的返回结果，我们可以对顶点的完成时间（探索时间 finished）进行排序，以得到我们需要的拓扑排序结果。<br /></span><span data-lake-id=\"u8d36df17\" id=\"u8d36df17\">如果要实现有向图，只需要对前面我们实现的 Graph 类的 addEdge()方法略加修改，将最后一行删掉。当然，我们也可以在 Graph 类的构造函数中指明是有向图还是无向图，下面是改进后的 Graph 类：</span></p><p data-lake-id=\"uc4e149f8\" id=\"uc4e149f8\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22javascript%22%2C%22code%22%3A%22class%20Graph%20%7B%5Cn%20%20%20%20constructor(isDirected%20%3D%20false)%20%7B%5Cn%20%20%20%20%20%20%20%20this.isDirected%20%3D%20isDirected%5Cn%20%20%20%20%20%20%20%20this.vertices%20%3D%20%5B%5D%20%2F%2F%20%E7%94%A8%E6%9D%A5%E5%AD%98%E6%94%BE%E5%9B%BE%E4%B8%AD%E7%9A%84%E9%A1%B6%E7%82%B9%5Cn%20%20%20%20%20%20%20%20this.adjList%20%3D%20new%20Dictionary()%20%2F%2F%20%E7%94%A8%E6%9D%A5%E5%AD%98%E6%94%BE%E5%9B%BE%E4%B8%AD%E7%9A%84%E8%BE%B9%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%2F%2F%20%E5%90%91%E5%9B%BE%E4%B8%AD%E6%B7%BB%E5%8A%A0%E4%B8%80%E4%B8%AA%E6%96%B0%E9%A1%B6%E7%82%B9%5Cn%20%20%20%20addVertex(v)%20%7B%5Cn%20%20%20%20%20%20%20%20if%20(!this.vertices.includes(v))%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20this.vertices.push(v)%5Cn%20%20%20%20%20%20%20%20%20%20%20%20this.adjList.set(v%2C%20%5B%5D)%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%2F%2F%20%E5%90%91%E5%9B%BE%E4%B8%AD%E6%B7%BB%E5%8A%A0a%E5%92%8Cb%E4%B8%A4%E4%B8%AA%E9%A1%B6%E7%82%B9%E4%B9%8B%E9%97%B4%E7%9A%84%E8%BE%B9%5Cn%20%20%20%20addEdge(a%2C%20b)%20%7B%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E5%A6%82%E6%9E%9C%E5%9B%BE%E4%B8%AD%E6%B2%A1%E6%9C%89%E9%A1%B6%E7%82%B9a%EF%BC%8C%E5%85%88%E6%B7%BB%E5%8A%A0%E9%A1%B6%E7%82%B9a%5Cn%20%20%20%20%20%20%20%20if%20(!this.adjList.has(a))%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20this.addVertex(a)%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E5%A6%82%E6%9E%9C%E5%9B%BE%E4%B8%AD%E6%B2%A1%E6%9C%89%E9%A1%B6%E7%82%B9b%EF%BC%8C%E5%85%88%E6%B7%BB%E5%8A%A0%E9%A1%B6%E7%82%B9b%5Cn%20%20%20%20%20%20%20%20if%20(!this.adjList.has(b))%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20this.addVertex(b)%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%20%20%20%20this.adjList.get(a).push(b)%20%2F%2F%20%E5%9C%A8%E9%A1%B6%E7%82%B9a%E4%B8%AD%E6%B7%BB%E5%8A%A0%E6%8C%87%E5%90%91%E9%A1%B6%E7%82%B9b%E7%9A%84%E8%BE%B9%5Cn%20%20%20%20%20%20%20%20if%20(this.isDirected%20!%3D%3D%20true)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20this.adjList.get(b).push(a)%20%2F%2F%20%E5%A6%82%E6%9E%9C%E4%B8%BA%E6%97%A0%E5%90%91%E5%9B%BE%EF%BC%8C%E5%88%99%E5%9C%A8%E9%A1%B6%E7%82%B9b%E4%B8%AD%E6%B7%BB%E5%8A%A0%E6%8C%87%E5%90%91%E9%A1%B6%E7%82%B9a%E7%9A%84%E8%BE%B9%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%2F%2F%20%E8%8E%B7%E5%8F%96%E5%9B%BE%E7%9A%84vertices%5Cn%20%20%20%20getVertices()%20%7B%5Cn%20%20%20%20%20%20%20%20return%20this.vertices%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%2F%2F%20%E8%8E%B7%E5%8F%96%E5%9B%BE%E4%B8%AD%E7%9A%84adjList%5Cn%20%20%20%20getAdjList()%20%7B%5Cn%20%20%20%20%20%20%20%20return%20this.adjList%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20toString()%20%7B%5Cn%20%20%20%20%20%20%20%20let%20s%20%3D%20%5C%22%5C%22%5Cn%20%20%20%20%20%20%20%20this.vertices.forEach(v%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20s%20%2B%3D%20%60%24%7Bv%7D%20-%3E%20%60%5Cn%20%20%20%20%20%20%20%20%20%20%20%20this.adjList.get(v).forEach(n%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20s%20%2B%3D%20%60%24%7Bn%7D%20%60%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D)%5Cn%20%20%20%20%20%20%20%20%20%20%20%20s%20%2B%3D%20%5C%22%5C%5Cn%5C%22%5Cn%20%20%20%20%20%20%20%20%7D)%5Cn%20%20%20%20%20%20%20%20return%20s%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22id%22%3A%22554c367e%22%7D\"></card><p data-lake-id=\"ub9257ab0\" id=\"ub9257ab0\"><br></p><p data-lake-id=\"u867846fd\" id=\"u867846fd\"><span data-lake-id=\"uba6ccf17\" id=\"uba6ccf17\">然后我们对有向图应用 DFS 算法：</span></p><p data-lake-id=\"u8aaea2e5\" id=\"u8aaea2e5\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22javascript%22%2C%22code%22%3A%22let%20graph%20%3D%20new%20Graph()%5Cnlet%20myVertices%20%3D%20%5B%5C%22A%5C%22%2C%20%5C%22B%5C%22%2C%20%5C%22C%5C%22%2C%20%5C%22D%5C%22%2C%20%5C%22E%5C%22%2C%20%5C%22F%5C%22%5D%5CnmyVertices.forEach(v%20%3D%3E%20%7B%5Cn%20%20%20%20graph.addVertex(v)%5Cn%7D)%5Cngraph.addEdge(%5C%22A%5C%22%2C%20%5C%22C%5C%22)%5Cngraph.addEdge(%5C%22A%5C%22%2C%20%5C%22D%5C%22)%5Cngraph.addEdge(%5C%22B%5C%22%2C%20%5C%22D%5C%22)%5Cngraph.addEdge(%5C%22B%5C%22%2C%20%5C%22E%5C%22)%5Cngraph.addEdge(%5C%22C%5C%22%2C%20%5C%22F%5C%22)%5Cngraph.addEdge(%5C%22F%5C%22%2C%20%5C%22E%5C%22)%5Cnconsole.log(DFS(graph))%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22id%22%3A%22f3c54733%22%7D\"></card><p data-lake-id=\"u27cdbf88\" id=\"u27cdbf88\"><br></p><p data-lake-id=\"u2d1dd4fc\" id=\"u2d1dd4fc\"><span data-lake-id=\"ue199d1a6\" id=\"ue199d1a6\">下面是返回结果：</span></p><p data-lake-id=\"ucf4746c1\" id=\"ucf4746c1\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%7B%5Cn%20%20discovery%3A%20%7B%20A%3A%201%2C%20B%3A%2011%2C%20C%3A%202%2C%20D%3A%208%2C%20E%3A%204%2C%20F%3A%203%20%7D%2C%5Cn%20%20finished%3A%20%7B%20A%3A%2010%2C%20B%3A%2012%2C%20C%3A%207%2C%20D%3A%209%2C%20E%3A%205%2C%20F%3A%206%20%7D%2C%5Cn%20%20predecessors%3A%20%7B%20A%3A%20null%2C%20B%3A%20null%2C%20C%3A%20'A'%2C%20D%3A%20'A'%2C%20E%3A%20'F'%2C%20F%3A%20'C'%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22id%22%3A%22ac9eb6b3%22%7D\"></card><p data-lake-id=\"u669ccc16\" id=\"u669ccc16\"><br></p><p data-lake-id=\"ud0141b0e\" id=\"ud0141b0e\"><span data-lake-id=\"u440d6dbf\" id=\"u440d6dbf\">示意图如下：<br /></span><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2022%2Fpng%2F732231%2F1646359804089-a9661d27-f4b6-4237-aa72-305a8afe1a22.png%23clientId%3Du798dd5a7-9dbb-4%26from%3Dpaste%26id%3Dud2095508%26margin%3D%255Bobject%2520Object%255D%26name%3Dimage.png%26originHeight%3D289%26originWidth%3D280%26originalType%3Durl%26ratio%3D1%26size%3D14552%26status%3Ddone%26style%3Dnone%26taskId%3Dud81ccd28-3fab-4de0-9e47-c9729fcecbd%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22%22%2C%22originWidth%22%3A280%2C%22originHeight%22%3A289%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22id%22%3A%22sDURb%22%7D\"></card><span data-lake-id=\"u2954735a\" id=\"u2954735a\"><br /></span><span data-lake-id=\"uac6a236e\" id=\"uac6a236e\">对顶点的完成时间进行倒序排序，得到的拓扑排序结果为：B - A - D - C - F - E。</span></p>",
  "body_draft_lake": "",
  "public": 0,
  "status": 1,
  "view_status": 0,
  "read_status": 1,
  "likes_count": 0,
  "comments_count": 0,
  "content_updated_at": "2023-11-11T18:08:43.000Z",
  "deleted_at": null,
  "created_at": "2020-08-09T08:03:47.000Z",
  "updated_at": "2023-11-11T18:08:44.000Z",
  "published_at": "2023-11-11T18:08:43.000Z",
  "first_published_at": "2020-08-09T08:03:47.000Z",
  "word_count": 7415,
  "cover": null,
  "description": "链接在计算机科学中，图是一种网络结构的抽象模型，它是一组由边连接的顶点组成。一个图 G = (V, E)由以下元素组成：V：一组顶点E：一组边，连接 V 中的顶点下图表示了一个图的结构：在介绍如何用 JavaScript 实现图之前，我们先介绍一些和图相关的术语。如上图所示，由一条边连接在一起...",
  "custom_description": null,
  "hits": 0,
  "_serializer": "v2.doc_detail"
}