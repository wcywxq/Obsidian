{
  "id": 72212393,
  "slug": "yo9cx5",
  "title": "函数柯理化",
  "book_id": 26225252,
  "book": {
    "id": 26225252,
    "type": "Book",
    "slug": "sd8kbc",
    "name": "笔试 written test",
    "user_id": 732231,
    "description": "笔试相关题目\n1. 原生 API 实现\n2. 业务场景相关问题\n3. LeetCode 算法相关问题",
    "creator_id": 732231,
    "public": 0,
    "items_count": 74,
    "likes_count": 0,
    "watches_count": 1,
    "content_updated_at": "2023-11-11T18:15:38.713Z",
    "updated_at": "2023-11-11T18:15:39.000Z",
    "created_at": "2022-04-04T11:34:53.000Z",
    "namespace": "wcywxq/sd8kbc",
    "user": {
      "id": 732231,
      "type": "User",
      "login": "wcywxq",
      "name": "magic",
      "description": null,
      "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/732231/1606968271774-avatar/886ad88b-d2cc-4c9e-a674-f70eb51a679c.png",
      "books_count": 18,
      "public_books_count": 0,
      "followers_count": 0,
      "following_count": 0,
      "created_at": "2020-01-08T14:21:31.000Z",
      "updated_at": "2023-11-13T09:32:35.000Z",
      "_serializer": "v2.user"
    },
    "_serializer": "v2.book"
  },
  "user_id": 732231,
  "creator": {
    "id": 732231,
    "type": "User",
    "login": "wcywxq",
    "name": "magic",
    "description": null,
    "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/732231/1606968271774-avatar/886ad88b-d2cc-4c9e-a674-f70eb51a679c.png",
    "books_count": 18,
    "public_books_count": 0,
    "followers_count": 0,
    "following_count": 0,
    "created_at": "2020-01-08T14:21:31.000Z",
    "updated_at": "2023-11-13T09:32:35.000Z",
    "_serializer": "v2.user"
  },
  "format": "lake",
  "body": "<a name=\"AgY5j\"></a>\n## 什么是柯理化\n\n函数柯里化指的是一种将使用多个参数的一个函数转换成一系列使用一个参数的函数的技术。(函数柯理化的基础是**闭包**)\n<a name=\"RF79V\"></a>\n### 实现\n```javascript\n// es6 实现\nfunction curry(fn, ...args) {\n\treturn fn.length <= args.length ? fn(...args) : curry.bind(null, fn, ...args)\n}\n\nfunction curry(fn) {\n  return function curryInset(...args) {\n    if (fn.length <= args.length) {\n      return fn.apply(this, args)\n    } else {\n      return function(...subArgs) {\n        return curryInset.apply(this, args.concat(subArgs))\n      }\n    }\n  }\n}\n```\n<a name=\"VnmFo\"></a>\n## lodash 中的柯理化\n调用方法: `_.curry(fn)`\n\n- 功能: 创建一个函数, 该函数接收一个或多个 `fn` 的参数, 如果 `fn` 所需要的参数都被提供则执行 `fn` 并返回执行的结果。否则继续返回该函数并等待接收剩余的参数\n- 参数: 需要柯理化的函数\n- 返回值: 柯理化后的函数\n- 示例:\n```javascript\n// 参数是一个的为一元函数，两个的是二元函数\n// 柯里化可以把一个多元函数转化成一元函数\nfunction sum (a, b, c) {\n  return a + b + c\n}\n// 定义一个柯里化函数\nconst curried = _.curry(sum)\n\n// 如果输入了全部的参数，则立即返回结果\nconsole.log(curried(1, 2, 3)) // 6\n\n// 如果传入了部分的参数，此时它会返回当前函数，并且等待接收 sum 中的剩余参数\nconsole.log(curried(1)(2, 3)) // 6\nconsole.log(curried(1, 2)(3)) // 6\n```\n<a name=\"eyN1H\"></a>\n## 手写 lodash 中的柯理化函数\n\n- 接受一个纯函数入参, 返回柯里化后的函数\n- 如果传入 `包装后的柯理化函数` 参数个数与 `需要柯理化的函数` 参数相同, 即一次传入全部参数，`包装后的柯理化函数` 会立即执行\n- 如果传入 `包装后的柯理化函数` 参数个数小于 `包装后的柯理化函数` 参数，会返回一个新的函数，等待剩余需要的参数全部传入，才会执行。如果还是没有传递完所需参数，会继续上面过程，返回一个新的函数，直到全部参数接收完毕\n```javascript\nfunction curry(fn) {\n  // curryInset 为柯理化生产的新函数\n  // 因为要递归实现, 所以用具名函数\n\treturn function curryInset(...args) {\n  \tif (args.length < fn.length) {\n      return function() {\n      \t// 之前传入的参数都储存在 args 中\n        // 合并参数并递归执行\n      \treturn curryInset(...args.concat(Array.from(...arguments)))\n      }\n    }\n    return fn(...args)\n  }\n}\n```\n<a name=\"wUeP2\"></a>\n## 柯理化实战案例\n我们工作中经常遇到各种需要正则校验的需求，例如在提交用户信息的时候校验手机号、邮箱等。\n\n- 封装一个校验函数：\n```javascript\n// 非柯里化版本\nfunction checkByRegExp(regExp,string) {\n  return regExp.test(string);  \n}\n\ncheckByRegExp(/^1\\d{10}$/, '15010001000'); // 校验电话号码\ncheckByRegExp(/^(\\w)+(\\.\\w+)*@(\\w)+((\\.\\w+)+)$/, 'test@163.com'); // 校验邮箱\n```\n\n- 在实际使用中，其实我们不需要去关注正则是如何匹配的，只需要使用更具体函数去分别校验手机号或者邮箱，这里就需要我们使用柯里化函数处理一下：\n```javascript\n// 进行柯里化\nlet _check = curry(checkByRegExp);\n// 生成工具函数，验证电话号码\nlet checkCellPhone = _check(/^1\\d{10}$/);\n// 生成工具函数，验证邮箱\nlet checkEmail = _check(/^(\\w)+(\\.\\w+)*@(\\w)+((\\.\\w+)+)$/);\n\ncheckCellPhone('18642838455'); // 校验电话号码\ncheckCellPhone('13109840560'); // 校验电话号码\ncheckCellPhone('13204061212'); // 校验电话号码\n\ncheckEmail('test@163.com'); // 校验邮箱\ncheckEmail('test@qq.com'); // 校验邮箱\ncheckEmail('test@gmail.com'); // 校验邮箱\n```\n",
  "body_draft": "",
  "body_html": "<!doctype html><h2 id=\"AgY5j\"><span>什么是柯理化</span></h2><p data-lake-id=\"u9ef956eb\"><br /></p><p data-lake-id=\"ufd8ed539\"><span class=\"lake-fontsize-1515\" style=\"color: #383838;\">函数柯里化指的是一种将使用多个参数的一个函数转换成一系列使用一个参数的函数的技术。(函数柯理化的基础是</span><strong><span class=\"lake-fontsize-1515\" style=\"color: #383838;\">闭包</span></strong><span class=\"lake-fontsize-1515\" style=\"color: #383838;\">)</span></p><h3 id=\"RF79V\"><span>实现</span></h3><pre data-lang=\"javascript\"><code>// es6 实现\nfunction curry(fn, ...args) {\n\treturn fn.length &lt;= args.length ? fn(...args) : curry.bind(null, fn, ...args)\n}\n\nfunction curry(fn) {\n  return function curryInset(...args) {\n    if (fn.length &lt;= args.length) {\n      return fn.apply(this, args)\n    } else {\n      return function(...subArgs) {\n        return curryInset.apply(this, args.concat(subArgs))\n      }\n    }\n  }\n}</code></pre><h2 id=\"VnmFo\"><span>lodash 中的柯理化</span></h2><p data-lake-id=\"u65c3f95c\"><span>调用方法: </span><code><span>_.curry(fn)</span></code></p><ul><li><span>功能: 创建一个函数, 该函数接收一个或多个 </span><code><span>fn</span></code><span> 的参数, 如果 </span><code><span>fn</span></code><span> 所需要的参数都被提供则执行 </span><code><span>fn</span></code><span> 并返回执行的结果。否则继续返回该函数并等待接收剩余的参数</span></li><li><span>参数: 需要柯理化的函数</span></li><li><span>返回值: 柯理化后的函数</span></li><li><span>示例:</span></li></ul><pre data-lang=\"javascript\"><code>// 参数是一个的为一元函数，两个的是二元函数\n// 柯里化可以把一个多元函数转化成一元函数\nfunction sum (a, b, c) {\n  return a + b + c\n}\n// 定义一个柯里化函数\nconst curried = _.curry(sum)\n\n// 如果输入了全部的参数，则立即返回结果\nconsole.log(curried(1, 2, 3)) // 6\n\n// 如果传入了部分的参数，此时它会返回当前函数，并且等待接收 sum 中的剩余参数\nconsole.log(curried(1)(2, 3)) // 6\nconsole.log(curried(1, 2)(3)) // 6</code></pre><h2 id=\"eyN1H\"><span>手写 lodash 中的柯理化函数</span></h2><ul><li><span>接受一个纯函数入参, 返回柯里化后的函数</span></li><li><span>如果传入 </span><code><span>包装后的柯理化函数</span></code><span> 参数个数与 </span><code><span>需要柯理化的函数</span></code><span> 参数相同, 即一次传入全部参数，</span><code><span>包装后的柯理化函数</span></code><span> 会立即执行</span></li><li><span>如果传入 </span><code><span>包装后的柯理化函数</span></code><span> 参数个数小于 </span><code><span>包装后的柯理化函数</span></code><span> 参数，会返回一个新的函数，等待剩余需要的参数全部传入，才会执行。如果还是没有传递完所需参数，会继续上面过程，返回一个新的函数，直到全部参数接收完毕</span></li></ul><pre data-lang=\"javascript\"><code>function curry(fn) {\n  // curryInset 为柯理化生产的新函数\n  // 因为要递归实现, 所以用具名函数\n\treturn function curryInset(...args) {\n  \tif (args.length &lt; fn.length) {\n      return function() {\n      \t// 之前传入的参数都储存在 args 中\n        // 合并参数并递归执行\n      \treturn curryInset(...args.concat(Array.from(...arguments)))\n      }\n    }\n    return fn(...args)\n  }\n}</code></pre><h2 id=\"wUeP2\"><span>柯理化实战案例</span></h2><p data-lake-id=\"u641150fe\"><span style=\"color: #2B2B2B;\">我们工作中经常遇到各种需要正则校验的需求，例如在提交用户信息的时候校验手机号、邮箱等。</span></p><p data-lake-id=\"u1645fd1d\"><span style=\"color: #2B2B2B;\">​</span><br /></p><ul><li><span class=\"lake-fontsize-11\" style=\"color: #2B2B2B;\">封装一个校验函数：</span></li></ul><pre data-lang=\"javascript\"><code>// 非柯里化版本\nfunction checkByRegExp(regExp,string) {\n  return regExp.test(string);  \n}\n\ncheckByRegExp(/^1\\d{10}$/, '15010001000'); // 校验电话号码\ncheckByRegExp(/^(\\w)+(\\.\\w+)*@(\\w)+((\\.\\w+)+)$/, 'test@163.com'); // 校验邮箱</code></pre><ul><li><span class=\"lake-fontsize-11\" style=\"color: #2B2B2B;\">在实际使用中，其实我们不需要去关注正则是如何匹配的，只需要使用更具体函数去分别校验手机号或者邮箱，这里就需要我们使用柯里化函数处理一下：</span></li></ul><pre data-lang=\"javascript\"><code>// 进行柯里化\nlet _check = curry(checkByRegExp);\n// 生成工具函数，验证电话号码\nlet checkCellPhone = _check(/^1\\d{10}$/);\n// 生成工具函数，验证邮箱\nlet checkEmail = _check(/^(\\w)+(\\.\\w+)*@(\\w)+((\\.\\w+)+)$/);\n\ncheckCellPhone('18642838455'); // 校验电话号码\ncheckCellPhone('13109840560'); // 校验电话号码\ncheckCellPhone('13204061212'); // 校验电话号码\n\ncheckEmail('test@163.com'); // 校验邮箱\ncheckEmail('test@qq.com'); // 校验邮箱\ncheckEmail('test@gmail.com'); // 校验邮箱</code></pre>",
  "body_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"viewport\" content=\"adapt\" /><h2 data-lake-id=\"AgY5j\" id=\"AgY5j\"><span data-lake-id=\"u3d29fd23\" id=\"u3d29fd23\">什么是柯理化</span></h2><p data-lake-id=\"u9ef956eb\" id=\"u9ef956eb\"><br></p><p data-lake-id=\"ufd8ed539\" id=\"ufd8ed539\"><span data-lake-id=\"u6cbb5ea8\" id=\"u6cbb5ea8\" class=\"lake-fontsize-1515\" style=\"color: rgb(56, 56, 56)\">函数柯里化指的是一种将使用多个参数的一个函数转换成一系列使用一个参数的函数的技术。(函数柯理化的基础是</span><strong><span data-lake-id=\"u6e50aeab\" id=\"u6e50aeab\" class=\"lake-fontsize-1515\" style=\"color: rgb(56, 56, 56)\">闭包</span></strong><span data-lake-id=\"u42e1005d\" id=\"u42e1005d\" class=\"lake-fontsize-1515\" style=\"color: rgb(56, 56, 56)\">)</span></p><h3 data-lake-id=\"RF79V\" id=\"RF79V\"><span data-lake-id=\"u8dc5b935\" id=\"u8dc5b935\">实现</span></h3><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%20es6%20%E5%AE%9E%E7%8E%B0%5Cnfunction%20curry(fn%2C%20...args)%20%7B%5Cn%5Ctreturn%20fn.length%20%3C%3D%20args.length%20%3F%20fn(...args)%20%3A%20curry.bind(null%2C%20fn%2C%20...args)%5Cn%7D%5Cn%5Cnfunction%20curry(fn)%20%7B%5Cn%20%20return%20function%20curryInset(...args)%20%7B%5Cn%20%20%20%20if%20(fn.length%20%3C%3D%20args.length)%20%7B%5Cn%20%20%20%20%20%20return%20fn.apply(this%2C%20args)%5Cn%20%20%20%20%7D%20else%20%7B%5Cn%20%20%20%20%20%20return%20function(...subArgs)%20%7B%5Cn%20%20%20%20%20%20%20%20return%20curryInset.apply(this%2C%20args.concat(subArgs))%5Cn%20%20%20%20%20%20%7D%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22gdKZw%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h2 data-lake-id=\"VnmFo\" id=\"VnmFo\"><span data-lake-id=\"ue5f70834\" id=\"ue5f70834\">lodash 中的柯理化</span></h2><p data-lake-id=\"u65c3f95c\" id=\"u65c3f95c\"><span data-lake-id=\"u603ad2dc\" id=\"u603ad2dc\">调用方法: </span><code data-lake-id=\"u4f7102e4\" id=\"u4f7102e4\"><span data-lake-id=\"ud80e2b90\" id=\"ud80e2b90\">_.curry(fn)</span></code></p><ul list=\"ua7a9f61d\"><li fid=\"u13952d00\" data-lake-id=\"ue204887b\" id=\"ue204887b\"><span data-lake-id=\"u52a89553\" id=\"u52a89553\">功能: 创建一个函数, 该函数接收一个或多个 </span><code data-lake-id=\"u744a998b\" id=\"u744a998b\"><span data-lake-id=\"u1a2365b5\" id=\"u1a2365b5\">fn</span></code><span data-lake-id=\"u4338e531\" id=\"u4338e531\"> 的参数, 如果 </span><code data-lake-id=\"u2bf2f8b4\" id=\"u2bf2f8b4\"><span data-lake-id=\"ub120a2a0\" id=\"ub120a2a0\">fn</span></code><span data-lake-id=\"u00a97183\" id=\"u00a97183\"> 所需要的参数都被提供则执行 </span><code data-lake-id=\"u7ed2d5a0\" id=\"u7ed2d5a0\"><span data-lake-id=\"ud4efbd5e\" id=\"ud4efbd5e\">fn</span></code><span data-lake-id=\"u4fbbd1ba\" id=\"u4fbbd1ba\"> 并返回执行的结果。否则继续返回该函数并等待接收剩余的参数</span></li><li fid=\"u13952d00\" data-lake-id=\"u5bbd964c\" id=\"u5bbd964c\"><span data-lake-id=\"uc01243b1\" id=\"uc01243b1\">参数: 需要柯理化的函数</span></li><li fid=\"u13952d00\" data-lake-id=\"u68990b53\" id=\"u68990b53\"><span data-lake-id=\"u277f2f49\" id=\"u277f2f49\">返回值: 柯理化后的函数</span></li><li fid=\"u13952d00\" data-lake-id=\"u3e5a4288\" id=\"u3e5a4288\"><span data-lake-id=\"ud54bf383\" id=\"ud54bf383\">示例:</span></li></ul><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%20%E5%8F%82%E6%95%B0%E6%98%AF%E4%B8%80%E4%B8%AA%E7%9A%84%E4%B8%BA%E4%B8%80%E5%85%83%E5%87%BD%E6%95%B0%EF%BC%8C%E4%B8%A4%E4%B8%AA%E7%9A%84%E6%98%AF%E4%BA%8C%E5%85%83%E5%87%BD%E6%95%B0%5Cn%2F%2F%20%E6%9F%AF%E9%87%8C%E5%8C%96%E5%8F%AF%E4%BB%A5%E6%8A%8A%E4%B8%80%E4%B8%AA%E5%A4%9A%E5%85%83%E5%87%BD%E6%95%B0%E8%BD%AC%E5%8C%96%E6%88%90%E4%B8%80%E5%85%83%E5%87%BD%E6%95%B0%5Cnfunction%20sum%20(a%2C%20b%2C%20c)%20%7B%5Cn%20%20return%20a%20%2B%20b%20%2B%20c%5Cn%7D%5Cn%2F%2F%20%E5%AE%9A%E4%B9%89%E4%B8%80%E4%B8%AA%E6%9F%AF%E9%87%8C%E5%8C%96%E5%87%BD%E6%95%B0%5Cnconst%20curried%20%3D%20_.curry(sum)%5Cn%5Cn%2F%2F%20%E5%A6%82%E6%9E%9C%E8%BE%93%E5%85%A5%E4%BA%86%E5%85%A8%E9%83%A8%E7%9A%84%E5%8F%82%E6%95%B0%EF%BC%8C%E5%88%99%E7%AB%8B%E5%8D%B3%E8%BF%94%E5%9B%9E%E7%BB%93%E6%9E%9C%5Cnconsole.log(curried(1%2C%202%2C%203))%20%2F%2F%206%5Cn%5Cn%2F%2F%20%E5%A6%82%E6%9E%9C%E4%BC%A0%E5%85%A5%E4%BA%86%E9%83%A8%E5%88%86%E7%9A%84%E5%8F%82%E6%95%B0%EF%BC%8C%E6%AD%A4%E6%97%B6%E5%AE%83%E4%BC%9A%E8%BF%94%E5%9B%9E%E5%BD%93%E5%89%8D%E5%87%BD%E6%95%B0%EF%BC%8C%E5%B9%B6%E4%B8%94%E7%AD%89%E5%BE%85%E6%8E%A5%E6%94%B6%20sum%20%E4%B8%AD%E7%9A%84%E5%89%A9%E4%BD%99%E5%8F%82%E6%95%B0%5Cnconsole.log(curried(1)(2%2C%203))%20%2F%2F%206%5Cnconsole.log(curried(1%2C%202)(3))%20%2F%2F%206%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22AG406%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h2 data-lake-id=\"eyN1H\" id=\"eyN1H\"><span data-lake-id=\"u41cbb6b3\" id=\"u41cbb6b3\">手写 lodash 中的柯理化函数</span></h2><ul list=\"u25b7d88b\"><li fid=\"u7a94f776\" data-lake-id=\"u127f261e\" id=\"u127f261e\"><span data-lake-id=\"uda86ed6f\" id=\"uda86ed6f\">接受一个纯函数入参, 返回柯里化后的函数</span></li><li fid=\"u7a94f776\" data-lake-id=\"u7dd2f59d\" id=\"u7dd2f59d\"><span data-lake-id=\"u66225586\" id=\"u66225586\">如果传入 </span><code data-lake-id=\"u28c98303\" id=\"u28c98303\"><span data-lake-id=\"ud4ef265d\" id=\"ud4ef265d\">包装后的柯理化函数</span></code><span data-lake-id=\"u3ef3436b\" id=\"u3ef3436b\"> 参数个数与 </span><code data-lake-id=\"u05f5186c\" id=\"u05f5186c\"><span data-lake-id=\"u35b69f65\" id=\"u35b69f65\">需要柯理化的函数</span></code><span data-lake-id=\"u20938de0\" id=\"u20938de0\"> 参数相同, 即一次传入全部参数，</span><code data-lake-id=\"uc3d07484\" id=\"uc3d07484\"><span data-lake-id=\"u3cc2681b\" id=\"u3cc2681b\">包装后的柯理化函数</span></code><span data-lake-id=\"u0ec755ac\" id=\"u0ec755ac\"> 会立即执行</span></li><li fid=\"u7a94f776\" data-lake-id=\"u4bc565ce\" id=\"u4bc565ce\"><span data-lake-id=\"u0288bb96\" id=\"u0288bb96\">如果传入 </span><code data-lake-id=\"ufd6889ec\" id=\"ufd6889ec\"><span data-lake-id=\"u8f97fa6c\" id=\"u8f97fa6c\">包装后的柯理化函数</span></code><span data-lake-id=\"u7bfbd28d\" id=\"u7bfbd28d\"> 参数个数小于 </span><code data-lake-id=\"u1c585c75\" id=\"u1c585c75\"><span data-lake-id=\"u9a12b315\" id=\"u9a12b315\">包装后的柯理化函数</span></code><span data-lake-id=\"uf028f1eb\" id=\"uf028f1eb\"> 参数，会返回一个新的函数，等待剩余需要的参数全部传入，才会执行。如果还是没有传递完所需参数，会继续上面过程，返回一个新的函数，直到全部参数接收完毕</span></li></ul><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22function%20curry(fn)%20%7B%5Cn%20%20%2F%2F%20curryInset%20%E4%B8%BA%E6%9F%AF%E7%90%86%E5%8C%96%E7%94%9F%E4%BA%A7%E7%9A%84%E6%96%B0%E5%87%BD%E6%95%B0%5Cn%20%20%2F%2F%20%E5%9B%A0%E4%B8%BA%E8%A6%81%E9%80%92%E5%BD%92%E5%AE%9E%E7%8E%B0%2C%20%E6%89%80%E4%BB%A5%E7%94%A8%E5%85%B7%E5%90%8D%E5%87%BD%E6%95%B0%5Cn%5Ctreturn%20function%20curryInset(...args)%20%7B%5Cn%20%20%5Ctif%20(args.length%20%3C%20fn.length)%20%7B%5Cn%20%20%20%20%20%20return%20function()%20%7B%5Cn%20%20%20%20%20%20%5Ct%2F%2F%20%E4%B9%8B%E5%89%8D%E4%BC%A0%E5%85%A5%E7%9A%84%E5%8F%82%E6%95%B0%E9%83%BD%E5%82%A8%E5%AD%98%E5%9C%A8%20args%20%E4%B8%AD%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E5%90%88%E5%B9%B6%E5%8F%82%E6%95%B0%E5%B9%B6%E9%80%92%E5%BD%92%E6%89%A7%E8%A1%8C%5Cn%20%20%20%20%20%20%5Ctreturn%20curryInset(...args.concat(Array.from(...arguments)))%5Cn%20%20%20%20%20%20%7D%5Cn%20%20%20%20%7D%5Cn%20%20%20%20return%20fn(...args)%5Cn%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22OAjb9%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h2 data-lake-id=\"wUeP2\" id=\"wUeP2\"><span data-lake-id=\"u92c1f9de\" id=\"u92c1f9de\">柯理化实战案例</span></h2><p data-lake-id=\"u641150fe\" id=\"u641150fe\"><span data-lake-id=\"ua59f769a\" id=\"ua59f769a\" style=\"color: rgb(43, 43, 43)\">我们工作中经常遇到各种需要正则校验的需求，例如在提交用户信息的时候校验手机号、邮箱等。</span></p><p data-lake-id=\"u1645fd1d\" id=\"u1645fd1d\"><span data-lake-id=\"u66a6e8fe\" id=\"u66a6e8fe\" style=\"color: rgb(43, 43, 43)\">​</span><br></p><ul list=\"u153aff10\"><li fid=\"u34643e8c\" data-lake-id=\"u94e9847a\" id=\"u94e9847a\"><span data-lake-id=\"u76b15d00\" id=\"u76b15d00\" class=\"lake-fontsize-11\" style=\"color: rgb(43, 43, 43)\">封装一个校验函数：</span></li></ul><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%20%E9%9D%9E%E6%9F%AF%E9%87%8C%E5%8C%96%E7%89%88%E6%9C%AC%5Cnfunction%20checkByRegExp(regExp%2Cstring)%20%7B%5Cn%20%20return%20regExp.test(string)%3B%20%20%5Cn%7D%5Cn%5CncheckByRegExp(%2F%5E1%5C%5Cd%7B10%7D%24%2F%2C%20'15010001000')%3B%20%2F%2F%20%E6%A0%A1%E9%AA%8C%E7%94%B5%E8%AF%9D%E5%8F%B7%E7%A0%81%5CncheckByRegExp(%2F%5E(%5C%5Cw)%2B(%5C%5C.%5C%5Cw%2B)*%40(%5C%5Cw)%2B((%5C%5C.%5C%5Cw%2B)%2B)%24%2F%2C%20'test%40163.com')%3B%20%2F%2F%20%E6%A0%A1%E9%AA%8C%E9%82%AE%E7%AE%B1%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22NaF60%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><ul list=\"u6e5c2935\"><li fid=\"u8d7a13e3\" data-lake-id=\"u1355c018\" id=\"u1355c018\"><span data-lake-id=\"uebbca35b\" id=\"uebbca35b\" class=\"lake-fontsize-11\" style=\"color: rgb(43, 43, 43)\">在实际使用中，其实我们不需要去关注正则是如何匹配的，只需要使用更具体函数去分别校验手机号或者邮箱，这里就需要我们使用柯里化函数处理一下：</span></li></ul><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%20%E8%BF%9B%E8%A1%8C%E6%9F%AF%E9%87%8C%E5%8C%96%5Cnlet%20_check%20%3D%20curry(checkByRegExp)%3B%5Cn%2F%2F%20%E7%94%9F%E6%88%90%E5%B7%A5%E5%85%B7%E5%87%BD%E6%95%B0%EF%BC%8C%E9%AA%8C%E8%AF%81%E7%94%B5%E8%AF%9D%E5%8F%B7%E7%A0%81%5Cnlet%20checkCellPhone%20%3D%20_check(%2F%5E1%5C%5Cd%7B10%7D%24%2F)%3B%5Cn%2F%2F%20%E7%94%9F%E6%88%90%E5%B7%A5%E5%85%B7%E5%87%BD%E6%95%B0%EF%BC%8C%E9%AA%8C%E8%AF%81%E9%82%AE%E7%AE%B1%5Cnlet%20checkEmail%20%3D%20_check(%2F%5E(%5C%5Cw)%2B(%5C%5C.%5C%5Cw%2B)*%40(%5C%5Cw)%2B((%5C%5C.%5C%5Cw%2B)%2B)%24%2F)%3B%5Cn%5CncheckCellPhone('18642838455')%3B%20%2F%2F%20%E6%A0%A1%E9%AA%8C%E7%94%B5%E8%AF%9D%E5%8F%B7%E7%A0%81%5CncheckCellPhone('13109840560')%3B%20%2F%2F%20%E6%A0%A1%E9%AA%8C%E7%94%B5%E8%AF%9D%E5%8F%B7%E7%A0%81%5CncheckCellPhone('13204061212')%3B%20%2F%2F%20%E6%A0%A1%E9%AA%8C%E7%94%B5%E8%AF%9D%E5%8F%B7%E7%A0%81%5Cn%5CncheckEmail('test%40163.com')%3B%20%2F%2F%20%E6%A0%A1%E9%AA%8C%E9%82%AE%E7%AE%B1%5CncheckEmail('test%40qq.com')%3B%20%2F%2F%20%E6%A0%A1%E9%AA%8C%E9%82%AE%E7%AE%B1%5CncheckEmail('test%40gmail.com')%3B%20%2F%2F%20%E6%A0%A1%E9%AA%8C%E9%82%AE%E7%AE%B1%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22MLcTo%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card>",
  "body_draft_lake": "",
  "public": 0,
  "status": 1,
  "view_status": 0,
  "read_status": 1,
  "likes_count": 0,
  "comments_count": 0,
  "content_updated_at": "2022-04-04T11:35:08.000Z",
  "deleted_at": null,
  "created_at": "2022-04-04T11:35:08.000Z",
  "updated_at": "2022-05-10T15:16:50.000Z",
  "published_at": "2022-04-04T11:35:08.000Z",
  "first_published_at": "2022-04-04T11:35:08.394Z",
  "word_count": 854,
  "cover": null,
  "description": "什么是柯理化函数柯里化指的是一种将使用多个参数的一个函数转换成一系列使用一个参数的函数的技术。(函数柯理化的基础是闭包)实现// es6 实现 function curry(fn, ...args) { \treturn fn.length <= args.length ? fn(...args...",
  "custom_description": null,
  "hits": 0,
  "_serializer": "v2.doc_detail"
}