{
  "id": 72212417,
  "slug": "sgcusf",
  "title": "Promise 缓存",
  "book_id": 26225252,
  "book": {
    "id": 26225252,
    "type": "Book",
    "slug": "sd8kbc",
    "name": "笔试 written test",
    "user_id": 732231,
    "description": "笔试相关题目\n1. 原生 API 实现\n2. 业务场景相关问题\n3. LeetCode 算法相关问题",
    "creator_id": 732231,
    "public": 0,
    "items_count": 74,
    "likes_count": 0,
    "watches_count": 1,
    "content_updated_at": "2023-11-11T18:15:38.713Z",
    "updated_at": "2023-11-11T18:15:39.000Z",
    "created_at": "2022-04-04T11:34:53.000Z",
    "namespace": "wcywxq/sd8kbc",
    "user": {
      "id": 732231,
      "type": "User",
      "login": "wcywxq",
      "name": "magic",
      "description": null,
      "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/732231/1606968271774-avatar/886ad88b-d2cc-4c9e-a674-f70eb51a679c.png",
      "books_count": 18,
      "public_books_count": 0,
      "followers_count": 0,
      "following_count": 0,
      "created_at": "2020-01-08T14:21:31.000Z",
      "updated_at": "2023-11-13T09:32:35.000Z",
      "_serializer": "v2.user"
    },
    "_serializer": "v2.book"
  },
  "user_id": 732231,
  "creator": {
    "id": 732231,
    "type": "User",
    "login": "wcywxq",
    "name": "magic",
    "description": null,
    "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/732231/1606968271774-avatar/886ad88b-d2cc-4c9e-a674-f70eb51a679c.png",
    "books_count": 18,
    "public_books_count": 0,
    "followers_count": 0,
    "following_count": 0,
    "created_at": "2020-01-08T14:21:31.000Z",
    "updated_at": "2023-11-13T09:32:35.000Z",
    "_serializer": "v2.user"
  },
  "format": "lake",
  "body": "为了解决 promise 调用常量，每个页面都会调用这个常量，以解决多次调用接口对服务器造成请求的浪费。<br />可以使用 promise 缓存或者全局状态管理。\n```javascript\nconst cacheMap = new Map()\nfunction enableCache(target, name, descriptor) {\n\tconst val = descriptor.value\n  descriptor.value = async function(...args) {\n  \tconst cacheKey = name + JSON.stringify(args)\n    if (!cacheMap.get(cacheKey)) {\n      const cacheValue = Promise.resolve(val.apply(this, args))\n      \t.catch(err => {\n        \tcacheMap.set(cacheKey, null)\n        })\n      cacheMap.set(cacheKey, cacheValue)\n    }\n    return cacheMap.get(cacheKey)\n  }\n  return descriptor\n}\nclass PromiseClass {\n\t@enableCache\n  static async getInfo() {}\n}\nPromiseClass.getInfo()\nPromiseClass.getInfo()\n```\n",
  "body_draft": "",
  "body_html": "<!doctype html><p data-lake-id=\"u3bd4a36a\"><span>为了解决 promise 调用常量，每个页面都会调用这个常量，以解决多次调用接口对服务器造成请求的浪费。<br />可以使用 promise 缓存或者全局状态管理。</span></p><pre data-lang=\"javascript\"><code>const cacheMap = new Map()\nfunction enableCache(target, name, descriptor) {\n\tconst val = descriptor.value\n  descriptor.value = async function(...args) {\n  \tconst cacheKey = name + JSON.stringify(args)\n    if (!cacheMap.get(cacheKey)) {\n      const cacheValue = Promise.resolve(val.apply(this, args))\n      \t.catch(err =&gt; {\n        \tcacheMap.set(cacheKey, null)\n        })\n      cacheMap.set(cacheKey, cacheValue)\n    }\n    return cacheMap.get(cacheKey)\n  }\n  return descriptor\n}\nclass PromiseClass {\n\t@enableCache\n  static async getInfo() {}\n}\nPromiseClass.getInfo()\nPromiseClass.getInfo()</code></pre>",
  "body_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"viewport\" content=\"adapt\" /><p data-lake-id=\"u3bd4a36a\" id=\"u3bd4a36a\"><span data-lake-id=\"u5eea3cc2\" id=\"u5eea3cc2\">为了解决 promise 调用常量，每个页面都会调用这个常量，以解决多次调用接口对服务器造成请求的浪费。<br />可以使用 promise 缓存或者全局状态管理。</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22const%20cacheMap%20%3D%20new%20Map()%5Cnfunction%20enableCache(target%2C%20name%2C%20descriptor)%20%7B%5Cn%5Ctconst%20val%20%3D%20descriptor.value%5Cn%20%20descriptor.value%20%3D%20async%20function(...args)%20%7B%5Cn%20%20%5Ctconst%20cacheKey%20%3D%20name%20%2B%20JSON.stringify(args)%5Cn%20%20%20%20if%20(!cacheMap.get(cacheKey))%20%7B%5Cn%20%20%20%20%20%20const%20cacheValue%20%3D%20Promise.resolve(val.apply(this%2C%20args))%5Cn%20%20%20%20%20%20%5Ct.catch(err%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20%20%20%5CtcacheMap.set(cacheKey%2C%20null)%5Cn%20%20%20%20%20%20%20%20%7D)%5Cn%20%20%20%20%20%20cacheMap.set(cacheKey%2C%20cacheValue)%5Cn%20%20%20%20%7D%5Cn%20%20%20%20return%20cacheMap.get(cacheKey)%5Cn%20%20%7D%5Cn%20%20return%20descriptor%5Cn%7D%5Cnclass%20PromiseClass%20%7B%5Cn%5Ct%40enableCache%5Cn%20%20static%20async%20getInfo()%20%7B%7D%5Cn%7D%5CnPromiseClass.getInfo()%5CnPromiseClass.getInfo()%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22P9MET%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card>",
  "body_draft_lake": "",
  "public": 0,
  "status": 1,
  "view_status": 0,
  "read_status": 1,
  "likes_count": 0,
  "comments_count": 0,
  "content_updated_at": "2022-04-04T11:35:13.000Z",
  "deleted_at": null,
  "created_at": "2022-04-04T11:35:13.000Z",
  "updated_at": "2022-05-10T15:16:49.000Z",
  "published_at": "2022-04-04T11:35:13.000Z",
  "first_published_at": "2022-04-04T11:35:13.418Z",
  "word_count": 119,
  "cover": null,
  "description": "为了解决 promise 调用常量，每个页面都会调用这个常量，以解决多次调用接口对服务器造成请求的浪费。可以使用 promise 缓存或者全局状态管理。const cacheMap = new Map() function enableCache(target, name, descripto...",
  "custom_description": null,
  "hits": 0,
  "_serializer": "v2.doc_detail"
}