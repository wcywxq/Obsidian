{
  "id": 74885813,
  "slug": "apqplp",
  "title": "实现 mergePromise 函数",
  "book_id": 26225252,
  "book": {
    "id": 26225252,
    "type": "Book",
    "slug": "sd8kbc",
    "name": "笔试 written test",
    "user_id": 732231,
    "description": "笔试相关题目\n1. 原生 API 实现\n2. 业务场景相关问题\n3. LeetCode 算法相关问题",
    "creator_id": 732231,
    "public": 0,
    "items_count": 74,
    "likes_count": 0,
    "watches_count": 1,
    "content_updated_at": "2023-11-11T18:15:38.713Z",
    "updated_at": "2023-11-11T18:15:39.000Z",
    "created_at": "2022-04-04T11:34:53.000Z",
    "namespace": "wcywxq/sd8kbc",
    "user": {
      "id": 732231,
      "type": "User",
      "login": "wcywxq",
      "name": "magic",
      "description": null,
      "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/732231/1606968271774-avatar/886ad88b-d2cc-4c9e-a674-f70eb51a679c.png",
      "books_count": 18,
      "public_books_count": 0,
      "followers_count": 0,
      "following_count": 0,
      "created_at": "2020-01-08T14:21:31.000Z",
      "updated_at": "2023-11-13T09:32:35.000Z",
      "_serializer": "v2.user"
    },
    "_serializer": "v2.book"
  },
  "user_id": 732231,
  "creator": {
    "id": 732231,
    "type": "User",
    "login": "wcywxq",
    "name": "magic",
    "description": null,
    "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/732231/1606968271774-avatar/886ad88b-d2cc-4c9e-a674-f70eb51a679c.png",
    "books_count": 18,
    "public_books_count": 0,
    "followers_count": 0,
    "following_count": 0,
    "created_at": "2020-01-08T14:21:31.000Z",
    "updated_at": "2023-11-13T09:32:35.000Z",
    "_serializer": "v2.user"
  },
  "format": "lake",
  "body": "实现 mergePromise 函数，把传进去的数组按照顺序先后执行，并且把返回的数据先后放到数组 data 中\n```javascript\nconst time = timer => {\n  return new Promise(resolve => {\n    setTimeout(() => {\n      resolve()\n    }, timer)\n  })\n}\n\nconst ajax1 = () => time(2000).then(() => {\n  console.log(1)\n  return 1\n})\n\nconst ajax2 = () => time(1000).then(() => {\n  console.log(2)\n  return 2\n})\n\nconst ajax3 = () => time(1000).then(() => {\n  console.log(3)\n  return 3\n})\n\nmergePromise([ajax1, ajax2, ajax3]).then(data => {\n  console.log(\"done\")\n  console.log(data) // data 为 [1, 2, 3]\n})\n\n// 需要分别输出\n// 1\n// 2\n// 3\n// done\n// [1, 2, 3]\n```\n\n- 实现\n```javascript\nfunction mergePromise(ajaxArray) {\n  // 存放每个 ajax 的结果\n  const data = []\n  let promise = Promise.resolve()\n  ajaxArray.forEach(ajax => {\n    // 第一次 then 为了用来调用 ajax\n    // 第二次 then 为了获取 ajax 结果\n    promise = promise.then(ajax).then(res => {\n      data.push(res)\n      return data // 返回每次的结果\n    })\n  })\n  return promise\n}\n```\n",
  "body_draft": "",
  "body_html": "<!doctype html><div class=\"lake-content\" typography=\"classic\"><p id=\"u5186d752\" class=\"ne-p\"><span class=\"ne-text\">实现 mergePromise 函数，把传进去的数组按照顺序先后执行，并且把返回的数据先后放到数组 data 中</span></p><pre data-language=\"javascript\" id=\"FYxKW\" class=\"ne-codeblock language-javascript\">const time = timer =&gt; {\n  return new Promise(resolve =&gt; {\n    setTimeout(() =&gt; {\n      resolve()\n    }, timer)\n  })\n}\n\nconst ajax1 = () =&gt; time(2000).then(() =&gt; {\n  console.log(1)\n  return 1\n})\n\nconst ajax2 = () =&gt; time(1000).then(() =&gt; {\n  console.log(2)\n  return 2\n})\n\nconst ajax3 = () =&gt; time(1000).then(() =&gt; {\n  console.log(3)\n  return 3\n})\n\nmergePromise([ajax1, ajax2, ajax3]).then(data =&gt; {\n  console.log(&quot;done&quot;)\n  console.log(data) // data 为 [1, 2, 3]\n})\n\n// 需要分别输出\n// 1\n// 2\n// 3\n// done\n// [1, 2, 3]</pre><ul class=\"ne-ul\"><li id=\"ub4cab7ec\"><span class=\"ne-text\">实现</span></li></ul><pre data-language=\"javascript\" id=\"u7W6E\" class=\"ne-codeblock language-javascript\">function mergePromise(ajaxArray) {\n  // 存放每个 ajax 的结果\n  const data = []\n  let promise = Promise.resolve()\n  ajaxArray.forEach(ajax =&gt; {\n    // 第一次 then 为了用来调用 ajax\n    // 第二次 then 为了获取 ajax 结果\n    promise = promise.then(ajax).then(res =&gt; {\n      data.push(res)\n      return data // 返回每次的结果\n    })\n  })\n  return promise\n}</pre></div>",
  "body_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"viewport\" content=\"adapt\" /><p data-lake-id=\"u5186d752\" id=\"u5186d752\"><span data-lake-id=\"ud4fc8174\" id=\"ud4fc8174\">实现 mergePromise 函数，把传进去的数组按照顺序先后执行，并且把返回的数据先后放到数组 data 中</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22const%20time%20%3D%20timer%20%3D%3E%20%7B%5Cn%20%20return%20new%20Promise(resolve%20%3D%3E%20%7B%5Cn%20%20%20%20setTimeout(()%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20resolve()%5Cn%20%20%20%20%7D%2C%20timer)%5Cn%20%20%7D)%5Cn%7D%5Cn%5Cnconst%20ajax1%20%3D%20()%20%3D%3E%20time(2000).then(()%20%3D%3E%20%7B%5Cn%20%20console.log(1)%5Cn%20%20return%201%5Cn%7D)%5Cn%5Cnconst%20ajax2%20%3D%20()%20%3D%3E%20time(1000).then(()%20%3D%3E%20%7B%5Cn%20%20console.log(2)%5Cn%20%20return%202%5Cn%7D)%5Cn%5Cnconst%20ajax3%20%3D%20()%20%3D%3E%20time(1000).then(()%20%3D%3E%20%7B%5Cn%20%20console.log(3)%5Cn%20%20return%203%5Cn%7D)%5Cn%5CnmergePromise(%5Bajax1%2C%20ajax2%2C%20ajax3%5D).then(data%20%3D%3E%20%7B%5Cn%20%20console.log(%5C%22done%5C%22)%5Cn%20%20console.log(data)%20%2F%2F%20data%20%E4%B8%BA%20%5B1%2C%202%2C%203%5D%5Cn%7D)%5Cn%5Cn%2F%2F%20%E9%9C%80%E8%A6%81%E5%88%86%E5%88%AB%E8%BE%93%E5%87%BA%5Cn%2F%2F%201%5Cn%2F%2F%202%5Cn%2F%2F%203%5Cn%2F%2F%20done%5Cn%2F%2F%20%5B1%2C%202%2C%203%5D%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22FYxKW%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><ul list=\"u675a0e34\"><li fid=\"u6aeae962\" data-lake-id=\"ub4cab7ec\" id=\"ub4cab7ec\"><span data-lake-id=\"uc8a383c6\" id=\"uc8a383c6\">实现</span></li></ul><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22function%20mergePromise(ajaxArray)%20%7B%5Cn%20%20%2F%2F%20%E5%AD%98%E6%94%BE%E6%AF%8F%E4%B8%AA%20ajax%20%E7%9A%84%E7%BB%93%E6%9E%9C%5Cn%20%20const%20data%20%3D%20%5B%5D%5Cn%20%20let%20promise%20%3D%20Promise.resolve()%5Cn%20%20ajaxArray.forEach(ajax%20%3D%3E%20%7B%5Cn%20%20%20%20%2F%2F%20%E7%AC%AC%E4%B8%80%E6%AC%A1%20then%20%E4%B8%BA%E4%BA%86%E7%94%A8%E6%9D%A5%E8%B0%83%E7%94%A8%20ajax%5Cn%20%20%20%20%2F%2F%20%E7%AC%AC%E4%BA%8C%E6%AC%A1%20then%20%E4%B8%BA%E4%BA%86%E8%8E%B7%E5%8F%96%20ajax%20%E7%BB%93%E6%9E%9C%5Cn%20%20%20%20promise%20%3D%20promise.then(ajax).then(res%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20data.push(res)%5Cn%20%20%20%20%20%20return%20data%20%2F%2F%20%E8%BF%94%E5%9B%9E%E6%AF%8F%E6%AC%A1%E7%9A%84%E7%BB%93%E6%9E%9C%5Cn%20%20%20%20%7D)%5Cn%20%20%7D)%5Cn%20%20return%20promise%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22u7W6E%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card>",
  "body_draft_lake": "",
  "public": 0,
  "status": 1,
  "view_status": 0,
  "read_status": 1,
  "likes_count": 0,
  "comments_count": 0,
  "content_updated_at": "2022-04-24T13:47:24.000Z",
  "deleted_at": null,
  "created_at": "2022-04-24T13:39:18.000Z",
  "updated_at": "2022-04-24T13:48:19.000Z",
  "published_at": "2022-04-24T13:48:19.000Z",
  "first_published_at": "2022-04-24T13:41:55.112Z",
  "word_count": 196,
  "cover": null,
  "description": "实现 mergePromise 函数，把传进去的数组按照顺序先后执行，并且把返回的数据先后放到数组 data 中const time = timer => {   return new Promise(resolve => {     setTimeout(() => {       reso...",
  "custom_description": null,
  "hits": 0,
  "_serializer": "v2.doc_detail"
}