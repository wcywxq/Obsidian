{
  "id": 77015236,
  "slug": "xycpzl",
  "title": "树转数组",
  "book_id": 26225252,
  "book": {
    "id": 26225252,
    "type": "Book",
    "slug": "sd8kbc",
    "name": "笔试 written test",
    "user_id": 732231,
    "description": "笔试相关题目\n1. 原生 API 实现\n2. 业务场景相关问题\n3. LeetCode 算法相关问题",
    "creator_id": 732231,
    "public": 0,
    "items_count": 74,
    "likes_count": 0,
    "watches_count": 1,
    "content_updated_at": "2023-11-11T18:15:38.713Z",
    "updated_at": "2023-11-11T18:15:39.000Z",
    "created_at": "2022-04-04T11:34:53.000Z",
    "namespace": "wcywxq/sd8kbc",
    "user": {
      "id": 732231,
      "type": "User",
      "login": "wcywxq",
      "name": "magic",
      "description": null,
      "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/732231/1606968271774-avatar/886ad88b-d2cc-4c9e-a674-f70eb51a679c.png",
      "books_count": 18,
      "public_books_count": 0,
      "followers_count": 0,
      "following_count": 0,
      "created_at": "2020-01-08T14:21:31.000Z",
      "updated_at": "2023-11-13T09:32:35.000Z",
      "_serializer": "v2.user"
    },
    "_serializer": "v2.book"
  },
  "user_id": 732231,
  "creator": {
    "id": 732231,
    "type": "User",
    "login": "wcywxq",
    "name": "magic",
    "description": null,
    "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/732231/1606968271774-avatar/886ad88b-d2cc-4c9e-a674-f70eb51a679c.png",
    "books_count": 18,
    "public_books_count": 0,
    "followers_count": 0,
    "following_count": 0,
    "created_at": "2020-01-08T14:21:31.000Z",
    "updated_at": "2023-11-13T09:32:35.000Z",
    "_serializer": "v2.user"
  },
  "format": "lake",
  "body": "```javascript\n// 对于给定的对象数组结构，描述的是一颗树的节点关系，要求实现一个函数，找出这颗树所有的链路，以二维数组形式输出\n// 例如：\nconst list = [\n    { id: 6 },\n    { id: 2, children: [5] },\n    { id: 13 },\n    { id: 5, children: [10, 11] },\n    { id: 1, children: [2, 3, 4] },\n    { id: 10 },\n    { id: 8, children: [13] },\n    { id: 4, children: [8, 9] },\n    { id: 9 },\n    { id: 3, children: [6, 7] },\n    { id: 11, children: [14] },\n    { id: 14 },\n    { id: 7, children: [12] },\n    { id: 12 }\n]\n\n// 输出：\n// [\n//   [ 1, 3, 6 ],\n//   [ 1, 4, 8, 13 ],\n//   [ 1, 2, 5, 10 ],\n//   [ 1, 4, 9 ],\n//   [ 1, 2, 5, 11, 14 ],\n//   [ 1, 3, 7, 12 ]\n// ]\n\n\nfunction parseArrToTree(arr) {\n    const dfs = (tree, path = [], res = []) => {\n        tree.forEach(node => {\n            path.push(node.id)\n            node.children && node.children.length\n                ? dfs(\n                      node.children.map(id => arr.find(item => item.id === id)),\n                      path,\n                      res\n                  )\n                : res.push([...path])\n            path.pop()\n        })\n        return res\n    }\n    return dfs(arr)\n}\n\n// parseArrToTree(list)\nconsole.log(parseArrToTree(list))\n```\n",
  "body_draft": "",
  "body_html": "<!doctype html><div class=\"lake-content\" typography=\"classic\"><pre data-language=\"javascript\" id=\"eekvN\" class=\"ne-codeblock language-javascript\">// 对于给定的对象数组结构，描述的是一颗树的节点关系，要求实现一个函数，找出这颗树所有的链路，以二维数组形式输出\n// 例如：\nconst list = [\n    { id: 6 },\n    { id: 2, children: [5] },\n    { id: 13 },\n    { id: 5, children: [10, 11] },\n    { id: 1, children: [2, 3, 4] },\n    { id: 10 },\n    { id: 8, children: [13] },\n    { id: 4, children: [8, 9] },\n    { id: 9 },\n    { id: 3, children: [6, 7] },\n    { id: 11, children: [14] },\n    { id: 14 },\n    { id: 7, children: [12] },\n    { id: 12 }\n]\n\n// 输出：\n// [\n//   [ 1, 3, 6 ],\n//   [ 1, 4, 8, 13 ],\n//   [ 1, 2, 5, 10 ],\n//   [ 1, 4, 9 ],\n//   [ 1, 2, 5, 11, 14 ],\n//   [ 1, 3, 7, 12 ]\n// ]\n\n\nfunction parseArrToTree(arr) {\n    const dfs = (tree, path = [], res = []) =&gt; {\n        tree.forEach(node =&gt; {\n            path.push(node.id)\n            node.children &amp;&amp; node.children.length\n                ? dfs(\n                      node.children.map(id =&gt; arr.find(item =&gt; item.id === id)),\n                      path,\n                      res\n                  )\n                : res.push([...path])\n            path.pop()\n        })\n        return res\n    }\n    return dfs(arr)\n}\n\n// parseArrToTree(list)\nconsole.log(parseArrToTree(list))</pre></div>",
  "body_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"viewport\" content=\"adapt\" /><meta name=\"paragraphSpacing\" content=\"relax\" /><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%20%E5%AF%B9%E4%BA%8E%E7%BB%99%E5%AE%9A%E7%9A%84%E5%AF%B9%E8%B1%A1%E6%95%B0%E7%BB%84%E7%BB%93%E6%9E%84%EF%BC%8C%E6%8F%8F%E8%BF%B0%E7%9A%84%E6%98%AF%E4%B8%80%E9%A2%97%E6%A0%91%E7%9A%84%E8%8A%82%E7%82%B9%E5%85%B3%E7%B3%BB%EF%BC%8C%E8%A6%81%E6%B1%82%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E5%87%BD%E6%95%B0%EF%BC%8C%E6%89%BE%E5%87%BA%E8%BF%99%E9%A2%97%E6%A0%91%E6%89%80%E6%9C%89%E7%9A%84%E9%93%BE%E8%B7%AF%EF%BC%8C%E4%BB%A5%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E5%BD%A2%E5%BC%8F%E8%BE%93%E5%87%BA%5Cn%2F%2F%20%E4%BE%8B%E5%A6%82%EF%BC%9A%5Cnconst%20list%20%3D%20%5B%5Cn%20%20%20%20%7B%20id%3A%206%20%7D%2C%5Cn%20%20%20%20%7B%20id%3A%202%2C%20children%3A%20%5B5%5D%20%7D%2C%5Cn%20%20%20%20%7B%20id%3A%2013%20%7D%2C%5Cn%20%20%20%20%7B%20id%3A%205%2C%20children%3A%20%5B10%2C%2011%5D%20%7D%2C%5Cn%20%20%20%20%7B%20id%3A%201%2C%20children%3A%20%5B2%2C%203%2C%204%5D%20%7D%2C%5Cn%20%20%20%20%7B%20id%3A%2010%20%7D%2C%5Cn%20%20%20%20%7B%20id%3A%208%2C%20children%3A%20%5B13%5D%20%7D%2C%5Cn%20%20%20%20%7B%20id%3A%204%2C%20children%3A%20%5B8%2C%209%5D%20%7D%2C%5Cn%20%20%20%20%7B%20id%3A%209%20%7D%2C%5Cn%20%20%20%20%7B%20id%3A%203%2C%20children%3A%20%5B6%2C%207%5D%20%7D%2C%5Cn%20%20%20%20%7B%20id%3A%2011%2C%20children%3A%20%5B14%5D%20%7D%2C%5Cn%20%20%20%20%7B%20id%3A%2014%20%7D%2C%5Cn%20%20%20%20%7B%20id%3A%207%2C%20children%3A%20%5B12%5D%20%7D%2C%5Cn%20%20%20%20%7B%20id%3A%2012%20%7D%5Cn%5D%5Cn%5Cn%2F%2F%20%E8%BE%93%E5%87%BA%EF%BC%9A%5Cn%2F%2F%20%5B%5Cn%2F%2F%20%20%20%5B%201%2C%203%2C%206%20%5D%2C%5Cn%2F%2F%20%20%20%5B%201%2C%204%2C%208%2C%2013%20%5D%2C%5Cn%2F%2F%20%20%20%5B%201%2C%202%2C%205%2C%2010%20%5D%2C%5Cn%2F%2F%20%20%20%5B%201%2C%204%2C%209%20%5D%2C%5Cn%2F%2F%20%20%20%5B%201%2C%202%2C%205%2C%2011%2C%2014%20%5D%2C%5Cn%2F%2F%20%20%20%5B%201%2C%203%2C%207%2C%2012%20%5D%5Cn%2F%2F%20%5D%5Cn%5Cn%5Cnfunction%20parseArrToTree(arr)%20%7B%5Cn%20%20%20%20const%20dfs%20%3D%20(tree%2C%20path%20%3D%20%5B%5D%2C%20res%20%3D%20%5B%5D)%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20%20%20tree.forEach(node%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20path.push(node.id)%5Cn%20%20%20%20%20%20%20%20%20%20%20%20node.children%20%26%26%20node.children.length%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3F%20dfs(%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20node.children.map(id%20%3D%3E%20arr.find(item%20%3D%3E%20item.id%20%3D%3D%3D%20id))%2C%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20path%2C%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20res%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20)%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3A%20res.push(%5B...path%5D)%5Cn%20%20%20%20%20%20%20%20%20%20%20%20path.pop()%5Cn%20%20%20%20%20%20%20%20%7D)%5Cn%20%20%20%20%20%20%20%20return%20res%5Cn%20%20%20%20%7D%5Cn%20%20%20%20return%20dfs(arr)%5Cn%7D%5Cn%5Cn%2F%2F%20parseArrToTree(list)%5Cnconsole.log(parseArrToTree(list))%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22eekvN%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card>",
  "body_draft_lake": "",
  "public": 0,
  "status": 1,
  "view_status": 0,
  "read_status": 1,
  "likes_count": 0,
  "comments_count": 0,
  "content_updated_at": "2022-05-11T14:17:14.000Z",
  "deleted_at": null,
  "created_at": "2022-05-11T14:16:50.000Z",
  "updated_at": "2022-05-19T14:41:46.000Z",
  "published_at": "2022-05-12T15:04:37.000Z",
  "first_published_at": "2022-05-11T14:17:14.175Z",
  "word_count": 237,
  "cover": null,
  "description": "// 对于给定的对象数组结构，描述的是一颗树的节点关系，要求实现一个函数，找出这颗树所有的链路，以二维数组形式输出 // 例如： const list = [     { id: 6 },     { id: 2, children: [5] },     { id: 13 },     { ...",
  "custom_description": null,
  "hits": 0,
  "_serializer": "v2.doc_detail"
}