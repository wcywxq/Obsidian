{
  "id": 81933729,
  "slug": "kyaq59",
  "title": "AC数量",
  "book_id": 26225252,
  "book": {
    "id": 26225252,
    "type": "Book",
    "slug": "sd8kbc",
    "name": "笔试 written test",
    "user_id": 732231,
    "description": "笔试相关题目\n1. 原生 API 实现\n2. 业务场景相关问题\n3. LeetCode 算法相关问题",
    "creator_id": 732231,
    "public": 0,
    "items_count": 74,
    "likes_count": 0,
    "watches_count": 1,
    "content_updated_at": "2023-11-11T18:15:38.713Z",
    "updated_at": "2023-11-11T18:15:39.000Z",
    "created_at": "2022-04-04T11:34:53.000Z",
    "namespace": "wcywxq/sd8kbc",
    "user": {
      "id": 732231,
      "type": "User",
      "login": "wcywxq",
      "name": "magic",
      "description": null,
      "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/732231/1606968271774-avatar/886ad88b-d2cc-4c9e-a674-f70eb51a679c.png",
      "books_count": 18,
      "public_books_count": 0,
      "followers_count": 0,
      "following_count": 0,
      "created_at": "2020-01-08T14:21:31.000Z",
      "updated_at": "2023-11-13T09:32:35.000Z",
      "_serializer": "v2.user"
    },
    "_serializer": "v2.book"
  },
  "user_id": 732231,
  "creator": {
    "id": 732231,
    "type": "User",
    "login": "wcywxq",
    "name": "magic",
    "description": null,
    "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/732231/1606968271774-avatar/886ad88b-d2cc-4c9e-a674-f70eb51a679c.png",
    "books_count": 18,
    "public_books_count": 0,
    "followers_count": 0,
    "following_count": 0,
    "created_at": "2020-01-08T14:21:31.000Z",
    "updated_at": "2023-11-13T09:32:35.000Z",
    "_serializer": "v2.user"
  },
  "format": "lake",
  "body": "```typescript\n/* 【题目】AC 数量\n\n现有 N 个人参加 ACM 比赛，每个人做出的题目可以通过已知的函数 acBy(i) 获取。\n\nacBy 是一个异步函数，需要请求远程服务器上的 API 来获取结果。其参数 i 取值为 0～N-1，对应参赛人员 1～N；其返回值为一个 Promise<number[]>，代表第 i 个人 AC 的题目编号。\n\n给定参赛人数 N，请计算出本次比赛一共有多少题目被做出了～\n\n示例：参赛人数为 2，请求 acBy(0)、acBy(1) 结果为 [1,2]、[3,4]。则被解答出的题目序号为 1、2、3、4，结果为 4\n\n*/\n\n// 假设 acBy 已定义，可直接调用\nfunction acBy(i: number): Promise<number[]> {\n  // @ts-ignore\n  return Promise.resolve([i])\n}\n\nasync function totalAC(n: number) {\n  // 请补充代码\n  // let ans = []\n  let arr = Array.from(new Array(n), (_, k) => k)\n  \n  return Promise.all(arr.map(k => acBy(k))).then(result => {\n    return Array.from(new Set(result.flat(Infinity))).length\n  })\n  \n  // for (const key of arr) {\n  //     acBy(key).then(res => {\n  //         ans[key] = res // 异步\n  //     })\n  // }\n  \n  // let result = Array.from(new Set(ans.flat(Infinity))) // 同步\n  \n  // return result.length\n}\n\ntotalAC(10).then(res => console.log(res))\n```\n",
  "body_draft": "",
  "body_html": "<!doctype html><div class=\"lake-content\" typography=\"classic\"><pre data-language=\"typescript\" id=\"29eba998\" class=\"ne-codeblock language-typescript\">/* 【题目】AC 数量\n\n现有 N 个人参加 ACM 比赛，每个人做出的题目可以通过已知的函数 acBy(i) 获取。\n\nacBy 是一个异步函数，需要请求远程服务器上的 API 来获取结果。其参数 i 取值为 0～N-1，对应参赛人员 1～N；其返回值为一个 Promise&lt;number[]&gt;，代表第 i 个人 AC 的题目编号。\n\n给定参赛人数 N，请计算出本次比赛一共有多少题目被做出了～\n\n示例：参赛人数为 2，请求 acBy(0)、acBy(1) 结果为 [1,2]、[3,4]。则被解答出的题目序号为 1、2、3、4，结果为 4\n\n*/\n\n// 假设 acBy 已定义，可直接调用\nfunction acBy(i: number): Promise&lt;number[]&gt; {\n  // @ts-ignore\n  return Promise.resolve([i])\n}\n\nasync function totalAC(n: number) {\n  // 请补充代码\n  // let ans = []\n  let arr = Array.from(new Array(n), (_, k) =&gt; k)\n  \n  return Promise.all(arr.map(k =&gt; acBy(k))).then(result =&gt; {\n    return Array.from(new Set(result.flat(Infinity))).length\n  })\n  \n  // for (const key of arr) {\n  //     acBy(key).then(res =&gt; {\n  //         ans[key] = res // 异步\n  //     })\n  // }\n  \n  // let result = Array.from(new Set(ans.flat(Infinity))) // 同步\n  \n  // return result.length\n}\n\ntotalAC(10).then(res =&gt; console.log(res))</pre></div>",
  "body_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"viewport\" content=\"adapt\" /><meta name=\"paragraphSpacing\" content=\"relax\" /><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22typescript%22%2C%22code%22%3A%22%2F*%20%E3%80%90%E9%A2%98%E7%9B%AE%E3%80%91AC%20%E6%95%B0%E9%87%8F%5Cn%5Cn%E7%8E%B0%E6%9C%89%20N%20%E4%B8%AA%E4%BA%BA%E5%8F%82%E5%8A%A0%20ACM%20%E6%AF%94%E8%B5%9B%EF%BC%8C%E6%AF%8F%E4%B8%AA%E4%BA%BA%E5%81%9A%E5%87%BA%E7%9A%84%E9%A2%98%E7%9B%AE%E5%8F%AF%E4%BB%A5%E9%80%9A%E8%BF%87%E5%B7%B2%E7%9F%A5%E7%9A%84%E5%87%BD%E6%95%B0%20acBy(i)%20%E8%8E%B7%E5%8F%96%E3%80%82%5Cn%5CnacBy%20%E6%98%AF%E4%B8%80%E4%B8%AA%E5%BC%82%E6%AD%A5%E5%87%BD%E6%95%B0%EF%BC%8C%E9%9C%80%E8%A6%81%E8%AF%B7%E6%B1%82%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E7%9A%84%20API%20%E6%9D%A5%E8%8E%B7%E5%8F%96%E7%BB%93%E6%9E%9C%E3%80%82%E5%85%B6%E5%8F%82%E6%95%B0%20i%20%E5%8F%96%E5%80%BC%E4%B8%BA%200%EF%BD%9EN-1%EF%BC%8C%E5%AF%B9%E5%BA%94%E5%8F%82%E8%B5%9B%E4%BA%BA%E5%91%98%201%EF%BD%9EN%EF%BC%9B%E5%85%B6%E8%BF%94%E5%9B%9E%E5%80%BC%E4%B8%BA%E4%B8%80%E4%B8%AA%20Promise%3Cnumber%5B%5D%3E%EF%BC%8C%E4%BB%A3%E8%A1%A8%E7%AC%AC%20i%20%E4%B8%AA%E4%BA%BA%20AC%20%E7%9A%84%E9%A2%98%E7%9B%AE%E7%BC%96%E5%8F%B7%E3%80%82%5Cn%5Cn%E7%BB%99%E5%AE%9A%E5%8F%82%E8%B5%9B%E4%BA%BA%E6%95%B0%20N%EF%BC%8C%E8%AF%B7%E8%AE%A1%E7%AE%97%E5%87%BA%E6%9C%AC%E6%AC%A1%E6%AF%94%E8%B5%9B%E4%B8%80%E5%85%B1%E6%9C%89%E5%A4%9A%E5%B0%91%E9%A2%98%E7%9B%AE%E8%A2%AB%E5%81%9A%E5%87%BA%E4%BA%86%EF%BD%9E%5Cn%5Cn%E7%A4%BA%E4%BE%8B%EF%BC%9A%E5%8F%82%E8%B5%9B%E4%BA%BA%E6%95%B0%E4%B8%BA%202%EF%BC%8C%E8%AF%B7%E6%B1%82%20acBy(0)%E3%80%81acBy(1)%20%E7%BB%93%E6%9E%9C%E4%B8%BA%20%5B1%2C2%5D%E3%80%81%5B3%2C4%5D%E3%80%82%E5%88%99%E8%A2%AB%E8%A7%A3%E7%AD%94%E5%87%BA%E7%9A%84%E9%A2%98%E7%9B%AE%E5%BA%8F%E5%8F%B7%E4%B8%BA%201%E3%80%812%E3%80%813%E3%80%814%EF%BC%8C%E7%BB%93%E6%9E%9C%E4%B8%BA%204%5Cn%5Cn*%2F%5Cn%5Cn%2F%2F%20%E5%81%87%E8%AE%BE%20acBy%20%E5%B7%B2%E5%AE%9A%E4%B9%89%EF%BC%8C%E5%8F%AF%E7%9B%B4%E6%8E%A5%E8%B0%83%E7%94%A8%5Cnfunction%20acBy(i%3A%20number)%3A%20Promise%3Cnumber%5B%5D%3E%20%7B%5Cn%20%20%2F%2F%20%40ts-ignore%5Cn%20%20return%20Promise.resolve(%5Bi%5D)%5Cn%7D%5Cn%5Cnasync%20function%20totalAC(n%3A%20number)%20%7B%5Cn%20%20%2F%2F%20%E8%AF%B7%E8%A1%A5%E5%85%85%E4%BB%A3%E7%A0%81%5Cn%20%20%2F%2F%20let%20ans%20%3D%20%5B%5D%5Cn%20%20let%20arr%20%3D%20Array.from(new%20Array(n)%2C%20(_%2C%20k)%20%3D%3E%20k)%5Cn%20%20%5Cn%20%20return%20Promise.all(arr.map(k%20%3D%3E%20acBy(k))).then(result%20%3D%3E%20%7B%5Cn%20%20%20%20return%20Array.from(new%20Set(result.flat(Infinity))).length%5Cn%20%20%7D)%5Cn%20%20%5Cn%20%20%2F%2F%20for%20(const%20key%20of%20arr)%20%7B%5Cn%20%20%2F%2F%20%20%20%20%20acBy(key).then(res%20%3D%3E%20%7B%5Cn%20%20%2F%2F%20%20%20%20%20%20%20%20%20ans%5Bkey%5D%20%3D%20res%20%2F%2F%20%E5%BC%82%E6%AD%A5%5Cn%20%20%2F%2F%20%20%20%20%20%7D)%5Cn%20%20%2F%2F%20%7D%5Cn%20%20%5Cn%20%20%2F%2F%20let%20result%20%3D%20Array.from(new%20Set(ans.flat(Infinity)))%20%2F%2F%20%E5%90%8C%E6%AD%A5%5Cn%20%20%5Cn%20%20%2F%2F%20return%20result.length%5Cn%7D%5Cn%5CntotalAC(10).then(res%20%3D%3E%20console.log(res))%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22id%22%3A%2229eba998%22%7D\"></card>",
  "body_draft_lake": "",
  "public": 0,
  "status": 1,
  "view_status": 0,
  "read_status": 1,
  "likes_count": 0,
  "comments_count": 0,
  "content_updated_at": "2022-06-30T06:23:18.000Z",
  "deleted_at": null,
  "created_at": "2022-06-30T06:22:22.000Z",
  "updated_at": "2022-06-30T06:23:18.000Z",
  "published_at": "2022-06-30T06:23:18.000Z",
  "first_published_at": "2022-06-30T06:23:17.509Z",
  "word_count": 280,
  "cover": null,
  "description": "/* 【题目】AC 数量  现有 N 个人参加 ACM 比赛，每个人做出的题目可以通过已知的函数 acBy(i) 获取。  acBy 是一个异步函数，需要请求远程服务器上的 API 来获取结果。其参数 i 取值为 0～N-1，对应参赛人员 1～N；其返回值为一个 Promise<number[...",
  "custom_description": null,
  "hits": 0,
  "_serializer": "v2.doc_detail"
}