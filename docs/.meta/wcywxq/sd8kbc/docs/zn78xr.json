{
  "id": 81636434,
  "slug": "zn78xr",
  "title": "无重复最长子串",
  "book_id": 26225252,
  "book": {
    "id": 26225252,
    "type": "Book",
    "slug": "sd8kbc",
    "name": "笔试 written test",
    "user_id": 732231,
    "description": "笔试相关题目\n1. 原生 API 实现\n2. 业务场景相关问题\n3. LeetCode 算法相关问题",
    "creator_id": 732231,
    "public": 0,
    "items_count": 74,
    "likes_count": 0,
    "watches_count": 1,
    "content_updated_at": "2023-11-11T18:15:38.713Z",
    "updated_at": "2023-11-11T18:15:39.000Z",
    "created_at": "2022-04-04T11:34:53.000Z",
    "namespace": "wcywxq/sd8kbc",
    "user": {
      "id": 732231,
      "type": "User",
      "login": "wcywxq",
      "name": "magic",
      "description": null,
      "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/732231/1606968271774-avatar/886ad88b-d2cc-4c9e-a674-f70eb51a679c.png",
      "books_count": 18,
      "public_books_count": 0,
      "followers_count": 0,
      "following_count": 0,
      "created_at": "2020-01-08T14:21:31.000Z",
      "updated_at": "2023-11-13T09:32:35.000Z",
      "_serializer": "v2.user"
    },
    "_serializer": "v2.book"
  },
  "user_id": 732231,
  "creator": {
    "id": 732231,
    "type": "User",
    "login": "wcywxq",
    "name": "magic",
    "description": null,
    "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/732231/1606968271774-avatar/886ad88b-d2cc-4c9e-a674-f70eb51a679c.png",
    "books_count": 18,
    "public_books_count": 0,
    "followers_count": 0,
    "following_count": 0,
    "created_at": "2020-01-08T14:21:31.000Z",
    "updated_at": "2023-11-13T09:32:35.000Z",
    "_serializer": "v2.user"
  },
  "format": "lake",
  "body": "<a name=\"cgq9k\"></a>\n## 求最长子串长度\n```javascript\nfunction noRepeatMaxStr(s) {\n    let subStr = ''\n    let maxLength = subStr.length\n    for (let i = 0; i < s.length; i++) {\n        let idx = subStr.indexOf(s[i])\n        if (idx === -1) {\n            subStr += s[i]\n        } else {\n            subStr = subStr.substring(idx + 1) + s[i]\n        }\n        maxLength = maxLength > subStr.length ? maxLength : subStr.length\n    }\n    return maxLength\n}\n```\n<a name=\"KXDsB\"></a>\n## 求最长的子串\n```javascript\nfunction noRepeatMaxStr(s) {\n  let subStr = ''\n  let maxLength = subStr.length\n  let ans = []\n  for (let i = 0; i < s.length; i++) {\n    let idx = subStr.indexOf(s[i])\n    if (idx === -1) {\n      subStr += s[i]\n    } else {\n      subStr = subStr.substring(idx + 1) + s[i]\n    }\n    maxLength = maxLength > subStr.length ? maxLength : subStr.length\n    if (ans.indexOf(subStr) === -1) {\n      ans.push(subStr)\n    }\n  }\n  return ans.filter(val => val.length === maxLength)\n}\n```\n",
  "body_draft": "",
  "body_html": "<!doctype html><div class=\"lake-content\" typography=\"classic\"><h2 id=\"cgq9k\"><span class=\"ne-text\">求最长子串长度</span></h2><pre data-language=\"javascript\" id=\"IdNdm\" class=\"ne-codeblock language-javascript\">function noRepeatMaxStr(s) {\n    let subStr = ''\n    let maxLength = subStr.length\n    for (let i = 0; i &lt; s.length; i++) {\n        let idx = subStr.indexOf(s[i])\n        if (idx === -1) {\n            subStr += s[i]\n        } else {\n            subStr = subStr.substring(idx + 1) + s[i]\n        }\n        maxLength = maxLength &gt; subStr.length ? maxLength : subStr.length\n    }\n    return maxLength\n}</pre><h2 id=\"KXDsB\"><span class=\"ne-text\">求最长的子串</span></h2><pre data-language=\"javascript\" id=\"I9UG7\" class=\"ne-codeblock language-javascript\">function noRepeatMaxStr(s) {\n  let subStr = ''\n  let maxLength = subStr.length\n  let ans = []\n  for (let i = 0; i &lt; s.length; i++) {\n    let idx = subStr.indexOf(s[i])\n    if (idx === -1) {\n      subStr += s[i]\n    } else {\n      subStr = subStr.substring(idx + 1) + s[i]\n    }\n    maxLength = maxLength &gt; subStr.length ? maxLength : subStr.length\n    if (ans.indexOf(subStr) === -1) {\n      ans.push(subStr)\n    }\n  }\n  return ans.filter(val =&gt; val.length === maxLength)\n}</pre></div>",
  "body_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"viewport\" content=\"adapt\" /><meta name=\"paragraphSpacing\" content=\"relax\" /><h2 data-lake-id=\"cgq9k\" id=\"cgq9k\"><span data-lake-id=\"u44d97bf7\" id=\"u44d97bf7\">求最长子串长度</span></h2><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22function%20noRepeatMaxStr(s)%20%7B%5Cn%20%20%20%20let%20subStr%20%3D%20''%5Cn%20%20%20%20let%20maxLength%20%3D%20subStr.length%5Cn%20%20%20%20for%20(let%20i%20%3D%200%3B%20i%20%3C%20s.length%3B%20i%2B%2B)%20%7B%5Cn%20%20%20%20%20%20%20%20let%20idx%20%3D%20subStr.indexOf(s%5Bi%5D)%5Cn%20%20%20%20%20%20%20%20if%20(idx%20%3D%3D%3D%20-1)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20subStr%20%2B%3D%20s%5Bi%5D%5Cn%20%20%20%20%20%20%20%20%7D%20else%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20subStr%20%3D%20subStr.substring(idx%20%2B%201)%20%2B%20s%5Bi%5D%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20maxLength%20%3D%20maxLength%20%3E%20subStr.length%20%3F%20maxLength%20%3A%20subStr.length%5Cn%20%20%20%20%7D%5Cn%20%20%20%20return%20maxLength%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22IdNdm%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h2 data-lake-id=\"KXDsB\" id=\"KXDsB\"><span data-lake-id=\"u8a345c52\" id=\"u8a345c52\">求最长的子串</span></h2><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22function%20noRepeatMaxStr(s)%20%7B%5Cn%20%20let%20subStr%20%3D%20''%5Cn%20%20let%20maxLength%20%3D%20subStr.length%5Cn%20%20let%20ans%20%3D%20%5B%5D%5Cn%20%20for%20(let%20i%20%3D%200%3B%20i%20%3C%20s.length%3B%20i%2B%2B)%20%7B%5Cn%20%20%20%20let%20idx%20%3D%20subStr.indexOf(s%5Bi%5D)%5Cn%20%20%20%20if%20(idx%20%3D%3D%3D%20-1)%20%7B%5Cn%20%20%20%20%20%20subStr%20%2B%3D%20s%5Bi%5D%5Cn%20%20%20%20%7D%20else%20%7B%5Cn%20%20%20%20%20%20subStr%20%3D%20subStr.substring(idx%20%2B%201)%20%2B%20s%5Bi%5D%5Cn%20%20%20%20%7D%5Cn%20%20%20%20maxLength%20%3D%20maxLength%20%3E%20subStr.length%20%3F%20maxLength%20%3A%20subStr.length%5Cn%20%20%20%20if%20(ans.indexOf(subStr)%20%3D%3D%3D%20-1)%20%7B%5Cn%20%20%20%20%20%20ans.push(subStr)%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%20%20return%20ans.filter(val%20%3D%3E%20val.length%20%3D%3D%3D%20maxLength)%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22I9UG7%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card>",
  "body_draft_lake": "",
  "public": 0,
  "status": 1,
  "view_status": 0,
  "read_status": 1,
  "likes_count": 0,
  "comments_count": 0,
  "content_updated_at": "2022-06-27T14:03:59.000Z",
  "deleted_at": null,
  "created_at": "2022-06-27T14:02:43.000Z",
  "updated_at": "2022-06-27T14:03:59.000Z",
  "published_at": "2022-06-27T14:03:59.000Z",
  "first_published_at": "2022-06-27T14:03:59.283Z",
  "word_count": 142,
  "cover": null,
  "description": "求最长子串长度function noRepeatMaxStr(s) {     let subStr = ''     let maxLength = subStr.length     for (let i = 0; i < s.length; i++) {         let idx ...",
  "custom_description": null,
  "hits": 0,
  "_serializer": "v2.doc_detail"
}