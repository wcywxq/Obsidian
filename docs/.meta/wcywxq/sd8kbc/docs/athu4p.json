{
  "id": 72212408,
  "slug": "athu4p",
  "title": "文本中识别敏感词、表情包、链接、数字、字母并高亮",
  "book_id": 26225252,
  "book": {
    "id": 26225252,
    "type": "Book",
    "slug": "sd8kbc",
    "name": "笔试 written test",
    "user_id": 732231,
    "description": "笔试相关题目\n1. 原生 API 实现\n2. 业务场景相关问题\n3. LeetCode 算法相关问题",
    "creator_id": 732231,
    "public": 0,
    "items_count": 74,
    "likes_count": 0,
    "watches_count": 1,
    "content_updated_at": "2023-11-11T18:15:38.713Z",
    "updated_at": "2023-11-11T18:15:39.000Z",
    "created_at": "2022-04-04T11:34:53.000Z",
    "namespace": "wcywxq/sd8kbc",
    "user": {
      "id": 732231,
      "type": "User",
      "login": "wcywxq",
      "name": "magic",
      "description": null,
      "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/732231/1606968271774-avatar/886ad88b-d2cc-4c9e-a674-f70eb51a679c.png",
      "books_count": 18,
      "public_books_count": 0,
      "followers_count": 0,
      "following_count": 0,
      "created_at": "2020-01-08T14:21:31.000Z",
      "updated_at": "2023-11-13T09:32:35.000Z",
      "_serializer": "v2.user"
    },
    "_serializer": "v2.book"
  },
  "user_id": 732231,
  "creator": {
    "id": 732231,
    "type": "User",
    "login": "wcywxq",
    "name": "magic",
    "description": null,
    "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/732231/1606968271774-avatar/886ad88b-d2cc-4c9e-a674-f70eb51a679c.png",
    "books_count": 18,
    "public_books_count": 0,
    "followers_count": 0,
    "following_count": 0,
    "created_at": "2020-01-08T14:21:31.000Z",
    "updated_at": "2023-11-13T09:32:35.000Z",
    "_serializer": "v2.user"
  },
  "format": "lake",
  "body": "```javascript\n// 匹配等级，从左向右依次降低\nvar levels = [\"link\", \"emoji\", \"joke\", \"numberalphabet\"];\n// 对应规则下的正则，样式和渲染内容\nvar rulesMap = {\n  link: {\n    tag: \"a\",\n    regex: /(((ht|f)tps?):\\/\\/)+[\\w-]+(\\.[\\w-]+)+([\\w.,@?^=%&:;/~+#-]*[\\w@?^=%&;/~+#-])?/,\n    regexAttribute: \"gi\",\n    attr: {\n      target: \"_blank\",\n      href: content => content\n    }\n  },\n  emoji: {\n    tag: \"img\",\n    regex: /\\[.*?\\]/,\n    regexAttribute: \"g\",\n    single: true,\n    attr: {\n      style: \"width: 25px; height: 25px\",\n      src: content => content || \"\",\n      alt: \"\"\n    }\n  },\n  joke: {\n    tag: \"span\",\n    regex: \"\",\n    regexAttribute: \"g\",\n    attr: {\n      style: \"color: #ff0; background-color: #f00\"\n    }\n  },\n  numberalphabet: {\n    tag: \"span\",\n    regex: /[a-zA-Z0-9]/,\n    regexAttribute: \"g\",\n    attr: {\n      style: \"color: #ff0; background-color: #f00\"\n    }\n  }\n};\n\nfunction isFunction(val) {\n  return Object.prototype.toString.call(val) === \"[object Function]\";\n}\n\nfunction isObject(val) {\n  return Object.prototype.toString.call(val) === \"[object Object]\";\n}\n\nfunction isArray(val) {\n  return Object.prototype.toString.call(val) === \"[object Array]\";\n}\n\nfunction isString(val) {\n  return Object.prototype.toString.call(val) === \"[object String]\";\n}\n\n/**\n * 生成标签内容\n * @param {*} type\n * @param {*} content\n */\nfunction renderHtmlTag(type, content) {\n  var { tag, single, attr } = rulesMap[type];\n  var attributesArr = Object.entries(attr).map(([key, value]) => {\n    if (isFunction(value)) {\n      return `${key}=\"${value()}\"`;\n    } else {\n      return `${key}=\"${value}\"`;\n    }\n  });\n\n  return single ? `<${tag} ${attributesArr.join(\" \")} />` : `<${tag} ${attributesArr.join(\" \")}>${content}</${tag}>`;\n}\n\n/**\n * @function\n * @description 获取高亮内容\n * @param content 内容\n * @param jokeMatchWords 敏感词数组\n */\nfunction getHighlight(content = [], jokeMatchWords) {\n  var renderArray = [content];\n  // 敏感词去重 + 排序\n  var noRepeatJokeMatchWords = Array.from(new Set(jokeMatchWords)).sort((a, b) => b.length - a.length);\n  // 生成正确匹配规则下的带有类型的正则匹配规则\n  var regExpArrWithType = getFlatRegExpArr(levels, noRepeatJokeMatchWords);\n  // 根据匹配规则生成对应匹配到的内容\n  regExpArrWithType.forEach(({ type, regExp }) => {\n    renderArray = recursiveSplitContent(type, regExp, renderArray);\n  });\n  var renderHtml = this.renderHtmlByJudgeType(renderArray, \"\");\n\n  return renderHtml;\n}\n\n/**\n * 根据类型将 html 结构进行拼接\n * @param {*} renderContent\n * @param {*} htmlString\n */\nfunction renderHtmlByJudgeType(renderContent, htmlString) {\n  if (isArray(renderContent)) {\n    renderContent.forEach(item => {\n      htmlString += renderHtmlByJudgeType(item, \"\");\n    });\n  } else if (isObject(renderContent)) {\n    var { type, content } = renderContent;\n    htmlString += renderHtmlTag(type, content);\n  } else if (isString(renderContent)) {\n    htmlString += renderContent;\n  }\n  return htmlString;\n}\n\n/**\n * 递归分割内容\n * @param {*} type\n * @param {*} regExp\n * @param {*} renderContent\n */\nfunction recursiveSplitContent(type, regExp, renderContent) {\n  if (isArray(renderContent)) {\n    renderContent = renderContent.map(item => recursiveSplitContent(type, regExp, item));\n  } else if (isString(renderContent)) {\n    var findWords = renderContent.match(regExp);\n    if (findWords) {\n      // findWords 去重\n      findWords = Array.from(new Set(findWords));\n      var nextRoundContentArray = [];\n      findWords.forEach(word => {\n        if (nextRoundContentArray.length) {\n          nextRoundContentArray = nextRoundContentArray.map(item => recursiveSplitContent(type, word, item));\n        } else {\n          var currentSplitArray = renderContent.split(word);\n          currentSplitArray.forEach((item, index) => {\n            if (index !== 0) {\n              nextRoundContentArray.push({ type, content: word });\n            }\n            nextRoundContentArray.push(item);\n          });\n        }\n      });\n      renderContent = nextRoundContentArray;\n    }\n  }\n  return renderContent;\n}\n\n/**\n * 扁平化后的一维带有类型的正则匹配数组\n * @param {*} levels\n * @param {*} jokeMatchWords\n */\nfunction getFlatRegExpArr(levels, jokeMatchWords) {\n  var arr = levels.map(level => ({ type: level, regExp: getRegExpRoundJokeArr(level, jokeMatchWords) }));\n  return arr\n    .map(({ type, regExp }) => {\n      return regExp.map(item => ({ type, regExp: item }));\n    })\n    .flat(Infinity);\n}\n\n/**\n * 生成包含敏感词的匹配规则数组\n * @param {*} type\n * @param {*} jokeMatchWords\n */\nfunction getRegExpRoundJokeArr(type, jokeMatchWords) {\n  var { regex, regexAttribute } = rulesMap[type],\n    regExpArray = [];\n  if (type === \"joke\") {\n    jokeMatchWords.forEach(word => {\n      regExpArray.push(new RegExp(word, regexAttribute));\n    });\n  } else {\n    regExpArray.push(new RegExp(regex, regexAttribute));\n  }\n  return regExpArray;\n}\n\n// ========== 测试 ==========\nvar jokeMatchWords = [\"共产党\", \"习近平\", \"习近平的1\", \"嘻嘻\", \"哈哈\", \"色情\"];\nvar text = \"https://www.google.com共产党的内容有习近平1231真的习近平https://www.google.com3你妹的习近平的1234sd2情['沮丧']的https://www.baidu.com图片4124色情的人还有aab色bccdd嘻嘻和span>哈哈哈https://www.google.com\";\ndocument.querySelector(\"#highlight\").innerHTML = getHighlight(text, jokeMatchWords);\n```\n",
  "body_draft": "",
  "body_html": "<!doctype html><pre data-lang=\"javascript\"><code>// 匹配等级，从左向右依次降低\nvar levels = [&quot;link&quot;, &quot;emoji&quot;, &quot;joke&quot;, &quot;numberalphabet&quot;];\n// 对应规则下的正则，样式和渲染内容\nvar rulesMap = {\n  link: {\n    tag: &quot;a&quot;,\n    regex: /(((ht|f)tps?):\\/\\/)+[\\w-]+(\\.[\\w-]+)+([\\w.,@?^=%&amp;:;/~+#-]*[\\w@?^=%&amp;;/~+#-])?/,\n    regexAttribute: &quot;gi&quot;,\n    attr: {\n      target: &quot;_blank&quot;,\n      href: content =&gt; content\n    }\n  },\n  emoji: {\n    tag: &quot;img&quot;,\n    regex: /\\[.*?\\]/,\n    regexAttribute: &quot;g&quot;,\n    single: true,\n    attr: {\n      style: &quot;width: 25px; height: 25px&quot;,\n      src: content =&gt; content || &quot;&quot;,\n      alt: &quot;&quot;\n    }\n  },\n  joke: {\n    tag: &quot;span&quot;,\n    regex: &quot;&quot;,\n    regexAttribute: &quot;g&quot;,\n    attr: {\n      style: &quot;color: #ff0; background-color: #f00&quot;\n    }\n  },\n  numberalphabet: {\n    tag: &quot;span&quot;,\n    regex: /[a-zA-Z0-9]/,\n    regexAttribute: &quot;g&quot;,\n    attr: {\n      style: &quot;color: #ff0; background-color: #f00&quot;\n    }\n  }\n};\n\nfunction isFunction(val) {\n  return Object.prototype.toString.call(val) === &quot;[object Function]&quot;;\n}\n\nfunction isObject(val) {\n  return Object.prototype.toString.call(val) === &quot;[object Object]&quot;;\n}\n\nfunction isArray(val) {\n  return Object.prototype.toString.call(val) === &quot;[object Array]&quot;;\n}\n\nfunction isString(val) {\n  return Object.prototype.toString.call(val) === &quot;[object String]&quot;;\n}\n\n/**\n * 生成标签内容\n * @param {*} type\n * @param {*} content\n */\nfunction renderHtmlTag(type, content) {\n  var { tag, single, attr } = rulesMap[type];\n  var attributesArr = Object.entries(attr).map(([key, value]) =&gt; {\n    if (isFunction(value)) {\n      return `${key}=&quot;${value()}&quot;`;\n    } else {\n      return `${key}=&quot;${value}&quot;`;\n    }\n  });\n\n  return single ? `&lt;${tag} ${attributesArr.join(&quot; &quot;)} /&gt;` : `&lt;${tag} ${attributesArr.join(&quot; &quot;)}&gt;${content}&lt;/${tag}&gt;`;\n}\n\n/**\n * @function\n * @description 获取高亮内容\n * @param content 内容\n * @param jokeMatchWords 敏感词数组\n */\nfunction getHighlight(content = [], jokeMatchWords) {\n  var renderArray = [content];\n  // 敏感词去重 + 排序\n  var noRepeatJokeMatchWords = Array.from(new Set(jokeMatchWords)).sort((a, b) =&gt; b.length - a.length);\n  // 生成正确匹配规则下的带有类型的正则匹配规则\n  var regExpArrWithType = getFlatRegExpArr(levels, noRepeatJokeMatchWords);\n  // 根据匹配规则生成对应匹配到的内容\n  regExpArrWithType.forEach(({ type, regExp }) =&gt; {\n    renderArray = recursiveSplitContent(type, regExp, renderArray);\n  });\n  var renderHtml = this.renderHtmlByJudgeType(renderArray, &quot;&quot;);\n\n  return renderHtml;\n}\n\n/**\n * 根据类型将 html 结构进行拼接\n * @param {*} renderContent\n * @param {*} htmlString\n */\nfunction renderHtmlByJudgeType(renderContent, htmlString) {\n  if (isArray(renderContent)) {\n    renderContent.forEach(item =&gt; {\n      htmlString += renderHtmlByJudgeType(item, &quot;&quot;);\n    });\n  } else if (isObject(renderContent)) {\n    var { type, content } = renderContent;\n    htmlString += renderHtmlTag(type, content);\n  } else if (isString(renderContent)) {\n    htmlString += renderContent;\n  }\n  return htmlString;\n}\n\n/**\n * 递归分割内容\n * @param {*} type\n * @param {*} regExp\n * @param {*} renderContent\n */\nfunction recursiveSplitContent(type, regExp, renderContent) {\n  if (isArray(renderContent)) {\n    renderContent = renderContent.map(item =&gt; recursiveSplitContent(type, regExp, item));\n  } else if (isString(renderContent)) {\n    var findWords = renderContent.match(regExp);\n    if (findWords) {\n      // findWords 去重\n      findWords = Array.from(new Set(findWords));\n      var nextRoundContentArray = [];\n      findWords.forEach(word =&gt; {\n        if (nextRoundContentArray.length) {\n          nextRoundContentArray = nextRoundContentArray.map(item =&gt; recursiveSplitContent(type, word, item));\n        } else {\n          var currentSplitArray = renderContent.split(word);\n          currentSplitArray.forEach((item, index) =&gt; {\n            if (index !== 0) {\n              nextRoundContentArray.push({ type, content: word });\n            }\n            nextRoundContentArray.push(item);\n          });\n        }\n      });\n      renderContent = nextRoundContentArray;\n    }\n  }\n  return renderContent;\n}\n\n/**\n * 扁平化后的一维带有类型的正则匹配数组\n * @param {*} levels\n * @param {*} jokeMatchWords\n */\nfunction getFlatRegExpArr(levels, jokeMatchWords) {\n  var arr = levels.map(level =&gt; ({ type: level, regExp: getRegExpRoundJokeArr(level, jokeMatchWords) }));\n  return arr\n    .map(({ type, regExp }) =&gt; {\n      return regExp.map(item =&gt; ({ type, regExp: item }));\n    })\n    .flat(Infinity);\n}\n\n/**\n * 生成包含敏感词的匹配规则数组\n * @param {*} type\n * @param {*} jokeMatchWords\n */\nfunction getRegExpRoundJokeArr(type, jokeMatchWords) {\n  var { regex, regexAttribute } = rulesMap[type],\n    regExpArray = [];\n  if (type === &quot;joke&quot;) {\n    jokeMatchWords.forEach(word =&gt; {\n      regExpArray.push(new RegExp(word, regexAttribute));\n    });\n  } else {\n    regExpArray.push(new RegExp(regex, regexAttribute));\n  }\n  return regExpArray;\n}\n\n// ========== 测试 ==========\nvar jokeMatchWords = [&quot;共产党&quot;, &quot;习近平&quot;, &quot;习近平的1&quot;, &quot;嘻嘻&quot;, &quot;哈哈&quot;, &quot;色情&quot;];\nvar text = &quot;https://www.google.com共产党的内容有习近平1231真的习近平https://www.google.com3你妹的习近平的1234sd2情['沮丧']的https://www.baidu.com图片4124色情的人还有aab色bccdd嘻嘻和span&gt;哈哈哈https://www.google.com&quot;;\ndocument.querySelector(&quot;#highlight&quot;).innerHTML = getHighlight(text, jokeMatchWords);</code></pre>",
  "body_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"viewport\" content=\"adapt\" /><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%20%E5%8C%B9%E9%85%8D%E7%AD%89%E7%BA%A7%EF%BC%8C%E4%BB%8E%E5%B7%A6%E5%90%91%E5%8F%B3%E4%BE%9D%E6%AC%A1%E9%99%8D%E4%BD%8E%5Cnvar%20levels%20%3D%20%5B%5C%22link%5C%22%2C%20%5C%22emoji%5C%22%2C%20%5C%22joke%5C%22%2C%20%5C%22numberalphabet%5C%22%5D%3B%5Cn%2F%2F%20%E5%AF%B9%E5%BA%94%E8%A7%84%E5%88%99%E4%B8%8B%E7%9A%84%E6%AD%A3%E5%88%99%EF%BC%8C%E6%A0%B7%E5%BC%8F%E5%92%8C%E6%B8%B2%E6%9F%93%E5%86%85%E5%AE%B9%5Cnvar%20rulesMap%20%3D%20%7B%5Cn%20%20link%3A%20%7B%5Cn%20%20%20%20tag%3A%20%5C%22a%5C%22%2C%5Cn%20%20%20%20regex%3A%20%2F(((ht%7Cf)tps%3F)%3A%5C%5C%2F%5C%5C%2F)%2B%5B%5C%5Cw-%5D%2B(%5C%5C.%5B%5C%5Cw-%5D%2B)%2B(%5B%5C%5Cw.%2C%40%3F%5E%3D%25%26%3A%3B%2F~%2B%23-%5D*%5B%5C%5Cw%40%3F%5E%3D%25%26%3B%2F~%2B%23-%5D)%3F%2F%2C%5Cn%20%20%20%20regexAttribute%3A%20%5C%22gi%5C%22%2C%5Cn%20%20%20%20attr%3A%20%7B%5Cn%20%20%20%20%20%20target%3A%20%5C%22_blank%5C%22%2C%5Cn%20%20%20%20%20%20href%3A%20content%20%3D%3E%20content%5Cn%20%20%20%20%7D%5Cn%20%20%7D%2C%5Cn%20%20emoji%3A%20%7B%5Cn%20%20%20%20tag%3A%20%5C%22img%5C%22%2C%5Cn%20%20%20%20regex%3A%20%2F%5C%5C%5B.*%3F%5C%5C%5D%2F%2C%5Cn%20%20%20%20regexAttribute%3A%20%5C%22g%5C%22%2C%5Cn%20%20%20%20single%3A%20true%2C%5Cn%20%20%20%20attr%3A%20%7B%5Cn%20%20%20%20%20%20style%3A%20%5C%22width%3A%2025px%3B%20height%3A%2025px%5C%22%2C%5Cn%20%20%20%20%20%20src%3A%20content%20%3D%3E%20content%20%7C%7C%20%5C%22%5C%22%2C%5Cn%20%20%20%20%20%20alt%3A%20%5C%22%5C%22%5Cn%20%20%20%20%7D%5Cn%20%20%7D%2C%5Cn%20%20joke%3A%20%7B%5Cn%20%20%20%20tag%3A%20%5C%22span%5C%22%2C%5Cn%20%20%20%20regex%3A%20%5C%22%5C%22%2C%5Cn%20%20%20%20regexAttribute%3A%20%5C%22g%5C%22%2C%5Cn%20%20%20%20attr%3A%20%7B%5Cn%20%20%20%20%20%20style%3A%20%5C%22color%3A%20%23ff0%3B%20background-color%3A%20%23f00%5C%22%5Cn%20%20%20%20%7D%5Cn%20%20%7D%2C%5Cn%20%20numberalphabet%3A%20%7B%5Cn%20%20%20%20tag%3A%20%5C%22span%5C%22%2C%5Cn%20%20%20%20regex%3A%20%2F%5Ba-zA-Z0-9%5D%2F%2C%5Cn%20%20%20%20regexAttribute%3A%20%5C%22g%5C%22%2C%5Cn%20%20%20%20attr%3A%20%7B%5Cn%20%20%20%20%20%20style%3A%20%5C%22color%3A%20%23ff0%3B%20background-color%3A%20%23f00%5C%22%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%7D%3B%5Cn%5Cnfunction%20isFunction(val)%20%7B%5Cn%20%20return%20Object.prototype.toString.call(val)%20%3D%3D%3D%20%5C%22%5Bobject%20Function%5D%5C%22%3B%5Cn%7D%5Cn%5Cnfunction%20isObject(val)%20%7B%5Cn%20%20return%20Object.prototype.toString.call(val)%20%3D%3D%3D%20%5C%22%5Bobject%20Object%5D%5C%22%3B%5Cn%7D%5Cn%5Cnfunction%20isArray(val)%20%7B%5Cn%20%20return%20Object.prototype.toString.call(val)%20%3D%3D%3D%20%5C%22%5Bobject%20Array%5D%5C%22%3B%5Cn%7D%5Cn%5Cnfunction%20isString(val)%20%7B%5Cn%20%20return%20Object.prototype.toString.call(val)%20%3D%3D%3D%20%5C%22%5Bobject%20String%5D%5C%22%3B%5Cn%7D%5Cn%5Cn%2F**%5Cn%20*%20%E7%94%9F%E6%88%90%E6%A0%87%E7%AD%BE%E5%86%85%E5%AE%B9%5Cn%20*%20%40param%20%7B*%7D%20type%5Cn%20*%20%40param%20%7B*%7D%20content%5Cn%20*%2F%5Cnfunction%20renderHtmlTag(type%2C%20content)%20%7B%5Cn%20%20var%20%7B%20tag%2C%20single%2C%20attr%20%7D%20%3D%20rulesMap%5Btype%5D%3B%5Cn%20%20var%20attributesArr%20%3D%20Object.entries(attr).map((%5Bkey%2C%20value%5D)%20%3D%3E%20%7B%5Cn%20%20%20%20if%20(isFunction(value))%20%7B%5Cn%20%20%20%20%20%20return%20%60%24%7Bkey%7D%3D%5C%22%24%7Bvalue()%7D%5C%22%60%3B%5Cn%20%20%20%20%7D%20else%20%7B%5Cn%20%20%20%20%20%20return%20%60%24%7Bkey%7D%3D%5C%22%24%7Bvalue%7D%5C%22%60%3B%5Cn%20%20%20%20%7D%5Cn%20%20%7D)%3B%5Cn%5Cn%20%20return%20single%20%3F%20%60%3C%24%7Btag%7D%20%24%7BattributesArr.join(%5C%22%20%5C%22)%7D%20%2F%3E%60%20%3A%20%60%3C%24%7Btag%7D%20%24%7BattributesArr.join(%5C%22%20%5C%22)%7D%3E%24%7Bcontent%7D%3C%2F%24%7Btag%7D%3E%60%3B%5Cn%7D%5Cn%5Cn%2F**%5Cn%20*%20%40function%5Cn%20*%20%40description%20%E8%8E%B7%E5%8F%96%E9%AB%98%E4%BA%AE%E5%86%85%E5%AE%B9%5Cn%20*%20%40param%20content%20%E5%86%85%E5%AE%B9%5Cn%20*%20%40param%20jokeMatchWords%20%E6%95%8F%E6%84%9F%E8%AF%8D%E6%95%B0%E7%BB%84%5Cn%20*%2F%5Cnfunction%20getHighlight(content%20%3D%20%5B%5D%2C%20jokeMatchWords)%20%7B%5Cn%20%20var%20renderArray%20%3D%20%5Bcontent%5D%3B%5Cn%20%20%2F%2F%20%E6%95%8F%E6%84%9F%E8%AF%8D%E5%8E%BB%E9%87%8D%20%2B%20%E6%8E%92%E5%BA%8F%5Cn%20%20var%20noRepeatJokeMatchWords%20%3D%20Array.from(new%20Set(jokeMatchWords)).sort((a%2C%20b)%20%3D%3E%20b.length%20-%20a.length)%3B%5Cn%20%20%2F%2F%20%E7%94%9F%E6%88%90%E6%AD%A3%E7%A1%AE%E5%8C%B9%E9%85%8D%E8%A7%84%E5%88%99%E4%B8%8B%E7%9A%84%E5%B8%A6%E6%9C%89%E7%B1%BB%E5%9E%8B%E7%9A%84%E6%AD%A3%E5%88%99%E5%8C%B9%E9%85%8D%E8%A7%84%E5%88%99%5Cn%20%20var%20regExpArrWithType%20%3D%20getFlatRegExpArr(levels%2C%20noRepeatJokeMatchWords)%3B%5Cn%20%20%2F%2F%20%E6%A0%B9%E6%8D%AE%E5%8C%B9%E9%85%8D%E8%A7%84%E5%88%99%E7%94%9F%E6%88%90%E5%AF%B9%E5%BA%94%E5%8C%B9%E9%85%8D%E5%88%B0%E7%9A%84%E5%86%85%E5%AE%B9%5Cn%20%20regExpArrWithType.forEach((%7B%20type%2C%20regExp%20%7D)%20%3D%3E%20%7B%5Cn%20%20%20%20renderArray%20%3D%20recursiveSplitContent(type%2C%20regExp%2C%20renderArray)%3B%5Cn%20%20%7D)%3B%5Cn%20%20var%20renderHtml%20%3D%20this.renderHtmlByJudgeType(renderArray%2C%20%5C%22%5C%22)%3B%5Cn%5Cn%20%20return%20renderHtml%3B%5Cn%7D%5Cn%5Cn%2F**%5Cn%20*%20%E6%A0%B9%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%B0%86%20html%20%E7%BB%93%E6%9E%84%E8%BF%9B%E8%A1%8C%E6%8B%BC%E6%8E%A5%5Cn%20*%20%40param%20%7B*%7D%20renderContent%5Cn%20*%20%40param%20%7B*%7D%20htmlString%5Cn%20*%2F%5Cnfunction%20renderHtmlByJudgeType(renderContent%2C%20htmlString)%20%7B%5Cn%20%20if%20(isArray(renderContent))%20%7B%5Cn%20%20%20%20renderContent.forEach(item%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20htmlString%20%2B%3D%20renderHtmlByJudgeType(item%2C%20%5C%22%5C%22)%3B%5Cn%20%20%20%20%7D)%3B%5Cn%20%20%7D%20else%20if%20(isObject(renderContent))%20%7B%5Cn%20%20%20%20var%20%7B%20type%2C%20content%20%7D%20%3D%20renderContent%3B%5Cn%20%20%20%20htmlString%20%2B%3D%20renderHtmlTag(type%2C%20content)%3B%5Cn%20%20%7D%20else%20if%20(isString(renderContent))%20%7B%5Cn%20%20%20%20htmlString%20%2B%3D%20renderContent%3B%5Cn%20%20%7D%5Cn%20%20return%20htmlString%3B%5Cn%7D%5Cn%5Cn%2F**%5Cn%20*%20%E9%80%92%E5%BD%92%E5%88%86%E5%89%B2%E5%86%85%E5%AE%B9%5Cn%20*%20%40param%20%7B*%7D%20type%5Cn%20*%20%40param%20%7B*%7D%20regExp%5Cn%20*%20%40param%20%7B*%7D%20renderContent%5Cn%20*%2F%5Cnfunction%20recursiveSplitContent(type%2C%20regExp%2C%20renderContent)%20%7B%5Cn%20%20if%20(isArray(renderContent))%20%7B%5Cn%20%20%20%20renderContent%20%3D%20renderContent.map(item%20%3D%3E%20recursiveSplitContent(type%2C%20regExp%2C%20item))%3B%5Cn%20%20%7D%20else%20if%20(isString(renderContent))%20%7B%5Cn%20%20%20%20var%20findWords%20%3D%20renderContent.match(regExp)%3B%5Cn%20%20%20%20if%20(findWords)%20%7B%5Cn%20%20%20%20%20%20%2F%2F%20findWords%20%E5%8E%BB%E9%87%8D%5Cn%20%20%20%20%20%20findWords%20%3D%20Array.from(new%20Set(findWords))%3B%5Cn%20%20%20%20%20%20var%20nextRoundContentArray%20%3D%20%5B%5D%3B%5Cn%20%20%20%20%20%20findWords.forEach(word%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20%20%20if%20(nextRoundContentArray.length)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20nextRoundContentArray%20%3D%20nextRoundContentArray.map(item%20%3D%3E%20recursiveSplitContent(type%2C%20word%2C%20item))%3B%5Cn%20%20%20%20%20%20%20%20%7D%20else%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20var%20currentSplitArray%20%3D%20renderContent.split(word)%3B%5Cn%20%20%20%20%20%20%20%20%20%20currentSplitArray.forEach((item%2C%20index)%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20if%20(index%20!%3D%3D%200)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20nextRoundContentArray.push(%7B%20type%2C%20content%3A%20word%20%7D)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%20%20%20%20nextRoundContentArray.push(item)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%7D)%3B%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%7D)%3B%5Cn%20%20%20%20%20%20renderContent%20%3D%20nextRoundContentArray%3B%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%20%20return%20renderContent%3B%5Cn%7D%5Cn%5Cn%2F**%5Cn%20*%20%E6%89%81%E5%B9%B3%E5%8C%96%E5%90%8E%E7%9A%84%E4%B8%80%E7%BB%B4%E5%B8%A6%E6%9C%89%E7%B1%BB%E5%9E%8B%E7%9A%84%E6%AD%A3%E5%88%99%E5%8C%B9%E9%85%8D%E6%95%B0%E7%BB%84%5Cn%20*%20%40param%20%7B*%7D%20levels%5Cn%20*%20%40param%20%7B*%7D%20jokeMatchWords%5Cn%20*%2F%5Cnfunction%20getFlatRegExpArr(levels%2C%20jokeMatchWords)%20%7B%5Cn%20%20var%20arr%20%3D%20levels.map(level%20%3D%3E%20(%7B%20type%3A%20level%2C%20regExp%3A%20getRegExpRoundJokeArr(level%2C%20jokeMatchWords)%20%7D))%3B%5Cn%20%20return%20arr%5Cn%20%20%20%20.map((%7B%20type%2C%20regExp%20%7D)%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20return%20regExp.map(item%20%3D%3E%20(%7B%20type%2C%20regExp%3A%20item%20%7D))%3B%5Cn%20%20%20%20%7D)%5Cn%20%20%20%20.flat(Infinity)%3B%5Cn%7D%5Cn%5Cn%2F**%5Cn%20*%20%E7%94%9F%E6%88%90%E5%8C%85%E5%90%AB%E6%95%8F%E6%84%9F%E8%AF%8D%E7%9A%84%E5%8C%B9%E9%85%8D%E8%A7%84%E5%88%99%E6%95%B0%E7%BB%84%5Cn%20*%20%40param%20%7B*%7D%20type%5Cn%20*%20%40param%20%7B*%7D%20jokeMatchWords%5Cn%20*%2F%5Cnfunction%20getRegExpRoundJokeArr(type%2C%20jokeMatchWords)%20%7B%5Cn%20%20var%20%7B%20regex%2C%20regexAttribute%20%7D%20%3D%20rulesMap%5Btype%5D%2C%5Cn%20%20%20%20regExpArray%20%3D%20%5B%5D%3B%5Cn%20%20if%20(type%20%3D%3D%3D%20%5C%22joke%5C%22)%20%7B%5Cn%20%20%20%20jokeMatchWords.forEach(word%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20regExpArray.push(new%20RegExp(word%2C%20regexAttribute))%3B%5Cn%20%20%20%20%7D)%3B%5Cn%20%20%7D%20else%20%7B%5Cn%20%20%20%20regExpArray.push(new%20RegExp(regex%2C%20regexAttribute))%3B%5Cn%20%20%7D%5Cn%20%20return%20regExpArray%3B%5Cn%7D%5Cn%5Cn%2F%2F%20%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%20%E6%B5%8B%E8%AF%95%20%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%5Cnvar%20jokeMatchWords%20%3D%20%5B%5C%22%E5%85%B1%E4%BA%A7%E5%85%9A%5C%22%2C%20%5C%22%E4%B9%A0%E8%BF%91%E5%B9%B3%5C%22%2C%20%5C%22%E4%B9%A0%E8%BF%91%E5%B9%B3%E7%9A%841%5C%22%2C%20%5C%22%E5%98%BB%E5%98%BB%5C%22%2C%20%5C%22%E5%93%88%E5%93%88%5C%22%2C%20%5C%22%E8%89%B2%E6%83%85%5C%22%5D%3B%5Cnvar%20text%20%3D%20%5C%22https%3A%2F%2Fwww.google.com%E5%85%B1%E4%BA%A7%E5%85%9A%E7%9A%84%E5%86%85%E5%AE%B9%E6%9C%89%E4%B9%A0%E8%BF%91%E5%B9%B31231%E7%9C%9F%E7%9A%84%E4%B9%A0%E8%BF%91%E5%B9%B3https%3A%2F%2Fwww.google.com3%E4%BD%A0%E5%A6%B9%E7%9A%84%E4%B9%A0%E8%BF%91%E5%B9%B3%E7%9A%841234sd2%E6%83%85%5B'%E6%B2%AE%E4%B8%A7'%5D%E7%9A%84https%3A%2F%2Fwww.baidu.com%E5%9B%BE%E7%89%874124%E8%89%B2%E6%83%85%E7%9A%84%E4%BA%BA%E8%BF%98%E6%9C%89aab%E8%89%B2bccdd%E5%98%BB%E5%98%BB%E5%92%8Cspan%3E%E5%93%88%E5%93%88%E5%93%88https%3A%2F%2Fwww.google.com%5C%22%3B%5Cndocument.querySelector(%5C%22%23highlight%5C%22).innerHTML%20%3D%20getHighlight(text%2C%20jokeMatchWords)%3B%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22WY9Te%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card>",
  "body_draft_lake": "",
  "public": 0,
  "status": 1,
  "view_status": 0,
  "read_status": 1,
  "likes_count": 0,
  "comments_count": 0,
  "content_updated_at": "2022-04-04T11:35:12.000Z",
  "deleted_at": null,
  "created_at": "2022-04-04T11:35:12.000Z",
  "updated_at": "2022-05-10T15:16:49.000Z",
  "published_at": "2022-04-04T11:35:12.000Z",
  "first_published_at": "2022-04-04T11:35:11.831Z",
  "word_count": 730,
  "cover": null,
  "description": "// 匹配等级，从左向右依次降低 var levels = [\"link\", \"emoji\", \"joke\", \"numberalphabet\"]; // 对应规则下的正则，样式和渲染内容 var rulesMap = {   link: {     tag: \"a\",     regex: ...",
  "custom_description": null,
  "hits": 0,
  "_serializer": "v2.doc_detail"
}