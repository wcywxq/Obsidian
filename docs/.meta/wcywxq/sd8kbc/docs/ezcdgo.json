{
  "id": 72212386,
  "slug": "ezcdgo",
  "title": "发布订阅模式",
  "book_id": 26225252,
  "book": {
    "id": 26225252,
    "type": "Book",
    "slug": "sd8kbc",
    "name": "笔试 written test",
    "user_id": 732231,
    "description": "笔试相关题目\n1. 原生 API 实现\n2. 业务场景相关问题\n3. LeetCode 算法相关问题",
    "creator_id": 732231,
    "public": 0,
    "items_count": 74,
    "likes_count": 0,
    "watches_count": 1,
    "content_updated_at": "2023-11-11T18:15:38.713Z",
    "updated_at": "2023-11-11T18:15:39.000Z",
    "created_at": "2022-04-04T11:34:53.000Z",
    "namespace": "wcywxq/sd8kbc",
    "user": {
      "id": 732231,
      "type": "User",
      "login": "wcywxq",
      "name": "magic",
      "description": null,
      "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/732231/1606968271774-avatar/886ad88b-d2cc-4c9e-a674-f70eb51a679c.png",
      "books_count": 18,
      "public_books_count": 0,
      "followers_count": 0,
      "following_count": 0,
      "created_at": "2020-01-08T14:21:31.000Z",
      "updated_at": "2023-11-13T09:32:35.000Z",
      "_serializer": "v2.user"
    },
    "_serializer": "v2.book"
  },
  "user_id": 732231,
  "creator": {
    "id": 732231,
    "type": "User",
    "login": "wcywxq",
    "name": "magic",
    "description": null,
    "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/732231/1606968271774-avatar/886ad88b-d2cc-4c9e-a674-f70eb51a679c.png",
    "books_count": 18,
    "public_books_count": 0,
    "followers_count": 0,
    "following_count": 0,
    "created_at": "2020-01-08T14:21:31.000Z",
    "updated_at": "2023-11-13T09:32:35.000Z",
    "_serializer": "v2.user"
  },
  "format": "lake",
  "body": "```javascript\nclass EventEmitter {\n  constructor(maxListeners = Infinity) {\n    this.events = {}\n    this.maxListeners = maxListeners\n  }\n  on(key, cb) {\n    if (this.events[key]) {\n      this.events[key] = []\n    } else {\n      if (this.maxListeners <= this.events[event].lengh) {\n        return this\n      }\n      this.events[key].push(cb)\n    }\n    return this\n  }\n  off(key, cb) {\n    if (this.events[key]) {\n      this.events[key] = null\n    } else {\n      this.events[key] = this.events[key].filter(fn => fn !== cb)\n    }\n    return this\n  }\n  emit(key, ...args) {\n    this.events[key] && this.events[key].forEach(fn => fn.apply(this, args))\n    return this\n  }\n  once(key, cb) {\n    const fn = (...args) => {\n      this.off(key, cb)\n      cb.apply(this, args)\n    }\n    this.on(key, fn)\n    return this\n  }\n}\n\n// 测试\nconst add = (a, b) => console.log(a, b)\nconst log = (...args) => console.log(...args)\n\nconst event = new EventBus()\nevent.on('add', add)\nevent.on('log', log)\nevent.emit('add', 1, 2) // 3\nevent.emit('log', 'hi') // hi\n\nevent.off('add')\nevent.emit('add', 1, 2) // Error: add event is not registered\n\nevent.once('once', add)\nevent.emit('once', 1, 2) // 3\nevent.emit('once', 1, 2)\nevent.emit('once', 1, 2)\n```\n<a name=\"VwJcq\"></a>\n## 第三方的一些实现\n```javascript\n// 事件管理中心, 用于事件监听, 派发事件\nfunction call(callback, args) {\n\tlet fn = callback(0)\n  let context = callback(1)\n  args = callback[2].concat(args)\n  try {\n    return fn.apply(context, args)\n  } catch (e) {\n  \tsetTimeout(function() {\n    \tthrow e\n    }, 0)\n  }\n}\n\nfunction arrayClone(arr, len) {\n\tlet copy = new Array(len)\n  while (len--) {\n  \tcopy[len] = arr[len]\n  }\n  return copy\n}\n\nfunction emit(type, ...args) {\n\tlet listenerList = this._listenerMap[type]\n  if (!listenerList) return true\n  let len = listenerList.cbs.length\n  let cbs = arrayClone(listenerList.cbs, len)\n  let ret = true\n  for (let index = 0; index < len; index++) {\n  \tif (!cbs[index]) continue\n    ret = call(cbs[index], args) !== false && ret\n  }\n  return !!ret\n}\n\nclass Event {\n\tconstuctor() {\n  \tthis._listenerMap = {}\n  }\n  \n  on(type, fn, context, ...rest) {\n  \tlet listenerList = this._listenerMap[type]\n    if (!!listenerList) {\n    \tthis._listenerMap[type] = listenerList = {\n      \targs: null,\n        cbs: []\n      }\n    }\n    \n    let callback = [fn, context, rest]\n    let args = listenerList.args\n    if (args) {\n    \tcall(callback, args)\n    } else {\n    \tlistenerList.cbs.push(callback)\n    }\n  }\n  \n  once(type, fn, context, ...rest) {\n  \tlet fired = false\n    function magic(...args) {\n    \tthis.un(type, magic)\n      if (!fired) {\n      \tfired = true\n        fn.apply(context, args.concat(rest))\n      }\n    }\n    this.on(type, magic, this)\n  }\n  \n  un(type, fn) {\n  \tlet listenerList = this._listenerMap[type]\n    if (!listenerList) return true\n    if (arguments.length === 1) {\n    \tlistenerList.cbs = []\n    } else {\n    \tlet cbs = listenerList.cbs\n      let count = cbs.length\n      while (count--) {\n      \tif (cbs[count] && cbs[count][0] === fn) {\n        \tcbs.splice(count, 1)\n        }\n      }\n    }\n  }\n  \n  emit(type, args) {\n  \treturn emit.apply(this, arguments)\n  }\n  \n  done(type, ...args) {\n    let listenerList = this._listenerMap[type]\n    if (!listenerList) {\n    \tthis._listenerMap[type] = listenerList = {\n        args: args,\n        cbs: []\n      }\n    }\n    let cbs = listenerList.cbs\n    let count = cbs.length\n    emit.apply(this, arguments)\n    listenerList.args = args\n    listenerList.cbs = cbs.slice(count)\n  }\n  \n  undo(type) {\n  \tlet listenerList = this._listenerMap[type]\n    if (!listenerList) return false\n    listenerList.args = null\n  }\n}\n\nexport default Event\n```\n<a name=\"spQCD\"></a>\n## 第三方的一些实现\n```javascript\nexport class EventEmitter {\n  private _events: Record<string, Array<Function>>;\n\n  constructor() {\n    this._events = Object.create(null);\n  }\n\n  emit(evt: string, ...args: any[]) {\n    if (!this._events[evt]) return false;\n\n    const fns = [...this._events[evt]];\n    fns.forEach((fn) => {\n      fn.apply(this, args);\n    });\n\n    return true;\n  }\n\n  on(evt: string, fn: Function) {\n    if (typeof fn !== \"function\") {\n      throw new TypeError(\"The evet-triggered callback must be a function\");\n    }\n    if (!this._events[evt]) {\n      this._events[evt] = [fn];\n    } else {\n      this._events[evt].push(fn);\n    }\n  }\n\n  once(evt: string, fn: Function) {\n    const execFn = () => {\n      fn.apply(this);\n      this.off(evt, execFn);\n    };\n    this.on(evt, execFn);\n  }\n\n  off(evt: string, fn?: Function) {\n    if (!this._events[evt]) return;\n    if (!fn) {\n      this._events[evt] && (this._events[evt].length = 0);\n    }\n\n    let cb;\n    const cbLen = this._events[evt].length;\n    for (let i = 0; i < cbLen; i++) {\n      cb = this._events[evt][i];\n      if (cb === fn) {\n        this._events[evt].splice(i, 1);\n        break;\n      }\n    }\n  }\n\n  removeAllListeners(evt?: string) {\n    if (evt) {\n      this._events[evt] && (this._events[evt].length = 0);\n    } else {\n      this._events = Object.create(null);\n    }\n  }\n}\n```\n",
  "body_draft": "",
  "body_html": "<!doctype html><pre data-lang=\"javascript\"><code>class EventEmitter {\n  constructor(maxListeners = Infinity) {\n    this.events = {}\n    this.maxListeners = maxListeners\n  }\n  on(key, cb) {\n    if (this.events[key]) {\n      this.events[key] = []\n    } else {\n      if (this.maxListeners &lt;= this.events[event].lengh) {\n        return this\n      }\n      this.events[key].push(cb)\n    }\n    return this\n  }\n  off(key, cb) {\n    if (this.events[key]) {\n      this.events[key] = null\n    } else {\n      this.events[key] = this.events[key].filter(fn =&gt; fn !== cb)\n    }\n    return this\n  }\n  emit(key, ...args) {\n    this.events[key] &amp;&amp; this.events[key].forEach(fn =&gt; fn.apply(this, args))\n    return this\n  }\n  once(key, cb) {\n    const fn = (...args) =&gt; {\n      this.off(key, cb)\n      cb.apply(this, args)\n    }\n    this.on(key, fn)\n    return this\n  }\n}\n\n// 测试\nconst add = (a, b) =&gt; console.log(a, b)\nconst log = (...args) =&gt; console.log(...args)\n\nconst event = new EventBus()\nevent.on('add', add)\nevent.on('log', log)\nevent.emit('add', 1, 2) // 3\nevent.emit('log', 'hi') // hi\n\nevent.off('add')\nevent.emit('add', 1, 2) // Error: add event is not registered\n\nevent.once('once', add)\nevent.emit('once', 1, 2) // 3\nevent.emit('once', 1, 2)\nevent.emit('once', 1, 2)</code></pre><h2 id=\"VwJcq\"><span>第三方的一些实现</span></h2><pre data-lang=\"javascript\"><code>// 事件管理中心, 用于事件监听, 派发事件\nfunction call(callback, args) {\n\tlet fn = callback(0)\n  let context = callback(1)\n  args = callback[2].concat(args)\n  try {\n    return fn.apply(context, args)\n  } catch (e) {\n  \tsetTimeout(function() {\n    \tthrow e\n    }, 0)\n  }\n}\n\nfunction arrayClone(arr, len) {\n\tlet copy = new Array(len)\n  while (len--) {\n  \tcopy[len] = arr[len]\n  }\n  return copy\n}\n\nfunction emit(type, ...args) {\n\tlet listenerList = this._listenerMap[type]\n  if (!listenerList) return true\n  let len = listenerList.cbs.length\n  let cbs = arrayClone(listenerList.cbs, len)\n  let ret = true\n  for (let index = 0; index &lt; len; index++) {\n  \tif (!cbs[index]) continue\n    ret = call(cbs[index], args) !== false &amp;&amp; ret\n  }\n  return !!ret\n}\n\nclass Event {\n\tconstuctor() {\n  \tthis._listenerMap = {}\n  }\n  \n  on(type, fn, context, ...rest) {\n  \tlet listenerList = this._listenerMap[type]\n    if (!!listenerList) {\n    \tthis._listenerMap[type] = listenerList = {\n      \targs: null,\n        cbs: []\n      }\n    }\n    \n    let callback = [fn, context, rest]\n    let args = listenerList.args\n    if (args) {\n    \tcall(callback, args)\n    } else {\n    \tlistenerList.cbs.push(callback)\n    }\n  }\n  \n  once(type, fn, context, ...rest) {\n  \tlet fired = false\n    function magic(...args) {\n    \tthis.un(type, magic)\n      if (!fired) {\n      \tfired = true\n        fn.apply(context, args.concat(rest))\n      }\n    }\n    this.on(type, magic, this)\n  }\n  \n  un(type, fn) {\n  \tlet listenerList = this._listenerMap[type]\n    if (!listenerList) return true\n    if (arguments.length === 1) {\n    \tlistenerList.cbs = []\n    } else {\n    \tlet cbs = listenerList.cbs\n      let count = cbs.length\n      while (count--) {\n      \tif (cbs[count] &amp;&amp; cbs[count][0] === fn) {\n        \tcbs.splice(count, 1)\n        }\n      }\n    }\n  }\n  \n  emit(type, args) {\n  \treturn emit.apply(this, arguments)\n  }\n  \n  done(type, ...args) {\n    let listenerList = this._listenerMap[type]\n    if (!listenerList) {\n    \tthis._listenerMap[type] = listenerList = {\n        args: args,\n        cbs: []\n      }\n    }\n    let cbs = listenerList.cbs\n    let count = cbs.length\n    emit.apply(this, arguments)\n    listenerList.args = args\n    listenerList.cbs = cbs.slice(count)\n  }\n  \n  undo(type) {\n  \tlet listenerList = this._listenerMap[type]\n    if (!listenerList) return false\n    listenerList.args = null\n  }\n}\n\nexport default Event</code></pre><h2 id=\"spQCD\"><span>第三方的一些实现</span></h2><pre data-lang=\"javascript\"><code>export class EventEmitter {\n  private _events: Record&lt;string, Array&lt;Function&gt;&gt;;\n\n  constructor() {\n    this._events = Object.create(null);\n  }\n\n  emit(evt: string, ...args: any[]) {\n    if (!this._events[evt]) return false;\n\n    const fns = [...this._events[evt]];\n    fns.forEach((fn) =&gt; {\n      fn.apply(this, args);\n    });\n\n    return true;\n  }\n\n  on(evt: string, fn: Function) {\n    if (typeof fn !== &quot;function&quot;) {\n      throw new TypeError(&quot;The evet-triggered callback must be a function&quot;);\n    }\n    if (!this._events[evt]) {\n      this._events[evt] = [fn];\n    } else {\n      this._events[evt].push(fn);\n    }\n  }\n\n  once(evt: string, fn: Function) {\n    const execFn = () =&gt; {\n      fn.apply(this);\n      this.off(evt, execFn);\n    };\n    this.on(evt, execFn);\n  }\n\n  off(evt: string, fn?: Function) {\n    if (!this._events[evt]) return;\n    if (!fn) {\n      this._events[evt] &amp;&amp; (this._events[evt].length = 0);\n    }\n\n    let cb;\n    const cbLen = this._events[evt].length;\n    for (let i = 0; i &lt; cbLen; i++) {\n      cb = this._events[evt][i];\n      if (cb === fn) {\n        this._events[evt].splice(i, 1);\n        break;\n      }\n    }\n  }\n\n  removeAllListeners(evt?: string) {\n    if (evt) {\n      this._events[evt] &amp;&amp; (this._events[evt].length = 0);\n    } else {\n      this._events = Object.create(null);\n    }\n  }\n}</code></pre>",
  "body_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"viewport\" content=\"adapt\" /><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22class%20EventEmitter%20%7B%5Cn%20%20constructor(maxListeners%20%3D%20Infinity)%20%7B%5Cn%20%20%20%20this.events%20%3D%20%7B%7D%5Cn%20%20%20%20this.maxListeners%20%3D%20maxListeners%5Cn%20%20%7D%5Cn%20%20on(key%2C%20cb)%20%7B%5Cn%20%20%20%20if%20(this.events%5Bkey%5D)%20%7B%5Cn%20%20%20%20%20%20this.events%5Bkey%5D%20%3D%20%5B%5D%5Cn%20%20%20%20%7D%20else%20%7B%5Cn%20%20%20%20%20%20if%20(this.maxListeners%20%3C%3D%20this.events%5Bevent%5D.lengh)%20%7B%5Cn%20%20%20%20%20%20%20%20return%20this%5Cn%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20this.events%5Bkey%5D.push(cb)%5Cn%20%20%20%20%7D%5Cn%20%20%20%20return%20this%5Cn%20%20%7D%5Cn%20%20off(key%2C%20cb)%20%7B%5Cn%20%20%20%20if%20(this.events%5Bkey%5D)%20%7B%5Cn%20%20%20%20%20%20this.events%5Bkey%5D%20%3D%20null%5Cn%20%20%20%20%7D%20else%20%7B%5Cn%20%20%20%20%20%20this.events%5Bkey%5D%20%3D%20this.events%5Bkey%5D.filter(fn%20%3D%3E%20fn%20!%3D%3D%20cb)%5Cn%20%20%20%20%7D%5Cn%20%20%20%20return%20this%5Cn%20%20%7D%5Cn%20%20emit(key%2C%20...args)%20%7B%5Cn%20%20%20%20this.events%5Bkey%5D%20%26%26%20this.events%5Bkey%5D.forEach(fn%20%3D%3E%20fn.apply(this%2C%20args))%5Cn%20%20%20%20return%20this%5Cn%20%20%7D%5Cn%20%20once(key%2C%20cb)%20%7B%5Cn%20%20%20%20const%20fn%20%3D%20(...args)%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20this.off(key%2C%20cb)%5Cn%20%20%20%20%20%20cb.apply(this%2C%20args)%5Cn%20%20%20%20%7D%5Cn%20%20%20%20this.on(key%2C%20fn)%5Cn%20%20%20%20return%20this%5Cn%20%20%7D%5Cn%7D%5Cn%5Cn%2F%2F%20%E6%B5%8B%E8%AF%95%5Cnconst%20add%20%3D%20(a%2C%20b)%20%3D%3E%20console.log(a%2C%20b)%5Cnconst%20log%20%3D%20(...args)%20%3D%3E%20console.log(...args)%5Cn%5Cnconst%20event%20%3D%20new%20EventBus()%5Cnevent.on('add'%2C%20add)%5Cnevent.on('log'%2C%20log)%5Cnevent.emit('add'%2C%201%2C%202)%20%2F%2F%203%5Cnevent.emit('log'%2C%20'hi')%20%2F%2F%20hi%5Cn%5Cnevent.off('add')%5Cnevent.emit('add'%2C%201%2C%202)%20%2F%2F%20Error%3A%20add%20event%20is%20not%20registered%5Cn%5Cnevent.once('once'%2C%20add)%5Cnevent.emit('once'%2C%201%2C%202)%20%2F%2F%203%5Cnevent.emit('once'%2C%201%2C%202)%5Cnevent.emit('once'%2C%201%2C%202)%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22uKrxX%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h2 data-lake-id=\"VwJcq\" id=\"VwJcq\"><span data-lake-id=\"u1d32ebbc\" id=\"u1d32ebbc\">第三方的一些实现</span></h2><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%20%E4%BA%8B%E4%BB%B6%E7%AE%A1%E7%90%86%E4%B8%AD%E5%BF%83%2C%20%E7%94%A8%E4%BA%8E%E4%BA%8B%E4%BB%B6%E7%9B%91%E5%90%AC%2C%20%E6%B4%BE%E5%8F%91%E4%BA%8B%E4%BB%B6%5Cnfunction%20call(callback%2C%20args)%20%7B%5Cn%5Ctlet%20fn%20%3D%20callback(0)%5Cn%20%20let%20context%20%3D%20callback(1)%5Cn%20%20args%20%3D%20callback%5B2%5D.concat(args)%5Cn%20%20try%20%7B%5Cn%20%20%20%20return%20fn.apply(context%2C%20args)%5Cn%20%20%7D%20catch%20(e)%20%7B%5Cn%20%20%5CtsetTimeout(function()%20%7B%5Cn%20%20%20%20%5Ctthrow%20e%5Cn%20%20%20%20%7D%2C%200)%5Cn%20%20%7D%5Cn%7D%5Cn%5Cnfunction%20arrayClone(arr%2C%20len)%20%7B%5Cn%5Ctlet%20copy%20%3D%20new%20Array(len)%5Cn%20%20while%20(len--)%20%7B%5Cn%20%20%5Ctcopy%5Blen%5D%20%3D%20arr%5Blen%5D%5Cn%20%20%7D%5Cn%20%20return%20copy%5Cn%7D%5Cn%5Cnfunction%20emit(type%2C%20...args)%20%7B%5Cn%5Ctlet%20listenerList%20%3D%20this._listenerMap%5Btype%5D%5Cn%20%20if%20(!listenerList)%20return%20true%5Cn%20%20let%20len%20%3D%20listenerList.cbs.length%5Cn%20%20let%20cbs%20%3D%20arrayClone(listenerList.cbs%2C%20len)%5Cn%20%20let%20ret%20%3D%20true%5Cn%20%20for%20(let%20index%20%3D%200%3B%20index%20%3C%20len%3B%20index%2B%2B)%20%7B%5Cn%20%20%5Ctif%20(!cbs%5Bindex%5D)%20continue%5Cn%20%20%20%20ret%20%3D%20call(cbs%5Bindex%5D%2C%20args)%20!%3D%3D%20false%20%26%26%20ret%5Cn%20%20%7D%5Cn%20%20return%20!!ret%5Cn%7D%5Cn%5Cnclass%20Event%20%7B%5Cn%5Ctconstuctor()%20%7B%5Cn%20%20%5Ctthis._listenerMap%20%3D%20%7B%7D%5Cn%20%20%7D%5Cn%20%20%5Cn%20%20on(type%2C%20fn%2C%20context%2C%20...rest)%20%7B%5Cn%20%20%5Ctlet%20listenerList%20%3D%20this._listenerMap%5Btype%5D%5Cn%20%20%20%20if%20(!!listenerList)%20%7B%5Cn%20%20%20%20%5Ctthis._listenerMap%5Btype%5D%20%3D%20listenerList%20%3D%20%7B%5Cn%20%20%20%20%20%20%5Ctargs%3A%20null%2C%5Cn%20%20%20%20%20%20%20%20cbs%3A%20%5B%5D%5Cn%20%20%20%20%20%20%7D%5Cn%20%20%20%20%7D%5Cn%20%20%20%20%5Cn%20%20%20%20let%20callback%20%3D%20%5Bfn%2C%20context%2C%20rest%5D%5Cn%20%20%20%20let%20args%20%3D%20listenerList.args%5Cn%20%20%20%20if%20(args)%20%7B%5Cn%20%20%20%20%5Ctcall(callback%2C%20args)%5Cn%20%20%20%20%7D%20else%20%7B%5Cn%20%20%20%20%5CtlistenerList.cbs.push(callback)%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%20%20%5Cn%20%20once(type%2C%20fn%2C%20context%2C%20...rest)%20%7B%5Cn%20%20%5Ctlet%20fired%20%3D%20false%5Cn%20%20%20%20function%20magic(...args)%20%7B%5Cn%20%20%20%20%5Ctthis.un(type%2C%20magic)%5Cn%20%20%20%20%20%20if%20(!fired)%20%7B%5Cn%20%20%20%20%20%20%5Ctfired%20%3D%20true%5Cn%20%20%20%20%20%20%20%20fn.apply(context%2C%20args.concat(rest))%5Cn%20%20%20%20%20%20%7D%5Cn%20%20%20%20%7D%5Cn%20%20%20%20this.on(type%2C%20magic%2C%20this)%5Cn%20%20%7D%5Cn%20%20%5Cn%20%20un(type%2C%20fn)%20%7B%5Cn%20%20%5Ctlet%20listenerList%20%3D%20this._listenerMap%5Btype%5D%5Cn%20%20%20%20if%20(!listenerList)%20return%20true%5Cn%20%20%20%20if%20(arguments.length%20%3D%3D%3D%201)%20%7B%5Cn%20%20%20%20%5CtlistenerList.cbs%20%3D%20%5B%5D%5Cn%20%20%20%20%7D%20else%20%7B%5Cn%20%20%20%20%5Ctlet%20cbs%20%3D%20listenerList.cbs%5Cn%20%20%20%20%20%20let%20count%20%3D%20cbs.length%5Cn%20%20%20%20%20%20while%20(count--)%20%7B%5Cn%20%20%20%20%20%20%5Ctif%20(cbs%5Bcount%5D%20%26%26%20cbs%5Bcount%5D%5B0%5D%20%3D%3D%3D%20fn)%20%7B%5Cn%20%20%20%20%20%20%20%20%5Ctcbs.splice(count%2C%201)%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%7D%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%20%20%5Cn%20%20emit(type%2C%20args)%20%7B%5Cn%20%20%5Ctreturn%20emit.apply(this%2C%20arguments)%5Cn%20%20%7D%5Cn%20%20%5Cn%20%20done(type%2C%20...args)%20%7B%5Cn%20%20%20%20let%20listenerList%20%3D%20this._listenerMap%5Btype%5D%5Cn%20%20%20%20if%20(!listenerList)%20%7B%5Cn%20%20%20%20%5Ctthis._listenerMap%5Btype%5D%20%3D%20listenerList%20%3D%20%7B%5Cn%20%20%20%20%20%20%20%20args%3A%20args%2C%5Cn%20%20%20%20%20%20%20%20cbs%3A%20%5B%5D%5Cn%20%20%20%20%20%20%7D%5Cn%20%20%20%20%7D%5Cn%20%20%20%20let%20cbs%20%3D%20listenerList.cbs%5Cn%20%20%20%20let%20count%20%3D%20cbs.length%5Cn%20%20%20%20emit.apply(this%2C%20arguments)%5Cn%20%20%20%20listenerList.args%20%3D%20args%5Cn%20%20%20%20listenerList.cbs%20%3D%20cbs.slice(count)%5Cn%20%20%7D%5Cn%20%20%5Cn%20%20undo(type)%20%7B%5Cn%20%20%5Ctlet%20listenerList%20%3D%20this._listenerMap%5Btype%5D%5Cn%20%20%20%20if%20(!listenerList)%20return%20false%5Cn%20%20%20%20listenerList.args%20%3D%20null%5Cn%20%20%7D%5Cn%7D%5Cn%5Cnexport%20default%20Event%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22PaWS6%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h2 data-lake-id=\"spQCD\" id=\"spQCD\"><span data-lake-id=\"ub3fa69d8\" id=\"ub3fa69d8\">第三方的一些实现</span></h2><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22export%20class%20EventEmitter%20%7B%5Cn%20%20private%20_events%3A%20Record%3Cstring%2C%20Array%3CFunction%3E%3E%3B%5Cn%5Cn%20%20constructor()%20%7B%5Cn%20%20%20%20this._events%20%3D%20Object.create(null)%3B%5Cn%20%20%7D%5Cn%5Cn%20%20emit(evt%3A%20string%2C%20...args%3A%20any%5B%5D)%20%7B%5Cn%20%20%20%20if%20(!this._events%5Bevt%5D)%20return%20false%3B%5Cn%5Cn%20%20%20%20const%20fns%20%3D%20%5B...this._events%5Bevt%5D%5D%3B%5Cn%20%20%20%20fns.forEach((fn)%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20fn.apply(this%2C%20args)%3B%5Cn%20%20%20%20%7D)%3B%5Cn%5Cn%20%20%20%20return%20true%3B%5Cn%20%20%7D%5Cn%5Cn%20%20on(evt%3A%20string%2C%20fn%3A%20Function)%20%7B%5Cn%20%20%20%20if%20(typeof%20fn%20!%3D%3D%20%5C%22function%5C%22)%20%7B%5Cn%20%20%20%20%20%20throw%20new%20TypeError(%5C%22The%20evet-triggered%20callback%20must%20be%20a%20function%5C%22)%3B%5Cn%20%20%20%20%7D%5Cn%20%20%20%20if%20(!this._events%5Bevt%5D)%20%7B%5Cn%20%20%20%20%20%20this._events%5Bevt%5D%20%3D%20%5Bfn%5D%3B%5Cn%20%20%20%20%7D%20else%20%7B%5Cn%20%20%20%20%20%20this._events%5Bevt%5D.push(fn)%3B%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%5Cn%20%20once(evt%3A%20string%2C%20fn%3A%20Function)%20%7B%5Cn%20%20%20%20const%20execFn%20%3D%20()%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20fn.apply(this)%3B%5Cn%20%20%20%20%20%20this.off(evt%2C%20execFn)%3B%5Cn%20%20%20%20%7D%3B%5Cn%20%20%20%20this.on(evt%2C%20execFn)%3B%5Cn%20%20%7D%5Cn%5Cn%20%20off(evt%3A%20string%2C%20fn%3F%3A%20Function)%20%7B%5Cn%20%20%20%20if%20(!this._events%5Bevt%5D)%20return%3B%5Cn%20%20%20%20if%20(!fn)%20%7B%5Cn%20%20%20%20%20%20this._events%5Bevt%5D%20%26%26%20(this._events%5Bevt%5D.length%20%3D%200)%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20let%20cb%3B%5Cn%20%20%20%20const%20cbLen%20%3D%20this._events%5Bevt%5D.length%3B%5Cn%20%20%20%20for%20(let%20i%20%3D%200%3B%20i%20%3C%20cbLen%3B%20i%2B%2B)%20%7B%5Cn%20%20%20%20%20%20cb%20%3D%20this._events%5Bevt%5D%5Bi%5D%3B%5Cn%20%20%20%20%20%20if%20(cb%20%3D%3D%3D%20fn)%20%7B%5Cn%20%20%20%20%20%20%20%20this._events%5Bevt%5D.splice(i%2C%201)%3B%5Cn%20%20%20%20%20%20%20%20break%3B%5Cn%20%20%20%20%20%20%7D%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%5Cn%20%20removeAllListeners(evt%3F%3A%20string)%20%7B%5Cn%20%20%20%20if%20(evt)%20%7B%5Cn%20%20%20%20%20%20this._events%5Bevt%5D%20%26%26%20(this._events%5Bevt%5D.length%20%3D%200)%3B%5Cn%20%20%20%20%7D%20else%20%7B%5Cn%20%20%20%20%20%20this._events%20%3D%20Object.create(null)%3B%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22XbBNL%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card>",
  "body_draft_lake": "",
  "public": 0,
  "status": 1,
  "view_status": 0,
  "read_status": 1,
  "likes_count": 0,
  "comments_count": 0,
  "content_updated_at": "2022-04-04T11:35:06.000Z",
  "deleted_at": null,
  "created_at": "2022-04-04T11:35:06.000Z",
  "updated_at": "2022-05-10T15:16:50.000Z",
  "published_at": "2022-04-04T11:35:06.000Z",
  "first_published_at": "2022-04-04T11:35:06.479Z",
  "word_count": 635,
  "cover": null,
  "description": "class EventEmitter {   constructor(maxListeners = Infinity) {     this.events = {}     this.maxListeners = maxListeners   }   on(key, cb) {     if ...",
  "custom_description": null,
  "hits": 0,
  "_serializer": "v2.doc_detail"
}