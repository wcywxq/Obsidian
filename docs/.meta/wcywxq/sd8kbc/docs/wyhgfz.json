{
  "id": 72212451,
  "slug": "wyhgfz",
  "title": "循环打印红黄绿",
  "book_id": 26225252,
  "book": {
    "id": 26225252,
    "type": "Book",
    "slug": "sd8kbc",
    "name": "笔试 written test",
    "user_id": 732231,
    "description": "笔试相关题目\n1. 原生 API 实现\n2. 业务场景相关问题\n3. LeetCode 算法相关问题",
    "creator_id": 732231,
    "public": 0,
    "items_count": 74,
    "likes_count": 0,
    "watches_count": 1,
    "content_updated_at": "2023-11-11T18:15:38.713Z",
    "updated_at": "2023-11-11T18:15:39.000Z",
    "created_at": "2022-04-04T11:34:53.000Z",
    "namespace": "wcywxq/sd8kbc",
    "user": {
      "id": 732231,
      "type": "User",
      "login": "wcywxq",
      "name": "magic",
      "description": null,
      "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/732231/1606968271774-avatar/886ad88b-d2cc-4c9e-a674-f70eb51a679c.png",
      "books_count": 18,
      "public_books_count": 0,
      "followers_count": 0,
      "following_count": 0,
      "created_at": "2020-01-08T14:21:31.000Z",
      "updated_at": "2023-11-13T09:32:35.000Z",
      "_serializer": "v2.user"
    },
    "_serializer": "v2.book"
  },
  "user_id": 732231,
  "creator": {
    "id": 732231,
    "type": "User",
    "login": "wcywxq",
    "name": "magic",
    "description": null,
    "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/732231/1606968271774-avatar/886ad88b-d2cc-4c9e-a674-f70eb51a679c.png",
    "books_count": 18,
    "public_books_count": 0,
    "followers_count": 0,
    "following_count": 0,
    "created_at": "2020-01-08T14:21:31.000Z",
    "updated_at": "2023-11-13T09:32:35.000Z",
    "_serializer": "v2.user"
  },
  "format": "lake",
  "body": "**红灯 3s 亮一次，绿灯 1s 亮一次，黄灯 2s 亮一次；如何让三个灯不断交替重复亮灯？**\n\n- 三个亮灯函数：\n```javascript\nfunction red() {\n    console.log('red');\n}\nfunction green() {\n    console.log('green');\n}\nfunction yellow() {\n    console.log('yellow');\n}\n```\n<a name=\"Qi4Qi\"></a>\n### callback 实现\n```javascript\nconst task = (timer, light, callback) => {\n    setTimeout(() => {\n        if (light === 'red') {\n            red()\n        }\n        else if (light === 'green') {\n            green()\n        }\n        else if (light === 'yellow') {\n            yellow()\n        }\n        callback()\n    }, timer)\n}\n\nconst step = () => {\n    task(3000, 'red', () => {\n        task(2000, 'green', () => {\n            task(1000, 'yellow', step)\n        })\n    })\n}\nstep()\n```\n<a name=\"jkPJJ\"></a>\n### promise 实现\n```javascript\nconst task = (timer,light) => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (light === 'red') {\n        red()\n      } else if (light === 'green') {\n        green()\n      } else if (light === 'yellow') {\n        yellow()\n      }\n      resolve()\n    }, timer)\n  })\n}\nconst step = () => {\n  task(3000, 'red')\n    .then(() => task(2000, 'green'))\n    .then(() => task(2100, 'yellow'))\n    .then(step)\n}\nstep()\n```\n<a name=\"ADg0b\"></a>\n### async/await 实现\n```javascript\nconst task = (timer,light) => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (light === 'red') {\n        red()\n      } else if (light === 'green') {\n        green()\n      } else if (light === 'yellow') {\n        yellow()\n      }\n      resolve()\n    }, timer)\n  })\n}\nconst step = async () => {\n  await task(3000, 'red')\n  await task(2000, 'green')\n  await task(2100, 'yellow')\n  step()\n}\nstep()\n```\n",
  "body_draft": "",
  "body_html": "<!doctype html><p data-lake-id=\"u2cc43df7\"><strong><span>红灯 3s 亮一次，绿灯 1s 亮一次，黄灯 2s 亮一次；如何让三个灯不断交替重复亮灯？</span></strong></p><p data-lake-id=\"udd974964\"><span>​</span><br /></p><ul><li><span>三个亮灯函数：</span></li></ul><pre data-lang=\"javascript\"><code>function red() {\n    console.log('red');\n}\nfunction green() {\n    console.log('green');\n}\nfunction yellow() {\n    console.log('yellow');\n}</code></pre><h3 id=\"Qi4Qi\"><span>callback 实现</span></h3><pre data-lang=\"javascript\"><code>const task = (timer, light, callback) =&gt; {\n    setTimeout(() =&gt; {\n        if (light === 'red') {\n            red()\n        }\n        else if (light === 'green') {\n            green()\n        }\n        else if (light === 'yellow') {\n            yellow()\n        }\n        callback()\n    }, timer)\n}\n\nconst step = () =&gt; {\n    task(3000, 'red', () =&gt; {\n        task(2000, 'green', () =&gt; {\n            task(1000, 'yellow', step)\n        })\n    })\n}\nstep()</code></pre><h3 id=\"jkPJJ\"><span>promise 实现</span></h3><pre data-lang=\"javascript\"><code>const task = (timer,light) =&gt; {\n  return new Promise((resolve, reject) =&gt; {\n    setTimeout(() =&gt; {\n      if (light === 'red') {\n        red()\n      } else if (light === 'green') {\n        green()\n      } else if (light === 'yellow') {\n        yellow()\n      }\n      resolve()\n    }, timer)\n  })\n}\nconst step = () =&gt; {\n  task(3000, 'red')\n    .then(() =&gt; task(2000, 'green'))\n    .then(() =&gt; task(2100, 'yellow'))\n    .then(step)\n}\nstep()</code></pre><h3 id=\"ADg0b\"><span>async/await 实现</span></h3><pre data-lang=\"javascript\"><code>const task = (timer,light) =&gt; {\n  return new Promise((resolve, reject) =&gt; {\n    setTimeout(() =&gt; {\n      if (light === 'red') {\n        red()\n      } else if (light === 'green') {\n        green()\n      } else if (light === 'yellow') {\n        yellow()\n      }\n      resolve()\n    }, timer)\n  })\n}\nconst step = async () =&gt; {\n  await task(3000, 'red')\n  await task(2000, 'green')\n  await task(2100, 'yellow')\n  step()\n}\nstep()</code></pre>",
  "body_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"viewport\" content=\"adapt\" /><p data-lake-id=\"u2cc43df7\" id=\"u2cc43df7\"><strong><span data-lake-id=\"u9eacbe9c\" id=\"u9eacbe9c\">红灯 3s 亮一次，绿灯 1s 亮一次，黄灯 2s 亮一次；如何让三个灯不断交替重复亮灯？</span></strong></p><p data-lake-id=\"udd974964\" id=\"udd974964\"><span data-lake-id=\"u47a73122\" id=\"u47a73122\">​</span><br></p><ul list=\"uc2681af9\"><li fid=\"u9633b085\" data-lake-id=\"u77c30c06\" id=\"u77c30c06\"><span data-lake-id=\"uf5108e5d\" id=\"uf5108e5d\">三个亮灯函数：</span></li></ul><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22function%20red()%20%7B%5Cn%20%20%20%20console.log('red')%3B%5Cn%7D%5Cnfunction%20green()%20%7B%5Cn%20%20%20%20console.log('green')%3B%5Cn%7D%5Cnfunction%20yellow()%20%7B%5Cn%20%20%20%20console.log('yellow')%3B%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22KNqdg%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h3 data-lake-id=\"Qi4Qi\" id=\"Qi4Qi\"><span data-lake-id=\"u4d02b275\" id=\"u4d02b275\">callback 实现</span></h3><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22const%20task%20%3D%20(timer%2C%20light%2C%20callback)%20%3D%3E%20%7B%5Cn%20%20%20%20setTimeout(()%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20%20%20if%20(light%20%3D%3D%3D%20'red')%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20red()%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20else%20if%20(light%20%3D%3D%3D%20'green')%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20green()%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20else%20if%20(light%20%3D%3D%3D%20'yellow')%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20yellow()%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20callback()%5Cn%20%20%20%20%7D%2C%20timer)%5Cn%7D%5Cn%5Cnconst%20step%20%3D%20()%20%3D%3E%20%7B%5Cn%20%20%20%20task(3000%2C%20'red'%2C%20()%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20%20%20task(2000%2C%20'green'%2C%20()%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20task(1000%2C%20'yellow'%2C%20step)%5Cn%20%20%20%20%20%20%20%20%7D)%5Cn%20%20%20%20%7D)%5Cn%7D%5Cnstep()%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22UxVyI%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h3 data-lake-id=\"jkPJJ\" id=\"jkPJJ\"><span data-lake-id=\"u7f94b4dc\" id=\"u7f94b4dc\">promise 实现</span></h3><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22const%20task%20%3D%20(timer%2Clight)%20%3D%3E%20%7B%5Cn%20%20return%20new%20Promise((resolve%2C%20reject)%20%3D%3E%20%7B%5Cn%20%20%20%20setTimeout(()%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20if%20(light%20%3D%3D%3D%20'red')%20%7B%5Cn%20%20%20%20%20%20%20%20red()%5Cn%20%20%20%20%20%20%7D%20else%20if%20(light%20%3D%3D%3D%20'green')%20%7B%5Cn%20%20%20%20%20%20%20%20green()%5Cn%20%20%20%20%20%20%7D%20else%20if%20(light%20%3D%3D%3D%20'yellow')%20%7B%5Cn%20%20%20%20%20%20%20%20yellow()%5Cn%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20resolve()%5Cn%20%20%20%20%7D%2C%20timer)%5Cn%20%20%7D)%5Cn%7D%5Cnconst%20step%20%3D%20()%20%3D%3E%20%7B%5Cn%20%20task(3000%2C%20'red')%5Cn%20%20%20%20.then(()%20%3D%3E%20task(2000%2C%20'green'))%5Cn%20%20%20%20.then(()%20%3D%3E%20task(2100%2C%20'yellow'))%5Cn%20%20%20%20.then(step)%5Cn%7D%5Cnstep()%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22Dl3vK%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h3 data-lake-id=\"ADg0b\" id=\"ADg0b\"><span data-lake-id=\"ucdbd18b4\" id=\"ucdbd18b4\">async/await 实现</span></h3><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22const%20task%20%3D%20(timer%2Clight)%20%3D%3E%20%7B%5Cn%20%20return%20new%20Promise((resolve%2C%20reject)%20%3D%3E%20%7B%5Cn%20%20%20%20setTimeout(()%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20if%20(light%20%3D%3D%3D%20'red')%20%7B%5Cn%20%20%20%20%20%20%20%20red()%5Cn%20%20%20%20%20%20%7D%20else%20if%20(light%20%3D%3D%3D%20'green')%20%7B%5Cn%20%20%20%20%20%20%20%20green()%5Cn%20%20%20%20%20%20%7D%20else%20if%20(light%20%3D%3D%3D%20'yellow')%20%7B%5Cn%20%20%20%20%20%20%20%20yellow()%5Cn%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20resolve()%5Cn%20%20%20%20%7D%2C%20timer)%5Cn%20%20%7D)%5Cn%7D%5Cnconst%20step%20%3D%20async%20()%20%3D%3E%20%7B%5Cn%20%20await%20task(3000%2C%20'red')%5Cn%20%20await%20task(2000%2C%20'green')%5Cn%20%20await%20task(2100%2C%20'yellow')%5Cn%20%20step()%5Cn%7D%5Cnstep()%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22hf02v%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card>",
  "body_draft_lake": "",
  "public": 0,
  "status": 1,
  "view_status": 0,
  "read_status": 1,
  "likes_count": 0,
  "comments_count": 0,
  "content_updated_at": "2022-04-04T11:35:21.000Z",
  "deleted_at": null,
  "created_at": "2022-04-04T11:35:21.000Z",
  "updated_at": "2022-05-10T15:16:47.000Z",
  "published_at": "2022-04-04T11:35:21.000Z",
  "first_published_at": "2022-04-04T11:35:20.634Z",
  "word_count": 252,
  "cover": null,
  "description": "红灯 3s 亮一次，绿灯 1s 亮一次，黄灯 2s 亮一次；如何让三个灯不断交替重复亮灯？三个亮灯函数：function red() {     console.log('red'); } function green() {     console.log('green'); } funct...",
  "custom_description": null,
  "hits": 0,
  "_serializer": "v2.doc_detail"
}