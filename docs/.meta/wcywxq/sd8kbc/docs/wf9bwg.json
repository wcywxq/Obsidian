{
  "id": 72212397,
  "slug": "wf9bwg",
  "title": "手动实现定时器",
  "book_id": 26225252,
  "book": {
    "id": 26225252,
    "type": "Book",
    "slug": "sd8kbc",
    "name": "笔试 written test",
    "user_id": 732231,
    "description": "笔试相关题目\n1. 原生 API 实现\n2. 业务场景相关问题\n3. LeetCode 算法相关问题",
    "creator_id": 732231,
    "public": 0,
    "items_count": 74,
    "likes_count": 0,
    "watches_count": 1,
    "content_updated_at": "2023-11-11T18:15:38.713Z",
    "updated_at": "2023-11-11T18:15:39.000Z",
    "created_at": "2022-04-04T11:34:53.000Z",
    "namespace": "wcywxq/sd8kbc",
    "user": {
      "id": 732231,
      "type": "User",
      "login": "wcywxq",
      "name": "magic",
      "description": null,
      "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/732231/1606968271774-avatar/886ad88b-d2cc-4c9e-a674-f70eb51a679c.png",
      "books_count": 18,
      "public_books_count": 0,
      "followers_count": 0,
      "following_count": 0,
      "created_at": "2020-01-08T14:21:31.000Z",
      "updated_at": "2023-11-13T09:32:35.000Z",
      "_serializer": "v2.user"
    },
    "_serializer": "v2.book"
  },
  "user_id": 732231,
  "creator": {
    "id": 732231,
    "type": "User",
    "login": "wcywxq",
    "name": "magic",
    "description": null,
    "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/732231/1606968271774-avatar/886ad88b-d2cc-4c9e-a674-f70eb51a679c.png",
    "books_count": 18,
    "public_books_count": 0,
    "followers_count": 0,
    "following_count": 0,
    "created_at": "2020-01-08T14:21:31.000Z",
    "updated_at": "2023-11-13T09:32:35.000Z",
    "_serializer": "v2.user"
  },
  "format": "lake",
  "body": "<a name=\"N4eHb\"></a>\n## 使用 RequestAnimationFrame 实现定时器\n\n<a name=\"xF5cN\"></a>\n### 浏览器默认提供的 setTimeout 和 setInterval 的问题\n\n首先在针对浏览器端的默认实现中，`setTimeout` 和 `setInterval` 的定时是不准确的，因为我们知道 js 是单线程的，如果前面的代码耗费了较长的时间，那么会导致后面的定时器不能按时执行。此外 `setInterval` 会带来性能上的问题，比如存在执行累积的问题等等。\n\n我们完全可以使用 `requestAnimationFrame` 来实现定时器的要求，首先 `requestAnimationFrame` 自带函数节流功能，基本可以保证在 **16.6 毫秒**内只执行一次（不掉帧的情况下），并且该函数的延时效果是精确的，没有其他定时器时间不准的问题。\n<a name=\"RmQWE\"></a>\n### requestAnimationFrame简单介绍\n\n`requestAnimationFrame` 的语法很简单：`window.requestAnimationFrame(callback)`; `callback` 为一个指定函数的参数，该函数在下次重新绘制动画时调用\n<a name=\"TULTm\"></a>\n### setTimeout 实现\n重新绘制的时间即 **16.6 毫秒**执行。我们可以通过递归调用来达到定时器的效果\n```javascript\nfunction _setTimeout(fn, timeout) {\n\tlet timer\n  let startTime = Date.now()\n  const loop = () => {\n  \ttimer = window.requestAnimationFrame(loop)\n\t\tif (Date.now() - startTime >= timeout) {\n    \tfn.call(this, timer)\n      window.cancelAnimationFrame(timer)\n    }\n  }\n  window.requestAnimationFrame(loop)\n}\n```\n这里需要先定义一个开始时间 `startTime`，然后定义一个递归函数 `loop`，每次先递归调用自己获取最新的 `timer`，这样才能够保证可以取消掉，然后判断当前时间减去开始时间是否大于自己设定的值，如果大则回调并取消定时器即可，否则因为我们已经在一开始回调自己了，所以会在 **16.6 毫秒**后再次执行并判断，直到满足条件为止。\n<a name=\"dKkxA\"></a>\n### setInterval 实现\n```javascript\nfunction _setInterval(fn, interval) {\n\tlet timer\n  let startTime = Date.now()\n  const loop = () => {\n  \ttimer = window.requestAnimationFrame(loop)\n    if (Date.now() - startTime >= interval) {\n    \tfn.call(this, timer)\n      startTime = Date.now()\n    }\n  }\n  timer = window.RequestAnimationFrame(loop)\n  return timer\n}\n```\n<a name=\"KtWyj\"></a>\n## 利用 setTimeout 实现 setInterval\n<a name=\"Iwvix\"></a>\n### 版本1(不完全实现)\n```javascript\nconst _setInterval = (fn, interval) => {\n    let timer\n    const loop = () => {\n        timer = setTimeout(() => {\n            // timeout 时间之后会执行真正的函数 fn\n            fn()\n            // 同时再次调用 interval 本身\n            loop()\n        }, interval)\n    }\n    // 开始执行\n    loop()\n    // 返回用于关闭定时器的函数\n    return () => clearTimeout(timer)\n}\n\nlet cancelInterval = _setInterval(() => {\n    console.log(1)\n}, 300)\n\nsetTimeout(() => {\n    cancelInterval()\n    console.log(\"1s之后关闭定时器\")\n}, 1000)\n```\n<a name=\"UbhuE\"></a>\n### 版本2\n```javascript\nfunction _setInterval(handler, timeout, ...args) {\n  \t// 判断是否为浏览器环境\n    let isBrowser = typeof window !== 'undefined'\n    if (isBrowser && this !== window) {\n        throw new TypeError('Illegal invocation')\n    }\n    let timer = {}\n    if (isBrowser) {\n        // 浏览器上的处理\n        timer = {\n            value: -1,\n            valueOf() {\n                return this.value\n            }\n        }\n        const callback = () => {\n            timer.value = setTimeout(callback, timeout)\n            handler.apply(this, args)\n        }\n        timer.value = setTimeout(callback, timeout)\n    } else {\n        // nodejs 的处理\n        const callback = () => {\n            Object.assign(timer, setTimeout(callback, timeout))\n            handler.apply(this, args)\n        }\n        Object.assign(timer, setTimeout(callback, timeout))\n    }   \n    return timer\n}\n```\n<a name=\"wNXU7\"></a>\n## 利用 setInterval 模拟 setTimeout\n思路： `setTimeout` 的特性是在指定的时间内只执行一次，我们只要在 `setInterval` 内部执行 `callback` 之后，把定时器关掉即可\n```javascript\nconst _setTimeout = (fn, timeout) => {\n    let timer = null\n    timer = setInterval(() => {\n        // 关闭定时器，保证只执行一次fn，也就达到了setTimeout的效果了\n        clearInterval(timer)\n        fn()\n    }, timeout)\n    // 返回用于关闭定时器的方法\n    return () => clearInterval(timer)\n}\n\nlet cancelTimeout = _setTimeout(() => {\n    console.log('1s 后打印出 1')\n}, 1000)\n```\n",
  "body_draft": "",
  "body_html": "<!doctype html><div class=\"lake-content\" typography=\"classic\"><h2 id=\"N4eHb\"><span class=\"ne-text\">使用 RequestAnimationFrame 实现定时器</span></h2><p id=\"u3482edc2\" class=\"ne-p\"><br></p><h3 id=\"xF5cN\"><span class=\"ne-text\">浏览器默认提供的 setTimeout 和 setInterval 的问题</span></h3><p id=\"ue3b59c70\" class=\"ne-p\"><br></p><p id=\"u4873ae35\" class=\"ne-p\"><span class=\"ne-text\">首先在针对浏览器端的默认实现中，</span><code class=\"ne-code\"><span class=\"ne-text\">setTimeout</span></code><span class=\"ne-text\"> 和 </span><code class=\"ne-code\"><span class=\"ne-text\">setInterval</span></code><span class=\"ne-text\"> 的定时是不准确的，因为我们知道 js 是单线程的，如果前面的代码耗费了较长的时间，那么会导致后面的定时器不能按时执行。此外 </span><code class=\"ne-code\"><span class=\"ne-text\">setInterval</span></code><span class=\"ne-text\"> 会带来性能上的问题，比如存在执行累积的问题等等。</span></p><p id=\"uf60152b7\" class=\"ne-p\"><span class=\"ne-text\"></span></p><p id=\"ueae8d20b\" class=\"ne-p\"><span class=\"ne-text\">我们完全可以使用 </span><code class=\"ne-code\"><span class=\"ne-text\">requestAnimationFrame</span></code><span class=\"ne-text\"> 来实现定时器的要求，首先 </span><code class=\"ne-code\"><span class=\"ne-text\">requestAnimationFrame</span></code><span class=\"ne-text\"> 自带函数节流功能，基本可以保证在 </span><strong><span class=\"ne-text\">16.6 毫秒</span></strong><span class=\"ne-text\">内只执行一次（不掉帧的情况下），并且该函数的延时效果是精确的，没有其他定时器时间不准的问题。</span></p><h3 id=\"RmQWE\"><span class=\"ne-text\">requestAnimationFrame简单介绍</span></h3><p id=\"uadece18e\" class=\"ne-p\"><span class=\"ne-text\"></span></p><p id=\"u3cf5161a\" class=\"ne-p\"><code class=\"ne-code\"><span class=\"ne-text\">requestAnimationFrame</span></code><span class=\"ne-text\"> 的语法很简单：</span><code class=\"ne-code\"><span class=\"ne-text\">window.requestAnimationFrame(callback)</span></code><span class=\"ne-text\">; </span><code class=\"ne-code\"><span class=\"ne-text\">callback</span></code><span class=\"ne-text\"> 为一个指定函数的参数，该函数在下次重新绘制动画时调用</span></p><h3 id=\"TULTm\"><span class=\"ne-text\">setTimeout 实现</span></h3><p id=\"ua9b602d9\" class=\"ne-p\"><span class=\"ne-text\">重新绘制的时间即 </span><strong><span class=\"ne-text\">16.6 毫秒</span></strong><span class=\"ne-text\">执行。我们可以通过递归调用来达到定时器的效果</span></p><pre data-language=\"javascript\" id=\"sAdxc\" class=\"ne-codeblock language-javascript\">function _setTimeout(fn, timeout) {\n\tlet timer\n  let startTime = Date.now()\n  const loop = () =&gt; {\n  \ttimer = window.requestAnimationFrame(loop)\n\t\tif (Date.now() - startTime &gt;= timeout) {\n    \tfn.call(this, timer)\n      window.cancelAnimationFrame(timer)\n    }\n  }\n  window.requestAnimationFrame(loop)\n}</pre><p id=\"u24dcafb0\" class=\"ne-p\"><span class=\"ne-text\">这里需要先定义一个开始时间 </span><code class=\"ne-code\"><span class=\"ne-text\">startTime</span></code><span class=\"ne-text\">，然后定义一个递归函数 </span><code class=\"ne-code\"><span class=\"ne-text\">loop</span></code><span class=\"ne-text\">，每次先递归调用自己获取最新的 </span><code class=\"ne-code\"><span class=\"ne-text\">timer</span></code><span class=\"ne-text\">，这样才能够保证可以取消掉，然后判断当前时间减去开始时间是否大于自己设定的值，如果大则回调并取消定时器即可，否则因为我们已经在一开始回调自己了，所以会在 </span><strong><span class=\"ne-text\">16.6 毫秒</span></strong><span class=\"ne-text\">后再次执行并判断，直到满足条件为止。</span></p><h3 id=\"dKkxA\"><span class=\"ne-text\">setInterval 实现</span></h3><pre data-language=\"javascript\" id=\"eji6O\" class=\"ne-codeblock language-javascript\">function _setInterval(fn, interval) {\n\tlet timer\n  let startTime = Date.now()\n  const loop = () =&gt; {\n  \ttimer = window.requestAnimationFrame(loop)\n    if (Date.now() - startTime &gt;= interval) {\n    \tfn.call(this, timer)\n      startTime = Date.now()\n    }\n  }\n  timer = window.RequestAnimationFrame(loop)\n  return timer\n}</pre><h2 id=\"KtWyj\"><span class=\"ne-text\">利用 setTimeout 实现 setInterval</span></h2><h3 id=\"Iwvix\"><span class=\"ne-text\">版本1(不完全实现)</span></h3><pre data-language=\"javascript\" id=\"O37ML\" class=\"ne-codeblock language-javascript\">const _setInterval = (fn, interval) =&gt; {\n    let timer\n    const loop = () =&gt; {\n        timer = setTimeout(() =&gt; {\n            // timeout 时间之后会执行真正的函数 fn\n            fn()\n            // 同时再次调用 interval 本身\n            loop()\n        }, interval)\n    }\n    // 开始执行\n    loop()\n    // 返回用于关闭定时器的函数\n    return () =&gt; clearTimeout(timer)\n}\n\nlet cancelInterval = _setInterval(() =&gt; {\n    console.log(1)\n}, 300)\n\nsetTimeout(() =&gt; {\n    cancelInterval()\n    console.log(&quot;1s之后关闭定时器&quot;)\n}, 1000)</pre><h3 id=\"UbhuE\"><span class=\"ne-text\">版本2</span></h3><pre data-language=\"javascript\" id=\"tkvfI\" class=\"ne-codeblock language-javascript\">function _setInterval(handler, timeout, ...args) {\n  \t// 判断是否为浏览器环境\n    let isBrowser = typeof window !== 'undefined'\n    if (isBrowser &amp;&amp; this !== window) {\n        throw new TypeError('Illegal invocation')\n    }\n    let timer = {}\n    if (isBrowser) {\n        // 浏览器上的处理\n        timer = {\n            value: -1,\n            valueOf() {\n                return this.value\n            }\n        }\n        const callback = () =&gt; {\n            timer.value = setTimeout(callback, timeout)\n            handler.apply(this, args)\n        }\n        timer.value = setTimeout(callback, timeout)\n    } else {\n        // nodejs 的处理\n        const callback = () =&gt; {\n            Object.assign(timer, setTimeout(callback, timeout))\n            handler.apply(this, args)\n        }\n        Object.assign(timer, setTimeout(callback, timeout))\n    }   \n    return timer\n}</pre><h2 id=\"wNXU7\"><span class=\"ne-text\">利用 setInterval 模拟 setTimeout</span></h2><p id=\"u31fb0b9d\" class=\"ne-p\"><span class=\"ne-text\">思路： </span><code class=\"ne-code\"><span class=\"ne-text\">setTimeout</span></code><span class=\"ne-text\"> 的特性是在指定的时间内只执行一次，我们只要在 </span><code class=\"ne-code\"><span class=\"ne-text\">setInterval</span></code><span class=\"ne-text\"> 内部执行 </span><code class=\"ne-code\"><span class=\"ne-text\">callback</span></code><span class=\"ne-text\"> 之后，把定时器关掉即可</span></p><pre data-language=\"javascript\" id=\"t3YvB\" class=\"ne-codeblock language-javascript\">const _setTimeout = (fn, timeout) =&gt; {\n    let timer = null\n    timer = setInterval(() =&gt; {\n        // 关闭定时器，保证只执行一次fn，也就达到了setTimeout的效果了\n        clearInterval(timer)\n        fn()\n    }, timeout)\n    // 返回用于关闭定时器的方法\n    return () =&gt; clearInterval(timer)\n}\n\nlet cancelTimeout = _setTimeout(() =&gt; {\n    console.log('1s 后打印出 1')\n}, 1000)</pre></div>",
  "body_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"viewport\" content=\"adapt\" /><h2 data-lake-id=\"N4eHb\" id=\"N4eHb\"><span data-lake-id=\"uf3865ec7\" id=\"uf3865ec7\">使用 RequestAnimationFrame 实现定时器</span></h2><p data-lake-id=\"u3482edc2\" id=\"u3482edc2\"><br></p><h3 data-lake-id=\"xF5cN\" id=\"xF5cN\"><span data-lake-id=\"u08ee7553\" id=\"u08ee7553\">浏览器默认提供的 setTimeout 和 setInterval 的问题</span></h3><p data-lake-id=\"ue3b59c70\" id=\"ue3b59c70\"><br></p><p data-lake-id=\"u4873ae35\" id=\"u4873ae35\"><span data-lake-id=\"u849f9581\" id=\"u849f9581\">首先在针对浏览器端的默认实现中，</span><code data-lake-id=\"u996de053\" id=\"u996de053\"><span data-lake-id=\"u0cf2c4be\" id=\"u0cf2c4be\">setTimeout</span></code><span data-lake-id=\"ucd2f279d\" id=\"ucd2f279d\"> 和 </span><code data-lake-id=\"u2c5d5171\" id=\"u2c5d5171\"><span data-lake-id=\"ub1bfeaae\" id=\"ub1bfeaae\">setInterval</span></code><span data-lake-id=\"u63c4424b\" id=\"u63c4424b\"> 的定时是不准确的，因为我们知道 js 是单线程的，如果前面的代码耗费了较长的时间，那么会导致后面的定时器不能按时执行。此外 </span><code data-lake-id=\"u28889d97\" id=\"u28889d97\"><span data-lake-id=\"u152a9b2a\" id=\"u152a9b2a\">setInterval</span></code><span data-lake-id=\"uc9d977e5\" id=\"uc9d977e5\"> 会带来性能上的问题，比如存在执行累积的问题等等。</span></p><p data-lake-id=\"uf60152b7\" id=\"uf60152b7\"><span data-lake-id=\"u93aa3cd2\" id=\"u93aa3cd2\">​</span><br></p><p data-lake-id=\"ueae8d20b\" id=\"ueae8d20b\"><span data-lake-id=\"u0c695823\" id=\"u0c695823\">我们完全可以使用 </span><code data-lake-id=\"u0fe7c41a\" id=\"u0fe7c41a\"><span data-lake-id=\"u1280e7f3\" id=\"u1280e7f3\">requestAnimationFrame</span></code><span data-lake-id=\"u8f8792e2\" id=\"u8f8792e2\"> 来实现定时器的要求，首先 </span><code data-lake-id=\"u3beecbc0\" id=\"u3beecbc0\"><span data-lake-id=\"u25fb90c0\" id=\"u25fb90c0\">requestAnimationFrame</span></code><span data-lake-id=\"u8e0f1184\" id=\"u8e0f1184\"> 自带函数节流功能，基本可以保证在 </span><strong><span data-lake-id=\"uffaa14ee\" id=\"uffaa14ee\">16.6 毫秒</span></strong><span data-lake-id=\"ucf88f89e\" id=\"ucf88f89e\">内只执行一次（不掉帧的情况下），并且该函数的延时效果是精确的，没有其他定时器时间不准的问题。</span></p><h3 data-lake-id=\"RmQWE\" id=\"RmQWE\"><span data-lake-id=\"u9f07c9ce\" id=\"u9f07c9ce\">requestAnimationFrame简单介绍</span></h3><p data-lake-id=\"uadece18e\" id=\"uadece18e\"><span data-lake-id=\"u1ed0fac1\" id=\"u1ed0fac1\">​</span><br></p><p data-lake-id=\"u3cf5161a\" id=\"u3cf5161a\"><code data-lake-id=\"ud37006ae\" id=\"ud37006ae\"><span data-lake-id=\"u1cfacabc\" id=\"u1cfacabc\">requestAnimationFrame</span></code><span data-lake-id=\"u53413efb\" id=\"u53413efb\"> 的语法很简单：</span><code data-lake-id=\"ue69a3f12\" id=\"ue69a3f12\"><span data-lake-id=\"u90e4e3c0\" id=\"u90e4e3c0\">window.requestAnimationFrame(callback)</span></code><span data-lake-id=\"u3d8c9190\" id=\"u3d8c9190\">; </span><code data-lake-id=\"ub9eb5933\" id=\"ub9eb5933\"><span data-lake-id=\"u03614f5b\" id=\"u03614f5b\">callback</span></code><span data-lake-id=\"ud16b64b4\" id=\"ud16b64b4\"> 为一个指定函数的参数，该函数在下次重新绘制动画时调用</span></p><h3 data-lake-id=\"TULTm\" id=\"TULTm\"><span data-lake-id=\"ud69116a4\" id=\"ud69116a4\">setTimeout 实现</span></h3><p data-lake-id=\"ua9b602d9\" id=\"ua9b602d9\"><span data-lake-id=\"ue6e702cd\" id=\"ue6e702cd\">重新绘制的时间即 </span><strong><span data-lake-id=\"u43f21fe2\" id=\"u43f21fe2\">16.6 毫秒</span></strong><span data-lake-id=\"u675babce\" id=\"u675babce\">执行。我们可以通过递归调用来达到定时器的效果</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22function%20_setTimeout(fn%2C%20timeout)%20%7B%5Cn%5Ctlet%20timer%5Cn%20%20let%20startTime%20%3D%20Date.now()%5Cn%20%20const%20loop%20%3D%20()%20%3D%3E%20%7B%5Cn%20%20%5Cttimer%20%3D%20window.requestAnimationFrame(loop)%5Cn%5Ct%5Ctif%20(Date.now()%20-%20startTime%20%3E%3D%20timeout)%20%7B%5Cn%20%20%20%20%5Ctfn.call(this%2C%20timer)%5Cn%20%20%20%20%20%20window.cancelAnimationFrame(timer)%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%20%20window.requestAnimationFrame(loop)%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22sAdxc%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u24dcafb0\" id=\"u24dcafb0\"><span data-lake-id=\"u1e6c79a6\" id=\"u1e6c79a6\">这里需要先定义一个开始时间 </span><code data-lake-id=\"u33bb51cf\" id=\"u33bb51cf\"><span data-lake-id=\"u7523bd28\" id=\"u7523bd28\">startTime</span></code><span data-lake-id=\"u48c82304\" id=\"u48c82304\">，然后定义一个递归函数 </span><code data-lake-id=\"u7b499da9\" id=\"u7b499da9\"><span data-lake-id=\"uf9112058\" id=\"uf9112058\">loop</span></code><span data-lake-id=\"uefa903bf\" id=\"uefa903bf\">，每次先递归调用自己获取最新的 </span><code data-lake-id=\"uc8543e9d\" id=\"uc8543e9d\"><span data-lake-id=\"ucea76e82\" id=\"ucea76e82\">timer</span></code><span data-lake-id=\"ue2deb120\" id=\"ue2deb120\">，这样才能够保证可以取消掉，然后判断当前时间减去开始时间是否大于自己设定的值，如果大则回调并取消定时器即可，否则因为我们已经在一开始回调自己了，所以会在 </span><strong><span data-lake-id=\"u783e91b9\" id=\"u783e91b9\">16.6 毫秒</span></strong><span data-lake-id=\"ue567b461\" id=\"ue567b461\">后再次执行并判断，直到满足条件为止。</span></p><h3 data-lake-id=\"dKkxA\" id=\"dKkxA\"><span data-lake-id=\"u4ea830da\" id=\"u4ea830da\">setInterval 实现</span></h3><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22function%20_setInterval(fn%2C%20interval)%20%7B%5Cn%5Ctlet%20timer%5Cn%20%20let%20startTime%20%3D%20Date.now()%5Cn%20%20const%20loop%20%3D%20()%20%3D%3E%20%7B%5Cn%20%20%5Cttimer%20%3D%20window.requestAnimationFrame(loop)%5Cn%20%20%20%20if%20(Date.now()%20-%20startTime%20%3E%3D%20interval)%20%7B%5Cn%20%20%20%20%5Ctfn.call(this%2C%20timer)%5Cn%20%20%20%20%20%20startTime%20%3D%20Date.now()%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%20%20timer%20%3D%20window.RequestAnimationFrame(loop)%5Cn%20%20return%20timer%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22eji6O%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h2 data-lake-id=\"KtWyj\" id=\"KtWyj\"><span data-lake-id=\"u9f71de06\" id=\"u9f71de06\">利用 setTimeout 实现 setInterval</span></h2><h3 data-lake-id=\"Iwvix\" id=\"Iwvix\"><span data-lake-id=\"ucba8246f\" id=\"ucba8246f\">版本1(不完全实现)</span></h3><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22const%20_setInterval%20%3D%20(fn%2C%20interval)%20%3D%3E%20%7B%5Cn%20%20%20%20let%20timer%5Cn%20%20%20%20const%20loop%20%3D%20()%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20%20%20timer%20%3D%20setTimeout(()%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20timeout%20%E6%97%B6%E9%97%B4%E4%B9%8B%E5%90%8E%E4%BC%9A%E6%89%A7%E8%A1%8C%E7%9C%9F%E6%AD%A3%E7%9A%84%E5%87%BD%E6%95%B0%20fn%5Cn%20%20%20%20%20%20%20%20%20%20%20%20fn()%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E5%90%8C%E6%97%B6%E5%86%8D%E6%AC%A1%E8%B0%83%E7%94%A8%20interval%20%E6%9C%AC%E8%BA%AB%5Cn%20%20%20%20%20%20%20%20%20%20%20%20loop()%5Cn%20%20%20%20%20%20%20%20%7D%2C%20interval)%5Cn%20%20%20%20%7D%5Cn%20%20%20%20%2F%2F%20%E5%BC%80%E5%A7%8B%E6%89%A7%E8%A1%8C%5Cn%20%20%20%20loop()%5Cn%20%20%20%20%2F%2F%20%E8%BF%94%E5%9B%9E%E7%94%A8%E4%BA%8E%E5%85%B3%E9%97%AD%E5%AE%9A%E6%97%B6%E5%99%A8%E7%9A%84%E5%87%BD%E6%95%B0%5Cn%20%20%20%20return%20()%20%3D%3E%20clearTimeout(timer)%5Cn%7D%5Cn%5Cnlet%20cancelInterval%20%3D%20_setInterval(()%20%3D%3E%20%7B%5Cn%20%20%20%20console.log(1)%5Cn%7D%2C%20300)%5Cn%5CnsetTimeout(()%20%3D%3E%20%7B%5Cn%20%20%20%20cancelInterval()%5Cn%20%20%20%20console.log(%5C%221s%E4%B9%8B%E5%90%8E%E5%85%B3%E9%97%AD%E5%AE%9A%E6%97%B6%E5%99%A8%5C%22)%5Cn%7D%2C%201000)%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22O37ML%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h3 data-lake-id=\"UbhuE\" id=\"UbhuE\"><span data-lake-id=\"u805f0bfd\" id=\"u805f0bfd\">版本2</span></h3><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22function%20_setInterval(handler%2C%20timeout%2C%20...args)%20%7B%5Cn%20%20%5Ct%2F%2F%20%E5%88%A4%E6%96%AD%E6%98%AF%E5%90%A6%E4%B8%BA%E6%B5%8F%E8%A7%88%E5%99%A8%E7%8E%AF%E5%A2%83%5Cn%20%20%20%20let%20isBrowser%20%3D%20typeof%20window%20!%3D%3D%20'undefined'%5Cn%20%20%20%20if%20(isBrowser%20%26%26%20this%20!%3D%3D%20window)%20%7B%5Cn%20%20%20%20%20%20%20%20throw%20new%20TypeError('Illegal%20invocation')%5Cn%20%20%20%20%7D%5Cn%20%20%20%20let%20timer%20%3D%20%7B%7D%5Cn%20%20%20%20if%20(isBrowser)%20%7B%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%8A%E7%9A%84%E5%A4%84%E7%90%86%5Cn%20%20%20%20%20%20%20%20timer%20%3D%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20value%3A%20-1%2C%5Cn%20%20%20%20%20%20%20%20%20%20%20%20valueOf()%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20this.value%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20const%20callback%20%3D%20()%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20timer.value%20%3D%20setTimeout(callback%2C%20timeout)%5Cn%20%20%20%20%20%20%20%20%20%20%20%20handler.apply(this%2C%20args)%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20timer.value%20%3D%20setTimeout(callback%2C%20timeout)%5Cn%20%20%20%20%7D%20else%20%7B%5Cn%20%20%20%20%20%20%20%20%2F%2F%20nodejs%20%E7%9A%84%E5%A4%84%E7%90%86%5Cn%20%20%20%20%20%20%20%20const%20callback%20%3D%20()%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20Object.assign(timer%2C%20setTimeout(callback%2C%20timeout))%5Cn%20%20%20%20%20%20%20%20%20%20%20%20handler.apply(this%2C%20args)%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20Object.assign(timer%2C%20setTimeout(callback%2C%20timeout))%5Cn%20%20%20%20%7D%20%20%20%5Cn%20%20%20%20return%20timer%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22tkvfI%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h2 data-lake-id=\"wNXU7\" id=\"wNXU7\"><span data-lake-id=\"u1bcd5a66\" id=\"u1bcd5a66\">利用 setInterval 模拟 setTimeout</span></h2><p data-lake-id=\"u31fb0b9d\" id=\"u31fb0b9d\"><span data-lake-id=\"u5b3d45e6\" id=\"u5b3d45e6\">思路： </span><code data-lake-id=\"uab88cc7f\" id=\"uab88cc7f\"><span data-lake-id=\"u1e888b9f\" id=\"u1e888b9f\">setTimeout</span></code><span data-lake-id=\"u01b90aba\" id=\"u01b90aba\"> 的特性是在指定的时间内只执行一次，我们只要在 </span><code data-lake-id=\"u6c3c08c1\" id=\"u6c3c08c1\"><span data-lake-id=\"u2b5038c3\" id=\"u2b5038c3\">setInterval</span></code><span data-lake-id=\"uedb9b144\" id=\"uedb9b144\"> 内部执行 </span><code data-lake-id=\"udab8fcd3\" id=\"udab8fcd3\"><span data-lake-id=\"u0a8089bf\" id=\"u0a8089bf\">callback</span></code><span data-lake-id=\"uc5c9b703\" id=\"uc5c9b703\"> 之后，把定时器关掉即可</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22const%20_setTimeout%20%3D%20(fn%2C%20timeout)%20%3D%3E%20%7B%5Cn%20%20%20%20let%20timer%20%3D%20null%5Cn%20%20%20%20timer%20%3D%20setInterval(()%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E5%85%B3%E9%97%AD%E5%AE%9A%E6%97%B6%E5%99%A8%EF%BC%8C%E4%BF%9D%E8%AF%81%E5%8F%AA%E6%89%A7%E8%A1%8C%E4%B8%80%E6%AC%A1fn%EF%BC%8C%E4%B9%9F%E5%B0%B1%E8%BE%BE%E5%88%B0%E4%BA%86setTimeout%E7%9A%84%E6%95%88%E6%9E%9C%E4%BA%86%5Cn%20%20%20%20%20%20%20%20clearInterval(timer)%5Cn%20%20%20%20%20%20%20%20fn()%5Cn%20%20%20%20%7D%2C%20timeout)%5Cn%20%20%20%20%2F%2F%20%E8%BF%94%E5%9B%9E%E7%94%A8%E4%BA%8E%E5%85%B3%E9%97%AD%E5%AE%9A%E6%97%B6%E5%99%A8%E7%9A%84%E6%96%B9%E6%B3%95%5Cn%20%20%20%20return%20()%20%3D%3E%20clearInterval(timer)%5Cn%7D%5Cn%5Cnlet%20cancelTimeout%20%3D%20_setTimeout(()%20%3D%3E%20%7B%5Cn%20%20%20%20console.log('1s%20%E5%90%8E%E6%89%93%E5%8D%B0%E5%87%BA%201')%5Cn%7D%2C%201000)%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22t3YvB%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card>",
  "body_draft_lake": "",
  "public": 0,
  "status": 1,
  "view_status": 0,
  "read_status": 1,
  "likes_count": 0,
  "comments_count": 0,
  "content_updated_at": "2022-10-13T02:46:22.000Z",
  "deleted_at": null,
  "created_at": "2022-04-04T11:35:09.000Z",
  "updated_at": "2022-10-13T02:46:22.000Z",
  "published_at": "2022-10-13T02:46:22.000Z",
  "first_published_at": "2022-04-04T11:35:09.343Z",
  "word_count": 851,
  "cover": null,
  "description": "使用 RequestAnimationFrame 实现定时器浏览器默认提供的 setTimeout 和 setInterval 的问题首先在针对浏览器端的默认实现中，setTimeout 和 setInterval 的定时是不准确的，因为我们知道 js 是单线程的，如果前面的代码耗费了较长的时...",
  "custom_description": null,
  "hits": 0,
  "_serializer": "v2.doc_detail"
}