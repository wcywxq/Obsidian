{
  "id": 73623506,
  "slug": "edff3s",
  "title": "通过调用 addRemote 实现 add",
  "book_id": 26225252,
  "book": {
    "id": 26225252,
    "type": "Book",
    "slug": "sd8kbc",
    "name": "笔试 written test",
    "user_id": 732231,
    "description": "笔试相关题目\n1. 原生 API 实现\n2. 业务场景相关问题\n3. LeetCode 算法相关问题",
    "creator_id": 732231,
    "public": 0,
    "items_count": 74,
    "likes_count": 0,
    "watches_count": 1,
    "content_updated_at": "2023-11-11T18:15:38.713Z",
    "updated_at": "2023-11-11T18:15:39.000Z",
    "created_at": "2022-04-04T11:34:53.000Z",
    "namespace": "wcywxq/sd8kbc",
    "user": {
      "id": 732231,
      "type": "User",
      "login": "wcywxq",
      "name": "magic",
      "description": null,
      "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/732231/1606968271774-avatar/886ad88b-d2cc-4c9e-a674-f70eb51a679c.png",
      "books_count": 18,
      "public_books_count": 0,
      "followers_count": 0,
      "following_count": 0,
      "created_at": "2020-01-08T14:21:31.000Z",
      "updated_at": "2023-11-13T09:32:35.000Z",
      "_serializer": "v2.user"
    },
    "_serializer": "v2.book"
  },
  "user_id": 732231,
  "creator": {
    "id": 732231,
    "type": "User",
    "login": "wcywxq",
    "name": "magic",
    "description": null,
    "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/732231/1606968271774-avatar/886ad88b-d2cc-4c9e-a674-f70eb51a679c.png",
    "books_count": 18,
    "public_books_count": 0,
    "followers_count": 0,
    "following_count": 0,
    "created_at": "2020-01-08T14:21:31.000Z",
    "updated_at": "2023-11-13T09:32:35.000Z",
    "_serializer": "v2.user"
  },
  "format": "lake",
  "body": "<a name=\"W4Vn6\"></a>\n## 描述\n通过调用下面的`addRemote`，实现`add`方法。`addRemote`仅能计算两个数字之和，`add`可以传入任意多个数字，返回的是这些数字之和\n```javascript\nconst addRemote = async (a, b) => new Promise(resolve => {\n  setTimeout(() => resolve(a + b), 1000)\n})\n\nasync function add(...inputs) {}\n\n// 请用示例验证运行结果\nadd(1, 2).then(result => {\n  console.log(result) // 3\n})\n\nadd(3, 5, 2).then(result => {\n  console.log(result) // 10\n})\n```\n<a name=\"ng1HU\"></a>\n## 实现\n<a name=\"VjBy9\"></a>\n### 利用 reduce\n```javascript\nasync function add(...inputs) {\n  return inputs.reduce((prev, cur) => prev.then(val => addRemote(val, cur)), Promise.resolve(0))\n}\n```\n<a name=\"nrIjD\"></a>\n### 递归\n```javascript\nasync function add(...inputs) {\n  let res = 0\n  if (inputs.length === 0) return res\n  if (inputs.length === 1) return inputs[0]\n  const a = inputs.pop()\n  const b = inputs.pop()\n  inputs.push(await addRemote(a, b))\n  return add(...inputs)\n}\n```\n<a name=\"QQhno\"></a>\n### Promise.all\n```javascript\nasync function add(...inputs) {\n  if (inputs.length === 0) return res\n  if (inputs.length === 1) return inputs[0]\n  const promiseList = []\n  for (let i = 0; i * 2 < inputs.length - 1; i++) {\n    const promise = addRemote(inputs[i * 2], inputs[i * 2 + 1])\n    promiseList.push(promise)\n  }\n  if (inputs.length % 2) {\n    promiseList.push(Promise.resolve[inputs[inputs.length - 1]])\n  }\n  return Promise.all(promiseList).then(res => add(...res))\n}\n```\n",
  "body_draft": "",
  "body_html": "<!doctype html><div class=\"lake-content\" typography=\"classic\"><h2 id=\"W4Vn6\"><span class=\"ne-text\">描述</span></h2><p id=\"u3ca5bb7e\" class=\"ne-p\"><span class=\"ne-text\">通过调用下面的</span><code class=\"ne-code\"><span class=\"ne-text\">addRemote</span></code><span class=\"ne-text\">，实现</span><code class=\"ne-code\"><span class=\"ne-text\">add</span></code><span class=\"ne-text\">方法。</span><code class=\"ne-code\"><span class=\"ne-text\">addRemote</span></code><span class=\"ne-text\">仅能计算两个数字之和，</span><code class=\"ne-code\"><span class=\"ne-text\">add</span></code><span class=\"ne-text\">可以传入任意多个数字，返回的是这些数字之和</span></p><pre data-language=\"javascript\" id=\"vWQsr\" class=\"ne-codeblock language-javascript\">const addRemote = async (a, b) =&gt; new Promise(resolve =&gt; {\n  setTimeout(() =&gt; resolve(a + b), 1000)\n})\n\nasync function add(...inputs) {}\n\n// 请用示例验证运行结果\nadd(1, 2).then(result =&gt; {\n  console.log(result) // 3\n})\n\nadd(3, 5, 2).then(result =&gt; {\n  console.log(result) // 10\n})</pre><h2 id=\"ng1HU\"><span class=\"ne-text\">实现</span></h2><h3 id=\"VjBy9\"><span class=\"ne-text\">利用 reduce</span></h3><pre data-language=\"javascript\" id=\"g0pTy\" class=\"ne-codeblock language-javascript\">async function add(...inputs) {\n  return inputs.reduce((prev, cur) =&gt; prev.then(val =&gt; addRemote(val, cur)), Promise.resolve(0))\n}</pre><h3 id=\"nrIjD\"><span class=\"ne-text\">递归</span></h3><pre data-language=\"javascript\" id=\"ewskG\" class=\"ne-codeblock language-javascript\">async function add(...inputs) {\n  let res = 0\n  if (inputs.length === 0) return res\n  if (inputs.length === 1) return inputs[0]\n  const a = inputs.pop()\n  const b = inputs.pop()\n  inputs.push(await addRemote(a, b))\n  return add(...inputs)\n}</pre><h3 id=\"QQhno\"><span class=\"ne-text\">Promise.all</span></h3><pre data-language=\"javascript\" id=\"aeIJ7\" class=\"ne-codeblock language-javascript\">async function add(...inputs) {\n  if (inputs.length === 0) return res\n  if (inputs.length === 1) return inputs[0]\n  const promiseList = []\n  for (let i = 0; i * 2 &lt; inputs.length - 1; i++) {\n    const promise = addRemote(inputs[i * 2], inputs[i * 2 + 1])\n    promiseList.push(promise)\n  }\n  if (inputs.length % 2) {\n    promiseList.push(Promise.resolve[inputs[inputs.length - 1]])\n  }\n  return Promise.all(promiseList).then(res =&gt; add(...res))\n}</pre></div>",
  "body_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"viewport\" content=\"adapt\" /><h2 data-lake-id=\"W4Vn6\" id=\"W4Vn6\"><span data-lake-id=\"ub0a4197e\" id=\"ub0a4197e\">描述</span></h2><p data-lake-id=\"u3ca5bb7e\" id=\"u3ca5bb7e\"><span data-lake-id=\"uc8edf1ec\" id=\"uc8edf1ec\">通过调用下面的</span><code data-lake-id=\"ufb349696\" id=\"ufb349696\"><span data-lake-id=\"u30adc422\" id=\"u30adc422\">addRemote</span></code><span data-lake-id=\"u5e58cea1\" id=\"u5e58cea1\">，实现</span><code data-lake-id=\"u962d1ec4\" id=\"u962d1ec4\"><span data-lake-id=\"u041a2cc7\" id=\"u041a2cc7\">add</span></code><span data-lake-id=\"u0ba64375\" id=\"u0ba64375\">方法。</span><code data-lake-id=\"u41edbf89\" id=\"u41edbf89\"><span data-lake-id=\"u58d775da\" id=\"u58d775da\">addRemote</span></code><span data-lake-id=\"u63985623\" id=\"u63985623\">仅能计算两个数字之和，</span><code data-lake-id=\"u36402889\" id=\"u36402889\"><span data-lake-id=\"u6944ca0d\" id=\"u6944ca0d\">add</span></code><span data-lake-id=\"uc8cced67\" id=\"uc8cced67\">可以传入任意多个数字，返回的是这些数字之和</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22const%20addRemote%20%3D%20async%20(a%2C%20b)%20%3D%3E%20new%20Promise(resolve%20%3D%3E%20%7B%5Cn%20%20setTimeout(()%20%3D%3E%20resolve(a%20%2B%20b)%2C%201000)%5Cn%7D)%5Cn%5Cnasync%20function%20add(...inputs)%20%7B%7D%5Cn%5Cn%2F%2F%20%E8%AF%B7%E7%94%A8%E7%A4%BA%E4%BE%8B%E9%AA%8C%E8%AF%81%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C%5Cnadd(1%2C%202).then(result%20%3D%3E%20%7B%5Cn%20%20console.log(result)%20%2F%2F%203%5Cn%7D)%5Cn%5Cnadd(3%2C%205%2C%202).then(result%20%3D%3E%20%7B%5Cn%20%20console.log(result)%20%2F%2F%2010%5Cn%7D)%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22vWQsr%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h2 data-lake-id=\"ng1HU\" id=\"ng1HU\"><span data-lake-id=\"u2e3c98ba\" id=\"u2e3c98ba\">实现</span></h2><h3 data-lake-id=\"VjBy9\" id=\"VjBy9\"><span data-lake-id=\"u46d52178\" id=\"u46d52178\">利用 reduce</span></h3><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22async%20function%20add(...inputs)%20%7B%5Cn%20%20return%20inputs.reduce((prev%2C%20cur)%20%3D%3E%20prev.then(val%20%3D%3E%20addRemote(val%2C%20cur))%2C%20Promise.resolve(0))%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22g0pTy%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h3 data-lake-id=\"nrIjD\" id=\"nrIjD\"><span data-lake-id=\"uda9dbee6\" id=\"uda9dbee6\">递归</span></h3><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22async%20function%20add(...inputs)%20%7B%5Cn%20%20let%20res%20%3D%200%5Cn%20%20if%20(inputs.length%20%3D%3D%3D%200)%20return%20res%5Cn%20%20if%20(inputs.length%20%3D%3D%3D%201)%20return%20inputs%5B0%5D%5Cn%20%20const%20a%20%3D%20inputs.pop()%5Cn%20%20const%20b%20%3D%20inputs.pop()%5Cn%20%20inputs.push(await%20addRemote(a%2C%20b))%5Cn%20%20return%20add(...inputs)%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22ewskG%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h3 data-lake-id=\"QQhno\" id=\"QQhno\"><span data-lake-id=\"ub1c5eea4\" id=\"ub1c5eea4\">Promise.all</span></h3><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22async%20function%20add(...inputs)%20%7B%5Cn%20%20if%20(inputs.length%20%3D%3D%3D%200)%20return%20res%5Cn%20%20if%20(inputs.length%20%3D%3D%3D%201)%20return%20inputs%5B0%5D%5Cn%20%20const%20promiseList%20%3D%20%5B%5D%5Cn%20%20for%20(let%20i%20%3D%200%3B%20i%20*%202%20%3C%20inputs.length%20-%201%3B%20i%2B%2B)%20%7B%5Cn%20%20%20%20const%20promise%20%3D%20addRemote(inputs%5Bi%20*%202%5D%2C%20inputs%5Bi%20*%202%20%2B%201%5D)%5Cn%20%20%20%20promiseList.push(promise)%5Cn%20%20%7D%5Cn%20%20if%20(inputs.length%20%25%202)%20%7B%5Cn%20%20%20%20promiseList.push(Promise.resolve%5Binputs%5Binputs.length%20-%201%5D%5D)%5Cn%20%20%7D%5Cn%20%20return%20Promise.all(promiseList).then(res%20%3D%3E%20add(...res))%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22aeIJ7%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card>",
  "body_draft_lake": "",
  "public": 0,
  "status": 1,
  "view_status": 0,
  "read_status": 1,
  "likes_count": 0,
  "comments_count": 0,
  "content_updated_at": "2022-04-15T06:12:35.000Z",
  "deleted_at": null,
  "created_at": "2022-04-15T06:02:47.000Z",
  "updated_at": "2022-04-15T06:16:10.000Z",
  "published_at": "2022-04-15T06:16:09.000Z",
  "first_published_at": "2022-04-15T06:04:51.473Z",
  "word_count": 218,
  "cover": null,
  "description": "描述通过调用下面的addRemote，实现add方法。addRemote仅能计算两个数字之和，add可以传入任意多个数字，返回的是这些数字之和const addRemote = async (a, b) => new Promise(resolve => {   setTimeout(() =...",
  "custom_description": null,
  "hits": 0,
  "_serializer": "v2.doc_detail"
}