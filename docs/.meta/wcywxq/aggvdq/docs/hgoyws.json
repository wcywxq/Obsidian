{
  "id": 74717740,
  "slug": "hgoyws",
  "title": "mpx 性能优化",
  "book_id": 24987782,
  "book": {
    "id": 24987782,
    "type": "Book",
    "slug": "aggvdq",
    "name": "项目梳理",
    "user_id": 732231,
    "description": "用来梳理一些项目的内容",
    "creator_id": 732231,
    "public": 0,
    "items_count": 23,
    "likes_count": 0,
    "watches_count": 1,
    "content_updated_at": "2022-12-25T07:59:52.340Z",
    "updated_at": "2023-11-07T15:52:14.000Z",
    "created_at": "2022-03-03T15:06:25.000Z",
    "namespace": "wcywxq/aggvdq",
    "user": {
      "id": 732231,
      "type": "User",
      "login": "wcywxq",
      "name": "magic",
      "description": null,
      "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/732231/1606968271774-avatar/886ad88b-d2cc-4c9e-a674-f70eb51a679c.png",
      "books_count": 18,
      "public_books_count": 0,
      "followers_count": 0,
      "following_count": 0,
      "created_at": "2020-01-08T14:21:31.000Z",
      "updated_at": "2023-11-13T09:32:35.000Z",
      "_serializer": "v2.user"
    },
    "_serializer": "v2.book"
  },
  "user_id": 732231,
  "creator": {
    "id": 732231,
    "type": "User",
    "login": "wcywxq",
    "name": "magic",
    "description": null,
    "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/732231/1606968271774-avatar/886ad88b-d2cc-4c9e-a674-f70eb51a679c.png",
    "books_count": 18,
    "public_books_count": 0,
    "followers_count": 0,
    "following_count": 0,
    "created_at": "2020-01-08T14:21:31.000Z",
    "updated_at": "2023-11-13T09:32:35.000Z",
    "_serializer": "v2.user"
  },
  "format": "lake",
  "body": "<a name=\"xd2sP\"></a>\n### mpx v2.7\nmpx 是一款开源的增强型跨端小程序框架，它具有良好的开发体验，极致的应用性能和一份源码同构输出所有小程序平台及 web 环境的跨端能力。\n\nmpx v2.7 基于 webpack5 彻底重构了框架的核心编译构建流程，利用持久化缓存大幅度提升了编译构建速度，最高提升可达 10 倍。除此之外，mpx v2.7 版本还带来了一系列重要的功能更新，包括分包输出能力增强，完善的单元测试支持和用户 rules 应用等\n<a name=\"aiwRw\"></a>\n### 编译构建提速\n随着小程序生态的日渐发展壮大，各类线上小程序业务体量和复杂度的不断升级，小程序的包体积从最开始的 2M 以内膨胀到 20M 甚至 30M，已经远远不复当初的小程序之名。随着小程序项目大小的不断增加，采用框架进行小程序开发的开发者们往往都会面临一个问题：框架的编译耗时过长\n\n在滴滴主小程序项目中，目前的总包体积已经超过 25M，包含近 30000 个 js 模块，400 多个页面和 3000 多个组件，在本地进行一次完整构建需要等待 15 分钟，CI 环境下甚至需要近半个小时，远远超出能够忍受的范围，对小程序开发体验和开发效率造成了极大的影响。虽然旧版本中的 watch 模式能够在很大程度上缓解我们在开发调试过程中面临的编译耗时问题，但我们在日常开发中，仍然有很多场景无法使用 watch 模式(首次构建、CI 环境、需真机预览等)，基于内存缓存的 watch 模式也无法长期运行。对于这个问题，我们在过去做了许多技术尝试，如支持 watch:prod 模式，局部编译，多线程编译，dll 预编译等等，但是在整体尝试下来这些方案要么收敛有限，要么适用面不足，都没能搜索到一个能从根本上解决问题的方案。\n\n在 webpack5 发布之后，基于文件系统的持久化缓存能力的出现，让我们找到了问题的解决方案。对于 webpack5 来说，对比于 webpack4 有着非常多的升级改动，而 mpx 的编译构建在过去的版本中也存在着各种历史遗留问题，我们花了较长的时间吃透 webpack5 的源码以及重新思考 mpx 中存在的不合理设计，经过 3 个多月的开发，彻底重构了 mpx 的核心编译流程，使其能够完整安全地利用 webpack5 持久化缓存能力进行构建提速，同时也彻底解决了旧版 mpx 中存在的历史遗留问题。\n\n对于编译提速，大部分人首先想到的是 vite，虽然 vite 是一个富有创造力的技术方案，但是在小程序场景下，却不一定是最合适的方案，这主要源于 vite 最核心的设计利用了现代浏览器原生支持的 esm，而目前没有任何一家小程序环境能够原生支持 esm，这就使得 vite 最核心的按需编译能力无法得到发挥，而 vite 使用 esbuild 带来的编译速度提升，在 webpack 环境中也可以选择使用 esbuild-loader 提供的能力来替换 babel/terser，而且目前 esbuild 提供的编译能力成熟度还远不能和 babel/terser 相比，再加上 mpx 的编译构建流程很大程度上依赖了 webpack 提供的能力，从成本和收益上考虑采用 webpack5 来说是更好的方案\n<a name=\"A1Q1L\"></a>\n#### 开启持久化缓存\n```javascript\nmodule.exports = {\n  cache: {\n    type: 'filesystem',\n    // 声明构建配置，注意如果声明某个文件夹为构建配置，需要在文件夹下放置空的 package.json文件，避免构建依赖收集时将主项目的依赖项视为构建依赖\n    buildDependencies: {\n      build: [resolve('build/')],\n      config: [resolve('config/')]\n    },\n    cacheDirectory: resolve('.cache/')\n  },\n  snapshot: {\n    // 如果希望修改 node_modules 下的文件时对应的缓存可以失效，可以将此处的配置改为 managedPaths: []\n    managedPaths: [resolve('node_modules/')]\n  },\n}\n```\n<a name=\"NOLRo\"></a>\n#### 总体收益\n在 webpack5 升级后，有缓存情况下(大部分场景)，本地构建耗时可降低至1分钟左右，CI 流程构建耗时可降低至3分钟以内，提速均达到10倍以上；无缓存情况下(少数场景)，本地构建耗时9分钟左右，CI构建耗时约16分钟，优化了大约40%。随着我们对 CI 流程的持久化缓存改造完成，可以确保在日常的大部分构建场景都会在有缓存的环境下进行\n<a name=\"xhkQG\"></a>\n### 分包输出能力增强\n在 mpx v2.7 版本中，我们对小程序分包能力的支持进行了进一步的完善增强\n<a name=\"NZNJ6\"></a>\n#### 独立分包初始化模块\n在过去的版本中，我们对独立分包进行过专门的构建支持，以满足独立分包资源独占的需求。不过在使用独立分包进行业务开发时，往往会面临一个棘手问题：初始化逻辑无处安放。这是由于独立分包没有 app.js，而在小程序中，组件的 js 逻辑会早于页面 js 执行，具体的执行顺序又和组件的嵌套关系有关，因此我们无法找到一个确定的代码位置来存放独立分包的初始化逻辑\n\n在 mpx v2.7 中，针对独立分包新增了一个全新的增强特性，让用户能够声明独立分包的初始化模块，该模块将会在独立分包启动时全局最先执行，其实现思路大致如下：在构建时为独立分包中所有组件和页面都添加模块引用，指向用户声明的初始化模块，这样在独立分包启动时，无论哪个组件/页面的 js 最先执行，都能保障这个初始化模块最先执行，同时由于模块缓存的存在，后续的组件/页面执行时，该模块也不会被重复执行。\n<a name=\"jWbXg\"></a>\n#### 分包异步化\n分包异步化是微信小程序在去年下半年提出的全新技术特性，该特性打破了传统分包只能引用自身和主包资源的规则限制，通过相关配置和声明，允许分包异步地引用其他分包内的资源，对于复杂小程序的包体积和加载性能优化具有极其重要的意义\n\n在过去，受限于小程序分包资源引用规则，mpx 在编译构建时对于跨分包公用的资源有两种处理策略，其一是将其输出到主包中，让多个分包能够通过主包访问，这种策略下可以达到总包体积最优，但是往往会对主包体积造成过大的压力。当主包超出 2M 限制时，我们就需要采用第二种策略，将这部分跨分包共用的资源冗余地输出到各自的分包中，消除其对于主包体积的占用。在实际的 mpx 编译构建当中，这两种策略是同时存在的，具体什么时候采用哪种策略是根据资源类型和用户配置来决定的\n\n由于分包异步化技术打破了传统分包资源引用规则的限制，理想情况下：我们可以做到主包不超限的同时总包无冗余，不过该技术目前也存在一些不足：一个跨平台支持度不佳，只有微信支持，然而支付宝也在推进该功能；二是对交互和体验会带来一些影响，同时存在业务改造成本，但这依然不妨碍该技术成为大型小程序优化包体积和加载性能的最优路径<br />![image.png](https://cdn.nlark.com/yuque/0/2022/png/732231/1650699968107-bfe9dc4d-2cdf-4e5b-93a1-c773a1d2766e.png#clientId=uce0e548a-b4fc-4&from=paste&height=482&id=u67b76cf1&originHeight=602&originWidth=968&originalType=binary&ratio=1&rotation=0&showTitle=false&size=101915&status=done&style=none&taskId=uf560d5d6-ef39-40fc-9e6c-51e44ee9cfd&title=&width=774.4)<br />在 mpx v2.7 中对分包异步化中最常用的跨分包自定义组件引用进行了完整支持，与原生小程序不同，mpx 中资源的分包归属不由源码位置决定，而是由资源引用关系决定，因此在跨分包资源引用的场景下，用户需要声明引用的资源属于哪个分包，简单使用示例如下：\n```json\n{\n  \"usingComponents\": {\n    // 通过 root query 声明组件所属的分包，与 packages 语法下使用 root query 声明 package 所属分包的语义保持一致\n    \"button\": \"../subPackageA/components/button?root=subPackageA\",\n    \"list\": \"../subPackageB/components/full-list?root=subPackageB\",\n    \"simple-list\": \"../components/simple-list\"\n  },\n  \"componentPlaceholder\": {\n    \"button\": \"view\",\n    \"list\": \"simple-list\"\n  }\n}\n```\n<a name=\"BcCTy\"></a>\n#### 单元测试支持\nmpx 自从 20 年开始就对单元测试有了初步的支持，但过去的单测方案在设计上存在一些缺陷，可用性不高，业务落地困难，在 mpx v2.7 中，重新设计了一套全新的技术方案，克服了原有方案中存在的所有问题，在可用性上得到了质的飞跃\n\n- 旧方案\n\n通过 mpx 编译构建预先将完整的项目源码构建输出为原生小程序格式，再通过 jest + miniprogram-simulate 加载构建产出的原生小程序组件来执行测试 case。该方案的优点在于编译流程统一，方案实现成本较低，缺点在于执行任何 case 都需要执行完成的构建流程，耗时较长；而且构建本身不基于 jest 进行，也无法使用 jest 提供的模块 mock 功能<br />![image.png](https://cdn.nlark.com/yuque/0/2022/png/732231/1650700504522-96376a3d-276b-4f10-b14d-db86f456c71b.png#clientId=uce0e548a-b4fc-4&from=paste&height=320&id=u4f8319cc&originHeight=400&originWidth=1005&originalType=binary&ratio=1&rotation=0&showTitle=false&size=90374&status=done&style=none&taskId=u1be505e7-c211-4558-9fc3-698519642f9&title=&width=804)\n\n- 新方案\n\n在 fork 了 miniprogram-simulate 仓库对其扩展了 load mpx 组件的能力，在资源加载的 transform 过程中通过 mpx-jest 插件将 mpx 组件编译为原生小程序组件，再将内容传递给 miniprogram-simulate 执行渲染并运行测试 case。该方案中模块加载完全基于 jest 并能够实现组件的按需编译，完美规避了旧方案中存在的问题，缺点在于编译流程基于 jest api 重构，与 mpx 基于 webpack 的编译流程独立，存在额外的维护成本，后续我们会将通用的编译逻辑抽离维护，在 webpack 和 jest 两侧复用<br />![image.png](https://cdn.nlark.com/yuque/0/2022/png/732231/1650700691862-fe9f8984-cc57-46f6-9959-74c1599c4474.png#clientId=uce0e548a-b4fc-4&from=paste&height=287&id=u17aea790&originHeight=359&originWidth=962&originalType=binary&ratio=1&rotation=0&showTitle=false&size=63282&status=done&style=none&taskId=u89ea284c-75aa-44e8-bbc2-4f8ae19e3fd&title=&width=769.6)\n<a name=\"LrdwS\"></a>\n#### 分包预加载和预请求\n随着分包异步化技术的应用和微信对于分包预加载功能的修复，我们会重新梳理分包结构，优化资源加载，并配置合理的分包预加载规则加快后续页面的打开速度。\n\n预请求是我们在业务优化过程中探索出来的另一项优化手段，核心是在发生页面跳转时，把后一个页面所需的关键请求在发起跳转前提前发出，将业务请求与路由跳转并行化，以提升后一个页面的展现速度。目前我们通过这项技术大幅改善了预估页面的展现速度(提速约 40%)，后续我们会基于 request api 将预请求封装为通用技术能力，并在更大的业务范围内进行推广落地。\n<a name=\"oNxh3\"></a>\n### module.rules 复用\nmpx 的单文件支持很大程度上参考了 vue-loader 的设计，在 vue-loader@15 版本之前，对于单文件组件中各个区块(block)的 loaders 应用逻辑默认内置在 loader 当中，如需对某些区块进行自定义配置，需要向 loader 和 options 中传递额外的 loader 应用规则，无法复用 webpack 配置的 module.rules 中已经定义好的规则，这往往会导致我们需要在 loader options 和 module.rules 中维护重复的 loader 规则，同样的问题也存在于旧版的 mpx-loader 中\n\n在 vue-loader@15 版本发布之后，其通过克隆用户原始的 rules 的方式实现了 module.rules 的复用，用户不再需要往 loader options 中传递冗余的 loaders 规则，本次全新 mpx v2.7 版本也支持了该特性，我们使用了 webpack 提供的 matchResource 能力实现了 module.rules 的复用，该方案相较于 clone  rules 的方式实现起来更加简洁优雅\n",
  "body_draft": "",
  "body_html": "<!doctype html><div class=\"lake-content\" typography=\"classic\"><h3 id=\"xd2sP\"><span class=\"ne-text\">mpx v2.7</span></h3><p id=\"uc065cd6e\" class=\"ne-p\"><span class=\"ne-text\">mpx 是一款开源的增强型跨端小程序框架，它具有良好的开发体验，极致的应用性能和一份源码同构输出所有小程序平台及 web 环境的跨端能力。</span></p><p id=\"uf9a33335\" class=\"ne-p\"><span class=\"ne-text\"></span></p><p id=\"u4e9448e3\" class=\"ne-p\"><span class=\"ne-text\">mpx v2.7 基于 webpack5 彻底重构了框架的核心编译构建流程，利用持久化缓存大幅度提升了编译构建速度，最高提升可达 10 倍。除此之外，mpx v2.7 版本还带来了一系列重要的功能更新，包括分包输出能力增强，完善的单元测试支持和用户 rules 应用等</span></p><h3 id=\"aiwRw\"><span class=\"ne-text\">编译构建提速</span></h3><p id=\"u5b81ffdb\" class=\"ne-p\"><span class=\"ne-text\">随着小程序生态的日渐发展壮大，各类线上小程序业务体量和复杂度的不断升级，小程序的包体积从最开始的 2M 以内膨胀到 20M 甚至 30M，已经远远不复当初的小程序之名。随着小程序项目大小的不断增加，采用框架进行小程序开发的开发者们往往都会面临一个问题：框架的编译耗时过长</span></p><p id=\"u4ce182cf\" class=\"ne-p\"><span class=\"ne-text\"></span></p><p id=\"u38f15244\" class=\"ne-p\"><span class=\"ne-text\">在滴滴主小程序项目中，目前的总包体积已经超过 25M，包含近 30000 个 js 模块，400 多个页面和 3000 多个组件，在本地进行一次完整构建需要等待 15 分钟，CI 环境下甚至需要近半个小时，远远超出能够忍受的范围，对小程序开发体验和开发效率造成了极大的影响。虽然旧版本中的 watch 模式能够在很大程度上缓解我们在开发调试过程中面临的编译耗时问题，但我们在日常开发中，仍然有很多场景无法使用 watch 模式(首次构建、CI 环境、需真机预览等)，基于内存缓存的 watch 模式也无法长期运行。对于这个问题，我们在过去做了许多技术尝试，如支持 watch:prod 模式，局部编译，多线程编译，dll 预编译等等，但是在整体尝试下来这些方案要么收敛有限，要么适用面不足，都没能搜索到一个能从根本上解决问题的方案。</span></p><p id=\"u6a13e41e\" class=\"ne-p\"><span class=\"ne-text\"></span></p><p id=\"u07f649b5\" class=\"ne-p\"><span class=\"ne-text\">在 webpack5 发布之后，基于文件系统的持久化缓存能力的出现，让我们找到了问题的解决方案。对于 webpack5 来说，对比于 webpack4 有着非常多的升级改动，而 mpx 的编译构建在过去的版本中也存在着各种历史遗留问题，我们花了较长的时间吃透 webpack5 的源码以及重新思考 mpx 中存在的不合理设计，经过 3 个多月的开发，彻底重构了 mpx 的核心编译流程，使其能够完整安全地利用 webpack5 持久化缓存能力进行构建提速，同时也彻底解决了旧版 mpx 中存在的历史遗留问题。</span></p><p id=\"u74487a75\" class=\"ne-p\"><br></p><p id=\"u4a54a620\" class=\"ne-p\"><span class=\"ne-text\">对于编译提速，大部分人首先想到的是 vite，虽然 vite 是一个富有创造力的技术方案，但是在小程序场景下，却不一定是最合适的方案，这主要源于 vite 最核心的设计利用了现代浏览器原生支持的 esm，而目前没有任何一家小程序环境能够原生支持 esm，这就使得 vite 最核心的按需编译能力无法得到发挥，而 vite 使用 esbuild 带来的编译速度提升，在 webpack 环境中也可以选择使用 esbuild-loader 提供的能力来替换 babel/terser，而且目前 esbuild 提供的编译能力成熟度还远不能和 babel/terser 相比，再加上 mpx 的编译构建流程很大程度上依赖了 webpack 提供的能力，从成本和收益上考虑采用 webpack5 来说是更好的方案</span></p><h4 id=\"A1Q1L\"><span class=\"ne-text\">开启持久化缓存</span></h4><pre data-language=\"javascript\" id=\"t9h3k\" class=\"ne-codeblock language-javascript\">module.exports = {\n  cache: {\n    type: 'filesystem',\n    // 声明构建配置，注意如果声明某个文件夹为构建配置，需要在文件夹下放置空的 package.json文件，避免构建依赖收集时将主项目的依赖项视为构建依赖\n    buildDependencies: {\n      build: [resolve('build/')],\n      config: [resolve('config/')]\n    },\n    cacheDirectory: resolve('.cache/')\n  },\n  snapshot: {\n    // 如果希望修改 node_modules 下的文件时对应的缓存可以失效，可以将此处的配置改为 managedPaths: []\n    managedPaths: [resolve('node_modules/')]\n  },\n}</pre><h4 id=\"NOLRo\"><span class=\"ne-text\">总体收益</span></h4><p id=\"u5cd940c2\" class=\"ne-p\"><span class=\"ne-text\">在 webpack5 升级后，有缓存情况下(大部分场景)，本地构建耗时可降低至1分钟左右，CI 流程构建耗时可降低至3分钟以内，提速均达到10倍以上；无缓存情况下(少数场景)，本地构建耗时9分钟左右，CI构建耗时约16分钟，优化了大约40%。随着我们对 CI 流程的持久化缓存改造完成，可以确保在日常的大部分构建场景都会在有缓存的环境下进行</span></p><h3 id=\"xhkQG\"><span class=\"ne-text\">分包输出能力增强</span></h3><p id=\"u6f38a669\" class=\"ne-p\"><span class=\"ne-text\">在 mpx v2.7 版本中，我们对小程序分包能力的支持进行了进一步的完善增强</span></p><h4 id=\"NZNJ6\"><span class=\"ne-text\">独立分包初始化模块</span></h4><p id=\"u090485e8\" class=\"ne-p\"><span class=\"ne-text\">在过去的版本中，我们对独立分包进行过专门的构建支持，以满足独立分包资源独占的需求。不过在使用独立分包进行业务开发时，往往会面临一个棘手问题：初始化逻辑无处安放。这是由于独立分包没有 app.js，而在小程序中，组件的 js 逻辑会早于页面 js 执行，具体的执行顺序又和组件的嵌套关系有关，因此我们无法找到一个确定的代码位置来存放独立分包的初始化逻辑</span></p><p id=\"u158908b7\" class=\"ne-p\"><span class=\"ne-text\"></span></p><p id=\"u8af1bcc4\" class=\"ne-p\"><span class=\"ne-text\">在 mpx v2.7 中，针对独立分包新增了一个全新的增强特性，让用户能够声明独立分包的初始化模块，该模块将会在独立分包启动时全局最先执行，其实现思路大致如下：在构建时为独立分包中所有组件和页面都添加模块引用，指向用户声明的初始化模块，这样在独立分包启动时，无论哪个组件/页面的 js 最先执行，都能保障这个初始化模块最先执行，同时由于模块缓存的存在，后续的组件/页面执行时，该模块也不会被重复执行。</span></p><h4 id=\"jWbXg\"><span class=\"ne-text\">分包异步化</span></h4><p id=\"ufecfa293\" class=\"ne-p\"><span class=\"ne-text\">分包异步化是微信小程序在去年下半年提出的全新技术特性，该特性打破了传统分包只能引用自身和主包资源的规则限制，通过相关配置和声明，允许分包异步地引用其他分包内的资源，对于复杂小程序的包体积和加载性能优化具有极其重要的意义</span></p><p id=\"u7ec3c614\" class=\"ne-p\"><span class=\"ne-text\"></span></p><p id=\"u6b23a592\" class=\"ne-p\"><span class=\"ne-text\">在过去，受限于小程序分包资源引用规则，mpx 在编译构建时对于跨分包公用的资源有两种处理策略，其一是将其输出到主包中，让多个分包能够通过主包访问，这种策略下可以达到总包体积最优，但是往往会对主包体积造成过大的压力。当主包超出 2M 限制时，我们就需要采用第二种策略，将这部分跨分包共用的资源冗余地输出到各自的分包中，消除其对于主包体积的占用。在实际的 mpx 编译构建当中，这两种策略是同时存在的，具体什么时候采用哪种策略是根据资源类型和用户配置来决定的</span></p><p id=\"u7a2aeeba\" class=\"ne-p\"><br></p><p id=\"u15f04f4b\" class=\"ne-p\"><span class=\"ne-text\">由于分包异步化技术打破了传统分包资源引用规则的限制，理想情况下：我们可以做到主包不超限的同时总包无冗余，不过该技术目前也存在一些不足：一个跨平台支持度不佳，只有微信支持，然而支付宝也在推进该功能；二是对交互和体验会带来一些影响，同时存在业务改造成本，但这依然不妨碍该技术成为大型小程序优化包体积和加载性能的最优路径</span></p><p id=\"u8d63a003\" class=\"ne-p\"><img src=\"https://cdn.nlark.com/yuque/0/2022/png/732231/1650699968107-bfe9dc4d-2cdf-4e5b-93a1-c773a1d2766e.png\" width=\"774.4\" id=\"u67b76cf1\" class=\"ne-image\"></p><p id=\"uc0cb2ab8\" class=\"ne-p\"><span class=\"ne-text\">在 mpx v2.7 中对分包异步化中最常用的跨分包自定义组件引用进行了完整支持，与原生小程序不同，mpx 中资源的分包归属不由源码位置决定，而是由资源引用关系决定，因此在跨分包资源引用的场景下，用户需要声明引用的资源属于哪个分包，简单使用示例如下：</span></p><pre data-language=\"json\" id=\"w3CIn\" class=\"ne-codeblock language-json\">{\n  &quot;usingComponents&quot;: {\n    // 通过 root query 声明组件所属的分包，与 packages 语法下使用 root query 声明 package 所属分包的语义保持一致\n    &quot;button&quot;: &quot;../subPackageA/components/button?root=subPackageA&quot;,\n    &quot;list&quot;: &quot;../subPackageB/components/full-list?root=subPackageB&quot;,\n    &quot;simple-list&quot;: &quot;../components/simple-list&quot;\n  },\n  &quot;componentPlaceholder&quot;: {\n    &quot;button&quot;: &quot;view&quot;,\n    &quot;list&quot;: &quot;simple-list&quot;\n  }\n}</pre><h4 id=\"BcCTy\"><span class=\"ne-text\">单元测试支持</span></h4><p id=\"uaea12c5f\" class=\"ne-p\"><span class=\"ne-text\">mpx 自从 20 年开始就对单元测试有了初步的支持，但过去的单测方案在设计上存在一些缺陷，可用性不高，业务落地困难，在 mpx v2.7 中，重新设计了一套全新的技术方案，克服了原有方案中存在的所有问题，在可用性上得到了质的飞跃</span></p><ul class=\"ne-ul\"><li id=\"uda2439a9\"><span class=\"ne-text\">旧方案</span></li></ul><p id=\"u6e99243a\" class=\"ne-p\"><span class=\"ne-text\">通过 mpx 编译构建预先将完整的项目源码构建输出为原生小程序格式，再通过 jest + miniprogram-simulate 加载构建产出的原生小程序组件来执行测试 case。该方案的优点在于编译流程统一，方案实现成本较低，缺点在于执行任何 case 都需要执行完成的构建流程，耗时较长；而且构建本身不基于 jest 进行，也无法使用 jest 提供的模块 mock 功能</span></p><p id=\"u39071c3f\" class=\"ne-p\"><img src=\"https://cdn.nlark.com/yuque/0/2022/png/732231/1650700504522-96376a3d-276b-4f10-b14d-db86f456c71b.png\" width=\"804\" id=\"u4f8319cc\" class=\"ne-image\"></p><ul class=\"ne-ul\"><li id=\"u876c39df\"><span class=\"ne-text\">新方案</span></li></ul><p id=\"ub1d28991\" class=\"ne-p\"><span class=\"ne-text\">在 fork 了 miniprogram-simulate 仓库对其扩展了 load mpx 组件的能力，在资源加载的 transform 过程中通过 mpx-jest 插件将 mpx 组件编译为原生小程序组件，再将内容传递给 miniprogram-simulate 执行渲染并运行测试 case。该方案中模块加载完全基于 jest 并能够实现组件的按需编译，完美规避了旧方案中存在的问题，缺点在于编译流程基于 jest api 重构，与 mpx 基于 webpack 的编译流程独立，存在额外的维护成本，后续我们会将通用的编译逻辑抽离维护，在 webpack 和 jest 两侧复用</span></p><p id=\"u9f35bdf2\" class=\"ne-p\"><img src=\"https://cdn.nlark.com/yuque/0/2022/png/732231/1650700691862-fe9f8984-cc57-46f6-9959-74c1599c4474.png\" width=\"769.6\" id=\"u17aea790\" class=\"ne-image\"></p><h4 id=\"LrdwS\"><span class=\"ne-text\">分包预加载和预请求</span></h4><p id=\"uaa0cc7b1\" class=\"ne-p\"><span class=\"ne-text\">随着分包异步化技术的应用和微信对于分包预加载功能的修复，我们会重新梳理分包结构，优化资源加载，并配置合理的分包预加载规则加快后续页面的打开速度。</span></p><p id=\"uda78a605\" class=\"ne-p\"><span class=\"ne-text\"></span></p><p id=\"u295b698e\" class=\"ne-p\"><span class=\"ne-text\">预请求是我们在业务优化过程中探索出来的另一项优化手段，核心是在发生页面跳转时，把后一个页面所需的关键请求在发起跳转前提前发出，将业务请求与路由跳转并行化，以提升后一个页面的展现速度。目前我们通过这项技术大幅改善了预估页面的展现速度(提速约 40%)，后续我们会基于 request api 将预请求封装为通用技术能力，并在更大的业务范围内进行推广落地。</span></p><h3 id=\"oNxh3\"><span class=\"ne-text\">module.rules 复用</span></h3><p id=\"ubde958b2\" class=\"ne-p\"><span class=\"ne-text\">mpx 的单文件支持很大程度上参考了 vue-loader 的设计，在 vue-loader@15 版本之前，对于单文件组件中各个区块(block)的 loaders 应用逻辑默认内置在 loader 当中，如需对某些区块进行自定义配置，需要向 loader 和 options 中传递额外的 loader 应用规则，无法复用 webpack 配置的 module.rules 中已经定义好的规则，这往往会导致我们需要在 loader options 和 module.rules 中维护重复的 loader 规则，同样的问题也存在于旧版的 mpx-loader 中</span></p><p id=\"u74f91609\" class=\"ne-p\"><span class=\"ne-text\"></span></p><p id=\"udda2de0b\" class=\"ne-p\"><span class=\"ne-text\">在 vue-loader@15 版本发布之后，其通过克隆用户原始的 rules 的方式实现了 module.rules 的复用，用户不再需要往 loader options 中传递冗余的 loaders 规则，本次全新 mpx v2.7 版本也支持了该特性，我们使用了 webpack 提供的 matchResource 能力实现了 module.rules 的复用，该方案相较于 clone  rules 的方式实现起来更加简洁优雅</span></p></div>",
  "body_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"viewport\" content=\"fixed\" /><h3 data-lake-id=\"xd2sP\" id=\"xd2sP\"><span data-lake-id=\"u0e72d314\" id=\"u0e72d314\">mpx v2.7</span></h3><p data-lake-id=\"uc065cd6e\" id=\"uc065cd6e\"><span data-lake-id=\"u88ea86f8\" id=\"u88ea86f8\">mpx 是一款开源的增强型跨端小程序框架，它具有良好的开发体验，极致的应用性能和一份源码同构输出所有小程序平台及 web 环境的跨端能力。</span></p><p data-lake-id=\"uf9a33335\" id=\"uf9a33335\"><span data-lake-id=\"u1a3e62a9\" id=\"u1a3e62a9\">​</span><br></p><p data-lake-id=\"u4e9448e3\" id=\"u4e9448e3\"><span data-lake-id=\"u9d197b82\" id=\"u9d197b82\">mpx v2.7 基于 webpack5 彻底重构了框架的核心编译构建流程，利用持久化缓存大幅度提升了编译构建速度，最高提升可达 10 倍。除此之外，mpx v2.7 版本还带来了一系列重要的功能更新，包括分包输出能力增强，完善的单元测试支持和用户 rules 应用等</span></p><h3 data-lake-id=\"aiwRw\" id=\"aiwRw\"><span data-lake-id=\"u5ab8bb3b\" id=\"u5ab8bb3b\">编译构建提速</span></h3><p data-lake-id=\"u5b81ffdb\" id=\"u5b81ffdb\"><span data-lake-id=\"u9ca09af4\" id=\"u9ca09af4\">随着小程序生态的日渐发展壮大，各类线上小程序业务体量和复杂度的不断升级，小程序的包体积从最开始的 2M 以内膨胀到 20M 甚至 30M，已经远远不复当初的小程序之名。随着小程序项目大小的不断增加，采用框架进行小程序开发的开发者们往往都会面临一个问题：框架的编译耗时过长</span></p><p data-lake-id=\"u4ce182cf\" id=\"u4ce182cf\"><span data-lake-id=\"u28a6708d\" id=\"u28a6708d\">​</span><br></p><p data-lake-id=\"u38f15244\" id=\"u38f15244\"><span data-lake-id=\"u61727ea3\" id=\"u61727ea3\">在滴滴主小程序项目中，目前的总包体积已经超过 25M，包含近 30000 个 js 模块，400 多个页面和 3000 多个组件，在本地进行一次完整构建需要等待 15 分钟，CI 环境下甚至需要近半个小时，远远超出能够忍受的范围，对小程序开发体验和开发效率造成了极大的影响。虽然旧版本中的 watch 模式能够在很大程度上缓解我们在开发调试过程中面临的编译耗时问题，但我们在日常开发中，仍然有很多场景无法使用 watch 模式(首次构建、CI 环境、需真机预览等)，基于内存缓存的 watch 模式也无法长期运行。对于这个问题，我们在过去做了许多技术尝试，如支持 watch:prod 模式，局部编译，多线程编译，dll 预编译等等，但是在整体尝试下来这些方案要么收敛有限，要么适用面不足，都没能搜索到一个能从根本上解决问题的方案。</span></p><p data-lake-id=\"u6a13e41e\" id=\"u6a13e41e\"><span data-lake-id=\"u3e7cdc00\" id=\"u3e7cdc00\">​</span><br></p><p data-lake-id=\"u07f649b5\" id=\"u07f649b5\"><span data-lake-id=\"u1af570ce\" id=\"u1af570ce\">在 webpack5 发布之后，基于文件系统的持久化缓存能力的出现，让我们找到了问题的解决方案。对于 webpack5 来说，对比于 webpack4 有着非常多的升级改动，而 mpx 的编译构建在过去的版本中也存在着各种历史遗留问题，我们花了较长的时间吃透 webpack5 的源码以及重新思考 mpx 中存在的不合理设计，经过 3 个多月的开发，彻底重构了 mpx 的核心编译流程，使其能够完整安全地利用 webpack5 持久化缓存能力进行构建提速，同时也彻底解决了旧版 mpx 中存在的历史遗留问题。</span></p><p data-lake-id=\"u74487a75\" id=\"u74487a75\"><br></p><p data-lake-id=\"u4a54a620\" id=\"u4a54a620\"><span data-lake-id=\"u353c4170\" id=\"u353c4170\">对于编译提速，大部分人首先想到的是 vite，虽然 vite 是一个富有创造力的技术方案，但是在小程序场景下，却不一定是最合适的方案，这主要源于 vite 最核心的设计利用了现代浏览器原生支持的 esm，而目前没有任何一家小程序环境能够原生支持 esm，这就使得 vite 最核心的按需编译能力无法得到发挥，而 vite 使用 esbuild 带来的编译速度提升，在 webpack 环境中也可以选择使用 esbuild-loader 提供的能力来替换 babel/terser，而且目前 esbuild 提供的编译能力成熟度还远不能和 babel/terser 相比，再加上 mpx 的编译构建流程很大程度上依赖了 webpack 提供的能力，从成本和收益上考虑采用 webpack5 来说是更好的方案</span></p><h4 data-lake-id=\"A1Q1L\" id=\"A1Q1L\"><span data-lake-id=\"u20a41826\" id=\"u20a41826\">开启持久化缓存</span></h4><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22module.exports%20%3D%20%7B%5Cn%20%20cache%3A%20%7B%5Cn%20%20%20%20type%3A%20'filesystem'%2C%5Cn%20%20%20%20%2F%2F%20%E5%A3%B0%E6%98%8E%E6%9E%84%E5%BB%BA%E9%85%8D%E7%BD%AE%EF%BC%8C%E6%B3%A8%E6%84%8F%E5%A6%82%E6%9E%9C%E5%A3%B0%E6%98%8E%E6%9F%90%E4%B8%AA%E6%96%87%E4%BB%B6%E5%A4%B9%E4%B8%BA%E6%9E%84%E5%BB%BA%E9%85%8D%E7%BD%AE%EF%BC%8C%E9%9C%80%E8%A6%81%E5%9C%A8%E6%96%87%E4%BB%B6%E5%A4%B9%E4%B8%8B%E6%94%BE%E7%BD%AE%E7%A9%BA%E7%9A%84%20package.json%E6%96%87%E4%BB%B6%EF%BC%8C%E9%81%BF%E5%85%8D%E6%9E%84%E5%BB%BA%E4%BE%9D%E8%B5%96%E6%94%B6%E9%9B%86%E6%97%B6%E5%B0%86%E4%B8%BB%E9%A1%B9%E7%9B%AE%E7%9A%84%E4%BE%9D%E8%B5%96%E9%A1%B9%E8%A7%86%E4%B8%BA%E6%9E%84%E5%BB%BA%E4%BE%9D%E8%B5%96%5Cn%20%20%20%20buildDependencies%3A%20%7B%5Cn%20%20%20%20%20%20build%3A%20%5Bresolve('build%2F')%5D%2C%5Cn%20%20%20%20%20%20config%3A%20%5Bresolve('config%2F')%5D%5Cn%20%20%20%20%7D%2C%5Cn%20%20%20%20cacheDirectory%3A%20resolve('.cache%2F')%5Cn%20%20%7D%2C%5Cn%20%20snapshot%3A%20%7B%5Cn%20%20%20%20%2F%2F%20%E5%A6%82%E6%9E%9C%E5%B8%8C%E6%9C%9B%E4%BF%AE%E6%94%B9%20node_modules%20%E4%B8%8B%E7%9A%84%E6%96%87%E4%BB%B6%E6%97%B6%E5%AF%B9%E5%BA%94%E7%9A%84%E7%BC%93%E5%AD%98%E5%8F%AF%E4%BB%A5%E5%A4%B1%E6%95%88%EF%BC%8C%E5%8F%AF%E4%BB%A5%E5%B0%86%E6%AD%A4%E5%A4%84%E7%9A%84%E9%85%8D%E7%BD%AE%E6%94%B9%E4%B8%BA%20managedPaths%3A%20%5B%5D%5Cn%20%20%20%20managedPaths%3A%20%5Bresolve('node_modules%2F')%5D%5Cn%20%20%7D%2C%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22t9h3k%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h4 data-lake-id=\"NOLRo\" id=\"NOLRo\"><span data-lake-id=\"u73eee100\" id=\"u73eee100\">总体收益</span></h4><p data-lake-id=\"u5cd940c2\" id=\"u5cd940c2\"><span data-lake-id=\"u6f5c1a38\" id=\"u6f5c1a38\">在 webpack5 升级后，有缓存情况下(大部分场景)，本地构建耗时可降低至1分钟左右，CI 流程构建耗时可降低至3分钟以内，提速均达到10倍以上；无缓存情况下(少数场景)，本地构建耗时9分钟左右，CI构建耗时约16分钟，优化了大约40%。随着我们对 CI 流程的持久化缓存改造完成，可以确保在日常的大部分构建场景都会在有缓存的环境下进行</span></p><h3 data-lake-id=\"xhkQG\" id=\"xhkQG\"><span data-lake-id=\"u82cd2a32\" id=\"u82cd2a32\">分包输出能力增强</span></h3><p data-lake-id=\"u6f38a669\" id=\"u6f38a669\"><span data-lake-id=\"u851c1a63\" id=\"u851c1a63\">在 mpx v2.7 版本中，我们对小程序分包能力的支持进行了进一步的完善增强</span></p><h4 data-lake-id=\"NZNJ6\" id=\"NZNJ6\"><span data-lake-id=\"u616b5695\" id=\"u616b5695\">独立分包初始化模块</span></h4><p data-lake-id=\"u090485e8\" id=\"u090485e8\"><span data-lake-id=\"ueec3eadf\" id=\"ueec3eadf\">在过去的版本中，我们对独立分包进行过专门的构建支持，以满足独立分包资源独占的需求。不过在使用独立分包进行业务开发时，往往会面临一个棘手问题：初始化逻辑无处安放。这是由于独立分包没有 app.js，而在小程序中，组件的 js 逻辑会早于页面 js 执行，具体的执行顺序又和组件的嵌套关系有关，因此我们无法找到一个确定的代码位置来存放独立分包的初始化逻辑</span></p><p data-lake-id=\"u158908b7\" id=\"u158908b7\"><span data-lake-id=\"ua9b13d00\" id=\"ua9b13d00\">​</span><br></p><p data-lake-id=\"u8af1bcc4\" id=\"u8af1bcc4\"><span data-lake-id=\"uf1a5b1b0\" id=\"uf1a5b1b0\">在 mpx v2.7 中，针对独立分包新增了一个全新的增强特性，让用户能够声明独立分包的初始化模块，该模块将会在独立分包启动时全局最先执行，其实现思路大致如下：在构建时为独立分包中所有组件和页面都添加模块引用，指向用户声明的初始化模块，这样在独立分包启动时，无论哪个组件/页面的 js 最先执行，都能保障这个初始化模块最先执行，同时由于模块缓存的存在，后续的组件/页面执行时，该模块也不会被重复执行。</span></p><h4 data-lake-id=\"jWbXg\" id=\"jWbXg\"><span data-lake-id=\"ub120fe30\" id=\"ub120fe30\">分包异步化</span></h4><p data-lake-id=\"ufecfa293\" id=\"ufecfa293\"><span data-lake-id=\"u3b565b1d\" id=\"u3b565b1d\">分包异步化是微信小程序在去年下半年提出的全新技术特性，该特性打破了传统分包只能引用自身和主包资源的规则限制，通过相关配置和声明，允许分包异步地引用其他分包内的资源，对于复杂小程序的包体积和加载性能优化具有极其重要的意义</span></p><p data-lake-id=\"u7ec3c614\" id=\"u7ec3c614\"><span data-lake-id=\"ub43f214b\" id=\"ub43f214b\">​</span><br></p><p data-lake-id=\"u6b23a592\" id=\"u6b23a592\"><span data-lake-id=\"ue4eb0708\" id=\"ue4eb0708\">在过去，受限于小程序分包资源引用规则，mpx 在编译构建时对于跨分包公用的资源有两种处理策略，其一是将其输出到主包中，让多个分包能够通过主包访问，这种策略下可以达到总包体积最优，但是往往会对主包体积造成过大的压力。当主包超出 2M 限制时，我们就需要采用第二种策略，将这部分跨分包共用的资源冗余地输出到各自的分包中，消除其对于主包体积的占用。在实际的 mpx 编译构建当中，这两种策略是同时存在的，具体什么时候采用哪种策略是根据资源类型和用户配置来决定的</span></p><p data-lake-id=\"u7a2aeeba\" id=\"u7a2aeeba\"><br></p><p data-lake-id=\"u15f04f4b\" id=\"u15f04f4b\"><span data-lake-id=\"u8dd43b91\" id=\"u8dd43b91\">由于分包异步化技术打破了传统分包资源引用规则的限制，理想情况下：我们可以做到主包不超限的同时总包无冗余，不过该技术目前也存在一些不足：一个跨平台支持度不佳，只有微信支持，然而支付宝也在推进该功能；二是对交互和体验会带来一些影响，同时存在业务改造成本，但这依然不妨碍该技术成为大型小程序优化包体积和加载性能的最优路径</span></p><p data-lake-id=\"u8d63a003\" id=\"u8d63a003\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2022%2Fpng%2F732231%2F1650699968107-bfe9dc4d-2cdf-4e5b-93a1-c773a1d2766e.png%22%2C%22taskId%22%3A%22uf560d5d6-ef39-40fc-9e6c-51e44ee9cfd%22%2C%22clientId%22%3A%22uce0e548a-b4fc-4%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A774.4%2C%22height%22%3A482%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A101915%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A968%2C%22originHeight%22%3A602%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%E5%88%86%E5%8C%85B%20--%20-%20COMB%20COMC%20-%20IITIIIIIIIITIIT%20IIIIILI)%20%E5%88%86%E5%8C%85A%20%E5%88%86%E5%8C%85B%20%E5%88%86%E5%8C%85A%3AASYNC%20ASYNC%20-%20-%20COMC%20COMC%20CLONE%20PLACEHOLDER%20PLACEHOLDER%20%E5%8D%83%E4%B8%80%E4%B8%80%20%E4%B8%BB%E5%8C%85%20%E4%B8%BB%E5%8C%85%20SYNC%20SYNC%20COMA%20COMA%20COMB%20--%20%E4%BC%A0%E7%BB%9F%E5%88%86%E5%8C%85%E8%A7%84%E5%88%99%20%E5%88%86%E5%8C%85%E5%BC%82%E6%AD%A5%E5%8C%96%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A536.23926%2C%22y%22%3A60.102806%2C%22width%22%3A59.228210000000104%2C%22height%22%3A21.598833999999997%2C%22text%22%3A%22%E5%88%86%E5%8C%85B%22%7D%2C%7B%22x%22%3A509.3277%2C%22y%22%3A72.886665%2C%22width%22%3A11.830870000000061%2C%22height%22%3A31.14683500000001%2C%22text%22%3A%22--%22%7D%2C%7B%22x%22%3A509.3295%2C%22y%22%3A104.380974%2C%22width%22%3A11.031340000000057%2C%22height%22%3A24.23616600000001%2C%22text%22%3A%22-%22%7D%2C%7B%22x%22%3A575.9776%2C%22y%22%3A125.03097%2C%22width%22%3A63.72924999999998%2C%22height%22%3A20.30608000000001%2C%22text%22%3A%22COMB%22%7D%2C%7B%22x%22%3A783.5761%2C%22y%22%3A126.08229%2C%22width%22%3A64.81799999999998%2C%22height%22%3A20.25300999999999%2C%22text%22%3A%22COMC%22%7D%2C%7B%22x%22%3A508.38068%2C%22y%22%3A129.45961%2C%22width%22%3A11.46996999999999%2C%22height%22%3A21.927430000000015%2C%22text%22%3A%22-%22%7D%2C%7B%22x%22%3A559.2736%2C%22y%22%3A172.67117%2C%22width%22%3A360.70217%2C%22height%22%3A19.897370000000024%2C%22text%22%3A%22IITIIIIIIIITIIT%22%7D%2C%7B%22x%22%3A279.14655%2C%22y%22%3A193.81778%2C%22width%22%3A170.21385000000004%2C%22height%22%3A16.694639999999993%2C%22text%22%3A%22IIIIILI)%22%7D%2C%7B%22x%22%3A78.362946%2C%22y%22%3A218.05115%2C%22width%22%3A57.49461400000001%2C%22height%22%3A21.04846999999998%2C%22text%22%3A%22%E5%88%86%E5%8C%85A%22%7D%2C%7B%22x%22%3A287.0423%2C%22y%22%3A218.51305%2C%22width%22%3A59.34195%2C%22height%22%3A21.536100000000005%2C%22text%22%3A%22%E5%88%86%E5%8C%85B%22%7D%2C%7B%22x%22%3A536.3538%2C%22y%22%3A218.78642%2C%22width%22%3A135.54616%2C%22height%22%3A21.526399999999995%2C%22text%22%3A%22%E5%88%86%E5%8C%85A%3AASYNC%22%7D%2C%7B%22x%22%3A789.89246%2C%22y%22%3A224.02612%2C%22width%22%3A54.03953999999999%2C%22height%22%3A14.247640000000018%2C%22text%22%3A%22ASYNC%22%7D%2C%7B%22x%22%3A262.33978%2C%22y%22%3A231.07674%2C%22width%22%3A9.340019999999981%2C%22height%22%3A18.89392000000001%2C%22text%22%3A%22-%22%7D%2C%7B%22x%22%3A52.443966%2C%22y%22%3A255.36429%2C%22width%22%3A10.57732%2C%22height%22%3A18.967649999999963%2C%22text%22%3A%22-%22%7D%2C%7B%22x%22%3A116.15605%2C%22y%22%3A280.98737%2C%22width%22%3A65.40624%2C%22height%22%3A22.694999999999993%2C%22text%22%3A%22COMC%22%7D%2C%7B%22x%22%3A293.96848%2C%22y%22%3A283.70422%2C%22width%22%3A130.08227%2C%22height%22%3A20.557129999999972%2C%22text%22%3A%22COMC%20CLONE%22%7D%2C%7B%22x%22%3A546.6072%2C%22y%22%3A283.64108%2C%22width%22%3A120.36540000000002%2C%22height%22%3A21.701940000000036%2C%22text%22%3A%22PLACEHOLDER%22%7D%2C%7B%22x%22%3A757.3749%2C%22y%22%3A286.07486%2C%22width%22%3A118.88189999999997%2C%22height%22%3A17.732439999999997%2C%22text%22%3A%22PLACEHOLDER%22%7D%2C%7B%22x%22%3A365.97708%2C%22y%22%3A347.9742%2C%22width%22%3A63.53829999999999%2C%22height%22%3A22.20832999999999%2C%22text%22%3A%22%E5%8D%83%E4%B8%80%E4%B8%80%22%7D%2C%7B%22x%22%3A78.14031%2C%22y%22%3A377.48553%2C%22width%22%3A42.225390000000004%2C%22height%22%3A22.67469%2C%22text%22%3A%22%E4%B8%BB%E5%8C%85%22%7D%2C%7B%22x%22%3A536.8797%2C%22y%22%3A378.32925%2C%22width%22%3A42.02320000000009%2C%22height%22%3A23.185729999999978%2C%22text%22%3A%22%E4%B8%BB%E5%8C%85%22%7D%2C%7B%22x%22%3A354.4221%2C%22y%22%3A382.44238%2C%22width%22%3A43.51717000000002%2C%22height%22%3A16.729919999999993%2C%22text%22%3A%22SYNC%22%7D%2C%7B%22x%22%3A199.65979%2C%22y%22%3A383.96402%2C%22width%22%3A43.18942000000001%2C%22height%22%3A14.191959999999995%2C%22text%22%3A%22SYNC%22%7D%2C%7B%22x%22%3A116.94738%2C%22y%22%3A442.3168%2C%22width%22%3A65.17706%2C%22height%22%3A19.650879999999972%2C%22text%22%3A%22COMA%22%7D%2C%7B%22x%22%3A575.9977%2C%22y%22%3A444.0869%2C%22width%22%3A63.32479999999998%2C%22height%22%3A17.84693999999996%2C%22text%22%3A%22COMA%22%7D%2C%7B%22x%22%3A326.22455%2C%22y%22%3A444.30823%2C%22width%22%3A63.63839999999999%2C%22height%22%3A16.90617000000003%2C%22text%22%3A%22COMB%22%7D%2C%7B%22x%22%3A211.29756%2C%22y%22%3A493.27182%2C%22width%22%3A43.43231%2C%22height%22%3A10.868229999999983%2C%22text%22%3A%22--%22%7D%2C%7B%22x%22%3A192.02927%2C%22y%22%3A537.2713%2C%22width%22%3A134.44263%2C%22height%22%3A23.084169999999972%2C%22text%22%3A%22%E4%BC%A0%E7%BB%9F%E5%88%86%E5%8C%85%E8%A7%84%E5%88%99%22%7D%2C%7B%22x%22%3A657.4044%2C%22y%22%3A538.6407%2C%22width%22%3A110.6997%2C%22height%22%3A22.81970000000001%2C%22text%22%3A%22%E5%88%86%E5%8C%85%E5%BC%82%E6%AD%A5%E5%8C%96%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22id%22%3A%22u67b76cf1%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><p data-lake-id=\"uc0cb2ab8\" id=\"uc0cb2ab8\"><span data-lake-id=\"uf0599bb5\" id=\"uf0599bb5\">在 mpx v2.7 中对分包异步化中最常用的跨分包自定义组件引用进行了完整支持，与原生小程序不同，mpx 中资源的分包归属不由源码位置决定，而是由资源引用关系决定，因此在跨分包资源引用的场景下，用户需要声明引用的资源属于哪个分包，简单使用示例如下：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22json%22%2C%22code%22%3A%22%7B%5Cn%20%20%5C%22usingComponents%5C%22%3A%20%7B%5Cn%20%20%20%20%2F%2F%20%E9%80%9A%E8%BF%87%20root%20query%20%E5%A3%B0%E6%98%8E%E7%BB%84%E4%BB%B6%E6%89%80%E5%B1%9E%E7%9A%84%E5%88%86%E5%8C%85%EF%BC%8C%E4%B8%8E%20packages%20%E8%AF%AD%E6%B3%95%E4%B8%8B%E4%BD%BF%E7%94%A8%20root%20query%20%E5%A3%B0%E6%98%8E%20package%20%E6%89%80%E5%B1%9E%E5%88%86%E5%8C%85%E7%9A%84%E8%AF%AD%E4%B9%89%E4%BF%9D%E6%8C%81%E4%B8%80%E8%87%B4%5Cn%20%20%20%20%5C%22button%5C%22%3A%20%5C%22..%2FsubPackageA%2Fcomponents%2Fbutton%3Froot%3DsubPackageA%5C%22%2C%5Cn%20%20%20%20%5C%22list%5C%22%3A%20%5C%22..%2FsubPackageB%2Fcomponents%2Ffull-list%3Froot%3DsubPackageB%5C%22%2C%5Cn%20%20%20%20%5C%22simple-list%5C%22%3A%20%5C%22..%2Fcomponents%2Fsimple-list%5C%22%5Cn%20%20%7D%2C%5Cn%20%20%5C%22componentPlaceholder%5C%22%3A%20%7B%5Cn%20%20%20%20%5C%22button%5C%22%3A%20%5C%22view%5C%22%2C%5Cn%20%20%20%20%5C%22list%5C%22%3A%20%5C%22simple-list%5C%22%5Cn%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22w3CIn%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h4 data-lake-id=\"BcCTy\" id=\"BcCTy\"><span data-lake-id=\"u7a1813d8\" id=\"u7a1813d8\">单元测试支持</span></h4><p data-lake-id=\"uaea12c5f\" id=\"uaea12c5f\"><span data-lake-id=\"uada25438\" id=\"uada25438\">mpx 自从 20 年开始就对单元测试有了初步的支持，但过去的单测方案在设计上存在一些缺陷，可用性不高，业务落地困难，在 mpx v2.7 中，重新设计了一套全新的技术方案，克服了原有方案中存在的所有问题，在可用性上得到了质的飞跃</span></p><ul list=\"u19b3a84c\"><li fid=\"u850d89b5\" data-lake-id=\"uda2439a9\" id=\"uda2439a9\"><span data-lake-id=\"u4ba2003c\" id=\"u4ba2003c\">旧方案</span></li></ul><p data-lake-id=\"u6e99243a\" id=\"u6e99243a\"><span data-lake-id=\"u35f6ef04\" id=\"u35f6ef04\">通过 mpx 编译构建预先将完整的项目源码构建输出为原生小程序格式，再通过 jest + miniprogram-simulate 加载构建产出的原生小程序组件来执行测试 case。该方案的优点在于编译流程统一，方案实现成本较低，缺点在于执行任何 case 都需要执行完成的构建流程，耗时较长；而且构建本身不基于 jest 进行，也无法使用 jest 提供的模块 mock 功能</span></p><p data-lake-id=\"u39071c3f\" id=\"u39071c3f\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2022%2Fpng%2F732231%2F1650700504522-96376a3d-276b-4f10-b14d-db86f456c71b.png%22%2C%22taskId%22%3A%22u1be505e7-c211-4558-9fc3-698519642f9%22%2C%22clientId%22%3A%22uce0e548a-b4fc-4%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A804%2C%22height%22%3A320%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A90374%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A1005%2C%22originHeight%22%3A400%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22LOAD%20COMA.JS%20COMA.SPEC.JS%20COMA.MPX%20MPX%20COMPILE%20COMPONENTS%20COMPONENTS%20MINIPROGRAM-SIMULATE%20PAGES%20PAGES%20JEST%20%E6%97%A7%E7%89%88%E5%8D%95%E6%B5%8B%E6%96%B9%E6%A1%88%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A586.9641%2C%22y%22%3A65.20105%2C%22width%22%3A39.21595000000002%2C%22height%22%3A15.237130000000008%2C%22text%22%3A%22LOAD%22%7D%2C%7B%22x%22%3A412.12292%2C%22y%22%3A79.74368%2C%22width%22%3A88.78411999999997%2C%22height%22%3A23.220195000000004%2C%22text%22%3A%22COMA.JS%22%7D%2C%7B%22x%22%3A743.25653%2C%22y%22%3A80.69993%2C%22width%22%3A146.42882999999995%2C%22height%22%3A23.81546%2C%22text%22%3A%22COMA.SPEC.JS%22%7D%2C%7B%22x%22%3A66.7782%2C%22y%22%3A80.76185%2C%22width%22%3A115.56782000000001%2C%22height%22%3A21.19170000000001%2C%22text%22%3A%22COMA.MPX%22%7D%2C%7B%22x%22%3A228.58372%2C%22y%22%3A145.9058%2C%22width%22%3A121.36573999999999%2C%22height%22%3A19.888599999999997%2C%22text%22%3A%22MPX%20COMPILE%22%7D%2C%7B%22x%22%3A390.13956%2C%22y%22%3A164.29323%2C%22width%22%3A131.13934%2C%22height%22%3A22.849819999999994%2C%22text%22%3A%22COMPONENTS%22%7D%2C%7B%22x%22%3A55.09542%2C%22y%22%3A165.89473%2C%22width%22%3A131.92497%2C%22height%22%3A20.403059999999982%2C%22text%22%3A%22COMPONENTS%22%7D%2C%7B%22x%22%3A697.1024%2C%22y%22%3A165.99315%2C%22width%22%3A237.37099999999998%2C%22height%22%3A22.608989999999977%2C%22text%22%3A%22MINIPROGRAM-SIMULATE%22%7D%2C%7B%22x%22%3A423.50574%2C%22y%22%3A251.79214%2C%22width%22%3A65.20400999999998%2C%22height%22%3A21.94700000000003%2C%22text%22%3A%22PAGES%22%7D%2C%7B%22x%22%3A90.51756%2C%22y%22%3A251.99414%2C%22width%22%3A65.02483000000001%2C%22height%22%3A20.375920000000036%2C%22text%22%3A%22PAGES%22%7D%2C%7B%22x%22%3A794.75507%2C%22y%22%3A253.97813%2C%22width%22%3A44.88542999999993%2C%22height%22%3A17.590069999999997%2C%22text%22%3A%22JEST%22%7D%2C%7B%22x%22%3A436.3471%2C%22y%22%3A345.02945%2C%22width%22%3A130.77204%2C%22height%22%3A23.269749999999988%2C%22text%22%3A%22%E6%97%A7%E7%89%88%E5%8D%95%E6%B5%8B%E6%96%B9%E6%A1%88%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22id%22%3A%22u4f8319cc%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><ul list=\"u19b3a84c\" start=\"2\"><li fid=\"u850d89b5\" data-lake-id=\"u876c39df\" id=\"u876c39df\"><span data-lake-id=\"ubebdb409\" id=\"ubebdb409\">新方案</span></li></ul><p data-lake-id=\"ub1d28991\" id=\"ub1d28991\"><span data-lake-id=\"u3a459312\" id=\"u3a459312\">在 fork 了 miniprogram-simulate 仓库对其扩展了 load mpx 组件的能力，在资源加载的 transform 过程中通过 mpx-jest 插件将 mpx 组件编译为原生小程序组件，再将内容传递给 miniprogram-simulate 执行渲染并运行测试 case。该方案中模块加载完全基于 jest 并能够实现组件的按需编译，完美规避了旧方案中存在的问题，缺点在于编译流程基于 jest api 重构，与 mpx 基于 webpack 的编译流程独立，存在额外的维护成本，后续我们会将通用的编译逻辑抽离维护，在 webpack 和 jest 两侧复用</span></p><p data-lake-id=\"u9f35bdf2\" id=\"u9f35bdf2\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2022%2Fpng%2F732231%2F1650700691862-fe9f8984-cc57-46f6-9959-74c1599c4474.png%22%2C%22taskId%22%3A%22u89ea284c-75aa-44e8-bbc2-4f8ae19e3fd%22%2C%22clientId%22%3A%22uce0e548a-b4fc-4%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A769.6%2C%22height%22%3A287%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A63282%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A962%2C%22originHeight%22%3A359%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22-%20-%20-%20-%20-%20-%20-%20LOADMPX%20MPX%20JEST%20COMA.SPEC.JS%20COMA.MPX%20COMA.JS%20TRANSFORM%20MINIPROGRAM-SIMULATE%20%E6%96%B0%E7%89%88%E5%8D%95%E6%B5%8B%E6%96%B9%E6%A1%88%20JEST%20IIIIIIIIIIII%2F%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A330.37573%2C%22y%22%3A39.526928%2C%22width%22%3A14.107120000000009%2C%22height%22%3A11.349689000000005%2C%22text%22%3A%22-%22%7D%2C%7B%22x%22%3A283.80835%2C%22y%22%3A39.883526%2C%22width%22%3A13.887249999999995%2C%22height%22%3A11.306223999999993%2C%22text%22%3A%22-%22%7D%2C%7B%22x%22%3A307.07938%2C%22y%22%3A39.937138%2C%22width%22%3A13.933960000000013%2C%22height%22%3A11.026569000000002%2C%22text%22%3A%22-%22%7D%2C%7B%22x%22%3A162.57681%2C%22y%22%3A40.022884%2C%22width%22%3A14.435750000000013%2C%22height%22%3A10.146186%2C%22text%22%3A%22-%22%7D%2C%7B%22x%22%3A354.59158%2C%22y%22%3A40.104095%2C%22width%22%3A13.361319999999978%2C%22height%22%3A9.858550999999999%2C%22text%22%3A%22-%22%7D%2C%7B%22x%22%3A138.87143%2C%22y%22%3A40.196854%2C%22width%22%3A14.080929999999995%2C%22height%22%3A9.951766%2C%22text%22%3A%22-%22%7D%2C%7B%22x%22%3A378.7822%2C%22y%22%3A40.601906%2C%22width%22%3A14.070770000000039%2C%22height%22%3A9.440103999999998%2C%22text%22%3A%22-%22%7D%2C%7B%22x%22%3A499.36884%2C%22y%22%3A72.2097%2C%22width%22%3A95.33526000000006%2C%22height%22%3A19.069069999999996%2C%22text%22%3A%22LOADMPX%22%7D%2C%7B%22x%22%3A233.21156%2C%22y%22%3A72.59532%2C%22width%22%3A81.79772%2C%22height%22%3A19.024959999999993%2C%22text%22%3A%22MPX%20JEST%22%7D%2C%7B%22x%22%3A686.89386%2C%22y%22%3A87.227905%2C%22width%22%3A146.3302%2C%22height%22%3A24.068969999999993%2C%22text%22%3A%22COMA.SPEC.JS%22%7D%2C%7B%22x%22%3A79.53745%2C%22y%22%3A87.38294%2C%22width%22%3A116.95784999999998%2C%22height%22%3A20.306269999999998%2C%22text%22%3A%22COMA.MPX%22%7D%2C%7B%22x%22%3A364.40186%2C%22y%22%3A88.66936%2C%22width%22%3A89.77246000000002%2C%22height%22%3A22.21485%2C%22text%22%3A%22COMA.JS%22%7D%2C%7B%22x%22%3A226.21028%2C%22y%22%3A107.33295%2C%22width%22%3A91.09801999999996%2C%22height%22%3A16.80637%2C%22text%22%3A%22TRANSFORM%22%7D%2C%7B%22x%22%3A640.44763%2C%22y%22%3A173.71994%2C%22width%22%3A235.18622000000005%2C%22height%22%3A20.176089999999988%2C%22text%22%3A%22MINIPROGRAM-SIMULATE%22%7D%2C%7B%22x%22%3A206.6871%2C%22y%22%3A258.02744%2C%22width%22%3A132.34088000000003%2C%22height%22%3A22.04091999999997%2C%22text%22%3A%22%E6%96%B0%E7%89%88%E5%8D%95%E6%B5%8B%E6%96%B9%E6%A1%88%22%7D%2C%7B%22x%22%3A736.9614%2C%22y%22%3A260.18826%2C%22width%22%3A45.437400000000025%2C%22height%22%3A18.827909999999974%2C%22text%22%3A%22JEST%22%7D%2C%7B%22x%22%3A584.1392%2C%22y%22%3A310.36865%2C%22width%22%3A325.6662%2C%22height%22%3A16.29471000000001%2C%22text%22%3A%22IIIIIIIIIIII%2F%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22id%22%3A%22u17aea790%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><h4 data-lake-id=\"LrdwS\" id=\"LrdwS\"><span data-lake-id=\"ufa365019\" id=\"ufa365019\">分包预加载和预请求</span></h4><p data-lake-id=\"uaa0cc7b1\" id=\"uaa0cc7b1\"><span data-lake-id=\"u69031a88\" id=\"u69031a88\">随着分包异步化技术的应用和微信对于分包预加载功能的修复，我们会重新梳理分包结构，优化资源加载，并配置合理的分包预加载规则加快后续页面的打开速度。</span></p><p data-lake-id=\"uda78a605\" id=\"uda78a605\"><span data-lake-id=\"u1d00f538\" id=\"u1d00f538\">​</span><br></p><p data-lake-id=\"u295b698e\" id=\"u295b698e\"><span data-lake-id=\"u34dc8d8e\" id=\"u34dc8d8e\">预请求是我们在业务优化过程中探索出来的另一项优化手段，核心是在发生页面跳转时，把后一个页面所需的关键请求在发起跳转前提前发出，将业务请求与路由跳转并行化，以提升后一个页面的展现速度。目前我们通过这项技术大幅改善了预估页面的展现速度(提速约 40%)，后续我们会基于 request api 将预请求封装为通用技术能力，并在更大的业务范围内进行推广落地。</span></p><h3 data-lake-id=\"oNxh3\" id=\"oNxh3\"><span data-lake-id=\"uf5aedb46\" id=\"uf5aedb46\">module.rules 复用</span></h3><p data-lake-id=\"ubde958b2\" id=\"ubde958b2\"><span data-lake-id=\"u3f3151d8\" id=\"u3f3151d8\">mpx 的单文件支持很大程度上参考了 vue-loader 的设计，在 vue-loader@15 版本之前，对于单文件组件中各个区块(block)的 loaders 应用逻辑默认内置在 loader 当中，如需对某些区块进行自定义配置，需要向 loader 和 options 中传递额外的 loader 应用规则，无法复用 webpack 配置的 module.rules 中已经定义好的规则，这往往会导致我们需要在 loader options 和 module.rules 中维护重复的 loader 规则，同样的问题也存在于旧版的 mpx-loader 中</span></p><p data-lake-id=\"u74f91609\" id=\"u74f91609\"><span data-lake-id=\"u378eb4f6\" id=\"u378eb4f6\">​</span><br></p><p data-lake-id=\"udda2de0b\" id=\"udda2de0b\"><span data-lake-id=\"ua6c8fd2f\" id=\"ua6c8fd2f\">在 vue-loader@15 版本发布之后，其通过克隆用户原始的 rules 的方式实现了 module.rules 的复用，用户不再需要往 loader options 中传递冗余的 loaders 规则，本次全新 mpx v2.7 版本也支持了该特性，我们使用了 webpack 提供的 matchResource 能力实现了 module.rules 的复用，该方案相较于 clone  rules 的方式实现起来更加简洁优雅</span></p>",
  "body_draft_lake": "",
  "public": 0,
  "status": 1,
  "view_status": 0,
  "read_status": 1,
  "likes_count": 0,
  "comments_count": 0,
  "content_updated_at": "2022-04-26T17:04:14.000Z",
  "deleted_at": null,
  "created_at": "2022-04-23T06:54:28.000Z",
  "updated_at": "2022-04-26T17:04:14.000Z",
  "published_at": "2022-04-26T17:04:14.000Z",
  "first_published_at": "2022-04-23T06:56:53.220Z",
  "word_count": 3292,
  "cover": "https://cdn.nlark.com/yuque/0/2022/png/732231/1650699968107-bfe9dc4d-2cdf-4e5b-93a1-c773a1d2766e.png",
  "description": "mpx v2.7mpx 是一款开源的增强型跨端小程序框架，它具有良好的开发体验，极致的应用性能和一份源码同构输出所有小程序平台及 web 环境的跨端能力。mpx v2.7 基于 webpack5 彻底重构了框架的核心编译构建流程，利用持久化缓存大幅度提升了编译构建速度，最高提升可达 10 倍。...",
  "custom_description": null,
  "hits": 0,
  "_serializer": "v2.doc_detail"
}