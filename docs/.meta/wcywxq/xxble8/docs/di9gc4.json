{
  "id": 11440297,
  "slug": "di9gc4",
  "title": "React16 文档",
  "book_id": 25332296,
  "book": {
    "id": 25332296,
    "type": "Book",
    "slug": "xxble8",
    "name": "前端技术文章",
    "user_id": 732231,
    "description": "记录前端相关的技术性文章",
    "creator_id": 732231,
    "public": 0,
    "items_count": 23,
    "likes_count": 0,
    "watches_count": 1,
    "content_updated_at": "2022-06-15T01:16:19.043Z",
    "updated_at": "2023-11-11T18:11:38.000Z",
    "created_at": "2022-03-13T09:55:39.000Z",
    "namespace": "wcywxq/xxble8",
    "user": {
      "id": 732231,
      "type": "User",
      "login": "wcywxq",
      "name": "magic",
      "description": null,
      "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/732231/1606968271774-avatar/886ad88b-d2cc-4c9e-a674-f70eb51a679c.png",
      "books_count": 18,
      "public_books_count": 0,
      "followers_count": 0,
      "following_count": 0,
      "created_at": "2020-01-08T14:21:31.000Z",
      "updated_at": "2023-11-13T09:32:35.000Z",
      "_serializer": "v2.user"
    },
    "_serializer": "v2.book"
  },
  "user_id": 732231,
  "creator": {
    "id": 732231,
    "type": "User",
    "login": "wcywxq",
    "name": "magic",
    "description": null,
    "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/732231/1606968271774-avatar/886ad88b-d2cc-4c9e-a674-f70eb51a679c.png",
    "books_count": 18,
    "public_books_count": 0,
    "followers_count": 0,
    "following_count": 0,
    "created_at": "2020-01-08T14:21:31.000Z",
    "updated_at": "2023-11-13T09:32:35.000Z",
    "_serializer": "v2.user"
  },
  "format": "lake",
  "body": "<a name=\"fea6bf27\"></a>\n## 1. React 中的核心概念\n\n<a name=\"fbfd7594\"></a>\n### 虚拟DOM\n\n1. DOM 的本质是什么？\n\n> 浏览器中的概念，用`js`对象来表示页面上的元素，并提供了操作 `DOM` 对象的 API；\n\n\n2. 什么是 React 中的 虚拟DOM？（ 虚拟DOM 的本质）：\n\n> 用`js`对象来模拟 页面上的`DOM和DOM嵌套`\n\n\n3. 为什么要实现 虚拟DOM ？（ 虚拟DOM 的目的）：\n\n> 为了实现页面中，`DOM`元素的高效更新\n\n\n4. DOM 和 虚拟DOM 的区别：\n\n- `DOM`：浏览器中，提供的概念；用`js`对象，表示页面上的元素，并提供了操作元素的 `API`；\n- `虚拟DOM`：是框架中的概念；是开发框架的人员，手动用`js`对象来模拟`DOM`元素和嵌套关系；\n\n5. DOM 树的概念：\n\n> 一个网页的呈现过程：\n> 1. 浏览器请求服务器获取页面的 `html` 代码；\n> 2. 浏览器要先在内存中，解析 `DOM` 结构，并在浏览器内存中，渲染出一棵 `DOM` 树；\n> 3. 浏览器把 `DOM` 树，呈现到页面上；\n\n\n<a name=\"7e0b7eb8\"></a>\n### Diff算法\n\n1. tree diff：\n\n> 新旧两棵 `DOM` 树，逐层对比的过程，就是`tree diff`；\n> 当整棵`DOM`逐层对比完毕，则所有需要被按需更新的元素，必然能够被找到；\n\n\n2. component diff：\n\n> 在进行 `tree diff` 的时候，每一层中，组件级别的对比，叫做 `component diff`；\n> 如果对比前后，组件的类型相同，则**暂时**认为此组件不许要被更新；\n> 如果对比前后，组件的类型不同，则需要移除旧组件，创建新组件，并追加到页面上；\n\n\n3. element diff：\n\n> 在进行组件对比的时候，如果两个组件的类型相同，则需要进行元素级别的对比，这叫做`element diff`；\n\n\n<a name=\"42938890\"></a>\n## 2. React 中创建组件\n\n<a name=\"8a91dc29\"></a>\n### 使用构造函数来创建组件\n\n> 1、在组件中，必须要向外`return`一个合法的`jsx`创建的`虚拟DOM`元素；\n> 2、如果要接收外界传递的数据，需要在`构造函数`的参数列表中使用`props`来接收；\n> 3、无论是`vue`还是`react`，组件中的`props`永远都是只读`read-only`的，不能被重新赋值；\n> 4、组件的名称`首字母`必须是`大写`的\n> 5、省略 `.jsx` 文件名\n\n\n> 打开 `webpack.config.js`，并在导出的配置对象中，新增以下几个节点：\n\n\n```javascript\nresolve: {\n  extensions: [\".js\", \".jsx\", \".json\"];\n}\n```\n\n> 如果在一个组件中 `return` 一个 `null`，则表示此组件是空的，什么都不会渲染\n\n\n```jsx\nfunction Hello(props) {\n  return (\n    <div>\n      这是Hello组件 -- {props.name} -- {props.age} -- {props.gender}\n    </div>\n  );\n}\n\nconst user = {\n  name: \"大黄\",\n  age: 3,\n  gender: \"雄性\"\n};\n\nReactDOM.render(\n  <div>\n    <Hello {...user} />\n  </div>,\n  document.getElementById(\"#app\")\n);\n```\n\n<a name=\"1b01f0d6\"></a>\n### 使用 class 关键字来创建组件\n> `public`: 所有成员都可访问\n> `private`: 只有当前类可访问\n> `protected`: 只有当前类和其子类可访问，外部成员无法访问\n\n\n> `es6`中的`class关键字`，是实现`面向对象编程`的新形式，也叫做`语法糖`\n\n\n- constructor 构造器中的 super 函数\n\n> 在子类中， `this` 只能放到 `super` 之后使用\n> 子类中的 `super`，其实就是父类中，`contructor`构造器的一个引用\n\n\n- 最基本的组件结构\n\n> `render`函数的作用：渲染当前组件所对应的`虚拟DOM` 元素\n\n\n```jsx\nimport React from 'react'\nclass 组件名称 extends React.Component {\n    render() {\n        return <div>这是 class 创建的组件</div>\n    }\n}\n```\n\n- this.props 和 this.state\n\n> 1. `this.props` 接收外界传递的参数，`this.state` 设置私有数据\n> 2. 在 `class` 关键字创建的组件中，直接使用 `this.props` 访问传递过来的数据\n> 3. `props` 是只读的\n\n\n```jsx\nclass Movie extends React.Component {\n  constructor() {\n    super();\n    // 这里的 this.state = {}，就相当于 Vue中的data() { return {} }\n    this.state = {\n      msg: \"这是Movie组件的私有数据\"\n    };\n  }\n  render() {\n    {\n      /* 注意：在 class 组件内容，this 表示当前组件的实例对象 */\n    }\n    return <div>这是Movie组件 -- {this.props.name}</div>;\n  }\n}\nconst user = {\n  name: \"大黄\",\n  age: 3,\n  gender: \"雄性\"\n};\n\nReactDOM.render(\n  <div>\n    <Movie {...user} />\n    <h3>{this.state.msg}</h3>\n  </div>,\n  document.getElementById(\"#app\")\n);\n```\n\n<a name=\"03999182\"></a>\n### 两种创建组件的方式的对比\n\n> 使用 `class` 关键字创建的组件，有自己的 `私有数据(this.state)` 和 `生命周期`\n> 使用 `function` 创建的组件，只有 `props`，没有自己的 `私有数据` 和 `生命周期`\n> 有状态组件和无状态组件之间的 `本质区别`：有无 `state` 属性和 `生命周期函数`\n\n\n<a name=\"58370fd7\"></a>\n## 3. React 中 style 处理方式\n\n<a name=\"2dd25b8c\"></a>\n### 内联\n\n```jsx\nstyle = {{ color: red }}\n```\n\n<a name=\"css\"></a>\n### css\n\n> 1、如果直接导入 `css` 样式表，默认则是在全局上，整个项目都会生效\n> 2、css 模块化，只针对 `class` 选择器 和 `id` 选择器生效\n> 引用：`import style from './style.css'`\n\n\n<a name=\"79dde80c\"></a>\n## 4. React 中事件绑定\n\n1. 事件的名称都是 `React` 所提供的，因此名称的首字母必须大写`onClick`，`onMouseOver`\n2. 为事件提供的处理函数，必须是以下格式：\n\n```javascript\nonClick = { function }\n```\n\n3. 用的最多的事件绑定形式为：\n\n```jsx\n<button onClick={() => this.show(\"传参\")}>按钮</button>;\n\n// 事件的处理函数，需要定义为 一个箭头函数，然后赋值给 函数名称\nshow = arg1 => {\n  console.log(\"show方法\" + arg1);\n};\n```\n\n4. 在 `React` 中，如果想要修改 `state` 中的数据，推荐使用 `this.setState({ })`\n\n> 1、在`setState`中，只会把对应的 `state`状态更新，而不会覆盖其它的 `state`状态。\n> 2、`this.setState` 方法的执行时 `异步的`。\n> 3、如果在调用完 `this.setState`之后，又想立即拿到最新的`state`的值，需要使用 `this.setState({}, callback)`，第二个参数【回调函数】中获取。\n\n\n<a name=\"1007ed0a\"></a>\n## 5. 单向数据流(状态变化 => 自动更新页面)\n\n> 1、`React` 中，默认是 `单向数据流`，只能把 `state` 上的数据绑定到页面，无法把页面中数据的变化，自动同步回 `state`；如果需要把页面上数据的变化，保存到 `state`，需要手动监听`onChange` 事件，拿到最新的数据，手动调用 `this.setState({ })` 更改。\n> 2、当为文本框绑定 `value` 值以后，要么同时给标签提供一个 `readOnly` 属性，要么提供一个 `onChange` 事件处理函数。\n\n\n```jsx\n// 方案一：通过事件参数 e 来获取DOM元素的引用\n<input\n  type=\"text\"\n  value={this.state.msg}\n  onChange={e => this.textChanged(e)}\n/>;\n\ntextChanged = e => {\n  console.log(e.target.value);\n};\n\n// 方案二：通过ref 来获取DOM元素的引用  this.refs.引用名称\n<input\n  type=\"text\"\n  value={this.state.msg}\n  onChange={() => this.textChanged()}\n  ref=\"txt\"\n/>;\n\ntextChanged = () => {\n  console.log(this.refs.txt.value);\n};\n```\n\n<a name=\"0de76a84\"></a>\n## 6. 生命周期\n\n- 生命周期介绍\n\n> 每个组件的实例，从创建、到运行、直到销毁，在这个过程中，会触发一系列事件，这些事件就叫做组件的生命周期\n\n\n- React 的生命周期分为三个部分\n\n1. 组件创建阶段\n\n> 只执行一次\n\n\n> 1. `componentWillMount` => `挂载之前`\n> 2. `render` => `正在渲染，虚拟DOM创建到了内存中，还未挂载到页面上`\n> 3. `componentDidMount` => `挂载结束，需要操作DOM节点的初始化操作放在这里`\n\n\n2. 组件运行阶段：\n\n> 根据 `props` 属性或者 `state` 状态的改变，有选择性的执行 `0` 到 `多次`\n\n\n> 1. `props` 改变之后\n> 2. `componentWillReceiveProps` => 当一个挂载的组件接收到新的 `props` 的时候被调用\n> 3. `state` 改变之后\n> 4. `shouldComponentUpdate（nextprops, nextState）` => 当组件做出是否要更新 `DOM` 的决定的时候被调用，在改变状态的时候可以选择通过( `return true` )或者不通过( `return false`)\n> 5. `componentWillUpdate` => 在更新发生之前被调用\n> 6. `render` => 数据是新的，页面是旧的\n> \n7.`componentDidUpdate` => 数据是新的，页面已经变成了最新的\n\n\n3. 组件销毁阶段\n\n> 只执行一次\n\n\n> `componentWillUnmount` => 组件移除或者销毁的时候被调用\n\n\n<a name=\"6098aabc\"></a>\n## 7. 验证数据类型\n\n```javascript\nimport { ProtoTypes } from \"prop-types\";\n\n// 定义组件需要传入的参数\nMyCompo.protoTypes = {\n  a: ProtoTypes.string.isRequired,\n  b: ProtoTypes.string.isRequired,\n  c: ProtoTypes.number.isRequired\n};\n```\n\n<a name=\"57601065\"></a>\n## 8. flux\n\n<a name=\"e05dce83\"></a>\n### 简介\n\n> 传统的 `MVC` 和 `MVVM` 架构设计模式有一个致命的缺点：当项目越来越大、逻辑越来越复杂的时候，数据流动就越显得混乱。\n\n\n> `Flux` 是致力于解决数据有序传输问题的架构设计模式，来自 `Facebook`。`Flux` 中最大的哲学：数据是 `单向流动` 的。\n\n\n> [官方手册](https://github.com/facebook/flux/tree/master/examples/flux-concepts)\n\n\n> `Flux` 中最重要的四个概念：`Dispatcher`、`Store`、`View`、`Action`。\n\n![flux.png](https://cdn.nlark.com/yuque/0/2020/png/732231/1608703835856-e1263bac-124a-40da-ae3c-b45a4c8081ae.png#height=393&id=WJzYc&originHeight=393&originWidth=1300&originalType=binary&ratio=1&size=26132&status=done&style=none&width=1300)\n<a name=\"e2d6d0e3\"></a>\n### 基本概念\n\n1. 概述\n   - `flux` 是一个管理 `App` 中数据流动的模式。\n   - 最关键的概念：`数据的流动是单向的`。\n2. Dispatcher 调度者\n   - `Dispatcher` 接受 `action`，并且要把这些 `action` 分派给已经注册到 `Dispatcher` 的 `store` 上\n   - 所有的 `store` 都将接收所有的 `action`\n   - 在每个 `App` 中，应该确保只有一个 `Dispatcher` 的实例\n3. store 仓库\n   - `store` 是在 `App` 中持有数据的仓库\n   - 所有的 `store` 要在 `App` 的 `Dispatcher` 上注册，确保它们可以接收 `action`\n   - `store` 中的数据只能被 `action` 改变。\n   - `store` 中不能够有公共的 `setter`，只能有 `getter`\n   - `store` 决定了它们愿意响应哪些 `actions`\n   - 无论何时，`store` 中的数据发生改变，就会触发一个 `change` 事件\n   - 同一个 `App` 中可能有很多 `store`\n4. Action 行为\n   - `Action` 定义了 `App` 内部的 `API`\n   - 它们捕获所有可能改变 `App` 的途径和方法\n   - 它们是简单的`对象`，并且要有 `type属性` 和 `其他的一些数据属性`\n   - `Action` 应该有一个具有语义的、直观的表示它是做什么的名字\n   - 所有的`store`都将接收同一个`action`，并且通过这个 `action`，`store` 会知道它们要清除、更新哪些数据\n5. Views 视图\n   - `store` 中的数据被展示在了`view`上\n   - `View` 层可以使用任何框架\n   - 当一个视图想要获取 `store` 中的数据，它必须 `subscribe 订阅` 一下该 `store` 的`change` 事件\n   - 当 `store` 触发了 `change` 事件，此时 `view` 就能得到新的数据并且重新渲染\n   - 如果一个组件要使用 `store`，但是没有订阅这个 `store`，此时就会出错\n   - `Action` 最常见的产生原因是：在 `App` 中的某一个部分，因为用户的交互行为，而被此`view` `dispatch`出来了\n\n<a name=\"redux\"></a>\n### redux\n\n- 简介\n   - [官网](https://redux.js.org/)\n   - Redux 就是 Flux 思想在 React 中的实现\n   - Redux 是一个可预测状态的 Js app 容器\n   - `[通过例子来学习redux](https://github.com/reactjs/redux/tree/master/examples)`\n- Redux 创建的步骤\n   - 设置一个 `reducer`；\n   - 创建一个`store`，`Redux.createStore(reducer)`\n   - 创建 `render` 函数\n   - 注册 `render`，`store.subscribe(render)`\n   - 监听，此时要记得 `store.dispatch(action)`，不是直接修改`store`\n\n<a name=\"React-Redux\"></a>\n### React-Redux\n\n- 简介\n   - 将 `react` 和 `redux` 合并起来，可以让任何组件在任何地方看见 `store`\n   - [官方文档](https://github.com/reactjs/react-redux/tree/master/docs)\n   - `React-Redux` 给我们提供了：`Provider组件`，`connect函数`\n- Provider 组件\n\n> 1、使用 `react-redux` 提供的 `Provider` 组件传递 `store` 上下文之后，`包裹在其中的所有组件` 全都可以识别这个上下文\n\n\n> 2、在 `Provider` 组件内部的自定义组件可以使用 `connect()` 函数，但是在其外部的不可使用\n\n\n- connect 函数\n\n> 1、将 `React组件` 和 `Redux` 的 `store` 进行连接\n> 2、`connect` 提供了一个很方便的 `API` 能够适应绝大多数工作\n> 3、它没有更改你传进来的类，反而会返回一个已经连接好的新类\n> 4、提供了两个参数：`mapStateToProps`, `mapDispatchToProps`\n\n\n- mapStateToProps\n\n> 1、如果传入`mapStateToProps`，此时这个组件将订阅 `Redux` 中 `store` 的更新信息；\n> 2、这意味着无论任何时候 `store` 被更改了，`mapStateToProps` 函数都将会被调用，`mapStateToProps` 的返回值必须是一个 `Object`；\n> 3、这个 `Object` 将与组件的 `props` 融合，也就是说，这个返回的 `Object` 中的 `key` 将自动成为组件的 `props` 中的成员\n> 4、如果不想订阅 `store` 的更新，此时可以不传递这个参数，采用 `null` 占位\n\n\n- mapDispatchToProps\n\n> 如果向 `connect` 函数中传入了第二个参数，并且是一个 `函数`，那么这个函数将获得`dispatch` 方法，该方法可以通过 `emit action`，间接的导致 `state` 的改变\n> 可以使用 `bindActionCreators()` 方法轻松的将 `Action creator`(返回 `action` 的函数)接口和 `dispatch` 进行绑定\n\n\n- 书写规则\n\n> index.js\n\n\n```jsx\nimport React from \"react\";\nimport { render } from \"react-dom\";\nimport { createStore } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport App from \"./containers/App\";\nimport reducer from \"./reducers\";\n\nconst store = createStore(reducer);\nrender(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n```\n\n> App.js\n\n\n```jsx\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport * as actions from \"./actions\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super();\n    console.log(props);\n    // props: { r: 0, g: 0, b: 0, actions: 许多方法 }\n  }\n  render() {\n    return <div>这是App组件</div>;\n  }\n}\nconst mapStateToProps = state => {\n  return {\n    r: state.r,\n    g: state.g,\n    b: state.b\n  };\n};\nconst mapDispatchToProps = dispatch => {\n  return {\n    actions: bindActionCreators(actions, dispatch)\n  };\n};\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(App);\n```\n\n> reducer.js\n\n\n```jsx\nexport default (state, action) => {\n  if (state == undefined) {\n    state = { r: 0, g: 0, b: 0 };\n  }\n  if (action.type == \"ADD\") {\n    return {\n      ...state,\n      r: state.r + 1\n    };\n  }\n  return state;\n};\n```\n\n> actions.js\n\n\n```jsx\nexport const ADD = () => { \"type\": \"ADD\" }\n```\n\n<a name=\"b51b03f9\"></a>\n### 组件内部的 state 和全局的 state\n\n> 组件的数据三兄弟：`state`, `props`, `context` 不管是谁发生改变，都会引发 `render()` 执行，视图会被重绘。但是，构造函数不会被重新执行。所以不管基于什么理由，都不需要将全局的状态，用自己组件的 `state` 接收，而仅需要用`connect`连接一下全局`store`，然后使用`this.props.**`即可。\n\n\n<a name=\"c798dcc0\"></a>\n### reducer 模块化\n\n```javascript\nimport { combineReducers } from \"redux\";\nimport todoReducers from \"./todoReducer.js\"; // 标准reducer\n\nexport default combineReducers({\n  todoReducers\n});\n```\n\n<a name=\"redux-logger\"></a>\n### redux-logger\n\n> 打印 redux log\n\n\n```javascript\nimport { createStore, applyMiddleware } from \"redux\";\nimport { createLogger } from \"redux-logger\";\nimport reducer from \"./reducers/index.js\";\nlet store = createStore(reducer, applyMiddleware(createLogger()));\n```\n\n<a name=\"redux-thunk\"></a>\n### redux-thunk\n\n> 解决异步问题\n\n\n> `redux-thunk`帮助我们在所有的组件的 `props` 中添加了一个 `dispatch` 方法。\n\n\n> 当然，这个组件一定要被 `connect` 函数进行处理\n\n\n> 注意，如果使用 `thunk`，则 `connect` 函数不能传入第二个参数，否则会导致无法获取 `this.props.dispatch()`\n\n\n```javascript\n// 入口文件\nimport { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nlet store = createStore(reducer, applyMiddleware(thunk))\n\n/** 组件中 */\n/** 第一种写法，并没有将actions进行抽离 */\n$.get('/shu.txt', data => {\n    var number = Number(data);\n    this.props.dispatch({\n        \"type\": \"ADD\",\n        number\n    })\n})\n/** 第二种写法:常用 */\n// 可枚举\nimport * as actions from './actions/actions.js'\n\nclass ** extends React.Component {\n    ...\n    add() {\n        this.props.dispatch(actions.add())\n        this.props.dispatch(actions.minus())\n    }\n    ...\n}\n/** 现在，一般不会再写第二个参数了，就是说省略掉mapDispatchToProps */\nexport default connect(\n (state) => {\n    return {\n        state: state\n    }\n })(**)\n// actions.js\n/* 现在，异步的Action Creator不要直接返回 Action，而是返回一个携带 dispatch 的函数；这个函数相当于“延长”了dispatch的持续时间。*/\nexport const add = () => (dispatch, getState) => {\n    console.log(getState()) // getState可以获取全局数据\n    $.get('/shu.txt', data => {\n        var number = Number(data);\n        dispatch({\"type\": \"MINUS\", number})\n    })\n}\nexport const minus = () => { \"type\": \"MINUS\" }\n// reducer.js\nexport default (state = 0, action) => {\n    switch(action.type) {\n        case \"ADD\":\n            return state + action.number\n        case \"MINUS\":\n            return state - 1\n    }\n    return state;\n}\n```\n\n<a name=\"098d4e0d\"></a>\n## 9. react-router4.x\n\n<a name=\"61a3ec66\"></a>\n### 介绍\n\n- [官网](https://reacttraining.com/react-router)\n- 安装：`npm install react-router-dom`\n\n<a name=\"demo\"></a>\n### demo\n\n> `exact`表示严格匹配，如果路径为 `path=\"/\"` 的 `Route` 不设置该属性，则会自动向下匹配路由，即都会显示出来\n\n\n```jsx\nimport React from \"react\";\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\n\nfunction Index() {\n  return <h2>Home</h2>;\n}\n\nfunction About() {\n  return <h2>About</h2>;\n}\n\nfunction Users() {\n  return <h2>Users</h2>;\n}\n\nfunction AppRouter() {\n  return (\n    <Router>\n      <div>\n        <nav>\n          <ul>\n            <li>\n              <Link to=\"/\">Home</Link>\n            </li>\n            <li>\n              <Link to=\"/about/\">About</Link>\n            </li>\n            <li>\n              <Link to=\"/users/\">Users</Link>\n            </li>\n          </ul>\n        </nav>\n\n        <Route path=\"/\" exact component={Index} />\n        <Route path=\"/about/\" component={About} />\n        <Route path=\"/users/\" component={Users} />\n      </div>\n    </Router>\n  );\n}\nexport default AppRouter;\n```\n\n<a name=\"d32ddad9\"></a>\n### 动态路由\n\n```jsx\n// App.js 定义动态路由\n<Route path=\"/content/:aid\"></Route>\n// news.js 跳转\n<Link to={`/content/${value.aid}`}></Link>\n// Content.js 跳在生命周期函数中获取动态路由参数\nclass Content extends Component {\n    /* ... */\n      componentDidMount() {\n          const { match } = this.props\n          // 获取到传递的动态路由参数\n          console.log(match.params.aid)\n      }\n    /* ... */\n}\n```\n\n<a name=\"48d577aa\"></a>\n### get 传值\n\n```jsx\n// App.js 定义动态路由\n<Route path=\"/content\"></Route>\n// news.js 跳转\n<Link to={`/content?aid=${value.aid}`}></Link>\n// Content.js 跳在生命周期函数中获取动态路由参数\nclass Content extends Component {\n    ...\n      componentDidMount() {\n          const { location } = this.props\n          // 获取到传递的动态路由参数\n          console.log(location.search)\n      }\n    ...\n}\n```\n\n<a name=\"2a32f5ec\"></a>\n### js 控制跳转\n\n1. 引入 `Redirect` 组件\n2. 定义一个 `flag`\n\n```javascript\nthis.state = {\n  loginFlag: false\n};\n```\n\n3. 在 `Render` 中判断 `flag`，从而来决定是否进行跳转\n\n```jsx\nif (this.state.loginFlag) {\n  return <Redirect to={{ pathname: \"/\" }} />;\n}\n```\n\n4. 执行 `js` 跳转，通过 `js` 改变 `loginFlag` 的状态，改变以后，就可以从新的 `render` 中通过 `Redirect` 自己进行跳转\n\n<a name=\"6f5f6eed\"></a>\n### 模块化路由\n\n> router.js\n\n\n```jsx\nimport Home from './components/Home/'\nimport About from './components/About/'\nimport User from './components/User/'\nimport UserList from './User/UserList'\nimport UserInfo from './User/UserInfo'\n\nlet router = [\n    {\n        path: '/',\n        component: Home,\n        exact: true\n    },\n    {\n        path: '/about',\n        component: About\n    },\n    {\n        path: '/User',\n        component: User,\n        routes: [ // 嵌套路由设置\n            {\n                path: '/user/',\n                component: UserList\n            }, {\n                path: '/user/info',\n                component: UserInfo\n            }\n        ]\n    }\n]\nexport default router;\n```\n\n> App.js入口文件\n\n\n```jsx\nimport React, { Component } from \"react\";\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport router from \"./router.js\";\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <div>\n          {router.map((route, key) => {\n            if (route.exact) {\n              return (\n                <Route\n                  exact\n                  key={key}\n                  path={route.path}\n                  render={props => (\n                    // 向子组件传递子路由\n                    <route.component {...props} routes={route.routes} />\n                  )}\n                />\n              );\n            } else {\n              return (\n                <Route\n                  key={key}\n                  path={route.path}\n                  render={props => (\n                    // 向子组件传递子路由\n                    <route.component {...props} routes={route.routes} />\n                  )}\n                />\n              );\n            }\n          })}\n        </div>\n      </Router>\n    );\n  }\n}\n```\n\n> User.js\n\n\n```jsx\nimport React, { Component } from \"react\";\nimport { Route, Link } from \"react-router-dom\";\n\nclass User extends Component {\n  componentWillMount() {\n    console.log(this.props.routes);\n  }\n  render() {\n    return (\n      <div>\n        <div className=\"contenr\">\n          <div className=\"left\">\n            <Link />\n          </div>\n          <div className=\"right\">\n            {this.props.routes.map((route, key) => {\n              return (\n                <Route\n                  exact\n                  key={key}\n                  path={route.path}\n                  component={route.component}\n                />\n              );\n            })}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\nexport default User;\n```\n\n<a name=\"f757cf23\"></a>\n### 常用路由组件\n\n- _BrowserRouter_：使用 `HTML5` 历史记录 `API` (`pushState`，`replaceState` 和`popstate` 事件)的 `<Router>` 来保持 `UI` 与 `URL` 的同步\n- _HashRouter_：使用 `URL` 的哈希部分(即 `window.location.hash` )的<路由器>可以保持您的 `UI` 与 `URL` 同步。注意：哈希历史记录不支持 `location.key` 或 `location.state`。 在以前的版本中，我们试图缓和行为，但是有一些边缘案例我们无法解决。 任何需要此行为的代码或插件将无法正常工作。 由于此技术仅用于支持旧版浏览器，因此我们建议您将服务器配置为使用`<BrowserHistory>`\n- _Link_：渲染成 `a` 标签\n- _NavLink_：一种特殊版本的 `<Link>`，当与当前 `URL` 匹配时，将向渲染元素添加样式属性。\n- _Redirect_：重定向\n- _Route_：在位置与路线的路径匹配时呈现一些 `UI`。\n- _Switch_：只渲染命中的第一个 `<Route>` 或 `<Redirect>` 。\n\n```jsx\n  // Switch的用法\n  import { Switch, Route } from \"react-router\";\n  <Switch>\n      <Route exact path=\"/\" component={Home} />\n      <Route path=\"/about\" component={About} />\n      <Route path=\"/:user\" component={User} />\n      <Route component={NoMatch} />\n  </Switch>;\n```\n\n<a name=\"7557e52d\"></a>\n## 10. context\n\n- 介绍\n\n> 在一个典型的 `React` 应用中，数据是通过 `props` 属性自上而下（由父及子）进行传递的，但这种做法对于某些类型的属性而言是极其繁琐的（例如：地区偏好，`UI` 主题），这些属性是应用程序中许多组件都需要的。`Context` 提供了一种在组件之间共享此类值的方式，而不必显式地通过组件树的逐层传递 `props`。\n\n\n- 繁琐的 `props` 方式\n\n```jsx\nclass App extends React.Component {\n    render() {\n        return <Toolbar theme=\"dark\" />\n    }\n}\nfunction Toolbar(props) {\n    return (\n        <div>\n            <ThemeButton theme={props.theme} />\n        </div>\n    )\n}\nclass ThemeButton extends React.Component {\n    render() {\n        <Button theme={this.props.theme}>按钮</Button>\n    }\n}\n```\n\n- 使用 `context`\n\n```jsx\n// Context 可以让我们无须明确地传遍每一个组件，就能将值深入传递进组件树。\n// 为当前的 theme 创建一个 context（“light”为默认值）。  \nconst ThemeContext = React.createContext(\"light\");\n\nclass App extends React.Component {\n    render() {\n        // 使用一个 Provider 来将当前的 theme 传递给以下的组件树。\n        // 无论多深，任何组件都能读取这个值。\n        // 在这个例子中，我们将 “dark” 作为当前的值传递下去。\n        return (\n            <ThemeContext.Provider value=\"dark\">\n                <Toolbar />\n            </ThemeContext.Provider>\n        )\n    }\n}\nfunction ToolBar() {\n    return (\n        <div>\n            <ThemeButton />\n        </div>\n    )\n}\nclass ThemeButton extends React.Component {\n    // 指定 contextType 读取当前的 theme context。\n  // React 会往上找到最近的 theme Provider，然后使用它的值。\n    // 在这个例子中，当前的 theme 值为 “dark”。\n    static contextType = ThemeContext;\n    render() {\n        return <Button theme={this.context}>按钮</Button>\n    }\n}\n```\n\n<a name=\"663b2eaa\"></a>\n## 11. react-hooks\n\n> `Hook` 是 `React 16.8` 的新增特性。它可以让你在不编写 `class` 的情况下使用 `state` 以及其他的 `React` 特性。\n\n\n<a name=\"e1945b8c\"></a>\n### 11.1 State Hook\n\n> `useState` 就是一个 `Hook`，类似 `class` 组件的 `this.setState`，但是它不会把新的 `state` 和旧的 `state` 进行合并。`useState` 会返回一对值：_当前状态_ 和一个让你 _更新它的函数_，你可以在事件处理函数中或其他一些地方调用这个函数。\n\n\n- 计数器\n\n```jsx\nimport React, { useState } from 'react';\n\nfunction Example() {\n  // 声明一个叫 “count” 的 state 变量。\n  const [count, setCount] = useState(0);\n\n  return (\n    <div>\n      <p>You clicked {count} times</p>\n      <button onClick={() => setCount(count + 1)}>\n        Click me\n      </button>\n    </div>\n  );\n}\n\n// 等价的 class 示例\nclass Example extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      count: 0\n    };\n  }\n\n  render() {\n    return (\n      <div>\n        <p>You clicked {this.state.count} times</p>\n        <button onClick={() => this.setState({ count: this.state.count + 1 })}>\n          Click me\n        </button>\n      </div>\n    );\n  }\n}\n```\n\n- 声明多个 `state` 变量\n\n```jsx\nfunction ExampleWithManyStates() {\n  // 声明多个 state 变量！\n  const [age, setAge] = useState(42);\n  const [fruit, setFruit] = useState('banana');\n  const [todos, setTodos] = useState([{ text: 'Learn Hooks' }]);\n  // ...\n}\n```\n\n- 什么是 `Hook`\n\n> `Hook` 是一些可以让你在函数组件里“钩入” `React state` 及生命周期等特性的函数。`Hook` 不能在 `class` 组件中使用 —— 这使得你不使用 `class` 也能使用 `React`。\n\n\n- 惰性 state\n\n```jsx\nconst [state, setState] = useState(() => {\n  const initialState = someExpensiveComputation(props);\n  return initialState;\n});\n```\n\n<a name=\"372afb18\"></a>\n### 11.2 Effect Hook\n\n> `Effect Hook` 可以让你在函数组件中执行副作用操作\n\n\n<a name=\"4e2a4a64\"></a>\n#### (1) 无需清除的 `Effect`\n\n> 有时候，我们只想在 `React` 更新 `DOM` 之后运行一些额外的代码。比如发送网络请求，手动变更 `DOM`，记录日志，这些都是常见的无需清除的操作。因为我们在执行完这些操作之后，就可以忽略他们了。\n\n\n- 使用 `class` 的示例\n\n```jsx\nclass Example extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      count: 0\n    };\n  }\n\n  componentDidMount() {\n    document.title = `You clicked ${this.state.count} times`;\n  }\n  componentDidUpdate() {\n    document.title = `You clicked ${this.state.count} times`;\n  }\n\n  render() {\n    return (\n      <div>\n        <p>You clicked {this.state.count} times</p>\n        <button onClick={() => this.setState({ count: this.state.count + 1 })}>\n          Click me\n        </button>\n      </div>\n    );\n  }\n}\n```\n\n- 使用 `Hook` 的示例\n\n```jsx\nimport React, { useState, useEffect } from 'react';\n\nfunction Example() {\n  const [count, setCount] = useState(0);\n\n  useEffect(() => {\n    document.title = `You clicked ${count} times`;\n  });\n\n  return (\n    <div>\n      <p>You clicked {count} times</p>\n      <button onClick={() => setCount(count + 1)}>\n        Click me\n      </button>\n    </div>\n  );\n}\n```\n\n> `useEffect` 做了什么？ 通过使用这个 `Hook`，你可以告诉 `React` 组件需要在渲染后执行某些操作。`React` 会保存你传递的函数（我们将它称之为 “`effect`”），并且在执行 `DOM` 更新之后调用它。在这个 `effect` 中，我们设置了 `document` 的 `title` 属性，不过我们也可以执行数据获取或调用其他命令式的 API。\n\n\n> 为什么在组件内部调用 `useEffect`？ 将 `useEffect` 放在组件内部让我们可以在 `effect` 中直接访问 `count` `state` 变量（或其他 `props`）。我们不需要特殊的 `API` 来读取它 —— 它已经保存在函数作用域中。`Hook` 使用了 `JavaScript` 的闭包机制，而不用在 `JavaScript` 已经提供了解决方案的情况下，还引入特定的 React API。\n\n\n> `useEffect` 会在每次渲染后都执行吗？ 是的，默认情况下，它在第一次渲染之后和每次更新之后都会执行。（我们稍后会谈到如何控制它。）你可能会更容易接受 `effect` 发生在“渲染之后”这种概念，不用再去考虑“挂载”还是“更新”。`React` 保证了每次运行 `effect` 的同时，`DOM` 都已经更新完毕。\n\n\n{% note warning, 与 `componentDidMount` 或 `componentDidUpdate` 不同，使用 `useEffect` 调度的 `effect` 不会阻塞浏览器更新屏幕，这让你的应用看起来响应更快。大多数情况下，`effect` 不需要同步地执行。在个别情况下（例如测量布局），有单独的 `useLayoutEffect Hook` 供你使用，其 `API` 与 `useEffect` 相同。 %}\n\n<a name=\"ae972712\"></a>\n#### (2) 需要清除的 `Effect`\n\n> 之前，我们研究了如何使用不需要清除的副作用，还有一些副作用是需要清除的。例如订阅外部数据源。这种情况下，清除工作是非常重要的，可以防止引起内存泄露！现在让我们来比较一下如何用 `Class` 和 `Hook` 来实现。\n\n\n- 使用 `class` 的示例\n\n```jsx\nclass FriendStatus extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { isOnline: null };\n    this.handleStatusChange = this.handleStatusChange.bind(this);\n  }\n\n  componentDidMount() {\n    ChatAPI.subscribeToFriendStatus(\n      this.props.friend.id,\n      this.handleStatusChange\n    );\n  }\n  componentWillUnmount() {\n    ChatAPI.unsubscribeFromFriendStatus(\n      this.props.friend.id,\n      this.handleStatusChange\n    );\n  }\n  handleStatusChange(status) {\n    this.setState({\n      isOnline: status.isOnline\n    });\n  }\n\n  render() {\n    if (this.state.isOnline === null) {\n      return 'Loading...';\n    }\n    return this.state.isOnline ? 'Online' : 'Offline';\n  }\n}\n```\n\n- 使用 `Hook` 的示例\n\n{% note warning, 眼尖的读者可能已经注意到了，这个示例还需要编写 componentDidUpdate 方法才能保证完全正确。我们先暂时忽略这一点，本章节中后续部分会介绍它。 %}\n\n```jsx\nimport React, { useState, useEffect } from 'react';\n\nfunction FriendStatus(props) {\n  const [isOnline, setIsOnline] = useState(null);\n\n  useEffect(() => {\n    function handleStatusChange(status) {\n      setIsOnline(status.isOnline);\n    }\n    ChatAPI.subscribeToFriendStatus(props.friend.id, handleStatusChange);\n    // Specify how to clean up after this effect:\n    return function cleanup() {\n      ChatAPI.unsubscribeFromFriendStatus(props.friend.id, handleStatusChange);\n    };\n  });\n\n  if (isOnline === null) {\n    return 'Loading...';\n  }\n  return isOnline ? 'Online' : 'Offline';\n}\n```\n\n> 为什么要在 `effect` 中返回一个函数？ 这是 `effect` 可选的清除机制。每个 `effect` 都可以返回一个清除函数。如此可以将添加和移除订阅的逻辑放在一起。它们都属于 `effect` 的一部分。\n\n\n> `React` 何时清除 `effect`？ `React` 会在组件卸载的时候执行清除操作。正如之前学到的，`effect` 在每次渲染的时候都会执行。这就是为什么 `React` 会在执行当前 `effect` 之前对上一个 `effect` 进行清除。我们稍后将讨论为什么这将助于避免 `bug` 以及如何在遇到性能问题时跳过此行为。\n\n\n{% note warning, 并不是必须为 `effect` 中返回的函数命名。这里我们将其命名为 `cleanup` 是为了表明此函数的目的，但其实也可以返回一个箭头函数或者给起一个别的名字。 %}\n\n<a name=\"ede5397c\"></a>\n### 11.3 Hook 规则\n\n<a name=\"ebf8e573\"></a>\n#### (1) 只在最顶层使用 `Hook`\n\n> 不要在循环，条件或嵌套函数中调用 `Hook`， 确保总是在你的 `React` 函数的最顶层调用他们。遵守这条规则，你就能确保 `Hook` 在每一次渲染中都按照同样的顺序被调用。这让 `React` 能够在多次的 `useState` 和 `useEffect` 调用之间保持 `hook` 状态的正确。\n\n\n<a name=\"e9917ca1\"></a>\n#### (2) 只在 `React` 函数中调用 `Hook`\n\n> 不要在普通的 `JavaScript` 函数中调用 `Hook`。你可以：\n\n\n- ✅ 在 `React` 的函数组件中调用 `Hook`\n- ✅ 在自定义 `Hook` 中调用其他 `Hook`\n\n<a name=\"27f298a9\"></a>\n### 11.4 自定义 Hook\n\n> 通过自定义 `Hook`，可以将组件逻辑提取到可重用的函数中。\n\n\n<a name=\"98ad417c\"></a>\n#### (1) 提取自定义 `Hook`\n\n> 当我们想在两个函数之间共享逻辑时，我们会把它提取到第三个函数中。而组件和 `Hook` 都是函数，所以也同样适用这种方式。\n\n\n> 自定义 `Hook` 是一个函数，其名称以 “`use`” 开头，函数内部可以调用其他的 `Hook`。 例如，下面的 `useFriendStatus` 是我们第一个自定义的 `Hook`:\n\n\n```jsx\nimport { useState, useEffect } from 'react';\n\nfunction useFriendStatus(friendID) {\n  const [isOnline, setIsOnline] = useState(null);\n\n  useEffect(() => {\n    function handleStatusChange(status) {\n      setIsOnline(status.isOnline);\n    }\n\n    ChatAPI.subscribeToFriendStatus(friendID, handleStatusChange);\n    return () => {\n      ChatAPI.unsubscribeFromFriendStatus(friendID, handleStatusChange);\n    };\n  });\n\n  return isOnline;\n}\n```\n\n<a name=\"44cb8100\"></a>\n#### (2) 使用自定义 `Hook`\n\n```jsx\nfunction FriendStatus(props) {\n  const isOnline = useFriendStatus(props.friend.id);\n\n  if (isOnline === null) {\n    return 'Loading...';\n  }\n  return isOnline ? 'Online' : 'Offline';\n}\n\nfunction FriendListItem(props) {\n  const isOnline = useFriendStatus(props.friend.id);\n\n  return (\n    <li style={{ color: isOnline ? 'green' : 'black' }}>\n      {props.friend.name}\n    </li>\n  );\n}\n```\n\n<a name=\"e74ceb0d\"></a>\n### 11.5 Hook API 索引\n\n> 参见 [Hook API](https://react.docschina.org/docs/hooks-reference.html)\n\n\n<a name=\"bd0a855d\"></a>\n#### 11.5.1 基础 Hook\n\n<a name=\"useState\"></a>\n##### useState\n\n> [点击跳转](#linkUseState)\n\n\n<a name=\"useEffect\"></a>\n##### useEffect\n\n> [点击跳转](#linkUseEffect)\n\n\n<a name=\"useContext\"></a>\n##### useContext\n\n> 订阅 `context` 的变化，感觉就是对于获取 `context` 的值换了一种写法而已。相对于之前的写法，在函数组件中添加 `context` 更加简单。\n\n\n```jsx\nconst context = React.createContext({})\nconst { Provider, Consumer  } = context; \n\n// hooks的写法\nclass App extends React.Component {\n    return (\n        <Provider value={{ name: 'li' }}> \n            <Hello/>\n        </Provider>\n    </div>\n}\nfunction Hello () {\n    const value = useContext(context); \n    return <h1>value: {value.name}</h1>\n}\n  \n// 原本的写法\nfunction Hello (props) {\n    function render ({name}) {\n      return <h1>value: {value.name}</h1>\n    }\n    return (\n      <Consumer>\n        {render}\n      </Consumer>\n    )\n}\n```\n\n<a name=\"b56fd342\"></a>\n#### 11.5.2 额外的 Hook\n\n<a name=\"useReducer\"></a>\n##### useReducer\n\n> 类似于 `redux` 那样的状态更新方案。使用场景（基本上就是 `redux` 的应用场景），管理的状态值是对象，并且键值较多。`state` 每个 `key` 修改的逻辑比较复杂，需要单独放到一个文件里面管理。\n\n\n```jsx\nconst initialState = {count: 0};\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case 'increment':\n      return {count: state.count + 1};\n    case 'decrement':\n      return {count: state.count - 1};\n    default:\n      throw new Error();\n  }\n}\n\nfunction Counter() {\n  const [state, dispatch] = useReducer(reducer, initialState);\n  return (\n    <>\n      Count: {state.count}\n      <button onClick={() => dispatch({type: 'increment'})}>+</button>\n      <button onClick={() => dispatch({type: 'decrement'})}>-</button>\n    </>\n  );\n}\n```\n\n<a name=\"useCallback\"></a>\n##### useCallback\n\n> 仅在指定的依赖项发生变化时，会返回一个新的函数引用，函数体并没有发生变化。\n\n\n```jsx\nconst memoizedCallback = useCallback(\n  () => {\n    doSomething(a, b);\n  },\n  [a, b],\n);\n```\n\n> 这样使用的好处：不会在每次组件 `render` 的时候，重新生成一个函数，节省开销。例如\n\n\n```jsx\nfunction f () {\n  const cacheCallback = useCallback(\n      () => {\n    \t\t\tdoSomething(a, b);\n  \t\t\t},\n  \t\t\t[a, b],\n  )\n  // 和下面这样的形式相比, 每次组件渲染的时候，都会重新创建一个 doSometing 函数\n  function doSometing (a,b) {}\n}\n```\n\n> 可以保持函数的引用保持不变。我们都知道在类组件，事件处理函数基本上都是通过 `this.method` 的方式绑定的，这样做的方式有一个好处，对方法的引用一直保持不变。 那么在函数组件就可以通过使用 `useCallback` 来实现。\n\n\n> 可以实现在子组件把该回调作为依赖处理。\n\n\n```jsx\nfunction Parent ({a, b}) {\n  const cacheCallback = useCallback(\n      () => {\n        doSometing(a, b);\n      },\n      [a, b]\n  )\n  return <Child handler={cacheCallback}/>\n}\n\nfunction Child ({ handler }) {\n  useEffect(() => {\n    handler();\n  }, [handler])\n}\n```\n\n<a name=\"useMemo\"></a>\n##### useMemo\n\n> 类似于 `vue` 的 `computed`，在依赖发生变化的时候重新计算缓存值。其实自己实现起来也很容易，和 `vue` 的计算属性不同的是，`vue` 的计算属性是自动收集依赖的，而使用 `useMeno` 需要手动在数组种传入依赖项。\n\n\n```jsx\nconst memoizedValue = useMemo(() => computeExpensiveValue(a, b), [a, b]);\n```\n\n> `useCallback(fn, deps)` 相当于 `useMemo(() => fn, deps)`\n\n\n<a name=\"useRef\"></a>\n##### useRef\n\n> 故名思义，该 `hook` 主要是用来获取组件实例或者或者 `dom` 节点。 但是它更有用的地方，是可以返回一个在组件生命周期内，引用不变的对象。\n\n\n```jsx\nfunction f () {\n  const elRef = uesRef(null);\n  return <div ref={elRef}></div>\n}\n```\n\n> 用来存储数据的话，考虑下面的场景。\n\n\n```jsx\nlet handler = () => {}; // 事件处理函数\n// 不使用 useRef, 可以使用函数外部的一个变量来存储数据\nfunction f () {\n  useEffect(() => {\n    window.addEventListener('scroll', handler)\n  }, [])\n  \n  const moveScroll = useCallback(\n    () => {\n      window.removeEventListener('scorll', handler)\n    },\n    []\n  )\n  \n  return <div onClick={moveScroll} ref={elRef}>移除scroll监听</div>\n}\n\n// 使用useRef的版本，可以使代码更加内聚。但是前提是必须要理解useRef这个hooks。\nfunction f () {\n  \n  const handler = useRef(null);\n  handler.current = () => {}  // 事件处理\n  \n  useEffect(() => {\n    window.addEventListener('scroll', handler.current)\n  }, [])\n  \n  const moveScroll = useCallback(\n    () => {\n      window.removeEventListener('scorll', handler.current)\n    },\n    []\n  )\n  \n  return <div onClick={moveScroll} ref={elRef}>移除scroll监听</div>\n}\n```\n\n<a name=\"useImperativeHandle\"></a>\n##### useImperativeHandle\n\n> `useImperativeHandle` 可以让你在使用 `ref` 时自定义暴露给父组件的实例值。\n\n\n```jsx\nconst Fancy = React.forwardRef((props, ref) => {\n    return <div>\n        <input type=\"text\" ref={ref}/>\n    </div> \n})\n\nfunction Hello () {\n    const ref = useRef(null); \n\n    useEffect(() => {\n        console.log('current', ref); // { current: Input }\n    }, [])\n\n    return <Fancy ref={ref}/>\n}\n```\n\n<a name=\"useLayoutEffect\"></a>\n##### useLayoutEffect\n\n> 函数签名和 `useEffect` 是一样的， 可以使用它来读取 `DOM` 布局并 `同步` 触发重渲染。\n\n\n<a name=\"useDebugValue\"></a>\n##### useDebugValue\n\n> 用来给 `hooks` 添加上打印信息。\n\n",
  "body_draft": "",
  "body_html": "<!doctype html><div class=\"lake-content\" typography=\"traditional\"><h2 id=\"fea6bf27\"><span class=\"ne-text\">1. React 中的核心概念</span></h2><p id=\"0c4d068e4aede2bc9d552ce387999b01_p_4\" class=\"ne-p\"><br></p><h3 id=\"fbfd7594\"><span class=\"ne-text\">虚拟DOM</span></h3><p id=\"7467903a77e4c43e92d4f196903d0bbe_p_5\" class=\"ne-p\"><br></p><ol class=\"ne-ol\"><li id=\"d0bcb9f715f91e757876e66225fabafc_li_3\"><span class=\"ne-text\">DOM 的本质是什么？</span></li></ol><p id=\"f23fb9c519ff30bfe03d0b2cc2cac85d_p_6\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"9f45c28262b3217ada896e2491fad327_p_7\" class=\"ne-p\"><span class=\"ne-text\">浏览器中的概念，用</span><code class=\"ne-code\"><span class=\"ne-text\">js</span></code><span class=\"ne-text\">对象来表示页面上的元素，并提供了操作 </span><code class=\"ne-code\"><span class=\"ne-text\">DOM</span></code><span class=\"ne-text\"> 对象的 API；</span></p></div><p id=\"92c8228235b93f7cc9ced6ac90fca3a6_p_8\" class=\"ne-p\"><br></p><ol start=\"2\" class=\"ne-ol\"><li id=\"3abf4d32b5c3b78653dcb11e1be6e321_li_4\"><span class=\"ne-text\">什么是 React 中的 虚拟DOM？（ 虚拟DOM 的本质）：</span></li></ol><p id=\"eadc4ec477465f1f239730d987d394b1_p_9\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"2851fd86e235ec8d492d1b7120d1d7a3_p_10\" class=\"ne-p\"><span class=\"ne-text\">用</span><code class=\"ne-code\"><span class=\"ne-text\">js</span></code><span class=\"ne-text\">对象来模拟 页面上的</span><code class=\"ne-code\"><span class=\"ne-text\">DOM和DOM嵌套</span></code></p></div><p id=\"828bea0262f636b25c97fbef525aed20_p_11\" class=\"ne-p\"><br></p><ol start=\"3\" class=\"ne-ol\"><li id=\"e745454f9992cdf37e096a5aa1dacc14_li_5\"><span class=\"ne-text\">为什么要实现 虚拟DOM ？（ 虚拟DOM 的目的）：</span></li></ol><p id=\"09a2b5671cf447a1a3529d71c89cf9e1_p_12\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"4f1628750ae1b420b76293bc84c4f401_p_13\" class=\"ne-p\"><span class=\"ne-text\">为了实现页面中，</span><code class=\"ne-code\"><span class=\"ne-text\">DOM</span></code><span class=\"ne-text\">元素的高效更新</span></p></div><p id=\"7cf79ceeaaf91ef14264b4c55c1c8c1d_p_14\" class=\"ne-p\"><br></p><ol start=\"4\" class=\"ne-ol\"><li id=\"e7e548d3b48115ec5caa71960da100b7_li_6\"><span class=\"ne-text\">DOM 和 虚拟DOM 的区别：</span></li></ol><p id=\"c53070088aadb43ef468f61fca8ca22a_p_15\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"5bec64fac03fd5bfea7c026d2c06be25_li_7\"><code class=\"ne-code\"><span class=\"ne-text\">DOM</span></code><span class=\"ne-text\">：浏览器中，提供的概念；用</span><code class=\"ne-code\"><span class=\"ne-text\">js</span></code><span class=\"ne-text\">对象，表示页面上的元素，并提供了操作元素的 </span><code class=\"ne-code\"><span class=\"ne-text\">API</span></code><span class=\"ne-text\">；</span></li></ul><ul class=\"ne-ul\"><li id=\"ac31fffe2ff0f85acfc8495e8141098e_li_8\"><code class=\"ne-code\"><span class=\"ne-text\">虚拟DOM</span></code><span class=\"ne-text\">：是框架中的概念；是开发框架的人员，手动用</span><code class=\"ne-code\"><span class=\"ne-text\">js</span></code><span class=\"ne-text\">对象来模拟</span><code class=\"ne-code\"><span class=\"ne-text\">DOM</span></code><span class=\"ne-text\">元素和嵌套关系；</span></li></ul><p id=\"42752743bc6d3f9f6c928fb47989b8c2_p_16\" class=\"ne-p\"><br></p><ol start=\"5\" class=\"ne-ol\"><li id=\"8e12d9b7521afe77b5074d90cb5051c7_li_9\"><span class=\"ne-text\">DOM 树的概念：</span></li></ol><p id=\"c5eaf555cee01ec836fc749258c6179d_p_17\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"4a5a5fc38dad38c3273b6ecac076fcce_p_18\" class=\"ne-p\"><span class=\"ne-text\">一个网页的呈现过程：</span></p><ol class=\"ne-ol\"><li id=\"39867423b1b5480bd9e1877d5c96473e_li_10\"><span class=\"ne-text\">浏览器请求服务器获取页面的 </span><code class=\"ne-code\"><span class=\"ne-text\">html</span></code><span class=\"ne-text\"> 代码；</span></li></ol><ol start=\"2\" class=\"ne-ol\"><li id=\"487aa961cb002de08f69ace12780bd10_li_11\"><span class=\"ne-text\">浏览器要先在内存中，解析 </span><code class=\"ne-code\"><span class=\"ne-text\">DOM</span></code><span class=\"ne-text\"> 结构，并在浏览器内存中，渲染出一棵 </span><code class=\"ne-code\"><span class=\"ne-text\">DOM</span></code><span class=\"ne-text\"> 树；</span></li></ol><ol start=\"3\" class=\"ne-ol\"><li id=\"79cf316051ca93a96895eac1189d8a8c_li_12\"><span class=\"ne-text\">浏览器把 </span><code class=\"ne-code\"><span class=\"ne-text\">DOM</span></code><span class=\"ne-text\"> 树，呈现到页面上；</span></li></ol></div><p id=\"bac67e7fcdfb0acc75b3cf54e2dd1141_p_19\" class=\"ne-p\"><br></p><h3 id=\"7e0b7eb8\"><span class=\"ne-text\">Diff算法</span></h3><p id=\"db841a6e995b001085603629a3ace379_p_20\" class=\"ne-p\"><br></p><ol class=\"ne-ol\"><li id=\"37ad3b60d5f7baeb054ef4113e71b646_li_13\"><span class=\"ne-text\">tree diff：</span></li></ol><p id=\"54d418504a63791b75a5f497078fa24a_p_21\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"04fc43d4e938bef0e078a53eeb159432_p_22\" class=\"ne-p\"><span class=\"ne-text\">新旧两棵 </span><code class=\"ne-code\"><span class=\"ne-text\">DOM</span></code><span class=\"ne-text\"> 树，逐层对比的过程，就是</span><code class=\"ne-code\"><span class=\"ne-text\">tree diff</span></code><span class=\"ne-text\">；</span></p><p id=\"e272b86e23629745ebc1b01912bb0ab4_p_23\" class=\"ne-p\"><span class=\"ne-text\">当整棵</span><code class=\"ne-code\"><span class=\"ne-text\">DOM</span></code><span class=\"ne-text\">逐层对比完毕，则所有需要被按需更新的元素，必然能够被找到；</span></p></div><p id=\"1f3b4b4a4867a8b756c196b38558d0c4_p_24\" class=\"ne-p\"><br></p><ol start=\"2\" class=\"ne-ol\"><li id=\"d90f8f6b75a75b1b5b111f6c6cf9e428_li_14\"><span class=\"ne-text\">component diff：</span></li></ol><p id=\"3afe72986fc83f6913935faccbcf69b2_p_25\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"ce37d3dbbc8573a09a2d04a0c22b9769_p_26\" class=\"ne-p\"><span class=\"ne-text\">在进行 </span><code class=\"ne-code\"><span class=\"ne-text\">tree diff</span></code><span class=\"ne-text\"> 的时候，每一层中，组件级别的对比，叫做 </span><code class=\"ne-code\"><span class=\"ne-text\">component diff</span></code><span class=\"ne-text\">；</span></p><p id=\"21e4722f57108d89af4de107e2ef7fea_p_27\" class=\"ne-p\"><span class=\"ne-text\">如果对比前后，组件的类型相同，则</span><strong><span class=\"ne-text\">暂时</span></strong><span class=\"ne-text\">认为此组件不许要被更新；</span></p><p id=\"715c21c6da9c1160f0a4103c5022fbab_p_28\" class=\"ne-p\"><span class=\"ne-text\">如果对比前后，组件的类型不同，则需要移除旧组件，创建新组件，并追加到页面上；</span></p></div><p id=\"d8f02fc6e1d9d5e68b5ff128662a6b29_p_29\" class=\"ne-p\"><br></p><ol start=\"3\" class=\"ne-ol\"><li id=\"03e4d77bb605828b2137f2d6b6d26b70_li_15\"><span class=\"ne-text\">element diff：</span></li></ol><p id=\"d657ac1e4c3211af4f7dcea889518735_p_30\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"c60179e1332775f5276444f60f4d8efa_p_31\" class=\"ne-p\"><span class=\"ne-text\">在进行组件对比的时候，如果两个组件的类型相同，则需要进行元素级别的对比，这叫做</span><code class=\"ne-code\"><span class=\"ne-text\">element diff</span></code><span class=\"ne-text\">；</span></p></div><p id=\"bb3e20f1faeaf6bf9497bffd7f381295_p_32\" class=\"ne-p\"><br></p><h2 id=\"42938890\"><span class=\"ne-text\">2. React 中创建组件</span></h2><p id=\"73b74e66f7d869f94eb34b57d63eae3f_p_33\" class=\"ne-p\"><br></p><h3 id=\"8a91dc29\"><span class=\"ne-text\">使用构造函数来创建组件</span></h3><p id=\"39abba9494ef6da94608fbd0e487aa60_p_34\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"8ae4b51de3aa4b9b2e3207da0c73f010_p_35\" class=\"ne-p\"><span class=\"ne-text\">1、在组件中，必须要向外</span><code class=\"ne-code\"><span class=\"ne-text\">return</span></code><span class=\"ne-text\">一个合法的</span><code class=\"ne-code\"><span class=\"ne-text\">jsx</span></code><span class=\"ne-text\">创建的</span><code class=\"ne-code\"><span class=\"ne-text\">虚拟DOM</span></code><span class=\"ne-text\">元素；</span></p><p id=\"6db3d1430c1581ed3f652410b78f349b_p_36\" class=\"ne-p\"><span class=\"ne-text\">2、如果要接收外界传递的数据，需要在</span><code class=\"ne-code\"><span class=\"ne-text\">构造函数</span></code><span class=\"ne-text\">的参数列表中使用</span><code class=\"ne-code\"><span class=\"ne-text\">props</span></code><span class=\"ne-text\">来接收；</span></p><p id=\"0ddb7900466734ed324e95736a2335a8_p_37\" class=\"ne-p\"><span class=\"ne-text\">3、无论是</span><code class=\"ne-code\"><span class=\"ne-text\">vue</span></code><span class=\"ne-text\">还是</span><code class=\"ne-code\"><span class=\"ne-text\">react</span></code><span class=\"ne-text\">，组件中的</span><code class=\"ne-code\"><span class=\"ne-text\">props</span></code><span class=\"ne-text\">永远都是只读</span><code class=\"ne-code\"><span class=\"ne-text\">read-only</span></code><span class=\"ne-text\">的，不能被重新赋值；</span></p><p id=\"02f2ab63b77cf569defaaf9505817fad_p_38\" class=\"ne-p\"><span class=\"ne-text\">4、组件的名称</span><code class=\"ne-code\"><span class=\"ne-text\">首字母</span></code><span class=\"ne-text\">必须是</span><code class=\"ne-code\"><span class=\"ne-text\">大写</span></code><span class=\"ne-text\">的</span></p><p id=\"d281cdbfc86e75c70664925cc990587d_p_39\" class=\"ne-p\"><span class=\"ne-text\">5、省略 </span><code class=\"ne-code\"><span class=\"ne-text\">.jsx</span></code><span class=\"ne-text\"> 文件名</span></p></div><p id=\"17b412f9fc3ec51ada5f566f0d09108c_p_40\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"83511cb291d24b0925bef0d85524cf6d_p_41\" class=\"ne-p\"><span class=\"ne-text\">打开 </span><code class=\"ne-code\"><span class=\"ne-text\">webpack.config.js</span></code><span class=\"ne-text\">，并在导出的配置对象中，新增以下几个节点：</span></p></div><p id=\"aebb7af96a9ee3c9b7a669f28fef1d7e_p_42\" class=\"ne-p\"><br></p><pre data-language=\"javascript\" id=\"78dfdb0e\" class=\"ne-codeblock language-javascript\">resolve: {\n  extensions: [&quot;.js&quot;, &quot;.jsx&quot;, &quot;.json&quot;];\n}</pre><p id=\"4930f2b57b08d977b4a7a79433f23490_p_43\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"61bd8238962cb382a712c91d5f0060b5_p_44\" class=\"ne-p\"><span class=\"ne-text\">如果在一个组件中 </span><code class=\"ne-code\"><span class=\"ne-text\">return</span></code><span class=\"ne-text\"> 一个 </span><code class=\"ne-code\"><span class=\"ne-text\">null</span></code><span class=\"ne-text\">，则表示此组件是空的，什么都不会渲染</span></p></div><p id=\"0e4b859961c17882302ca1144adad96d_p_45\" class=\"ne-p\"><br></p><pre data-language=\"jsx\" id=\"249952c7\" class=\"ne-codeblock language-jsx\">function Hello(props) {\n  return (\n    &lt;div&gt;\n      这是Hello组件 -- {props.name} -- {props.age} -- {props.gender}\n    &lt;/div&gt;\n  );\n}\n\nconst user = {\n  name: &quot;大黄&quot;,\n  age: 3,\n  gender: &quot;雄性&quot;\n};\n\nReactDOM.render(\n  &lt;div&gt;\n    &lt;Hello {...user} /&gt;\n  &lt;/div&gt;,\n  document.getElementById(&quot;#app&quot;)\n);</pre><p id=\"e81b6efc8e2153cf8aa53e3b04d7f22c_p_46\" class=\"ne-p\"><br></p><h3 id=\"1b01f0d6\"><span class=\"ne-text\">使用 class 关键字来创建组件</span></h3><div class=\"ne-quote\"><p id=\"3576b7bbf9bf06bf1e942a457a68ccc9\" class=\"ne-p\"><code class=\"ne-code\"><span class=\"ne-text\">public</span></code><span class=\"ne-text\">: 所有成员都可访问</span></p><p id=\"ab07d7d15e7f3646c9d9a5b84f0a7742\" class=\"ne-p\"><code class=\"ne-code\"><span class=\"ne-text\">private</span></code><span class=\"ne-text\">: 只有当前类可访问</span></p><p id=\"d215241e2f0dd46928f232d2f32ec034\" class=\"ne-p\"><code class=\"ne-code\"><span class=\"ne-text\">protected</span></code><span class=\"ne-text\">: 只有当前类和其子类可访问，外部成员无法访问</span></p></div><p id=\"478231c71c811ff5f728eef1ada97581_p_47\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"01b74e05cc43f87e64cdcb1f47067688_p_48\" class=\"ne-p\"><code class=\"ne-code\"><span class=\"ne-text\">es6</span></code><span class=\"ne-text\">中的</span><code class=\"ne-code\"><span class=\"ne-text\">class关键字</span></code><span class=\"ne-text\">，是实现</span><code class=\"ne-code\"><span class=\"ne-text\">面向对象编程</span></code><span class=\"ne-text\">的新形式，也叫做</span><code class=\"ne-code\"><span class=\"ne-text\">语法糖</span></code></p></div><p id=\"233f53790c0b9d757f931748dd4d9e1e_p_49\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"7fec6daf70a569170103541d790e7783_li_16\"><span class=\"ne-text\">constructor 构造器中的 super 函数</span></li></ul><p id=\"4108a5bc411c7547dc6876b612b07f81_p_50\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"de5bd9f3d71d4d02f24fe4aa79a8af4c_p_51\" class=\"ne-p\"><span class=\"ne-text\">在子类中， </span><code class=\"ne-code\"><span class=\"ne-text\">this</span></code><span class=\"ne-text\"> 只能放到 </span><code class=\"ne-code\"><span class=\"ne-text\">super</span></code><span class=\"ne-text\"> 之后使用</span></p><p id=\"c88dcdc31a48f7636b0a8d5a71a44997_p_52\" class=\"ne-p\"><span class=\"ne-text\">子类中的 </span><code class=\"ne-code\"><span class=\"ne-text\">super</span></code><span class=\"ne-text\">，其实就是父类中，</span><code class=\"ne-code\"><span class=\"ne-text\">contructor</span></code><span class=\"ne-text\">构造器的一个引用</span></p></div><p id=\"0c6a7643ebb3931744a90899eb00ce0b_p_53\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"efbb55e2fadfb7f9157581e13c14baed_li_17\"><span class=\"ne-text\">最基本的组件结构</span></li></ul><p id=\"e10b5c78ee7ba45f407740af88433fc9_p_54\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"00751873953c908ae166c1d3053c380a_p_55\" class=\"ne-p\"><code class=\"ne-code\"><span class=\"ne-text\">render</span></code><span class=\"ne-text\">函数的作用：渲染当前组件所对应的</span><code class=\"ne-code\"><span class=\"ne-text\">虚拟DOM</span></code><span class=\"ne-text\"> 元素</span></p></div><p id=\"a6e7204180aba568d27cc7b95d0717fd_p_56\" class=\"ne-p\"><br></p><pre data-language=\"jsx\" id=\"a0e0eae2\" class=\"ne-codeblock language-jsx\">import React from 'react'\nclass 组件名称 extends React.Component {\n    render() {\n        return &lt;div&gt;这是 class 创建的组件&lt;/div&gt;\n    }\n}</pre><p id=\"67592880a847e874a0da3af4d564ef1f_p_57\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"fcb47308805b718f67d9605b22266caf_li_18\"><span class=\"ne-text\">this.props 和 this.state</span></li></ul><p id=\"e3c9bad72638009a374744280c63ecc6_p_58\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><ol class=\"ne-ol\"><li id=\"221aff434e3ba6762c058447c2af2ca8_li_19\"><code class=\"ne-code\"><span class=\"ne-text\">this.props</span></code><span class=\"ne-text\"> 接收外界传递的参数，</span><code class=\"ne-code\"><span class=\"ne-text\">this.state</span></code><span class=\"ne-text\"> 设置私有数据</span></li></ol><ol start=\"2\" class=\"ne-ol\"><li id=\"bc0f899de6b3da276c67ff72941d3782_li_20\"><span class=\"ne-text\">在 </span><code class=\"ne-code\"><span class=\"ne-text\">class</span></code><span class=\"ne-text\"> 关键字创建的组件中，直接使用 </span><code class=\"ne-code\"><span class=\"ne-text\">this.props</span></code><span class=\"ne-text\"> 访问传递过来的数据</span></li></ol><ol start=\"3\" class=\"ne-ol\"><li id=\"4a420647076b9f2bebef26a1f137f162_li_21\"><code class=\"ne-code\"><span class=\"ne-text\">props</span></code><span class=\"ne-text\"> 是只读的</span></li></ol></div><p id=\"1b325e2e939e9ae8679222558eaaceb6_p_59\" class=\"ne-p\"><br></p><pre data-language=\"jsx\" id=\"2ef67ada\" class=\"ne-codeblock language-jsx\">class Movie extends React.Component {\n  constructor() {\n    super();\n    // 这里的 this.state = {}，就相当于 Vue中的data() { return {} }\n    this.state = {\n      msg: &quot;这是Movie组件的私有数据&quot;\n    };\n  }\n  render() {\n    {\n      /* 注意：在 class 组件内容，this 表示当前组件的实例对象 */\n    }\n    return &lt;div&gt;这是Movie组件 -- {this.props.name}&lt;/div&gt;;\n  }\n}\nconst user = {\n  name: &quot;大黄&quot;,\n  age: 3,\n  gender: &quot;雄性&quot;\n};\n\nReactDOM.render(\n  &lt;div&gt;\n    &lt;Movie {...user} /&gt;\n    &lt;h3&gt;{this.state.msg}&lt;/h3&gt;\n  &lt;/div&gt;,\n  document.getElementById(&quot;#app&quot;)\n);</pre><p id=\"daa3e859dfee1b8825cb9c219dcb2526_p_60\" class=\"ne-p\"><br></p><h3 id=\"03999182\"><span class=\"ne-text\">两种创建组件的方式的对比</span></h3><p id=\"d89d8c6a729313c0d25f9b1742c0d590_p_61\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"d8b1461137cee9193dc2713687773627_p_62\" class=\"ne-p\"><span class=\"ne-text\">使用 </span><code class=\"ne-code\"><span class=\"ne-text\">class</span></code><span class=\"ne-text\"> 关键字创建的组件，有自己的 </span><code class=\"ne-code\"><span class=\"ne-text\">私有数据(this.state)</span></code><span class=\"ne-text\"> 和 </span><code class=\"ne-code\"><span class=\"ne-text\">生命周期</span></code></p><p id=\"c5eb59c3db1b5eb58e2503a68a5d6379_p_63\" class=\"ne-p\"><span class=\"ne-text\">使用 </span><code class=\"ne-code\"><span class=\"ne-text\">function</span></code><span class=\"ne-text\"> 创建的组件，只有 </span><code class=\"ne-code\"><span class=\"ne-text\">props</span></code><span class=\"ne-text\">，没有自己的 </span><code class=\"ne-code\"><span class=\"ne-text\">私有数据</span></code><span class=\"ne-text\"> 和 </span><code class=\"ne-code\"><span class=\"ne-text\">生命周期</span></code></p><p id=\"145550f06530ca5c6168f328604ca623_p_64\" class=\"ne-p\"><span class=\"ne-text\">有状态组件和无状态组件之间的 </span><code class=\"ne-code\"><span class=\"ne-text\">本质区别</span></code><span class=\"ne-text\">：有无 </span><code class=\"ne-code\"><span class=\"ne-text\">state</span></code><span class=\"ne-text\"> 属性和 </span><code class=\"ne-code\"><span class=\"ne-text\">生命周期函数</span></code></p></div><p id=\"2a81d6eed31dfd1dc3c193bbdb75c1a1_p_65\" class=\"ne-p\"><br></p><h2 id=\"58370fd7\"><span class=\"ne-text\">3. React 中 style 处理方式</span></h2><p id=\"cf44cb59378505901ec625cdc88d7d91_p_66\" class=\"ne-p\"><br></p><h3 id=\"2dd25b8c\"><span class=\"ne-text\">内联</span></h3><p id=\"152302cc03cd3433e252fd8fbe4bade7_p_67\" class=\"ne-p\"><br></p><pre data-language=\"jsx\" id=\"88e82344\" class=\"ne-codeblock language-jsx\">style = {{ color: red }}</pre><p id=\"f67c084ec5a7dd840c4c56ee24cc368e_p_68\" class=\"ne-p\"><br></p><h3 id=\"css\"><span class=\"ne-text\">css</span></h3><p id=\"956e0d4312e941b77cd57ec35c294aff_p_69\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"2355075508029942417d9a007d259d90_p_70\" class=\"ne-p\"><span class=\"ne-text\">1、如果直接导入 </span><code class=\"ne-code\"><span class=\"ne-text\">css</span></code><span class=\"ne-text\"> 样式表，默认则是在全局上，整个项目都会生效</span></p><p id=\"c8285b53fb8479fe39e28f4d009512d5_p_71\" class=\"ne-p\"><span class=\"ne-text\">2、css 模块化，只针对 </span><code class=\"ne-code\"><span class=\"ne-text\">class</span></code><span class=\"ne-text\"> 选择器 和 </span><code class=\"ne-code\"><span class=\"ne-text\">id</span></code><span class=\"ne-text\"> 选择器生效</span></p><p id=\"165e74592abdb27ea6113ab25fddacb5_p_72\" class=\"ne-p\"><span class=\"ne-text\">引用：</span><code class=\"ne-code\"><span class=\"ne-text\">import style from './style.css'</span></code></p></div><p id=\"7e9db6e1dddd1090f9cbf7742b89f0d6_p_73\" class=\"ne-p\"><br></p><h2 id=\"79dde80c\"><span class=\"ne-text\">4. React 中事件绑定</span></h2><p id=\"d36608d2dcf9f070081537010b5adfb3_p_74\" class=\"ne-p\"><br></p><ol class=\"ne-ol\"><li id=\"f567b152a2f9b612663fb735301b5c0c_li_22\"><span class=\"ne-text\">事件的名称都是 </span><code class=\"ne-code\"><span class=\"ne-text\">React</span></code><span class=\"ne-text\"> 所提供的，因此名称的首字母必须大写</span><code class=\"ne-code\"><span class=\"ne-text\">onClick</span></code><span class=\"ne-text\">，</span><code class=\"ne-code\"><span class=\"ne-text\">onMouseOver</span></code></li></ol><ol start=\"2\" class=\"ne-ol\"><li id=\"b99b987c6c3168fddd9e8e5fe9882fb0_li_23\"><span class=\"ne-text\">为事件提供的处理函数，必须是以下格式：</span></li></ol><p id=\"cee026a6997be2fe2ca3b5d6e2ce2bf0_p_75\" class=\"ne-p\"><br></p><pre data-language=\"javascript\" id=\"ec9ca64e\" class=\"ne-codeblock language-javascript\">onClick = { function }</pre><p id=\"391eee0f96cca26f6e7df243706d21bf_p_76\" class=\"ne-p\"><br></p><ol start=\"3\" class=\"ne-ol\"><li id=\"5ff012d85c23eb4f46a16649c74d3cf7_li_24\"><span class=\"ne-text\">用的最多的事件绑定形式为：</span></li></ol><p id=\"9fc1a1e32cf7c324fef5888bc3009382_p_77\" class=\"ne-p\"><br></p><pre data-language=\"jsx\" id=\"5391dc0f\" class=\"ne-codeblock language-jsx\">&lt;button onClick={() =&gt; this.show(&quot;传参&quot;)}&gt;按钮&lt;/button&gt;;\n\n// 事件的处理函数，需要定义为 一个箭头函数，然后赋值给 函数名称\nshow = arg1 =&gt; {\n  console.log(&quot;show方法&quot; + arg1);\n};</pre><p id=\"f585fed1cef9af7641b65ac1c4919258_p_78\" class=\"ne-p\"><br></p><ol start=\"4\" class=\"ne-ol\"><li id=\"783d305fe40dd768d929270d5c8280b1_li_25\"><span class=\"ne-text\">在 </span><code class=\"ne-code\"><span class=\"ne-text\">React</span></code><span class=\"ne-text\"> 中，如果想要修改 </span><code class=\"ne-code\"><span class=\"ne-text\">state</span></code><span class=\"ne-text\"> 中的数据，推荐使用 </span><code class=\"ne-code\"><span class=\"ne-text\">this.setState({ })</span></code></li></ol><p id=\"f855fcce122120d1233c03106e601338_p_79\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"696eadf22c9b3e6d74a92809436289c2_p_80\" class=\"ne-p\"><span class=\"ne-text\">1、在</span><code class=\"ne-code\"><span class=\"ne-text\">setState</span></code><span class=\"ne-text\">中，只会把对应的 </span><code class=\"ne-code\"><span class=\"ne-text\">state</span></code><span class=\"ne-text\">状态更新，而不会覆盖其它的 </span><code class=\"ne-code\"><span class=\"ne-text\">state</span></code><span class=\"ne-text\">状态。</span></p><p id=\"0b623bace4b001accef071014eae32ea_p_81\" class=\"ne-p\"><span class=\"ne-text\">2、</span><code class=\"ne-code\"><span class=\"ne-text\">this.setState</span></code><span class=\"ne-text\"> 方法的执行时 </span><code class=\"ne-code\"><span class=\"ne-text\">异步的</span></code><span class=\"ne-text\">。</span></p><p id=\"f767a46c080be1842a0d40523bf6c6d7_p_82\" class=\"ne-p\"><span class=\"ne-text\">3、如果在调用完 </span><code class=\"ne-code\"><span class=\"ne-text\">this.setState</span></code><span class=\"ne-text\">之后，又想立即拿到最新的</span><code class=\"ne-code\"><span class=\"ne-text\">state</span></code><span class=\"ne-text\">的值，需要使用 </span><code class=\"ne-code\"><span class=\"ne-text\">this.setState({}, callback)</span></code><span class=\"ne-text\">，第二个参数【回调函数】中获取。</span></p></div><p id=\"187832c794b601f7094c1a9b20086a6b_p_83\" class=\"ne-p\"><br></p><h2 id=\"1007ed0a\"><span class=\"ne-text\">5. 单向数据流(状态变化 =&gt; 自动更新页面)</span></h2><p id=\"470257ffbff08ad0eedbc557452f8c66_p_84\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"8c04123b4b93e8023d693e0e69142df1_p_85\" class=\"ne-p\"><span class=\"ne-text\">1、</span><code class=\"ne-code\"><span class=\"ne-text\">React</span></code><span class=\"ne-text\"> 中，默认是 </span><code class=\"ne-code\"><span class=\"ne-text\">单向数据流</span></code><span class=\"ne-text\">，只能把 </span><code class=\"ne-code\"><span class=\"ne-text\">state</span></code><span class=\"ne-text\"> 上的数据绑定到页面，无法把页面中数据的变化，自动同步回 </span><code class=\"ne-code\"><span class=\"ne-text\">state</span></code><span class=\"ne-text\">；如果需要把页面上数据的变化，保存到 </span><code class=\"ne-code\"><span class=\"ne-text\">state</span></code><span class=\"ne-text\">，需要手动监听</span><code class=\"ne-code\"><span class=\"ne-text\">onChange</span></code><span class=\"ne-text\"> 事件，拿到最新的数据，手动调用 </span><code class=\"ne-code\"><span class=\"ne-text\">this.setState({ })</span></code><span class=\"ne-text\"> 更改。</span></p><p id=\"f3f5b26e00c50b7d34832d237a7ec412_p_86\" class=\"ne-p\"><span class=\"ne-text\">2、当为文本框绑定 </span><code class=\"ne-code\"><span class=\"ne-text\">value</span></code><span class=\"ne-text\"> 值以后，要么同时给标签提供一个 </span><code class=\"ne-code\"><span class=\"ne-text\">readOnly</span></code><span class=\"ne-text\"> 属性，要么提供一个 </span><code class=\"ne-code\"><span class=\"ne-text\">onChange</span></code><span class=\"ne-text\"> 事件处理函数。</span></p></div><p id=\"bd67236b6b40e1ddeba66aa4c905c5af_p_87\" class=\"ne-p\"><br></p><pre data-language=\"jsx\" id=\"dcccf122\" class=\"ne-codeblock language-jsx\">// 方案一：通过事件参数 e 来获取DOM元素的引用\n&lt;input\n  type=&quot;text&quot;\n  value={this.state.msg}\n  onChange={e =&gt; this.textChanged(e)}\n/&gt;;\n\ntextChanged = e =&gt; {\n  console.log(e.target.value);\n};\n\n// 方案二：通过ref 来获取DOM元素的引用  this.refs.引用名称\n&lt;input\n  type=&quot;text&quot;\n  value={this.state.msg}\n  onChange={() =&gt; this.textChanged()}\n  ref=&quot;txt&quot;\n/&gt;;\n\ntextChanged = () =&gt; {\n  console.log(this.refs.txt.value);\n};</pre><p id=\"ac4c0d2013d04adfac6d2e9459525ac0_p_88\" class=\"ne-p\"><br></p><h2 id=\"0de76a84\"><span class=\"ne-text\">6. 生命周期</span></h2><p id=\"ab51a4ad9cb9ee48199bb5c9fc6715a2_p_89\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"c5a00166b4440234586ae8d420a33795_li_26\"><span class=\"ne-text\">生命周期介绍</span></li></ul><p id=\"700ece5e21ebc17eb29d438c814531fe_p_90\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"f2f3e3a8e4f144f2576ae4891a44cdaf_p_91\" class=\"ne-p\"><span class=\"ne-text\">每个组件的实例，从创建、到运行、直到销毁，在这个过程中，会触发一系列事件，这些事件就叫做组件的生命周期</span></p></div><p id=\"f82a35c2fca60d6b3bdc5c1000201985_p_92\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"df39c17d8d6e9ad2352a5b3845ea1ea2_li_27\"><span class=\"ne-text\">React 的生命周期分为三个部分</span></li></ul><p id=\"92499751fabe053dd037c1574d6f4fb2_p_93\" class=\"ne-p\"><br></p><ol class=\"ne-ol\"><li id=\"c309d63068840b72a682da2ca4e8243c_li_28\"><span class=\"ne-text\">组件创建阶段</span></li></ol><p id=\"d0973d57fdd5c28d718b374e8fa011eb_p_94\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"ac56cecf83714e29159388dfdd5cabe9_p_95\" class=\"ne-p\"><span class=\"ne-text\">只执行一次</span></p></div><p id=\"cd1514dfedaab485e5767b166731e116_p_96\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><ol class=\"ne-ol\"><li id=\"953819c170b98a49fd10443e38645e27_li_29\"><code class=\"ne-code\"><span class=\"ne-text\">componentWillMount</span></code><span class=\"ne-text\"> =&gt; </span><code class=\"ne-code\"><span class=\"ne-text\">挂载之前</span></code></li></ol><ol start=\"2\" class=\"ne-ol\"><li id=\"b2e03a8bd5436bf4368eb22119b3243a_li_30\"><code class=\"ne-code\"><span class=\"ne-text\">render</span></code><span class=\"ne-text\"> =&gt; </span><code class=\"ne-code\"><span class=\"ne-text\">正在渲染，虚拟DOM创建到了内存中，还未挂载到页面上</span></code></li></ol><ol start=\"3\" class=\"ne-ol\"><li id=\"92c11e785bebd24ff064e78882fe1c38_li_31\"><code class=\"ne-code\"><span class=\"ne-text\">componentDidMount</span></code><span class=\"ne-text\"> =&gt; </span><code class=\"ne-code\"><span class=\"ne-text\">挂载结束，需要操作DOM节点的初始化操作放在这里</span></code></li></ol></div><p id=\"d6a51c95a901676ffc113c140e74f091_p_97\" class=\"ne-p\"><br></p><ol start=\"2\" class=\"ne-ol\"><li id=\"eb73e3c2bd5d157ca7522faafee84413_li_32\"><span class=\"ne-text\">组件运行阶段：</span></li></ol><p id=\"545db91b827f87cc9afe81c0f08a1a88_p_98\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"9a4316cc8d41ec7d92d6f724ffb305d0_p_99\" class=\"ne-p\"><span class=\"ne-text\">根据 </span><code class=\"ne-code\"><span class=\"ne-text\">props</span></code><span class=\"ne-text\"> 属性或者 </span><code class=\"ne-code\"><span class=\"ne-text\">state</span></code><span class=\"ne-text\"> 状态的改变，有选择性的执行 </span><code class=\"ne-code\"><span class=\"ne-text\">0</span></code><span class=\"ne-text\"> 到 </span><code class=\"ne-code\"><span class=\"ne-text\">多次</span></code></p></div><p id=\"ec69cd8d8f73ee437722723e0adf1fa7_p_100\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><ol class=\"ne-ol\"><li id=\"15f5ce53da1a0f97f1150f14991cd7e6_li_33\"><code class=\"ne-code\"><span class=\"ne-text\">props</span></code><span class=\"ne-text\"> 改变之后</span></li></ol><ol start=\"2\" class=\"ne-ol\"><li id=\"cf438b04dc54874e76b4802672eb3f7e_li_34\"><code class=\"ne-code\"><span class=\"ne-text\">componentWillReceiveProps</span></code><span class=\"ne-text\"> =&gt; 当一个挂载的组件接收到新的 </span><code class=\"ne-code\"><span class=\"ne-text\">props</span></code><span class=\"ne-text\"> 的时候被调用</span></li></ol><ol start=\"3\" class=\"ne-ol\"><li id=\"e8cbd0abb722e0a80627c7d835c3509c_li_35\"><code class=\"ne-code\"><span class=\"ne-text\">state</span></code><span class=\"ne-text\"> 改变之后</span></li></ol><ol start=\"4\" class=\"ne-ol\"><li id=\"1e0d78c088500777ab720b96f7919d18_li_36\"><code class=\"ne-code\"><span class=\"ne-text\">shouldComponentUpdate（nextprops, nextState）</span></code><span class=\"ne-text\"> =&gt; 当组件做出是否要更新 </span><code class=\"ne-code\"><span class=\"ne-text\">DOM</span></code><span class=\"ne-text\"> 的决定的时候被调用，在改变状态的时候可以选择通过( </span><code class=\"ne-code\"><span class=\"ne-text\">return true</span></code><span class=\"ne-text\"> )或者不通过( </span><code class=\"ne-code\"><span class=\"ne-text\">return false</span></code><span class=\"ne-text\">)</span></li></ol><ol start=\"5\" class=\"ne-ol\"><li id=\"bfd089f6fa611fda2b60c0621c0f4bde_li_37\"><code class=\"ne-code\"><span class=\"ne-text\">componentWillUpdate</span></code><span class=\"ne-text\"> =&gt; 在更新发生之前被调用</span></li></ol><ol start=\"6\" class=\"ne-ol\"><li id=\"af2f4cf88cf0585eba68933297ada96a_li_38\"><code class=\"ne-code\"><span class=\"ne-text\">render</span></code><span class=\"ne-text\"> =&gt; 数据是新的，页面是旧的</span></li></ol><p id=\"19f8cdbab36ddb7f1ac2087689e7e0d0_p_101\" class=\"ne-p\"><span class=\"ne-text\">7.</span><code class=\"ne-code\"><span class=\"ne-text\">componentDidUpdate</span></code><span class=\"ne-text\"> =&gt; 数据是新的，页面已经变成了最新的</span></p></div><p id=\"a2c2ab33193f15adcdff2e08f718d7c2_p_102\" class=\"ne-p\"><br></p><ol start=\"3\" class=\"ne-ol\"><li id=\"2a197f78dfc8047c958a58f54a35869e_li_39\"><span class=\"ne-text\">组件销毁阶段</span></li></ol><p id=\"c4eb78622bfacec164736bf4df40fa3b_p_103\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"4d3bad0e87341f734d48e790cc305a0b_p_104\" class=\"ne-p\"><span class=\"ne-text\">只执行一次</span></p></div><p id=\"702e00ceee7e1a86732f5fe484305638_p_105\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"7b38c40aa5f9503ee5554997227c1a69_p_106\" class=\"ne-p\"><code class=\"ne-code\"><span class=\"ne-text\">componentWillUnmount</span></code><span class=\"ne-text\"> =&gt; 组件移除或者销毁的时候被调用</span></p></div><p id=\"276871b94690e117cada332c7f3a696a_p_107\" class=\"ne-p\"><br></p><h2 id=\"6098aabc\"><span class=\"ne-text\">7. 验证数据类型</span></h2><p id=\"c6ea08d82bf830d4344bc47c75959696_p_108\" class=\"ne-p\"><br></p><pre data-language=\"javascript\" id=\"0b953c02\" class=\"ne-codeblock language-javascript\">import { ProtoTypes } from &quot;prop-types&quot;;\n\n// 定义组件需要传入的参数\nMyCompo.protoTypes = {\n  a: ProtoTypes.string.isRequired,\n  b: ProtoTypes.string.isRequired,\n  c: ProtoTypes.number.isRequired\n};</pre><p id=\"db6a3a7f6005176b48ff149f30b21edd_p_109\" class=\"ne-p\"><br></p><h2 id=\"57601065\"><span class=\"ne-text\">8. flux</span></h2><p id=\"e9ce31f642ab705821fd192984e0da5b_p_110\" class=\"ne-p\"><br></p><h3 id=\"e05dce83\"><span class=\"ne-text\">简介</span></h3><p id=\"7df9b20b6b924d2fc8c9e5079bc8d88d_p_111\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"929d4177cb6da986fbfb4a0cfb595749_p_112\" class=\"ne-p\"><span class=\"ne-text\">传统的 </span><code class=\"ne-code\"><span class=\"ne-text\">MVC</span></code><span class=\"ne-text\"> 和 </span><code class=\"ne-code\"><span class=\"ne-text\">MVVM</span></code><span class=\"ne-text\"> 架构设计模式有一个致命的缺点：当项目越来越大、逻辑越来越复杂的时候，数据流动就越显得混乱。</span></p></div><p id=\"45e36abc53ce1dcd83cb64d5bdb2b960_p_113\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"42daca6a078636a9bdb0004a9b6ba763_p_114\" class=\"ne-p\"><code class=\"ne-code\"><span class=\"ne-text\">Flux</span></code><span class=\"ne-text\"> 是致力于解决数据有序传输问题的架构设计模式，来自 </span><code class=\"ne-code\"><span class=\"ne-text\">Facebook</span></code><span class=\"ne-text\">。</span><code class=\"ne-code\"><span class=\"ne-text\">Flux</span></code><span class=\"ne-text\"> 中最大的哲学：数据是 </span><code class=\"ne-code\"><span class=\"ne-text\">单向流动</span></code><span class=\"ne-text\"> 的。</span></p></div><p id=\"bdad9f83e0239c83aaf356c272a6c0ea_p_115\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"ffdc7b0bce372747d06c905b88fd2640_p_116\" class=\"ne-p\"><a href=\"https://github.com/facebook/flux/tree/master/examples/flux-concepts\" data-href=\"https://github.com/facebook/flux/tree/master/examples/flux-concepts\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">官方手册</span></a></p></div><p id=\"df79537d6e51b378da87648af8c34dc2_p_117\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"18546108f056bdf7ee6d19322f0e3855_p_118\" class=\"ne-p\"><code class=\"ne-code\"><span class=\"ne-text\">Flux</span></code><span class=\"ne-text\"> 中最重要的四个概念：</span><code class=\"ne-code\"><span class=\"ne-text\">Dispatcher</span></code><span class=\"ne-text\">、</span><code class=\"ne-code\"><span class=\"ne-text\">Store</span></code><span class=\"ne-text\">、</span><code class=\"ne-code\"><span class=\"ne-text\">View</span></code><span class=\"ne-text\">、</span><code class=\"ne-code\"><span class=\"ne-text\">Action</span></code><span class=\"ne-text\">。</span></p></div><p id=\"d0c08438d746f74145c64c20ef564288_p_121\" class=\"ne-p\"><img src=\"https://cdn.nlark.com/yuque/0/2020/png/732231/1608703835856-e1263bac-124a-40da-ae3c-b45a4c8081ae.png\" width=\"1300\" id=\"WJzYc\" class=\"ne-image\"></p><h3 id=\"e2d6d0e3\"><span class=\"ne-text\">基本概念</span></h3><p id=\"263db23da7a1766ad534e8dc12a747a1_p_122\" class=\"ne-p\"><br></p><ol class=\"ne-ol\"><li id=\"b71f42fd17d7066796e288edf093b35d_li_40\"><span class=\"ne-text\">概述</span></li></ol><ul class=\"ne-list-wrap\"><ul ne-level=\"1\" class=\"ne-ul\"><li id=\"9d9fd1ab4feec9e62cec38c9a8786220_li_41\"><code class=\"ne-code\"><span class=\"ne-text\">flux</span></code><span class=\"ne-text\"> 是一个管理 </span><code class=\"ne-code\"><span class=\"ne-text\">App</span></code><span class=\"ne-text\"> 中数据流动的模式。</span></li></ul></ul><ul class=\"ne-list-wrap\"><ul ne-level=\"1\" class=\"ne-ul\"><li id=\"802bccf6f92b03b8b2d2448f97dec089_li_42\"><span class=\"ne-text\">最关键的概念：</span><code class=\"ne-code\"><span class=\"ne-text\">数据的流动是单向的</span></code><span class=\"ne-text\">。</span></li></ul></ul><ol start=\"2\" class=\"ne-ol\"><li id=\"3b3ad376083d1df38b8ee615f733c771_li_43\"><span class=\"ne-text\">Dispatcher 调度者</span></li></ol><ul class=\"ne-list-wrap\"><ul ne-level=\"1\" class=\"ne-ul\"><li id=\"7edb2c9d4af83956959b44f52be2f0a6_li_44\"><code class=\"ne-code\"><span class=\"ne-text\">Dispatcher</span></code><span class=\"ne-text\"> 接受 </span><code class=\"ne-code\"><span class=\"ne-text\">action</span></code><span class=\"ne-text\">，并且要把这些 </span><code class=\"ne-code\"><span class=\"ne-text\">action</span></code><span class=\"ne-text\"> 分派给已经注册到 </span><code class=\"ne-code\"><span class=\"ne-text\">Dispatcher</span></code><span class=\"ne-text\"> 的 </span><code class=\"ne-code\"><span class=\"ne-text\">store</span></code><span class=\"ne-text\"> 上</span></li></ul></ul><ul class=\"ne-list-wrap\"><ul ne-level=\"1\" class=\"ne-ul\"><li id=\"5fb2d22b713618b8dbaa626827890a2e_li_45\"><span class=\"ne-text\">所有的 </span><code class=\"ne-code\"><span class=\"ne-text\">store</span></code><span class=\"ne-text\"> 都将接收所有的 </span><code class=\"ne-code\"><span class=\"ne-text\">action</span></code></li></ul></ul><ul class=\"ne-list-wrap\"><ul ne-level=\"1\" class=\"ne-ul\"><li id=\"04313a7f9ed5e5ecb4c0782310572893_li_46\"><span class=\"ne-text\">在每个 </span><code class=\"ne-code\"><span class=\"ne-text\">App</span></code><span class=\"ne-text\"> 中，应该确保只有一个 </span><code class=\"ne-code\"><span class=\"ne-text\">Dispatcher</span></code><span class=\"ne-text\"> 的实例</span></li></ul></ul><ol start=\"3\" class=\"ne-ol\"><li id=\"4f03cc32012792db49edc6fb371e13eb_li_47\"><span class=\"ne-text\">store 仓库</span></li></ol><ul class=\"ne-list-wrap\"><ul ne-level=\"1\" class=\"ne-ul\"><li id=\"f7dcac766047cc3a4a93ad5b668ea247_li_48\"><code class=\"ne-code\"><span class=\"ne-text\">store</span></code><span class=\"ne-text\"> 是在 </span><code class=\"ne-code\"><span class=\"ne-text\">App</span></code><span class=\"ne-text\"> 中持有数据的仓库</span></li></ul></ul><ul class=\"ne-list-wrap\"><ul ne-level=\"1\" class=\"ne-ul\"><li id=\"258dac852530cbe7aac7313b95807f93_li_49\"><span class=\"ne-text\">所有的 </span><code class=\"ne-code\"><span class=\"ne-text\">store</span></code><span class=\"ne-text\"> 要在 </span><code class=\"ne-code\"><span class=\"ne-text\">App</span></code><span class=\"ne-text\"> 的 </span><code class=\"ne-code\"><span class=\"ne-text\">Dispatcher</span></code><span class=\"ne-text\"> 上注册，确保它们可以接收 </span><code class=\"ne-code\"><span class=\"ne-text\">action</span></code></li></ul></ul><ul class=\"ne-list-wrap\"><ul ne-level=\"1\" class=\"ne-ul\"><li id=\"69fe48f38a1d0e515e5e24f90b4df5ae_li_50\"><code class=\"ne-code\"><span class=\"ne-text\">store</span></code><span class=\"ne-text\"> 中的数据只能被 </span><code class=\"ne-code\"><span class=\"ne-text\">action</span></code><span class=\"ne-text\"> 改变。</span></li></ul></ul><ul class=\"ne-list-wrap\"><ul ne-level=\"1\" class=\"ne-ul\"><li id=\"d396234fb79bcb6f2715716afb6fcbab_li_51\"><code class=\"ne-code\"><span class=\"ne-text\">store</span></code><span class=\"ne-text\"> 中不能够有公共的 </span><code class=\"ne-code\"><span class=\"ne-text\">setter</span></code><span class=\"ne-text\">，只能有 </span><code class=\"ne-code\"><span class=\"ne-text\">getter</span></code></li></ul></ul><ul class=\"ne-list-wrap\"><ul ne-level=\"1\" class=\"ne-ul\"><li id=\"03326cdb1d635ef8b654d7b051eb5b89_li_52\"><code class=\"ne-code\"><span class=\"ne-text\">store</span></code><span class=\"ne-text\"> 决定了它们愿意响应哪些 </span><code class=\"ne-code\"><span class=\"ne-text\">actions</span></code></li></ul></ul><ul class=\"ne-list-wrap\"><ul ne-level=\"1\" class=\"ne-ul\"><li id=\"e249b63d86da62eefc2cc6e632fc17ca_li_53\"><span class=\"ne-text\">无论何时，</span><code class=\"ne-code\"><span class=\"ne-text\">store</span></code><span class=\"ne-text\"> 中的数据发生改变，就会触发一个 </span><code class=\"ne-code\"><span class=\"ne-text\">change</span></code><span class=\"ne-text\"> 事件</span></li></ul></ul><ul class=\"ne-list-wrap\"><ul ne-level=\"1\" class=\"ne-ul\"><li id=\"5ee060e30209a14d8b10e151f61e83e3_li_54\"><span class=\"ne-text\">同一个 </span><code class=\"ne-code\"><span class=\"ne-text\">App</span></code><span class=\"ne-text\"> 中可能有很多 </span><code class=\"ne-code\"><span class=\"ne-text\">store</span></code></li></ul></ul><ol start=\"4\" class=\"ne-ol\"><li id=\"3f3f3e4540f8c7177fdf5b95abd1136f_li_55\"><span class=\"ne-text\">Action 行为</span></li></ol><ul class=\"ne-list-wrap\"><ul ne-level=\"1\" class=\"ne-ul\"><li id=\"e3f538dae596ce71c8599318f2517904_li_56\"><code class=\"ne-code\"><span class=\"ne-text\">Action</span></code><span class=\"ne-text\"> 定义了 </span><code class=\"ne-code\"><span class=\"ne-text\">App</span></code><span class=\"ne-text\"> 内部的 </span><code class=\"ne-code\"><span class=\"ne-text\">API</span></code></li></ul></ul><ul class=\"ne-list-wrap\"><ul ne-level=\"1\" class=\"ne-ul\"><li id=\"cd70c22f3996fb56bd16bdb5824bfe70_li_57\"><span class=\"ne-text\">它们捕获所有可能改变 </span><code class=\"ne-code\"><span class=\"ne-text\">App</span></code><span class=\"ne-text\"> 的途径和方法</span></li></ul></ul><ul class=\"ne-list-wrap\"><ul ne-level=\"1\" class=\"ne-ul\"><li id=\"f18bf22919009aabf52c31b9b1848bc4_li_58\"><span class=\"ne-text\">它们是简单的</span><code class=\"ne-code\"><span class=\"ne-text\">对象</span></code><span class=\"ne-text\">，并且要有 </span><code class=\"ne-code\"><span class=\"ne-text\">type属性</span></code><span class=\"ne-text\"> 和 </span><code class=\"ne-code\"><span class=\"ne-text\">其他的一些数据属性</span></code></li></ul></ul><ul class=\"ne-list-wrap\"><ul ne-level=\"1\" class=\"ne-ul\"><li id=\"87103ff816d271f7f0d6fdc1c1c59b88_li_59\"><code class=\"ne-code\"><span class=\"ne-text\">Action</span></code><span class=\"ne-text\"> 应该有一个具有语义的、直观的表示它是做什么的名字</span></li></ul></ul><ul class=\"ne-list-wrap\"><ul ne-level=\"1\" class=\"ne-ul\"><li id=\"1be29909049a91b53f334e875c2f9d2f_li_60\"><span class=\"ne-text\">所有的</span><code class=\"ne-code\"><span class=\"ne-text\">store</span></code><span class=\"ne-text\">都将接收同一个</span><code class=\"ne-code\"><span class=\"ne-text\">action</span></code><span class=\"ne-text\">，并且通过这个 </span><code class=\"ne-code\"><span class=\"ne-text\">action</span></code><span class=\"ne-text\">，</span><code class=\"ne-code\"><span class=\"ne-text\">store</span></code><span class=\"ne-text\"> 会知道它们要清除、更新哪些数据</span></li></ul></ul><ol start=\"5\" class=\"ne-ol\"><li id=\"09001bde296975c5b3c13fcfadc222a8_li_61\"><span class=\"ne-text\">Views 视图</span></li></ol><ul class=\"ne-list-wrap\"><ul ne-level=\"1\" class=\"ne-ul\"><li id=\"8438c6f8979c6aa5931eb03140a0c505_li_62\"><code class=\"ne-code\"><span class=\"ne-text\">store</span></code><span class=\"ne-text\"> 中的数据被展示在了</span><code class=\"ne-code\"><span class=\"ne-text\">view</span></code><span class=\"ne-text\">上</span></li></ul></ul><ul class=\"ne-list-wrap\"><ul ne-level=\"1\" class=\"ne-ul\"><li id=\"d81df28fec7bd6affb0f95e2fb06b9ca_li_63\"><code class=\"ne-code\"><span class=\"ne-text\">View</span></code><span class=\"ne-text\"> 层可以使用任何框架</span></li></ul></ul><ul class=\"ne-list-wrap\"><ul ne-level=\"1\" class=\"ne-ul\"><li id=\"0ed7a7dd8c844ab76d4469ca33236227_li_64\"><span class=\"ne-text\">当一个视图想要获取 </span><code class=\"ne-code\"><span class=\"ne-text\">store</span></code><span class=\"ne-text\"> 中的数据，它必须 </span><code class=\"ne-code\"><span class=\"ne-text\">subscribe 订阅</span></code><span class=\"ne-text\"> 一下该 </span><code class=\"ne-code\"><span class=\"ne-text\">store</span></code><span class=\"ne-text\"> 的</span><code class=\"ne-code\"><span class=\"ne-text\">change</span></code><span class=\"ne-text\"> 事件</span></li></ul></ul><ul class=\"ne-list-wrap\"><ul ne-level=\"1\" class=\"ne-ul\"><li id=\"26837138a1ea83c1609d2b19f77d47a3_li_65\"><span class=\"ne-text\">当 </span><code class=\"ne-code\"><span class=\"ne-text\">store</span></code><span class=\"ne-text\"> 触发了 </span><code class=\"ne-code\"><span class=\"ne-text\">change</span></code><span class=\"ne-text\"> 事件，此时 </span><code class=\"ne-code\"><span class=\"ne-text\">view</span></code><span class=\"ne-text\"> 就能得到新的数据并且重新渲染</span></li></ul></ul><ul class=\"ne-list-wrap\"><ul ne-level=\"1\" class=\"ne-ul\"><li id=\"6d223ad8b56be0dd4ef072c76044d6d0_li_66\"><span class=\"ne-text\">如果一个组件要使用 </span><code class=\"ne-code\"><span class=\"ne-text\">store</span></code><span class=\"ne-text\">，但是没有订阅这个 </span><code class=\"ne-code\"><span class=\"ne-text\">store</span></code><span class=\"ne-text\">，此时就会出错</span></li></ul></ul><ul class=\"ne-list-wrap\"><ul ne-level=\"1\" class=\"ne-ul\"><li id=\"1c7a8b9e3de6e20de0361a8294afdf75_li_67\"><code class=\"ne-code\"><span class=\"ne-text\">Action</span></code><span class=\"ne-text\"> 最常见的产生原因是：在 </span><code class=\"ne-code\"><span class=\"ne-text\">App</span></code><span class=\"ne-text\"> 中的某一个部分，因为用户的交互行为，而被此</span><code class=\"ne-code\"><span class=\"ne-text\">view</span></code><span class=\"ne-text\"> </span><code class=\"ne-code\"><span class=\"ne-text\">dispatch</span></code><span class=\"ne-text\">出来了</span></li></ul></ul><p id=\"229af124bfdb4f72f7476a537561ed01_p_123\" class=\"ne-p\"><br></p><h3 id=\"redux\"><span class=\"ne-text\">redux</span></h3><p id=\"22ec2a6212062c98aa0e4f653f5c3b04_p_124\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"daaf3287cfb23090a30ab03837039ba6_li_68\"><span class=\"ne-text\">简介</span></li></ul><ul class=\"ne-list-wrap\"><ul ne-level=\"1\" class=\"ne-ul\"><li id=\"0e2b7a5862e293bd6ae7d34df4d45ba7_li_69\"><a href=\"https://redux.js.org/\" data-href=\"https://redux.js.org/\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">官网</span></a></li></ul></ul><ul class=\"ne-list-wrap\"><ul ne-level=\"1\" class=\"ne-ul\"><li id=\"598a29ddd3907571cee228cae84a12aa_li_70\"><span class=\"ne-text\">Redux 就是 Flux 思想在 React 中的实现</span></li></ul></ul><ul class=\"ne-list-wrap\"><ul ne-level=\"1\" class=\"ne-ul\"><li id=\"c278635e849c9c833c61a991bf99fee1_li_71\"><span class=\"ne-text\">Redux 是一个可预测状态的 Js app 容器</span></li></ul></ul><ul class=\"ne-list-wrap\"><ul ne-level=\"1\" class=\"ne-ul\"><li id=\"e5f3a479b0dfc47a93dd8ef1a6246917_li_72\"><code class=\"ne-code\"><a href=\"https://github.com/reactjs/redux/tree/master/examples\" data-href=\"https://github.com/reactjs/redux/tree/master/examples\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">通过例子来学习redux</span></a></code></li></ul></ul><ul class=\"ne-ul\"><li id=\"09a6b782127c131a87e69ae44fcaf412_li_73\"><span class=\"ne-text\">Redux 创建的步骤</span></li></ul><ul class=\"ne-list-wrap\"><ul ne-level=\"1\" class=\"ne-ul\"><li id=\"0a2760adee5eb794b0815c6a04f7d57c_li_74\"><span class=\"ne-text\">设置一个 </span><code class=\"ne-code\"><span class=\"ne-text\">reducer</span></code><span class=\"ne-text\">；</span></li></ul></ul><ul class=\"ne-list-wrap\"><ul ne-level=\"1\" class=\"ne-ul\"><li id=\"31cadc53d63b73cc00e9ad99701f6df0_li_75\"><span class=\"ne-text\">创建一个</span><code class=\"ne-code\"><span class=\"ne-text\">store</span></code><span class=\"ne-text\">，</span><code class=\"ne-code\"><span class=\"ne-text\">Redux.createStore(reducer)</span></code></li></ul></ul><ul class=\"ne-list-wrap\"><ul ne-level=\"1\" class=\"ne-ul\"><li id=\"493d1eb8e4484eaaaf4611e92b2d527f_li_76\"><span class=\"ne-text\">创建 </span><code class=\"ne-code\"><span class=\"ne-text\">render</span></code><span class=\"ne-text\"> 函数</span></li></ul></ul><ul class=\"ne-list-wrap\"><ul ne-level=\"1\" class=\"ne-ul\"><li id=\"c5d079b34673fb38291cae2baf4efc06_li_77\"><span class=\"ne-text\">注册 </span><code class=\"ne-code\"><span class=\"ne-text\">render</span></code><span class=\"ne-text\">，</span><code class=\"ne-code\"><span class=\"ne-text\">store.subscribe(render)</span></code></li></ul></ul><ul class=\"ne-list-wrap\"><ul ne-level=\"1\" class=\"ne-ul\"><li id=\"5d050fb5810f453b301c41598ed8eef0_li_78\"><span class=\"ne-text\">监听，此时要记得 </span><code class=\"ne-code\"><span class=\"ne-text\">store.dispatch(action)</span></code><span class=\"ne-text\">，不是直接修改</span><code class=\"ne-code\"><span class=\"ne-text\">store</span></code></li></ul></ul><p id=\"58e4bdcd35d7c4cee2e913ca95d454c8_p_125\" class=\"ne-p\"><br></p><h3 id=\"React-Redux\"><span class=\"ne-text\">React-Redux</span></h3><p id=\"037180a84ec63c01b315559ed5a15c1d_p_126\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"53964045dcc316c83281b4de60f5d105_li_79\"><span class=\"ne-text\">简介</span></li></ul><ul class=\"ne-list-wrap\"><ul ne-level=\"1\" class=\"ne-ul\"><li id=\"2eebf78797fa90bb3455105ddee8485f_li_80\"><span class=\"ne-text\">将 </span><code class=\"ne-code\"><span class=\"ne-text\">react</span></code><span class=\"ne-text\"> 和 </span><code class=\"ne-code\"><span class=\"ne-text\">redux</span></code><span class=\"ne-text\"> 合并起来，可以让任何组件在任何地方看见 </span><code class=\"ne-code\"><span class=\"ne-text\">store</span></code></li></ul></ul><ul class=\"ne-list-wrap\"><ul ne-level=\"1\" class=\"ne-ul\"><li id=\"0a6251f7cc31738215d82fea0132235d_li_81\"><a href=\"https://github.com/reactjs/react-redux/tree/master/docs\" data-href=\"https://github.com/reactjs/react-redux/tree/master/docs\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">官方文档</span></a></li></ul></ul><ul class=\"ne-list-wrap\"><ul ne-level=\"1\" class=\"ne-ul\"><li id=\"be34c72310cc48508b369854b430ce88_li_82\"><code class=\"ne-code\"><span class=\"ne-text\">React-Redux</span></code><span class=\"ne-text\"> 给我们提供了：</span><code class=\"ne-code\"><span class=\"ne-text\">Provider组件</span></code><span class=\"ne-text\">，</span><code class=\"ne-code\"><span class=\"ne-text\">connect函数</span></code></li></ul></ul><ul class=\"ne-ul\"><li id=\"8cf754fc48ef3c41e16eb1c70762c5f4_li_83\"><span class=\"ne-text\">Provider 组件</span></li></ul><p id=\"218526f010699898c9b5afe5bee78564_p_127\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"edb6c13be346e5eb3efcd46e9cfee7a7_p_128\" class=\"ne-p\"><span class=\"ne-text\">1、使用 </span><code class=\"ne-code\"><span class=\"ne-text\">react-redux</span></code><span class=\"ne-text\"> 提供的 </span><code class=\"ne-code\"><span class=\"ne-text\">Provider</span></code><span class=\"ne-text\"> 组件传递 </span><code class=\"ne-code\"><span class=\"ne-text\">store</span></code><span class=\"ne-text\"> 上下文之后，</span><code class=\"ne-code\"><span class=\"ne-text\">包裹在其中的所有组件</span></code><span class=\"ne-text\"> 全都可以识别这个上下文</span></p></div><p id=\"95d2789c2734df969b06fab66880adbb_p_129\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"a047f24c0cab49c2359b17c649238685_p_130\" class=\"ne-p\"><span class=\"ne-text\">2、在 </span><code class=\"ne-code\"><span class=\"ne-text\">Provider</span></code><span class=\"ne-text\"> 组件内部的自定义组件可以使用 </span><code class=\"ne-code\"><span class=\"ne-text\">connect()</span></code><span class=\"ne-text\"> 函数，但是在其外部的不可使用</span></p></div><p id=\"9478673e50b8f1aa6afefb8412111c6e_p_131\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"33971ca5f4c5f70611f89722d2ce6f85_li_84\"><span class=\"ne-text\">connect 函数</span></li></ul><p id=\"2f49e0ddefda4b24fada2a6edd68033d_p_132\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"2d46909b07b73178efe65da1fa118030_p_133\" class=\"ne-p\"><span class=\"ne-text\">1、将 </span><code class=\"ne-code\"><span class=\"ne-text\">React组件</span></code><span class=\"ne-text\"> 和 </span><code class=\"ne-code\"><span class=\"ne-text\">Redux</span></code><span class=\"ne-text\"> 的 </span><code class=\"ne-code\"><span class=\"ne-text\">store</span></code><span class=\"ne-text\"> 进行连接</span></p><p id=\"411d894fb1d3309771083dc436b4bbed_p_134\" class=\"ne-p\"><span class=\"ne-text\">2、</span><code class=\"ne-code\"><span class=\"ne-text\">connect</span></code><span class=\"ne-text\"> 提供了一个很方便的 </span><code class=\"ne-code\"><span class=\"ne-text\">API</span></code><span class=\"ne-text\"> 能够适应绝大多数工作</span></p><p id=\"5b35a243a0cce51ac274d81342152d6f_p_135\" class=\"ne-p\"><span class=\"ne-text\">3、它没有更改你传进来的类，反而会返回一个已经连接好的新类</span></p><p id=\"b60fcdba02dd406495e198d0e969b5f8_p_136\" class=\"ne-p\"><span class=\"ne-text\">4、提供了两个参数：</span><code class=\"ne-code\"><span class=\"ne-text\">mapStateToProps</span></code><span class=\"ne-text\">, </span><code class=\"ne-code\"><span class=\"ne-text\">mapDispatchToProps</span></code></p></div><p id=\"f474938634c47815c9cafa361ce29c41_p_137\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"12c6bd0cc71593be442f6081247a3024_li_85\"><span class=\"ne-text\">mapStateToProps</span></li></ul><p id=\"b1543dbd8d735319a0032dfd0a528e84_p_138\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"7c3f01074bd2e6381b99f4ccfda7d6d9_p_139\" class=\"ne-p\"><span class=\"ne-text\">1、如果传入</span><code class=\"ne-code\"><span class=\"ne-text\">mapStateToProps</span></code><span class=\"ne-text\">，此时这个组件将订阅 </span><code class=\"ne-code\"><span class=\"ne-text\">Redux</span></code><span class=\"ne-text\"> 中 </span><code class=\"ne-code\"><span class=\"ne-text\">store</span></code><span class=\"ne-text\"> 的更新信息；</span></p><p id=\"f5b5ed4a73212a557ba72643247636b0_p_140\" class=\"ne-p\"><span class=\"ne-text\">2、这意味着无论任何时候 </span><code class=\"ne-code\"><span class=\"ne-text\">store</span></code><span class=\"ne-text\"> 被更改了，</span><code class=\"ne-code\"><span class=\"ne-text\">mapStateToProps</span></code><span class=\"ne-text\"> 函数都将会被调用，</span><code class=\"ne-code\"><span class=\"ne-text\">mapStateToProps</span></code><span class=\"ne-text\"> 的返回值必须是一个 </span><code class=\"ne-code\"><span class=\"ne-text\">Object</span></code><span class=\"ne-text\">；</span></p><p id=\"74fddfef7a0c395d16543c76289d3625_p_141\" class=\"ne-p\"><span class=\"ne-text\">3、这个 </span><code class=\"ne-code\"><span class=\"ne-text\">Object</span></code><span class=\"ne-text\"> 将与组件的 </span><code class=\"ne-code\"><span class=\"ne-text\">props</span></code><span class=\"ne-text\"> 融合，也就是说，这个返回的 </span><code class=\"ne-code\"><span class=\"ne-text\">Object</span></code><span class=\"ne-text\"> 中的 </span><code class=\"ne-code\"><span class=\"ne-text\">key</span></code><span class=\"ne-text\"> 将自动成为组件的 </span><code class=\"ne-code\"><span class=\"ne-text\">props</span></code><span class=\"ne-text\"> 中的成员</span></p><p id=\"0997d6e4317d1ff3f3c8753a66ae5b3d_p_142\" class=\"ne-p\"><span class=\"ne-text\">4、如果不想订阅 </span><code class=\"ne-code\"><span class=\"ne-text\">store</span></code><span class=\"ne-text\"> 的更新，此时可以不传递这个参数，采用 </span><code class=\"ne-code\"><span class=\"ne-text\">null</span></code><span class=\"ne-text\"> 占位</span></p></div><p id=\"ecbf2a7b370d7c1f11409dc2caadd396_p_143\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"deccc3b0b1e1cd3396a0dca264792ef8_li_86\"><span class=\"ne-text\">mapDispatchToProps</span></li></ul><p id=\"4f67eb9790b6288e2156994dc5ad2f6e_p_144\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"3410116be3e38dc7d0322f30c0ba9c6a_p_145\" class=\"ne-p\"><span class=\"ne-text\">如果向 </span><code class=\"ne-code\"><span class=\"ne-text\">connect</span></code><span class=\"ne-text\"> 函数中传入了第二个参数，并且是一个 </span><code class=\"ne-code\"><span class=\"ne-text\">函数</span></code><span class=\"ne-text\">，那么这个函数将获得</span><code class=\"ne-code\"><span class=\"ne-text\">dispatch</span></code><span class=\"ne-text\"> 方法，该方法可以通过 </span><code class=\"ne-code\"><span class=\"ne-text\">emit action</span></code><span class=\"ne-text\">，间接的导致 </span><code class=\"ne-code\"><span class=\"ne-text\">state</span></code><span class=\"ne-text\"> 的改变</span></p><p id=\"0724c87c4628f2f949658d9e8fdc3b86_p_146\" class=\"ne-p\"><span class=\"ne-text\">可以使用 </span><code class=\"ne-code\"><span class=\"ne-text\">bindActionCreators()</span></code><span class=\"ne-text\"> 方法轻松的将 </span><code class=\"ne-code\"><span class=\"ne-text\">Action creator</span></code><span class=\"ne-text\">(返回 </span><code class=\"ne-code\"><span class=\"ne-text\">action</span></code><span class=\"ne-text\"> 的函数)接口和 </span><code class=\"ne-code\"><span class=\"ne-text\">dispatch</span></code><span class=\"ne-text\"> 进行绑定</span></p></div><p id=\"7e0f4c425a469a407bb6094b1048bd2a_p_147\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"316367d495deb7ee0a348459cb5a064c_li_87\"><span class=\"ne-text\">书写规则</span></li></ul><p id=\"fd8dd5e29cc68951de3711296b3ec5da_p_148\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"2f68d46e3c54816c1e87bba27e8adb55_p_149\" class=\"ne-p\"><span class=\"ne-text\">index.js</span></p></div><p id=\"66d65f3a5b8e94e695d6df7f3989a5f6_p_150\" class=\"ne-p\"><br></p><pre data-language=\"jsx\" id=\"70f28a86\" class=\"ne-codeblock language-jsx\">import React from &quot;react&quot;;\nimport { render } from &quot;react-dom&quot;;\nimport { createStore } from &quot;redux&quot;;\nimport { Provider } from &quot;react-redux&quot;;\nimport App from &quot;./containers/App&quot;;\nimport reducer from &quot;./reducers&quot;;\n\nconst store = createStore(reducer);\nrender(\n  &lt;Provider store={store}&gt;\n    &lt;App /&gt;\n  &lt;/Provider&gt;,\n  document.getElementById(&quot;root&quot;)\n);</pre><p id=\"132b72ac11decfdb5c7171cc51240ee2_p_151\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"42a55f8864e3cd82cbdca8e17b2e603d_p_152\" class=\"ne-p\"><span class=\"ne-text\">App.js</span></p></div><p id=\"d6aad01cce7555ee21c55669cd02505b_p_153\" class=\"ne-p\"><br></p><pre data-language=\"jsx\" id=\"d88be5f3\" class=\"ne-codeblock language-jsx\">import React from &quot;react&quot;;\nimport { connect } from &quot;react-redux&quot;;\nimport * as actions from &quot;./actions&quot;;\n\nclass App extends React.Component {\n  constructor(props) {\n    super();\n    console.log(props);\n    // props: { r: 0, g: 0, b: 0, actions: 许多方法 }\n  }\n  render() {\n    return &lt;div&gt;这是App组件&lt;/div&gt;;\n  }\n}\nconst mapStateToProps = state =&gt; {\n  return {\n    r: state.r,\n    g: state.g,\n    b: state.b\n  };\n};\nconst mapDispatchToProps = dispatch =&gt; {\n  return {\n    actions: bindActionCreators(actions, dispatch)\n  };\n};\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(App);</pre><p id=\"ce225d72190bb5bc96c7675d82aeb159_p_154\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"9849a50a8c284481ccf94a2de7186dd8_p_155\" class=\"ne-p\"><span class=\"ne-text\">reducer.js</span></p></div><p id=\"f055c5eaf69ffd994712ed724c58c065_p_156\" class=\"ne-p\"><br></p><pre data-language=\"jsx\" id=\"e6dceb85\" class=\"ne-codeblock language-jsx\">export default (state, action) =&gt; {\n  if (state == undefined) {\n    state = { r: 0, g: 0, b: 0 };\n  }\n  if (action.type == &quot;ADD&quot;) {\n    return {\n      ...state,\n      r: state.r + 1\n    };\n  }\n  return state;\n};</pre><p id=\"b68200708c960efa87d95f272f623cc5_p_157\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"6f8486bb6d2b6d43f6d3f3fab13b5160_p_158\" class=\"ne-p\"><span class=\"ne-text\">actions.js</span></p></div><p id=\"e2e19f3807b1a26de6bfd8d5d8f8346a_p_159\" class=\"ne-p\"><br></p><pre data-language=\"jsx\" id=\"f8579798\" class=\"ne-codeblock language-jsx\">export const ADD = () =&gt; { &quot;type&quot;: &quot;ADD&quot; }</pre><p id=\"b0d1fb541c750b95e1b76e1c686fea12_p_160\" class=\"ne-p\"><br></p><h3 id=\"b51b03f9\"><span class=\"ne-text\">组件内部的 state 和全局的 state</span></h3><p id=\"651309cbfbecc7836ba00bb10131bced_p_161\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"18bfc01a76dad06d1177869002bb25fe_p_162\" class=\"ne-p\"><span class=\"ne-text\">组件的数据三兄弟：</span><code class=\"ne-code\"><span class=\"ne-text\">state</span></code><span class=\"ne-text\">, </span><code class=\"ne-code\"><span class=\"ne-text\">props</span></code><span class=\"ne-text\">, </span><code class=\"ne-code\"><span class=\"ne-text\">context</span></code><span class=\"ne-text\"> 不管是谁发生改变，都会引发 </span><code class=\"ne-code\"><span class=\"ne-text\">render()</span></code><span class=\"ne-text\"> 执行，视图会被重绘。但是，构造函数不会被重新执行。所以不管基于什么理由，都不需要将全局的状态，用自己组件的 </span><code class=\"ne-code\"><span class=\"ne-text\">state</span></code><span class=\"ne-text\"> 接收，而仅需要用</span><code class=\"ne-code\"><span class=\"ne-text\">connect</span></code><span class=\"ne-text\">连接一下全局</span><code class=\"ne-code\"><span class=\"ne-text\">store</span></code><span class=\"ne-text\">，然后使用</span><code class=\"ne-code\"><span class=\"ne-text\">this.props.**</span></code><span class=\"ne-text\">即可。</span></p></div><p id=\"788cb192a755349940f6d50adab26c47_p_163\" class=\"ne-p\"><br></p><h3 id=\"c798dcc0\"><span class=\"ne-text\">reducer 模块化</span></h3><p id=\"5a4f541457331ccb8d780e99c0cac44a_p_164\" class=\"ne-p\"><br></p><pre data-language=\"javascript\" id=\"49b5c88f\" class=\"ne-codeblock language-javascript\">import { combineReducers } from &quot;redux&quot;;\nimport todoReducers from &quot;./todoReducer.js&quot;; // 标准reducer\n\nexport default combineReducers({\n  todoReducers\n});</pre><p id=\"f121a14e6e189b9063748754f0838cd7_p_165\" class=\"ne-p\"><br></p><h3 id=\"redux-logger\"><span class=\"ne-text\">redux-logger</span></h3><p id=\"a964985d3a0719f64ee67db676d49377_p_166\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"20aa583e1d9ddc4190ffc09f4f2f6cd0_p_167\" class=\"ne-p\"><span class=\"ne-text\">打印 redux log</span></p></div><p id=\"f1c8ecc8b9af30fe449b5f1cb67a7baf_p_168\" class=\"ne-p\"><br></p><pre data-language=\"javascript\" id=\"56561ae0\" class=\"ne-codeblock language-javascript\">import { createStore, applyMiddleware } from &quot;redux&quot;;\nimport { createLogger } from &quot;redux-logger&quot;;\nimport reducer from &quot;./reducers/index.js&quot;;\nlet store = createStore(reducer, applyMiddleware(createLogger()));</pre><p id=\"c05a4e07798be0757743d22bc9d5b835_p_169\" class=\"ne-p\"><br></p><h3 id=\"redux-thunk\"><span class=\"ne-text\">redux-thunk</span></h3><p id=\"6b2731e5cdf3bd4d52052fad7040793c_p_170\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"ec23cdb5c184f22dc7e8f4776a882b6d_p_171\" class=\"ne-p\"><span class=\"ne-text\">解决异步问题</span></p></div><p id=\"7c99e1264b141371ec53052f1b9bd8a1_p_172\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"5ada621e37cd1b9057d7d5f7180eadb9_p_173\" class=\"ne-p\"><code class=\"ne-code\"><span class=\"ne-text\">redux-thunk</span></code><span class=\"ne-text\">帮助我们在所有的组件的 </span><code class=\"ne-code\"><span class=\"ne-text\">props</span></code><span class=\"ne-text\"> 中添加了一个 </span><code class=\"ne-code\"><span class=\"ne-text\">dispatch</span></code><span class=\"ne-text\"> 方法。</span></p></div><p id=\"2c47ab815ac9d02ba311a88ab630b791_p_174\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"7a4e0d73f405fc7518cfdb97d474aed4_p_175\" class=\"ne-p\"><span class=\"ne-text\">当然，这个组件一定要被 </span><code class=\"ne-code\"><span class=\"ne-text\">connect</span></code><span class=\"ne-text\"> 函数进行处理</span></p></div><p id=\"aaf6d3f54c4ea0860c4a0b47cf319be5_p_176\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"ee70a0dbfe8b5362fa0818d7ec4d906b_p_177\" class=\"ne-p\"><span class=\"ne-text\">注意，如果使用 </span><code class=\"ne-code\"><span class=\"ne-text\">thunk</span></code><span class=\"ne-text\">，则 </span><code class=\"ne-code\"><span class=\"ne-text\">connect</span></code><span class=\"ne-text\"> 函数不能传入第二个参数，否则会导致无法获取 </span><code class=\"ne-code\"><span class=\"ne-text\">this.props.dispatch()</span></code></p></div><p id=\"639ff39a813bac805cf1d42cf6370925_p_178\" class=\"ne-p\"><br></p><pre data-language=\"javascript\" id=\"e463d708\" class=\"ne-codeblock language-javascript\">// 入口文件\nimport { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nlet store = createStore(reducer, applyMiddleware(thunk))\n\n/** 组件中 */\n/** 第一种写法，并没有将actions进行抽离 */\n$.get('/shu.txt', data =&gt; {\n    var number = Number(data);\n    this.props.dispatch({\n        &quot;type&quot;: &quot;ADD&quot;,\n        number\n    })\n})\n/** 第二种写法:常用 */\n// 可枚举\nimport * as actions from './actions/actions.js'\n\nclass ** extends React.Component {\n    ...\n    add() {\n        this.props.dispatch(actions.add())\n        this.props.dispatch(actions.minus())\n    }\n    ...\n}\n/** 现在，一般不会再写第二个参数了，就是说省略掉mapDispatchToProps */\nexport default connect(\n (state) =&gt; {\n    return {\n        state: state\n    }\n })(**)\n// actions.js\n/* 现在，异步的Action Creator不要直接返回 Action，而是返回一个携带 dispatch 的函数；这个函数相当于“延长”了dispatch的持续时间。*/\nexport const add = () =&gt; (dispatch, getState) =&gt; {\n    console.log(getState()) // getState可以获取全局数据\n    $.get('/shu.txt', data =&gt; {\n        var number = Number(data);\n        dispatch({&quot;type&quot;: &quot;MINUS&quot;, number})\n    })\n}\nexport const minus = () =&gt; { &quot;type&quot;: &quot;MINUS&quot; }\n// reducer.js\nexport default (state = 0, action) =&gt; {\n    switch(action.type) {\n        case &quot;ADD&quot;:\n            return state + action.number\n        case &quot;MINUS&quot;:\n            return state - 1\n    }\n    return state;\n}</pre><p id=\"704e7fcf3e24f0df062f455d61ce8bf2_p_179\" class=\"ne-p\"><br></p><h2 id=\"098d4e0d\"><span class=\"ne-text\">9. react-router4.x</span></h2><p id=\"eca7cff7c59afa2f3de403ef7621a785_p_180\" class=\"ne-p\"><br></p><h3 id=\"61a3ec66\"><span class=\"ne-text\">介绍</span></h3><p id=\"0efc130a474ae63eb94f94d29c0b519f_p_181\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"c22bf6572f89e856ae45401d75437d1a_li_88\"><a href=\"https://reacttraining.com/react-router\" data-href=\"https://reacttraining.com/react-router\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">官网</span></a></li></ul><ul class=\"ne-ul\"><li id=\"2d2d28fbf63b6cfeda6e6fe4ddd57a44_li_89\"><span class=\"ne-text\">安装：</span><code class=\"ne-code\"><span class=\"ne-text\">npm install react-router-dom</span></code></li></ul><p id=\"1afec35b50202e46c8ab3d64c8b15d95_p_182\" class=\"ne-p\"><br></p><h3 id=\"demo\"><span class=\"ne-text\">demo</span></h3><p id=\"bd34bbbaf941aa44b5ef63b842573764_p_183\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"0c67947b0435fe76c1572840c84d3ac9_p_184\" class=\"ne-p\"><code class=\"ne-code\"><span class=\"ne-text\">exact</span></code><span class=\"ne-text\">表示严格匹配，如果路径为 </span><code class=\"ne-code\"><span class=\"ne-text\">path=&quot;/&quot;</span></code><span class=\"ne-text\"> 的 </span><code class=\"ne-code\"><span class=\"ne-text\">Route</span></code><span class=\"ne-text\"> 不设置该属性，则会自动向下匹配路由，即都会显示出来</span></p></div><p id=\"9040129079d6c20944d5abd09137a458_p_185\" class=\"ne-p\"><br></p><pre data-language=\"jsx\" id=\"7260f495\" class=\"ne-codeblock language-jsx\">import React from &quot;react&quot;;\nimport { BrowserRouter as Router, Route, Link } from &quot;react-router-dom&quot;;\n\nfunction Index() {\n  return &lt;h2&gt;Home&lt;/h2&gt;;\n}\n\nfunction About() {\n  return &lt;h2&gt;About&lt;/h2&gt;;\n}\n\nfunction Users() {\n  return &lt;h2&gt;Users&lt;/h2&gt;;\n}\n\nfunction AppRouter() {\n  return (\n    &lt;Router&gt;\n      &lt;div&gt;\n        &lt;nav&gt;\n          &lt;ul&gt;\n            &lt;li&gt;\n              &lt;Link to=&quot;/&quot;&gt;Home&lt;/Link&gt;\n            &lt;/li&gt;\n            &lt;li&gt;\n              &lt;Link to=&quot;/about/&quot;&gt;About&lt;/Link&gt;\n            &lt;/li&gt;\n            &lt;li&gt;\n              &lt;Link to=&quot;/users/&quot;&gt;Users&lt;/Link&gt;\n            &lt;/li&gt;\n          &lt;/ul&gt;\n        &lt;/nav&gt;\n\n        &lt;Route path=&quot;/&quot; exact component={Index} /&gt;\n        &lt;Route path=&quot;/about/&quot; component={About} /&gt;\n        &lt;Route path=&quot;/users/&quot; component={Users} /&gt;\n      &lt;/div&gt;\n    &lt;/Router&gt;\n  );\n}\nexport default AppRouter;</pre><p id=\"a2e9e486493798ec13110bd7c2133490_p_186\" class=\"ne-p\"><br></p><h3 id=\"d32ddad9\"><span class=\"ne-text\">动态路由</span></h3><p id=\"c7048e5640cfa0d88f49c32fad2740da_p_187\" class=\"ne-p\"><br></p><pre data-language=\"jsx\" id=\"0ec9b522\" class=\"ne-codeblock language-jsx\">// App.js 定义动态路由\n&lt;Route path=&quot;/content/:aid&quot;&gt;&lt;/Route&gt;\n// news.js 跳转\n&lt;Link to={`/content/${value.aid}`}&gt;&lt;/Link&gt;\n// Content.js 跳在生命周期函数中获取动态路由参数\nclass Content extends Component {\n    /* ... */\n      componentDidMount() {\n          const { match } = this.props\n          // 获取到传递的动态路由参数\n          console.log(match.params.aid)\n      }\n    /* ... */\n}</pre><p id=\"1b4147100f9b232305f6ba2db16414a4_p_188\" class=\"ne-p\"><br></p><h3 id=\"48d577aa\"><span class=\"ne-text\">get 传值</span></h3><p id=\"754d4d7b7f7ef59febce1379b79c5a84_p_189\" class=\"ne-p\"><br></p><pre data-language=\"jsx\" id=\"5b3c5feb\" class=\"ne-codeblock language-jsx\">// App.js 定义动态路由\n&lt;Route path=&quot;/content&quot;&gt;&lt;/Route&gt;\n// news.js 跳转\n&lt;Link to={`/content?aid=${value.aid}`}&gt;&lt;/Link&gt;\n// Content.js 跳在生命周期函数中获取动态路由参数\nclass Content extends Component {\n    ...\n      componentDidMount() {\n          const { location } = this.props\n          // 获取到传递的动态路由参数\n          console.log(location.search)\n      }\n    ...\n}</pre><p id=\"a7461c86e6a9d61cb988ef01871fdc3e_p_190\" class=\"ne-p\"><br></p><h3 id=\"2a32f5ec\"><span class=\"ne-text\">js 控制跳转</span></h3><p id=\"ebc5def445ee0b4a8a315ff5c89870b2_p_191\" class=\"ne-p\"><br></p><ol class=\"ne-ol\"><li id=\"9a488afcd1497aeb94c0854e0f80a018_li_90\"><span class=\"ne-text\">引入 </span><code class=\"ne-code\"><span class=\"ne-text\">Redirect</span></code><span class=\"ne-text\"> 组件</span></li></ol><ol start=\"2\" class=\"ne-ol\"><li id=\"0f844b3863a0ed3c9fdfdded2f7fa834_li_91\"><span class=\"ne-text\">定义一个 </span><code class=\"ne-code\"><span class=\"ne-text\">flag</span></code></li></ol><p id=\"2ca73a746caed6893c78e3a6e489dba7_p_192\" class=\"ne-p\"><br></p><pre data-language=\"javascript\" id=\"b2cbfb71\" class=\"ne-codeblock language-javascript\">this.state = {\n  loginFlag: false\n};</pre><p id=\"a54598ca955746a71345e6f1c7efebc9_p_193\" class=\"ne-p\"><br></p><ol start=\"3\" class=\"ne-ol\"><li id=\"97531c8e91ebb08eb192c8c410ba22bb_li_92\"><span class=\"ne-text\">在 </span><code class=\"ne-code\"><span class=\"ne-text\">Render</span></code><span class=\"ne-text\"> 中判断 </span><code class=\"ne-code\"><span class=\"ne-text\">flag</span></code><span class=\"ne-text\">，从而来决定是否进行跳转</span></li></ol><p id=\"f9b899a2271a73dadb46fc35f51f07c4_p_194\" class=\"ne-p\"><br></p><pre data-language=\"jsx\" id=\"41c4d590\" class=\"ne-codeblock language-jsx\">if (this.state.loginFlag) {\n  return &lt;Redirect to={{ pathname: &quot;/&quot; }} /&gt;;\n}</pre><p id=\"80202539c693019e9f10e3914a4f3853_p_195\" class=\"ne-p\"><br></p><ol start=\"4\" class=\"ne-ol\"><li id=\"35aa2be2034f4fe4111da323fcb742ff_li_93\"><span class=\"ne-text\">执行 </span><code class=\"ne-code\"><span class=\"ne-text\">js</span></code><span class=\"ne-text\"> 跳转，通过 </span><code class=\"ne-code\"><span class=\"ne-text\">js</span></code><span class=\"ne-text\"> 改变 </span><code class=\"ne-code\"><span class=\"ne-text\">loginFlag</span></code><span class=\"ne-text\"> 的状态，改变以后，就可以从新的 </span><code class=\"ne-code\"><span class=\"ne-text\">render</span></code><span class=\"ne-text\"> 中通过 </span><code class=\"ne-code\"><span class=\"ne-text\">Redirect</span></code><span class=\"ne-text\"> 自己进行跳转</span></li></ol><p id=\"23475a21370dc3b01a4e53f8cf794c6f_p_196\" class=\"ne-p\"><br></p><h3 id=\"6f5f6eed\"><span class=\"ne-text\">模块化路由</span></h3><p id=\"092c280811a5ab919f55eaebbfe43b42_p_197\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"e271fbbce7ef61342cfc1aa5ea9529b4_p_198\" class=\"ne-p\"><span class=\"ne-text\">router.js</span></p></div><p id=\"29f96185b91d029e4e58c44f6555340a_p_199\" class=\"ne-p\"><br></p><pre data-language=\"jsx\" id=\"c17c4203\" class=\"ne-codeblock language-jsx\">import Home from './components/Home/'\nimport About from './components/About/'\nimport User from './components/User/'\nimport UserList from './User/UserList'\nimport UserInfo from './User/UserInfo'\n\nlet router = [\n    {\n        path: '/',\n        component: Home,\n        exact: true\n    },\n    {\n        path: '/about',\n        component: About\n    },\n    {\n        path: '/User',\n        component: User,\n        routes: [ // 嵌套路由设置\n            {\n                path: '/user/',\n                component: UserList\n            }, {\n                path: '/user/info',\n                component: UserInfo\n            }\n        ]\n    }\n]\nexport default router;</pre><p id=\"99d7f9ffd07472f73f14113da034a561_p_200\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"c513d337292c5d5cb498a7000c057718_p_201\" class=\"ne-p\"><span class=\"ne-text\">App.js入口文件</span></p></div><p id=\"51391d7d944f941a39fd10b1691d92b8_p_202\" class=\"ne-p\"><br></p><pre data-language=\"jsx\" id=\"48f03bc8\" class=\"ne-codeblock language-jsx\">import React, { Component } from &quot;react&quot;;\nimport { BrowserRouter as Router, Route, Link } from &quot;react-router-dom&quot;;\nimport router from &quot;./router.js&quot;;\n\nclass App extends Component {\n  render() {\n    return (\n      &lt;Router&gt;\n        &lt;div&gt;\n          {router.map((route, key) =&gt; {\n            if (route.exact) {\n              return (\n                &lt;Route\n                  exact\n                  key={key}\n                  path={route.path}\n                  render={props =&gt; (\n                    // 向子组件传递子路由\n                    &lt;route.component {...props} routes={route.routes} /&gt;\n                  )}\n                /&gt;\n              );\n            } else {\n              return (\n                &lt;Route\n                  key={key}\n                  path={route.path}\n                  render={props =&gt; (\n                    // 向子组件传递子路由\n                    &lt;route.component {...props} routes={route.routes} /&gt;\n                  )}\n                /&gt;\n              );\n            }\n          })}\n        &lt;/div&gt;\n      &lt;/Router&gt;\n    );\n  }\n}</pre><p id=\"4ed325856d239cc0ac03df1f201ff44e_p_203\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"d66236df99ab5d3cc9002a09906f58c9_p_204\" class=\"ne-p\"><span class=\"ne-text\">User.js</span></p></div><p id=\"ed628da24993324917ceed9d7032667e_p_205\" class=\"ne-p\"><br></p><pre data-language=\"jsx\" id=\"e82a4743\" class=\"ne-codeblock language-jsx\">import React, { Component } from &quot;react&quot;;\nimport { Route, Link } from &quot;react-router-dom&quot;;\n\nclass User extends Component {\n  componentWillMount() {\n    console.log(this.props.routes);\n  }\n  render() {\n    return (\n      &lt;div&gt;\n        &lt;div className=&quot;contenr&quot;&gt;\n          &lt;div className=&quot;left&quot;&gt;\n            &lt;Link /&gt;\n          &lt;/div&gt;\n          &lt;div className=&quot;right&quot;&gt;\n            {this.props.routes.map((route, key) =&gt; {\n              return (\n                &lt;Route\n                  exact\n                  key={key}\n                  path={route.path}\n                  component={route.component}\n                /&gt;\n              );\n            })}\n          &lt;/div&gt;\n        &lt;/div&gt;\n      &lt;/div&gt;\n    );\n  }\n}\nexport default User;</pre><p id=\"352f391bc738d2265b3d832a48674509_p_206\" class=\"ne-p\"><br></p><h3 id=\"f757cf23\"><span class=\"ne-text\">常用路由组件</span></h3><p id=\"fa496c4be2d075776e02d4d8dd97275f_p_207\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"1eb340b8db344f6cf26d915bd5c64868_li_94\"><em><span class=\"ne-text\">BrowserRouter</span></em><span class=\"ne-text\">：使用 </span><code class=\"ne-code\"><span class=\"ne-text\">HTML5</span></code><span class=\"ne-text\"> 历史记录 </span><code class=\"ne-code\"><span class=\"ne-text\">API</span></code><span class=\"ne-text\"> (</span><code class=\"ne-code\"><span class=\"ne-text\">pushState</span></code><span class=\"ne-text\">，</span><code class=\"ne-code\"><span class=\"ne-text\">replaceState</span></code><span class=\"ne-text\"> 和</span><code class=\"ne-code\"><span class=\"ne-text\">popstate</span></code><span class=\"ne-text\"> 事件)的 </span><code class=\"ne-code\"><span class=\"ne-text\">&lt;Router&gt;</span></code><span class=\"ne-text\"> 来保持 </span><code class=\"ne-code\"><span class=\"ne-text\">UI</span></code><span class=\"ne-text\"> 与 </span><code class=\"ne-code\"><span class=\"ne-text\">URL</span></code><span class=\"ne-text\"> 的同步</span></li></ul><ul class=\"ne-ul\"><li id=\"717b755471e962a138510e6f245cd362_li_95\"><em><span class=\"ne-text\">HashRouter</span></em><span class=\"ne-text\">：使用 </span><code class=\"ne-code\"><span class=\"ne-text\">URL</span></code><span class=\"ne-text\"> 的哈希部分(即 </span><code class=\"ne-code\"><span class=\"ne-text\">window.location.hash</span></code><span class=\"ne-text\"> )的&lt;路由器&gt;可以保持您的 </span><code class=\"ne-code\"><span class=\"ne-text\">UI</span></code><span class=\"ne-text\"> 与 </span><code class=\"ne-code\"><span class=\"ne-text\">URL</span></code><span class=\"ne-text\"> 同步。注意：哈希历史记录不支持 </span><code class=\"ne-code\"><span class=\"ne-text\">location.key</span></code><span class=\"ne-text\"> 或 </span><code class=\"ne-code\"><span class=\"ne-text\">location.state</span></code><span class=\"ne-text\">。 在以前的版本中，我们试图缓和行为，但是有一些边缘案例我们无法解决。 任何需要此行为的代码或插件将无法正常工作。 由于此技术仅用于支持旧版浏览器，因此我们建议您将服务器配置为使用</span><code class=\"ne-code\"><span class=\"ne-text\">&lt;BrowserHistory&gt;</span></code></li></ul><ul class=\"ne-ul\"><li id=\"a990a45a47e7c9bacd1aaf52d642eedc_li_96\"><em><span class=\"ne-text\">Link</span></em><span class=\"ne-text\">：渲染成 </span><code class=\"ne-code\"><span class=\"ne-text\">a</span></code><span class=\"ne-text\"> 标签</span></li></ul><ul class=\"ne-ul\"><li id=\"c8c8581f25dfbdac902f4e477b142ae0_li_97\"><em><span class=\"ne-text\">NavLink</span></em><span class=\"ne-text\">：一种特殊版本的 </span><code class=\"ne-code\"><span class=\"ne-text\">&lt;Link&gt;</span></code><span class=\"ne-text\">，当与当前 </span><code class=\"ne-code\"><span class=\"ne-text\">URL</span></code><span class=\"ne-text\"> 匹配时，将向渲染元素添加样式属性。</span></li></ul><ul class=\"ne-ul\"><li id=\"27c675f9bb192da32e20eb05682a1801_li_98\"><em><span class=\"ne-text\">Redirect</span></em><span class=\"ne-text\">：重定向</span></li></ul><ul class=\"ne-ul\"><li id=\"26bd4fc37c2259045998c3b67f77223b_li_99\"><em><span class=\"ne-text\">Route</span></em><span class=\"ne-text\">：在位置与路线的路径匹配时呈现一些 </span><code class=\"ne-code\"><span class=\"ne-text\">UI</span></code><span class=\"ne-text\">。</span></li></ul><ul class=\"ne-ul\"><li id=\"236496c29a2e3864eacc65976030a1b0_li_100\"><em><span class=\"ne-text\">Switch</span></em><span class=\"ne-text\">：只渲染命中的第一个 </span><code class=\"ne-code\"><span class=\"ne-text\">&lt;Route&gt;</span></code><span class=\"ne-text\"> 或 </span><code class=\"ne-code\"><span class=\"ne-text\">&lt;Redirect&gt;</span></code><span class=\"ne-text\"> 。</span></li></ul><p id=\"3c2e4ae7a4912940f2b69cc49919d5f2_p_208\" class=\"ne-p\"><br></p><pre data-language=\"jsx\" id=\"fd702612\" class=\"ne-codeblock language-jsx\">  // Switch的用法\n  import { Switch, Route } from &quot;react-router&quot;;\n  &lt;Switch&gt;\n      &lt;Route exact path=&quot;/&quot; component={Home} /&gt;\n      &lt;Route path=&quot;/about&quot; component={About} /&gt;\n      &lt;Route path=&quot;/:user&quot; component={User} /&gt;\n      &lt;Route component={NoMatch} /&gt;\n  &lt;/Switch&gt;;</pre><p id=\"8919573e332594403c98b16dc3707127_p_209\" class=\"ne-p\"><br></p><h2 id=\"7557e52d\"><span class=\"ne-text\">10. context</span></h2><p id=\"9fcc44cb3c056720422a68184834d3f8_p_210\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"786cbbe9e3d11e7d8dc0d90943b5891c_li_101\"><span class=\"ne-text\">介绍</span></li></ul><p id=\"1da2a8520c15248cb5e414baf18050d4_p_211\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"7371016e86c1219742e461045dab8ba6_p_212\" class=\"ne-p\"><span class=\"ne-text\">在一个典型的 </span><code class=\"ne-code\"><span class=\"ne-text\">React</span></code><span class=\"ne-text\"> 应用中，数据是通过 </span><code class=\"ne-code\"><span class=\"ne-text\">props</span></code><span class=\"ne-text\"> 属性自上而下（由父及子）进行传递的，但这种做法对于某些类型的属性而言是极其繁琐的（例如：地区偏好，</span><code class=\"ne-code\"><span class=\"ne-text\">UI</span></code><span class=\"ne-text\"> 主题），这些属性是应用程序中许多组件都需要的。</span><code class=\"ne-code\"><span class=\"ne-text\">Context</span></code><span class=\"ne-text\"> 提供了一种在组件之间共享此类值的方式，而不必显式地通过组件树的逐层传递 </span><code class=\"ne-code\"><span class=\"ne-text\">props</span></code><span class=\"ne-text\">。</span></p></div><p id=\"6a4878fe05233880c9bb3f78bdfc8d68_p_213\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"fd9cce1f9e884eea6e0ec3e8ba87074a_li_102\"><span class=\"ne-text\">繁琐的 </span><code class=\"ne-code\"><span class=\"ne-text\">props</span></code><span class=\"ne-text\"> 方式</span></li></ul><p id=\"3a8029979cdf6369a743f706414be0bf_p_214\" class=\"ne-p\"><br></p><pre data-language=\"jsx\" id=\"5a3e07c5\" class=\"ne-codeblock language-jsx\">class App extends React.Component {\n    render() {\n        return &lt;Toolbar theme=&quot;dark&quot; /&gt;\n    }\n}\nfunction Toolbar(props) {\n    return (\n        &lt;div&gt;\n            &lt;ThemeButton theme={props.theme} /&gt;\n        &lt;/div&gt;\n    )\n}\nclass ThemeButton extends React.Component {\n    render() {\n        &lt;Button theme={this.props.theme}&gt;按钮&lt;/Button&gt;\n    }\n}</pre><p id=\"c2fcbb13669d3e57d1dc5c7e95ef2350_p_215\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"b525d681dca7035ddb12b113440ec7b3_li_103\"><span class=\"ne-text\">使用 </span><code class=\"ne-code\"><span class=\"ne-text\">context</span></code></li></ul><p id=\"02630234cefdd1a3dfd9b8e850834e4e_p_216\" class=\"ne-p\"><br></p><pre data-language=\"jsx\" id=\"caeca5a0\" class=\"ne-codeblock language-jsx\">// Context 可以让我们无须明确地传遍每一个组件，就能将值深入传递进组件树。\n// 为当前的 theme 创建一个 context（“light”为默认值）。  \nconst ThemeContext = React.createContext(&quot;light&quot;);\n\nclass App extends React.Component {\n    render() {\n        // 使用一个 Provider 来将当前的 theme 传递给以下的组件树。\n        // 无论多深，任何组件都能读取这个值。\n        // 在这个例子中，我们将 “dark” 作为当前的值传递下去。\n        return (\n            &lt;ThemeContext.Provider value=&quot;dark&quot;&gt;\n                &lt;Toolbar /&gt;\n            &lt;/ThemeContext.Provider&gt;\n        )\n    }\n}\nfunction ToolBar() {\n    return (\n        &lt;div&gt;\n            &lt;ThemeButton /&gt;\n        &lt;/div&gt;\n    )\n}\nclass ThemeButton extends React.Component {\n    // 指定 contextType 读取当前的 theme context。\n  // React 会往上找到最近的 theme Provider，然后使用它的值。\n    // 在这个例子中，当前的 theme 值为 “dark”。\n    static contextType = ThemeContext;\n    render() {\n        return &lt;Button theme={this.context}&gt;按钮&lt;/Button&gt;\n    }\n}</pre><p id=\"e9b9195071b602f228ecd87131f54a09_p_217\" class=\"ne-p\"><br></p><h2 id=\"663b2eaa\"><span class=\"ne-text\">11. react-hooks</span></h2><p id=\"106abb71162cab57d99f22c8182baa6a_p_218\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"6194c55cf1d33e4f9959d79120e0e79f_p_219\" class=\"ne-p\"><code class=\"ne-code\"><span class=\"ne-text\">Hook</span></code><span class=\"ne-text\"> 是 </span><code class=\"ne-code\"><span class=\"ne-text\">React 16.8</span></code><span class=\"ne-text\"> 的新增特性。它可以让你在不编写 </span><code class=\"ne-code\"><span class=\"ne-text\">class</span></code><span class=\"ne-text\"> 的情况下使用 </span><code class=\"ne-code\"><span class=\"ne-text\">state</span></code><span class=\"ne-text\"> 以及其他的 </span><code class=\"ne-code\"><span class=\"ne-text\">React</span></code><span class=\"ne-text\"> 特性。</span></p></div><p id=\"9c56ecf09c84a42020f1c0dd6460690c_p_220\" class=\"ne-p\"><br></p><h3 id=\"e1945b8c\"><span class=\"ne-text\">11.1 State Hook</span></h3><p id=\"f0c0f2fb8c193860551cee96a133ccba_p_221\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"5e172b048a5fa346e257347bf65074d7_p_222\" class=\"ne-p\"><code class=\"ne-code\"><span class=\"ne-text\">useState</span></code><span class=\"ne-text\"> 就是一个 </span><code class=\"ne-code\"><span class=\"ne-text\">Hook</span></code><span class=\"ne-text\">，类似 </span><code class=\"ne-code\"><span class=\"ne-text\">class</span></code><span class=\"ne-text\"> 组件的 </span><code class=\"ne-code\"><span class=\"ne-text\">this.setState</span></code><span class=\"ne-text\">，但是它不会把新的 </span><code class=\"ne-code\"><span class=\"ne-text\">state</span></code><span class=\"ne-text\"> 和旧的 </span><code class=\"ne-code\"><span class=\"ne-text\">state</span></code><span class=\"ne-text\"> 进行合并。</span><code class=\"ne-code\"><span class=\"ne-text\">useState</span></code><span class=\"ne-text\"> 会返回一对值：</span><em><span class=\"ne-text\">当前状态</span></em><span class=\"ne-text\"> 和一个让你 </span><em><span class=\"ne-text\">更新它的函数</span></em><span class=\"ne-text\">，你可以在事件处理函数中或其他一些地方调用这个函数。</span></p></div><p id=\"7daa843f6e495dd1d2c6696528cc65bd_p_223\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"ba3f67286d86a03633ea5df173e38bed_li_104\"><span class=\"ne-text\">计数器</span></li></ul><p id=\"2fb6599da40f309006191e7a2f3cebe9_p_224\" class=\"ne-p\"><br></p><pre data-language=\"jsx\" id=\"377eb488\" class=\"ne-codeblock language-jsx\">import React, { useState } from 'react';\n\nfunction Example() {\n  // 声明一个叫 “count” 的 state 变量。\n  const [count, setCount] = useState(0);\n\n  return (\n    &lt;div&gt;\n      &lt;p&gt;You clicked {count} times&lt;/p&gt;\n      &lt;button onClick={() =&gt; setCount(count + 1)}&gt;\n        Click me\n      &lt;/button&gt;\n    &lt;/div&gt;\n  );\n}\n\n// 等价的 class 示例\nclass Example extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      count: 0\n    };\n  }\n\n  render() {\n    return (\n      &lt;div&gt;\n        &lt;p&gt;You clicked {this.state.count} times&lt;/p&gt;\n        &lt;button onClick={() =&gt; this.setState({ count: this.state.count + 1 })}&gt;\n          Click me\n        &lt;/button&gt;\n      &lt;/div&gt;\n    );\n  }\n}</pre><p id=\"3f2f7751b6bc6bbae810562f248d6f49_p_225\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"0bdc9d9a521d7140671a00757480b6a5_li_105\"><span class=\"ne-text\">声明多个 </span><code class=\"ne-code\"><span class=\"ne-text\">state</span></code><span class=\"ne-text\"> 变量</span></li></ul><p id=\"73af83e6e31af8831621458232b96888_p_226\" class=\"ne-p\"><br></p><pre data-language=\"jsx\" id=\"31a49c1f\" class=\"ne-codeblock language-jsx\">function ExampleWithManyStates() {\n  // 声明多个 state 变量！\n  const [age, setAge] = useState(42);\n  const [fruit, setFruit] = useState('banana');\n  const [todos, setTodos] = useState([{ text: 'Learn Hooks' }]);\n  // ...\n}</pre><p id=\"b90a99f66c0879bbc49e9b0b68e59c08_p_227\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"16cc16c991871ce385524e13287633eb_li_106\"><span class=\"ne-text\">什么是 </span><code class=\"ne-code\"><span class=\"ne-text\">Hook</span></code></li></ul><p id=\"bdc03e8bcffcbda15027382924358318_p_228\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"8bf911150bc11c31f3bfe2414d7feb0d_p_229\" class=\"ne-p\"><code class=\"ne-code\"><span class=\"ne-text\">Hook</span></code><span class=\"ne-text\"> 是一些可以让你在函数组件里“钩入” </span><code class=\"ne-code\"><span class=\"ne-text\">React state</span></code><span class=\"ne-text\"> 及生命周期等特性的函数。</span><code class=\"ne-code\"><span class=\"ne-text\">Hook</span></code><span class=\"ne-text\"> 不能在 </span><code class=\"ne-code\"><span class=\"ne-text\">class</span></code><span class=\"ne-text\"> 组件中使用 —— 这使得你不使用 </span><code class=\"ne-code\"><span class=\"ne-text\">class</span></code><span class=\"ne-text\"> 也能使用 </span><code class=\"ne-code\"><span class=\"ne-text\">React</span></code><span class=\"ne-text\">。</span></p></div><p id=\"8cc0a1f126bf8ee201bd7f38025053c4_p_230\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"1fede8860a08663340ab5312c0e34e9a_li_107\"><span class=\"ne-text\">惰性 state</span></li></ul><p id=\"8be5851f8b454d92d5566faca980347b_p_231\" class=\"ne-p\"><br></p><pre data-language=\"jsx\" id=\"a9d929e4\" class=\"ne-codeblock language-jsx\">const [state, setState] = useState(() =&gt; {\n  const initialState = someExpensiveComputation(props);\n  return initialState;\n});</pre><p id=\"9bf8874c736b2ce6c6ef8eacb225391e_p_232\" class=\"ne-p\"><br></p><h3 id=\"372afb18\"><span class=\"ne-text\">11.2 </span><span class=\"ne-text\">Effect Hook</span></h3><p id=\"18170e7e8da575f5dcb8686e02c401e4_p_233\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"d045a5e8256de969faa2371b2778f0b6_p_234\" class=\"ne-p\"><code class=\"ne-code\"><span class=\"ne-text\">Effect Hook</span></code><span class=\"ne-text\"> 可以让你在函数组件中执行副作用操作</span></p></div><p id=\"e138d80e1ae914d5031cbb3f3c1d8950_p_235\" class=\"ne-p\"><br></p><h4 id=\"4e2a4a64\"><span class=\"ne-text\">(1) 无需清除的 </span><code class=\"ne-code\"><span class=\"ne-text\">Effect</span></code></h4><p id=\"c454258df76d70059117b842caffb1bc_p_236\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"1a8b7496dfa83009513752d1566d7a7d_p_237\" class=\"ne-p\"><span class=\"ne-text\">有时候，我们只想在 </span><code class=\"ne-code\"><span class=\"ne-text\">React</span></code><span class=\"ne-text\"> 更新 </span><code class=\"ne-code\"><span class=\"ne-text\">DOM</span></code><span class=\"ne-text\"> 之后运行一些额外的代码。比如发送网络请求，手动变更 </span><code class=\"ne-code\"><span class=\"ne-text\">DOM</span></code><span class=\"ne-text\">，记录日志，这些都是常见的无需清除的操作。因为我们在执行完这些操作之后，就可以忽略他们了。</span></p></div><p id=\"6033ae78638b22f9c7b1001e674f8b54_p_238\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"0a185251f6d42502437287cac191491c_li_108\"><span class=\"ne-text\">使用 </span><code class=\"ne-code\"><span class=\"ne-text\">class</span></code><span class=\"ne-text\"> 的示例</span></li></ul><p id=\"2a5c77aaadd212cc52fa92db4e5d7833_p_239\" class=\"ne-p\"><br></p><pre data-language=\"jsx\" id=\"995f8a3f\" class=\"ne-codeblock language-jsx\">class Example extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      count: 0\n    };\n  }\n\n  componentDidMount() {\n    document.title = `You clicked ${this.state.count} times`;\n  }\n  componentDidUpdate() {\n    document.title = `You clicked ${this.state.count} times`;\n  }\n\n  render() {\n    return (\n      &lt;div&gt;\n        &lt;p&gt;You clicked {this.state.count} times&lt;/p&gt;\n        &lt;button onClick={() =&gt; this.setState({ count: this.state.count + 1 })}&gt;\n          Click me\n        &lt;/button&gt;\n      &lt;/div&gt;\n    );\n  }\n}</pre><p id=\"6a64108399bd39151a0c47ad4f78419e_p_240\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"3d88c75707ec456c77954f5d4750e474_li_109\"><span class=\"ne-text\">使用 </span><code class=\"ne-code\"><span class=\"ne-text\">Hook</span></code><span class=\"ne-text\"> 的示例</span></li></ul><p id=\"672ca78e6355d2efd6d038cc344f6bcf_p_241\" class=\"ne-p\"><br></p><pre data-language=\"jsx\" id=\"d0218f05\" class=\"ne-codeblock language-jsx\">import React, { useState, useEffect } from 'react';\n\nfunction Example() {\n  const [count, setCount] = useState(0);\n\n  useEffect(() =&gt; {\n    document.title = `You clicked ${count} times`;\n  });\n\n  return (\n    &lt;div&gt;\n      &lt;p&gt;You clicked {count} times&lt;/p&gt;\n      &lt;button onClick={() =&gt; setCount(count + 1)}&gt;\n        Click me\n      &lt;/button&gt;\n    &lt;/div&gt;\n  );\n}</pre><p id=\"8205712d24d63d21d2add54ced58c376_p_242\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"7b8a18dfd2ad48bb5709886f4c0941bd_p_243\" class=\"ne-p\"><code class=\"ne-code\"><span class=\"ne-text\">useEffect</span></code><span class=\"ne-text\"> 做了什么？ 通过使用这个 </span><code class=\"ne-code\"><span class=\"ne-text\">Hook</span></code><span class=\"ne-text\">，你可以告诉 </span><code class=\"ne-code\"><span class=\"ne-text\">React</span></code><span class=\"ne-text\"> 组件需要在渲染后执行某些操作。</span><code class=\"ne-code\"><span class=\"ne-text\">React</span></code><span class=\"ne-text\"> 会保存你传递的函数（我们将它称之为 “</span><code class=\"ne-code\"><span class=\"ne-text\">effect</span></code><span class=\"ne-text\">”），并且在执行 </span><code class=\"ne-code\"><span class=\"ne-text\">DOM</span></code><span class=\"ne-text\"> 更新之后调用它。在这个 </span><code class=\"ne-code\"><span class=\"ne-text\">effect</span></code><span class=\"ne-text\"> 中，我们设置了 </span><code class=\"ne-code\"><span class=\"ne-text\">document</span></code><span class=\"ne-text\"> 的 </span><code class=\"ne-code\"><span class=\"ne-text\">title</span></code><span class=\"ne-text\"> 属性，不过我们也可以执行数据获取或调用其他命令式的 API。</span></p></div><p id=\"6676b0fdf5d68f5dfac942cb8c232755_p_244\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"0a2b2713a8517a560e093534d7412081_p_245\" class=\"ne-p\"><span class=\"ne-text\">为什么在组件内部调用 </span><code class=\"ne-code\"><span class=\"ne-text\">useEffect</span></code><span class=\"ne-text\">？ 将 </span><code class=\"ne-code\"><span class=\"ne-text\">useEffect</span></code><span class=\"ne-text\"> 放在组件内部让我们可以在 </span><code class=\"ne-code\"><span class=\"ne-text\">effect</span></code><span class=\"ne-text\"> 中直接访问 </span><code class=\"ne-code\"><span class=\"ne-text\">count</span></code><span class=\"ne-text\"> </span><code class=\"ne-code\"><span class=\"ne-text\">state</span></code><span class=\"ne-text\"> 变量（或其他 </span><code class=\"ne-code\"><span class=\"ne-text\">props</span></code><span class=\"ne-text\">）。我们不需要特殊的 </span><code class=\"ne-code\"><span class=\"ne-text\">API</span></code><span class=\"ne-text\"> 来读取它 —— 它已经保存在函数作用域中。</span><code class=\"ne-code\"><span class=\"ne-text\">Hook</span></code><span class=\"ne-text\"> 使用了 </span><code class=\"ne-code\"><span class=\"ne-text\">JavaScript</span></code><span class=\"ne-text\"> 的闭包机制，而不用在 </span><code class=\"ne-code\"><span class=\"ne-text\">JavaScript</span></code><span class=\"ne-text\"> 已经提供了解决方案的情况下，还引入特定的 React API。</span></p></div><p id=\"b4dae59027624f33efe1705e43a76835_p_246\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"bdd9f0e948d891175ec99ff183800192_p_247\" class=\"ne-p\"><code class=\"ne-code\"><span class=\"ne-text\">useEffect</span></code><span class=\"ne-text\"> 会在每次渲染后都执行吗？ 是的，默认情况下，它在第一次渲染之后和每次更新之后都会执行。（我们稍后会谈到如何控制它。）你可能会更容易接受 </span><code class=\"ne-code\"><span class=\"ne-text\">effect</span></code><span class=\"ne-text\"> 发生在“渲染之后”这种概念，不用再去考虑“挂载”还是“更新”。</span><code class=\"ne-code\"><span class=\"ne-text\">React</span></code><span class=\"ne-text\"> 保证了每次运行 </span><code class=\"ne-code\"><span class=\"ne-text\">effect</span></code><span class=\"ne-text\"> 的同时，</span><code class=\"ne-code\"><span class=\"ne-text\">DOM</span></code><span class=\"ne-text\"> 都已经更新完毕。</span></p></div><p id=\"bea473518fba3dbf9effb067ddad4499_p_248\" class=\"ne-p\"><br></p><p id=\"01337932e68c66c183172e5205638a2e_p_249\" class=\"ne-p\"><span class=\"ne-text\">{% note warning, 与 </span><code class=\"ne-code\"><span class=\"ne-text\">componentDidMount</span></code><span class=\"ne-text\"> 或 </span><code class=\"ne-code\"><span class=\"ne-text\">componentDidUpdate</span></code><span class=\"ne-text\"> 不同，使用 </span><code class=\"ne-code\"><span class=\"ne-text\">useEffect</span></code><span class=\"ne-text\"> 调度的 </span><code class=\"ne-code\"><span class=\"ne-text\">effect</span></code><span class=\"ne-text\"> 不会阻塞浏览器更新屏幕，这让你的应用看起来响应更快。大多数情况下，</span><code class=\"ne-code\"><span class=\"ne-text\">effect</span></code><span class=\"ne-text\"> 不需要同步地执行。在个别情况下（例如测量布局），有单独的 </span><code class=\"ne-code\"><span class=\"ne-text\">useLayoutEffect Hook</span></code><span class=\"ne-text\"> 供你使用，其 </span><code class=\"ne-code\"><span class=\"ne-text\">API</span></code><span class=\"ne-text\"> 与 </span><code class=\"ne-code\"><span class=\"ne-text\">useEffect</span></code><span class=\"ne-text\"> 相同。 %}</span></p><p id=\"e08beadb42b714218a1b36be3f0f61c1_p_250\" class=\"ne-p\"><br></p><h4 id=\"ae972712\"><span class=\"ne-text\">(2) 需要清除的 </span><code class=\"ne-code\"><span class=\"ne-text\">Effect</span></code></h4><p id=\"3d18b6b62d151c043218e7d9d07e2abe_p_251\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"595f44cae6e670915fb5972c6ed9edc0_p_252\" class=\"ne-p\"><span class=\"ne-text\">之前，我们研究了如何使用不需要清除的副作用，还有一些副作用是需要清除的。例如订阅外部数据源。这种情况下，清除工作是非常重要的，可以防止引起内存泄露！现在让我们来比较一下如何用 </span><code class=\"ne-code\"><span class=\"ne-text\">Class</span></code><span class=\"ne-text\"> 和 </span><code class=\"ne-code\"><span class=\"ne-text\">Hook</span></code><span class=\"ne-text\"> 来实现。</span></p></div><p id=\"3515d0f9ecb9499a648a8b4a3ee78839_p_253\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"d4061c9ed7c4e9652e5b5bfdc02fa75a_li_110\"><span class=\"ne-text\">使用 </span><code class=\"ne-code\"><span class=\"ne-text\">class</span></code><span class=\"ne-text\"> 的示例</span></li></ul><p id=\"d6f5ed1b4d8d8ac6d60ab389ddb41993_p_254\" class=\"ne-p\"><br></p><pre data-language=\"jsx\" id=\"4f3f9c70\" class=\"ne-codeblock language-jsx\">class FriendStatus extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { isOnline: null };\n    this.handleStatusChange = this.handleStatusChange.bind(this);\n  }\n\n  componentDidMount() {\n    ChatAPI.subscribeToFriendStatus(\n      this.props.friend.id,\n      this.handleStatusChange\n    );\n  }\n  componentWillUnmount() {\n    ChatAPI.unsubscribeFromFriendStatus(\n      this.props.friend.id,\n      this.handleStatusChange\n    );\n  }\n  handleStatusChange(status) {\n    this.setState({\n      isOnline: status.isOnline\n    });\n  }\n\n  render() {\n    if (this.state.isOnline === null) {\n      return 'Loading...';\n    }\n    return this.state.isOnline ? 'Online' : 'Offline';\n  }\n}</pre><p id=\"97e3b88e8f1bfda10a9dde2c42a136f9_p_255\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"a71a0433592e4e2f516ebaf4a4228dfc_li_111\"><span class=\"ne-text\">使用 </span><code class=\"ne-code\"><span class=\"ne-text\">Hook</span></code><span class=\"ne-text\"> 的示例</span></li></ul><p id=\"df7e8d3180610289b39a308b14a0a4a1_p_256\" class=\"ne-p\"><br></p><p id=\"4d8066d27c261fc41a22e9a4df298804_p_257\" class=\"ne-p\"><span class=\"ne-text\">{% note warning, 眼尖的读者可能已经注意到了，这个示例还需要编写 componentDidUpdate 方法才能保证完全正确。我们先暂时忽略这一点，本章节中后续部分会介绍它。 %}</span></p><p id=\"e1f77a305d41e8c97d8b51cc18da7968_p_258\" class=\"ne-p\"><br></p><pre data-language=\"jsx\" id=\"80015c49\" class=\"ne-codeblock language-jsx\">import React, { useState, useEffect } from 'react';\n\nfunction FriendStatus(props) {\n  const [isOnline, setIsOnline] = useState(null);\n\n  useEffect(() =&gt; {\n    function handleStatusChange(status) {\n      setIsOnline(status.isOnline);\n    }\n    ChatAPI.subscribeToFriendStatus(props.friend.id, handleStatusChange);\n    // Specify how to clean up after this effect:\n    return function cleanup() {\n      ChatAPI.unsubscribeFromFriendStatus(props.friend.id, handleStatusChange);\n    };\n  });\n\n  if (isOnline === null) {\n    return 'Loading...';\n  }\n  return isOnline ? 'Online' : 'Offline';\n}</pre><p id=\"e1752ec3be6731068aa3b2551ab39c93_p_259\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"4194101379021d6c4f0a06a840eca86d_p_260\" class=\"ne-p\"><span class=\"ne-text\">为什么要在 </span><code class=\"ne-code\"><span class=\"ne-text\">effect</span></code><span class=\"ne-text\"> 中返回一个函数？ 这是 </span><code class=\"ne-code\"><span class=\"ne-text\">effect</span></code><span class=\"ne-text\"> 可选的清除机制。每个 </span><code class=\"ne-code\"><span class=\"ne-text\">effect</span></code><span class=\"ne-text\"> 都可以返回一个清除函数。如此可以将添加和移除订阅的逻辑放在一起。它们都属于 </span><code class=\"ne-code\"><span class=\"ne-text\">effect</span></code><span class=\"ne-text\"> 的一部分。</span></p></div><p id=\"0344f8f97ae50ef300797fddbaffc9a7_p_261\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"aa219dab22cd3459d455f11f23f2eb3c_p_262\" class=\"ne-p\"><code class=\"ne-code\"><span class=\"ne-text\">React</span></code><span class=\"ne-text\"> 何时清除 </span><code class=\"ne-code\"><span class=\"ne-text\">effect</span></code><span class=\"ne-text\">？ </span><code class=\"ne-code\"><span class=\"ne-text\">React</span></code><span class=\"ne-text\"> 会在组件卸载的时候执行清除操作。正如之前学到的，</span><code class=\"ne-code\"><span class=\"ne-text\">effect</span></code><span class=\"ne-text\"> 在每次渲染的时候都会执行。这就是为什么 </span><code class=\"ne-code\"><span class=\"ne-text\">React</span></code><span class=\"ne-text\"> 会在执行当前 </span><code class=\"ne-code\"><span class=\"ne-text\">effect</span></code><span class=\"ne-text\"> 之前对上一个 </span><code class=\"ne-code\"><span class=\"ne-text\">effect</span></code><span class=\"ne-text\"> 进行清除。我们稍后将讨论为什么这将助于避免 </span><code class=\"ne-code\"><span class=\"ne-text\">bug</span></code><span class=\"ne-text\"> 以及如何在遇到性能问题时跳过此行为。</span></p></div><p id=\"e319add840b73a166328bf789b6ae09d_p_263\" class=\"ne-p\"><br></p><p id=\"ce922745bf99aadcd0c991056ccc0c6b_p_264\" class=\"ne-p\"><span class=\"ne-text\">{% note warning, 并不是必须为 </span><code class=\"ne-code\"><span class=\"ne-text\">effect</span></code><span class=\"ne-text\"> 中返回的函数命名。这里我们将其命名为 </span><code class=\"ne-code\"><span class=\"ne-text\">cleanup</span></code><span class=\"ne-text\"> 是为了表明此函数的目的，但其实也可以返回一个箭头函数或者给起一个别的名字。 %}</span></p><p id=\"e4d5668038ec0dd0f47f3473097287e2_p_265\" class=\"ne-p\"><br></p><h3 id=\"ede5397c\"><span class=\"ne-text\">11.3 Hook 规则</span></h3><p id=\"428555912f5368c5c0732996b2549c24_p_266\" class=\"ne-p\"><br></p><h4 id=\"ebf8e573\"><span class=\"ne-text\">(1) 只在最顶层使用 </span><code class=\"ne-code\"><span class=\"ne-text\">Hook</span></code></h4><p id=\"c1f615bd093ec15198b28dc0cd440916_p_267\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"9a29109a9bf8a441ca98b72e3875bfd7_p_268\" class=\"ne-p\"><span class=\"ne-text\">不要在循环，条件或嵌套函数中调用 </span><code class=\"ne-code\"><span class=\"ne-text\">Hook</span></code><span class=\"ne-text\">， 确保总是在你的 </span><code class=\"ne-code\"><span class=\"ne-text\">React</span></code><span class=\"ne-text\"> 函数的最顶层调用他们。遵守这条规则，你就能确保 </span><code class=\"ne-code\"><span class=\"ne-text\">Hook</span></code><span class=\"ne-text\"> 在每一次渲染中都按照同样的顺序被调用。这让 </span><code class=\"ne-code\"><span class=\"ne-text\">React</span></code><span class=\"ne-text\"> 能够在多次的 </span><code class=\"ne-code\"><span class=\"ne-text\">useState</span></code><span class=\"ne-text\"> 和 </span><code class=\"ne-code\"><span class=\"ne-text\">useEffect</span></code><span class=\"ne-text\"> 调用之间保持 </span><code class=\"ne-code\"><span class=\"ne-text\">hook</span></code><span class=\"ne-text\"> 状态的正确。</span></p></div><p id=\"8757c9f7854dde4a72cfc4af616e895a_p_269\" class=\"ne-p\"><br></p><h4 id=\"e9917ca1\"><span class=\"ne-text\">(2) 只在 </span><code class=\"ne-code\"><span class=\"ne-text\">React</span></code><span class=\"ne-text\"> 函数中调用 </span><code class=\"ne-code\"><span class=\"ne-text\">Hook</span></code></h4><p id=\"f994bede262e74fa3b6f0e70c438222d_p_270\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"d36bbd05ed516cf28aace858036c2c1c_p_271\" class=\"ne-p\"><span class=\"ne-text\">不要在普通的 </span><code class=\"ne-code\"><span class=\"ne-text\">JavaScript</span></code><span class=\"ne-text\"> 函数中调用 </span><code class=\"ne-code\"><span class=\"ne-text\">Hook</span></code><span class=\"ne-text\">。你可以：</span></p></div><p id=\"4af52400f7f68b78e0bfc22f9633493e_p_272\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"6cc98e70889c4ef9a85df0e22e8ae2ef_li_112\"><span class=\"ne-text\">✅ 在 </span><code class=\"ne-code\"><span class=\"ne-text\">React</span></code><span class=\"ne-text\"> 的函数组件中调用 </span><code class=\"ne-code\"><span class=\"ne-text\">Hook</span></code></li></ul><ul class=\"ne-ul\"><li id=\"d1c9f89e13b3b50f5f6df84e34bd0aeb_li_113\"><span class=\"ne-text\">✅ 在自定义 </span><code class=\"ne-code\"><span class=\"ne-text\">Hook</span></code><span class=\"ne-text\"> 中调用其他 </span><code class=\"ne-code\"><span class=\"ne-text\">Hook</span></code></li></ul><p id=\"3f2704f87d6ead87f93c1c897ce22fea_p_273\" class=\"ne-p\"><br></p><h3 id=\"27f298a9\"><span class=\"ne-text\">11.4 自定义 Hook</span></h3><p id=\"a57e3e87113ee096d36d0fd8d72ea1ca_p_274\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"bc431a05f11463bee4a1e518d9d0e2f0_p_275\" class=\"ne-p\"><span class=\"ne-text\">通过自定义 </span><code class=\"ne-code\"><span class=\"ne-text\">Hook</span></code><span class=\"ne-text\">，可以将组件逻辑提取到可重用的函数中。</span></p></div><p id=\"c2f8a44a9de114d551b6cb9360b19084_p_276\" class=\"ne-p\"><br></p><h4 id=\"98ad417c\"><span class=\"ne-text\">(1) 提取自定义 </span><code class=\"ne-code\"><span class=\"ne-text\">Hook</span></code></h4><p id=\"5e01eae6c8e0e41c350eff7c120f6c4d_p_277\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"fed000bbcbba4183a4549443ff02e384_p_278\" class=\"ne-p\"><span class=\"ne-text\">当我们想在两个函数之间共享逻辑时，我们会把它提取到第三个函数中。而组件和 </span><code class=\"ne-code\"><span class=\"ne-text\">Hook</span></code><span class=\"ne-text\"> 都是函数，所以也同样适用这种方式。</span></p></div><p id=\"f658905930ba3ab999e81f9ca3773cdd_p_279\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"878ff0c9bceae6501690e7f7870d4c12_p_280\" class=\"ne-p\"><span class=\"ne-text\">自定义 </span><code class=\"ne-code\"><span class=\"ne-text\">Hook</span></code><span class=\"ne-text\"> 是一个函数，其名称以 “</span><code class=\"ne-code\"><span class=\"ne-text\">use</span></code><span class=\"ne-text\">” 开头，函数内部可以调用其他的 </span><code class=\"ne-code\"><span class=\"ne-text\">Hook</span></code><span class=\"ne-text\">。 例如，下面的 </span><code class=\"ne-code\"><span class=\"ne-text\">useFriendStatus</span></code><span class=\"ne-text\"> 是我们第一个自定义的 </span><code class=\"ne-code\"><span class=\"ne-text\">Hook</span></code><span class=\"ne-text\">:</span></p></div><p id=\"31f48e2ab2cc1fa560bafed1287af19b_p_281\" class=\"ne-p\"><br></p><pre data-language=\"jsx\" id=\"b3a1fec4\" class=\"ne-codeblock language-jsx\">import { useState, useEffect } from 'react';\n\nfunction useFriendStatus(friendID) {\n  const [isOnline, setIsOnline] = useState(null);\n\n  useEffect(() =&gt; {\n    function handleStatusChange(status) {\n      setIsOnline(status.isOnline);\n    }\n\n    ChatAPI.subscribeToFriendStatus(friendID, handleStatusChange);\n    return () =&gt; {\n      ChatAPI.unsubscribeFromFriendStatus(friendID, handleStatusChange);\n    };\n  });\n\n  return isOnline;\n}</pre><p id=\"2315f10f54bc7e13b39e40a7ef999847_p_282\" class=\"ne-p\"><br></p><h4 id=\"44cb8100\"><span class=\"ne-text\">(2) 使用自定义 </span><code class=\"ne-code\"><span class=\"ne-text\">Hook</span></code></h4><p id=\"d8862285fa1c5254153b79d80f836d67_p_283\" class=\"ne-p\"><br></p><pre data-language=\"jsx\" id=\"bf94f096\" class=\"ne-codeblock language-jsx\">function FriendStatus(props) {\n  const isOnline = useFriendStatus(props.friend.id);\n\n  if (isOnline === null) {\n    return 'Loading...';\n  }\n  return isOnline ? 'Online' : 'Offline';\n}\n\nfunction FriendListItem(props) {\n  const isOnline = useFriendStatus(props.friend.id);\n\n  return (\n    &lt;li style={{ color: isOnline ? 'green' : 'black' }}&gt;\n      {props.friend.name}\n    &lt;/li&gt;\n  );\n}</pre><p id=\"d643b961309916d9e6d944f2fc2ef443_p_284\" class=\"ne-p\"><br></p><h3 id=\"e74ceb0d\"><span class=\"ne-text\">11.5 Hook API 索引</span></h3><p id=\"c667c8fb4a9b06dea1ac969618387647_p_285\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"430db838db4b7ae260b078822961308c_p_286\" class=\"ne-p\"><span class=\"ne-text\">参见 </span><a href=\"https://react.docschina.org/docs/hooks-reference.html\" data-href=\"https://react.docschina.org/docs/hooks-reference.html\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">Hook API</span></a></p></div><p id=\"4b09dea2a885c00a614eef1d25a58513_p_287\" class=\"ne-p\"><br></p><h4 id=\"bd0a855d\"><span class=\"ne-text\">11.5.1 基础 Hook</span></h4><p id=\"6d7ea3ddda2a454c5683711790958ce9_p_288\" class=\"ne-p\"><br></p><h5 id=\"useState\"><span class=\"ne-text\">useState</span></h5><p id=\"eaf89275095ca133033e98ed4b1e7f4f_p_289\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"5364718a82f5749d0dd14fbf19bd33e5_p_290\" class=\"ne-p\"><a href=\"#linkUseState\" data-href=\"#linkUseState\" class=\"ne-link\"><span class=\"ne-text\">点击跳转</span></a></p></div><p id=\"ad203e3a237b08b1d0d926597eaff133_p_291\" class=\"ne-p\"><br></p><h5 id=\"useEffect\"><span class=\"ne-text\">useEffect</span></h5><p id=\"b97212b73dbf30e62a224a0cb8196f65_p_292\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"852828110c3dd638e14b6d097c65cd73_p_293\" class=\"ne-p\"><a href=\"#linkUseEffect\" data-href=\"#linkUseEffect\" class=\"ne-link\"><span class=\"ne-text\">点击跳转</span></a></p></div><p id=\"fe7fc0ab45dac8012eef4e5feecabfcd_p_294\" class=\"ne-p\"><br></p><h5 id=\"useContext\"><span class=\"ne-text\">useContext</span></h5><p id=\"77fe4e42c2d2d366d1accde6e1c1af59_p_295\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"950e0296544b8cdd2b427c1f563d68cd_p_296\" class=\"ne-p\"><span class=\"ne-text\">订阅 </span><code class=\"ne-code\"><span class=\"ne-text\">context</span></code><span class=\"ne-text\"> 的变化，感觉就是对于获取 </span><code class=\"ne-code\"><span class=\"ne-text\">context</span></code><span class=\"ne-text\"> 的值换了一种写法而已。相对于之前的写法，在函数组件中添加 </span><code class=\"ne-code\"><span class=\"ne-text\">context</span></code><span class=\"ne-text\"> 更加简单。</span></p></div><p id=\"4d03ec137080c7a0ce05f378a2fc9078_p_297\" class=\"ne-p\"><br></p><pre data-language=\"jsx\" id=\"52cee664\" class=\"ne-codeblock language-jsx\">const context = React.createContext({})\nconst { Provider, Consumer  } = context; \n\n// hooks的写法\nclass App extends React.Component {\n    return (\n        &lt;Provider value={{ name: 'li' }}&gt; \n            &lt;Hello/&gt;\n        &lt;/Provider&gt;\n    &lt;/div&gt;\n}\nfunction Hello () {\n    const value = useContext(context); \n    return &lt;h1&gt;value: {value.name}&lt;/h1&gt;\n}\n  \n// 原本的写法\nfunction Hello (props) {\n    function render ({name}) {\n      return &lt;h1&gt;value: {value.name}&lt;/h1&gt;\n    }\n    return (\n      &lt;Consumer&gt;\n        {render}\n      &lt;/Consumer&gt;\n    )\n}</pre><p id=\"6b7d4d1ce5df30f76ec280811854eb6a_p_298\" class=\"ne-p\"><br></p><h4 id=\"b56fd342\"><span class=\"ne-text\">11.5.2 额外的 Hook</span></h4><p id=\"f7dab119a6de9c02eceeeaa20c58303b_p_299\" class=\"ne-p\"><br></p><h5 id=\"useReducer\"><span class=\"ne-text\">useReducer</span></h5><p id=\"3b1704c33fc6d6f8a8da83e196debd0d_p_300\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"2dd1b1e57a8774e948e6981e306949b5_p_301\" class=\"ne-p\"><span class=\"ne-text\">类似于 </span><code class=\"ne-code\"><span class=\"ne-text\">redux</span></code><span class=\"ne-text\"> 那样的状态更新方案。使用场景（基本上就是 </span><code class=\"ne-code\"><span class=\"ne-text\">redux</span></code><span class=\"ne-text\"> 的应用场景），管理的状态值是对象，并且键值较多。</span><code class=\"ne-code\"><span class=\"ne-text\">state</span></code><span class=\"ne-text\"> 每个 </span><code class=\"ne-code\"><span class=\"ne-text\">key</span></code><span class=\"ne-text\"> 修改的逻辑比较复杂，需要单独放到一个文件里面管理。</span></p></div><p id=\"97a3a563936e81f5bef06c12d11ccafb_p_302\" class=\"ne-p\"><br></p><pre data-language=\"jsx\" id=\"09a4c300\" class=\"ne-codeblock language-jsx\">const initialState = {count: 0};\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case 'increment':\n      return {count: state.count + 1};\n    case 'decrement':\n      return {count: state.count - 1};\n    default:\n      throw new Error();\n  }\n}\n\nfunction Counter() {\n  const [state, dispatch] = useReducer(reducer, initialState);\n  return (\n    &lt;&gt;\n      Count: {state.count}\n      &lt;button onClick={() =&gt; dispatch({type: 'increment'})}&gt;+&lt;/button&gt;\n      &lt;button onClick={() =&gt; dispatch({type: 'decrement'})}&gt;-&lt;/button&gt;\n    &lt;/&gt;\n  );\n}</pre><p id=\"57402685839e485b1d12a6ea6e69cd22_p_303\" class=\"ne-p\"><br></p><h5 id=\"useCallback\"><span class=\"ne-text\">useCallback</span></h5><p id=\"19e2a238dbc7e25bbba74d975405d802_p_304\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"a6e2775d86bb42dae5ba483bdd63a0ab_p_305\" class=\"ne-p\"><span class=\"ne-text\">仅在指定的依赖项发生变化时，会返回一个新的函数引用，函数体并没有发生变化。</span></p></div><p id=\"287a7991d15a9423698de5405daff209_p_306\" class=\"ne-p\"><br></p><pre data-language=\"jsx\" id=\"464735ad\" class=\"ne-codeblock language-jsx\">const memoizedCallback = useCallback(\n  () =&gt; {\n    doSomething(a, b);\n  },\n  [a, b],\n);</pre><p id=\"6e083a5926a9936a23902c87e04b4686_p_307\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"82b30015ed4876d6e4fdbea08f0a2755_p_308\" class=\"ne-p\"><span class=\"ne-text\">这样使用的好处：不会在每次组件 </span><code class=\"ne-code\"><span class=\"ne-text\">render</span></code><span class=\"ne-text\"> 的时候，重新生成一个函数，节省开销。例如</span></p></div><p id=\"0375f6a488aa68e79b4a160ec7f8fa4d_p_309\" class=\"ne-p\"><br></p><pre data-language=\"jsx\" id=\"d06e5e59\" class=\"ne-codeblock language-jsx\">function f () {\n  const cacheCallback = useCallback(\n      () =&gt; {\n    \t\t\tdoSomething(a, b);\n  \t\t\t},\n  \t\t\t[a, b],\n  )\n  // 和下面这样的形式相比, 每次组件渲染的时候，都会重新创建一个 doSometing 函数\n  function doSometing (a,b) {}\n}</pre><p id=\"a56b84e031e02e5715ff0d6aadb83c0e_p_310\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"7a9d53268638d0d35d12b26c6ffa2a64_p_311\" class=\"ne-p\"><span class=\"ne-text\">可以保持函数的引用保持不变。我们都知道在类组件，事件处理函数基本上都是通过 </span><code class=\"ne-code\"><span class=\"ne-text\">this.method</span></code><span class=\"ne-text\"> 的方式绑定的，这样做的方式有一个好处，对方法的引用一直保持不变。 那么在函数组件就可以通过使用 </span><code class=\"ne-code\"><span class=\"ne-text\">useCallback</span></code><span class=\"ne-text\"> 来实现。</span></p></div><p id=\"f5c413e64e1bf60658b94f4d5ffba94d_p_312\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"8925408e1047da89dec5a8c65b180965_p_313\" class=\"ne-p\"><span class=\"ne-text\">可以实现在子组件把该回调作为依赖处理。</span></p></div><p id=\"723be51dabd620a0060235545593c061_p_314\" class=\"ne-p\"><br></p><pre data-language=\"jsx\" id=\"9f608cb7\" class=\"ne-codeblock language-jsx\">function Parent ({a, b}) {\n  const cacheCallback = useCallback(\n      () =&gt; {\n        doSometing(a, b);\n      },\n      [a, b]\n  )\n  return &lt;Child handler={cacheCallback}/&gt;\n}\n\nfunction Child ({ handler }) {\n  useEffect(() =&gt; {\n    handler();\n  }, [handler])\n}</pre><p id=\"d66e43a0ceceeaca4196978e5996b0d3_p_315\" class=\"ne-p\"><br></p><h5 id=\"useMemo\"><span class=\"ne-text\">useMemo</span></h5><p id=\"024a8421e8afb441225906c83320d8b8_p_316\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"bc4c80115192006539b4cd874696afcb_p_317\" class=\"ne-p\"><span class=\"ne-text\">类似于 </span><code class=\"ne-code\"><span class=\"ne-text\">vue</span></code><span class=\"ne-text\"> 的 </span><code class=\"ne-code\"><span class=\"ne-text\">computed</span></code><span class=\"ne-text\">，在依赖发生变化的时候重新计算缓存值。其实自己实现起来也很容易，和 </span><code class=\"ne-code\"><span class=\"ne-text\">vue</span></code><span class=\"ne-text\"> 的计算属性不同的是，</span><code class=\"ne-code\"><span class=\"ne-text\">vue</span></code><span class=\"ne-text\"> 的计算属性是自动收集依赖的，而使用 </span><code class=\"ne-code\"><span class=\"ne-text\">useMeno</span></code><span class=\"ne-text\"> 需要手动在数组种传入依赖项。</span></p></div><p id=\"10c43070f7361810f0a11bc380b5c8d3_p_318\" class=\"ne-p\"><br></p><pre data-language=\"jsx\" id=\"07a99bdf\" class=\"ne-codeblock language-jsx\">const memoizedValue = useMemo(() =&gt; computeExpensiveValue(a, b), [a, b]);</pre><p id=\"4f67f2156dee24fd9a5d4af3856a8608_p_319\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"d7cc12f9d8b83421210ef072571a4763_p_320\" class=\"ne-p\"><code class=\"ne-code\"><span class=\"ne-text\">useCallback(fn, deps)</span></code><span class=\"ne-text\"> 相当于 </span><code class=\"ne-code\"><span class=\"ne-text\">useMemo(() =&gt; fn, deps)</span></code></p></div><p id=\"386408b19add78b5d4538676e07dc69f_p_321\" class=\"ne-p\"><br></p><h5 id=\"useRef\"><span class=\"ne-text\">useRef</span></h5><p id=\"73ec4e895ea3387f14965acf6166c09a_p_322\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"f578fdaef4d723a9b9c852386795d01a_p_323\" class=\"ne-p\"><span class=\"ne-text\">故名思义，该 </span><code class=\"ne-code\"><span class=\"ne-text\">hook</span></code><span class=\"ne-text\"> 主要是用来获取组件实例或者或者 </span><code class=\"ne-code\"><span class=\"ne-text\">dom</span></code><span class=\"ne-text\"> 节点。 但是它更有用的地方，是可以返回一个在组件生命周期内，引用不变的对象。</span></p></div><p id=\"deca07778d4970b7e735a77c95d1efec_p_324\" class=\"ne-p\"><br></p><pre data-language=\"jsx\" id=\"c973c99a\" class=\"ne-codeblock language-jsx\">function f () {\n  const elRef = uesRef(null);\n  return &lt;div ref={elRef}&gt;&lt;/div&gt;\n}</pre><p id=\"869206ecba3f946b7a6ba2e46f91db50_p_325\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"8082825b1f0a9ee266e2c449ef5f946d_p_326\" class=\"ne-p\"><span class=\"ne-text\">用来存储数据的话，考虑下面的场景。</span></p></div><p id=\"1260835a1e832a2cbb7274deda8a76af_p_327\" class=\"ne-p\"><br></p><pre data-language=\"jsx\" id=\"e32e8689\" class=\"ne-codeblock language-jsx\">let handler = () =&gt; {}; // 事件处理函数\n// 不使用 useRef, 可以使用函数外部的一个变量来存储数据\nfunction f () {\n  useEffect(() =&gt; {\n    window.addEventListener('scroll', handler)\n  }, [])\n  \n  const moveScroll = useCallback(\n    () =&gt; {\n      window.removeEventListener('scorll', handler)\n    },\n    []\n  )\n  \n  return &lt;div onClick={moveScroll} ref={elRef}&gt;移除scroll监听&lt;/div&gt;\n}\n\n// 使用useRef的版本，可以使代码更加内聚。但是前提是必须要理解useRef这个hooks。\nfunction f () {\n  \n  const handler = useRef(null);\n  handler.current = () =&gt; {}  // 事件处理\n  \n  useEffect(() =&gt; {\n    window.addEventListener('scroll', handler.current)\n  }, [])\n  \n  const moveScroll = useCallback(\n    () =&gt; {\n      window.removeEventListener('scorll', handler.current)\n    },\n    []\n  )\n  \n  return &lt;div onClick={moveScroll} ref={elRef}&gt;移除scroll监听&lt;/div&gt;\n}</pre><p id=\"41eae880938c5eadbe95b939a2a3507a_p_328\" class=\"ne-p\"><br></p><h5 id=\"useImperativeHandle\"><span class=\"ne-text\">useImperativeHandle</span></h5><p id=\"367e571e142935bde23beca7770f783a_p_329\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"346c494867441d85d4a218b69537f76a_p_330\" class=\"ne-p\"><code class=\"ne-code\"><span class=\"ne-text\">useImperativeHandle</span></code><span class=\"ne-text\"> 可以让你在使用 </span><code class=\"ne-code\"><span class=\"ne-text\">ref</span></code><span class=\"ne-text\"> 时自定义暴露给父组件的实例值。</span></p></div><p id=\"df5870a4b055e4cd4943273fac462f51_p_331\" class=\"ne-p\"><br></p><pre data-language=\"jsx\" id=\"5e639950\" class=\"ne-codeblock language-jsx\">const Fancy = React.forwardRef((props, ref) =&gt; {\n    return &lt;div&gt;\n        &lt;input type=&quot;text&quot; ref={ref}/&gt;\n    &lt;/div&gt; \n})\n\nfunction Hello () {\n    const ref = useRef(null); \n\n    useEffect(() =&gt; {\n        console.log('current', ref); // { current: Input }\n    }, [])\n\n    return &lt;Fancy ref={ref}/&gt;\n}</pre><p id=\"103e6bdcb2dcc51c8de25c5d976a9f93_p_332\" class=\"ne-p\"><br></p><h5 id=\"useLayoutEffect\"><span class=\"ne-text\">useLayoutEffect</span></h5><p id=\"b4252b6b2deddfea7cfc17616ff2e148_p_333\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"7814d4e5bccce1c4045244e5aafe4a71_p_334\" class=\"ne-p\"><span class=\"ne-text\">函数签名和 </span><code class=\"ne-code\"><span class=\"ne-text\">useEffect</span></code><span class=\"ne-text\"> 是一样的， 可以使用它来读取 </span><code class=\"ne-code\"><span class=\"ne-text\">DOM</span></code><span class=\"ne-text\"> 布局并 </span><code class=\"ne-code\"><span class=\"ne-text\">同步</span></code><span class=\"ne-text\"> 触发重渲染。</span></p></div><p id=\"848d57ddbbb6aa5c588defcda9c65bc0_p_335\" class=\"ne-p\"><br></p><h5 id=\"useDebugValue\"><span class=\"ne-text\">useDebugValue</span></h5><p id=\"41b79b76dff04c782ee1693f129a0de3_p_336\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"8cb0bbf6076bd8a3c0a05716e4c3dc6f_p_337\" class=\"ne-p\"><span class=\"ne-text\">用来给 </span><code class=\"ne-code\"><span class=\"ne-text\">hooks</span></code><span class=\"ne-text\"> 添加上打印信息。</span></p></div></div>",
  "body_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"traditional\" /><meta name=\"viewport\" content=\"adapt\" /><h2 data-lake-id=\"fea6bf27\" id=\"fea6bf27\"><span data-lake-id=\"u097db352\" id=\"u097db352\">1. React 中的核心概念</span></h2><p data-lake-id=\"0c4d068e4aede2bc9d552ce387999b01_p_4\" id=\"0c4d068e4aede2bc9d552ce387999b01_p_4\"><br></p><h3 data-lake-id=\"fbfd7594\" id=\"fbfd7594\"><span data-lake-id=\"ufa4c8e3a\" id=\"ufa4c8e3a\">虚拟DOM</span></h3><p data-lake-id=\"7467903a77e4c43e92d4f196903d0bbe_p_5\" id=\"7467903a77e4c43e92d4f196903d0bbe_p_5\"><br></p><ol list=\"ueef86ad9\"><li fid=\"u47641cb0\" data-lake-id=\"d0bcb9f715f91e757876e66225fabafc_li_3\" id=\"d0bcb9f715f91e757876e66225fabafc_li_3\"><span data-lake-id=\"u8cfcc30a\" id=\"u8cfcc30a\">DOM 的本质是什么？</span></li></ol><p data-lake-id=\"f23fb9c519ff30bfe03d0b2cc2cac85d_p_6\" id=\"f23fb9c519ff30bfe03d0b2cc2cac85d_p_6\"><br></p><blockquote data-lake-id=\"u0c25bce3\" id=\"u0c25bce3\"><p data-lake-id=\"9f45c28262b3217ada896e2491fad327_p_7\" id=\"9f45c28262b3217ada896e2491fad327_p_7\"><span data-lake-id=\"u15a91676\" id=\"u15a91676\">浏览器中的概念，用</span><code data-lake-id=\"ueefeace2\" id=\"ueefeace2\"><span data-lake-id=\"u7560d66c\" id=\"u7560d66c\">js</span></code><span data-lake-id=\"u35c46b02\" id=\"u35c46b02\">对象来表示页面上的元素，并提供了操作 </span><code data-lake-id=\"u77dc7fa6\" id=\"u77dc7fa6\"><span data-lake-id=\"ueaad042d\" id=\"ueaad042d\">DOM</span></code><span data-lake-id=\"ud62837bd\" id=\"ud62837bd\"> 对象的 API；</span></p></blockquote><p data-lake-id=\"92c8228235b93f7cc9ced6ac90fca3a6_p_8\" id=\"92c8228235b93f7cc9ced6ac90fca3a6_p_8\"><br></p><ol list=\"u691f1f2b\" start=\"2\"><li fid=\"uac02c2b1\" data-lake-id=\"3abf4d32b5c3b78653dcb11e1be6e321_li_4\" id=\"3abf4d32b5c3b78653dcb11e1be6e321_li_4\"><span data-lake-id=\"udbce51c3\" id=\"udbce51c3\">什么是 React 中的 虚拟DOM？（ 虚拟DOM 的本质）：</span></li></ol><p data-lake-id=\"eadc4ec477465f1f239730d987d394b1_p_9\" id=\"eadc4ec477465f1f239730d987d394b1_p_9\"><br></p><blockquote data-lake-id=\"u7d282ab0\" id=\"u7d282ab0\"><p data-lake-id=\"2851fd86e235ec8d492d1b7120d1d7a3_p_10\" id=\"2851fd86e235ec8d492d1b7120d1d7a3_p_10\"><span data-lake-id=\"uf6e32ac6\" id=\"uf6e32ac6\">用</span><code data-lake-id=\"u78d921ae\" id=\"u78d921ae\"><span data-lake-id=\"u951d667b\" id=\"u951d667b\">js</span></code><span data-lake-id=\"ue1c22291\" id=\"ue1c22291\">对象来模拟 页面上的</span><code data-lake-id=\"u27a3291c\" id=\"u27a3291c\"><span data-lake-id=\"u3957123b\" id=\"u3957123b\">DOM和DOM嵌套</span></code></p></blockquote><p data-lake-id=\"828bea0262f636b25c97fbef525aed20_p_11\" id=\"828bea0262f636b25c97fbef525aed20_p_11\"><br></p><ol list=\"u8c7e39d5\" start=\"3\"><li fid=\"u2957e3bb\" data-lake-id=\"e745454f9992cdf37e096a5aa1dacc14_li_5\" id=\"e745454f9992cdf37e096a5aa1dacc14_li_5\"><span data-lake-id=\"u5683bd7c\" id=\"u5683bd7c\">为什么要实现 虚拟DOM ？（ 虚拟DOM 的目的）：</span></li></ol><p data-lake-id=\"09a2b5671cf447a1a3529d71c89cf9e1_p_12\" id=\"09a2b5671cf447a1a3529d71c89cf9e1_p_12\"><br></p><blockquote data-lake-id=\"uca903439\" id=\"uca903439\"><p data-lake-id=\"4f1628750ae1b420b76293bc84c4f401_p_13\" id=\"4f1628750ae1b420b76293bc84c4f401_p_13\"><span data-lake-id=\"ud19b9c33\" id=\"ud19b9c33\">为了实现页面中，</span><code data-lake-id=\"ufaccd24c\" id=\"ufaccd24c\"><span data-lake-id=\"u69d6797f\" id=\"u69d6797f\">DOM</span></code><span data-lake-id=\"u44373015\" id=\"u44373015\">元素的高效更新</span></p></blockquote><p data-lake-id=\"7cf79ceeaaf91ef14264b4c55c1c8c1d_p_14\" id=\"7cf79ceeaaf91ef14264b4c55c1c8c1d_p_14\"><br></p><ol list=\"ua7e61066\" start=\"4\"><li fid=\"u2cb529a5\" data-lake-id=\"e7e548d3b48115ec5caa71960da100b7_li_6\" id=\"e7e548d3b48115ec5caa71960da100b7_li_6\"><span data-lake-id=\"ue913d191\" id=\"ue913d191\">DOM 和 虚拟DOM 的区别：</span></li></ol><p data-lake-id=\"c53070088aadb43ef468f61fca8ca22a_p_15\" id=\"c53070088aadb43ef468f61fca8ca22a_p_15\"><br></p><ul list=\"u7e58dfe5\"><li fid=\"ucd96fdc5\" data-lake-id=\"5bec64fac03fd5bfea7c026d2c06be25_li_7\" id=\"5bec64fac03fd5bfea7c026d2c06be25_li_7\"><code data-lake-id=\"u068f1cdf\" id=\"u068f1cdf\"><span data-lake-id=\"u911a1d4d\" id=\"u911a1d4d\">DOM</span></code><span data-lake-id=\"u985ecff4\" id=\"u985ecff4\">：浏览器中，提供的概念；用</span><code data-lake-id=\"u7b36af15\" id=\"u7b36af15\"><span data-lake-id=\"u1c5fd6e2\" id=\"u1c5fd6e2\">js</span></code><span data-lake-id=\"u3e1b3fc2\" id=\"u3e1b3fc2\">对象，表示页面上的元素，并提供了操作元素的 </span><code data-lake-id=\"u1ef1da2e\" id=\"u1ef1da2e\"><span data-lake-id=\"u0b9b5db4\" id=\"u0b9b5db4\">API</span></code><span data-lake-id=\"uf3918e61\" id=\"uf3918e61\">；</span></li></ul><ul list=\"uc53a15f2\"><li fid=\"u4d76c783\" data-lake-id=\"ac31fffe2ff0f85acfc8495e8141098e_li_8\" id=\"ac31fffe2ff0f85acfc8495e8141098e_li_8\"><code data-lake-id=\"ue876818d\" id=\"ue876818d\"><span data-lake-id=\"u792134c1\" id=\"u792134c1\">虚拟DOM</span></code><span data-lake-id=\"uc8f5d007\" id=\"uc8f5d007\">：是框架中的概念；是开发框架的人员，手动用</span><code data-lake-id=\"uc473fa38\" id=\"uc473fa38\"><span data-lake-id=\"u083645e7\" id=\"u083645e7\">js</span></code><span data-lake-id=\"uf280e611\" id=\"uf280e611\">对象来模拟</span><code data-lake-id=\"u5586a848\" id=\"u5586a848\"><span data-lake-id=\"ua4dca9cd\" id=\"ua4dca9cd\">DOM</span></code><span data-lake-id=\"u88c97d27\" id=\"u88c97d27\">元素和嵌套关系；</span></li></ul><p data-lake-id=\"42752743bc6d3f9f6c928fb47989b8c2_p_16\" id=\"42752743bc6d3f9f6c928fb47989b8c2_p_16\"><br></p><ol list=\"u5eb4922b\" start=\"5\"><li fid=\"u1a9cfb1f\" data-lake-id=\"8e12d9b7521afe77b5074d90cb5051c7_li_9\" id=\"8e12d9b7521afe77b5074d90cb5051c7_li_9\"><span data-lake-id=\"udeb96430\" id=\"udeb96430\">DOM 树的概念：</span></li></ol><p data-lake-id=\"c5eaf555cee01ec836fc749258c6179d_p_17\" id=\"c5eaf555cee01ec836fc749258c6179d_p_17\"><br></p><blockquote data-lake-id=\"uc46ff370\" id=\"uc46ff370\"><p data-lake-id=\"4a5a5fc38dad38c3273b6ecac076fcce_p_18\" id=\"4a5a5fc38dad38c3273b6ecac076fcce_p_18\"><span data-lake-id=\"u0513ba94\" id=\"u0513ba94\">一个网页的呈现过程：</span></p><ol list=\"uef23468a\"><li fid=\"ub4583230\" data-lake-id=\"39867423b1b5480bd9e1877d5c96473e_li_10\" id=\"39867423b1b5480bd9e1877d5c96473e_li_10\"><span data-lake-id=\"u07a9151d\" id=\"u07a9151d\">浏览器请求服务器获取页面的 </span><code data-lake-id=\"ua3f95b83\" id=\"ua3f95b83\"><span data-lake-id=\"ud80646c1\" id=\"ud80646c1\">html</span></code><span data-lake-id=\"u73cf5ec8\" id=\"u73cf5ec8\"> 代码；</span></li></ol><ol list=\"u0df5bbe5\" start=\"2\"><li fid=\"ubb1373f0\" data-lake-id=\"487aa961cb002de08f69ace12780bd10_li_11\" id=\"487aa961cb002de08f69ace12780bd10_li_11\"><span data-lake-id=\"u5b62a942\" id=\"u5b62a942\">浏览器要先在内存中，解析 </span><code data-lake-id=\"ucd95b8c6\" id=\"ucd95b8c6\"><span data-lake-id=\"ua944dd45\" id=\"ua944dd45\">DOM</span></code><span data-lake-id=\"u02805776\" id=\"u02805776\"> 结构，并在浏览器内存中，渲染出一棵 </span><code data-lake-id=\"u321ab811\" id=\"u321ab811\"><span data-lake-id=\"ucfee4a4c\" id=\"ucfee4a4c\">DOM</span></code><span data-lake-id=\"u9795861d\" id=\"u9795861d\"> 树；</span></li></ol><ol list=\"u9aaffc52\" start=\"3\"><li fid=\"u88d6cc0d\" data-lake-id=\"79cf316051ca93a96895eac1189d8a8c_li_12\" id=\"79cf316051ca93a96895eac1189d8a8c_li_12\"><span data-lake-id=\"u037b3ac0\" id=\"u037b3ac0\">浏览器把 </span><code data-lake-id=\"u456d56f8\" id=\"u456d56f8\"><span data-lake-id=\"u50a72224\" id=\"u50a72224\">DOM</span></code><span data-lake-id=\"u329c8a49\" id=\"u329c8a49\"> 树，呈现到页面上；</span></li></ol></blockquote><p data-lake-id=\"bac67e7fcdfb0acc75b3cf54e2dd1141_p_19\" id=\"bac67e7fcdfb0acc75b3cf54e2dd1141_p_19\"><br></p><h3 data-lake-id=\"7e0b7eb8\" id=\"7e0b7eb8\"><span data-lake-id=\"ua3257ac7\" id=\"ua3257ac7\">Diff算法</span></h3><p data-lake-id=\"db841a6e995b001085603629a3ace379_p_20\" id=\"db841a6e995b001085603629a3ace379_p_20\"><br></p><ol list=\"ueff947e6\"><li fid=\"uf94af226\" data-lake-id=\"37ad3b60d5f7baeb054ef4113e71b646_li_13\" id=\"37ad3b60d5f7baeb054ef4113e71b646_li_13\"><span data-lake-id=\"u27c74fcd\" id=\"u27c74fcd\">tree diff：</span></li></ol><p data-lake-id=\"54d418504a63791b75a5f497078fa24a_p_21\" id=\"54d418504a63791b75a5f497078fa24a_p_21\"><br></p><blockquote data-lake-id=\"uc11fa422\" id=\"uc11fa422\"><p data-lake-id=\"04fc43d4e938bef0e078a53eeb159432_p_22\" id=\"04fc43d4e938bef0e078a53eeb159432_p_22\"><span data-lake-id=\"u2f0bed24\" id=\"u2f0bed24\">新旧两棵 </span><code data-lake-id=\"uf6e84dee\" id=\"uf6e84dee\"><span data-lake-id=\"u4043e3ba\" id=\"u4043e3ba\">DOM</span></code><span data-lake-id=\"u8560ba41\" id=\"u8560ba41\"> 树，逐层对比的过程，就是</span><code data-lake-id=\"uddb61291\" id=\"uddb61291\"><span data-lake-id=\"u9d9d49e8\" id=\"u9d9d49e8\">tree diff</span></code><span data-lake-id=\"u6f6d1032\" id=\"u6f6d1032\">；</span></p><p data-lake-id=\"e272b86e23629745ebc1b01912bb0ab4_p_23\" id=\"e272b86e23629745ebc1b01912bb0ab4_p_23\"><span data-lake-id=\"uf41e8f69\" id=\"uf41e8f69\">当整棵</span><code data-lake-id=\"u28a6d170\" id=\"u28a6d170\"><span data-lake-id=\"u5acb3bd3\" id=\"u5acb3bd3\">DOM</span></code><span data-lake-id=\"u097570b8\" id=\"u097570b8\">逐层对比完毕，则所有需要被按需更新的元素，必然能够被找到；</span></p></blockquote><p data-lake-id=\"1f3b4b4a4867a8b756c196b38558d0c4_p_24\" id=\"1f3b4b4a4867a8b756c196b38558d0c4_p_24\"><br></p><ol list=\"u352f6d51\" start=\"2\"><li fid=\"u90ed950f\" data-lake-id=\"d90f8f6b75a75b1b5b111f6c6cf9e428_li_14\" id=\"d90f8f6b75a75b1b5b111f6c6cf9e428_li_14\"><span data-lake-id=\"uca8f5553\" id=\"uca8f5553\">component diff：</span></li></ol><p data-lake-id=\"3afe72986fc83f6913935faccbcf69b2_p_25\" id=\"3afe72986fc83f6913935faccbcf69b2_p_25\"><br></p><blockquote data-lake-id=\"ubc60fa3f\" id=\"ubc60fa3f\"><p data-lake-id=\"ce37d3dbbc8573a09a2d04a0c22b9769_p_26\" id=\"ce37d3dbbc8573a09a2d04a0c22b9769_p_26\"><span data-lake-id=\"ucd2c17cf\" id=\"ucd2c17cf\">在进行 </span><code data-lake-id=\"uccb6af06\" id=\"uccb6af06\"><span data-lake-id=\"u098a002b\" id=\"u098a002b\">tree diff</span></code><span data-lake-id=\"u7b9dcc1a\" id=\"u7b9dcc1a\"> 的时候，每一层中，组件级别的对比，叫做 </span><code data-lake-id=\"u8f7334a2\" id=\"u8f7334a2\"><span data-lake-id=\"ue5abf788\" id=\"ue5abf788\">component diff</span></code><span data-lake-id=\"u8e6a58bf\" id=\"u8e6a58bf\">；</span></p><p data-lake-id=\"21e4722f57108d89af4de107e2ef7fea_p_27\" id=\"21e4722f57108d89af4de107e2ef7fea_p_27\"><span data-lake-id=\"ubb8ccd44\" id=\"ubb8ccd44\">如果对比前后，组件的类型相同，则</span><strong><span data-lake-id=\"u3d8f70ef\" id=\"u3d8f70ef\">暂时</span></strong><span data-lake-id=\"ufa24159b\" id=\"ufa24159b\">认为此组件不许要被更新；</span></p><p data-lake-id=\"715c21c6da9c1160f0a4103c5022fbab_p_28\" id=\"715c21c6da9c1160f0a4103c5022fbab_p_28\"><span data-lake-id=\"u1a0733d2\" id=\"u1a0733d2\">如果对比前后，组件的类型不同，则需要移除旧组件，创建新组件，并追加到页面上；</span></p></blockquote><p data-lake-id=\"d8f02fc6e1d9d5e68b5ff128662a6b29_p_29\" id=\"d8f02fc6e1d9d5e68b5ff128662a6b29_p_29\"><br></p><ol list=\"u575adc13\" start=\"3\"><li fid=\"ufcab1e5f\" data-lake-id=\"03e4d77bb605828b2137f2d6b6d26b70_li_15\" id=\"03e4d77bb605828b2137f2d6b6d26b70_li_15\"><span data-lake-id=\"u09061153\" id=\"u09061153\">element diff：</span></li></ol><p data-lake-id=\"d657ac1e4c3211af4f7dcea889518735_p_30\" id=\"d657ac1e4c3211af4f7dcea889518735_p_30\"><br></p><blockquote data-lake-id=\"u39434219\" id=\"u39434219\"><p data-lake-id=\"c60179e1332775f5276444f60f4d8efa_p_31\" id=\"c60179e1332775f5276444f60f4d8efa_p_31\"><span data-lake-id=\"u6f79c165\" id=\"u6f79c165\">在进行组件对比的时候，如果两个组件的类型相同，则需要进行元素级别的对比，这叫做</span><code data-lake-id=\"u3559b26a\" id=\"u3559b26a\"><span data-lake-id=\"u8752af19\" id=\"u8752af19\">element diff</span></code><span data-lake-id=\"u59f16144\" id=\"u59f16144\">；</span></p></blockquote><p data-lake-id=\"bb3e20f1faeaf6bf9497bffd7f381295_p_32\" id=\"bb3e20f1faeaf6bf9497bffd7f381295_p_32\"><br></p><h2 data-lake-id=\"42938890\" id=\"42938890\"><span data-lake-id=\"u8e32a4be\" id=\"u8e32a4be\">2. React 中创建组件</span></h2><p data-lake-id=\"73b74e66f7d869f94eb34b57d63eae3f_p_33\" id=\"73b74e66f7d869f94eb34b57d63eae3f_p_33\"><br></p><h3 data-lake-id=\"8a91dc29\" id=\"8a91dc29\"><span data-lake-id=\"uc016a060\" id=\"uc016a060\">使用构造函数来创建组件</span></h3><p data-lake-id=\"39abba9494ef6da94608fbd0e487aa60_p_34\" id=\"39abba9494ef6da94608fbd0e487aa60_p_34\"><br></p><blockquote data-lake-id=\"u27232d20\" id=\"u27232d20\"><p data-lake-id=\"8ae4b51de3aa4b9b2e3207da0c73f010_p_35\" id=\"8ae4b51de3aa4b9b2e3207da0c73f010_p_35\"><span data-lake-id=\"uea16cd67\" id=\"uea16cd67\">1、在组件中，必须要向外</span><code data-lake-id=\"u0aed4491\" id=\"u0aed4491\"><span data-lake-id=\"ue9816e8b\" id=\"ue9816e8b\">return</span></code><span data-lake-id=\"u53a827f9\" id=\"u53a827f9\">一个合法的</span><code data-lake-id=\"ud60839e2\" id=\"ud60839e2\"><span data-lake-id=\"udc5837fb\" id=\"udc5837fb\">jsx</span></code><span data-lake-id=\"uf8534407\" id=\"uf8534407\">创建的</span><code data-lake-id=\"u3e765a47\" id=\"u3e765a47\"><span data-lake-id=\"u1631fda5\" id=\"u1631fda5\">虚拟DOM</span></code><span data-lake-id=\"u4e71eba9\" id=\"u4e71eba9\">元素；</span></p><p data-lake-id=\"6db3d1430c1581ed3f652410b78f349b_p_36\" id=\"6db3d1430c1581ed3f652410b78f349b_p_36\"><span data-lake-id=\"uc91ce662\" id=\"uc91ce662\">2、如果要接收外界传递的数据，需要在</span><code data-lake-id=\"u37f3b18f\" id=\"u37f3b18f\"><span data-lake-id=\"u838def2d\" id=\"u838def2d\">构造函数</span></code><span data-lake-id=\"uf8f268fb\" id=\"uf8f268fb\">的参数列表中使用</span><code data-lake-id=\"u720206c7\" id=\"u720206c7\"><span data-lake-id=\"u54e3dc29\" id=\"u54e3dc29\">props</span></code><span data-lake-id=\"u34e9e309\" id=\"u34e9e309\">来接收；</span></p><p data-lake-id=\"0ddb7900466734ed324e95736a2335a8_p_37\" id=\"0ddb7900466734ed324e95736a2335a8_p_37\"><span data-lake-id=\"ud3a92e04\" id=\"ud3a92e04\">3、无论是</span><code data-lake-id=\"u173419d6\" id=\"u173419d6\"><span data-lake-id=\"uea7f7bf1\" id=\"uea7f7bf1\">vue</span></code><span data-lake-id=\"uc711137c\" id=\"uc711137c\">还是</span><code data-lake-id=\"u1cefd121\" id=\"u1cefd121\"><span data-lake-id=\"ub32ee03c\" id=\"ub32ee03c\">react</span></code><span data-lake-id=\"u5ed4340b\" id=\"u5ed4340b\">，组件中的</span><code data-lake-id=\"u225b746b\" id=\"u225b746b\"><span data-lake-id=\"u9117ab9f\" id=\"u9117ab9f\">props</span></code><span data-lake-id=\"u12ec6574\" id=\"u12ec6574\">永远都是只读</span><code data-lake-id=\"ucc2ba04d\" id=\"ucc2ba04d\"><span data-lake-id=\"u3f2a2e5b\" id=\"u3f2a2e5b\">read-only</span></code><span data-lake-id=\"u49cde57b\" id=\"u49cde57b\">的，不能被重新赋值；</span></p><p data-lake-id=\"02f2ab63b77cf569defaaf9505817fad_p_38\" id=\"02f2ab63b77cf569defaaf9505817fad_p_38\"><span data-lake-id=\"udd2a36d8\" id=\"udd2a36d8\">4、组件的名称</span><code data-lake-id=\"u39084528\" id=\"u39084528\"><span data-lake-id=\"u87051c82\" id=\"u87051c82\">首字母</span></code><span data-lake-id=\"u8ebe93ea\" id=\"u8ebe93ea\">必须是</span><code data-lake-id=\"ub9ad2854\" id=\"ub9ad2854\"><span data-lake-id=\"uf07df40a\" id=\"uf07df40a\">大写</span></code><span data-lake-id=\"udcc41856\" id=\"udcc41856\">的</span></p><p data-lake-id=\"d281cdbfc86e75c70664925cc990587d_p_39\" id=\"d281cdbfc86e75c70664925cc990587d_p_39\"><span data-lake-id=\"ue7e16bb4\" id=\"ue7e16bb4\">5、省略 </span><code data-lake-id=\"uea0cb075\" id=\"uea0cb075\"><span data-lake-id=\"ub7a2d724\" id=\"ub7a2d724\">.jsx</span></code><span data-lake-id=\"u76730214\" id=\"u76730214\"> 文件名</span></p></blockquote><p data-lake-id=\"17b412f9fc3ec51ada5f566f0d09108c_p_40\" id=\"17b412f9fc3ec51ada5f566f0d09108c_p_40\"><br></p><blockquote data-lake-id=\"ucfa3787d\" id=\"ucfa3787d\"><p data-lake-id=\"83511cb291d24b0925bef0d85524cf6d_p_41\" id=\"83511cb291d24b0925bef0d85524cf6d_p_41\"><span data-lake-id=\"udb2ca729\" id=\"udb2ca729\">打开 </span><code data-lake-id=\"u129d69e8\" id=\"u129d69e8\"><span data-lake-id=\"ua047eccd\" id=\"ua047eccd\">webpack.config.js</span></code><span data-lake-id=\"u74f2ad50\" id=\"u74f2ad50\">，并在导出的配置对象中，新增以下几个节点：</span></p></blockquote><p data-lake-id=\"aebb7af96a9ee3c9b7a669f28fef1d7e_p_42\" id=\"aebb7af96a9ee3c9b7a669f28fef1d7e_p_42\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22resolve%3A%20%7B%5Cn%20%20extensions%3A%20%5B%5C%22.js%5C%22%2C%20%5C%22.jsx%5C%22%2C%20%5C%22.json%5C%22%5D%3B%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%2278dfdb0e%22%7D\"></card><p data-lake-id=\"4930f2b57b08d977b4a7a79433f23490_p_43\" id=\"4930f2b57b08d977b4a7a79433f23490_p_43\"><br></p><blockquote data-lake-id=\"u34cb8381\" id=\"u34cb8381\"><p data-lake-id=\"61bd8238962cb382a712c91d5f0060b5_p_44\" id=\"61bd8238962cb382a712c91d5f0060b5_p_44\"><span data-lake-id=\"udeb0b3a0\" id=\"udeb0b3a0\">如果在一个组件中 </span><code data-lake-id=\"udc70f7fe\" id=\"udc70f7fe\"><span data-lake-id=\"u0f77916d\" id=\"u0f77916d\">return</span></code><span data-lake-id=\"u1f30f1ef\" id=\"u1f30f1ef\"> 一个 </span><code data-lake-id=\"ud809d5b6\" id=\"ud809d5b6\"><span data-lake-id=\"ubf879ff9\" id=\"ubf879ff9\">null</span></code><span data-lake-id=\"u0fc21bb6\" id=\"u0fc21bb6\">，则表示此组件是空的，什么都不会渲染</span></p></blockquote><p data-lake-id=\"0e4b859961c17882302ca1144adad96d_p_45\" id=\"0e4b859961c17882302ca1144adad96d_p_45\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22jsx%22%2C%22code%22%3A%22function%20Hello(props)%20%7B%5Cn%20%20return%20(%5Cn%20%20%20%20%3Cdiv%3E%5Cn%20%20%20%20%20%20%E8%BF%99%E6%98%AFHello%E7%BB%84%E4%BB%B6%20--%20%7Bprops.name%7D%20--%20%7Bprops.age%7D%20--%20%7Bprops.gender%7D%5Cn%20%20%20%20%3C%2Fdiv%3E%5Cn%20%20)%3B%5Cn%7D%5Cn%5Cnconst%20user%20%3D%20%7B%5Cn%20%20name%3A%20%5C%22%E5%A4%A7%E9%BB%84%5C%22%2C%5Cn%20%20age%3A%203%2C%5Cn%20%20gender%3A%20%5C%22%E9%9B%84%E6%80%A7%5C%22%5Cn%7D%3B%5Cn%5CnReactDOM.render(%5Cn%20%20%3Cdiv%3E%5Cn%20%20%20%20%3CHello%20%7B...user%7D%20%2F%3E%5Cn%20%20%3C%2Fdiv%3E%2C%5Cn%20%20document.getElementById(%5C%22%23app%5C%22)%5Cn)%3B%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22249952c7%22%7D\"></card><p data-lake-id=\"e81b6efc8e2153cf8aa53e3b04d7f22c_p_46\" id=\"e81b6efc8e2153cf8aa53e3b04d7f22c_p_46\"><br></p><h3 data-lake-id=\"1b01f0d6\" id=\"1b01f0d6\"><span data-lake-id=\"uefab0724\" id=\"uefab0724\">使用 class 关键字来创建组件</span></h3><blockquote data-lake-id=\"uff2c4575\" id=\"uff2c4575\"><p data-lake-id=\"3576b7bbf9bf06bf1e942a457a68ccc9\" id=\"3576b7bbf9bf06bf1e942a457a68ccc9\"><code data-lake-id=\"ua48f46e0\" id=\"ua48f46e0\"><span data-lake-id=\"u28aa9514\" id=\"u28aa9514\">public</span></code><span data-lake-id=\"u921f91d1\" id=\"u921f91d1\">: 所有成员都可访问</span></p><p data-lake-id=\"ab07d7d15e7f3646c9d9a5b84f0a7742\" id=\"ab07d7d15e7f3646c9d9a5b84f0a7742\"><code data-lake-id=\"ud9217096\" id=\"ud9217096\"><span data-lake-id=\"u56c34ea2\" id=\"u56c34ea2\">private</span></code><span data-lake-id=\"ua849e2c2\" id=\"ua849e2c2\">: 只有当前类可访问</span></p><p data-lake-id=\"d215241e2f0dd46928f232d2f32ec034\" id=\"d215241e2f0dd46928f232d2f32ec034\"><code data-lake-id=\"udb3b2f4c\" id=\"udb3b2f4c\"><span data-lake-id=\"u8a604062\" id=\"u8a604062\">protected</span></code><span data-lake-id=\"uf0887efe\" id=\"uf0887efe\">: 只有当前类和其子类可访问，外部成员无法访问</span></p></blockquote><p data-lake-id=\"478231c71c811ff5f728eef1ada97581_p_47\" id=\"478231c71c811ff5f728eef1ada97581_p_47\"><br></p><blockquote data-lake-id=\"u1395713b\" id=\"u1395713b\"><p data-lake-id=\"01b74e05cc43f87e64cdcb1f47067688_p_48\" id=\"01b74e05cc43f87e64cdcb1f47067688_p_48\"><code data-lake-id=\"u7be74a37\" id=\"u7be74a37\"><span data-lake-id=\"u3538fc24\" id=\"u3538fc24\">es6</span></code><span data-lake-id=\"ud73cb7dc\" id=\"ud73cb7dc\">中的</span><code data-lake-id=\"ud8500d1a\" id=\"ud8500d1a\"><span data-lake-id=\"uc2affb55\" id=\"uc2affb55\">class关键字</span></code><span data-lake-id=\"ua9617ae6\" id=\"ua9617ae6\">，是实现</span><code data-lake-id=\"ud331634b\" id=\"ud331634b\"><span data-lake-id=\"u73e28078\" id=\"u73e28078\">面向对象编程</span></code><span data-lake-id=\"ufe763d07\" id=\"ufe763d07\">的新形式，也叫做</span><code data-lake-id=\"u4e246833\" id=\"u4e246833\"><span data-lake-id=\"uddce5370\" id=\"uddce5370\">语法糖</span></code></p></blockquote><p data-lake-id=\"233f53790c0b9d757f931748dd4d9e1e_p_49\" id=\"233f53790c0b9d757f931748dd4d9e1e_p_49\"><br></p><ul list=\"u80941c97\"><li fid=\"uc60bb58f\" data-lake-id=\"7fec6daf70a569170103541d790e7783_li_16\" id=\"7fec6daf70a569170103541d790e7783_li_16\"><span data-lake-id=\"u111e5757\" id=\"u111e5757\">constructor 构造器中的 super 函数</span></li></ul><p data-lake-id=\"4108a5bc411c7547dc6876b612b07f81_p_50\" id=\"4108a5bc411c7547dc6876b612b07f81_p_50\"><br></p><blockquote data-lake-id=\"ud63e91d2\" id=\"ud63e91d2\"><p data-lake-id=\"de5bd9f3d71d4d02f24fe4aa79a8af4c_p_51\" id=\"de5bd9f3d71d4d02f24fe4aa79a8af4c_p_51\"><span data-lake-id=\"u80fbd94c\" id=\"u80fbd94c\">在子类中， </span><code data-lake-id=\"u4ec7e764\" id=\"u4ec7e764\"><span data-lake-id=\"uc890fece\" id=\"uc890fece\">this</span></code><span data-lake-id=\"ueff3a64c\" id=\"ueff3a64c\"> 只能放到 </span><code data-lake-id=\"u19e30c5b\" id=\"u19e30c5b\"><span data-lake-id=\"u796d0a09\" id=\"u796d0a09\">super</span></code><span data-lake-id=\"u745d7c5d\" id=\"u745d7c5d\"> 之后使用</span></p><p data-lake-id=\"c88dcdc31a48f7636b0a8d5a71a44997_p_52\" id=\"c88dcdc31a48f7636b0a8d5a71a44997_p_52\"><span data-lake-id=\"u9ea8d8da\" id=\"u9ea8d8da\">子类中的 </span><code data-lake-id=\"u247193b1\" id=\"u247193b1\"><span data-lake-id=\"u0263f812\" id=\"u0263f812\">super</span></code><span data-lake-id=\"ufecbda48\" id=\"ufecbda48\">，其实就是父类中，</span><code data-lake-id=\"ufdf69057\" id=\"ufdf69057\"><span data-lake-id=\"u4da05d42\" id=\"u4da05d42\">contructor</span></code><span data-lake-id=\"u9630c231\" id=\"u9630c231\">构造器的一个引用</span></p></blockquote><p data-lake-id=\"0c6a7643ebb3931744a90899eb00ce0b_p_53\" id=\"0c6a7643ebb3931744a90899eb00ce0b_p_53\"><br></p><ul list=\"ud25d42f9\"><li fid=\"u3b7874a6\" data-lake-id=\"efbb55e2fadfb7f9157581e13c14baed_li_17\" id=\"efbb55e2fadfb7f9157581e13c14baed_li_17\"><span data-lake-id=\"u05afe8cb\" id=\"u05afe8cb\">最基本的组件结构</span></li></ul><p data-lake-id=\"e10b5c78ee7ba45f407740af88433fc9_p_54\" id=\"e10b5c78ee7ba45f407740af88433fc9_p_54\"><br></p><blockquote data-lake-id=\"ub7b8dd6d\" id=\"ub7b8dd6d\"><p data-lake-id=\"00751873953c908ae166c1d3053c380a_p_55\" id=\"00751873953c908ae166c1d3053c380a_p_55\"><code data-lake-id=\"u5d97ce90\" id=\"u5d97ce90\"><span data-lake-id=\"ud14ee7da\" id=\"ud14ee7da\">render</span></code><span data-lake-id=\"u31921190\" id=\"u31921190\">函数的作用：渲染当前组件所对应的</span><code data-lake-id=\"u0cb21ea6\" id=\"u0cb21ea6\"><span data-lake-id=\"u46c30593\" id=\"u46c30593\">虚拟DOM</span></code><span data-lake-id=\"u66cf4cca\" id=\"u66cf4cca\"> 元素</span></p></blockquote><p data-lake-id=\"a6e7204180aba568d27cc7b95d0717fd_p_56\" id=\"a6e7204180aba568d27cc7b95d0717fd_p_56\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22jsx%22%2C%22code%22%3A%22import%20React%20from%20'react'%5Cnclass%20%E7%BB%84%E4%BB%B6%E5%90%8D%E7%A7%B0%20extends%20React.Component%20%7B%5Cn%20%20%20%20render()%20%7B%5Cn%20%20%20%20%20%20%20%20return%20%3Cdiv%3E%E8%BF%99%E6%98%AF%20class%20%E5%88%9B%E5%BB%BA%E7%9A%84%E7%BB%84%E4%BB%B6%3C%2Fdiv%3E%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22a0e0eae2%22%7D\"></card><p data-lake-id=\"67592880a847e874a0da3af4d564ef1f_p_57\" id=\"67592880a847e874a0da3af4d564ef1f_p_57\"><br></p><ul list=\"u5b31933c\"><li fid=\"u641614dc\" data-lake-id=\"fcb47308805b718f67d9605b22266caf_li_18\" id=\"fcb47308805b718f67d9605b22266caf_li_18\"><span data-lake-id=\"u3509366d\" id=\"u3509366d\">this.props 和 this.state</span></li></ul><p data-lake-id=\"e3c9bad72638009a374744280c63ecc6_p_58\" id=\"e3c9bad72638009a374744280c63ecc6_p_58\"><br></p><blockquote data-lake-id=\"ue190250e\" id=\"ue190250e\"><ol list=\"ubccb33b4\"><li fid=\"u35d568c6\" data-lake-id=\"221aff434e3ba6762c058447c2af2ca8_li_19\" id=\"221aff434e3ba6762c058447c2af2ca8_li_19\"><code data-lake-id=\"u0319ca59\" id=\"u0319ca59\"><span data-lake-id=\"uc4a394fe\" id=\"uc4a394fe\">this.props</span></code><span data-lake-id=\"uc8312a18\" id=\"uc8312a18\"> 接收外界传递的参数，</span><code data-lake-id=\"u6a102c33\" id=\"u6a102c33\"><span data-lake-id=\"u16a7eb1b\" id=\"u16a7eb1b\">this.state</span></code><span data-lake-id=\"u25a1e91d\" id=\"u25a1e91d\"> 设置私有数据</span></li></ol><ol list=\"ud45bd470\" start=\"2\"><li fid=\"u84d81f28\" data-lake-id=\"bc0f899de6b3da276c67ff72941d3782_li_20\" id=\"bc0f899de6b3da276c67ff72941d3782_li_20\"><span data-lake-id=\"uf6857534\" id=\"uf6857534\">在 </span><code data-lake-id=\"u15cfc848\" id=\"u15cfc848\"><span data-lake-id=\"ua7afef90\" id=\"ua7afef90\">class</span></code><span data-lake-id=\"u4b855189\" id=\"u4b855189\"> 关键字创建的组件中，直接使用 </span><code data-lake-id=\"u5e38cec8\" id=\"u5e38cec8\"><span data-lake-id=\"uaba37932\" id=\"uaba37932\">this.props</span></code><span data-lake-id=\"uff8a68cd\" id=\"uff8a68cd\"> 访问传递过来的数据</span></li></ol><ol list=\"uf4ef1e16\" start=\"3\"><li fid=\"u0379f2ee\" data-lake-id=\"4a420647076b9f2bebef26a1f137f162_li_21\" id=\"4a420647076b9f2bebef26a1f137f162_li_21\"><code data-lake-id=\"ud16d2d6a\" id=\"ud16d2d6a\"><span data-lake-id=\"ua2052a52\" id=\"ua2052a52\">props</span></code><span data-lake-id=\"ue420fdbb\" id=\"ue420fdbb\"> 是只读的</span></li></ol></blockquote><p data-lake-id=\"1b325e2e939e9ae8679222558eaaceb6_p_59\" id=\"1b325e2e939e9ae8679222558eaaceb6_p_59\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22jsx%22%2C%22code%22%3A%22class%20Movie%20extends%20React.Component%20%7B%5Cn%20%20constructor()%20%7B%5Cn%20%20%20%20super()%3B%5Cn%20%20%20%20%2F%2F%20%E8%BF%99%E9%87%8C%E7%9A%84%20this.state%20%3D%20%7B%7D%EF%BC%8C%E5%B0%B1%E7%9B%B8%E5%BD%93%E4%BA%8E%20Vue%E4%B8%AD%E7%9A%84data()%20%7B%20return%20%7B%7D%20%7D%5Cn%20%20%20%20this.state%20%3D%20%7B%5Cn%20%20%20%20%20%20msg%3A%20%5C%22%E8%BF%99%E6%98%AFMovie%E7%BB%84%E4%BB%B6%E7%9A%84%E7%A7%81%E6%9C%89%E6%95%B0%E6%8D%AE%5C%22%5Cn%20%20%20%20%7D%3B%5Cn%20%20%7D%5Cn%20%20render()%20%7B%5Cn%20%20%20%20%7B%5Cn%20%20%20%20%20%20%2F*%20%E6%B3%A8%E6%84%8F%EF%BC%9A%E5%9C%A8%20class%20%E7%BB%84%E4%BB%B6%E5%86%85%E5%AE%B9%EF%BC%8Cthis%20%E8%A1%A8%E7%A4%BA%E5%BD%93%E5%89%8D%E7%BB%84%E4%BB%B6%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%AF%B9%E8%B1%A1%20*%2F%5Cn%20%20%20%20%7D%5Cn%20%20%20%20return%20%3Cdiv%3E%E8%BF%99%E6%98%AFMovie%E7%BB%84%E4%BB%B6%20--%20%7Bthis.props.name%7D%3C%2Fdiv%3E%3B%5Cn%20%20%7D%5Cn%7D%5Cnconst%20user%20%3D%20%7B%5Cn%20%20name%3A%20%5C%22%E5%A4%A7%E9%BB%84%5C%22%2C%5Cn%20%20age%3A%203%2C%5Cn%20%20gender%3A%20%5C%22%E9%9B%84%E6%80%A7%5C%22%5Cn%7D%3B%5Cn%5CnReactDOM.render(%5Cn%20%20%3Cdiv%3E%5Cn%20%20%20%20%3CMovie%20%7B...user%7D%20%2F%3E%5Cn%20%20%20%20%3Ch3%3E%7Bthis.state.msg%7D%3C%2Fh3%3E%5Cn%20%20%3C%2Fdiv%3E%2C%5Cn%20%20document.getElementById(%5C%22%23app%5C%22)%5Cn)%3B%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%222ef67ada%22%7D\"></card><p data-lake-id=\"daa3e859dfee1b8825cb9c219dcb2526_p_60\" id=\"daa3e859dfee1b8825cb9c219dcb2526_p_60\"><br></p><h3 data-lake-id=\"03999182\" id=\"03999182\"><span data-lake-id=\"u7ae6aa32\" id=\"u7ae6aa32\">两种创建组件的方式的对比</span></h3><p data-lake-id=\"d89d8c6a729313c0d25f9b1742c0d590_p_61\" id=\"d89d8c6a729313c0d25f9b1742c0d590_p_61\"><br></p><blockquote data-lake-id=\"udbf4d285\" id=\"udbf4d285\"><p data-lake-id=\"d8b1461137cee9193dc2713687773627_p_62\" id=\"d8b1461137cee9193dc2713687773627_p_62\"><span data-lake-id=\"u64b27d7e\" id=\"u64b27d7e\">使用 </span><code data-lake-id=\"u561a36ab\" id=\"u561a36ab\"><span data-lake-id=\"u62e89295\" id=\"u62e89295\">class</span></code><span data-lake-id=\"u1bef31e4\" id=\"u1bef31e4\"> 关键字创建的组件，有自己的 </span><code data-lake-id=\"u39b4079f\" id=\"u39b4079f\"><span data-lake-id=\"u44ccf0b7\" id=\"u44ccf0b7\">私有数据(this.state)</span></code><span data-lake-id=\"ud8284fb1\" id=\"ud8284fb1\"> 和 </span><code data-lake-id=\"u85a05d45\" id=\"u85a05d45\"><span data-lake-id=\"uf978a5f2\" id=\"uf978a5f2\">生命周期</span></code></p><p data-lake-id=\"c5eb59c3db1b5eb58e2503a68a5d6379_p_63\" id=\"c5eb59c3db1b5eb58e2503a68a5d6379_p_63\"><span data-lake-id=\"udbc90740\" id=\"udbc90740\">使用 </span><code data-lake-id=\"u7b0f1345\" id=\"u7b0f1345\"><span data-lake-id=\"u7701ad46\" id=\"u7701ad46\">function</span></code><span data-lake-id=\"u5eeb446b\" id=\"u5eeb446b\"> 创建的组件，只有 </span><code data-lake-id=\"u3d50701b\" id=\"u3d50701b\"><span data-lake-id=\"ub54a73f2\" id=\"ub54a73f2\">props</span></code><span data-lake-id=\"u30fa69e2\" id=\"u30fa69e2\">，没有自己的 </span><code data-lake-id=\"u33e58477\" id=\"u33e58477\"><span data-lake-id=\"uc7d71a4a\" id=\"uc7d71a4a\">私有数据</span></code><span data-lake-id=\"u5656310d\" id=\"u5656310d\"> 和 </span><code data-lake-id=\"uc9ca5794\" id=\"uc9ca5794\"><span data-lake-id=\"u84851af0\" id=\"u84851af0\">生命周期</span></code></p><p data-lake-id=\"145550f06530ca5c6168f328604ca623_p_64\" id=\"145550f06530ca5c6168f328604ca623_p_64\"><span data-lake-id=\"u35845d24\" id=\"u35845d24\">有状态组件和无状态组件之间的 </span><code data-lake-id=\"uaa0f5b38\" id=\"uaa0f5b38\"><span data-lake-id=\"ub5a6aa0e\" id=\"ub5a6aa0e\">本质区别</span></code><span data-lake-id=\"u2e85cc88\" id=\"u2e85cc88\">：有无 </span><code data-lake-id=\"ubed63c5f\" id=\"ubed63c5f\"><span data-lake-id=\"u6fb6c7c4\" id=\"u6fb6c7c4\">state</span></code><span data-lake-id=\"uc7f2f4b5\" id=\"uc7f2f4b5\"> 属性和 </span><code data-lake-id=\"u5265b444\" id=\"u5265b444\"><span data-lake-id=\"u73cd6b4f\" id=\"u73cd6b4f\">生命周期函数</span></code></p></blockquote><p data-lake-id=\"2a81d6eed31dfd1dc3c193bbdb75c1a1_p_65\" id=\"2a81d6eed31dfd1dc3c193bbdb75c1a1_p_65\"><br></p><h2 data-lake-id=\"58370fd7\" id=\"58370fd7\"><span data-lake-id=\"u0c162de8\" id=\"u0c162de8\">3. React 中 style 处理方式</span></h2><p data-lake-id=\"cf44cb59378505901ec625cdc88d7d91_p_66\" id=\"cf44cb59378505901ec625cdc88d7d91_p_66\"><br></p><h3 data-lake-id=\"2dd25b8c\" id=\"2dd25b8c\"><span data-lake-id=\"u02a0f9fb\" id=\"u02a0f9fb\">内联</span></h3><p data-lake-id=\"152302cc03cd3433e252fd8fbe4bade7_p_67\" id=\"152302cc03cd3433e252fd8fbe4bade7_p_67\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22jsx%22%2C%22code%22%3A%22style%20%3D%20%7B%7B%20color%3A%20red%20%7D%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%2288e82344%22%7D\"></card><p data-lake-id=\"f67c084ec5a7dd840c4c56ee24cc368e_p_68\" id=\"f67c084ec5a7dd840c4c56ee24cc368e_p_68\"><br></p><h3 data-lake-id=\"css\" id=\"css\"><span data-lake-id=\"uffb311f8\" id=\"uffb311f8\">css</span></h3><p data-lake-id=\"956e0d4312e941b77cd57ec35c294aff_p_69\" id=\"956e0d4312e941b77cd57ec35c294aff_p_69\"><br></p><blockquote data-lake-id=\"ua46c07c7\" id=\"ua46c07c7\"><p data-lake-id=\"2355075508029942417d9a007d259d90_p_70\" id=\"2355075508029942417d9a007d259d90_p_70\"><span data-lake-id=\"ubde103ba\" id=\"ubde103ba\">1、如果直接导入 </span><code data-lake-id=\"ua62ff719\" id=\"ua62ff719\"><span data-lake-id=\"ua753263d\" id=\"ua753263d\">css</span></code><span data-lake-id=\"u50df8db8\" id=\"u50df8db8\"> 样式表，默认则是在全局上，整个项目都会生效</span></p><p data-lake-id=\"c8285b53fb8479fe39e28f4d009512d5_p_71\" id=\"c8285b53fb8479fe39e28f4d009512d5_p_71\"><span data-lake-id=\"ua8688ffe\" id=\"ua8688ffe\">2、css 模块化，只针对 </span><code data-lake-id=\"u403c48ed\" id=\"u403c48ed\"><span data-lake-id=\"u32dd8525\" id=\"u32dd8525\">class</span></code><span data-lake-id=\"u7121e27e\" id=\"u7121e27e\"> 选择器 和 </span><code data-lake-id=\"u5c0447f9\" id=\"u5c0447f9\"><span data-lake-id=\"u69cec8b0\" id=\"u69cec8b0\">id</span></code><span data-lake-id=\"ubf59c53d\" id=\"ubf59c53d\"> 选择器生效</span></p><p data-lake-id=\"165e74592abdb27ea6113ab25fddacb5_p_72\" id=\"165e74592abdb27ea6113ab25fddacb5_p_72\"><span data-lake-id=\"u835eff56\" id=\"u835eff56\">引用：</span><code data-lake-id=\"u505176c2\" id=\"u505176c2\"><span data-lake-id=\"udc5301a6\" id=\"udc5301a6\">import style from './style.css'</span></code></p></blockquote><p data-lake-id=\"7e9db6e1dddd1090f9cbf7742b89f0d6_p_73\" id=\"7e9db6e1dddd1090f9cbf7742b89f0d6_p_73\"><br></p><h2 data-lake-id=\"79dde80c\" id=\"79dde80c\"><span data-lake-id=\"ue48fee80\" id=\"ue48fee80\">4. React 中事件绑定</span></h2><p data-lake-id=\"d36608d2dcf9f070081537010b5adfb3_p_74\" id=\"d36608d2dcf9f070081537010b5adfb3_p_74\"><br></p><ol list=\"u1739128e\"><li fid=\"ud5561481\" data-lake-id=\"f567b152a2f9b612663fb735301b5c0c_li_22\" id=\"f567b152a2f9b612663fb735301b5c0c_li_22\"><span data-lake-id=\"uae8e8e6a\" id=\"uae8e8e6a\">事件的名称都是 </span><code data-lake-id=\"u29ec5b6d\" id=\"u29ec5b6d\"><span data-lake-id=\"u51bae896\" id=\"u51bae896\">React</span></code><span data-lake-id=\"u7e5d48b6\" id=\"u7e5d48b6\"> 所提供的，因此名称的首字母必须大写</span><code data-lake-id=\"ub8538803\" id=\"ub8538803\"><span data-lake-id=\"u286a89fd\" id=\"u286a89fd\">onClick</span></code><span data-lake-id=\"uef5b1748\" id=\"uef5b1748\">，</span><code data-lake-id=\"u8d602bd4\" id=\"u8d602bd4\"><span data-lake-id=\"u297ef6cf\" id=\"u297ef6cf\">onMouseOver</span></code></li></ol><ol list=\"ue68dec1e\" start=\"2\"><li fid=\"u4b86f2b7\" data-lake-id=\"b99b987c6c3168fddd9e8e5fe9882fb0_li_23\" id=\"b99b987c6c3168fddd9e8e5fe9882fb0_li_23\"><span data-lake-id=\"u89f55d5a\" id=\"u89f55d5a\">为事件提供的处理函数，必须是以下格式：</span></li></ol><p data-lake-id=\"cee026a6997be2fe2ca3b5d6e2ce2bf0_p_75\" id=\"cee026a6997be2fe2ca3b5d6e2ce2bf0_p_75\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22onClick%20%3D%20%7B%20function%20%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22ec9ca64e%22%7D\"></card><p data-lake-id=\"391eee0f96cca26f6e7df243706d21bf_p_76\" id=\"391eee0f96cca26f6e7df243706d21bf_p_76\"><br></p><ol list=\"u70195e15\" start=\"3\"><li fid=\"ue0e49ade\" data-lake-id=\"5ff012d85c23eb4f46a16649c74d3cf7_li_24\" id=\"5ff012d85c23eb4f46a16649c74d3cf7_li_24\"><span data-lake-id=\"u00a6cd45\" id=\"u00a6cd45\">用的最多的事件绑定形式为：</span></li></ol><p data-lake-id=\"9fc1a1e32cf7c324fef5888bc3009382_p_77\" id=\"9fc1a1e32cf7c324fef5888bc3009382_p_77\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22jsx%22%2C%22code%22%3A%22%3Cbutton%20onClick%3D%7B()%20%3D%3E%20this.show(%5C%22%E4%BC%A0%E5%8F%82%5C%22)%7D%3E%E6%8C%89%E9%92%AE%3C%2Fbutton%3E%3B%5Cn%5Cn%2F%2F%20%E4%BA%8B%E4%BB%B6%E7%9A%84%E5%A4%84%E7%90%86%E5%87%BD%E6%95%B0%EF%BC%8C%E9%9C%80%E8%A6%81%E5%AE%9A%E4%B9%89%E4%B8%BA%20%E4%B8%80%E4%B8%AA%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0%EF%BC%8C%E7%84%B6%E5%90%8E%E8%B5%8B%E5%80%BC%E7%BB%99%20%E5%87%BD%E6%95%B0%E5%90%8D%E7%A7%B0%5Cnshow%20%3D%20arg1%20%3D%3E%20%7B%5Cn%20%20console.log(%5C%22show%E6%96%B9%E6%B3%95%5C%22%20%2B%20arg1)%3B%5Cn%7D%3B%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%225391dc0f%22%7D\"></card><p data-lake-id=\"f585fed1cef9af7641b65ac1c4919258_p_78\" id=\"f585fed1cef9af7641b65ac1c4919258_p_78\"><br></p><ol list=\"udf8b6558\" start=\"4\"><li fid=\"ue763dedf\" data-lake-id=\"783d305fe40dd768d929270d5c8280b1_li_25\" id=\"783d305fe40dd768d929270d5c8280b1_li_25\"><span data-lake-id=\"u274bc20b\" id=\"u274bc20b\">在 </span><code data-lake-id=\"uf9143c61\" id=\"uf9143c61\"><span data-lake-id=\"u4fcd4db9\" id=\"u4fcd4db9\">React</span></code><span data-lake-id=\"u53315a14\" id=\"u53315a14\"> 中，如果想要修改 </span><code data-lake-id=\"u9405e0bf\" id=\"u9405e0bf\"><span data-lake-id=\"uada56761\" id=\"uada56761\">state</span></code><span data-lake-id=\"u649a6c6c\" id=\"u649a6c6c\"> 中的数据，推荐使用 </span><code data-lake-id=\"u54fd5a0d\" id=\"u54fd5a0d\"><span data-lake-id=\"uf750a9ce\" id=\"uf750a9ce\">this.setState({ })</span></code></li></ol><p data-lake-id=\"f855fcce122120d1233c03106e601338_p_79\" id=\"f855fcce122120d1233c03106e601338_p_79\"><br></p><blockquote data-lake-id=\"u394eda50\" id=\"u394eda50\"><p data-lake-id=\"696eadf22c9b3e6d74a92809436289c2_p_80\" id=\"696eadf22c9b3e6d74a92809436289c2_p_80\"><span data-lake-id=\"u7a98c232\" id=\"u7a98c232\">1、在</span><code data-lake-id=\"u3f657e00\" id=\"u3f657e00\"><span data-lake-id=\"u1332e4f2\" id=\"u1332e4f2\">setState</span></code><span data-lake-id=\"ucc21ff75\" id=\"ucc21ff75\">中，只会把对应的 </span><code data-lake-id=\"u4d877321\" id=\"u4d877321\"><span data-lake-id=\"u01a01c66\" id=\"u01a01c66\">state</span></code><span data-lake-id=\"ue5678f33\" id=\"ue5678f33\">状态更新，而不会覆盖其它的 </span><code data-lake-id=\"u82c95a1c\" id=\"u82c95a1c\"><span data-lake-id=\"u7c103170\" id=\"u7c103170\">state</span></code><span data-lake-id=\"u96f28d3a\" id=\"u96f28d3a\">状态。</span></p><p data-lake-id=\"0b623bace4b001accef071014eae32ea_p_81\" id=\"0b623bace4b001accef071014eae32ea_p_81\"><span data-lake-id=\"u7f22eb05\" id=\"u7f22eb05\">2、</span><code data-lake-id=\"u30623902\" id=\"u30623902\"><span data-lake-id=\"ub2086f8e\" id=\"ub2086f8e\">this.setState</span></code><span data-lake-id=\"ubf7ca8c8\" id=\"ubf7ca8c8\"> 方法的执行时 </span><code data-lake-id=\"ua423e680\" id=\"ua423e680\"><span data-lake-id=\"u96d826ff\" id=\"u96d826ff\">异步的</span></code><span data-lake-id=\"u753d69b3\" id=\"u753d69b3\">。</span></p><p data-lake-id=\"f767a46c080be1842a0d40523bf6c6d7_p_82\" id=\"f767a46c080be1842a0d40523bf6c6d7_p_82\"><span data-lake-id=\"u5fbdd6a2\" id=\"u5fbdd6a2\">3、如果在调用完 </span><code data-lake-id=\"u261ef477\" id=\"u261ef477\"><span data-lake-id=\"u185ecd0f\" id=\"u185ecd0f\">this.setState</span></code><span data-lake-id=\"ufcbe332b\" id=\"ufcbe332b\">之后，又想立即拿到最新的</span><code data-lake-id=\"ud5f2351f\" id=\"ud5f2351f\"><span data-lake-id=\"u6e749641\" id=\"u6e749641\">state</span></code><span data-lake-id=\"ud6ab9f56\" id=\"ud6ab9f56\">的值，需要使用 </span><code data-lake-id=\"u2cc99abc\" id=\"u2cc99abc\"><span data-lake-id=\"u0e53db9f\" id=\"u0e53db9f\">this.setState({}, callback)</span></code><span data-lake-id=\"u5fbe1bf2\" id=\"u5fbe1bf2\">，第二个参数【回调函数】中获取。</span></p></blockquote><p data-lake-id=\"187832c794b601f7094c1a9b20086a6b_p_83\" id=\"187832c794b601f7094c1a9b20086a6b_p_83\"><br></p><h2 data-lake-id=\"1007ed0a\" id=\"1007ed0a\"><span data-lake-id=\"u79b33661\" id=\"u79b33661\">5. 单向数据流(状态变化 =&gt; 自动更新页面)</span></h2><p data-lake-id=\"470257ffbff08ad0eedbc557452f8c66_p_84\" id=\"470257ffbff08ad0eedbc557452f8c66_p_84\"><br></p><blockquote data-lake-id=\"ua09e79e2\" id=\"ua09e79e2\"><p data-lake-id=\"8c04123b4b93e8023d693e0e69142df1_p_85\" id=\"8c04123b4b93e8023d693e0e69142df1_p_85\"><span data-lake-id=\"ue1b3c41f\" id=\"ue1b3c41f\">1、</span><code data-lake-id=\"u58610fb7\" id=\"u58610fb7\"><span data-lake-id=\"u4fa29183\" id=\"u4fa29183\">React</span></code><span data-lake-id=\"ub35ab773\" id=\"ub35ab773\"> 中，默认是 </span><code data-lake-id=\"u41cc94c6\" id=\"u41cc94c6\"><span data-lake-id=\"uf3973e2e\" id=\"uf3973e2e\">单向数据流</span></code><span data-lake-id=\"u9c05c961\" id=\"u9c05c961\">，只能把 </span><code data-lake-id=\"ub73142a0\" id=\"ub73142a0\"><span data-lake-id=\"uf0acbe91\" id=\"uf0acbe91\">state</span></code><span data-lake-id=\"u0bc52ff5\" id=\"u0bc52ff5\"> 上的数据绑定到页面，无法把页面中数据的变化，自动同步回 </span><code data-lake-id=\"u3baed967\" id=\"u3baed967\"><span data-lake-id=\"u6790e760\" id=\"u6790e760\">state</span></code><span data-lake-id=\"u90350042\" id=\"u90350042\">；如果需要把页面上数据的变化，保存到 </span><code data-lake-id=\"u558d2df7\" id=\"u558d2df7\"><span data-lake-id=\"udacddd67\" id=\"udacddd67\">state</span></code><span data-lake-id=\"ucc75fcb9\" id=\"ucc75fcb9\">，需要手动监听</span><code data-lake-id=\"u3cb900e8\" id=\"u3cb900e8\"><span data-lake-id=\"ud7306bb0\" id=\"ud7306bb0\">onChange</span></code><span data-lake-id=\"u15eb9df5\" id=\"u15eb9df5\"> 事件，拿到最新的数据，手动调用 </span><code data-lake-id=\"u2c0a2a29\" id=\"u2c0a2a29\"><span data-lake-id=\"u03d75b3f\" id=\"u03d75b3f\">this.setState({ })</span></code><span data-lake-id=\"uc9ff8eb7\" id=\"uc9ff8eb7\"> 更改。</span></p><p data-lake-id=\"f3f5b26e00c50b7d34832d237a7ec412_p_86\" id=\"f3f5b26e00c50b7d34832d237a7ec412_p_86\"><span data-lake-id=\"u3b6e0559\" id=\"u3b6e0559\">2、当为文本框绑定 </span><code data-lake-id=\"ua4d19139\" id=\"ua4d19139\"><span data-lake-id=\"uff017e11\" id=\"uff017e11\">value</span></code><span data-lake-id=\"u086fb674\" id=\"u086fb674\"> 值以后，要么同时给标签提供一个 </span><code data-lake-id=\"u6cee8b9c\" id=\"u6cee8b9c\"><span data-lake-id=\"u8ea30cb3\" id=\"u8ea30cb3\">readOnly</span></code><span data-lake-id=\"uca2ad096\" id=\"uca2ad096\"> 属性，要么提供一个 </span><code data-lake-id=\"u13096c03\" id=\"u13096c03\"><span data-lake-id=\"u4ce544bb\" id=\"u4ce544bb\">onChange</span></code><span data-lake-id=\"uf3346820\" id=\"uf3346820\"> 事件处理函数。</span></p></blockquote><p data-lake-id=\"bd67236b6b40e1ddeba66aa4c905c5af_p_87\" id=\"bd67236b6b40e1ddeba66aa4c905c5af_p_87\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22jsx%22%2C%22code%22%3A%22%2F%2F%20%E6%96%B9%E6%A1%88%E4%B8%80%EF%BC%9A%E9%80%9A%E8%BF%87%E4%BA%8B%E4%BB%B6%E5%8F%82%E6%95%B0%20e%20%E6%9D%A5%E8%8E%B7%E5%8F%96DOM%E5%85%83%E7%B4%A0%E7%9A%84%E5%BC%95%E7%94%A8%5Cn%3Cinput%5Cn%20%20type%3D%5C%22text%5C%22%5Cn%20%20value%3D%7Bthis.state.msg%7D%5Cn%20%20onChange%3D%7Be%20%3D%3E%20this.textChanged(e)%7D%5Cn%2F%3E%3B%5Cn%5CntextChanged%20%3D%20e%20%3D%3E%20%7B%5Cn%20%20console.log(e.target.value)%3B%5Cn%7D%3B%5Cn%5Cn%2F%2F%20%E6%96%B9%E6%A1%88%E4%BA%8C%EF%BC%9A%E9%80%9A%E8%BF%87ref%20%E6%9D%A5%E8%8E%B7%E5%8F%96DOM%E5%85%83%E7%B4%A0%E7%9A%84%E5%BC%95%E7%94%A8%20%20this.refs.%E5%BC%95%E7%94%A8%E5%90%8D%E7%A7%B0%5Cn%3Cinput%5Cn%20%20type%3D%5C%22text%5C%22%5Cn%20%20value%3D%7Bthis.state.msg%7D%5Cn%20%20onChange%3D%7B()%20%3D%3E%20this.textChanged()%7D%5Cn%20%20ref%3D%5C%22txt%5C%22%5Cn%2F%3E%3B%5Cn%5CntextChanged%20%3D%20()%20%3D%3E%20%7B%5Cn%20%20console.log(this.refs.txt.value)%3B%5Cn%7D%3B%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22dcccf122%22%7D\"></card><p data-lake-id=\"ac4c0d2013d04adfac6d2e9459525ac0_p_88\" id=\"ac4c0d2013d04adfac6d2e9459525ac0_p_88\"><br></p><h2 data-lake-id=\"0de76a84\" id=\"0de76a84\"><span data-lake-id=\"u571b9cc0\" id=\"u571b9cc0\">6. 生命周期</span></h2><p data-lake-id=\"ab51a4ad9cb9ee48199bb5c9fc6715a2_p_89\" id=\"ab51a4ad9cb9ee48199bb5c9fc6715a2_p_89\"><br></p><ul list=\"uedaf7592\"><li fid=\"ua939f596\" data-lake-id=\"c5a00166b4440234586ae8d420a33795_li_26\" id=\"c5a00166b4440234586ae8d420a33795_li_26\"><span data-lake-id=\"u3d708c08\" id=\"u3d708c08\">生命周期介绍</span></li></ul><p data-lake-id=\"700ece5e21ebc17eb29d438c814531fe_p_90\" id=\"700ece5e21ebc17eb29d438c814531fe_p_90\"><br></p><blockquote data-lake-id=\"u632ce236\" id=\"u632ce236\"><p data-lake-id=\"f2f3e3a8e4f144f2576ae4891a44cdaf_p_91\" id=\"f2f3e3a8e4f144f2576ae4891a44cdaf_p_91\"><span data-lake-id=\"uc8256432\" id=\"uc8256432\">每个组件的实例，从创建、到运行、直到销毁，在这个过程中，会触发一系列事件，这些事件就叫做组件的生命周期</span></p></blockquote><p data-lake-id=\"f82a35c2fca60d6b3bdc5c1000201985_p_92\" id=\"f82a35c2fca60d6b3bdc5c1000201985_p_92\"><br></p><ul list=\"ude559425\"><li fid=\"u47bb9dd0\" data-lake-id=\"df39c17d8d6e9ad2352a5b3845ea1ea2_li_27\" id=\"df39c17d8d6e9ad2352a5b3845ea1ea2_li_27\"><span data-lake-id=\"u113ca882\" id=\"u113ca882\">React 的生命周期分为三个部分</span></li></ul><p data-lake-id=\"92499751fabe053dd037c1574d6f4fb2_p_93\" id=\"92499751fabe053dd037c1574d6f4fb2_p_93\"><br></p><ol list=\"u5e8025e0\"><li fid=\"u28f34f39\" data-lake-id=\"c309d63068840b72a682da2ca4e8243c_li_28\" id=\"c309d63068840b72a682da2ca4e8243c_li_28\"><span data-lake-id=\"u415df891\" id=\"u415df891\">组件创建阶段</span></li></ol><p data-lake-id=\"d0973d57fdd5c28d718b374e8fa011eb_p_94\" id=\"d0973d57fdd5c28d718b374e8fa011eb_p_94\"><br></p><blockquote data-lake-id=\"ud199fe92\" id=\"ud199fe92\"><p data-lake-id=\"ac56cecf83714e29159388dfdd5cabe9_p_95\" id=\"ac56cecf83714e29159388dfdd5cabe9_p_95\"><span data-lake-id=\"u579d3d3f\" id=\"u579d3d3f\">只执行一次</span></p></blockquote><p data-lake-id=\"cd1514dfedaab485e5767b166731e116_p_96\" id=\"cd1514dfedaab485e5767b166731e116_p_96\"><br></p><blockquote data-lake-id=\"u101d5f4d\" id=\"u101d5f4d\"><ol list=\"u77b02fef\"><li fid=\"u21d8c322\" data-lake-id=\"953819c170b98a49fd10443e38645e27_li_29\" id=\"953819c170b98a49fd10443e38645e27_li_29\"><code data-lake-id=\"u17196883\" id=\"u17196883\"><span data-lake-id=\"u1590cfb9\" id=\"u1590cfb9\">componentWillMount</span></code><span data-lake-id=\"ubb176fb3\" id=\"ubb176fb3\"> =&gt; </span><code data-lake-id=\"u7273b951\" id=\"u7273b951\"><span data-lake-id=\"uace56c40\" id=\"uace56c40\">挂载之前</span></code></li></ol><ol list=\"u3633af88\" start=\"2\"><li fid=\"ua2db1a58\" data-lake-id=\"b2e03a8bd5436bf4368eb22119b3243a_li_30\" id=\"b2e03a8bd5436bf4368eb22119b3243a_li_30\"><code data-lake-id=\"ub8cfac24\" id=\"ub8cfac24\"><span data-lake-id=\"uc5ce8b91\" id=\"uc5ce8b91\">render</span></code><span data-lake-id=\"uda6aa356\" id=\"uda6aa356\"> =&gt; </span><code data-lake-id=\"u673ffb21\" id=\"u673ffb21\"><span data-lake-id=\"u281242c7\" id=\"u281242c7\">正在渲染，虚拟DOM创建到了内存中，还未挂载到页面上</span></code></li></ol><ol list=\"u05a38e76\" start=\"3\"><li fid=\"ub15fa5e9\" data-lake-id=\"92c11e785bebd24ff064e78882fe1c38_li_31\" id=\"92c11e785bebd24ff064e78882fe1c38_li_31\"><code data-lake-id=\"u050850f2\" id=\"u050850f2\"><span data-lake-id=\"u23e8301a\" id=\"u23e8301a\">componentDidMount</span></code><span data-lake-id=\"uc262fc4a\" id=\"uc262fc4a\"> =&gt; </span><code data-lake-id=\"udc15e59b\" id=\"udc15e59b\"><span data-lake-id=\"u1c848107\" id=\"u1c848107\">挂载结束，需要操作DOM节点的初始化操作放在这里</span></code></li></ol></blockquote><p data-lake-id=\"d6a51c95a901676ffc113c140e74f091_p_97\" id=\"d6a51c95a901676ffc113c140e74f091_p_97\"><br></p><ol list=\"u206f828f\" start=\"2\"><li fid=\"u69c38334\" data-lake-id=\"eb73e3c2bd5d157ca7522faafee84413_li_32\" id=\"eb73e3c2bd5d157ca7522faafee84413_li_32\"><span data-lake-id=\"u63ea804a\" id=\"u63ea804a\">组件运行阶段：</span></li></ol><p data-lake-id=\"545db91b827f87cc9afe81c0f08a1a88_p_98\" id=\"545db91b827f87cc9afe81c0f08a1a88_p_98\"><br></p><blockquote data-lake-id=\"u9f53683d\" id=\"u9f53683d\"><p data-lake-id=\"9a4316cc8d41ec7d92d6f724ffb305d0_p_99\" id=\"9a4316cc8d41ec7d92d6f724ffb305d0_p_99\"><span data-lake-id=\"ua56273ce\" id=\"ua56273ce\">根据 </span><code data-lake-id=\"u158d7fd2\" id=\"u158d7fd2\"><span data-lake-id=\"u093bd4f8\" id=\"u093bd4f8\">props</span></code><span data-lake-id=\"u201ca305\" id=\"u201ca305\"> 属性或者 </span><code data-lake-id=\"ua907cb90\" id=\"ua907cb90\"><span data-lake-id=\"u0bbad0f4\" id=\"u0bbad0f4\">state</span></code><span data-lake-id=\"u84fc7bcc\" id=\"u84fc7bcc\"> 状态的改变，有选择性的执行 </span><code data-lake-id=\"u3e962c5f\" id=\"u3e962c5f\"><span data-lake-id=\"u5a3b07d1\" id=\"u5a3b07d1\">0</span></code><span data-lake-id=\"uf7362924\" id=\"uf7362924\"> 到 </span><code data-lake-id=\"u5e54c63a\" id=\"u5e54c63a\"><span data-lake-id=\"ub235d5f6\" id=\"ub235d5f6\">多次</span></code></p></blockquote><p data-lake-id=\"ec69cd8d8f73ee437722723e0adf1fa7_p_100\" id=\"ec69cd8d8f73ee437722723e0adf1fa7_p_100\"><br></p><blockquote data-lake-id=\"u7eed0e93\" id=\"u7eed0e93\"><ol list=\"u9ad2abbe\"><li fid=\"ufef60789\" data-lake-id=\"15f5ce53da1a0f97f1150f14991cd7e6_li_33\" id=\"15f5ce53da1a0f97f1150f14991cd7e6_li_33\"><code data-lake-id=\"u97977ce6\" id=\"u97977ce6\"><span data-lake-id=\"u4d9fc05a\" id=\"u4d9fc05a\">props</span></code><span data-lake-id=\"u4eb6bec1\" id=\"u4eb6bec1\"> 改变之后</span></li></ol><ol list=\"ued24cbeb\" start=\"2\"><li fid=\"u582e1520\" data-lake-id=\"cf438b04dc54874e76b4802672eb3f7e_li_34\" id=\"cf438b04dc54874e76b4802672eb3f7e_li_34\"><code data-lake-id=\"u77450872\" id=\"u77450872\"><span data-lake-id=\"ub26f1ca1\" id=\"ub26f1ca1\">componentWillReceiveProps</span></code><span data-lake-id=\"u6fd2e5ef\" id=\"u6fd2e5ef\"> =&gt; 当一个挂载的组件接收到新的 </span><code data-lake-id=\"u2631d372\" id=\"u2631d372\"><span data-lake-id=\"u4eb9a754\" id=\"u4eb9a754\">props</span></code><span data-lake-id=\"u1315bc6c\" id=\"u1315bc6c\"> 的时候被调用</span></li></ol><ol list=\"u7d4bb98b\" start=\"3\"><li fid=\"u59aaff04\" data-lake-id=\"e8cbd0abb722e0a80627c7d835c3509c_li_35\" id=\"e8cbd0abb722e0a80627c7d835c3509c_li_35\"><code data-lake-id=\"ub742a617\" id=\"ub742a617\"><span data-lake-id=\"u200bd565\" id=\"u200bd565\">state</span></code><span data-lake-id=\"udc48482b\" id=\"udc48482b\"> 改变之后</span></li></ol><ol list=\"u235f75d1\" start=\"4\"><li fid=\"uee6a2e6c\" data-lake-id=\"1e0d78c088500777ab720b96f7919d18_li_36\" id=\"1e0d78c088500777ab720b96f7919d18_li_36\"><code data-lake-id=\"u933bcdb7\" id=\"u933bcdb7\"><span data-lake-id=\"ud887f8ae\" id=\"ud887f8ae\">shouldComponentUpdate（nextprops, nextState）</span></code><span data-lake-id=\"u5c97ce36\" id=\"u5c97ce36\"> =&gt; 当组件做出是否要更新 </span><code data-lake-id=\"u8acb87c2\" id=\"u8acb87c2\"><span data-lake-id=\"u46ad2857\" id=\"u46ad2857\">DOM</span></code><span data-lake-id=\"ue9582970\" id=\"ue9582970\"> 的决定的时候被调用，在改变状态的时候可以选择通过( </span><code data-lake-id=\"uad9ff8b5\" id=\"uad9ff8b5\"><span data-lake-id=\"ud787c718\" id=\"ud787c718\">return true</span></code><span data-lake-id=\"u3549c3e6\" id=\"u3549c3e6\"> )或者不通过( </span><code data-lake-id=\"ud5756ac9\" id=\"ud5756ac9\"><span data-lake-id=\"u8205d61b\" id=\"u8205d61b\">return false</span></code><span data-lake-id=\"u7d8f2659\" id=\"u7d8f2659\">)</span></li></ol><ol list=\"u56c94cf4\" start=\"5\"><li fid=\"u2b07650c\" data-lake-id=\"bfd089f6fa611fda2b60c0621c0f4bde_li_37\" id=\"bfd089f6fa611fda2b60c0621c0f4bde_li_37\"><code data-lake-id=\"u56d59131\" id=\"u56d59131\"><span data-lake-id=\"udaf249ec\" id=\"udaf249ec\">componentWillUpdate</span></code><span data-lake-id=\"u27e6c151\" id=\"u27e6c151\"> =&gt; 在更新发生之前被调用</span></li></ol><ol list=\"uafb12a0f\" start=\"6\"><li fid=\"ubc7f403b\" data-lake-id=\"af2f4cf88cf0585eba68933297ada96a_li_38\" id=\"af2f4cf88cf0585eba68933297ada96a_li_38\"><code data-lake-id=\"u9bca014b\" id=\"u9bca014b\"><span data-lake-id=\"u4ec24265\" id=\"u4ec24265\">render</span></code><span data-lake-id=\"u55b9764d\" id=\"u55b9764d\"> =&gt; 数据是新的，页面是旧的</span></li></ol><p data-lake-id=\"19f8cdbab36ddb7f1ac2087689e7e0d0_p_101\" id=\"19f8cdbab36ddb7f1ac2087689e7e0d0_p_101\"><span data-lake-id=\"u0c61fd28\" id=\"u0c61fd28\">7.</span><code data-lake-id=\"u2850a5d3\" id=\"u2850a5d3\"><span data-lake-id=\"ub78b1345\" id=\"ub78b1345\">componentDidUpdate</span></code><span data-lake-id=\"uc0c0a8e0\" id=\"uc0c0a8e0\"> =&gt; 数据是新的，页面已经变成了最新的</span></p></blockquote><p data-lake-id=\"a2c2ab33193f15adcdff2e08f718d7c2_p_102\" id=\"a2c2ab33193f15adcdff2e08f718d7c2_p_102\"><br></p><ol list=\"u0c66392a\" start=\"3\"><li fid=\"uce25f05e\" data-lake-id=\"2a197f78dfc8047c958a58f54a35869e_li_39\" id=\"2a197f78dfc8047c958a58f54a35869e_li_39\"><span data-lake-id=\"u2c9549f8\" id=\"u2c9549f8\">组件销毁阶段</span></li></ol><p data-lake-id=\"c4eb78622bfacec164736bf4df40fa3b_p_103\" id=\"c4eb78622bfacec164736bf4df40fa3b_p_103\"><br></p><blockquote data-lake-id=\"u5312b69a\" id=\"u5312b69a\"><p data-lake-id=\"4d3bad0e87341f734d48e790cc305a0b_p_104\" id=\"4d3bad0e87341f734d48e790cc305a0b_p_104\"><span data-lake-id=\"uf6ad2fae\" id=\"uf6ad2fae\">只执行一次</span></p></blockquote><p data-lake-id=\"702e00ceee7e1a86732f5fe484305638_p_105\" id=\"702e00ceee7e1a86732f5fe484305638_p_105\"><br></p><blockquote data-lake-id=\"u951152fc\" id=\"u951152fc\"><p data-lake-id=\"7b38c40aa5f9503ee5554997227c1a69_p_106\" id=\"7b38c40aa5f9503ee5554997227c1a69_p_106\"><code data-lake-id=\"u663d9469\" id=\"u663d9469\"><span data-lake-id=\"u594d6c48\" id=\"u594d6c48\">componentWillUnmount</span></code><span data-lake-id=\"ud76245d7\" id=\"ud76245d7\"> =&gt; 组件移除或者销毁的时候被调用</span></p></blockquote><p data-lake-id=\"276871b94690e117cada332c7f3a696a_p_107\" id=\"276871b94690e117cada332c7f3a696a_p_107\"><br></p><h2 data-lake-id=\"6098aabc\" id=\"6098aabc\"><span data-lake-id=\"u2959a4ad\" id=\"u2959a4ad\">7. 验证数据类型</span></h2><p data-lake-id=\"c6ea08d82bf830d4344bc47c75959696_p_108\" id=\"c6ea08d82bf830d4344bc47c75959696_p_108\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22import%20%7B%20ProtoTypes%20%7D%20from%20%5C%22prop-types%5C%22%3B%5Cn%5Cn%2F%2F%20%E5%AE%9A%E4%B9%89%E7%BB%84%E4%BB%B6%E9%9C%80%E8%A6%81%E4%BC%A0%E5%85%A5%E7%9A%84%E5%8F%82%E6%95%B0%5CnMyCompo.protoTypes%20%3D%20%7B%5Cn%20%20a%3A%20ProtoTypes.string.isRequired%2C%5Cn%20%20b%3A%20ProtoTypes.string.isRequired%2C%5Cn%20%20c%3A%20ProtoTypes.number.isRequired%5Cn%7D%3B%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%220b953c02%22%7D\"></card><p data-lake-id=\"db6a3a7f6005176b48ff149f30b21edd_p_109\" id=\"db6a3a7f6005176b48ff149f30b21edd_p_109\"><br></p><h2 data-lake-id=\"57601065\" id=\"57601065\"><span data-lake-id=\"u32395aac\" id=\"u32395aac\">8. flux</span></h2><p data-lake-id=\"e9ce31f642ab705821fd192984e0da5b_p_110\" id=\"e9ce31f642ab705821fd192984e0da5b_p_110\"><br></p><h3 data-lake-id=\"e05dce83\" id=\"e05dce83\"><span data-lake-id=\"u1134e1ca\" id=\"u1134e1ca\">简介</span></h3><p data-lake-id=\"7df9b20b6b924d2fc8c9e5079bc8d88d_p_111\" id=\"7df9b20b6b924d2fc8c9e5079bc8d88d_p_111\"><br></p><blockquote data-lake-id=\"u24e618b5\" id=\"u24e618b5\"><p data-lake-id=\"929d4177cb6da986fbfb4a0cfb595749_p_112\" id=\"929d4177cb6da986fbfb4a0cfb595749_p_112\"><span data-lake-id=\"ue22a7168\" id=\"ue22a7168\">传统的 </span><code data-lake-id=\"u8607a5f9\" id=\"u8607a5f9\"><span data-lake-id=\"uae533078\" id=\"uae533078\">MVC</span></code><span data-lake-id=\"u09f76c96\" id=\"u09f76c96\"> 和 </span><code data-lake-id=\"u09e34abe\" id=\"u09e34abe\"><span data-lake-id=\"u1a0cfcdd\" id=\"u1a0cfcdd\">MVVM</span></code><span data-lake-id=\"ub6227834\" id=\"ub6227834\"> 架构设计模式有一个致命的缺点：当项目越来越大、逻辑越来越复杂的时候，数据流动就越显得混乱。</span></p></blockquote><p data-lake-id=\"45e36abc53ce1dcd83cb64d5bdb2b960_p_113\" id=\"45e36abc53ce1dcd83cb64d5bdb2b960_p_113\"><br></p><blockquote data-lake-id=\"uaa5f1ad9\" id=\"uaa5f1ad9\"><p data-lake-id=\"42daca6a078636a9bdb0004a9b6ba763_p_114\" id=\"42daca6a078636a9bdb0004a9b6ba763_p_114\"><code data-lake-id=\"u800509d8\" id=\"u800509d8\"><span data-lake-id=\"u11edfbe9\" id=\"u11edfbe9\">Flux</span></code><span data-lake-id=\"u03b2b159\" id=\"u03b2b159\"> 是致力于解决数据有序传输问题的架构设计模式，来自 </span><code data-lake-id=\"u1ec093c4\" id=\"u1ec093c4\"><span data-lake-id=\"u10fe5ff6\" id=\"u10fe5ff6\">Facebook</span></code><span data-lake-id=\"ud20a8a61\" id=\"ud20a8a61\">。</span><code data-lake-id=\"udc029ec8\" id=\"udc029ec8\"><span data-lake-id=\"u886cb0da\" id=\"u886cb0da\">Flux</span></code><span data-lake-id=\"u0c2480d1\" id=\"u0c2480d1\"> 中最大的哲学：数据是 </span><code data-lake-id=\"ue86c1ea2\" id=\"ue86c1ea2\"><span data-lake-id=\"u32a99416\" id=\"u32a99416\">单向流动</span></code><span data-lake-id=\"uc4106225\" id=\"uc4106225\"> 的。</span></p></blockquote><p data-lake-id=\"bdad9f83e0239c83aaf356c272a6c0ea_p_115\" id=\"bdad9f83e0239c83aaf356c272a6c0ea_p_115\"><br></p><blockquote data-lake-id=\"uf3071b3b\" id=\"uf3071b3b\"><p data-lake-id=\"ffdc7b0bce372747d06c905b88fd2640_p_116\" id=\"ffdc7b0bce372747d06c905b88fd2640_p_116\"><a href=\"https://github.com/facebook/flux/tree/master/examples/flux-concepts\" target=\"_blank\" data-lake-id=\"u2fd5ac3b\" id=\"u2fd5ac3b\"><span data-lake-id=\"u6e6a3e7e\" id=\"u6e6a3e7e\">官方手册</span></a></p></blockquote><p data-lake-id=\"df79537d6e51b378da87648af8c34dc2_p_117\" id=\"df79537d6e51b378da87648af8c34dc2_p_117\"><br></p><blockquote data-lake-id=\"u324fe128\" id=\"u324fe128\"><p data-lake-id=\"18546108f056bdf7ee6d19322f0e3855_p_118\" id=\"18546108f056bdf7ee6d19322f0e3855_p_118\"><code data-lake-id=\"u542603d1\" id=\"u542603d1\"><span data-lake-id=\"ucc049a31\" id=\"ucc049a31\">Flux</span></code><span data-lake-id=\"u9a2baccb\" id=\"u9a2baccb\"> 中最重要的四个概念：</span><code data-lake-id=\"u89fcd0ba\" id=\"u89fcd0ba\"><span data-lake-id=\"u87ed6412\" id=\"u87ed6412\">Dispatcher</span></code><span data-lake-id=\"uab30739a\" id=\"uab30739a\">、</span><code data-lake-id=\"u7aae5fcb\" id=\"u7aae5fcb\"><span data-lake-id=\"u57df27e4\" id=\"u57df27e4\">Store</span></code><span data-lake-id=\"u564755c5\" id=\"u564755c5\">、</span><code data-lake-id=\"u8d1e2d17\" id=\"u8d1e2d17\"><span data-lake-id=\"u3adf4873\" id=\"u3adf4873\">View</span></code><span data-lake-id=\"uad3aa359\" id=\"uad3aa359\">、</span><code data-lake-id=\"ud23c5800\" id=\"ud23c5800\"><span data-lake-id=\"u4e294a09\" id=\"u4e294a09\">Action</span></code><span data-lake-id=\"u7010d7d7\" id=\"u7010d7d7\">。</span></p></blockquote><p data-lake-id=\"d0c08438d746f74145c64c20ef564288_p_121\" id=\"d0c08438d746f74145c64c20ef564288_p_121\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2020%2Fpng%2F732231%2F1608703835856-e1263bac-124a-40da-ae3c-b45a4c8081ae.png%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A1300%2C%22height%22%3A393%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22flux.png%22%2C%22size%22%3A26132%2C%22originWidth%22%3A1300%2C%22originHeight%22%3A393%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22Action%20view%20Dispatcher%20Action%20Store%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A742.29645%2C%22y%22%3A95.19946%2C%22width%22%3A100.83304999999996%2C%22height%22%3A27.752139999999997%2C%22text%22%3A%22Action%22%7D%2C%7B%22x%22%3A1040.4393%2C%22y%22%3A257.3188%2C%22width%22%3A77.01170000000002%2C%22height%22%3A29.807199999999966%2C%22text%22%3A%22view%22%7D%2C%7B%22x%22%3A422.2762%2C%22y%22%3A257.6366%2C%22width%22%3A169.2369%2C%22height%22%3A35.70822000000004%2C%22text%22%3A%22Dispatcher%22%7D%2C%7B%22x%22%3A170.38489%2C%22y%22%3A257.98996%2C%22width%22%3A100.39093%2C%22height%22%3A29.07168999999999%2C%22text%22%3A%22Action%22%7D%2C%7B%22x%22%3A751.8062%2C%22y%22%3A259.98605%2C%22width%22%3A83.7115%2C%22height%22%3A26.925850000000025%2C%22text%22%3A%22Store%22%7D%5D%2C%22id%22%3A%22WJzYc%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><h3 data-lake-id=\"e2d6d0e3\" id=\"e2d6d0e3\"><span data-lake-id=\"u74ab9fca\" id=\"u74ab9fca\">基本概念</span></h3><p data-lake-id=\"263db23da7a1766ad534e8dc12a747a1_p_122\" id=\"263db23da7a1766ad534e8dc12a747a1_p_122\"><br></p><ol list=\"u76f67227\"><li fid=\"u262fd81a\" data-lake-id=\"b71f42fd17d7066796e288edf093b35d_li_40\" id=\"b71f42fd17d7066796e288edf093b35d_li_40\"><span data-lake-id=\"ud12b5418\" id=\"ud12b5418\">概述</span></li></ol><ul list=\"u6b5eb539\" data-lake-indent=\"1\"><li fid=\"uf03dfdb1\" data-lake-id=\"9d9fd1ab4feec9e62cec38c9a8786220_li_41\" id=\"9d9fd1ab4feec9e62cec38c9a8786220_li_41\"><code data-lake-id=\"uf2018a33\" id=\"uf2018a33\"><span data-lake-id=\"u4807c128\" id=\"u4807c128\">flux</span></code><span data-lake-id=\"u300a54de\" id=\"u300a54de\"> 是一个管理 </span><code data-lake-id=\"ufcedcf3e\" id=\"ufcedcf3e\"><span data-lake-id=\"u4006fd8a\" id=\"u4006fd8a\">App</span></code><span data-lake-id=\"u31234826\" id=\"u31234826\"> 中数据流动的模式。</span></li></ul><ul list=\"u8e8cca9f\" data-lake-indent=\"1\"><li fid=\"u54172932\" data-lake-id=\"802bccf6f92b03b8b2d2448f97dec089_li_42\" id=\"802bccf6f92b03b8b2d2448f97dec089_li_42\"><span data-lake-id=\"u167528ba\" id=\"u167528ba\">最关键的概念：</span><code data-lake-id=\"ud96f17cf\" id=\"ud96f17cf\"><span data-lake-id=\"u8e134abc\" id=\"u8e134abc\">数据的流动是单向的</span></code><span data-lake-id=\"ua9443ce7\" id=\"ua9443ce7\">。</span></li></ul><ol list=\"uc0962c8a\" start=\"2\"><li fid=\"u41a38504\" data-lake-id=\"3b3ad376083d1df38b8ee615f733c771_li_43\" id=\"3b3ad376083d1df38b8ee615f733c771_li_43\"><span data-lake-id=\"ub5a46f23\" id=\"ub5a46f23\">Dispatcher 调度者</span></li></ol><ul list=\"ud1048a91\" data-lake-indent=\"1\"><li fid=\"u073b2e00\" data-lake-id=\"7edb2c9d4af83956959b44f52be2f0a6_li_44\" id=\"7edb2c9d4af83956959b44f52be2f0a6_li_44\"><code data-lake-id=\"u1b3e6916\" id=\"u1b3e6916\"><span data-lake-id=\"uf539d8d3\" id=\"uf539d8d3\">Dispatcher</span></code><span data-lake-id=\"u2fe41f27\" id=\"u2fe41f27\"> 接受 </span><code data-lake-id=\"u33e37b4a\" id=\"u33e37b4a\"><span data-lake-id=\"u064d2915\" id=\"u064d2915\">action</span></code><span data-lake-id=\"u411863eb\" id=\"u411863eb\">，并且要把这些 </span><code data-lake-id=\"uc50f4042\" id=\"uc50f4042\"><span data-lake-id=\"u43bade72\" id=\"u43bade72\">action</span></code><span data-lake-id=\"u909dbe8d\" id=\"u909dbe8d\"> 分派给已经注册到 </span><code data-lake-id=\"u0271f5de\" id=\"u0271f5de\"><span data-lake-id=\"u39dda0fc\" id=\"u39dda0fc\">Dispatcher</span></code><span data-lake-id=\"u69b30ba7\" id=\"u69b30ba7\"> 的 </span><code data-lake-id=\"u391cfe23\" id=\"u391cfe23\"><span data-lake-id=\"u9b136c18\" id=\"u9b136c18\">store</span></code><span data-lake-id=\"u6b655213\" id=\"u6b655213\"> 上</span></li></ul><ul list=\"u9214f1f3\" data-lake-indent=\"1\"><li fid=\"u15b25495\" data-lake-id=\"5fb2d22b713618b8dbaa626827890a2e_li_45\" id=\"5fb2d22b713618b8dbaa626827890a2e_li_45\"><span data-lake-id=\"ud64451a9\" id=\"ud64451a9\">所有的 </span><code data-lake-id=\"u6d677649\" id=\"u6d677649\"><span data-lake-id=\"u909db8e4\" id=\"u909db8e4\">store</span></code><span data-lake-id=\"u3e262e9f\" id=\"u3e262e9f\"> 都将接收所有的 </span><code data-lake-id=\"u831dc44b\" id=\"u831dc44b\"><span data-lake-id=\"u63a565c9\" id=\"u63a565c9\">action</span></code></li></ul><ul list=\"uc50c4640\" data-lake-indent=\"1\"><li fid=\"uf20a235b\" data-lake-id=\"04313a7f9ed5e5ecb4c0782310572893_li_46\" id=\"04313a7f9ed5e5ecb4c0782310572893_li_46\"><span data-lake-id=\"ub77bfe56\" id=\"ub77bfe56\">在每个 </span><code data-lake-id=\"u48c9439a\" id=\"u48c9439a\"><span data-lake-id=\"u3200c9b5\" id=\"u3200c9b5\">App</span></code><span data-lake-id=\"u1ba78f3e\" id=\"u1ba78f3e\"> 中，应该确保只有一个 </span><code data-lake-id=\"u01e2b890\" id=\"u01e2b890\"><span data-lake-id=\"uc2971acf\" id=\"uc2971acf\">Dispatcher</span></code><span data-lake-id=\"uaad50260\" id=\"uaad50260\"> 的实例</span></li></ul><ol list=\"u347ded06\" start=\"3\"><li fid=\"ud9056b33\" data-lake-id=\"4f03cc32012792db49edc6fb371e13eb_li_47\" id=\"4f03cc32012792db49edc6fb371e13eb_li_47\"><span data-lake-id=\"uf55e6cf7\" id=\"uf55e6cf7\">store 仓库</span></li></ol><ul list=\"u527bb0a3\" data-lake-indent=\"1\"><li fid=\"u3a4035e7\" data-lake-id=\"f7dcac766047cc3a4a93ad5b668ea247_li_48\" id=\"f7dcac766047cc3a4a93ad5b668ea247_li_48\"><code data-lake-id=\"ufdf0b4c3\" id=\"ufdf0b4c3\"><span data-lake-id=\"u93228f46\" id=\"u93228f46\">store</span></code><span data-lake-id=\"u077c26f5\" id=\"u077c26f5\"> 是在 </span><code data-lake-id=\"u7b93f13b\" id=\"u7b93f13b\"><span data-lake-id=\"uc4c7052e\" id=\"uc4c7052e\">App</span></code><span data-lake-id=\"u314b3284\" id=\"u314b3284\"> 中持有数据的仓库</span></li></ul><ul list=\"u63c197cc\" data-lake-indent=\"1\"><li fid=\"u5034a617\" data-lake-id=\"258dac852530cbe7aac7313b95807f93_li_49\" id=\"258dac852530cbe7aac7313b95807f93_li_49\"><span data-lake-id=\"u685e73dd\" id=\"u685e73dd\">所有的 </span><code data-lake-id=\"u67d30472\" id=\"u67d30472\"><span data-lake-id=\"u6852a50f\" id=\"u6852a50f\">store</span></code><span data-lake-id=\"u3f8f8443\" id=\"u3f8f8443\"> 要在 </span><code data-lake-id=\"ucfa223b0\" id=\"ucfa223b0\"><span data-lake-id=\"ue853275f\" id=\"ue853275f\">App</span></code><span data-lake-id=\"u40f0cf34\" id=\"u40f0cf34\"> 的 </span><code data-lake-id=\"u001c76ce\" id=\"u001c76ce\"><span data-lake-id=\"u846656ea\" id=\"u846656ea\">Dispatcher</span></code><span data-lake-id=\"ue517fe3d\" id=\"ue517fe3d\"> 上注册，确保它们可以接收 </span><code data-lake-id=\"ue632d32a\" id=\"ue632d32a\"><span data-lake-id=\"u5d66b226\" id=\"u5d66b226\">action</span></code></li></ul><ul list=\"ufdc6d1c7\" data-lake-indent=\"1\"><li fid=\"u7975172a\" data-lake-id=\"69fe48f38a1d0e515e5e24f90b4df5ae_li_50\" id=\"69fe48f38a1d0e515e5e24f90b4df5ae_li_50\"><code data-lake-id=\"u488806bc\" id=\"u488806bc\"><span data-lake-id=\"u92d7fbcb\" id=\"u92d7fbcb\">store</span></code><span data-lake-id=\"u8369399e\" id=\"u8369399e\"> 中的数据只能被 </span><code data-lake-id=\"uf298faba\" id=\"uf298faba\"><span data-lake-id=\"u213219fd\" id=\"u213219fd\">action</span></code><span data-lake-id=\"u9de67f97\" id=\"u9de67f97\"> 改变。</span></li></ul><ul list=\"u53ed57ba\" data-lake-indent=\"1\"><li fid=\"uacc306d7\" data-lake-id=\"d396234fb79bcb6f2715716afb6fcbab_li_51\" id=\"d396234fb79bcb6f2715716afb6fcbab_li_51\"><code data-lake-id=\"ua2cbd74e\" id=\"ua2cbd74e\"><span data-lake-id=\"u6dd66022\" id=\"u6dd66022\">store</span></code><span data-lake-id=\"u8479b29f\" id=\"u8479b29f\"> 中不能够有公共的 </span><code data-lake-id=\"udc87bd46\" id=\"udc87bd46\"><span data-lake-id=\"u957b880e\" id=\"u957b880e\">setter</span></code><span data-lake-id=\"u03daaac0\" id=\"u03daaac0\">，只能有 </span><code data-lake-id=\"uf02ce790\" id=\"uf02ce790\"><span data-lake-id=\"u5f7970b8\" id=\"u5f7970b8\">getter</span></code></li></ul><ul list=\"uae19b1b1\" data-lake-indent=\"1\"><li fid=\"u3b1ade3e\" data-lake-id=\"03326cdb1d635ef8b654d7b051eb5b89_li_52\" id=\"03326cdb1d635ef8b654d7b051eb5b89_li_52\"><code data-lake-id=\"u02e443fa\" id=\"u02e443fa\"><span data-lake-id=\"u2606e0ba\" id=\"u2606e0ba\">store</span></code><span data-lake-id=\"u0d07b0ec\" id=\"u0d07b0ec\"> 决定了它们愿意响应哪些 </span><code data-lake-id=\"u223113b7\" id=\"u223113b7\"><span data-lake-id=\"u36620487\" id=\"u36620487\">actions</span></code></li></ul><ul list=\"u76d60386\" data-lake-indent=\"1\"><li fid=\"ubadac7b8\" data-lake-id=\"e249b63d86da62eefc2cc6e632fc17ca_li_53\" id=\"e249b63d86da62eefc2cc6e632fc17ca_li_53\"><span data-lake-id=\"u1082e6c1\" id=\"u1082e6c1\">无论何时，</span><code data-lake-id=\"ua585af6c\" id=\"ua585af6c\"><span data-lake-id=\"u32d5276c\" id=\"u32d5276c\">store</span></code><span data-lake-id=\"u623fc9f7\" id=\"u623fc9f7\"> 中的数据发生改变，就会触发一个 </span><code data-lake-id=\"u31bcc198\" id=\"u31bcc198\"><span data-lake-id=\"u5da64d9d\" id=\"u5da64d9d\">change</span></code><span data-lake-id=\"u2d5f0f18\" id=\"u2d5f0f18\"> 事件</span></li></ul><ul list=\"u855d67d4\" data-lake-indent=\"1\"><li fid=\"uedf0d458\" data-lake-id=\"5ee060e30209a14d8b10e151f61e83e3_li_54\" id=\"5ee060e30209a14d8b10e151f61e83e3_li_54\"><span data-lake-id=\"ua40b78e4\" id=\"ua40b78e4\">同一个 </span><code data-lake-id=\"u139c3401\" id=\"u139c3401\"><span data-lake-id=\"u4963e8fe\" id=\"u4963e8fe\">App</span></code><span data-lake-id=\"ucfa83220\" id=\"ucfa83220\"> 中可能有很多 </span><code data-lake-id=\"uca9be559\" id=\"uca9be559\"><span data-lake-id=\"ubeb17c5b\" id=\"ubeb17c5b\">store</span></code></li></ul><ol list=\"u8a85801b\" start=\"4\"><li fid=\"u3583e20f\" data-lake-id=\"3f3f3e4540f8c7177fdf5b95abd1136f_li_55\" id=\"3f3f3e4540f8c7177fdf5b95abd1136f_li_55\"><span data-lake-id=\"u0dc8f5e2\" id=\"u0dc8f5e2\">Action 行为</span></li></ol><ul list=\"u0a3993c1\" data-lake-indent=\"1\"><li fid=\"ubeed0069\" data-lake-id=\"e3f538dae596ce71c8599318f2517904_li_56\" id=\"e3f538dae596ce71c8599318f2517904_li_56\"><code data-lake-id=\"uc146d7d0\" id=\"uc146d7d0\"><span data-lake-id=\"u1b31abd3\" id=\"u1b31abd3\">Action</span></code><span data-lake-id=\"u62462e64\" id=\"u62462e64\"> 定义了 </span><code data-lake-id=\"ua11f6062\" id=\"ua11f6062\"><span data-lake-id=\"ud0821ae0\" id=\"ud0821ae0\">App</span></code><span data-lake-id=\"uca841a17\" id=\"uca841a17\"> 内部的 </span><code data-lake-id=\"ub502edce\" id=\"ub502edce\"><span data-lake-id=\"uec8705d2\" id=\"uec8705d2\">API</span></code></li></ul><ul list=\"u1a869bca\" data-lake-indent=\"1\"><li fid=\"u1f986291\" data-lake-id=\"cd70c22f3996fb56bd16bdb5824bfe70_li_57\" id=\"cd70c22f3996fb56bd16bdb5824bfe70_li_57\"><span data-lake-id=\"u096f7945\" id=\"u096f7945\">它们捕获所有可能改变 </span><code data-lake-id=\"ufa49fd52\" id=\"ufa49fd52\"><span data-lake-id=\"u9a881457\" id=\"u9a881457\">App</span></code><span data-lake-id=\"u72754b72\" id=\"u72754b72\"> 的途径和方法</span></li></ul><ul list=\"u9e14cfbb\" data-lake-indent=\"1\"><li fid=\"uac6d3f06\" data-lake-id=\"f18bf22919009aabf52c31b9b1848bc4_li_58\" id=\"f18bf22919009aabf52c31b9b1848bc4_li_58\"><span data-lake-id=\"u070db0e3\" id=\"u070db0e3\">它们是简单的</span><code data-lake-id=\"u225e0c6e\" id=\"u225e0c6e\"><span data-lake-id=\"u019f5529\" id=\"u019f5529\">对象</span></code><span data-lake-id=\"ub90834c4\" id=\"ub90834c4\">，并且要有 </span><code data-lake-id=\"u86e7793b\" id=\"u86e7793b\"><span data-lake-id=\"u6cb346b1\" id=\"u6cb346b1\">type属性</span></code><span data-lake-id=\"u49f9e6f6\" id=\"u49f9e6f6\"> 和 </span><code data-lake-id=\"u8127559d\" id=\"u8127559d\"><span data-lake-id=\"u4b311fa5\" id=\"u4b311fa5\">其他的一些数据属性</span></code></li></ul><ul list=\"u3248f160\" data-lake-indent=\"1\"><li fid=\"ue76d955d\" data-lake-id=\"87103ff816d271f7f0d6fdc1c1c59b88_li_59\" id=\"87103ff816d271f7f0d6fdc1c1c59b88_li_59\"><code data-lake-id=\"u4a4894a0\" id=\"u4a4894a0\"><span data-lake-id=\"u2b059ea1\" id=\"u2b059ea1\">Action</span></code><span data-lake-id=\"u39bceab9\" id=\"u39bceab9\"> 应该有一个具有语义的、直观的表示它是做什么的名字</span></li></ul><ul list=\"u624c4c0a\" data-lake-indent=\"1\"><li fid=\"ubabae022\" data-lake-id=\"1be29909049a91b53f334e875c2f9d2f_li_60\" id=\"1be29909049a91b53f334e875c2f9d2f_li_60\"><span data-lake-id=\"uc783d6d6\" id=\"uc783d6d6\">所有的</span><code data-lake-id=\"u70881f67\" id=\"u70881f67\"><span data-lake-id=\"u5fa6755c\" id=\"u5fa6755c\">store</span></code><span data-lake-id=\"u2c24ce04\" id=\"u2c24ce04\">都将接收同一个</span><code data-lake-id=\"u406d5994\" id=\"u406d5994\"><span data-lake-id=\"ue5ff1abe\" id=\"ue5ff1abe\">action</span></code><span data-lake-id=\"u96b91835\" id=\"u96b91835\">，并且通过这个 </span><code data-lake-id=\"udb0652be\" id=\"udb0652be\"><span data-lake-id=\"u3c3715fc\" id=\"u3c3715fc\">action</span></code><span data-lake-id=\"ufdbd4750\" id=\"ufdbd4750\">，</span><code data-lake-id=\"u219cb423\" id=\"u219cb423\"><span data-lake-id=\"u149edb7a\" id=\"u149edb7a\">store</span></code><span data-lake-id=\"uee45d768\" id=\"uee45d768\"> 会知道它们要清除、更新哪些数据</span></li></ul><ol list=\"u01cd2a6d\" start=\"5\"><li fid=\"uc7b6e6f8\" data-lake-id=\"09001bde296975c5b3c13fcfadc222a8_li_61\" id=\"09001bde296975c5b3c13fcfadc222a8_li_61\"><span data-lake-id=\"ucb859f32\" id=\"ucb859f32\">Views 视图</span></li></ol><ul list=\"udeca35f4\" data-lake-indent=\"1\"><li fid=\"u80650953\" data-lake-id=\"8438c6f8979c6aa5931eb03140a0c505_li_62\" id=\"8438c6f8979c6aa5931eb03140a0c505_li_62\"><code data-lake-id=\"u10a6ac54\" id=\"u10a6ac54\"><span data-lake-id=\"u8fd050c4\" id=\"u8fd050c4\">store</span></code><span data-lake-id=\"uf46d69f1\" id=\"uf46d69f1\"> 中的数据被展示在了</span><code data-lake-id=\"ub90c94c7\" id=\"ub90c94c7\"><span data-lake-id=\"u8569ac77\" id=\"u8569ac77\">view</span></code><span data-lake-id=\"u4892c2ee\" id=\"u4892c2ee\">上</span></li></ul><ul list=\"u0973c23a\" data-lake-indent=\"1\"><li fid=\"uc90c06dc\" data-lake-id=\"d81df28fec7bd6affb0f95e2fb06b9ca_li_63\" id=\"d81df28fec7bd6affb0f95e2fb06b9ca_li_63\"><code data-lake-id=\"ucf08f70b\" id=\"ucf08f70b\"><span data-lake-id=\"u0d15cb80\" id=\"u0d15cb80\">View</span></code><span data-lake-id=\"uc856d0a9\" id=\"uc856d0a9\"> 层可以使用任何框架</span></li></ul><ul list=\"ue8123faf\" data-lake-indent=\"1\"><li fid=\"u428ebba3\" data-lake-id=\"0ed7a7dd8c844ab76d4469ca33236227_li_64\" id=\"0ed7a7dd8c844ab76d4469ca33236227_li_64\"><span data-lake-id=\"uc40d12f5\" id=\"uc40d12f5\">当一个视图想要获取 </span><code data-lake-id=\"ud48017d5\" id=\"ud48017d5\"><span data-lake-id=\"u8059b90b\" id=\"u8059b90b\">store</span></code><span data-lake-id=\"u23a0490c\" id=\"u23a0490c\"> 中的数据，它必须 </span><code data-lake-id=\"udf6ad86d\" id=\"udf6ad86d\"><span data-lake-id=\"u459f0ed1\" id=\"u459f0ed1\">subscribe 订阅</span></code><span data-lake-id=\"u0220118d\" id=\"u0220118d\"> 一下该 </span><code data-lake-id=\"u20e2deb0\" id=\"u20e2deb0\"><span data-lake-id=\"ued3ac629\" id=\"ued3ac629\">store</span></code><span data-lake-id=\"u5f54e5dd\" id=\"u5f54e5dd\"> 的</span><code data-lake-id=\"ua04a5f1d\" id=\"ua04a5f1d\"><span data-lake-id=\"u9b7b8dc6\" id=\"u9b7b8dc6\">change</span></code><span data-lake-id=\"u86bc93f1\" id=\"u86bc93f1\"> 事件</span></li></ul><ul list=\"uebdd3520\" data-lake-indent=\"1\"><li fid=\"u22d99715\" data-lake-id=\"26837138a1ea83c1609d2b19f77d47a3_li_65\" id=\"26837138a1ea83c1609d2b19f77d47a3_li_65\"><span data-lake-id=\"u17226ffe\" id=\"u17226ffe\">当 </span><code data-lake-id=\"u31347e87\" id=\"u31347e87\"><span data-lake-id=\"u67589428\" id=\"u67589428\">store</span></code><span data-lake-id=\"u62b08235\" id=\"u62b08235\"> 触发了 </span><code data-lake-id=\"u017bd1ac\" id=\"u017bd1ac\"><span data-lake-id=\"u8182a1f2\" id=\"u8182a1f2\">change</span></code><span data-lake-id=\"uba05cc9c\" id=\"uba05cc9c\"> 事件，此时 </span><code data-lake-id=\"u4fa4ba5f\" id=\"u4fa4ba5f\"><span data-lake-id=\"u19797727\" id=\"u19797727\">view</span></code><span data-lake-id=\"u7831f817\" id=\"u7831f817\"> 就能得到新的数据并且重新渲染</span></li></ul><ul list=\"u95572c95\" data-lake-indent=\"1\"><li fid=\"u198ea433\" data-lake-id=\"6d223ad8b56be0dd4ef072c76044d6d0_li_66\" id=\"6d223ad8b56be0dd4ef072c76044d6d0_li_66\"><span data-lake-id=\"u9adc8813\" id=\"u9adc8813\">如果一个组件要使用 </span><code data-lake-id=\"u920bcc93\" id=\"u920bcc93\"><span data-lake-id=\"u54a7c342\" id=\"u54a7c342\">store</span></code><span data-lake-id=\"ua5c88943\" id=\"ua5c88943\">，但是没有订阅这个 </span><code data-lake-id=\"uc6fa125c\" id=\"uc6fa125c\"><span data-lake-id=\"u5324d604\" id=\"u5324d604\">store</span></code><span data-lake-id=\"u40a25fcb\" id=\"u40a25fcb\">，此时就会出错</span></li></ul><ul list=\"ufb38c2b6\" data-lake-indent=\"1\"><li fid=\"ucb6044f2\" data-lake-id=\"1c7a8b9e3de6e20de0361a8294afdf75_li_67\" id=\"1c7a8b9e3de6e20de0361a8294afdf75_li_67\"><code data-lake-id=\"ud51b87ff\" id=\"ud51b87ff\"><span data-lake-id=\"uf4184e0e\" id=\"uf4184e0e\">Action</span></code><span data-lake-id=\"u14f23803\" id=\"u14f23803\"> 最常见的产生原因是：在 </span><code data-lake-id=\"u59268dd6\" id=\"u59268dd6\"><span data-lake-id=\"u30eb9060\" id=\"u30eb9060\">App</span></code><span data-lake-id=\"ueff1c81d\" id=\"ueff1c81d\"> 中的某一个部分，因为用户的交互行为，而被此</span><code data-lake-id=\"ua74625df\" id=\"ua74625df\"><span data-lake-id=\"u83f5d09a\" id=\"u83f5d09a\">view</span></code><span data-lake-id=\"uc226a940\" id=\"uc226a940\"> </span><code data-lake-id=\"ud178daaa\" id=\"ud178daaa\"><span data-lake-id=\"ud0b9a505\" id=\"ud0b9a505\">dispatch</span></code><span data-lake-id=\"u1865803f\" id=\"u1865803f\">出来了</span></li></ul><p data-lake-id=\"229af124bfdb4f72f7476a537561ed01_p_123\" id=\"229af124bfdb4f72f7476a537561ed01_p_123\"><br></p><h3 data-lake-id=\"redux\" id=\"redux\"><span data-lake-id=\"u99cd7ca0\" id=\"u99cd7ca0\">redux</span></h3><p data-lake-id=\"22ec2a6212062c98aa0e4f653f5c3b04_p_124\" id=\"22ec2a6212062c98aa0e4f653f5c3b04_p_124\"><br></p><ul list=\"uec345208\"><li fid=\"uc7157c4b\" data-lake-id=\"daaf3287cfb23090a30ab03837039ba6_li_68\" id=\"daaf3287cfb23090a30ab03837039ba6_li_68\"><span data-lake-id=\"u445e7543\" id=\"u445e7543\">简介</span></li></ul><ul list=\"ud227ea05\" data-lake-indent=\"1\"><li fid=\"u88afa08a\" data-lake-id=\"0e2b7a5862e293bd6ae7d34df4d45ba7_li_69\" id=\"0e2b7a5862e293bd6ae7d34df4d45ba7_li_69\"><a href=\"https://redux.js.org/\" target=\"_blank\" data-lake-id=\"ua936a5b3\" id=\"ua936a5b3\"><span data-lake-id=\"u5408553a\" id=\"u5408553a\">官网</span></a></li></ul><ul list=\"u20d2f04d\" data-lake-indent=\"1\"><li fid=\"ufb9beab2\" data-lake-id=\"598a29ddd3907571cee228cae84a12aa_li_70\" id=\"598a29ddd3907571cee228cae84a12aa_li_70\"><span data-lake-id=\"u9fd08590\" id=\"u9fd08590\">Redux 就是 Flux 思想在 React 中的实现</span></li></ul><ul list=\"u45ae6f39\" data-lake-indent=\"1\"><li fid=\"ue22bd902\" data-lake-id=\"c278635e849c9c833c61a991bf99fee1_li_71\" id=\"c278635e849c9c833c61a991bf99fee1_li_71\"><span data-lake-id=\"ufa8e44e5\" id=\"ufa8e44e5\">Redux 是一个可预测状态的 Js app 容器</span></li></ul><ul list=\"uf7941f47\" data-lake-indent=\"1\"><li fid=\"u56415f47\" data-lake-id=\"e5f3a479b0dfc47a93dd8ef1a6246917_li_72\" id=\"e5f3a479b0dfc47a93dd8ef1a6246917_li_72\"><code data-lake-id=\"ufdebe51f\" id=\"ufdebe51f\"><a href=\"https://github.com/reactjs/redux/tree/master/examples\" target=\"_blank\" data-lake-id=\"u1ae44bad\" id=\"u1ae44bad\"><span data-lake-id=\"u76da5849\" id=\"u76da5849\">通过例子来学习redux</span></a></code></li></ul><ul list=\"u196b6c96\"><li fid=\"u621227a6\" data-lake-id=\"09a6b782127c131a87e69ae44fcaf412_li_73\" id=\"09a6b782127c131a87e69ae44fcaf412_li_73\"><span data-lake-id=\"u2b3c01a1\" id=\"u2b3c01a1\">Redux 创建的步骤</span></li></ul><ul list=\"ucc07e7f9\" data-lake-indent=\"1\"><li fid=\"u069707b0\" data-lake-id=\"0a2760adee5eb794b0815c6a04f7d57c_li_74\" id=\"0a2760adee5eb794b0815c6a04f7d57c_li_74\"><span data-lake-id=\"u396cd819\" id=\"u396cd819\">设置一个 </span><code data-lake-id=\"u60a3525e\" id=\"u60a3525e\"><span data-lake-id=\"ucd25bfe7\" id=\"ucd25bfe7\">reducer</span></code><span data-lake-id=\"ub520e2a4\" id=\"ub520e2a4\">；</span></li></ul><ul list=\"u5a3736f7\" data-lake-indent=\"1\"><li fid=\"u852d351f\" data-lake-id=\"31cadc53d63b73cc00e9ad99701f6df0_li_75\" id=\"31cadc53d63b73cc00e9ad99701f6df0_li_75\"><span data-lake-id=\"uc3632371\" id=\"uc3632371\">创建一个</span><code data-lake-id=\"u5b5b7834\" id=\"u5b5b7834\"><span data-lake-id=\"uf724946c\" id=\"uf724946c\">store</span></code><span data-lake-id=\"uffc1c1cc\" id=\"uffc1c1cc\">，</span><code data-lake-id=\"uc9a5e0ca\" id=\"uc9a5e0ca\"><span data-lake-id=\"u831377ab\" id=\"u831377ab\">Redux.createStore(reducer)</span></code></li></ul><ul list=\"u09738fce\" data-lake-indent=\"1\"><li fid=\"ubdaab36c\" data-lake-id=\"493d1eb8e4484eaaaf4611e92b2d527f_li_76\" id=\"493d1eb8e4484eaaaf4611e92b2d527f_li_76\"><span data-lake-id=\"ub0564fc3\" id=\"ub0564fc3\">创建 </span><code data-lake-id=\"ue65c736c\" id=\"ue65c736c\"><span data-lake-id=\"ua8f6cdc6\" id=\"ua8f6cdc6\">render</span></code><span data-lake-id=\"u80db093a\" id=\"u80db093a\"> 函数</span></li></ul><ul list=\"ubaa8e49d\" data-lake-indent=\"1\"><li fid=\"u09425a96\" data-lake-id=\"c5d079b34673fb38291cae2baf4efc06_li_77\" id=\"c5d079b34673fb38291cae2baf4efc06_li_77\"><span data-lake-id=\"u9b0b1268\" id=\"u9b0b1268\">注册 </span><code data-lake-id=\"uef9a0476\" id=\"uef9a0476\"><span data-lake-id=\"uedb344b1\" id=\"uedb344b1\">render</span></code><span data-lake-id=\"u1629071a\" id=\"u1629071a\">，</span><code data-lake-id=\"u46c7b8d8\" id=\"u46c7b8d8\"><span data-lake-id=\"u80686a73\" id=\"u80686a73\">store.subscribe(render)</span></code></li></ul><ul list=\"u37538313\" data-lake-indent=\"1\"><li fid=\"u467217c3\" data-lake-id=\"5d050fb5810f453b301c41598ed8eef0_li_78\" id=\"5d050fb5810f453b301c41598ed8eef0_li_78\"><span data-lake-id=\"u89bf29bb\" id=\"u89bf29bb\">监听，此时要记得 </span><code data-lake-id=\"u34cb6f4f\" id=\"u34cb6f4f\"><span data-lake-id=\"ua24714cf\" id=\"ua24714cf\">store.dispatch(action)</span></code><span data-lake-id=\"u44300c6d\" id=\"u44300c6d\">，不是直接修改</span><code data-lake-id=\"u87eb4c0a\" id=\"u87eb4c0a\"><span data-lake-id=\"u903b508b\" id=\"u903b508b\">store</span></code></li></ul><p data-lake-id=\"58e4bdcd35d7c4cee2e913ca95d454c8_p_125\" id=\"58e4bdcd35d7c4cee2e913ca95d454c8_p_125\"><br></p><h3 data-lake-id=\"React-Redux\" id=\"React-Redux\"><span data-lake-id=\"u54b2990a\" id=\"u54b2990a\">React-Redux</span></h3><p data-lake-id=\"037180a84ec63c01b315559ed5a15c1d_p_126\" id=\"037180a84ec63c01b315559ed5a15c1d_p_126\"><br></p><ul list=\"uba4df338\"><li fid=\"u92d03eed\" data-lake-id=\"53964045dcc316c83281b4de60f5d105_li_79\" id=\"53964045dcc316c83281b4de60f5d105_li_79\"><span data-lake-id=\"u3076a5e7\" id=\"u3076a5e7\">简介</span></li></ul><ul list=\"u8aa952bc\" data-lake-indent=\"1\"><li fid=\"uc8eea96d\" data-lake-id=\"2eebf78797fa90bb3455105ddee8485f_li_80\" id=\"2eebf78797fa90bb3455105ddee8485f_li_80\"><span data-lake-id=\"u23755398\" id=\"u23755398\">将 </span><code data-lake-id=\"uf58b838c\" id=\"uf58b838c\"><span data-lake-id=\"ud541ee1c\" id=\"ud541ee1c\">react</span></code><span data-lake-id=\"u6c1bb384\" id=\"u6c1bb384\"> 和 </span><code data-lake-id=\"ue8cd087a\" id=\"ue8cd087a\"><span data-lake-id=\"uefcd9151\" id=\"uefcd9151\">redux</span></code><span data-lake-id=\"ud1df09de\" id=\"ud1df09de\"> 合并起来，可以让任何组件在任何地方看见 </span><code data-lake-id=\"uaed13638\" id=\"uaed13638\"><span data-lake-id=\"u24ad7e2e\" id=\"u24ad7e2e\">store</span></code></li></ul><ul list=\"ufff2bac3\" data-lake-indent=\"1\"><li fid=\"ufd3fdf88\" data-lake-id=\"0a6251f7cc31738215d82fea0132235d_li_81\" id=\"0a6251f7cc31738215d82fea0132235d_li_81\"><a href=\"https://github.com/reactjs/react-redux/tree/master/docs\" target=\"_blank\" data-lake-id=\"ub6806928\" id=\"ub6806928\"><span data-lake-id=\"u06df1d8b\" id=\"u06df1d8b\">官方文档</span></a></li></ul><ul list=\"u9960b571\" data-lake-indent=\"1\"><li fid=\"udc7fc739\" data-lake-id=\"be34c72310cc48508b369854b430ce88_li_82\" id=\"be34c72310cc48508b369854b430ce88_li_82\"><code data-lake-id=\"uc7b83081\" id=\"uc7b83081\"><span data-lake-id=\"ucce297ee\" id=\"ucce297ee\">React-Redux</span></code><span data-lake-id=\"ucc24a935\" id=\"ucc24a935\"> 给我们提供了：</span><code data-lake-id=\"u4e13cea4\" id=\"u4e13cea4\"><span data-lake-id=\"u27d3af7d\" id=\"u27d3af7d\">Provider组件</span></code><span data-lake-id=\"u80d84f51\" id=\"u80d84f51\">，</span><code data-lake-id=\"uf7719502\" id=\"uf7719502\"><span data-lake-id=\"u876a009b\" id=\"u876a009b\">connect函数</span></code></li></ul><ul list=\"u6bf79cb8\"><li fid=\"u431af75f\" data-lake-id=\"8cf754fc48ef3c41e16eb1c70762c5f4_li_83\" id=\"8cf754fc48ef3c41e16eb1c70762c5f4_li_83\"><span data-lake-id=\"uc6da580a\" id=\"uc6da580a\">Provider 组件</span></li></ul><p data-lake-id=\"218526f010699898c9b5afe5bee78564_p_127\" id=\"218526f010699898c9b5afe5bee78564_p_127\"><br></p><blockquote data-lake-id=\"u24618abe\" id=\"u24618abe\"><p data-lake-id=\"edb6c13be346e5eb3efcd46e9cfee7a7_p_128\" id=\"edb6c13be346e5eb3efcd46e9cfee7a7_p_128\"><span data-lake-id=\"u3fe93e07\" id=\"u3fe93e07\">1、使用 </span><code data-lake-id=\"u3c2c9233\" id=\"u3c2c9233\"><span data-lake-id=\"u0e7f23f6\" id=\"u0e7f23f6\">react-redux</span></code><span data-lake-id=\"udc988270\" id=\"udc988270\"> 提供的 </span><code data-lake-id=\"ufaf10397\" id=\"ufaf10397\"><span data-lake-id=\"ube77f718\" id=\"ube77f718\">Provider</span></code><span data-lake-id=\"u3f89c49d\" id=\"u3f89c49d\"> 组件传递 </span><code data-lake-id=\"u3c0de0e5\" id=\"u3c0de0e5\"><span data-lake-id=\"u4c61d5ed\" id=\"u4c61d5ed\">store</span></code><span data-lake-id=\"ub60d862c\" id=\"ub60d862c\"> 上下文之后，</span><code data-lake-id=\"u92e17e87\" id=\"u92e17e87\"><span data-lake-id=\"u6028774e\" id=\"u6028774e\">包裹在其中的所有组件</span></code><span data-lake-id=\"ud9d83f4f\" id=\"ud9d83f4f\"> 全都可以识别这个上下文</span></p></blockquote><p data-lake-id=\"95d2789c2734df969b06fab66880adbb_p_129\" id=\"95d2789c2734df969b06fab66880adbb_p_129\"><br></p><blockquote data-lake-id=\"ubc5820f3\" id=\"ubc5820f3\"><p data-lake-id=\"a047f24c0cab49c2359b17c649238685_p_130\" id=\"a047f24c0cab49c2359b17c649238685_p_130\"><span data-lake-id=\"u282b76ca\" id=\"u282b76ca\">2、在 </span><code data-lake-id=\"ua922c427\" id=\"ua922c427\"><span data-lake-id=\"u2b7f94f7\" id=\"u2b7f94f7\">Provider</span></code><span data-lake-id=\"uddba87a5\" id=\"uddba87a5\"> 组件内部的自定义组件可以使用 </span><code data-lake-id=\"uc746cd14\" id=\"uc746cd14\"><span data-lake-id=\"uba8a0a6d\" id=\"uba8a0a6d\">connect()</span></code><span data-lake-id=\"u9cd36159\" id=\"u9cd36159\"> 函数，但是在其外部的不可使用</span></p></blockquote><p data-lake-id=\"9478673e50b8f1aa6afefb8412111c6e_p_131\" id=\"9478673e50b8f1aa6afefb8412111c6e_p_131\"><br></p><ul list=\"uede81c0e\"><li fid=\"u834b8697\" data-lake-id=\"33971ca5f4c5f70611f89722d2ce6f85_li_84\" id=\"33971ca5f4c5f70611f89722d2ce6f85_li_84\"><span data-lake-id=\"ud08bfba7\" id=\"ud08bfba7\">connect 函数</span></li></ul><p data-lake-id=\"2f49e0ddefda4b24fada2a6edd68033d_p_132\" id=\"2f49e0ddefda4b24fada2a6edd68033d_p_132\"><br></p><blockquote data-lake-id=\"u711f07f1\" id=\"u711f07f1\"><p data-lake-id=\"2d46909b07b73178efe65da1fa118030_p_133\" id=\"2d46909b07b73178efe65da1fa118030_p_133\"><span data-lake-id=\"u4a84dcdc\" id=\"u4a84dcdc\">1、将 </span><code data-lake-id=\"uf1138f31\" id=\"uf1138f31\"><span data-lake-id=\"u02c01eed\" id=\"u02c01eed\">React组件</span></code><span data-lake-id=\"u3965b73e\" id=\"u3965b73e\"> 和 </span><code data-lake-id=\"u71301ba8\" id=\"u71301ba8\"><span data-lake-id=\"ue77df003\" id=\"ue77df003\">Redux</span></code><span data-lake-id=\"u6a43358b\" id=\"u6a43358b\"> 的 </span><code data-lake-id=\"u346827be\" id=\"u346827be\"><span data-lake-id=\"uc3c010f3\" id=\"uc3c010f3\">store</span></code><span data-lake-id=\"u40f8c536\" id=\"u40f8c536\"> 进行连接</span></p><p data-lake-id=\"411d894fb1d3309771083dc436b4bbed_p_134\" id=\"411d894fb1d3309771083dc436b4bbed_p_134\"><span data-lake-id=\"u476f6f2b\" id=\"u476f6f2b\">2、</span><code data-lake-id=\"u983fa76a\" id=\"u983fa76a\"><span data-lake-id=\"ua240c0e3\" id=\"ua240c0e3\">connect</span></code><span data-lake-id=\"u8158bb10\" id=\"u8158bb10\"> 提供了一个很方便的 </span><code data-lake-id=\"u972879b8\" id=\"u972879b8\"><span data-lake-id=\"u4e4d8997\" id=\"u4e4d8997\">API</span></code><span data-lake-id=\"ue8e42dd4\" id=\"ue8e42dd4\"> 能够适应绝大多数工作</span></p><p data-lake-id=\"5b35a243a0cce51ac274d81342152d6f_p_135\" id=\"5b35a243a0cce51ac274d81342152d6f_p_135\"><span data-lake-id=\"ubf010e88\" id=\"ubf010e88\">3、它没有更改你传进来的类，反而会返回一个已经连接好的新类</span></p><p data-lake-id=\"b60fcdba02dd406495e198d0e969b5f8_p_136\" id=\"b60fcdba02dd406495e198d0e969b5f8_p_136\"><span data-lake-id=\"u40ff8fe9\" id=\"u40ff8fe9\">4、提供了两个参数：</span><code data-lake-id=\"u5b16d8f5\" id=\"u5b16d8f5\"><span data-lake-id=\"uddec1295\" id=\"uddec1295\">mapStateToProps</span></code><span data-lake-id=\"ud6979aa1\" id=\"ud6979aa1\">, </span><code data-lake-id=\"u2244c50f\" id=\"u2244c50f\"><span data-lake-id=\"ua7a740ec\" id=\"ua7a740ec\">mapDispatchToProps</span></code></p></blockquote><p data-lake-id=\"f474938634c47815c9cafa361ce29c41_p_137\" id=\"f474938634c47815c9cafa361ce29c41_p_137\"><br></p><ul list=\"u498a017b\"><li fid=\"ub7857d93\" data-lake-id=\"12c6bd0cc71593be442f6081247a3024_li_85\" id=\"12c6bd0cc71593be442f6081247a3024_li_85\"><span data-lake-id=\"uad4fea11\" id=\"uad4fea11\">mapStateToProps</span></li></ul><p data-lake-id=\"b1543dbd8d735319a0032dfd0a528e84_p_138\" id=\"b1543dbd8d735319a0032dfd0a528e84_p_138\"><br></p><blockquote data-lake-id=\"u39809bd3\" id=\"u39809bd3\"><p data-lake-id=\"7c3f01074bd2e6381b99f4ccfda7d6d9_p_139\" id=\"7c3f01074bd2e6381b99f4ccfda7d6d9_p_139\"><span data-lake-id=\"u19f000cd\" id=\"u19f000cd\">1、如果传入</span><code data-lake-id=\"u5191d585\" id=\"u5191d585\"><span data-lake-id=\"u18f796a7\" id=\"u18f796a7\">mapStateToProps</span></code><span data-lake-id=\"u1b0b7dc0\" id=\"u1b0b7dc0\">，此时这个组件将订阅 </span><code data-lake-id=\"u7eb16569\" id=\"u7eb16569\"><span data-lake-id=\"u4d921bec\" id=\"u4d921bec\">Redux</span></code><span data-lake-id=\"u0bd86066\" id=\"u0bd86066\"> 中 </span><code data-lake-id=\"ufd0291c9\" id=\"ufd0291c9\"><span data-lake-id=\"uc13558a3\" id=\"uc13558a3\">store</span></code><span data-lake-id=\"u3ea338a2\" id=\"u3ea338a2\"> 的更新信息；</span></p><p data-lake-id=\"f5b5ed4a73212a557ba72643247636b0_p_140\" id=\"f5b5ed4a73212a557ba72643247636b0_p_140\"><span data-lake-id=\"u213dd73d\" id=\"u213dd73d\">2、这意味着无论任何时候 </span><code data-lake-id=\"u1edd0446\" id=\"u1edd0446\"><span data-lake-id=\"u1d893b5f\" id=\"u1d893b5f\">store</span></code><span data-lake-id=\"u855e9b58\" id=\"u855e9b58\"> 被更改了，</span><code data-lake-id=\"u6dc1c61a\" id=\"u6dc1c61a\"><span data-lake-id=\"u5e2827ff\" id=\"u5e2827ff\">mapStateToProps</span></code><span data-lake-id=\"uf9f4b0cb\" id=\"uf9f4b0cb\"> 函数都将会被调用，</span><code data-lake-id=\"u18746a34\" id=\"u18746a34\"><span data-lake-id=\"ub5f87a70\" id=\"ub5f87a70\">mapStateToProps</span></code><span data-lake-id=\"ueb092c3f\" id=\"ueb092c3f\"> 的返回值必须是一个 </span><code data-lake-id=\"u140fc452\" id=\"u140fc452\"><span data-lake-id=\"u648263fc\" id=\"u648263fc\">Object</span></code><span data-lake-id=\"ud94a30af\" id=\"ud94a30af\">；</span></p><p data-lake-id=\"74fddfef7a0c395d16543c76289d3625_p_141\" id=\"74fddfef7a0c395d16543c76289d3625_p_141\"><span data-lake-id=\"u6ee6b7b5\" id=\"u6ee6b7b5\">3、这个 </span><code data-lake-id=\"uf0b08667\" id=\"uf0b08667\"><span data-lake-id=\"u9ae2f120\" id=\"u9ae2f120\">Object</span></code><span data-lake-id=\"u35060fc5\" id=\"u35060fc5\"> 将与组件的 </span><code data-lake-id=\"ud2f1af1a\" id=\"ud2f1af1a\"><span data-lake-id=\"uc32864b9\" id=\"uc32864b9\">props</span></code><span data-lake-id=\"u6679a6bf\" id=\"u6679a6bf\"> 融合，也就是说，这个返回的 </span><code data-lake-id=\"u751b996c\" id=\"u751b996c\"><span data-lake-id=\"ue415957d\" id=\"ue415957d\">Object</span></code><span data-lake-id=\"u3e337c1d\" id=\"u3e337c1d\"> 中的 </span><code data-lake-id=\"ubbc62f4c\" id=\"ubbc62f4c\"><span data-lake-id=\"u5e6538f2\" id=\"u5e6538f2\">key</span></code><span data-lake-id=\"uaf03af0b\" id=\"uaf03af0b\"> 将自动成为组件的 </span><code data-lake-id=\"u657e1820\" id=\"u657e1820\"><span data-lake-id=\"u4c136814\" id=\"u4c136814\">props</span></code><span data-lake-id=\"ud80ab208\" id=\"ud80ab208\"> 中的成员</span></p><p data-lake-id=\"0997d6e4317d1ff3f3c8753a66ae5b3d_p_142\" id=\"0997d6e4317d1ff3f3c8753a66ae5b3d_p_142\"><span data-lake-id=\"u8803cb04\" id=\"u8803cb04\">4、如果不想订阅 </span><code data-lake-id=\"ub382d6ae\" id=\"ub382d6ae\"><span data-lake-id=\"u06d7200d\" id=\"u06d7200d\">store</span></code><span data-lake-id=\"udcfe1e0e\" id=\"udcfe1e0e\"> 的更新，此时可以不传递这个参数，采用 </span><code data-lake-id=\"u08109b19\" id=\"u08109b19\"><span data-lake-id=\"u1072f8ac\" id=\"u1072f8ac\">null</span></code><span data-lake-id=\"uc7056919\" id=\"uc7056919\"> 占位</span></p></blockquote><p data-lake-id=\"ecbf2a7b370d7c1f11409dc2caadd396_p_143\" id=\"ecbf2a7b370d7c1f11409dc2caadd396_p_143\"><br></p><ul list=\"u57048d9c\"><li fid=\"udbdf3d96\" data-lake-id=\"deccc3b0b1e1cd3396a0dca264792ef8_li_86\" id=\"deccc3b0b1e1cd3396a0dca264792ef8_li_86\"><span data-lake-id=\"u3ae6f49f\" id=\"u3ae6f49f\">mapDispatchToProps</span></li></ul><p data-lake-id=\"4f67eb9790b6288e2156994dc5ad2f6e_p_144\" id=\"4f67eb9790b6288e2156994dc5ad2f6e_p_144\"><br></p><blockquote data-lake-id=\"ub82b21d2\" id=\"ub82b21d2\"><p data-lake-id=\"3410116be3e38dc7d0322f30c0ba9c6a_p_145\" id=\"3410116be3e38dc7d0322f30c0ba9c6a_p_145\"><span data-lake-id=\"u9d4959b3\" id=\"u9d4959b3\">如果向 </span><code data-lake-id=\"u1524b9d4\" id=\"u1524b9d4\"><span data-lake-id=\"u4bd0367c\" id=\"u4bd0367c\">connect</span></code><span data-lake-id=\"u1c6552be\" id=\"u1c6552be\"> 函数中传入了第二个参数，并且是一个 </span><code data-lake-id=\"u79cced24\" id=\"u79cced24\"><span data-lake-id=\"u37db0c3e\" id=\"u37db0c3e\">函数</span></code><span data-lake-id=\"u2cb38d50\" id=\"u2cb38d50\">，那么这个函数将获得</span><code data-lake-id=\"u9f72b084\" id=\"u9f72b084\"><span data-lake-id=\"ua8736058\" id=\"ua8736058\">dispatch</span></code><span data-lake-id=\"u2c689bc5\" id=\"u2c689bc5\"> 方法，该方法可以通过 </span><code data-lake-id=\"ude2bd303\" id=\"ude2bd303\"><span data-lake-id=\"u26021c19\" id=\"u26021c19\">emit action</span></code><span data-lake-id=\"u3562fc28\" id=\"u3562fc28\">，间接的导致 </span><code data-lake-id=\"u4a446d16\" id=\"u4a446d16\"><span data-lake-id=\"u59b7177f\" id=\"u59b7177f\">state</span></code><span data-lake-id=\"u58600631\" id=\"u58600631\"> 的改变</span></p><p data-lake-id=\"0724c87c4628f2f949658d9e8fdc3b86_p_146\" id=\"0724c87c4628f2f949658d9e8fdc3b86_p_146\"><span data-lake-id=\"uec024ded\" id=\"uec024ded\">可以使用 </span><code data-lake-id=\"uacc02ca2\" id=\"uacc02ca2\"><span data-lake-id=\"u06938737\" id=\"u06938737\">bindActionCreators()</span></code><span data-lake-id=\"uc0d74e9f\" id=\"uc0d74e9f\"> 方法轻松的将 </span><code data-lake-id=\"ufc7e8609\" id=\"ufc7e8609\"><span data-lake-id=\"ufb6d91bd\" id=\"ufb6d91bd\">Action creator</span></code><span data-lake-id=\"uf359d004\" id=\"uf359d004\">(返回 </span><code data-lake-id=\"u3bce00f4\" id=\"u3bce00f4\"><span data-lake-id=\"u3d34b23f\" id=\"u3d34b23f\">action</span></code><span data-lake-id=\"u537f0ae4\" id=\"u537f0ae4\"> 的函数)接口和 </span><code data-lake-id=\"u0cdc56e3\" id=\"u0cdc56e3\"><span data-lake-id=\"u5c0159c8\" id=\"u5c0159c8\">dispatch</span></code><span data-lake-id=\"u2a64a3b8\" id=\"u2a64a3b8\"> 进行绑定</span></p></blockquote><p data-lake-id=\"7e0f4c425a469a407bb6094b1048bd2a_p_147\" id=\"7e0f4c425a469a407bb6094b1048bd2a_p_147\"><br></p><ul list=\"u4bcaa75f\"><li fid=\"u1bb0abeb\" data-lake-id=\"316367d495deb7ee0a348459cb5a064c_li_87\" id=\"316367d495deb7ee0a348459cb5a064c_li_87\"><span data-lake-id=\"uaafd18f7\" id=\"uaafd18f7\">书写规则</span></li></ul><p data-lake-id=\"fd8dd5e29cc68951de3711296b3ec5da_p_148\" id=\"fd8dd5e29cc68951de3711296b3ec5da_p_148\"><br></p><blockquote data-lake-id=\"udf13a027\" id=\"udf13a027\"><p data-lake-id=\"2f68d46e3c54816c1e87bba27e8adb55_p_149\" id=\"2f68d46e3c54816c1e87bba27e8adb55_p_149\"><span data-lake-id=\"uc0a60439\" id=\"uc0a60439\">index.js</span></p></blockquote><p data-lake-id=\"66d65f3a5b8e94e695d6df7f3989a5f6_p_150\" id=\"66d65f3a5b8e94e695d6df7f3989a5f6_p_150\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22jsx%22%2C%22code%22%3A%22import%20React%20from%20%5C%22react%5C%22%3B%5Cnimport%20%7B%20render%20%7D%20from%20%5C%22react-dom%5C%22%3B%5Cnimport%20%7B%20createStore%20%7D%20from%20%5C%22redux%5C%22%3B%5Cnimport%20%7B%20Provider%20%7D%20from%20%5C%22react-redux%5C%22%3B%5Cnimport%20App%20from%20%5C%22.%2Fcontainers%2FApp%5C%22%3B%5Cnimport%20reducer%20from%20%5C%22.%2Freducers%5C%22%3B%5Cn%5Cnconst%20store%20%3D%20createStore(reducer)%3B%5Cnrender(%5Cn%20%20%3CProvider%20store%3D%7Bstore%7D%3E%5Cn%20%20%20%20%3CApp%20%2F%3E%5Cn%20%20%3C%2FProvider%3E%2C%5Cn%20%20document.getElementById(%5C%22root%5C%22)%5Cn)%3B%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%2270f28a86%22%7D\"></card><p data-lake-id=\"132b72ac11decfdb5c7171cc51240ee2_p_151\" id=\"132b72ac11decfdb5c7171cc51240ee2_p_151\"><br></p><blockquote data-lake-id=\"u40409ccd\" id=\"u40409ccd\"><p data-lake-id=\"42a55f8864e3cd82cbdca8e17b2e603d_p_152\" id=\"42a55f8864e3cd82cbdca8e17b2e603d_p_152\"><span data-lake-id=\"ub5ea558b\" id=\"ub5ea558b\">App.js</span></p></blockquote><p data-lake-id=\"d6aad01cce7555ee21c55669cd02505b_p_153\" id=\"d6aad01cce7555ee21c55669cd02505b_p_153\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22jsx%22%2C%22code%22%3A%22import%20React%20from%20%5C%22react%5C%22%3B%5Cnimport%20%7B%20connect%20%7D%20from%20%5C%22react-redux%5C%22%3B%5Cnimport%20*%20as%20actions%20from%20%5C%22.%2Factions%5C%22%3B%5Cn%5Cnclass%20App%20extends%20React.Component%20%7B%5Cn%20%20constructor(props)%20%7B%5Cn%20%20%20%20super()%3B%5Cn%20%20%20%20console.log(props)%3B%5Cn%20%20%20%20%2F%2F%20props%3A%20%7B%20r%3A%200%2C%20g%3A%200%2C%20b%3A%200%2C%20actions%3A%20%E8%AE%B8%E5%A4%9A%E6%96%B9%E6%B3%95%20%7D%5Cn%20%20%7D%5Cn%20%20render()%20%7B%5Cn%20%20%20%20return%20%3Cdiv%3E%E8%BF%99%E6%98%AFApp%E7%BB%84%E4%BB%B6%3C%2Fdiv%3E%3B%5Cn%20%20%7D%5Cn%7D%5Cnconst%20mapStateToProps%20%3D%20state%20%3D%3E%20%7B%5Cn%20%20return%20%7B%5Cn%20%20%20%20r%3A%20state.r%2C%5Cn%20%20%20%20g%3A%20state.g%2C%5Cn%20%20%20%20b%3A%20state.b%5Cn%20%20%7D%3B%5Cn%7D%3B%5Cnconst%20mapDispatchToProps%20%3D%20dispatch%20%3D%3E%20%7B%5Cn%20%20return%20%7B%5Cn%20%20%20%20actions%3A%20bindActionCreators(actions%2C%20dispatch)%5Cn%20%20%7D%3B%5Cn%7D%3B%5Cnexport%20default%20connect(%5Cn%20%20mapStateToProps%2C%5Cn%20%20mapDispatchToProps%5Cn)(App)%3B%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22d88be5f3%22%7D\"></card><p data-lake-id=\"ce225d72190bb5bc96c7675d82aeb159_p_154\" id=\"ce225d72190bb5bc96c7675d82aeb159_p_154\"><br></p><blockquote data-lake-id=\"u7b7db3f4\" id=\"u7b7db3f4\"><p data-lake-id=\"9849a50a8c284481ccf94a2de7186dd8_p_155\" id=\"9849a50a8c284481ccf94a2de7186dd8_p_155\"><span data-lake-id=\"u4dcba6b0\" id=\"u4dcba6b0\">reducer.js</span></p></blockquote><p data-lake-id=\"f055c5eaf69ffd994712ed724c58c065_p_156\" id=\"f055c5eaf69ffd994712ed724c58c065_p_156\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22jsx%22%2C%22code%22%3A%22export%20default%20(state%2C%20action)%20%3D%3E%20%7B%5Cn%20%20if%20(state%20%3D%3D%20undefined)%20%7B%5Cn%20%20%20%20state%20%3D%20%7B%20r%3A%200%2C%20g%3A%200%2C%20b%3A%200%20%7D%3B%5Cn%20%20%7D%5Cn%20%20if%20(action.type%20%3D%3D%20%5C%22ADD%5C%22)%20%7B%5Cn%20%20%20%20return%20%7B%5Cn%20%20%20%20%20%20...state%2C%5Cn%20%20%20%20%20%20r%3A%20state.r%20%2B%201%5Cn%20%20%20%20%7D%3B%5Cn%20%20%7D%5Cn%20%20return%20state%3B%5Cn%7D%3B%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22e6dceb85%22%7D\"></card><p data-lake-id=\"b68200708c960efa87d95f272f623cc5_p_157\" id=\"b68200708c960efa87d95f272f623cc5_p_157\"><br></p><blockquote data-lake-id=\"u9d042576\" id=\"u9d042576\"><p data-lake-id=\"6f8486bb6d2b6d43f6d3f3fab13b5160_p_158\" id=\"6f8486bb6d2b6d43f6d3f3fab13b5160_p_158\"><span data-lake-id=\"u2f819ea8\" id=\"u2f819ea8\">actions.js</span></p></blockquote><p data-lake-id=\"e2e19f3807b1a26de6bfd8d5d8f8346a_p_159\" id=\"e2e19f3807b1a26de6bfd8d5d8f8346a_p_159\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22jsx%22%2C%22code%22%3A%22export%20const%20ADD%20%3D%20()%20%3D%3E%20%7B%20%5C%22type%5C%22%3A%20%5C%22ADD%5C%22%20%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22f8579798%22%7D\"></card><p data-lake-id=\"b0d1fb541c750b95e1b76e1c686fea12_p_160\" id=\"b0d1fb541c750b95e1b76e1c686fea12_p_160\"><br></p><h3 data-lake-id=\"b51b03f9\" id=\"b51b03f9\"><span data-lake-id=\"u09e7342a\" id=\"u09e7342a\">组件内部的 state 和全局的 state</span></h3><p data-lake-id=\"651309cbfbecc7836ba00bb10131bced_p_161\" id=\"651309cbfbecc7836ba00bb10131bced_p_161\"><br></p><blockquote data-lake-id=\"ue0fdbced\" id=\"ue0fdbced\"><p data-lake-id=\"18bfc01a76dad06d1177869002bb25fe_p_162\" id=\"18bfc01a76dad06d1177869002bb25fe_p_162\"><span data-lake-id=\"u835699a0\" id=\"u835699a0\">组件的数据三兄弟：</span><code data-lake-id=\"ud67440d3\" id=\"ud67440d3\"><span data-lake-id=\"u67a36e10\" id=\"u67a36e10\">state</span></code><span data-lake-id=\"u968e5668\" id=\"u968e5668\">, </span><code data-lake-id=\"u3fb56272\" id=\"u3fb56272\"><span data-lake-id=\"u11b6b280\" id=\"u11b6b280\">props</span></code><span data-lake-id=\"u6d1055bf\" id=\"u6d1055bf\">, </span><code data-lake-id=\"u77f01d61\" id=\"u77f01d61\"><span data-lake-id=\"ua1776694\" id=\"ua1776694\">context</span></code><span data-lake-id=\"ucf519a29\" id=\"ucf519a29\"> 不管是谁发生改变，都会引发 </span><code data-lake-id=\"uaa4193e2\" id=\"uaa4193e2\"><span data-lake-id=\"ud1f53166\" id=\"ud1f53166\">render()</span></code><span data-lake-id=\"ud4dcff50\" id=\"ud4dcff50\"> 执行，视图会被重绘。但是，构造函数不会被重新执行。所以不管基于什么理由，都不需要将全局的状态，用自己组件的 </span><code data-lake-id=\"u407742f2\" id=\"u407742f2\"><span data-lake-id=\"u4d30c069\" id=\"u4d30c069\">state</span></code><span data-lake-id=\"u1f21d61b\" id=\"u1f21d61b\"> 接收，而仅需要用</span><code data-lake-id=\"u8f719f17\" id=\"u8f719f17\"><span data-lake-id=\"u3b479d1a\" id=\"u3b479d1a\">connect</span></code><span data-lake-id=\"u87914d42\" id=\"u87914d42\">连接一下全局</span><code data-lake-id=\"u49cf2b0a\" id=\"u49cf2b0a\"><span data-lake-id=\"u86ca6b70\" id=\"u86ca6b70\">store</span></code><span data-lake-id=\"ue755214d\" id=\"ue755214d\">，然后使用</span><code data-lake-id=\"u104809ab\" id=\"u104809ab\"><span data-lake-id=\"u81e84970\" id=\"u81e84970\">this.props.**</span></code><span data-lake-id=\"uec36f835\" id=\"uec36f835\">即可。</span></p></blockquote><p data-lake-id=\"788cb192a755349940f6d50adab26c47_p_163\" id=\"788cb192a755349940f6d50adab26c47_p_163\"><br></p><h3 data-lake-id=\"c798dcc0\" id=\"c798dcc0\"><span data-lake-id=\"uce5a7e3e\" id=\"uce5a7e3e\">reducer 模块化</span></h3><p data-lake-id=\"5a4f541457331ccb8d780e99c0cac44a_p_164\" id=\"5a4f541457331ccb8d780e99c0cac44a_p_164\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22import%20%7B%20combineReducers%20%7D%20from%20%5C%22redux%5C%22%3B%5Cnimport%20todoReducers%20from%20%5C%22.%2FtodoReducer.js%5C%22%3B%20%2F%2F%20%E6%A0%87%E5%87%86reducer%5Cn%5Cnexport%20default%20combineReducers(%7B%5Cn%20%20todoReducers%5Cn%7D)%3B%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%2249b5c88f%22%7D\"></card><p data-lake-id=\"f121a14e6e189b9063748754f0838cd7_p_165\" id=\"f121a14e6e189b9063748754f0838cd7_p_165\"><br></p><h3 data-lake-id=\"redux-logger\" id=\"redux-logger\"><span data-lake-id=\"u4f1939c4\" id=\"u4f1939c4\">redux-logger</span></h3><p data-lake-id=\"a964985d3a0719f64ee67db676d49377_p_166\" id=\"a964985d3a0719f64ee67db676d49377_p_166\"><br></p><blockquote data-lake-id=\"u19a0488d\" id=\"u19a0488d\"><p data-lake-id=\"20aa583e1d9ddc4190ffc09f4f2f6cd0_p_167\" id=\"20aa583e1d9ddc4190ffc09f4f2f6cd0_p_167\"><span data-lake-id=\"u18f6f7cf\" id=\"u18f6f7cf\">打印 redux log</span></p></blockquote><p data-lake-id=\"f1c8ecc8b9af30fe449b5f1cb67a7baf_p_168\" id=\"f1c8ecc8b9af30fe449b5f1cb67a7baf_p_168\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22import%20%7B%20createStore%2C%20applyMiddleware%20%7D%20from%20%5C%22redux%5C%22%3B%5Cnimport%20%7B%20createLogger%20%7D%20from%20%5C%22redux-logger%5C%22%3B%5Cnimport%20reducer%20from%20%5C%22.%2Freducers%2Findex.js%5C%22%3B%5Cnlet%20store%20%3D%20createStore(reducer%2C%20applyMiddleware(createLogger()))%3B%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%2256561ae0%22%7D\"></card><p data-lake-id=\"c05a4e07798be0757743d22bc9d5b835_p_169\" id=\"c05a4e07798be0757743d22bc9d5b835_p_169\"><br></p><h3 data-lake-id=\"redux-thunk\" id=\"redux-thunk\"><span data-lake-id=\"u0ee51f3c\" id=\"u0ee51f3c\">redux-thunk</span></h3><p data-lake-id=\"6b2731e5cdf3bd4d52052fad7040793c_p_170\" id=\"6b2731e5cdf3bd4d52052fad7040793c_p_170\"><br></p><blockquote data-lake-id=\"uf572217c\" id=\"uf572217c\"><p data-lake-id=\"ec23cdb5c184f22dc7e8f4776a882b6d_p_171\" id=\"ec23cdb5c184f22dc7e8f4776a882b6d_p_171\"><span data-lake-id=\"u91969ec4\" id=\"u91969ec4\">解决异步问题</span></p></blockquote><p data-lake-id=\"7c99e1264b141371ec53052f1b9bd8a1_p_172\" id=\"7c99e1264b141371ec53052f1b9bd8a1_p_172\"><br></p><blockquote data-lake-id=\"u6c95c083\" id=\"u6c95c083\"><p data-lake-id=\"5ada621e37cd1b9057d7d5f7180eadb9_p_173\" id=\"5ada621e37cd1b9057d7d5f7180eadb9_p_173\"><code data-lake-id=\"uaa89a598\" id=\"uaa89a598\"><span data-lake-id=\"uda296894\" id=\"uda296894\">redux-thunk</span></code><span data-lake-id=\"u5d0e8deb\" id=\"u5d0e8deb\">帮助我们在所有的组件的 </span><code data-lake-id=\"u7d19a073\" id=\"u7d19a073\"><span data-lake-id=\"uc9adadb7\" id=\"uc9adadb7\">props</span></code><span data-lake-id=\"uf792e864\" id=\"uf792e864\"> 中添加了一个 </span><code data-lake-id=\"ud8104a1a\" id=\"ud8104a1a\"><span data-lake-id=\"u7196c242\" id=\"u7196c242\">dispatch</span></code><span data-lake-id=\"u06b3ed62\" id=\"u06b3ed62\"> 方法。</span></p></blockquote><p data-lake-id=\"2c47ab815ac9d02ba311a88ab630b791_p_174\" id=\"2c47ab815ac9d02ba311a88ab630b791_p_174\"><br></p><blockquote data-lake-id=\"u00b60e0c\" id=\"u00b60e0c\"><p data-lake-id=\"7a4e0d73f405fc7518cfdb97d474aed4_p_175\" id=\"7a4e0d73f405fc7518cfdb97d474aed4_p_175\"><span data-lake-id=\"u8929887b\" id=\"u8929887b\">当然，这个组件一定要被 </span><code data-lake-id=\"u09851e7c\" id=\"u09851e7c\"><span data-lake-id=\"ud0d8437e\" id=\"ud0d8437e\">connect</span></code><span data-lake-id=\"u52fb12cd\" id=\"u52fb12cd\"> 函数进行处理</span></p></blockquote><p data-lake-id=\"aaf6d3f54c4ea0860c4a0b47cf319be5_p_176\" id=\"aaf6d3f54c4ea0860c4a0b47cf319be5_p_176\"><br></p><blockquote data-lake-id=\"u2a69cccf\" id=\"u2a69cccf\"><p data-lake-id=\"ee70a0dbfe8b5362fa0818d7ec4d906b_p_177\" id=\"ee70a0dbfe8b5362fa0818d7ec4d906b_p_177\"><span data-lake-id=\"ufabec967\" id=\"ufabec967\">注意，如果使用 </span><code data-lake-id=\"u6fa5416d\" id=\"u6fa5416d\"><span data-lake-id=\"u2b6aa834\" id=\"u2b6aa834\">thunk</span></code><span data-lake-id=\"ue2cf1aa3\" id=\"ue2cf1aa3\">，则 </span><code data-lake-id=\"u18314231\" id=\"u18314231\"><span data-lake-id=\"u3a30e5d8\" id=\"u3a30e5d8\">connect</span></code><span data-lake-id=\"u8932d366\" id=\"u8932d366\"> 函数不能传入第二个参数，否则会导致无法获取 </span><code data-lake-id=\"uba02f1a9\" id=\"uba02f1a9\"><span data-lake-id=\"uc900ab64\" id=\"uc900ab64\">this.props.dispatch()</span></code></p></blockquote><p data-lake-id=\"639ff39a813bac805cf1d42cf6370925_p_178\" id=\"639ff39a813bac805cf1d42cf6370925_p_178\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%20%E5%85%A5%E5%8F%A3%E6%96%87%E4%BB%B6%5Cnimport%20%7B%20createStore%2C%20applyMiddleware%20%7D%20from%20'redux'%3B%5Cnimport%20thunk%20from%20'redux-thunk'%3B%5Cnlet%20store%20%3D%20createStore(reducer%2C%20applyMiddleware(thunk))%5Cn%5Cn%2F**%20%E7%BB%84%E4%BB%B6%E4%B8%AD%20*%2F%5Cn%2F**%20%E7%AC%AC%E4%B8%80%E7%A7%8D%E5%86%99%E6%B3%95%EF%BC%8C%E5%B9%B6%E6%B2%A1%E6%9C%89%E5%B0%86actions%E8%BF%9B%E8%A1%8C%E6%8A%BD%E7%A6%BB%20*%2F%5Cn%24.get('%2Fshu.txt'%2C%20data%20%3D%3E%20%7B%5Cn%20%20%20%20var%20number%20%3D%20Number(data)%3B%5Cn%20%20%20%20this.props.dispatch(%7B%5Cn%20%20%20%20%20%20%20%20%5C%22type%5C%22%3A%20%5C%22ADD%5C%22%2C%5Cn%20%20%20%20%20%20%20%20number%5Cn%20%20%20%20%7D)%5Cn%7D)%5Cn%2F**%20%E7%AC%AC%E4%BA%8C%E7%A7%8D%E5%86%99%E6%B3%95%3A%E5%B8%B8%E7%94%A8%20*%2F%5Cn%2F%2F%20%E5%8F%AF%E6%9E%9A%E4%B8%BE%5Cnimport%20*%20as%20actions%20from%20'.%2Factions%2Factions.js'%5Cn%5Cnclass%20**%20extends%20React.Component%20%7B%5Cn%20%20%20%20...%5Cn%20%20%20%20add()%20%7B%5Cn%20%20%20%20%20%20%20%20this.props.dispatch(actions.add())%5Cn%20%20%20%20%20%20%20%20this.props.dispatch(actions.minus())%5Cn%20%20%20%20%7D%5Cn%20%20%20%20...%5Cn%7D%5Cn%2F**%20%E7%8E%B0%E5%9C%A8%EF%BC%8C%E4%B8%80%E8%88%AC%E4%B8%8D%E4%BC%9A%E5%86%8D%E5%86%99%E7%AC%AC%E4%BA%8C%E4%B8%AA%E5%8F%82%E6%95%B0%E4%BA%86%EF%BC%8C%E5%B0%B1%E6%98%AF%E8%AF%B4%E7%9C%81%E7%95%A5%E6%8E%89mapDispatchToProps%20*%2F%5Cnexport%20default%20connect(%5Cn%20(state)%20%3D%3E%20%7B%5Cn%20%20%20%20return%20%7B%5Cn%20%20%20%20%20%20%20%20state%3A%20state%5Cn%20%20%20%20%7D%5Cn%20%7D)(**)%5Cn%2F%2F%20actions.js%5Cn%2F*%20%E7%8E%B0%E5%9C%A8%EF%BC%8C%E5%BC%82%E6%AD%A5%E7%9A%84Action%20Creator%E4%B8%8D%E8%A6%81%E7%9B%B4%E6%8E%A5%E8%BF%94%E5%9B%9E%20Action%EF%BC%8C%E8%80%8C%E6%98%AF%E8%BF%94%E5%9B%9E%E4%B8%80%E4%B8%AA%E6%90%BA%E5%B8%A6%20dispatch%20%E7%9A%84%E5%87%BD%E6%95%B0%EF%BC%9B%E8%BF%99%E4%B8%AA%E5%87%BD%E6%95%B0%E7%9B%B8%E5%BD%93%E4%BA%8E%E2%80%9C%E5%BB%B6%E9%95%BF%E2%80%9D%E4%BA%86dispatch%E7%9A%84%E6%8C%81%E7%BB%AD%E6%97%B6%E9%97%B4%E3%80%82*%2F%5Cnexport%20const%20add%20%3D%20()%20%3D%3E%20(dispatch%2C%20getState)%20%3D%3E%20%7B%5Cn%20%20%20%20console.log(getState())%20%2F%2F%20getState%E5%8F%AF%E4%BB%A5%E8%8E%B7%E5%8F%96%E5%85%A8%E5%B1%80%E6%95%B0%E6%8D%AE%5Cn%20%20%20%20%24.get('%2Fshu.txt'%2C%20data%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20%20%20var%20number%20%3D%20Number(data)%3B%5Cn%20%20%20%20%20%20%20%20dispatch(%7B%5C%22type%5C%22%3A%20%5C%22MINUS%5C%22%2C%20number%7D)%5Cn%20%20%20%20%7D)%5Cn%7D%5Cnexport%20const%20minus%20%3D%20()%20%3D%3E%20%7B%20%5C%22type%5C%22%3A%20%5C%22MINUS%5C%22%20%7D%5Cn%2F%2F%20reducer.js%5Cnexport%20default%20(state%20%3D%200%2C%20action)%20%3D%3E%20%7B%5Cn%20%20%20%20switch(action.type)%20%7B%5Cn%20%20%20%20%20%20%20%20case%20%5C%22ADD%5C%22%3A%5Cn%20%20%20%20%20%20%20%20%20%20%20%20return%20state%20%2B%20action.number%5Cn%20%20%20%20%20%20%20%20case%20%5C%22MINUS%5C%22%3A%5Cn%20%20%20%20%20%20%20%20%20%20%20%20return%20state%20-%201%5Cn%20%20%20%20%7D%5Cn%20%20%20%20return%20state%3B%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22e463d708%22%7D\"></card><p data-lake-id=\"704e7fcf3e24f0df062f455d61ce8bf2_p_179\" id=\"704e7fcf3e24f0df062f455d61ce8bf2_p_179\"><br></p><h2 data-lake-id=\"098d4e0d\" id=\"098d4e0d\"><span data-lake-id=\"ub804dd41\" id=\"ub804dd41\">9. react-router4.x</span></h2><p data-lake-id=\"eca7cff7c59afa2f3de403ef7621a785_p_180\" id=\"eca7cff7c59afa2f3de403ef7621a785_p_180\"><br></p><h3 data-lake-id=\"61a3ec66\" id=\"61a3ec66\"><span data-lake-id=\"u8ac98b19\" id=\"u8ac98b19\">介绍</span></h3><p data-lake-id=\"0efc130a474ae63eb94f94d29c0b519f_p_181\" id=\"0efc130a474ae63eb94f94d29c0b519f_p_181\"><br></p><ul list=\"ubade6a6d\"><li fid=\"u5a6f196f\" data-lake-id=\"c22bf6572f89e856ae45401d75437d1a_li_88\" id=\"c22bf6572f89e856ae45401d75437d1a_li_88\"><a href=\"https://reacttraining.com/react-router\" target=\"_blank\" data-lake-id=\"ue3b579b5\" id=\"ue3b579b5\"><span data-lake-id=\"ue012cee2\" id=\"ue012cee2\">官网</span></a></li></ul><ul list=\"u405c5e91\"><li fid=\"ue5590c71\" data-lake-id=\"2d2d28fbf63b6cfeda6e6fe4ddd57a44_li_89\" id=\"2d2d28fbf63b6cfeda6e6fe4ddd57a44_li_89\"><span data-lake-id=\"uc5495708\" id=\"uc5495708\">安装：</span><code data-lake-id=\"uef38a9ea\" id=\"uef38a9ea\"><span data-lake-id=\"u5fc3ff68\" id=\"u5fc3ff68\">npm install react-router-dom</span></code></li></ul><p data-lake-id=\"1afec35b50202e46c8ab3d64c8b15d95_p_182\" id=\"1afec35b50202e46c8ab3d64c8b15d95_p_182\"><br></p><h3 data-lake-id=\"demo\" id=\"demo\"><span data-lake-id=\"ud36275f3\" id=\"ud36275f3\">demo</span></h3><p data-lake-id=\"bd34bbbaf941aa44b5ef63b842573764_p_183\" id=\"bd34bbbaf941aa44b5ef63b842573764_p_183\"><br></p><blockquote data-lake-id=\"u98aff8d8\" id=\"u98aff8d8\"><p data-lake-id=\"0c67947b0435fe76c1572840c84d3ac9_p_184\" id=\"0c67947b0435fe76c1572840c84d3ac9_p_184\"><code data-lake-id=\"u92644824\" id=\"u92644824\"><span data-lake-id=\"ub8c3badd\" id=\"ub8c3badd\">exact</span></code><span data-lake-id=\"u9186b46f\" id=\"u9186b46f\">表示严格匹配，如果路径为 </span><code data-lake-id=\"u1dad3ee4\" id=\"u1dad3ee4\"><span data-lake-id=\"u548a7ff9\" id=\"u548a7ff9\">path=&quot;/&quot;</span></code><span data-lake-id=\"uc554462d\" id=\"uc554462d\"> 的 </span><code data-lake-id=\"u170fd27d\" id=\"u170fd27d\"><span data-lake-id=\"ud33ca7da\" id=\"ud33ca7da\">Route</span></code><span data-lake-id=\"u65ff42eb\" id=\"u65ff42eb\"> 不设置该属性，则会自动向下匹配路由，即都会显示出来</span></p></blockquote><p data-lake-id=\"9040129079d6c20944d5abd09137a458_p_185\" id=\"9040129079d6c20944d5abd09137a458_p_185\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22jsx%22%2C%22code%22%3A%22import%20React%20from%20%5C%22react%5C%22%3B%5Cnimport%20%7B%20BrowserRouter%20as%20Router%2C%20Route%2C%20Link%20%7D%20from%20%5C%22react-router-dom%5C%22%3B%5Cn%5Cnfunction%20Index()%20%7B%5Cn%20%20return%20%3Ch2%3EHome%3C%2Fh2%3E%3B%5Cn%7D%5Cn%5Cnfunction%20About()%20%7B%5Cn%20%20return%20%3Ch2%3EAbout%3C%2Fh2%3E%3B%5Cn%7D%5Cn%5Cnfunction%20Users()%20%7B%5Cn%20%20return%20%3Ch2%3EUsers%3C%2Fh2%3E%3B%5Cn%7D%5Cn%5Cnfunction%20AppRouter()%20%7B%5Cn%20%20return%20(%5Cn%20%20%20%20%3CRouter%3E%5Cn%20%20%20%20%20%20%3Cdiv%3E%5Cn%20%20%20%20%20%20%20%20%3Cnav%3E%5Cn%20%20%20%20%20%20%20%20%20%20%3Cul%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%3Cli%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3CLink%20to%3D%5C%22%2F%5C%22%3EHome%3C%2FLink%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%3C%2Fli%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%3Cli%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3CLink%20to%3D%5C%22%2Fabout%2F%5C%22%3EAbout%3C%2FLink%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%3C%2Fli%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%3Cli%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3CLink%20to%3D%5C%22%2Fusers%2F%5C%22%3EUsers%3C%2FLink%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%3C%2Fli%3E%5Cn%20%20%20%20%20%20%20%20%20%20%3C%2Ful%3E%5Cn%20%20%20%20%20%20%20%20%3C%2Fnav%3E%5Cn%5Cn%20%20%20%20%20%20%20%20%3CRoute%20path%3D%5C%22%2F%5C%22%20exact%20component%3D%7BIndex%7D%20%2F%3E%5Cn%20%20%20%20%20%20%20%20%3CRoute%20path%3D%5C%22%2Fabout%2F%5C%22%20component%3D%7BAbout%7D%20%2F%3E%5Cn%20%20%20%20%20%20%20%20%3CRoute%20path%3D%5C%22%2Fusers%2F%5C%22%20component%3D%7BUsers%7D%20%2F%3E%5Cn%20%20%20%20%20%20%3C%2Fdiv%3E%5Cn%20%20%20%20%3C%2FRouter%3E%5Cn%20%20)%3B%5Cn%7D%5Cnexport%20default%20AppRouter%3B%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%227260f495%22%7D\"></card><p data-lake-id=\"a2e9e486493798ec13110bd7c2133490_p_186\" id=\"a2e9e486493798ec13110bd7c2133490_p_186\"><br></p><h3 data-lake-id=\"d32ddad9\" id=\"d32ddad9\"><span data-lake-id=\"u87421eed\" id=\"u87421eed\">动态路由</span></h3><p data-lake-id=\"c7048e5640cfa0d88f49c32fad2740da_p_187\" id=\"c7048e5640cfa0d88f49c32fad2740da_p_187\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22jsx%22%2C%22code%22%3A%22%2F%2F%20App.js%20%E5%AE%9A%E4%B9%89%E5%8A%A8%E6%80%81%E8%B7%AF%E7%94%B1%5Cn%3CRoute%20path%3D%5C%22%2Fcontent%2F%3Aaid%5C%22%3E%3C%2FRoute%3E%5Cn%2F%2F%20news.js%20%E8%B7%B3%E8%BD%AC%5Cn%3CLink%20to%3D%7B%60%2Fcontent%2F%24%7Bvalue.aid%7D%60%7D%3E%3C%2FLink%3E%5Cn%2F%2F%20Content.js%20%E8%B7%B3%E5%9C%A8%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%87%BD%E6%95%B0%E4%B8%AD%E8%8E%B7%E5%8F%96%E5%8A%A8%E6%80%81%E8%B7%AF%E7%94%B1%E5%8F%82%E6%95%B0%5Cnclass%20Content%20extends%20Component%20%7B%5Cn%20%20%20%20%2F*%20...%20*%2F%5Cn%20%20%20%20%20%20componentDidMount()%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20const%20%7B%20match%20%7D%20%3D%20this.props%5Cn%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E8%8E%B7%E5%8F%96%E5%88%B0%E4%BC%A0%E9%80%92%E7%9A%84%E5%8A%A8%E6%80%81%E8%B7%AF%E7%94%B1%E5%8F%82%E6%95%B0%5Cn%20%20%20%20%20%20%20%20%20%20console.log(match.params.aid)%5Cn%20%20%20%20%20%20%7D%5Cn%20%20%20%20%2F*%20...%20*%2F%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%220ec9b522%22%7D\"></card><p data-lake-id=\"1b4147100f9b232305f6ba2db16414a4_p_188\" id=\"1b4147100f9b232305f6ba2db16414a4_p_188\"><br></p><h3 data-lake-id=\"48d577aa\" id=\"48d577aa\"><span data-lake-id=\"u02cec182\" id=\"u02cec182\">get 传值</span></h3><p data-lake-id=\"754d4d7b7f7ef59febce1379b79c5a84_p_189\" id=\"754d4d7b7f7ef59febce1379b79c5a84_p_189\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22jsx%22%2C%22code%22%3A%22%2F%2F%20App.js%20%E5%AE%9A%E4%B9%89%E5%8A%A8%E6%80%81%E8%B7%AF%E7%94%B1%5Cn%3CRoute%20path%3D%5C%22%2Fcontent%5C%22%3E%3C%2FRoute%3E%5Cn%2F%2F%20news.js%20%E8%B7%B3%E8%BD%AC%5Cn%3CLink%20to%3D%7B%60%2Fcontent%3Faid%3D%24%7Bvalue.aid%7D%60%7D%3E%3C%2FLink%3E%5Cn%2F%2F%20Content.js%20%E8%B7%B3%E5%9C%A8%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%87%BD%E6%95%B0%E4%B8%AD%E8%8E%B7%E5%8F%96%E5%8A%A8%E6%80%81%E8%B7%AF%E7%94%B1%E5%8F%82%E6%95%B0%5Cnclass%20Content%20extends%20Component%20%7B%5Cn%20%20%20%20...%5Cn%20%20%20%20%20%20componentDidMount()%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20const%20%7B%20location%20%7D%20%3D%20this.props%5Cn%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E8%8E%B7%E5%8F%96%E5%88%B0%E4%BC%A0%E9%80%92%E7%9A%84%E5%8A%A8%E6%80%81%E8%B7%AF%E7%94%B1%E5%8F%82%E6%95%B0%5Cn%20%20%20%20%20%20%20%20%20%20console.log(location.search)%5Cn%20%20%20%20%20%20%7D%5Cn%20%20%20%20...%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%225b3c5feb%22%7D\"></card><p data-lake-id=\"a7461c86e6a9d61cb988ef01871fdc3e_p_190\" id=\"a7461c86e6a9d61cb988ef01871fdc3e_p_190\"><br></p><h3 data-lake-id=\"2a32f5ec\" id=\"2a32f5ec\"><span data-lake-id=\"u578e476c\" id=\"u578e476c\">js 控制跳转</span></h3><p data-lake-id=\"ebc5def445ee0b4a8a315ff5c89870b2_p_191\" id=\"ebc5def445ee0b4a8a315ff5c89870b2_p_191\"><br></p><ol list=\"u6fb9fc7b\"><li fid=\"u819fcd6a\" data-lake-id=\"9a488afcd1497aeb94c0854e0f80a018_li_90\" id=\"9a488afcd1497aeb94c0854e0f80a018_li_90\"><span data-lake-id=\"u9ad9835f\" id=\"u9ad9835f\">引入 </span><code data-lake-id=\"ub53bbb8b\" id=\"ub53bbb8b\"><span data-lake-id=\"u360831e6\" id=\"u360831e6\">Redirect</span></code><span data-lake-id=\"u9e614c36\" id=\"u9e614c36\"> 组件</span></li></ol><ol list=\"ua3f46d32\" start=\"2\"><li fid=\"ua8de1b71\" data-lake-id=\"0f844b3863a0ed3c9fdfdded2f7fa834_li_91\" id=\"0f844b3863a0ed3c9fdfdded2f7fa834_li_91\"><span data-lake-id=\"u38f447d3\" id=\"u38f447d3\">定义一个 </span><code data-lake-id=\"u469ec02a\" id=\"u469ec02a\"><span data-lake-id=\"uf425690b\" id=\"uf425690b\">flag</span></code></li></ol><p data-lake-id=\"2ca73a746caed6893c78e3a6e489dba7_p_192\" id=\"2ca73a746caed6893c78e3a6e489dba7_p_192\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22this.state%20%3D%20%7B%5Cn%20%20loginFlag%3A%20false%5Cn%7D%3B%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22b2cbfb71%22%7D\"></card><p data-lake-id=\"a54598ca955746a71345e6f1c7efebc9_p_193\" id=\"a54598ca955746a71345e6f1c7efebc9_p_193\"><br></p><ol list=\"u8bc21358\" start=\"3\"><li fid=\"uea6534a0\" data-lake-id=\"97531c8e91ebb08eb192c8c410ba22bb_li_92\" id=\"97531c8e91ebb08eb192c8c410ba22bb_li_92\"><span data-lake-id=\"u9a78753d\" id=\"u9a78753d\">在 </span><code data-lake-id=\"uec1fff5d\" id=\"uec1fff5d\"><span data-lake-id=\"u5612bfab\" id=\"u5612bfab\">Render</span></code><span data-lake-id=\"u2d7ad145\" id=\"u2d7ad145\"> 中判断 </span><code data-lake-id=\"u8da2c324\" id=\"u8da2c324\"><span data-lake-id=\"u54d7a04b\" id=\"u54d7a04b\">flag</span></code><span data-lake-id=\"ub330db97\" id=\"ub330db97\">，从而来决定是否进行跳转</span></li></ol><p data-lake-id=\"f9b899a2271a73dadb46fc35f51f07c4_p_194\" id=\"f9b899a2271a73dadb46fc35f51f07c4_p_194\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22jsx%22%2C%22code%22%3A%22if%20(this.state.loginFlag)%20%7B%5Cn%20%20return%20%3CRedirect%20to%3D%7B%7B%20pathname%3A%20%5C%22%2F%5C%22%20%7D%7D%20%2F%3E%3B%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%2241c4d590%22%7D\"></card><p data-lake-id=\"80202539c693019e9f10e3914a4f3853_p_195\" id=\"80202539c693019e9f10e3914a4f3853_p_195\"><br></p><ol list=\"uab84f51d\" start=\"4\"><li fid=\"u04d56504\" data-lake-id=\"35aa2be2034f4fe4111da323fcb742ff_li_93\" id=\"35aa2be2034f4fe4111da323fcb742ff_li_93\"><span data-lake-id=\"u1a05e754\" id=\"u1a05e754\">执行 </span><code data-lake-id=\"uadb6cc00\" id=\"uadb6cc00\"><span data-lake-id=\"u82059e64\" id=\"u82059e64\">js</span></code><span data-lake-id=\"u79693442\" id=\"u79693442\"> 跳转，通过 </span><code data-lake-id=\"u6dd1052f\" id=\"u6dd1052f\"><span data-lake-id=\"u226c6152\" id=\"u226c6152\">js</span></code><span data-lake-id=\"ud996b6b9\" id=\"ud996b6b9\"> 改变 </span><code data-lake-id=\"u4eb235c9\" id=\"u4eb235c9\"><span data-lake-id=\"u02e76bf6\" id=\"u02e76bf6\">loginFlag</span></code><span data-lake-id=\"u1326ef25\" id=\"u1326ef25\"> 的状态，改变以后，就可以从新的 </span><code data-lake-id=\"u41e299c3\" id=\"u41e299c3\"><span data-lake-id=\"u4c29aa57\" id=\"u4c29aa57\">render</span></code><span data-lake-id=\"uba9103ae\" id=\"uba9103ae\"> 中通过 </span><code data-lake-id=\"u4e4fcb09\" id=\"u4e4fcb09\"><span data-lake-id=\"u0c27c695\" id=\"u0c27c695\">Redirect</span></code><span data-lake-id=\"u021ab455\" id=\"u021ab455\"> 自己进行跳转</span></li></ol><p data-lake-id=\"23475a21370dc3b01a4e53f8cf794c6f_p_196\" id=\"23475a21370dc3b01a4e53f8cf794c6f_p_196\"><br></p><h3 data-lake-id=\"6f5f6eed\" id=\"6f5f6eed\"><span data-lake-id=\"u8aae3cd0\" id=\"u8aae3cd0\">模块化路由</span></h3><p data-lake-id=\"092c280811a5ab919f55eaebbfe43b42_p_197\" id=\"092c280811a5ab919f55eaebbfe43b42_p_197\"><br></p><blockquote data-lake-id=\"u972faad8\" id=\"u972faad8\"><p data-lake-id=\"e271fbbce7ef61342cfc1aa5ea9529b4_p_198\" id=\"e271fbbce7ef61342cfc1aa5ea9529b4_p_198\"><span data-lake-id=\"uaf02f98b\" id=\"uaf02f98b\">router.js</span></p></blockquote><p data-lake-id=\"29f96185b91d029e4e58c44f6555340a_p_199\" id=\"29f96185b91d029e4e58c44f6555340a_p_199\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22jsx%22%2C%22code%22%3A%22import%20Home%20from%20'.%2Fcomponents%2FHome%2F'%5Cnimport%20About%20from%20'.%2Fcomponents%2FAbout%2F'%5Cnimport%20User%20from%20'.%2Fcomponents%2FUser%2F'%5Cnimport%20UserList%20from%20'.%2FUser%2FUserList'%5Cnimport%20UserInfo%20from%20'.%2FUser%2FUserInfo'%5Cn%5Cnlet%20router%20%3D%20%5B%5Cn%20%20%20%20%7B%5Cn%20%20%20%20%20%20%20%20path%3A%20'%2F'%2C%5Cn%20%20%20%20%20%20%20%20component%3A%20Home%2C%5Cn%20%20%20%20%20%20%20%20exact%3A%20true%5Cn%20%20%20%20%7D%2C%5Cn%20%20%20%20%7B%5Cn%20%20%20%20%20%20%20%20path%3A%20'%2Fabout'%2C%5Cn%20%20%20%20%20%20%20%20component%3A%20About%5Cn%20%20%20%20%7D%2C%5Cn%20%20%20%20%7B%5Cn%20%20%20%20%20%20%20%20path%3A%20'%2FUser'%2C%5Cn%20%20%20%20%20%20%20%20component%3A%20User%2C%5Cn%20%20%20%20%20%20%20%20routes%3A%20%5B%20%2F%2F%20%E5%B5%8C%E5%A5%97%E8%B7%AF%E7%94%B1%E8%AE%BE%E7%BD%AE%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20path%3A%20'%2Fuser%2F'%2C%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20component%3A%20UserList%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%2C%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20path%3A%20'%2Fuser%2Finfo'%2C%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20component%3A%20UserInfo%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%5D%5Cn%20%20%20%20%7D%5Cn%5D%5Cnexport%20default%20router%3B%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22c17c4203%22%7D\"></card><p data-lake-id=\"99d7f9ffd07472f73f14113da034a561_p_200\" id=\"99d7f9ffd07472f73f14113da034a561_p_200\"><br></p><blockquote data-lake-id=\"u454ead08\" id=\"u454ead08\"><p data-lake-id=\"c513d337292c5d5cb498a7000c057718_p_201\" id=\"c513d337292c5d5cb498a7000c057718_p_201\"><span data-lake-id=\"u13318c93\" id=\"u13318c93\">App.js入口文件</span></p></blockquote><p data-lake-id=\"51391d7d944f941a39fd10b1691d92b8_p_202\" id=\"51391d7d944f941a39fd10b1691d92b8_p_202\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22jsx%22%2C%22code%22%3A%22import%20React%2C%20%7B%20Component%20%7D%20from%20%5C%22react%5C%22%3B%5Cnimport%20%7B%20BrowserRouter%20as%20Router%2C%20Route%2C%20Link%20%7D%20from%20%5C%22react-router-dom%5C%22%3B%5Cnimport%20router%20from%20%5C%22.%2Frouter.js%5C%22%3B%5Cn%5Cnclass%20App%20extends%20Component%20%7B%5Cn%20%20render()%20%7B%5Cn%20%20%20%20return%20(%5Cn%20%20%20%20%20%20%3CRouter%3E%5Cn%20%20%20%20%20%20%20%20%3Cdiv%3E%5Cn%20%20%20%20%20%20%20%20%20%20%7Brouter.map((route%2C%20key)%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20if%20(route.exact)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20(%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3CRoute%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20exact%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20key%3D%7Bkey%7D%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20path%3D%7Broute.path%7D%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20render%3D%7Bprops%20%3D%3E%20(%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E5%90%91%E5%AD%90%E7%BB%84%E4%BB%B6%E4%BC%A0%E9%80%92%E5%AD%90%E8%B7%AF%E7%94%B1%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Croute.component%20%7B...props%7D%20routes%3D%7Broute.routes%7D%20%2F%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20)%7D%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%20else%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20(%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3CRoute%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20key%3D%7Bkey%7D%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20path%3D%7Broute.path%7D%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20render%3D%7Bprops%20%3D%3E%20(%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E5%90%91%E5%AD%90%E7%BB%84%E4%BB%B6%E4%BC%A0%E9%80%92%E5%AD%90%E8%B7%AF%E7%94%B1%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Croute.component%20%7B...props%7D%20routes%3D%7Broute.routes%7D%20%2F%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20)%7D%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%20%20%7D)%7D%5Cn%20%20%20%20%20%20%20%20%3C%2Fdiv%3E%5Cn%20%20%20%20%20%20%3C%2FRouter%3E%5Cn%20%20%20%20)%3B%5Cn%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%2248f03bc8%22%7D\"></card><p data-lake-id=\"4ed325856d239cc0ac03df1f201ff44e_p_203\" id=\"4ed325856d239cc0ac03df1f201ff44e_p_203\"><br></p><blockquote data-lake-id=\"u5de50445\" id=\"u5de50445\"><p data-lake-id=\"d66236df99ab5d3cc9002a09906f58c9_p_204\" id=\"d66236df99ab5d3cc9002a09906f58c9_p_204\"><span data-lake-id=\"u1e7c21ec\" id=\"u1e7c21ec\">User.js</span></p></blockquote><p data-lake-id=\"ed628da24993324917ceed9d7032667e_p_205\" id=\"ed628da24993324917ceed9d7032667e_p_205\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22jsx%22%2C%22code%22%3A%22import%20React%2C%20%7B%20Component%20%7D%20from%20%5C%22react%5C%22%3B%5Cnimport%20%7B%20Route%2C%20Link%20%7D%20from%20%5C%22react-router-dom%5C%22%3B%5Cn%5Cnclass%20User%20extends%20Component%20%7B%5Cn%20%20componentWillMount()%20%7B%5Cn%20%20%20%20console.log(this.props.routes)%3B%5Cn%20%20%7D%5Cn%20%20render()%20%7B%5Cn%20%20%20%20return%20(%5Cn%20%20%20%20%20%20%3Cdiv%3E%5Cn%20%20%20%20%20%20%20%20%3Cdiv%20className%3D%5C%22contenr%5C%22%3E%5Cn%20%20%20%20%20%20%20%20%20%20%3Cdiv%20className%3D%5C%22left%5C%22%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%3CLink%20%2F%3E%5Cn%20%20%20%20%20%20%20%20%20%20%3C%2Fdiv%3E%5Cn%20%20%20%20%20%20%20%20%20%20%3Cdiv%20className%3D%5C%22right%5C%22%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7Bthis.props.routes.map((route%2C%20key)%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20(%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3CRoute%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20exact%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20key%3D%7Bkey%7D%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20path%3D%7Broute.path%7D%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20component%3D%7Broute.component%7D%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D)%7D%5Cn%20%20%20%20%20%20%20%20%20%20%3C%2Fdiv%3E%5Cn%20%20%20%20%20%20%20%20%3C%2Fdiv%3E%5Cn%20%20%20%20%20%20%3C%2Fdiv%3E%5Cn%20%20%20%20)%3B%5Cn%20%20%7D%5Cn%7D%5Cnexport%20default%20User%3B%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22e82a4743%22%7D\"></card><p data-lake-id=\"352f391bc738d2265b3d832a48674509_p_206\" id=\"352f391bc738d2265b3d832a48674509_p_206\"><br></p><h3 data-lake-id=\"f757cf23\" id=\"f757cf23\"><span data-lake-id=\"u5bb168e6\" id=\"u5bb168e6\">常用路由组件</span></h3><p data-lake-id=\"fa496c4be2d075776e02d4d8dd97275f_p_207\" id=\"fa496c4be2d075776e02d4d8dd97275f_p_207\"><br></p><ul list=\"u791202d4\"><li fid=\"ua40534d6\" data-lake-id=\"1eb340b8db344f6cf26d915bd5c64868_li_94\" id=\"1eb340b8db344f6cf26d915bd5c64868_li_94\"><em><span data-lake-id=\"ufdda1e0f\" id=\"ufdda1e0f\">BrowserRouter</span></em><span data-lake-id=\"u0208e5e9\" id=\"u0208e5e9\">：使用 </span><code data-lake-id=\"ud12ed45d\" id=\"ud12ed45d\"><span data-lake-id=\"u3aab55d8\" id=\"u3aab55d8\">HTML5</span></code><span data-lake-id=\"u7ccaff84\" id=\"u7ccaff84\"> 历史记录 </span><code data-lake-id=\"ue8bebb7d\" id=\"ue8bebb7d\"><span data-lake-id=\"uac891ad1\" id=\"uac891ad1\">API</span></code><span data-lake-id=\"u54c7ee5e\" id=\"u54c7ee5e\"> (</span><code data-lake-id=\"u01e72021\" id=\"u01e72021\"><span data-lake-id=\"uab7b51e5\" id=\"uab7b51e5\">pushState</span></code><span data-lake-id=\"ud0af66d8\" id=\"ud0af66d8\">，</span><code data-lake-id=\"u9c8ef3bb\" id=\"u9c8ef3bb\"><span data-lake-id=\"u2acb8a23\" id=\"u2acb8a23\">replaceState</span></code><span data-lake-id=\"uc348bb45\" id=\"uc348bb45\"> 和</span><code data-lake-id=\"uce1e5a8a\" id=\"uce1e5a8a\"><span data-lake-id=\"u4ff4d962\" id=\"u4ff4d962\">popstate</span></code><span data-lake-id=\"ubd3b9f9f\" id=\"ubd3b9f9f\"> 事件)的 </span><code data-lake-id=\"uc8711978\" id=\"uc8711978\"><span data-lake-id=\"u4220f192\" id=\"u4220f192\">&lt;Router&gt;</span></code><span data-lake-id=\"u3a662e57\" id=\"u3a662e57\"> 来保持 </span><code data-lake-id=\"uc7d7b19f\" id=\"uc7d7b19f\"><span data-lake-id=\"u61c0f825\" id=\"u61c0f825\">UI</span></code><span data-lake-id=\"u4f60799c\" id=\"u4f60799c\"> 与 </span><code data-lake-id=\"u8858b639\" id=\"u8858b639\"><span data-lake-id=\"ud8726359\" id=\"ud8726359\">URL</span></code><span data-lake-id=\"uee6bb3bc\" id=\"uee6bb3bc\"> 的同步</span></li></ul><ul list=\"u646a12a0\"><li fid=\"u384915fe\" data-lake-id=\"717b755471e962a138510e6f245cd362_li_95\" id=\"717b755471e962a138510e6f245cd362_li_95\"><em><span data-lake-id=\"u16c6ee9f\" id=\"u16c6ee9f\">HashRouter</span></em><span data-lake-id=\"u77e4d8c1\" id=\"u77e4d8c1\">：使用 </span><code data-lake-id=\"u6f5d2869\" id=\"u6f5d2869\"><span data-lake-id=\"u6a0d71ec\" id=\"u6a0d71ec\">URL</span></code><span data-lake-id=\"ua467bdaf\" id=\"ua467bdaf\"> 的哈希部分(即 </span><code data-lake-id=\"u25b60a9a\" id=\"u25b60a9a\"><span data-lake-id=\"u6cf88c0d\" id=\"u6cf88c0d\">window.location.hash</span></code><span data-lake-id=\"ud09ee5d1\" id=\"ud09ee5d1\"> )的&lt;路由器&gt;可以保持您的 </span><code data-lake-id=\"u46d1929d\" id=\"u46d1929d\"><span data-lake-id=\"ue182142c\" id=\"ue182142c\">UI</span></code><span data-lake-id=\"uafe9b09d\" id=\"uafe9b09d\"> 与 </span><code data-lake-id=\"ub534f482\" id=\"ub534f482\"><span data-lake-id=\"ufbb2e796\" id=\"ufbb2e796\">URL</span></code><span data-lake-id=\"u05accebf\" id=\"u05accebf\"> 同步。注意：哈希历史记录不支持 </span><code data-lake-id=\"u89b2a1c4\" id=\"u89b2a1c4\"><span data-lake-id=\"u9dbb15e0\" id=\"u9dbb15e0\">location.key</span></code><span data-lake-id=\"u1cb06682\" id=\"u1cb06682\"> 或 </span><code data-lake-id=\"u61f7b46c\" id=\"u61f7b46c\"><span data-lake-id=\"u3daa0564\" id=\"u3daa0564\">location.state</span></code><span data-lake-id=\"u9f244e97\" id=\"u9f244e97\">。 在以前的版本中，我们试图缓和行为，但是有一些边缘案例我们无法解决。 任何需要此行为的代码或插件将无法正常工作。 由于此技术仅用于支持旧版浏览器，因此我们建议您将服务器配置为使用</span><code data-lake-id=\"uc76d7165\" id=\"uc76d7165\"><span data-lake-id=\"ue4fc7232\" id=\"ue4fc7232\">&lt;BrowserHistory&gt;</span></code></li></ul><ul list=\"u89dd27ca\"><li fid=\"ua821d59d\" data-lake-id=\"a990a45a47e7c9bacd1aaf52d642eedc_li_96\" id=\"a990a45a47e7c9bacd1aaf52d642eedc_li_96\"><em><span data-lake-id=\"u4d52d134\" id=\"u4d52d134\">Link</span></em><span data-lake-id=\"ufaaf4ade\" id=\"ufaaf4ade\">：渲染成 </span><code data-lake-id=\"u5a1db63d\" id=\"u5a1db63d\"><span data-lake-id=\"u66fea329\" id=\"u66fea329\">a</span></code><span data-lake-id=\"u2ed12a9f\" id=\"u2ed12a9f\"> 标签</span></li></ul><ul list=\"ud14f8e70\"><li fid=\"u5ccec64e\" data-lake-id=\"c8c8581f25dfbdac902f4e477b142ae0_li_97\" id=\"c8c8581f25dfbdac902f4e477b142ae0_li_97\"><em><span data-lake-id=\"u39270b6c\" id=\"u39270b6c\">NavLink</span></em><span data-lake-id=\"u70e98a27\" id=\"u70e98a27\">：一种特殊版本的 </span><code data-lake-id=\"ub76f92bd\" id=\"ub76f92bd\"><span data-lake-id=\"u914ed0ff\" id=\"u914ed0ff\">&lt;Link&gt;</span></code><span data-lake-id=\"u3b2df256\" id=\"u3b2df256\">，当与当前 </span><code data-lake-id=\"ub381954a\" id=\"ub381954a\"><span data-lake-id=\"u5814e206\" id=\"u5814e206\">URL</span></code><span data-lake-id=\"u11d84da3\" id=\"u11d84da3\"> 匹配时，将向渲染元素添加样式属性。</span></li></ul><ul list=\"u5bac3b79\"><li fid=\"u71e08671\" data-lake-id=\"27c675f9bb192da32e20eb05682a1801_li_98\" id=\"27c675f9bb192da32e20eb05682a1801_li_98\"><em><span data-lake-id=\"ue1d8c3d3\" id=\"ue1d8c3d3\">Redirect</span></em><span data-lake-id=\"ue49c05d1\" id=\"ue49c05d1\">：重定向</span></li></ul><ul list=\"ueddf1ff7\"><li fid=\"u9f8ab510\" data-lake-id=\"26bd4fc37c2259045998c3b67f77223b_li_99\" id=\"26bd4fc37c2259045998c3b67f77223b_li_99\"><em><span data-lake-id=\"u294c709e\" id=\"u294c709e\">Route</span></em><span data-lake-id=\"u55673a21\" id=\"u55673a21\">：在位置与路线的路径匹配时呈现一些 </span><code data-lake-id=\"ueb8d844e\" id=\"ueb8d844e\"><span data-lake-id=\"u797d2481\" id=\"u797d2481\">UI</span></code><span data-lake-id=\"uf49d7257\" id=\"uf49d7257\">。</span></li></ul><ul list=\"u61609838\"><li fid=\"uda9e8392\" data-lake-id=\"236496c29a2e3864eacc65976030a1b0_li_100\" id=\"236496c29a2e3864eacc65976030a1b0_li_100\"><em><span data-lake-id=\"u191e2f60\" id=\"u191e2f60\">Switch</span></em><span data-lake-id=\"u36a35239\" id=\"u36a35239\">：只渲染命中的第一个 </span><code data-lake-id=\"u7ebf03e6\" id=\"u7ebf03e6\"><span data-lake-id=\"u5996ce15\" id=\"u5996ce15\">&lt;Route&gt;</span></code><span data-lake-id=\"u8c4c0cb4\" id=\"u8c4c0cb4\"> 或 </span><code data-lake-id=\"u811db798\" id=\"u811db798\"><span data-lake-id=\"u8274ece4\" id=\"u8274ece4\">&lt;Redirect&gt;</span></code><span data-lake-id=\"uf036c31c\" id=\"uf036c31c\"> 。</span></li></ul><p data-lake-id=\"3c2e4ae7a4912940f2b69cc49919d5f2_p_208\" id=\"3c2e4ae7a4912940f2b69cc49919d5f2_p_208\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22jsx%22%2C%22code%22%3A%22%20%20%2F%2F%20Switch%E7%9A%84%E7%94%A8%E6%B3%95%5Cn%20%20import%20%7B%20Switch%2C%20Route%20%7D%20from%20%5C%22react-router%5C%22%3B%5Cn%20%20%3CSwitch%3E%5Cn%20%20%20%20%20%20%3CRoute%20exact%20path%3D%5C%22%2F%5C%22%20component%3D%7BHome%7D%20%2F%3E%5Cn%20%20%20%20%20%20%3CRoute%20path%3D%5C%22%2Fabout%5C%22%20component%3D%7BAbout%7D%20%2F%3E%5Cn%20%20%20%20%20%20%3CRoute%20path%3D%5C%22%2F%3Auser%5C%22%20component%3D%7BUser%7D%20%2F%3E%5Cn%20%20%20%20%20%20%3CRoute%20component%3D%7BNoMatch%7D%20%2F%3E%5Cn%20%20%3C%2FSwitch%3E%3B%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22fd702612%22%7D\"></card><p data-lake-id=\"8919573e332594403c98b16dc3707127_p_209\" id=\"8919573e332594403c98b16dc3707127_p_209\"><br></p><h2 data-lake-id=\"7557e52d\" id=\"7557e52d\"><span data-lake-id=\"u01cd4c22\" id=\"u01cd4c22\">10. context</span></h2><p data-lake-id=\"9fcc44cb3c056720422a68184834d3f8_p_210\" id=\"9fcc44cb3c056720422a68184834d3f8_p_210\"><br></p><ul list=\"u168726e8\"><li fid=\"u33953593\" data-lake-id=\"786cbbe9e3d11e7d8dc0d90943b5891c_li_101\" id=\"786cbbe9e3d11e7d8dc0d90943b5891c_li_101\"><span data-lake-id=\"ub9699fc8\" id=\"ub9699fc8\">介绍</span></li></ul><p data-lake-id=\"1da2a8520c15248cb5e414baf18050d4_p_211\" id=\"1da2a8520c15248cb5e414baf18050d4_p_211\"><br></p><blockquote data-lake-id=\"u3f1919a5\" id=\"u3f1919a5\"><p data-lake-id=\"7371016e86c1219742e461045dab8ba6_p_212\" id=\"7371016e86c1219742e461045dab8ba6_p_212\"><span data-lake-id=\"uedcc55de\" id=\"uedcc55de\">在一个典型的 </span><code data-lake-id=\"ub1149447\" id=\"ub1149447\"><span data-lake-id=\"uf623b475\" id=\"uf623b475\">React</span></code><span data-lake-id=\"ufdb897b5\" id=\"ufdb897b5\"> 应用中，数据是通过 </span><code data-lake-id=\"u70f7de7f\" id=\"u70f7de7f\"><span data-lake-id=\"u60d9a758\" id=\"u60d9a758\">props</span></code><span data-lake-id=\"u83d74423\" id=\"u83d74423\"> 属性自上而下（由父及子）进行传递的，但这种做法对于某些类型的属性而言是极其繁琐的（例如：地区偏好，</span><code data-lake-id=\"u9a74b80f\" id=\"u9a74b80f\"><span data-lake-id=\"u242c8312\" id=\"u242c8312\">UI</span></code><span data-lake-id=\"u857befd3\" id=\"u857befd3\"> 主题），这些属性是应用程序中许多组件都需要的。</span><code data-lake-id=\"u9aa3797c\" id=\"u9aa3797c\"><span data-lake-id=\"u97c01b1f\" id=\"u97c01b1f\">Context</span></code><span data-lake-id=\"ucd2b8db4\" id=\"ucd2b8db4\"> 提供了一种在组件之间共享此类值的方式，而不必显式地通过组件树的逐层传递 </span><code data-lake-id=\"u41f94840\" id=\"u41f94840\"><span data-lake-id=\"u1409330f\" id=\"u1409330f\">props</span></code><span data-lake-id=\"u60300067\" id=\"u60300067\">。</span></p></blockquote><p data-lake-id=\"6a4878fe05233880c9bb3f78bdfc8d68_p_213\" id=\"6a4878fe05233880c9bb3f78bdfc8d68_p_213\"><br></p><ul list=\"uc59771a2\"><li fid=\"u1571c6c1\" data-lake-id=\"fd9cce1f9e884eea6e0ec3e8ba87074a_li_102\" id=\"fd9cce1f9e884eea6e0ec3e8ba87074a_li_102\"><span data-lake-id=\"u11ac433d\" id=\"u11ac433d\">繁琐的 </span><code data-lake-id=\"u55be1a93\" id=\"u55be1a93\"><span data-lake-id=\"ud1b8b5be\" id=\"ud1b8b5be\">props</span></code><span data-lake-id=\"u202b603b\" id=\"u202b603b\"> 方式</span></li></ul><p data-lake-id=\"3a8029979cdf6369a743f706414be0bf_p_214\" id=\"3a8029979cdf6369a743f706414be0bf_p_214\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22jsx%22%2C%22code%22%3A%22class%20App%20extends%20React.Component%20%7B%5Cn%20%20%20%20render()%20%7B%5Cn%20%20%20%20%20%20%20%20return%20%3CToolbar%20theme%3D%5C%22dark%5C%22%20%2F%3E%5Cn%20%20%20%20%7D%5Cn%7D%5Cnfunction%20Toolbar(props)%20%7B%5Cn%20%20%20%20return%20(%5Cn%20%20%20%20%20%20%20%20%3Cdiv%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%3CThemeButton%20theme%3D%7Bprops.theme%7D%20%2F%3E%5Cn%20%20%20%20%20%20%20%20%3C%2Fdiv%3E%5Cn%20%20%20%20)%5Cn%7D%5Cnclass%20ThemeButton%20extends%20React.Component%20%7B%5Cn%20%20%20%20render()%20%7B%5Cn%20%20%20%20%20%20%20%20%3CButton%20theme%3D%7Bthis.props.theme%7D%3E%E6%8C%89%E9%92%AE%3C%2FButton%3E%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%225a3e07c5%22%7D\"></card><p data-lake-id=\"c2fcbb13669d3e57d1dc5c7e95ef2350_p_215\" id=\"c2fcbb13669d3e57d1dc5c7e95ef2350_p_215\"><br></p><ul list=\"ubfe2ee19\"><li fid=\"uf7c6a2a2\" data-lake-id=\"b525d681dca7035ddb12b113440ec7b3_li_103\" id=\"b525d681dca7035ddb12b113440ec7b3_li_103\"><span data-lake-id=\"uffdf9fe7\" id=\"uffdf9fe7\">使用 </span><code data-lake-id=\"ue1b84166\" id=\"ue1b84166\"><span data-lake-id=\"u911f0f31\" id=\"u911f0f31\">context</span></code></li></ul><p data-lake-id=\"02630234cefdd1a3dfd9b8e850834e4e_p_216\" id=\"02630234cefdd1a3dfd9b8e850834e4e_p_216\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22jsx%22%2C%22code%22%3A%22%2F%2F%20Context%20%E5%8F%AF%E4%BB%A5%E8%AE%A9%E6%88%91%E4%BB%AC%E6%97%A0%E9%A1%BB%E6%98%8E%E7%A1%AE%E5%9C%B0%E4%BC%A0%E9%81%8D%E6%AF%8F%E4%B8%80%E4%B8%AA%E7%BB%84%E4%BB%B6%EF%BC%8C%E5%B0%B1%E8%83%BD%E5%B0%86%E5%80%BC%E6%B7%B1%E5%85%A5%E4%BC%A0%E9%80%92%E8%BF%9B%E7%BB%84%E4%BB%B6%E6%A0%91%E3%80%82%5Cn%2F%2F%20%E4%B8%BA%E5%BD%93%E5%89%8D%E7%9A%84%20theme%20%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%20context%EF%BC%88%E2%80%9Clight%E2%80%9D%E4%B8%BA%E9%BB%98%E8%AE%A4%E5%80%BC%EF%BC%89%E3%80%82%20%20%5Cnconst%20ThemeContext%20%3D%20React.createContext(%5C%22light%5C%22)%3B%5Cn%5Cnclass%20App%20extends%20React.Component%20%7B%5Cn%20%20%20%20render()%20%7B%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E4%BD%BF%E7%94%A8%E4%B8%80%E4%B8%AA%20Provider%20%E6%9D%A5%E5%B0%86%E5%BD%93%E5%89%8D%E7%9A%84%20theme%20%E4%BC%A0%E9%80%92%E7%BB%99%E4%BB%A5%E4%B8%8B%E7%9A%84%E7%BB%84%E4%BB%B6%E6%A0%91%E3%80%82%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E6%97%A0%E8%AE%BA%E5%A4%9A%E6%B7%B1%EF%BC%8C%E4%BB%BB%E4%BD%95%E7%BB%84%E4%BB%B6%E9%83%BD%E8%83%BD%E8%AF%BB%E5%8F%96%E8%BF%99%E4%B8%AA%E5%80%BC%E3%80%82%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E5%9C%A8%E8%BF%99%E4%B8%AA%E4%BE%8B%E5%AD%90%E4%B8%AD%EF%BC%8C%E6%88%91%E4%BB%AC%E5%B0%86%20%E2%80%9Cdark%E2%80%9D%20%E4%BD%9C%E4%B8%BA%E5%BD%93%E5%89%8D%E7%9A%84%E5%80%BC%E4%BC%A0%E9%80%92%E4%B8%8B%E5%8E%BB%E3%80%82%5Cn%20%20%20%20%20%20%20%20return%20(%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%3CThemeContext.Provider%20value%3D%5C%22dark%5C%22%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3CToolbar%20%2F%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%3C%2FThemeContext.Provider%3E%5Cn%20%20%20%20%20%20%20%20)%5Cn%20%20%20%20%7D%5Cn%7D%5Cnfunction%20ToolBar()%20%7B%5Cn%20%20%20%20return%20(%5Cn%20%20%20%20%20%20%20%20%3Cdiv%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%3CThemeButton%20%2F%3E%5Cn%20%20%20%20%20%20%20%20%3C%2Fdiv%3E%5Cn%20%20%20%20)%5Cn%7D%5Cnclass%20ThemeButton%20extends%20React.Component%20%7B%5Cn%20%20%20%20%2F%2F%20%E6%8C%87%E5%AE%9A%20contextType%20%E8%AF%BB%E5%8F%96%E5%BD%93%E5%89%8D%E7%9A%84%20theme%20context%E3%80%82%5Cn%20%20%2F%2F%20React%20%E4%BC%9A%E5%BE%80%E4%B8%8A%E6%89%BE%E5%88%B0%E6%9C%80%E8%BF%91%E7%9A%84%20theme%20Provider%EF%BC%8C%E7%84%B6%E5%90%8E%E4%BD%BF%E7%94%A8%E5%AE%83%E7%9A%84%E5%80%BC%E3%80%82%5Cn%20%20%20%20%2F%2F%20%E5%9C%A8%E8%BF%99%E4%B8%AA%E4%BE%8B%E5%AD%90%E4%B8%AD%EF%BC%8C%E5%BD%93%E5%89%8D%E7%9A%84%20theme%20%E5%80%BC%E4%B8%BA%20%E2%80%9Cdark%E2%80%9D%E3%80%82%5Cn%20%20%20%20static%20contextType%20%3D%20ThemeContext%3B%5Cn%20%20%20%20render()%20%7B%5Cn%20%20%20%20%20%20%20%20return%20%3CButton%20theme%3D%7Bthis.context%7D%3E%E6%8C%89%E9%92%AE%3C%2FButton%3E%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22caeca5a0%22%7D\"></card><p data-lake-id=\"e9b9195071b602f228ecd87131f54a09_p_217\" id=\"e9b9195071b602f228ecd87131f54a09_p_217\"><br></p><h2 data-lake-id=\"663b2eaa\" id=\"663b2eaa\"><span data-lake-id=\"u7718a4d1\" id=\"u7718a4d1\">11. react-hooks</span></h2><p data-lake-id=\"106abb71162cab57d99f22c8182baa6a_p_218\" id=\"106abb71162cab57d99f22c8182baa6a_p_218\"><br></p><blockquote data-lake-id=\"u0b946bb0\" id=\"u0b946bb0\"><p data-lake-id=\"6194c55cf1d33e4f9959d79120e0e79f_p_219\" id=\"6194c55cf1d33e4f9959d79120e0e79f_p_219\"><code data-lake-id=\"ubb3540ca\" id=\"ubb3540ca\"><span data-lake-id=\"uf8d49f0f\" id=\"uf8d49f0f\">Hook</span></code><span data-lake-id=\"u9125f0dc\" id=\"u9125f0dc\"> 是 </span><code data-lake-id=\"uec48e022\" id=\"uec48e022\"><span data-lake-id=\"u5408af94\" id=\"u5408af94\">React 16.8</span></code><span data-lake-id=\"u43de5901\" id=\"u43de5901\"> 的新增特性。它可以让你在不编写 </span><code data-lake-id=\"ua96ac5da\" id=\"ua96ac5da\"><span data-lake-id=\"uef947004\" id=\"uef947004\">class</span></code><span data-lake-id=\"uef86687f\" id=\"uef86687f\"> 的情况下使用 </span><code data-lake-id=\"ubba86703\" id=\"ubba86703\"><span data-lake-id=\"u7f965f9d\" id=\"u7f965f9d\">state</span></code><span data-lake-id=\"ueff0acd7\" id=\"ueff0acd7\"> 以及其他的 </span><code data-lake-id=\"u09423f69\" id=\"u09423f69\"><span data-lake-id=\"u53039d55\" id=\"u53039d55\">React</span></code><span data-lake-id=\"ue594a68f\" id=\"ue594a68f\"> 特性。</span></p></blockquote><p data-lake-id=\"9c56ecf09c84a42020f1c0dd6460690c_p_220\" id=\"9c56ecf09c84a42020f1c0dd6460690c_p_220\"><br></p><h3 data-lake-id=\"e1945b8c\" id=\"e1945b8c\"><span data-lake-id=\"ue5c35fb5\" id=\"ue5c35fb5\">11.1 State Hook</span></h3><p data-lake-id=\"f0c0f2fb8c193860551cee96a133ccba_p_221\" id=\"f0c0f2fb8c193860551cee96a133ccba_p_221\"><br></p><blockquote data-lake-id=\"u2abd5386\" id=\"u2abd5386\"><p data-lake-id=\"5e172b048a5fa346e257347bf65074d7_p_222\" id=\"5e172b048a5fa346e257347bf65074d7_p_222\"><code data-lake-id=\"u288ad218\" id=\"u288ad218\"><span data-lake-id=\"u06273024\" id=\"u06273024\">useState</span></code><span data-lake-id=\"u3944c5d2\" id=\"u3944c5d2\"> 就是一个 </span><code data-lake-id=\"uef69f7a8\" id=\"uef69f7a8\"><span data-lake-id=\"uf3eff207\" id=\"uf3eff207\">Hook</span></code><span data-lake-id=\"uf37b2c7d\" id=\"uf37b2c7d\">，类似 </span><code data-lake-id=\"u058af08a\" id=\"u058af08a\"><span data-lake-id=\"u3e2f3b50\" id=\"u3e2f3b50\">class</span></code><span data-lake-id=\"u3d6f6d30\" id=\"u3d6f6d30\"> 组件的 </span><code data-lake-id=\"ubd73e251\" id=\"ubd73e251\"><span data-lake-id=\"ue27b0dc1\" id=\"ue27b0dc1\">this.setState</span></code><span data-lake-id=\"u3b2a3214\" id=\"u3b2a3214\">，但是它不会把新的 </span><code data-lake-id=\"uf5cd5404\" id=\"uf5cd5404\"><span data-lake-id=\"u20ce5dbd\" id=\"u20ce5dbd\">state</span></code><span data-lake-id=\"u51a578c3\" id=\"u51a578c3\"> 和旧的 </span><code data-lake-id=\"u956784bd\" id=\"u956784bd\"><span data-lake-id=\"ud6e772ca\" id=\"ud6e772ca\">state</span></code><span data-lake-id=\"u62503654\" id=\"u62503654\"> 进行合并。</span><code data-lake-id=\"u9a277457\" id=\"u9a277457\"><span data-lake-id=\"u5be4e69e\" id=\"u5be4e69e\">useState</span></code><span data-lake-id=\"u002eb45a\" id=\"u002eb45a\"> 会返回一对值：</span><em><span data-lake-id=\"u251b8848\" id=\"u251b8848\">当前状态</span></em><span data-lake-id=\"u75e69b96\" id=\"u75e69b96\"> 和一个让你 </span><em><span data-lake-id=\"u259c7479\" id=\"u259c7479\">更新它的函数</span></em><span data-lake-id=\"u425335f7\" id=\"u425335f7\">，你可以在事件处理函数中或其他一些地方调用这个函数。</span></p></blockquote><p data-lake-id=\"7daa843f6e495dd1d2c6696528cc65bd_p_223\" id=\"7daa843f6e495dd1d2c6696528cc65bd_p_223\"><br></p><ul list=\"u2ce0c468\"><li fid=\"u0a64180b\" data-lake-id=\"ba3f67286d86a03633ea5df173e38bed_li_104\" id=\"ba3f67286d86a03633ea5df173e38bed_li_104\"><span data-lake-id=\"u0e0fc188\" id=\"u0e0fc188\">计数器</span></li></ul><p data-lake-id=\"2fb6599da40f309006191e7a2f3cebe9_p_224\" id=\"2fb6599da40f309006191e7a2f3cebe9_p_224\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22jsx%22%2C%22code%22%3A%22import%20React%2C%20%7B%20useState%20%7D%20from%20'react'%3B%5Cn%5Cnfunction%20Example()%20%7B%5Cn%20%20%2F%2F%20%E5%A3%B0%E6%98%8E%E4%B8%80%E4%B8%AA%E5%8F%AB%20%E2%80%9Ccount%E2%80%9D%20%E7%9A%84%20state%20%E5%8F%98%E9%87%8F%E3%80%82%5Cn%20%20const%20%5Bcount%2C%20setCount%5D%20%3D%20useState(0)%3B%5Cn%5Cn%20%20return%20(%5Cn%20%20%20%20%3Cdiv%3E%5Cn%20%20%20%20%20%20%3Cp%3EYou%20clicked%20%7Bcount%7D%20times%3C%2Fp%3E%5Cn%20%20%20%20%20%20%3Cbutton%20onClick%3D%7B()%20%3D%3E%20setCount(count%20%2B%201)%7D%3E%5Cn%20%20%20%20%20%20%20%20Click%20me%5Cn%20%20%20%20%20%20%3C%2Fbutton%3E%5Cn%20%20%20%20%3C%2Fdiv%3E%5Cn%20%20)%3B%5Cn%7D%5Cn%5Cn%2F%2F%20%E7%AD%89%E4%BB%B7%E7%9A%84%20class%20%E7%A4%BA%E4%BE%8B%5Cnclass%20Example%20extends%20React.Component%20%7B%5Cn%20%20constructor(props)%20%7B%5Cn%20%20%20%20super(props)%3B%5Cn%20%20%20%20this.state%20%3D%20%7B%5Cn%20%20%20%20%20%20count%3A%200%5Cn%20%20%20%20%7D%3B%5Cn%20%20%7D%5Cn%5Cn%20%20render()%20%7B%5Cn%20%20%20%20return%20(%5Cn%20%20%20%20%20%20%3Cdiv%3E%5Cn%20%20%20%20%20%20%20%20%3Cp%3EYou%20clicked%20%7Bthis.state.count%7D%20times%3C%2Fp%3E%5Cn%20%20%20%20%20%20%20%20%3Cbutton%20onClick%3D%7B()%20%3D%3E%20this.setState(%7B%20count%3A%20this.state.count%20%2B%201%20%7D)%7D%3E%5Cn%20%20%20%20%20%20%20%20%20%20Click%20me%5Cn%20%20%20%20%20%20%20%20%3C%2Fbutton%3E%5Cn%20%20%20%20%20%20%3C%2Fdiv%3E%5Cn%20%20%20%20)%3B%5Cn%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22377eb488%22%7D\"></card><p data-lake-id=\"3f2f7751b6bc6bbae810562f248d6f49_p_225\" id=\"3f2f7751b6bc6bbae810562f248d6f49_p_225\"><br></p><ul list=\"u51abbf42\"><li fid=\"u5d21af04\" data-lake-id=\"0bdc9d9a521d7140671a00757480b6a5_li_105\" id=\"0bdc9d9a521d7140671a00757480b6a5_li_105\"><span data-lake-id=\"u25b1b260\" id=\"u25b1b260\">声明多个 </span><code data-lake-id=\"u754d1b9e\" id=\"u754d1b9e\"><span data-lake-id=\"u42e90693\" id=\"u42e90693\">state</span></code><span data-lake-id=\"u0f517afa\" id=\"u0f517afa\"> 变量</span></li></ul><p data-lake-id=\"73af83e6e31af8831621458232b96888_p_226\" id=\"73af83e6e31af8831621458232b96888_p_226\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22jsx%22%2C%22code%22%3A%22function%20ExampleWithManyStates()%20%7B%5Cn%20%20%2F%2F%20%E5%A3%B0%E6%98%8E%E5%A4%9A%E4%B8%AA%20state%20%E5%8F%98%E9%87%8F%EF%BC%81%5Cn%20%20const%20%5Bage%2C%20setAge%5D%20%3D%20useState(42)%3B%5Cn%20%20const%20%5Bfruit%2C%20setFruit%5D%20%3D%20useState('banana')%3B%5Cn%20%20const%20%5Btodos%2C%20setTodos%5D%20%3D%20useState(%5B%7B%20text%3A%20'Learn%20Hooks'%20%7D%5D)%3B%5Cn%20%20%2F%2F%20...%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%2231a49c1f%22%7D\"></card><p data-lake-id=\"b90a99f66c0879bbc49e9b0b68e59c08_p_227\" id=\"b90a99f66c0879bbc49e9b0b68e59c08_p_227\"><br></p><ul list=\"ua3595a6c\"><li fid=\"u0f4cf2f6\" data-lake-id=\"16cc16c991871ce385524e13287633eb_li_106\" id=\"16cc16c991871ce385524e13287633eb_li_106\"><span data-lake-id=\"u6350f041\" id=\"u6350f041\">什么是 </span><code data-lake-id=\"ubef0b03d\" id=\"ubef0b03d\"><span data-lake-id=\"u53d9b27c\" id=\"u53d9b27c\">Hook</span></code></li></ul><p data-lake-id=\"bdc03e8bcffcbda15027382924358318_p_228\" id=\"bdc03e8bcffcbda15027382924358318_p_228\"><br></p><blockquote data-lake-id=\"uc2ad45f2\" id=\"uc2ad45f2\"><p data-lake-id=\"8bf911150bc11c31f3bfe2414d7feb0d_p_229\" id=\"8bf911150bc11c31f3bfe2414d7feb0d_p_229\"><code data-lake-id=\"ue5f18bb4\" id=\"ue5f18bb4\"><span data-lake-id=\"u105aab2c\" id=\"u105aab2c\">Hook</span></code><span data-lake-id=\"ud9ed85ff\" id=\"ud9ed85ff\"> 是一些可以让你在函数组件里“钩入” </span><code data-lake-id=\"uec6e40e6\" id=\"uec6e40e6\"><span data-lake-id=\"u9522c860\" id=\"u9522c860\">React state</span></code><span data-lake-id=\"uf9a8a412\" id=\"uf9a8a412\"> 及生命周期等特性的函数。</span><code data-lake-id=\"ubc2fe816\" id=\"ubc2fe816\"><span data-lake-id=\"u7339ce64\" id=\"u7339ce64\">Hook</span></code><span data-lake-id=\"u06830070\" id=\"u06830070\"> 不能在 </span><code data-lake-id=\"u65dd4a4a\" id=\"u65dd4a4a\"><span data-lake-id=\"u1d05f1db\" id=\"u1d05f1db\">class</span></code><span data-lake-id=\"ue3382788\" id=\"ue3382788\"> 组件中使用 —— 这使得你不使用 </span><code data-lake-id=\"u2d7b37cd\" id=\"u2d7b37cd\"><span data-lake-id=\"ubfa861f0\" id=\"ubfa861f0\">class</span></code><span data-lake-id=\"u000ce01a\" id=\"u000ce01a\"> 也能使用 </span><code data-lake-id=\"u38ee9ac9\" id=\"u38ee9ac9\"><span data-lake-id=\"u14f591c8\" id=\"u14f591c8\">React</span></code><span data-lake-id=\"ub8be1547\" id=\"ub8be1547\">。</span></p></blockquote><p data-lake-id=\"8cc0a1f126bf8ee201bd7f38025053c4_p_230\" id=\"8cc0a1f126bf8ee201bd7f38025053c4_p_230\"><br></p><ul list=\"uaf9f7dda\"><li fid=\"u78b9d2e3\" data-lake-id=\"1fede8860a08663340ab5312c0e34e9a_li_107\" id=\"1fede8860a08663340ab5312c0e34e9a_li_107\"><span data-lake-id=\"u0f634193\" id=\"u0f634193\">惰性 state</span></li></ul><p data-lake-id=\"8be5851f8b454d92d5566faca980347b_p_231\" id=\"8be5851f8b454d92d5566faca980347b_p_231\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22jsx%22%2C%22code%22%3A%22const%20%5Bstate%2C%20setState%5D%20%3D%20useState(()%20%3D%3E%20%7B%5Cn%20%20const%20initialState%20%3D%20someExpensiveComputation(props)%3B%5Cn%20%20return%20initialState%3B%5Cn%7D)%3B%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22a9d929e4%22%7D\"></card><p data-lake-id=\"9bf8874c736b2ce6c6ef8eacb225391e_p_232\" id=\"9bf8874c736b2ce6c6ef8eacb225391e_p_232\"><br></p><h3 data-lake-id=\"372afb18\" id=\"372afb18\"><span data-lake-id=\"ua4f5fa3f\" id=\"ua4f5fa3f\">11.2 </span><span data-lake-id=\"u4214a25e\" id=\"u4214a25e\">Effect Hook</span></h3><p data-lake-id=\"18170e7e8da575f5dcb8686e02c401e4_p_233\" id=\"18170e7e8da575f5dcb8686e02c401e4_p_233\"><br></p><blockquote data-lake-id=\"uc01454ee\" id=\"uc01454ee\"><p data-lake-id=\"d045a5e8256de969faa2371b2778f0b6_p_234\" id=\"d045a5e8256de969faa2371b2778f0b6_p_234\"><code data-lake-id=\"u6073e164\" id=\"u6073e164\"><span data-lake-id=\"uc48536a6\" id=\"uc48536a6\">Effect Hook</span></code><span data-lake-id=\"ua94ae332\" id=\"ua94ae332\"> 可以让你在函数组件中执行副作用操作</span></p></blockquote><p data-lake-id=\"e138d80e1ae914d5031cbb3f3c1d8950_p_235\" id=\"e138d80e1ae914d5031cbb3f3c1d8950_p_235\"><br></p><h4 data-lake-id=\"4e2a4a64\" id=\"4e2a4a64\"><span data-lake-id=\"ua95bb3dd\" id=\"ua95bb3dd\">(1) 无需清除的 </span><code data-lake-id=\"u124346bb\" id=\"u124346bb\"><span data-lake-id=\"ue2a602e1\" id=\"ue2a602e1\">Effect</span></code></h4><p data-lake-id=\"c454258df76d70059117b842caffb1bc_p_236\" id=\"c454258df76d70059117b842caffb1bc_p_236\"><br></p><blockquote data-lake-id=\"u0f5db668\" id=\"u0f5db668\"><p data-lake-id=\"1a8b7496dfa83009513752d1566d7a7d_p_237\" id=\"1a8b7496dfa83009513752d1566d7a7d_p_237\"><span data-lake-id=\"u7879d7ea\" id=\"u7879d7ea\">有时候，我们只想在 </span><code data-lake-id=\"u827e4e9e\" id=\"u827e4e9e\"><span data-lake-id=\"u9a8c0ea8\" id=\"u9a8c0ea8\">React</span></code><span data-lake-id=\"u40d7cb5d\" id=\"u40d7cb5d\"> 更新 </span><code data-lake-id=\"uc7e7ad11\" id=\"uc7e7ad11\"><span data-lake-id=\"u36baa866\" id=\"u36baa866\">DOM</span></code><span data-lake-id=\"u318cacd9\" id=\"u318cacd9\"> 之后运行一些额外的代码。比如发送网络请求，手动变更 </span><code data-lake-id=\"u185c9f0b\" id=\"u185c9f0b\"><span data-lake-id=\"ubcd8624f\" id=\"ubcd8624f\">DOM</span></code><span data-lake-id=\"uf4e3a9c2\" id=\"uf4e3a9c2\">，记录日志，这些都是常见的无需清除的操作。因为我们在执行完这些操作之后，就可以忽略他们了。</span></p></blockquote><p data-lake-id=\"6033ae78638b22f9c7b1001e674f8b54_p_238\" id=\"6033ae78638b22f9c7b1001e674f8b54_p_238\"><br></p><ul list=\"u582278a3\"><li fid=\"u0cf0a446\" data-lake-id=\"0a185251f6d42502437287cac191491c_li_108\" id=\"0a185251f6d42502437287cac191491c_li_108\"><span data-lake-id=\"uf483929c\" id=\"uf483929c\">使用 </span><code data-lake-id=\"ubad851c6\" id=\"ubad851c6\"><span data-lake-id=\"ua879d713\" id=\"ua879d713\">class</span></code><span data-lake-id=\"ue3f9c4ce\" id=\"ue3f9c4ce\"> 的示例</span></li></ul><p data-lake-id=\"2a5c77aaadd212cc52fa92db4e5d7833_p_239\" id=\"2a5c77aaadd212cc52fa92db4e5d7833_p_239\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22jsx%22%2C%22code%22%3A%22class%20Example%20extends%20React.Component%20%7B%5Cn%20%20constructor(props)%20%7B%5Cn%20%20%20%20super(props)%3B%5Cn%20%20%20%20this.state%20%3D%20%7B%5Cn%20%20%20%20%20%20count%3A%200%5Cn%20%20%20%20%7D%3B%5Cn%20%20%7D%5Cn%5Cn%20%20componentDidMount()%20%7B%5Cn%20%20%20%20document.title%20%3D%20%60You%20clicked%20%24%7Bthis.state.count%7D%20times%60%3B%5Cn%20%20%7D%5Cn%20%20componentDidUpdate()%20%7B%5Cn%20%20%20%20document.title%20%3D%20%60You%20clicked%20%24%7Bthis.state.count%7D%20times%60%3B%5Cn%20%20%7D%5Cn%5Cn%20%20render()%20%7B%5Cn%20%20%20%20return%20(%5Cn%20%20%20%20%20%20%3Cdiv%3E%5Cn%20%20%20%20%20%20%20%20%3Cp%3EYou%20clicked%20%7Bthis.state.count%7D%20times%3C%2Fp%3E%5Cn%20%20%20%20%20%20%20%20%3Cbutton%20onClick%3D%7B()%20%3D%3E%20this.setState(%7B%20count%3A%20this.state.count%20%2B%201%20%7D)%7D%3E%5Cn%20%20%20%20%20%20%20%20%20%20Click%20me%5Cn%20%20%20%20%20%20%20%20%3C%2Fbutton%3E%5Cn%20%20%20%20%20%20%3C%2Fdiv%3E%5Cn%20%20%20%20)%3B%5Cn%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22995f8a3f%22%7D\"></card><p data-lake-id=\"6a64108399bd39151a0c47ad4f78419e_p_240\" id=\"6a64108399bd39151a0c47ad4f78419e_p_240\"><br></p><ul list=\"u20ee6caa\"><li fid=\"u3a24f088\" data-lake-id=\"3d88c75707ec456c77954f5d4750e474_li_109\" id=\"3d88c75707ec456c77954f5d4750e474_li_109\"><span data-lake-id=\"u0abacbb0\" id=\"u0abacbb0\">使用 </span><code data-lake-id=\"uf9ad563b\" id=\"uf9ad563b\"><span data-lake-id=\"u7f8848fa\" id=\"u7f8848fa\">Hook</span></code><span data-lake-id=\"u6c8a84ea\" id=\"u6c8a84ea\"> 的示例</span></li></ul><p data-lake-id=\"672ca78e6355d2efd6d038cc344f6bcf_p_241\" id=\"672ca78e6355d2efd6d038cc344f6bcf_p_241\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22jsx%22%2C%22code%22%3A%22import%20React%2C%20%7B%20useState%2C%20useEffect%20%7D%20from%20'react'%3B%5Cn%5Cnfunction%20Example()%20%7B%5Cn%20%20const%20%5Bcount%2C%20setCount%5D%20%3D%20useState(0)%3B%5Cn%5Cn%20%20useEffect(()%20%3D%3E%20%7B%5Cn%20%20%20%20document.title%20%3D%20%60You%20clicked%20%24%7Bcount%7D%20times%60%3B%5Cn%20%20%7D)%3B%5Cn%5Cn%20%20return%20(%5Cn%20%20%20%20%3Cdiv%3E%5Cn%20%20%20%20%20%20%3Cp%3EYou%20clicked%20%7Bcount%7D%20times%3C%2Fp%3E%5Cn%20%20%20%20%20%20%3Cbutton%20onClick%3D%7B()%20%3D%3E%20setCount(count%20%2B%201)%7D%3E%5Cn%20%20%20%20%20%20%20%20Click%20me%5Cn%20%20%20%20%20%20%3C%2Fbutton%3E%5Cn%20%20%20%20%3C%2Fdiv%3E%5Cn%20%20)%3B%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22d0218f05%22%7D\"></card><p data-lake-id=\"8205712d24d63d21d2add54ced58c376_p_242\" id=\"8205712d24d63d21d2add54ced58c376_p_242\"><br></p><blockquote data-lake-id=\"uf1d0891a\" id=\"uf1d0891a\"><p data-lake-id=\"7b8a18dfd2ad48bb5709886f4c0941bd_p_243\" id=\"7b8a18dfd2ad48bb5709886f4c0941bd_p_243\"><code data-lake-id=\"u456c4ca4\" id=\"u456c4ca4\"><span data-lake-id=\"ua9ad9877\" id=\"ua9ad9877\">useEffect</span></code><span data-lake-id=\"udbb3f5fe\" id=\"udbb3f5fe\"> 做了什么？ 通过使用这个 </span><code data-lake-id=\"ueba3f9dc\" id=\"ueba3f9dc\"><span data-lake-id=\"uc7243c2a\" id=\"uc7243c2a\">Hook</span></code><span data-lake-id=\"u6c5b252b\" id=\"u6c5b252b\">，你可以告诉 </span><code data-lake-id=\"u88fd68d7\" id=\"u88fd68d7\"><span data-lake-id=\"u6689c142\" id=\"u6689c142\">React</span></code><span data-lake-id=\"u99cf2c97\" id=\"u99cf2c97\"> 组件需要在渲染后执行某些操作。</span><code data-lake-id=\"u22701ab9\" id=\"u22701ab9\"><span data-lake-id=\"ufdc87951\" id=\"ufdc87951\">React</span></code><span data-lake-id=\"u3f033c76\" id=\"u3f033c76\"> 会保存你传递的函数（我们将它称之为 “</span><code data-lake-id=\"ucab9143f\" id=\"ucab9143f\"><span data-lake-id=\"u8b30c9c9\" id=\"u8b30c9c9\">effect</span></code><span data-lake-id=\"u8f5ebc7c\" id=\"u8f5ebc7c\">”），并且在执行 </span><code data-lake-id=\"uaaff2e9c\" id=\"uaaff2e9c\"><span data-lake-id=\"u3a5267da\" id=\"u3a5267da\">DOM</span></code><span data-lake-id=\"u5b28d932\" id=\"u5b28d932\"> 更新之后调用它。在这个 </span><code data-lake-id=\"u37a0d484\" id=\"u37a0d484\"><span data-lake-id=\"u0d2414fa\" id=\"u0d2414fa\">effect</span></code><span data-lake-id=\"u16f9f9fe\" id=\"u16f9f9fe\"> 中，我们设置了 </span><code data-lake-id=\"u3beb25cb\" id=\"u3beb25cb\"><span data-lake-id=\"u014088a3\" id=\"u014088a3\">document</span></code><span data-lake-id=\"ucc462976\" id=\"ucc462976\"> 的 </span><code data-lake-id=\"u46de96fc\" id=\"u46de96fc\"><span data-lake-id=\"u2af0acd4\" id=\"u2af0acd4\">title</span></code><span data-lake-id=\"ueae8a79d\" id=\"ueae8a79d\"> 属性，不过我们也可以执行数据获取或调用其他命令式的 API。</span></p></blockquote><p data-lake-id=\"6676b0fdf5d68f5dfac942cb8c232755_p_244\" id=\"6676b0fdf5d68f5dfac942cb8c232755_p_244\"><br></p><blockquote data-lake-id=\"u665ad65e\" id=\"u665ad65e\"><p data-lake-id=\"0a2b2713a8517a560e093534d7412081_p_245\" id=\"0a2b2713a8517a560e093534d7412081_p_245\"><span data-lake-id=\"ub6cfcf90\" id=\"ub6cfcf90\">为什么在组件内部调用 </span><code data-lake-id=\"u94113593\" id=\"u94113593\"><span data-lake-id=\"u8df0c3c2\" id=\"u8df0c3c2\">useEffect</span></code><span data-lake-id=\"u60b921ef\" id=\"u60b921ef\">？ 将 </span><code data-lake-id=\"ue330aa3c\" id=\"ue330aa3c\"><span data-lake-id=\"u87504303\" id=\"u87504303\">useEffect</span></code><span data-lake-id=\"ud8f30efb\" id=\"ud8f30efb\"> 放在组件内部让我们可以在 </span><code data-lake-id=\"u5a30f18f\" id=\"u5a30f18f\"><span data-lake-id=\"ufe255a05\" id=\"ufe255a05\">effect</span></code><span data-lake-id=\"uf95ef0e9\" id=\"uf95ef0e9\"> 中直接访问 </span><code data-lake-id=\"ubcfb1d26\" id=\"ubcfb1d26\"><span data-lake-id=\"u62b85bcb\" id=\"u62b85bcb\">count</span></code><span data-lake-id=\"ud16bf92b\" id=\"ud16bf92b\"> </span><code data-lake-id=\"u35a744ee\" id=\"u35a744ee\"><span data-lake-id=\"u0b5e3bf7\" id=\"u0b5e3bf7\">state</span></code><span data-lake-id=\"u38796b79\" id=\"u38796b79\"> 变量（或其他 </span><code data-lake-id=\"ub987bb8d\" id=\"ub987bb8d\"><span data-lake-id=\"ue6f30b57\" id=\"ue6f30b57\">props</span></code><span data-lake-id=\"ua7445934\" id=\"ua7445934\">）。我们不需要特殊的 </span><code data-lake-id=\"u54eb3c91\" id=\"u54eb3c91\"><span data-lake-id=\"u388a65af\" id=\"u388a65af\">API</span></code><span data-lake-id=\"u1736766f\" id=\"u1736766f\"> 来读取它 —— 它已经保存在函数作用域中。</span><code data-lake-id=\"u2cb0ba71\" id=\"u2cb0ba71\"><span data-lake-id=\"ufeea4342\" id=\"ufeea4342\">Hook</span></code><span data-lake-id=\"u8002783f\" id=\"u8002783f\"> 使用了 </span><code data-lake-id=\"uad18026d\" id=\"uad18026d\"><span data-lake-id=\"u3b64e6a4\" id=\"u3b64e6a4\">JavaScript</span></code><span data-lake-id=\"uf4f04a3b\" id=\"uf4f04a3b\"> 的闭包机制，而不用在 </span><code data-lake-id=\"u626f83e8\" id=\"u626f83e8\"><span data-lake-id=\"ueb44b336\" id=\"ueb44b336\">JavaScript</span></code><span data-lake-id=\"uea4f7fae\" id=\"uea4f7fae\"> 已经提供了解决方案的情况下，还引入特定的 React API。</span></p></blockquote><p data-lake-id=\"b4dae59027624f33efe1705e43a76835_p_246\" id=\"b4dae59027624f33efe1705e43a76835_p_246\"><br></p><blockquote data-lake-id=\"uaa552462\" id=\"uaa552462\"><p data-lake-id=\"bdd9f0e948d891175ec99ff183800192_p_247\" id=\"bdd9f0e948d891175ec99ff183800192_p_247\"><code data-lake-id=\"u510d9314\" id=\"u510d9314\"><span data-lake-id=\"u1f8a4603\" id=\"u1f8a4603\">useEffect</span></code><span data-lake-id=\"u8b18aab9\" id=\"u8b18aab9\"> 会在每次渲染后都执行吗？ 是的，默认情况下，它在第一次渲染之后和每次更新之后都会执行。（我们稍后会谈到如何控制它。）你可能会更容易接受 </span><code data-lake-id=\"ue0ca5764\" id=\"ue0ca5764\"><span data-lake-id=\"ua7f36820\" id=\"ua7f36820\">effect</span></code><span data-lake-id=\"uc2242629\" id=\"uc2242629\"> 发生在“渲染之后”这种概念，不用再去考虑“挂载”还是“更新”。</span><code data-lake-id=\"uf4593c3c\" id=\"uf4593c3c\"><span data-lake-id=\"u1f517436\" id=\"u1f517436\">React</span></code><span data-lake-id=\"u8876d6a0\" id=\"u8876d6a0\"> 保证了每次运行 </span><code data-lake-id=\"uc112bc37\" id=\"uc112bc37\"><span data-lake-id=\"u5dcb716c\" id=\"u5dcb716c\">effect</span></code><span data-lake-id=\"uaf3d878b\" id=\"uaf3d878b\"> 的同时，</span><code data-lake-id=\"ud9df481f\" id=\"ud9df481f\"><span data-lake-id=\"uf19887e2\" id=\"uf19887e2\">DOM</span></code><span data-lake-id=\"uc51b4efe\" id=\"uc51b4efe\"> 都已经更新完毕。</span></p></blockquote><p data-lake-id=\"bea473518fba3dbf9effb067ddad4499_p_248\" id=\"bea473518fba3dbf9effb067ddad4499_p_248\"><br></p><p data-lake-id=\"01337932e68c66c183172e5205638a2e_p_249\" id=\"01337932e68c66c183172e5205638a2e_p_249\"><span data-lake-id=\"ufca213cc\" id=\"ufca213cc\">{% note warning, 与 </span><code data-lake-id=\"u3a0d4f3b\" id=\"u3a0d4f3b\"><span data-lake-id=\"u0628d40a\" id=\"u0628d40a\">componentDidMount</span></code><span data-lake-id=\"u66362ab3\" id=\"u66362ab3\"> 或 </span><code data-lake-id=\"u46ad323f\" id=\"u46ad323f\"><span data-lake-id=\"u49828174\" id=\"u49828174\">componentDidUpdate</span></code><span data-lake-id=\"u5053d45a\" id=\"u5053d45a\"> 不同，使用 </span><code data-lake-id=\"u4137b477\" id=\"u4137b477\"><span data-lake-id=\"u5d611ba7\" id=\"u5d611ba7\">useEffect</span></code><span data-lake-id=\"u22a67e37\" id=\"u22a67e37\"> 调度的 </span><code data-lake-id=\"u27f6e787\" id=\"u27f6e787\"><span data-lake-id=\"u97a70be2\" id=\"u97a70be2\">effect</span></code><span data-lake-id=\"u23b630fd\" id=\"u23b630fd\"> 不会阻塞浏览器更新屏幕，这让你的应用看起来响应更快。大多数情况下，</span><code data-lake-id=\"u07845a94\" id=\"u07845a94\"><span data-lake-id=\"u611fda1e\" id=\"u611fda1e\">effect</span></code><span data-lake-id=\"uba41a72e\" id=\"uba41a72e\"> 不需要同步地执行。在个别情况下（例如测量布局），有单独的 </span><code data-lake-id=\"uf6dd341c\" id=\"uf6dd341c\"><span data-lake-id=\"ub2d0c9ef\" id=\"ub2d0c9ef\">useLayoutEffect Hook</span></code><span data-lake-id=\"u74a04423\" id=\"u74a04423\"> 供你使用，其 </span><code data-lake-id=\"u1e2f7003\" id=\"u1e2f7003\"><span data-lake-id=\"ucdefb958\" id=\"ucdefb958\">API</span></code><span data-lake-id=\"ud1aca436\" id=\"ud1aca436\"> 与 </span><code data-lake-id=\"u97ec3be7\" id=\"u97ec3be7\"><span data-lake-id=\"ufe7a347b\" id=\"ufe7a347b\">useEffect</span></code><span data-lake-id=\"uf4220780\" id=\"uf4220780\"> 相同。 %}</span></p><p data-lake-id=\"e08beadb42b714218a1b36be3f0f61c1_p_250\" id=\"e08beadb42b714218a1b36be3f0f61c1_p_250\"><br></p><h4 data-lake-id=\"ae972712\" id=\"ae972712\"><span data-lake-id=\"ue72be162\" id=\"ue72be162\">(2) 需要清除的 </span><code data-lake-id=\"u7ea9fd82\" id=\"u7ea9fd82\"><span data-lake-id=\"uca857aa4\" id=\"uca857aa4\">Effect</span></code></h4><p data-lake-id=\"3d18b6b62d151c043218e7d9d07e2abe_p_251\" id=\"3d18b6b62d151c043218e7d9d07e2abe_p_251\"><br></p><blockquote data-lake-id=\"u78b150a7\" id=\"u78b150a7\"><p data-lake-id=\"595f44cae6e670915fb5972c6ed9edc0_p_252\" id=\"595f44cae6e670915fb5972c6ed9edc0_p_252\"><span data-lake-id=\"uc34b6520\" id=\"uc34b6520\">之前，我们研究了如何使用不需要清除的副作用，还有一些副作用是需要清除的。例如订阅外部数据源。这种情况下，清除工作是非常重要的，可以防止引起内存泄露！现在让我们来比较一下如何用 </span><code data-lake-id=\"u124b43cc\" id=\"u124b43cc\"><span data-lake-id=\"u23502202\" id=\"u23502202\">Class</span></code><span data-lake-id=\"u8125ef8a\" id=\"u8125ef8a\"> 和 </span><code data-lake-id=\"u5f23d2c5\" id=\"u5f23d2c5\"><span data-lake-id=\"u171e6dc5\" id=\"u171e6dc5\">Hook</span></code><span data-lake-id=\"u44a8d3a8\" id=\"u44a8d3a8\"> 来实现。</span></p></blockquote><p data-lake-id=\"3515d0f9ecb9499a648a8b4a3ee78839_p_253\" id=\"3515d0f9ecb9499a648a8b4a3ee78839_p_253\"><br></p><ul list=\"ucaed5a2b\"><li fid=\"u4ec6d1ba\" data-lake-id=\"d4061c9ed7c4e9652e5b5bfdc02fa75a_li_110\" id=\"d4061c9ed7c4e9652e5b5bfdc02fa75a_li_110\"><span data-lake-id=\"u30e9801b\" id=\"u30e9801b\">使用 </span><code data-lake-id=\"ucb514a61\" id=\"ucb514a61\"><span data-lake-id=\"u54e264d6\" id=\"u54e264d6\">class</span></code><span data-lake-id=\"u11491161\" id=\"u11491161\"> 的示例</span></li></ul><p data-lake-id=\"d6f5ed1b4d8d8ac6d60ab389ddb41993_p_254\" id=\"d6f5ed1b4d8d8ac6d60ab389ddb41993_p_254\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22jsx%22%2C%22code%22%3A%22class%20FriendStatus%20extends%20React.Component%20%7B%5Cn%20%20constructor(props)%20%7B%5Cn%20%20%20%20super(props)%3B%5Cn%20%20%20%20this.state%20%3D%20%7B%20isOnline%3A%20null%20%7D%3B%5Cn%20%20%20%20this.handleStatusChange%20%3D%20this.handleStatusChange.bind(this)%3B%5Cn%20%20%7D%5Cn%5Cn%20%20componentDidMount()%20%7B%5Cn%20%20%20%20ChatAPI.subscribeToFriendStatus(%5Cn%20%20%20%20%20%20this.props.friend.id%2C%5Cn%20%20%20%20%20%20this.handleStatusChange%5Cn%20%20%20%20)%3B%5Cn%20%20%7D%5Cn%20%20componentWillUnmount()%20%7B%5Cn%20%20%20%20ChatAPI.unsubscribeFromFriendStatus(%5Cn%20%20%20%20%20%20this.props.friend.id%2C%5Cn%20%20%20%20%20%20this.handleStatusChange%5Cn%20%20%20%20)%3B%5Cn%20%20%7D%5Cn%20%20handleStatusChange(status)%20%7B%5Cn%20%20%20%20this.setState(%7B%5Cn%20%20%20%20%20%20isOnline%3A%20status.isOnline%5Cn%20%20%20%20%7D)%3B%5Cn%20%20%7D%5Cn%5Cn%20%20render()%20%7B%5Cn%20%20%20%20if%20(this.state.isOnline%20%3D%3D%3D%20null)%20%7B%5Cn%20%20%20%20%20%20return%20'Loading...'%3B%5Cn%20%20%20%20%7D%5Cn%20%20%20%20return%20this.state.isOnline%20%3F%20'Online'%20%3A%20'Offline'%3B%5Cn%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%224f3f9c70%22%7D\"></card><p data-lake-id=\"97e3b88e8f1bfda10a9dde2c42a136f9_p_255\" id=\"97e3b88e8f1bfda10a9dde2c42a136f9_p_255\"><br></p><ul list=\"u9c188aea\"><li fid=\"u0639de28\" data-lake-id=\"a71a0433592e4e2f516ebaf4a4228dfc_li_111\" id=\"a71a0433592e4e2f516ebaf4a4228dfc_li_111\"><span data-lake-id=\"u256a7366\" id=\"u256a7366\">使用 </span><code data-lake-id=\"ucbc1d602\" id=\"ucbc1d602\"><span data-lake-id=\"udaaba43d\" id=\"udaaba43d\">Hook</span></code><span data-lake-id=\"u99835b1d\" id=\"u99835b1d\"> 的示例</span></li></ul><p data-lake-id=\"df7e8d3180610289b39a308b14a0a4a1_p_256\" id=\"df7e8d3180610289b39a308b14a0a4a1_p_256\"><br></p><p data-lake-id=\"4d8066d27c261fc41a22e9a4df298804_p_257\" id=\"4d8066d27c261fc41a22e9a4df298804_p_257\"><span data-lake-id=\"ufb54ab79\" id=\"ufb54ab79\">{% note warning, 眼尖的读者可能已经注意到了，这个示例还需要编写 componentDidUpdate 方法才能保证完全正确。我们先暂时忽略这一点，本章节中后续部分会介绍它。 %}</span></p><p data-lake-id=\"e1f77a305d41e8c97d8b51cc18da7968_p_258\" id=\"e1f77a305d41e8c97d8b51cc18da7968_p_258\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22jsx%22%2C%22code%22%3A%22import%20React%2C%20%7B%20useState%2C%20useEffect%20%7D%20from%20'react'%3B%5Cn%5Cnfunction%20FriendStatus(props)%20%7B%5Cn%20%20const%20%5BisOnline%2C%20setIsOnline%5D%20%3D%20useState(null)%3B%5Cn%5Cn%20%20useEffect(()%20%3D%3E%20%7B%5Cn%20%20%20%20function%20handleStatusChange(status)%20%7B%5Cn%20%20%20%20%20%20setIsOnline(status.isOnline)%3B%5Cn%20%20%20%20%7D%5Cn%20%20%20%20ChatAPI.subscribeToFriendStatus(props.friend.id%2C%20handleStatusChange)%3B%5Cn%20%20%20%20%2F%2F%20Specify%20how%20to%20clean%20up%20after%20this%20effect%3A%5Cn%20%20%20%20return%20function%20cleanup()%20%7B%5Cn%20%20%20%20%20%20ChatAPI.unsubscribeFromFriendStatus(props.friend.id%2C%20handleStatusChange)%3B%5Cn%20%20%20%20%7D%3B%5Cn%20%20%7D)%3B%5Cn%5Cn%20%20if%20(isOnline%20%3D%3D%3D%20null)%20%7B%5Cn%20%20%20%20return%20'Loading...'%3B%5Cn%20%20%7D%5Cn%20%20return%20isOnline%20%3F%20'Online'%20%3A%20'Offline'%3B%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%2280015c49%22%7D\"></card><p data-lake-id=\"e1752ec3be6731068aa3b2551ab39c93_p_259\" id=\"e1752ec3be6731068aa3b2551ab39c93_p_259\"><br></p><blockquote data-lake-id=\"u9a8fa15f\" id=\"u9a8fa15f\"><p data-lake-id=\"4194101379021d6c4f0a06a840eca86d_p_260\" id=\"4194101379021d6c4f0a06a840eca86d_p_260\"><span data-lake-id=\"uf00d8d07\" id=\"uf00d8d07\">为什么要在 </span><code data-lake-id=\"u5d0109fc\" id=\"u5d0109fc\"><span data-lake-id=\"u27edb236\" id=\"u27edb236\">effect</span></code><span data-lake-id=\"u0843a0cb\" id=\"u0843a0cb\"> 中返回一个函数？ 这是 </span><code data-lake-id=\"u400d22c0\" id=\"u400d22c0\"><span data-lake-id=\"ue6ed2085\" id=\"ue6ed2085\">effect</span></code><span data-lake-id=\"u75c5ce72\" id=\"u75c5ce72\"> 可选的清除机制。每个 </span><code data-lake-id=\"u085ac3f3\" id=\"u085ac3f3\"><span data-lake-id=\"u13e026b0\" id=\"u13e026b0\">effect</span></code><span data-lake-id=\"uaa6827d6\" id=\"uaa6827d6\"> 都可以返回一个清除函数。如此可以将添加和移除订阅的逻辑放在一起。它们都属于 </span><code data-lake-id=\"u722d8dd3\" id=\"u722d8dd3\"><span data-lake-id=\"u537d7136\" id=\"u537d7136\">effect</span></code><span data-lake-id=\"u461ada77\" id=\"u461ada77\"> 的一部分。</span></p></blockquote><p data-lake-id=\"0344f8f97ae50ef300797fddbaffc9a7_p_261\" id=\"0344f8f97ae50ef300797fddbaffc9a7_p_261\"><br></p><blockquote data-lake-id=\"u3b64162f\" id=\"u3b64162f\"><p data-lake-id=\"aa219dab22cd3459d455f11f23f2eb3c_p_262\" id=\"aa219dab22cd3459d455f11f23f2eb3c_p_262\"><code data-lake-id=\"u8a898175\" id=\"u8a898175\"><span data-lake-id=\"ub8b8d2fe\" id=\"ub8b8d2fe\">React</span></code><span data-lake-id=\"u9667d704\" id=\"u9667d704\"> 何时清除 </span><code data-lake-id=\"u0bbaa4d6\" id=\"u0bbaa4d6\"><span data-lake-id=\"u4a17056b\" id=\"u4a17056b\">effect</span></code><span data-lake-id=\"u5a85389e\" id=\"u5a85389e\">？ </span><code data-lake-id=\"u84a181dc\" id=\"u84a181dc\"><span data-lake-id=\"u9aaf483d\" id=\"u9aaf483d\">React</span></code><span data-lake-id=\"u15a7f1c0\" id=\"u15a7f1c0\"> 会在组件卸载的时候执行清除操作。正如之前学到的，</span><code data-lake-id=\"ubb3a7d1e\" id=\"ubb3a7d1e\"><span data-lake-id=\"u91485b85\" id=\"u91485b85\">effect</span></code><span data-lake-id=\"u0c1acdcc\" id=\"u0c1acdcc\"> 在每次渲染的时候都会执行。这就是为什么 </span><code data-lake-id=\"u003d334b\" id=\"u003d334b\"><span data-lake-id=\"ub1d984c6\" id=\"ub1d984c6\">React</span></code><span data-lake-id=\"ue0beea64\" id=\"ue0beea64\"> 会在执行当前 </span><code data-lake-id=\"u390fb170\" id=\"u390fb170\"><span data-lake-id=\"ue0973780\" id=\"ue0973780\">effect</span></code><span data-lake-id=\"ubfbb3399\" id=\"ubfbb3399\"> 之前对上一个 </span><code data-lake-id=\"uc71ace3b\" id=\"uc71ace3b\"><span data-lake-id=\"u823e9ec7\" id=\"u823e9ec7\">effect</span></code><span data-lake-id=\"ued89fc50\" id=\"ued89fc50\"> 进行清除。我们稍后将讨论为什么这将助于避免 </span><code data-lake-id=\"u5287a8aa\" id=\"u5287a8aa\"><span data-lake-id=\"u5c717c1e\" id=\"u5c717c1e\">bug</span></code><span data-lake-id=\"u873895e6\" id=\"u873895e6\"> 以及如何在遇到性能问题时跳过此行为。</span></p></blockquote><p data-lake-id=\"e319add840b73a166328bf789b6ae09d_p_263\" id=\"e319add840b73a166328bf789b6ae09d_p_263\"><br></p><p data-lake-id=\"ce922745bf99aadcd0c991056ccc0c6b_p_264\" id=\"ce922745bf99aadcd0c991056ccc0c6b_p_264\"><span data-lake-id=\"u563ddb54\" id=\"u563ddb54\">{% note warning, 并不是必须为 </span><code data-lake-id=\"u55d44375\" id=\"u55d44375\"><span data-lake-id=\"u33d5c917\" id=\"u33d5c917\">effect</span></code><span data-lake-id=\"u04ca2775\" id=\"u04ca2775\"> 中返回的函数命名。这里我们将其命名为 </span><code data-lake-id=\"ud4a66355\" id=\"ud4a66355\"><span data-lake-id=\"u0239ca4a\" id=\"u0239ca4a\">cleanup</span></code><span data-lake-id=\"u77cee6b9\" id=\"u77cee6b9\"> 是为了表明此函数的目的，但其实也可以返回一个箭头函数或者给起一个别的名字。 %}</span></p><p data-lake-id=\"e4d5668038ec0dd0f47f3473097287e2_p_265\" id=\"e4d5668038ec0dd0f47f3473097287e2_p_265\"><br></p><h3 data-lake-id=\"ede5397c\" id=\"ede5397c\"><span data-lake-id=\"udcfb077a\" id=\"udcfb077a\">11.3 Hook 规则</span></h3><p data-lake-id=\"428555912f5368c5c0732996b2549c24_p_266\" id=\"428555912f5368c5c0732996b2549c24_p_266\"><br></p><h4 data-lake-id=\"ebf8e573\" id=\"ebf8e573\"><span data-lake-id=\"u353df404\" id=\"u353df404\">(1) 只在最顶层使用 </span><code data-lake-id=\"u61cada15\" id=\"u61cada15\"><span data-lake-id=\"u6d4dd5a6\" id=\"u6d4dd5a6\">Hook</span></code></h4><p data-lake-id=\"c1f615bd093ec15198b28dc0cd440916_p_267\" id=\"c1f615bd093ec15198b28dc0cd440916_p_267\"><br></p><blockquote data-lake-id=\"u37298507\" id=\"u37298507\"><p data-lake-id=\"9a29109a9bf8a441ca98b72e3875bfd7_p_268\" id=\"9a29109a9bf8a441ca98b72e3875bfd7_p_268\"><span data-lake-id=\"u4efaba80\" id=\"u4efaba80\">不要在循环，条件或嵌套函数中调用 </span><code data-lake-id=\"u694125db\" id=\"u694125db\"><span data-lake-id=\"ub37eb3ba\" id=\"ub37eb3ba\">Hook</span></code><span data-lake-id=\"u1abb7aa7\" id=\"u1abb7aa7\">， 确保总是在你的 </span><code data-lake-id=\"u95335285\" id=\"u95335285\"><span data-lake-id=\"u4da29017\" id=\"u4da29017\">React</span></code><span data-lake-id=\"u6409767a\" id=\"u6409767a\"> 函数的最顶层调用他们。遵守这条规则，你就能确保 </span><code data-lake-id=\"u9e73fead\" id=\"u9e73fead\"><span data-lake-id=\"ub2d7170f\" id=\"ub2d7170f\">Hook</span></code><span data-lake-id=\"uf8953a5b\" id=\"uf8953a5b\"> 在每一次渲染中都按照同样的顺序被调用。这让 </span><code data-lake-id=\"u08cadad5\" id=\"u08cadad5\"><span data-lake-id=\"ubcd0d4cc\" id=\"ubcd0d4cc\">React</span></code><span data-lake-id=\"u51cd2664\" id=\"u51cd2664\"> 能够在多次的 </span><code data-lake-id=\"ub23e5676\" id=\"ub23e5676\"><span data-lake-id=\"u0285e4fe\" id=\"u0285e4fe\">useState</span></code><span data-lake-id=\"ud8d75077\" id=\"ud8d75077\"> 和 </span><code data-lake-id=\"u389e79d0\" id=\"u389e79d0\"><span data-lake-id=\"u71aa8db3\" id=\"u71aa8db3\">useEffect</span></code><span data-lake-id=\"ua8899c74\" id=\"ua8899c74\"> 调用之间保持 </span><code data-lake-id=\"u9de1a30a\" id=\"u9de1a30a\"><span data-lake-id=\"ub839885c\" id=\"ub839885c\">hook</span></code><span data-lake-id=\"udb59fc01\" id=\"udb59fc01\"> 状态的正确。</span></p></blockquote><p data-lake-id=\"8757c9f7854dde4a72cfc4af616e895a_p_269\" id=\"8757c9f7854dde4a72cfc4af616e895a_p_269\"><br></p><h4 data-lake-id=\"e9917ca1\" id=\"e9917ca1\"><span data-lake-id=\"u4d66b1e4\" id=\"u4d66b1e4\">(2) 只在 </span><code data-lake-id=\"ue1aa0663\" id=\"ue1aa0663\"><span data-lake-id=\"ub1cbea41\" id=\"ub1cbea41\">React</span></code><span data-lake-id=\"u99f62c2c\" id=\"u99f62c2c\"> 函数中调用 </span><code data-lake-id=\"ub37315f6\" id=\"ub37315f6\"><span data-lake-id=\"ub61dfe65\" id=\"ub61dfe65\">Hook</span></code></h4><p data-lake-id=\"f994bede262e74fa3b6f0e70c438222d_p_270\" id=\"f994bede262e74fa3b6f0e70c438222d_p_270\"><br></p><blockquote data-lake-id=\"uf0621504\" id=\"uf0621504\"><p data-lake-id=\"d36bbd05ed516cf28aace858036c2c1c_p_271\" id=\"d36bbd05ed516cf28aace858036c2c1c_p_271\"><span data-lake-id=\"u2950d3c1\" id=\"u2950d3c1\">不要在普通的 </span><code data-lake-id=\"ua68533be\" id=\"ua68533be\"><span data-lake-id=\"u2013b680\" id=\"u2013b680\">JavaScript</span></code><span data-lake-id=\"u59d64b3f\" id=\"u59d64b3f\"> 函数中调用 </span><code data-lake-id=\"udc55e446\" id=\"udc55e446\"><span data-lake-id=\"uf4672e03\" id=\"uf4672e03\">Hook</span></code><span data-lake-id=\"u2d79a3ed\" id=\"u2d79a3ed\">。你可以：</span></p></blockquote><p data-lake-id=\"4af52400f7f68b78e0bfc22f9633493e_p_272\" id=\"4af52400f7f68b78e0bfc22f9633493e_p_272\"><br></p><ul list=\"uf38ad8e8\"><li fid=\"u4bb89efc\" data-lake-id=\"6cc98e70889c4ef9a85df0e22e8ae2ef_li_112\" id=\"6cc98e70889c4ef9a85df0e22e8ae2ef_li_112\"><span data-lake-id=\"uf32e103e\" id=\"uf32e103e\">✅ 在 </span><code data-lake-id=\"u9e94f0be\" id=\"u9e94f0be\"><span data-lake-id=\"udcfe178f\" id=\"udcfe178f\">React</span></code><span data-lake-id=\"uf5798d39\" id=\"uf5798d39\"> 的函数组件中调用 </span><code data-lake-id=\"u69282875\" id=\"u69282875\"><span data-lake-id=\"u1d1b5b20\" id=\"u1d1b5b20\">Hook</span></code></li></ul><ul list=\"u968506b7\"><li fid=\"u7d5c3304\" data-lake-id=\"d1c9f89e13b3b50f5f6df84e34bd0aeb_li_113\" id=\"d1c9f89e13b3b50f5f6df84e34bd0aeb_li_113\"><span data-lake-id=\"u0857a0d6\" id=\"u0857a0d6\">✅ 在自定义 </span><code data-lake-id=\"ufae4e6bd\" id=\"ufae4e6bd\"><span data-lake-id=\"u153df4cd\" id=\"u153df4cd\">Hook</span></code><span data-lake-id=\"u8e684ec1\" id=\"u8e684ec1\"> 中调用其他 </span><code data-lake-id=\"ua8f9a5b7\" id=\"ua8f9a5b7\"><span data-lake-id=\"u668878cf\" id=\"u668878cf\">Hook</span></code></li></ul><p data-lake-id=\"3f2704f87d6ead87f93c1c897ce22fea_p_273\" id=\"3f2704f87d6ead87f93c1c897ce22fea_p_273\"><br></p><h3 data-lake-id=\"27f298a9\" id=\"27f298a9\"><span data-lake-id=\"u3a78cf51\" id=\"u3a78cf51\">11.4 自定义 Hook</span></h3><p data-lake-id=\"a57e3e87113ee096d36d0fd8d72ea1ca_p_274\" id=\"a57e3e87113ee096d36d0fd8d72ea1ca_p_274\"><br></p><blockquote data-lake-id=\"ufc95d217\" id=\"ufc95d217\"><p data-lake-id=\"bc431a05f11463bee4a1e518d9d0e2f0_p_275\" id=\"bc431a05f11463bee4a1e518d9d0e2f0_p_275\"><span data-lake-id=\"u84e157c9\" id=\"u84e157c9\">通过自定义 </span><code data-lake-id=\"u150fd5e2\" id=\"u150fd5e2\"><span data-lake-id=\"ub0840c05\" id=\"ub0840c05\">Hook</span></code><span data-lake-id=\"u0edd4f29\" id=\"u0edd4f29\">，可以将组件逻辑提取到可重用的函数中。</span></p></blockquote><p data-lake-id=\"c2f8a44a9de114d551b6cb9360b19084_p_276\" id=\"c2f8a44a9de114d551b6cb9360b19084_p_276\"><br></p><h4 data-lake-id=\"98ad417c\" id=\"98ad417c\"><span data-lake-id=\"ue87ac9c7\" id=\"ue87ac9c7\">(1) 提取自定义 </span><code data-lake-id=\"ue2249cab\" id=\"ue2249cab\"><span data-lake-id=\"u14a60c7a\" id=\"u14a60c7a\">Hook</span></code></h4><p data-lake-id=\"5e01eae6c8e0e41c350eff7c120f6c4d_p_277\" id=\"5e01eae6c8e0e41c350eff7c120f6c4d_p_277\"><br></p><blockquote data-lake-id=\"ufe345593\" id=\"ufe345593\"><p data-lake-id=\"fed000bbcbba4183a4549443ff02e384_p_278\" id=\"fed000bbcbba4183a4549443ff02e384_p_278\"><span data-lake-id=\"u22d83829\" id=\"u22d83829\">当我们想在两个函数之间共享逻辑时，我们会把它提取到第三个函数中。而组件和 </span><code data-lake-id=\"u832b8681\" id=\"u832b8681\"><span data-lake-id=\"ub3cf4009\" id=\"ub3cf4009\">Hook</span></code><span data-lake-id=\"u3021bc03\" id=\"u3021bc03\"> 都是函数，所以也同样适用这种方式。</span></p></blockquote><p data-lake-id=\"f658905930ba3ab999e81f9ca3773cdd_p_279\" id=\"f658905930ba3ab999e81f9ca3773cdd_p_279\"><br></p><blockquote data-lake-id=\"u6bf9742d\" id=\"u6bf9742d\"><p data-lake-id=\"878ff0c9bceae6501690e7f7870d4c12_p_280\" id=\"878ff0c9bceae6501690e7f7870d4c12_p_280\"><span data-lake-id=\"ueddd458e\" id=\"ueddd458e\">自定义 </span><code data-lake-id=\"udba1415e\" id=\"udba1415e\"><span data-lake-id=\"u60b705ac\" id=\"u60b705ac\">Hook</span></code><span data-lake-id=\"u85451c58\" id=\"u85451c58\"> 是一个函数，其名称以 “</span><code data-lake-id=\"u04ad80f1\" id=\"u04ad80f1\"><span data-lake-id=\"u992c271a\" id=\"u992c271a\">use</span></code><span data-lake-id=\"ub17fce7f\" id=\"ub17fce7f\">” 开头，函数内部可以调用其他的 </span><code data-lake-id=\"ub87a81d1\" id=\"ub87a81d1\"><span data-lake-id=\"uce7727cb\" id=\"uce7727cb\">Hook</span></code><span data-lake-id=\"u0274dc6a\" id=\"u0274dc6a\">。 例如，下面的 </span><code data-lake-id=\"u4ea276f3\" id=\"u4ea276f3\"><span data-lake-id=\"u92e76c64\" id=\"u92e76c64\">useFriendStatus</span></code><span data-lake-id=\"ue520ebfd\" id=\"ue520ebfd\"> 是我们第一个自定义的 </span><code data-lake-id=\"u4651dd02\" id=\"u4651dd02\"><span data-lake-id=\"u0d32ae87\" id=\"u0d32ae87\">Hook</span></code><span data-lake-id=\"u8596a993\" id=\"u8596a993\">:</span></p></blockquote><p data-lake-id=\"31f48e2ab2cc1fa560bafed1287af19b_p_281\" id=\"31f48e2ab2cc1fa560bafed1287af19b_p_281\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22jsx%22%2C%22code%22%3A%22import%20%7B%20useState%2C%20useEffect%20%7D%20from%20'react'%3B%5Cn%5Cnfunction%20useFriendStatus(friendID)%20%7B%5Cn%20%20const%20%5BisOnline%2C%20setIsOnline%5D%20%3D%20useState(null)%3B%5Cn%5Cn%20%20useEffect(()%20%3D%3E%20%7B%5Cn%20%20%20%20function%20handleStatusChange(status)%20%7B%5Cn%20%20%20%20%20%20setIsOnline(status.isOnline)%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20ChatAPI.subscribeToFriendStatus(friendID%2C%20handleStatusChange)%3B%5Cn%20%20%20%20return%20()%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20ChatAPI.unsubscribeFromFriendStatus(friendID%2C%20handleStatusChange)%3B%5Cn%20%20%20%20%7D%3B%5Cn%20%20%7D)%3B%5Cn%5Cn%20%20return%20isOnline%3B%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22b3a1fec4%22%7D\"></card><p data-lake-id=\"2315f10f54bc7e13b39e40a7ef999847_p_282\" id=\"2315f10f54bc7e13b39e40a7ef999847_p_282\"><br></p><h4 data-lake-id=\"44cb8100\" id=\"44cb8100\"><span data-lake-id=\"uec58ead2\" id=\"uec58ead2\">(2) 使用自定义 </span><code data-lake-id=\"uac4c11f5\" id=\"uac4c11f5\"><span data-lake-id=\"u05a4fd07\" id=\"u05a4fd07\">Hook</span></code></h4><p data-lake-id=\"d8862285fa1c5254153b79d80f836d67_p_283\" id=\"d8862285fa1c5254153b79d80f836d67_p_283\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22jsx%22%2C%22code%22%3A%22function%20FriendStatus(props)%20%7B%5Cn%20%20const%20isOnline%20%3D%20useFriendStatus(props.friend.id)%3B%5Cn%5Cn%20%20if%20(isOnline%20%3D%3D%3D%20null)%20%7B%5Cn%20%20%20%20return%20'Loading...'%3B%5Cn%20%20%7D%5Cn%20%20return%20isOnline%20%3F%20'Online'%20%3A%20'Offline'%3B%5Cn%7D%5Cn%5Cnfunction%20FriendListItem(props)%20%7B%5Cn%20%20const%20isOnline%20%3D%20useFriendStatus(props.friend.id)%3B%5Cn%5Cn%20%20return%20(%5Cn%20%20%20%20%3Cli%20style%3D%7B%7B%20color%3A%20isOnline%20%3F%20'green'%20%3A%20'black'%20%7D%7D%3E%5Cn%20%20%20%20%20%20%7Bprops.friend.name%7D%5Cn%20%20%20%20%3C%2Fli%3E%5Cn%20%20)%3B%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22bf94f096%22%7D\"></card><p data-lake-id=\"d643b961309916d9e6d944f2fc2ef443_p_284\" id=\"d643b961309916d9e6d944f2fc2ef443_p_284\"><br></p><h3 data-lake-id=\"e74ceb0d\" id=\"e74ceb0d\"><span data-lake-id=\"u12069029\" id=\"u12069029\">11.5 Hook API 索引</span></h3><p data-lake-id=\"c667c8fb4a9b06dea1ac969618387647_p_285\" id=\"c667c8fb4a9b06dea1ac969618387647_p_285\"><br></p><blockquote data-lake-id=\"u3be93e3b\" id=\"u3be93e3b\"><p data-lake-id=\"430db838db4b7ae260b078822961308c_p_286\" id=\"430db838db4b7ae260b078822961308c_p_286\"><span data-lake-id=\"uf7518820\" id=\"uf7518820\">参见 </span><a href=\"https://react.docschina.org/docs/hooks-reference.html\" target=\"_blank\" data-lake-id=\"u8445b16f\" id=\"u8445b16f\"><span data-lake-id=\"u12fd64a7\" id=\"u12fd64a7\">Hook API</span></a></p></blockquote><p data-lake-id=\"4b09dea2a885c00a614eef1d25a58513_p_287\" id=\"4b09dea2a885c00a614eef1d25a58513_p_287\"><br></p><h4 data-lake-id=\"bd0a855d\" id=\"bd0a855d\"><span data-lake-id=\"u6334bcf3\" id=\"u6334bcf3\">11.5.1 基础 Hook</span></h4><p data-lake-id=\"6d7ea3ddda2a454c5683711790958ce9_p_288\" id=\"6d7ea3ddda2a454c5683711790958ce9_p_288\"><br></p><h5 data-lake-id=\"useState\" id=\"useState\"><span data-lake-id=\"uc2d2c8cd\" id=\"uc2d2c8cd\">useState</span></h5><p data-lake-id=\"eaf89275095ca133033e98ed4b1e7f4f_p_289\" id=\"eaf89275095ca133033e98ed4b1e7f4f_p_289\"><br></p><blockquote data-lake-id=\"uf1630a4a\" id=\"uf1630a4a\"><p data-lake-id=\"5364718a82f5749d0dd14fbf19bd33e5_p_290\" id=\"5364718a82f5749d0dd14fbf19bd33e5_p_290\"><a href=\"#linkUseState\" data-lake-id=\"u800d5346\" id=\"u800d5346\"><span data-lake-id=\"u2e9b732f\" id=\"u2e9b732f\">点击跳转</span></a></p></blockquote><p data-lake-id=\"ad203e3a237b08b1d0d926597eaff133_p_291\" id=\"ad203e3a237b08b1d0d926597eaff133_p_291\"><br></p><h5 data-lake-id=\"useEffect\" id=\"useEffect\"><span data-lake-id=\"ud7314826\" id=\"ud7314826\">useEffect</span></h5><p data-lake-id=\"b97212b73dbf30e62a224a0cb8196f65_p_292\" id=\"b97212b73dbf30e62a224a0cb8196f65_p_292\"><br></p><blockquote data-lake-id=\"u6bb24bf2\" id=\"u6bb24bf2\"><p data-lake-id=\"852828110c3dd638e14b6d097c65cd73_p_293\" id=\"852828110c3dd638e14b6d097c65cd73_p_293\"><a href=\"#linkUseEffect\" data-lake-id=\"u54f3a084\" id=\"u54f3a084\"><span data-lake-id=\"u7adfbc0f\" id=\"u7adfbc0f\">点击跳转</span></a></p></blockquote><p data-lake-id=\"fe7fc0ab45dac8012eef4e5feecabfcd_p_294\" id=\"fe7fc0ab45dac8012eef4e5feecabfcd_p_294\"><br></p><h5 data-lake-id=\"useContext\" id=\"useContext\"><span data-lake-id=\"u85caca3f\" id=\"u85caca3f\">useContext</span></h5><p data-lake-id=\"77fe4e42c2d2d366d1accde6e1c1af59_p_295\" id=\"77fe4e42c2d2d366d1accde6e1c1af59_p_295\"><br></p><blockquote data-lake-id=\"uacea0c9d\" id=\"uacea0c9d\"><p data-lake-id=\"950e0296544b8cdd2b427c1f563d68cd_p_296\" id=\"950e0296544b8cdd2b427c1f563d68cd_p_296\"><span data-lake-id=\"uadcc2307\" id=\"uadcc2307\">订阅 </span><code data-lake-id=\"u816c183d\" id=\"u816c183d\"><span data-lake-id=\"uc64cbb8b\" id=\"uc64cbb8b\">context</span></code><span data-lake-id=\"u63086feb\" id=\"u63086feb\"> 的变化，感觉就是对于获取 </span><code data-lake-id=\"uaad2bf1d\" id=\"uaad2bf1d\"><span data-lake-id=\"ua65d156c\" id=\"ua65d156c\">context</span></code><span data-lake-id=\"u27e58f2d\" id=\"u27e58f2d\"> 的值换了一种写法而已。相对于之前的写法，在函数组件中添加 </span><code data-lake-id=\"uac96f608\" id=\"uac96f608\"><span data-lake-id=\"ufa42751c\" id=\"ufa42751c\">context</span></code><span data-lake-id=\"ua9ed769e\" id=\"ua9ed769e\"> 更加简单。</span></p></blockquote><p data-lake-id=\"4d03ec137080c7a0ce05f378a2fc9078_p_297\" id=\"4d03ec137080c7a0ce05f378a2fc9078_p_297\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22jsx%22%2C%22code%22%3A%22const%20context%20%3D%20React.createContext(%7B%7D)%5Cnconst%20%7B%20Provider%2C%20Consumer%20%20%7D%20%3D%20context%3B%20%5Cn%5Cn%2F%2F%20hooks%E7%9A%84%E5%86%99%E6%B3%95%5Cnclass%20App%20extends%20React.Component%20%7B%5Cn%20%20%20%20return%20(%5Cn%20%20%20%20%20%20%20%20%3CProvider%20value%3D%7B%7B%20name%3A%20'li'%20%7D%7D%3E%20%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%3CHello%2F%3E%5Cn%20%20%20%20%20%20%20%20%3C%2FProvider%3E%5Cn%20%20%20%20%3C%2Fdiv%3E%5Cn%7D%5Cnfunction%20Hello%20()%20%7B%5Cn%20%20%20%20const%20value%20%3D%20useContext(context)%3B%20%5Cn%20%20%20%20return%20%3Ch1%3Evalue%3A%20%7Bvalue.name%7D%3C%2Fh1%3E%5Cn%7D%5Cn%20%20%5Cn%2F%2F%20%E5%8E%9F%E6%9C%AC%E7%9A%84%E5%86%99%E6%B3%95%5Cnfunction%20Hello%20(props)%20%7B%5Cn%20%20%20%20function%20render%20(%7Bname%7D)%20%7B%5Cn%20%20%20%20%20%20return%20%3Ch1%3Evalue%3A%20%7Bvalue.name%7D%3C%2Fh1%3E%5Cn%20%20%20%20%7D%5Cn%20%20%20%20return%20(%5Cn%20%20%20%20%20%20%3CConsumer%3E%5Cn%20%20%20%20%20%20%20%20%7Brender%7D%5Cn%20%20%20%20%20%20%3C%2FConsumer%3E%5Cn%20%20%20%20)%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%2252cee664%22%7D\"></card><p data-lake-id=\"6b7d4d1ce5df30f76ec280811854eb6a_p_298\" id=\"6b7d4d1ce5df30f76ec280811854eb6a_p_298\"><br></p><h4 data-lake-id=\"b56fd342\" id=\"b56fd342\"><span data-lake-id=\"u8813f694\" id=\"u8813f694\">11.5.2 额外的 Hook</span></h4><p data-lake-id=\"f7dab119a6de9c02eceeeaa20c58303b_p_299\" id=\"f7dab119a6de9c02eceeeaa20c58303b_p_299\"><br></p><h5 data-lake-id=\"useReducer\" id=\"useReducer\"><span data-lake-id=\"u625f5b57\" id=\"u625f5b57\">useReducer</span></h5><p data-lake-id=\"3b1704c33fc6d6f8a8da83e196debd0d_p_300\" id=\"3b1704c33fc6d6f8a8da83e196debd0d_p_300\"><br></p><blockquote data-lake-id=\"u561a0840\" id=\"u561a0840\"><p data-lake-id=\"2dd1b1e57a8774e948e6981e306949b5_p_301\" id=\"2dd1b1e57a8774e948e6981e306949b5_p_301\"><span data-lake-id=\"uecfac643\" id=\"uecfac643\">类似于 </span><code data-lake-id=\"uac549112\" id=\"uac549112\"><span data-lake-id=\"u3c4e5523\" id=\"u3c4e5523\">redux</span></code><span data-lake-id=\"u721fee93\" id=\"u721fee93\"> 那样的状态更新方案。使用场景（基本上就是 </span><code data-lake-id=\"u1d962d8f\" id=\"u1d962d8f\"><span data-lake-id=\"u5ac87898\" id=\"u5ac87898\">redux</span></code><span data-lake-id=\"u1b2b4462\" id=\"u1b2b4462\"> 的应用场景），管理的状态值是对象，并且键值较多。</span><code data-lake-id=\"ua401ea46\" id=\"ua401ea46\"><span data-lake-id=\"u190d305e\" id=\"u190d305e\">state</span></code><span data-lake-id=\"u24eb16a3\" id=\"u24eb16a3\"> 每个 </span><code data-lake-id=\"u40c6ca48\" id=\"u40c6ca48\"><span data-lake-id=\"u4c19944c\" id=\"u4c19944c\">key</span></code><span data-lake-id=\"u8f544d09\" id=\"u8f544d09\"> 修改的逻辑比较复杂，需要单独放到一个文件里面管理。</span></p></blockquote><p data-lake-id=\"97a3a563936e81f5bef06c12d11ccafb_p_302\" id=\"97a3a563936e81f5bef06c12d11ccafb_p_302\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22jsx%22%2C%22code%22%3A%22const%20initialState%20%3D%20%7Bcount%3A%200%7D%3B%5Cn%5Cnfunction%20reducer(state%2C%20action)%20%7B%5Cn%20%20switch%20(action.type)%20%7B%5Cn%20%20%20%20case%20'increment'%3A%5Cn%20%20%20%20%20%20return%20%7Bcount%3A%20state.count%20%2B%201%7D%3B%5Cn%20%20%20%20case%20'decrement'%3A%5Cn%20%20%20%20%20%20return%20%7Bcount%3A%20state.count%20-%201%7D%3B%5Cn%20%20%20%20default%3A%5Cn%20%20%20%20%20%20throw%20new%20Error()%3B%5Cn%20%20%7D%5Cn%7D%5Cn%5Cnfunction%20Counter()%20%7B%5Cn%20%20const%20%5Bstate%2C%20dispatch%5D%20%3D%20useReducer(reducer%2C%20initialState)%3B%5Cn%20%20return%20(%5Cn%20%20%20%20%3C%3E%5Cn%20%20%20%20%20%20Count%3A%20%7Bstate.count%7D%5Cn%20%20%20%20%20%20%3Cbutton%20onClick%3D%7B()%20%3D%3E%20dispatch(%7Btype%3A%20'increment'%7D)%7D%3E%2B%3C%2Fbutton%3E%5Cn%20%20%20%20%20%20%3Cbutton%20onClick%3D%7B()%20%3D%3E%20dispatch(%7Btype%3A%20'decrement'%7D)%7D%3E-%3C%2Fbutton%3E%5Cn%20%20%20%20%3C%2F%3E%5Cn%20%20)%3B%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%2209a4c300%22%7D\"></card><p data-lake-id=\"57402685839e485b1d12a6ea6e69cd22_p_303\" id=\"57402685839e485b1d12a6ea6e69cd22_p_303\"><br></p><h5 data-lake-id=\"useCallback\" id=\"useCallback\"><span data-lake-id=\"u1c1c9819\" id=\"u1c1c9819\">useCallback</span></h5><p data-lake-id=\"19e2a238dbc7e25bbba74d975405d802_p_304\" id=\"19e2a238dbc7e25bbba74d975405d802_p_304\"><br></p><blockquote data-lake-id=\"uda655ae0\" id=\"uda655ae0\"><p data-lake-id=\"a6e2775d86bb42dae5ba483bdd63a0ab_p_305\" id=\"a6e2775d86bb42dae5ba483bdd63a0ab_p_305\"><span data-lake-id=\"u7950590e\" id=\"u7950590e\">仅在指定的依赖项发生变化时，会返回一个新的函数引用，函数体并没有发生变化。</span></p></blockquote><p data-lake-id=\"287a7991d15a9423698de5405daff209_p_306\" id=\"287a7991d15a9423698de5405daff209_p_306\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22jsx%22%2C%22code%22%3A%22const%20memoizedCallback%20%3D%20useCallback(%5Cn%20%20()%20%3D%3E%20%7B%5Cn%20%20%20%20doSomething(a%2C%20b)%3B%5Cn%20%20%7D%2C%5Cn%20%20%5Ba%2C%20b%5D%2C%5Cn)%3B%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22464735ad%22%7D\"></card><p data-lake-id=\"6e083a5926a9936a23902c87e04b4686_p_307\" id=\"6e083a5926a9936a23902c87e04b4686_p_307\"><br></p><blockquote data-lake-id=\"u9e1437a2\" id=\"u9e1437a2\"><p data-lake-id=\"82b30015ed4876d6e4fdbea08f0a2755_p_308\" id=\"82b30015ed4876d6e4fdbea08f0a2755_p_308\"><span data-lake-id=\"u8bcc29ff\" id=\"u8bcc29ff\">这样使用的好处：不会在每次组件 </span><code data-lake-id=\"u0a6fa07c\" id=\"u0a6fa07c\"><span data-lake-id=\"uc50b5f1f\" id=\"uc50b5f1f\">render</span></code><span data-lake-id=\"udad0c258\" id=\"udad0c258\"> 的时候，重新生成一个函数，节省开销。例如</span></p></blockquote><p data-lake-id=\"0375f6a488aa68e79b4a160ec7f8fa4d_p_309\" id=\"0375f6a488aa68e79b4a160ec7f8fa4d_p_309\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22jsx%22%2C%22code%22%3A%22function%20f%20()%20%7B%5Cn%20%20const%20cacheCallback%20%3D%20useCallback(%5Cn%20%20%20%20%20%20()%20%3D%3E%20%7B%5Cn%20%20%20%20%5Ct%5Ct%5CtdoSomething(a%2C%20b)%3B%5Cn%20%20%5Ct%5Ct%5Ct%7D%2C%5Cn%20%20%5Ct%5Ct%5Ct%5Ba%2C%20b%5D%2C%5Cn%20%20)%5Cn%20%20%2F%2F%20%E5%92%8C%E4%B8%8B%E9%9D%A2%E8%BF%99%E6%A0%B7%E7%9A%84%E5%BD%A2%E5%BC%8F%E7%9B%B8%E6%AF%94%2C%20%E6%AF%8F%E6%AC%A1%E7%BB%84%E4%BB%B6%E6%B8%B2%E6%9F%93%E7%9A%84%E6%97%B6%E5%80%99%EF%BC%8C%E9%83%BD%E4%BC%9A%E9%87%8D%E6%96%B0%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%20doSometing%20%E5%87%BD%E6%95%B0%5Cn%20%20function%20doSometing%20(a%2Cb)%20%7B%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22d06e5e59%22%7D\"></card><p data-lake-id=\"a56b84e031e02e5715ff0d6aadb83c0e_p_310\" id=\"a56b84e031e02e5715ff0d6aadb83c0e_p_310\"><br></p><blockquote data-lake-id=\"uefb36ce0\" id=\"uefb36ce0\"><p data-lake-id=\"7a9d53268638d0d35d12b26c6ffa2a64_p_311\" id=\"7a9d53268638d0d35d12b26c6ffa2a64_p_311\"><span data-lake-id=\"u69c0934c\" id=\"u69c0934c\">可以保持函数的引用保持不变。我们都知道在类组件，事件处理函数基本上都是通过 </span><code data-lake-id=\"ub5819baf\" id=\"ub5819baf\"><span data-lake-id=\"u1fb87e00\" id=\"u1fb87e00\">this.method</span></code><span data-lake-id=\"u8f7aba4a\" id=\"u8f7aba4a\"> 的方式绑定的，这样做的方式有一个好处，对方法的引用一直保持不变。 那么在函数组件就可以通过使用 </span><code data-lake-id=\"u511bea69\" id=\"u511bea69\"><span data-lake-id=\"ue7172753\" id=\"ue7172753\">useCallback</span></code><span data-lake-id=\"ue46bef8a\" id=\"ue46bef8a\"> 来实现。</span></p></blockquote><p data-lake-id=\"f5c413e64e1bf60658b94f4d5ffba94d_p_312\" id=\"f5c413e64e1bf60658b94f4d5ffba94d_p_312\"><br></p><blockquote data-lake-id=\"u17e9a732\" id=\"u17e9a732\"><p data-lake-id=\"8925408e1047da89dec5a8c65b180965_p_313\" id=\"8925408e1047da89dec5a8c65b180965_p_313\"><span data-lake-id=\"u6b40549f\" id=\"u6b40549f\">可以实现在子组件把该回调作为依赖处理。</span></p></blockquote><p data-lake-id=\"723be51dabd620a0060235545593c061_p_314\" id=\"723be51dabd620a0060235545593c061_p_314\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22jsx%22%2C%22code%22%3A%22function%20Parent%20(%7Ba%2C%20b%7D)%20%7B%5Cn%20%20const%20cacheCallback%20%3D%20useCallback(%5Cn%20%20%20%20%20%20()%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20%20%20doSometing(a%2C%20b)%3B%5Cn%20%20%20%20%20%20%7D%2C%5Cn%20%20%20%20%20%20%5Ba%2C%20b%5D%5Cn%20%20)%5Cn%20%20return%20%3CChild%20handler%3D%7BcacheCallback%7D%2F%3E%5Cn%7D%5Cn%5Cnfunction%20Child%20(%7B%20handler%20%7D)%20%7B%5Cn%20%20useEffect(()%20%3D%3E%20%7B%5Cn%20%20%20%20handler()%3B%5Cn%20%20%7D%2C%20%5Bhandler%5D)%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%229f608cb7%22%7D\"></card><p data-lake-id=\"d66e43a0ceceeaca4196978e5996b0d3_p_315\" id=\"d66e43a0ceceeaca4196978e5996b0d3_p_315\"><br></p><h5 data-lake-id=\"useMemo\" id=\"useMemo\"><span data-lake-id=\"ucadcba7d\" id=\"ucadcba7d\">useMemo</span></h5><p data-lake-id=\"024a8421e8afb441225906c83320d8b8_p_316\" id=\"024a8421e8afb441225906c83320d8b8_p_316\"><br></p><blockquote data-lake-id=\"ub0222311\" id=\"ub0222311\"><p data-lake-id=\"bc4c80115192006539b4cd874696afcb_p_317\" id=\"bc4c80115192006539b4cd874696afcb_p_317\"><span data-lake-id=\"u10b440de\" id=\"u10b440de\">类似于 </span><code data-lake-id=\"u94f81626\" id=\"u94f81626\"><span data-lake-id=\"u7eb8849e\" id=\"u7eb8849e\">vue</span></code><span data-lake-id=\"ubf6e97b1\" id=\"ubf6e97b1\"> 的 </span><code data-lake-id=\"u164e1c3f\" id=\"u164e1c3f\"><span data-lake-id=\"u1d7b006c\" id=\"u1d7b006c\">computed</span></code><span data-lake-id=\"u617e6e6b\" id=\"u617e6e6b\">，在依赖发生变化的时候重新计算缓存值。其实自己实现起来也很容易，和 </span><code data-lake-id=\"u7e6f7703\" id=\"u7e6f7703\"><span data-lake-id=\"u9a5c6a11\" id=\"u9a5c6a11\">vue</span></code><span data-lake-id=\"ub3764fda\" id=\"ub3764fda\"> 的计算属性不同的是，</span><code data-lake-id=\"ude4b71e9\" id=\"ude4b71e9\"><span data-lake-id=\"u89cbea34\" id=\"u89cbea34\">vue</span></code><span data-lake-id=\"u19337fdd\" id=\"u19337fdd\"> 的计算属性是自动收集依赖的，而使用 </span><code data-lake-id=\"ud03582bb\" id=\"ud03582bb\"><span data-lake-id=\"uc8b3ffb7\" id=\"uc8b3ffb7\">useMeno</span></code><span data-lake-id=\"uf1979ed4\" id=\"uf1979ed4\"> 需要手动在数组种传入依赖项。</span></p></blockquote><p data-lake-id=\"10c43070f7361810f0a11bc380b5c8d3_p_318\" id=\"10c43070f7361810f0a11bc380b5c8d3_p_318\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22jsx%22%2C%22code%22%3A%22const%20memoizedValue%20%3D%20useMemo(()%20%3D%3E%20computeExpensiveValue(a%2C%20b)%2C%20%5Ba%2C%20b%5D)%3B%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%2207a99bdf%22%7D\"></card><p data-lake-id=\"4f67f2156dee24fd9a5d4af3856a8608_p_319\" id=\"4f67f2156dee24fd9a5d4af3856a8608_p_319\"><br></p><blockquote data-lake-id=\"u76e16fb5\" id=\"u76e16fb5\"><p data-lake-id=\"d7cc12f9d8b83421210ef072571a4763_p_320\" id=\"d7cc12f9d8b83421210ef072571a4763_p_320\"><code data-lake-id=\"ud44e5b6b\" id=\"ud44e5b6b\"><span data-lake-id=\"u0d1801bb\" id=\"u0d1801bb\">useCallback(fn, deps)</span></code><span data-lake-id=\"u2ea3987d\" id=\"u2ea3987d\"> 相当于 </span><code data-lake-id=\"uc5d6f4f2\" id=\"uc5d6f4f2\"><span data-lake-id=\"u4ffa2cf9\" id=\"u4ffa2cf9\">useMemo(() =&gt; fn, deps)</span></code></p></blockquote><p data-lake-id=\"386408b19add78b5d4538676e07dc69f_p_321\" id=\"386408b19add78b5d4538676e07dc69f_p_321\"><br></p><h5 data-lake-id=\"useRef\" id=\"useRef\"><span data-lake-id=\"ud9431588\" id=\"ud9431588\">useRef</span></h5><p data-lake-id=\"73ec4e895ea3387f14965acf6166c09a_p_322\" id=\"73ec4e895ea3387f14965acf6166c09a_p_322\"><br></p><blockquote data-lake-id=\"uf32f6b76\" id=\"uf32f6b76\"><p data-lake-id=\"f578fdaef4d723a9b9c852386795d01a_p_323\" id=\"f578fdaef4d723a9b9c852386795d01a_p_323\"><span data-lake-id=\"uf717995b\" id=\"uf717995b\">故名思义，该 </span><code data-lake-id=\"ub67f4715\" id=\"ub67f4715\"><span data-lake-id=\"u3e29de28\" id=\"u3e29de28\">hook</span></code><span data-lake-id=\"u46b27070\" id=\"u46b27070\"> 主要是用来获取组件实例或者或者 </span><code data-lake-id=\"udded4f04\" id=\"udded4f04\"><span data-lake-id=\"u2b7d90c5\" id=\"u2b7d90c5\">dom</span></code><span data-lake-id=\"ue6a5eff4\" id=\"ue6a5eff4\"> 节点。 但是它更有用的地方，是可以返回一个在组件生命周期内，引用不变的对象。</span></p></blockquote><p data-lake-id=\"deca07778d4970b7e735a77c95d1efec_p_324\" id=\"deca07778d4970b7e735a77c95d1efec_p_324\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22jsx%22%2C%22code%22%3A%22function%20f%20()%20%7B%5Cn%20%20const%20elRef%20%3D%20uesRef(null)%3B%5Cn%20%20return%20%3Cdiv%20ref%3D%7BelRef%7D%3E%3C%2Fdiv%3E%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22c973c99a%22%7D\"></card><p data-lake-id=\"869206ecba3f946b7a6ba2e46f91db50_p_325\" id=\"869206ecba3f946b7a6ba2e46f91db50_p_325\"><br></p><blockquote data-lake-id=\"ua2152704\" id=\"ua2152704\"><p data-lake-id=\"8082825b1f0a9ee266e2c449ef5f946d_p_326\" id=\"8082825b1f0a9ee266e2c449ef5f946d_p_326\"><span data-lake-id=\"ue49ad278\" id=\"ue49ad278\">用来存储数据的话，考虑下面的场景。</span></p></blockquote><p data-lake-id=\"1260835a1e832a2cbb7274deda8a76af_p_327\" id=\"1260835a1e832a2cbb7274deda8a76af_p_327\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22jsx%22%2C%22code%22%3A%22let%20handler%20%3D%20()%20%3D%3E%20%7B%7D%3B%20%2F%2F%20%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86%E5%87%BD%E6%95%B0%5Cn%2F%2F%20%E4%B8%8D%E4%BD%BF%E7%94%A8%20useRef%2C%20%E5%8F%AF%E4%BB%A5%E4%BD%BF%E7%94%A8%E5%87%BD%E6%95%B0%E5%A4%96%E9%83%A8%E7%9A%84%E4%B8%80%E4%B8%AA%E5%8F%98%E9%87%8F%E6%9D%A5%E5%AD%98%E5%82%A8%E6%95%B0%E6%8D%AE%5Cnfunction%20f%20()%20%7B%5Cn%20%20useEffect(()%20%3D%3E%20%7B%5Cn%20%20%20%20window.addEventListener('scroll'%2C%20handler)%5Cn%20%20%7D%2C%20%5B%5D)%5Cn%20%20%5Cn%20%20const%20moveScroll%20%3D%20useCallback(%5Cn%20%20%20%20()%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20window.removeEventListener('scorll'%2C%20handler)%5Cn%20%20%20%20%7D%2C%5Cn%20%20%20%20%5B%5D%5Cn%20%20)%5Cn%20%20%5Cn%20%20return%20%3Cdiv%20onClick%3D%7BmoveScroll%7D%20ref%3D%7BelRef%7D%3E%E7%A7%BB%E9%99%A4scroll%E7%9B%91%E5%90%AC%3C%2Fdiv%3E%5Cn%7D%5Cn%5Cn%2F%2F%20%E4%BD%BF%E7%94%A8useRef%E7%9A%84%E7%89%88%E6%9C%AC%EF%BC%8C%E5%8F%AF%E4%BB%A5%E4%BD%BF%E4%BB%A3%E7%A0%81%E6%9B%B4%E5%8A%A0%E5%86%85%E8%81%9A%E3%80%82%E4%BD%86%E6%98%AF%E5%89%8D%E6%8F%90%E6%98%AF%E5%BF%85%E9%A1%BB%E8%A6%81%E7%90%86%E8%A7%A3useRef%E8%BF%99%E4%B8%AAhooks%E3%80%82%5Cnfunction%20f%20()%20%7B%5Cn%20%20%5Cn%20%20const%20handler%20%3D%20useRef(null)%3B%5Cn%20%20handler.current%20%3D%20()%20%3D%3E%20%7B%7D%20%20%2F%2F%20%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86%5Cn%20%20%5Cn%20%20useEffect(()%20%3D%3E%20%7B%5Cn%20%20%20%20window.addEventListener('scroll'%2C%20handler.current)%5Cn%20%20%7D%2C%20%5B%5D)%5Cn%20%20%5Cn%20%20const%20moveScroll%20%3D%20useCallback(%5Cn%20%20%20%20()%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20window.removeEventListener('scorll'%2C%20handler.current)%5Cn%20%20%20%20%7D%2C%5Cn%20%20%20%20%5B%5D%5Cn%20%20)%5Cn%20%20%5Cn%20%20return%20%3Cdiv%20onClick%3D%7BmoveScroll%7D%20ref%3D%7BelRef%7D%3E%E7%A7%BB%E9%99%A4scroll%E7%9B%91%E5%90%AC%3C%2Fdiv%3E%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22e32e8689%22%7D\"></card><p data-lake-id=\"41eae880938c5eadbe95b939a2a3507a_p_328\" id=\"41eae880938c5eadbe95b939a2a3507a_p_328\"><br></p><h5 data-lake-id=\"useImperativeHandle\" id=\"useImperativeHandle\"><span data-lake-id=\"u2426ac1c\" id=\"u2426ac1c\">useImperativeHandle</span></h5><p data-lake-id=\"367e571e142935bde23beca7770f783a_p_329\" id=\"367e571e142935bde23beca7770f783a_p_329\"><br></p><blockquote data-lake-id=\"u8735422b\" id=\"u8735422b\"><p data-lake-id=\"346c494867441d85d4a218b69537f76a_p_330\" id=\"346c494867441d85d4a218b69537f76a_p_330\"><code data-lake-id=\"u2e4daffc\" id=\"u2e4daffc\"><span data-lake-id=\"u6d8566cd\" id=\"u6d8566cd\">useImperativeHandle</span></code><span data-lake-id=\"u474c9362\" id=\"u474c9362\"> 可以让你在使用 </span><code data-lake-id=\"ud45f516c\" id=\"ud45f516c\"><span data-lake-id=\"u0bc59fb8\" id=\"u0bc59fb8\">ref</span></code><span data-lake-id=\"uf2e45e37\" id=\"uf2e45e37\"> 时自定义暴露给父组件的实例值。</span></p></blockquote><p data-lake-id=\"df5870a4b055e4cd4943273fac462f51_p_331\" id=\"df5870a4b055e4cd4943273fac462f51_p_331\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22jsx%22%2C%22code%22%3A%22const%20Fancy%20%3D%20React.forwardRef((props%2C%20ref)%20%3D%3E%20%7B%5Cn%20%20%20%20return%20%3Cdiv%3E%5Cn%20%20%20%20%20%20%20%20%3Cinput%20type%3D%5C%22text%5C%22%20ref%3D%7Bref%7D%2F%3E%5Cn%20%20%20%20%3C%2Fdiv%3E%20%5Cn%7D)%5Cn%5Cnfunction%20Hello%20()%20%7B%5Cn%20%20%20%20const%20ref%20%3D%20useRef(null)%3B%20%5Cn%5Cn%20%20%20%20useEffect(()%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20%20%20console.log('current'%2C%20ref)%3B%20%2F%2F%20%7B%20current%3A%20Input%20%7D%5Cn%20%20%20%20%7D%2C%20%5B%5D)%5Cn%5Cn%20%20%20%20return%20%3CFancy%20ref%3D%7Bref%7D%2F%3E%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%225e639950%22%7D\"></card><p data-lake-id=\"103e6bdcb2dcc51c8de25c5d976a9f93_p_332\" id=\"103e6bdcb2dcc51c8de25c5d976a9f93_p_332\"><br></p><h5 data-lake-id=\"useLayoutEffect\" id=\"useLayoutEffect\"><span data-lake-id=\"u2f0c3d0e\" id=\"u2f0c3d0e\">useLayoutEffect</span></h5><p data-lake-id=\"b4252b6b2deddfea7cfc17616ff2e148_p_333\" id=\"b4252b6b2deddfea7cfc17616ff2e148_p_333\"><br></p><blockquote data-lake-id=\"ue0a8342f\" id=\"ue0a8342f\"><p data-lake-id=\"7814d4e5bccce1c4045244e5aafe4a71_p_334\" id=\"7814d4e5bccce1c4045244e5aafe4a71_p_334\"><span data-lake-id=\"u67fa1955\" id=\"u67fa1955\">函数签名和 </span><code data-lake-id=\"u814294cf\" id=\"u814294cf\"><span data-lake-id=\"u1064d557\" id=\"u1064d557\">useEffect</span></code><span data-lake-id=\"uc113f27e\" id=\"uc113f27e\"> 是一样的， 可以使用它来读取 </span><code data-lake-id=\"u098c8eba\" id=\"u098c8eba\"><span data-lake-id=\"u03614420\" id=\"u03614420\">DOM</span></code><span data-lake-id=\"u2feaac2d\" id=\"u2feaac2d\"> 布局并 </span><code data-lake-id=\"ub2e80b86\" id=\"ub2e80b86\"><span data-lake-id=\"ubd263191\" id=\"ubd263191\">同步</span></code><span data-lake-id=\"ueb7f9004\" id=\"ueb7f9004\"> 触发重渲染。</span></p></blockquote><p data-lake-id=\"848d57ddbbb6aa5c588defcda9c65bc0_p_335\" id=\"848d57ddbbb6aa5c588defcda9c65bc0_p_335\"><br></p><h5 data-lake-id=\"useDebugValue\" id=\"useDebugValue\"><span data-lake-id=\"u3772cde0\" id=\"u3772cde0\">useDebugValue</span></h5><p data-lake-id=\"41b79b76dff04c782ee1693f129a0de3_p_336\" id=\"41b79b76dff04c782ee1693f129a0de3_p_336\"><br></p><blockquote data-lake-id=\"u10cde022\" id=\"u10cde022\"><p data-lake-id=\"8cb0bbf6076bd8a3c0a05716e4c3dc6f_p_337\" id=\"8cb0bbf6076bd8a3c0a05716e4c3dc6f_p_337\"><span data-lake-id=\"u2b6db8ac\" id=\"u2b6db8ac\">用来给 </span><code data-lake-id=\"u8d826731\" id=\"u8d826731\"><span data-lake-id=\"ue01b782c\" id=\"ue01b782c\">hooks</span></code><span data-lake-id=\"ud41ca541\" id=\"ud41ca541\"> 添加上打印信息。</span></p></blockquote>",
  "body_draft_lake": "",
  "public": 0,
  "status": 1,
  "view_status": 0,
  "read_status": 1,
  "likes_count": 0,
  "comments_count": 0,
  "content_updated_at": "2022-03-13T09:46:41.000Z",
  "deleted_at": null,
  "created_at": "2020-08-09T11:03:56.000Z",
  "updated_at": "2022-03-13T09:58:45.000Z",
  "published_at": "2022-03-13T09:46:41.000Z",
  "first_published_at": "2020-08-09T11:03:56.000Z",
  "word_count": 8116,
  "cover": "https://cdn.nlark.com/yuque/0/2020/png/732231/1608703835856-e1263bac-124a-40da-ae3c-b45a4c8081ae.png",
  "description": "1. React 中的核心概念虚拟DOMDOM 的本质是什么？浏览器中的概念，用js对象来表示页面上的元素，并提供了操作 DOM 对象的 API；什么是 React 中的 虚拟DOM？（ 虚拟DOM 的本质）：用js对象来模拟 页面上的DOM和DOM嵌套为什么要实现 虚拟DOM ？（ 虚拟DO...",
  "custom_description": null,
  "hits": 0,
  "_serializer": "v2.doc_detail"
}