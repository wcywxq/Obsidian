{
  "id": 69584083,
  "slug": "uyhudu",
  "title": "计算机网络精选",
  "book_id": 25332296,
  "book": {
    "id": 25332296,
    "type": "Book",
    "slug": "xxble8",
    "name": "前端技术文章",
    "user_id": 732231,
    "description": "记录前端相关的技术性文章",
    "creator_id": 732231,
    "public": 0,
    "items_count": 23,
    "likes_count": 0,
    "watches_count": 1,
    "content_updated_at": "2022-06-15T01:16:19.043Z",
    "updated_at": "2023-11-11T18:11:38.000Z",
    "created_at": "2022-03-13T09:55:39.000Z",
    "namespace": "wcywxq/xxble8",
    "user": {
      "id": 732231,
      "type": "User",
      "login": "wcywxq",
      "name": "magic",
      "description": null,
      "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/732231/1606968271774-avatar/886ad88b-d2cc-4c9e-a674-f70eb51a679c.png",
      "books_count": 18,
      "public_books_count": 0,
      "followers_count": 0,
      "following_count": 0,
      "created_at": "2020-01-08T14:21:31.000Z",
      "updated_at": "2023-11-13T09:32:35.000Z",
      "_serializer": "v2.user"
    },
    "_serializer": "v2.book"
  },
  "user_id": 732231,
  "creator": {
    "id": 732231,
    "type": "User",
    "login": "wcywxq",
    "name": "magic",
    "description": null,
    "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/732231/1606968271774-avatar/886ad88b-d2cc-4c9e-a674-f70eb51a679c.png",
    "books_count": 18,
    "public_books_count": 0,
    "followers_count": 0,
    "following_count": 0,
    "created_at": "2020-01-08T14:21:31.000Z",
    "updated_at": "2023-11-13T09:32:35.000Z",
    "_serializer": "v2.user"
  },
  "format": "lake",
  "body": "<a name=\"g3Ijk\"></a>\n## 传输层\n传输层协议主要是为不同主机上的不同进程间提供了逻辑通信的功能。传输层只工作在端系统中。\n<a name=\"TDltc\"></a>\n### 多路复用与多路分解\n将传输层报文段中的数据交付到正确的套接字的工作被称为多路分解。<br />在源主机上从不同的套接字中收集数据，封装头信息生成报文段后，将报文段传递到网络层，这个过程被称为多路复用。<br />无连接的多路复用和多路分解指的是 UDP 套接字的分配过程，一个 UDP 套接字由一个二元组来标识，这个二元组包含了一<br />个目的地址和一个目的端口号。因此不同源地址和端口号的 UDP 报文段到达主机后，如果它们拥有相同的目的地址和目的端<br />口号，那么不同的报文段将会转交到同一个 UDP 套接字中。<br />面向连接的多路复用和多路分解指的是 TCP 套接字的分配过程，一个 TCP 套接字由一个四元组来标识，这个四元组包含了<br />源 IP 地址、源端口号、目的地址和目的端口号。因此，一个 TCP 报文段从网络中到达一台主机上时，该主机使用全部 4 个<br />值来将报文段定向到相应的套接字。\n<a name=\"THKiA\"></a>\n### UDP 协议\nUDP 是一种无连接的，不可靠的传输层协议。它只提供了传输层需要实现的最低限度的功能，除了复用/分解功能和少量的差<br />错检测外，它几乎没有对 IP 增加其他的东西。UDP 协议适用于对实时性要求高的应用场景。<br />特点：\n\n1. 使用 UDP 时，在发送报文段之前，通信双方没有握手的过程，因此 UDP 被称为是无连接的传输层协议。因为没有握手<br />过程，相对于 TCP 来说，没有建立连接的时延。因为没有连接，所以不需要在端系统中保存连接的状态。\n2. UDP 提供尽力而为的交付服务，也就是说 UDP 协议不保证数据的可靠交付。\n3. UDP 没有拥塞控制和流量控制的机制，所以 UDP 报文段的发送速率没有限制。\n4. 因为一个 UDP 套接字只使用目的地址和目的端口来标识，所以 UDP 可以支持一对一、一对多、多对一和多对多的交互<br />通信。\n5. UDP 首部小，只有 8 个字节。\n<a name=\"Q9MaN\"></a>\n### UDP 报文段结构\nUDP 报文段由首部和应用数据组成。报文段首部包含四个字段，分别是源端口号、目的端口号、长度和检验和，每个字段的长<br />度为两个字节。长度字段指的是整个报文段的长度，包含了首部和应用数据的大小。校验和是 UDP 提供的一种差错校验机制。<br />虽然提供了差错校验的机制，但是 UDP 对于差错的恢复无能为力。<br />![image.png](https://cdn.nlark.com/yuque/0/2022/png/732231/1647358828647-a5fcf4e0-a755-4189-ac81-8563aca79f9e.png#clientId=ue2b5ebeb-dae8-4&from=paste&id=u47cb5370&originHeight=192&originWidth=220&originalType=url&ratio=1&size=38840&status=done&style=none&taskId=ucea0b5d2-7d3d-4625-8014-94f762d329b)\n<a name=\"yOWDS\"></a>\n### TCP 协议\nTCP 协议是面向连接的，提供可靠数据传输服务的传输层协议。<br />特点：\n\n1. TCP 协议是面向连接的，在通信双方进行通信前，需要通过三次握手建立连接。它需要在端系统中维护双方连接的状态信息。\n2. TCP 协议通过序号、确认号、定时重传、检验和等机制，来提供可靠的数据传输服务。\n3. TCP 协议提供的是点对点的服务，即它是在单个发送方和单个接收方之间的连接。\n4. TCP 协议提供的是全双工的服务，也就是说连接的双方的能够向对方发送和接收数据。\n5. TCP 提供了拥塞控制机制，在网络拥塞的时候会控制发送数据的速率，有助于减少数据包的丢失和减轻网络中的拥塞程度。\n6. TCP 提供了流量控制机制，保证了通信双方的发送和接收速率相同。如果接收方可接收的缓存很小时，发送方会降低发送<br />速率，避免因为缓存填满而造成的数据包的丢失。\n<a name=\"hSJTU\"></a>\n### TCP 报文段结构\nTCP 报文段由首部和数据组成，它的首部一般为 20 个字节。<br />源端口和目的端口号用于报文段的多路复用和分解。<br />32 比特的序号和 32 比特的确认号，用与实现可靠数据运输服务。<br />16 比特的接收窗口字段用于实现流量控制，该字段表示接收方愿意接收的字节的数量。<br />4 比特的首部长度字段，该字段指示了以 32 比特的字为单位的 TCP 首部的长度。<br />6 比特的标志字段，ACK 字段用于指示确认序号的值是有效的，RST、SYN 和 FIN 比特用于连接建立和拆除。设置 PSH 字<br />段指示接收方应该立即将数据交给上层，URG 字段用来指示报文段里存在紧急的数据。<br />校验和提供了对数据的差错检测。<br />![image.png](https://cdn.nlark.com/yuque/0/2022/png/732231/1647358828853-3b085082-d04c-43bf-8071-02b28c5d9270.png#clientId=ue2b5ebeb-dae8-4&from=paste&id=uaa98eaf7&originHeight=315&originWidth=338&originalType=url&ratio=1&size=95085&status=done&style=none&taskId=u6ad690a4-6914-4271-8392-93e15f8c67b)\n<a name=\"V3jQj\"></a>\n### TCP 三次握手的过程\n第一次握手，客户端向服务器发送一个 SYN 连接请求报文段，报文段的首部中 SYN 标志位置为 1，序号字段是一个任选的<br />随机数。它代表的是客户端数据的初始序号。<br />第二次握手，服务器端接收到客户端发送的 SYN 连接请求报文段后，服务器首先会为该连接分配 TCP 缓存和变量，然后向<br />客户端发送 SYN ACK 报文段，报文段的首部中 SYN 和 ACK 标志位都被置为 1，代表这是一个对 SYN 连接请求的确认，<br />同时序号字段是服务器端产生的一个任选的随机数，它代表的是服务器端数据的初始序号。确认号字段为客户端发送的序号加<br />一。<br />第三次握手，客户端接收到服务器的肯定应答后，它也会为这次 TCP 连接分配缓存和变量，同时向服务器端发送一个对服务<br />器端的报文段的确认。第三次握手可以在报文段中携带数据。<br />在我看来，TCP 三次握手的建立连接的过程就是相互确认初始序号的过程，告诉对方，什么样序号的报文段能够被正确接收。<br />第三次握手的作用是客户端对服务器端的初始序号的确认。如果只使用两次握手，那么服务器就没有办法知道自己的序号是否<br />已被确认。同时这样也是为了防止失效的请求报文段被服务器接收，而出现错误的情况。<br />详细资料可以参考：<br />[《TCP 为什么是三次握手，而不是两次或四次？》](https://www.zhihu.com/question/24853633)<br />[《TCP 的三次握手与四次挥手》](https://blog.csdn.net/qzcsu/article/details/72861891)\n<a name=\"yqbjc\"></a>\n### TCP 四次挥手的过程\n因为 TCP 连接是全双工的，也就是说通信的双方都可以向对方发送和接收消息，所以断开连接需要双方的确认。<br />第一次挥手，客户端认为没有数据要再发送给服务器端，它就向服务器发送一个 FIN 报文段，申请断开客户端到服务器端的<br />连接。发送后客户端进入 FIN_WAIT_1 状态。<br />第二次挥手，服务器端接收到客户端释放连接的请求后，向客户端发送一个确认报文段，表示已经接收到了客户端释放连接的<br />请求，以后不再接收客户端发送过来的数据。但是因为连接是全双工的，所以此时，服务器端还可以向客户端发送数据。服务<br />器端进入 CLOSE_WAIT 状态。客户端收到确认后，进入 FIN_WAIT_2 状态。<br />第三次挥手，服务器端发送完所有数据后，向客户端发送 FIN 报文段，申请断开服务器端到客户端的连接。发送后进入 LAS<br />T_ACK 状态。<br />第四次挥手，客户端接收到 FIN 请求后，向服务器端发送一个确认应答，并进入 TIME_WAIT 阶段。该阶段会持续一段时间，<br />这个时间为报文段在网络中的最大生存时间，如果该时间内服务端没有重发请求的话，客户端进入 CLOSED 的状态。如果收到<br />服务器的重发请求就重新发送确认报文段。服务器端收到客户端的确认报文段后就进入 CLOSED 状态，这样全双工的连接就被<br />释放了。<br />TCP 使用四次挥手的原因是因为 TCP 的连接是全双工的，所以需要双方分别释放到对方的连接，单独一方的连接释放，只代<br />表不能再向对方发送数据，连接处于的是半释放的状态。<br />最后一次挥手中，客户端会等待一段时间再关闭的原因，是为了防止发送给服务器的确认报文段丢失或者出错，从而导致服务器<br />端不能正常关闭。<br />详细资料可以参考：<br />[《前端面试之道》](https://juejin.im/book/5bdc715fe51d454e755f75ef/section/5c447392e51d45524b02eaf5)\n<a name=\"LjYDN\"></a>\n### 状态转化图\n![image.png](https://cdn.nlark.com/yuque/0/2022/png/732231/1647358828835-ea3a9e8e-c593-4b02-882c-c3262d08192b.png#clientId=ue2b5ebeb-dae8-4&from=paste&id=u76f0851c&originHeight=372&originWidth=479&originalType=url&ratio=1&size=124726&status=done&style=none&taskId=u7490fe82-fcd9-4fdc-b0a5-a4ced46fe66)<br />![image.png](https://cdn.nlark.com/yuque/0/2022/png/732231/1647358829001-4a19b5b8-71b0-49f0-ae8d-b289001d1978.png#clientId=ue2b5ebeb-dae8-4&from=paste&id=u43a18ca6&originHeight=364&originWidth=485&originalType=url&ratio=1&size=120002&status=done&style=none&taskId=ub3ea011a-e523-490d-9a4e-c234be14eb3)\n<a name=\"Hm7FQ\"></a>\n### ARQ 协议\nARQ 协议指的是自动重传请求，它通过超时和重传来保证数据的可靠交付，它是 TCP 协议实现可靠数据传输的一个很重要的<br />机制。<br />它分为停止等待 ARQ 协议和连续 ARQ 协议。<br />一、停止等待 ARQ 协议<br />停止等待 ARQ 协议的基本原理是，对于发送方来说发送方每发送一个分组，就为这个分组设置一个定时器。当发送分组的确认<br />回答返回了，则清除定时器，发送下一个分组。如果在规定的时间内没有收到已发送分组的肯定回答，则重新发送上一个分组。<br />对于接受方来说，每次接受到一个分组，就返回对这个分组的肯定应答，当收到冗余的分组时，就直接丢弃，并返回一个对冗余<br />分组的确认。当收到分组损坏的情况的时候，直接丢弃。<br />使用停止等待 ARQ 协议的缺点是每次发送分组必须等到分组确认后才能发送下一个分组，这样会造成信道的利用率过低。<br />二、连续 ARQ 协议<br />连续 ARQ 协议是为了解决停止等待 ARQ 协议对于信道的利用率过低的问题。它通过连续发送一组分组，然后再等待对分组的<br />确认回答，对于如何处理分组中可能出现的差错恢复情况，一般可以使用滑动窗口协议和选择重传协议来实现。\n\n1. 滑动窗口协议\n\n使用滑动窗口协议，在发送方维持了一个发送窗口，发送窗口以前的分组是已经发送并确认了的分组，发送窗口中包含了已经发<br />送但未确认的分组和允许发送但还未发送的分组，发送窗口以后的分组是缓存中还不允许发送的分组。当发送方向接收方发送分<br />组时，会依次发送窗口内的所有分组，并且设置一个定时器，这个定时器可以理解为是最早发送但未收到确认的分组。如果在定<br />时器的时间内收到某一个分组的确认回答，则滑动窗口，将窗口的首部移动到确认分组的后一个位置，此时如果还有已发送但没<br />有确认的分组，则重新设置定时器，如果没有了则关闭定时器。如果定时器超时，则重新发送所有已经发送但还未收到确认的分<br />组。<br />接收方使用的是累计确认的机制，对于所有按序到达的分组，接收方返回一个分组的肯定回答。如果收到了一个乱序的分组，那<br />么接方会直接丢弃，并返回一个最近的按序到达的分组的肯定回答。使用累计确认保证了确认号以前的分组都已经按序到达了，<br />所以发送窗口可以移动到已确认分组的后面。<br />滑动窗口协议的缺点是因为使用了累计确认的机制，如果出现了只是窗口中的第一个分组丢失，而后面的分组都按序到达的情况<br />的话，那么滑动窗口协议会重新发送所有的分组，这样就造成了大量不必要分组的丢弃和重传。\n\n1. 选择重传协议\n\n因为滑动窗口使用累计确认的方式，所以会造成很多不必要分组的重传。使用选择重传协议可以解决这个问题。<br />选择重传协议在发送方维护了一个发送窗口。发送窗口的以前是已经发送并确认的分组，窗口内包含了已发送但未被确认的分组，<br />已确认的乱序分组，和允许发送但还未发送的分组，发送窗口以后的是缓存中还不允许发送的分组。选择重传协议与滑动窗口协<br />议最大的不同是，发送方发送分组时，为一个分组都创建了一个定时器。当发送方接受到一个分组的确认应答后，取消该分组的<br />定时器，并判断接受该分组后，是否存在由窗口首部为首的连续的确认分组，如果有则向后移动窗口的位置，如果没有则将该分<br />组标识为已接收的乱序分组。当某一个分组定时器到时后，则重新传递这个分组。<br />在接收方，它会确认每一个正确接收的分组，不管这个分组是按序的还是乱序的，乱序的分组将被缓存下来，直到所有的乱序分<br />组都到达形成一个有序序列后，再将这一段分组交付给上层。对于不能被正确接收的分组，接收方直接忽略该分组。<br />详细资料可以参考：<br />[《TCP 连续 ARQ 协议和滑动窗口协议》](https://blog.csdn.net/guoweimelon/article/details/50879588)\n<a name=\"KWKxs\"></a>\n### TCP 的可靠运输机制\nTCP 的可靠运输机制是基于连续 ARQ 协议和滑动窗口协议的。<br />TCP 协议在发送方维持了一个发送窗口，发送窗口以前的报文段是已经发送并确认了的报文段，发送窗口中包含了已经发送但<br />未确认的报文段和允许发送但还未发送的报文段，发送窗口以后的报文段是缓存中还不允许发送的报文段。当发送方向接收方发<br />送报文时，会依次发送窗口内的所有报文段，并且设置一个定时器，这个定时器可以理解为是最早发送但未收到确认的报文段。<br />如果在定时器的时间内收到某一个报文段的确认回答，则滑动窗口，将窗口的首部向后滑动到确认报文段的后一个位置，此时如<br />果还有已发送但没有确认的报文段，则重新设置定时器，如果没有了则关闭定时器。如果定时器超时，则重新发送所有已经发送<br />但还未收到确认的报文段，并将超时的间隔设置为以前的两倍。当发送方收到接收方的三个冗余的确认应答后，这是一种指示，<br />说明该报文段以后的报文段很有可能发生丢失了，那么发送方会启用快速重传的机制，就是当前定时器结束前，发送所有的已发<br />送但确认的报文段。<br />接收方使用的是累计确认的机制，对于所有按序到达的报文段，接收方返回一个报文段的肯定回答。如果收到了一个乱序的报文<br />段，那么接方会直接丢弃，并返回一个最近的按序到达的报文段的肯定回答。使用累计确认保证了返回的确认号之前的报文段都<br />已经按序到达了，所以发送窗口可以移动到已确认报文段的后面。<br />发送窗口的大小是变化的，它是由接收窗口剩余大小和网络中拥塞程度来决定的，TCP 就是通过控制发送窗口的长度来控制报文<br />段的发送速率。<br />但是 TCP 协议并不完全和滑动窗口协议相同，因为许多的 TCP 实现会将失序的报文段给缓存起来，并且发生重传时，只会重<br />传一个报文段，因此 TCP 协议的可靠传输机制更像是窗口滑动协议和选择重传协议的一个混合体。\n<a name=\"C2X5c\"></a>\n### TCP 的流量控制机制\nTCP 提供了流量控制的服务，这个服务的主要目的是控制发送方的发送速率，保证接收方来得及接收。因为一旦发送的速率大<br />于接收方所能接收的速率，就会造成报文段的丢失。接收方主要是通过接收窗口来告诉发送方自己所能接收的大小，发送方根据<br />接收方的接收窗口的大小来调整发送窗口的大小，以此来达到控制发送速率的目的。\n<a name=\"pQrEO\"></a>\n### TCP 的拥塞控制机制\nTCP 的拥塞控制主要是根据网络中的拥塞情况来控制发送方数据的发送速率，如果网络处于拥塞的状态，发送方就减小发送的<br />速率，这样一方面是为了避免继续增加网络中的拥塞程度，另一方面也是为了避免网络拥塞可能造成的报文段丢失。<br />TCP 的拥塞控制主要使用了四个机制，分别是慢启动、拥塞避免、快速重传和快速恢复。<br />慢启动的基本思想是，因为在发送方刚开始发送数据的时候，并不知道网络中的拥塞程度，所以先以较低的速率发送，进行试探<br />，每次收到一个确认报文，就将发动窗口的长度加一，这样每个 RTT 时间后，发送窗口的长度就会加倍。当发送窗口的大小达<br />到一个阈值的时候就进入拥塞避免算法。<br />拥塞避免算法是为了避免可能发生的拥塞，将发送窗口的大小由每过一个 RTT 增长一倍，变为每过一个 RTT ，长度只加一。<br />这样将窗口的增长速率由指数增长，变为加法线性增长。<br />快速重传指的是，当发送方收到三个冗余的确认应答时，因为 TCP 使用的是累计确认的机制，所以很有可能是发生了报文段的<br />丢失，因此采用立即重传的机制，在定时器结束前发送所有已发送但还未接收到确认应答的报文段。<br />快速恢复是对快速重传的后续处理，因为网络中可能已经出现了拥塞情况，所以会将慢启动的阀值减小为原来的一半，然后将拥<br />塞窗口的值置为减半后的阀值，然后开始执行拥塞避免算法，使得拥塞窗口缓慢地加性增大。简单来理解就是，乘性减，加性增。<br />TCP 认为网络拥塞的主要依据是报文段的重传次数，它会根据网络中的拥塞程度，通过调整慢启动的阀值，然后交替使用上面四<br />种机制来达到拥塞控制的目的。<br />详细资料可以参考：<br />[《TCP 的拥塞控制机制》](https://www.jianshu.com/p/7d59f9292b03)<br />[《网络基本功：TCP 拥塞控制机制》](http://www.voidcn.com/article/p-vrdkquop-ms.html)\n<a name=\"wgwwt\"></a>\n### 网络层\n网络层协议主要实现了不同主机间的逻辑通信功能。网络层协议一共包含两个主要的组件，一个 IP 网际协议，一个是路由选<br />择协议。<br />IP 网际协议规定了网络层的编址和转发方式，比如说我们接入网络的主机都会被分配一个 IP 地址，常用的比如 IPV4 使用<br />32 位来分配地址，还有 IPv6 使用 128 位来分配地址。<br />路由选择协议决定了数据报从源到目的地所流经的路径，常见的比如距离向量路由选择算法等。\n<a name=\"wITmj\"></a>\n### 数据链路层\n数据链路层提供的服务是如何将数据报通过单一通信链路从一个结点移动到相邻节点。每一台主机都有一个唯一的 MAC 地址，<br />这是由网络适配器决定的，在全世界都是独一无二的。\n<a name=\"xeTTJ\"></a>\n### 物理层\n物理层提供的服务是尽可能的屏蔽掉组成网络的物理设备和传输介质间的差异，使数据链路层不需要考虑网络的具体传输介质<br />是什么。<br />详细资料可以参考：<br />[《搞定计算机网络面试，看这篇就够了（补充版）》](https://juejin.im/post/5b7be0b2e51d4538db34a51e#heading-1)<br />[《互联网协议入门（一）》](http://www.ruanyifeng.com/blog/2012/05/internet_protocol_suite_part_i.html)<br />[《互联网协议入门（二）》](http://www.ruanyifeng.com/blog/2012/06/internet_protocol_suite_part_ii.html)\n",
  "body_draft": "",
  "body_html": "<!doctype html><div class=\"lake-content\" typography=\"classic\"><h2 id=\"g3Ijk\"><span class=\"ne-text\">传输层</span></h2><p id=\"u6b356cfc\" class=\"ne-p\"><span class=\"ne-text\">传输层协议主要是为不同主机上的不同进程间提供了逻辑通信的功能。传输层只工作在端系统中。</span></p><h3 id=\"TDltc\"><span class=\"ne-text\">多路复用与多路分解</span></h3><p id=\"u3ce2da77\" class=\"ne-p\"><span class=\"ne-text\">将传输层报文段中的数据交付到正确的套接字的工作被称为多路分解。</span></p><p id=\"uf4c9413c\" class=\"ne-p\"><span class=\"ne-text\">在源主机上从不同的套接字中收集数据，封装头信息生成报文段后，将报文段传递到网络层，这个过程被称为多路复用。</span></p><p id=\"udf81a79e\" class=\"ne-p\"><span class=\"ne-text\">无连接的多路复用和多路分解指的是 UDP 套接字的分配过程，一个 UDP 套接字由一个二元组来标识，这个二元组包含了一<br />个目的地址和一个目的端口号。因此不同源地址和端口号的 UDP 报文段到达主机后，如果它们拥有相同的目的地址和目的端<br />口号，那么不同的报文段将会转交到同一个 UDP 套接字中。</span></p><p id=\"u279f026e\" class=\"ne-p\"><span class=\"ne-text\">面向连接的多路复用和多路分解指的是 TCP 套接字的分配过程，一个 TCP 套接字由一个四元组来标识，这个四元组包含了<br />源 IP 地址、源端口号、目的地址和目的端口号。因此，一个 TCP 报文段从网络中到达一台主机上时，该主机使用全部 4 个<br />值来将报文段定向到相应的套接字。</span></p><h3 id=\"THKiA\"><span class=\"ne-text\">UDP 协议</span></h3><p id=\"u9f476a55\" class=\"ne-p\"><span class=\"ne-text\">UDP 是一种无连接的，不可靠的传输层协议。它只提供了传输层需要实现的最低限度的功能，除了复用/分解功能和少量的差<br />错检测外，它几乎没有对 IP 增加其他的东西。UDP 协议适用于对实时性要求高的应用场景。</span></p><p id=\"u0b6e639c\" class=\"ne-p\"><span class=\"ne-text\">特点：</span></p><ol class=\"ne-ol\"><li id=\"uf805b349\"><span class=\"ne-text\">使用 UDP 时，在发送报文段之前，通信双方没有握手的过程，因此 UDP 被称为是无连接的传输层协议。因为没有握手<br />过程，相对于 TCP 来说，没有建立连接的时延。因为没有连接，所以不需要在端系统中保存连接的状态。</span></li><li id=\"u4cca1a3d\"><span class=\"ne-text\">UDP 提供尽力而为的交付服务，也就是说 UDP 协议不保证数据的可靠交付。</span></li></ol><ol start=\"3\" class=\"ne-ol\"><li id=\"u5a809e2d\"><span class=\"ne-text\">UDP 没有拥塞控制和流量控制的机制，所以 UDP 报文段的发送速率没有限制。</span></li><li id=\"u2ec28c5d\"><span class=\"ne-text\">因为一个 UDP 套接字只使用目的地址和目的端口来标识，所以 UDP 可以支持一对一、一对多、多对一和多对多的交互<br />通信。</span></li></ol><ol start=\"5\" class=\"ne-ol\"><li id=\"u4483a2dc\"><span class=\"ne-text\">UDP 首部小，只有 8 个字节。</span></li></ol><h3 id=\"Q9MaN\"><span class=\"ne-text\">UDP 报文段结构</span></h3><p id=\"u56b2d8b5\" class=\"ne-p\"><span class=\"ne-text\">UDP 报文段由首部和应用数据组成。报文段首部包含四个字段，分别是源端口号、目的端口号、长度和检验和，每个字段的长<br />度为两个字节。长度字段指的是整个报文段的长度，包含了首部和应用数据的大小。校验和是 UDP 提供的一种差错校验机制。<br />虽然提供了差错校验的机制，但是 UDP 对于差错的恢复无能为力。</span></p><p id=\"ub5be0cea\" class=\"ne-p\"><img src=\"https://cdn.nlark.com/yuque/0/2022/png/732231/1647358828647-a5fcf4e0-a755-4189-ac81-8563aca79f9e.png\" width=\"220\" id=\"u47cb5370\" class=\"ne-image\"></p><h3 id=\"yOWDS\"><span class=\"ne-text\">TCP 协议</span></h3><p id=\"uc02bc207\" class=\"ne-p\"><span class=\"ne-text\">TCP 协议是面向连接的，提供可靠数据传输服务的传输层协议。</span></p><p id=\"u3efa5443\" class=\"ne-p\"><span class=\"ne-text\">特点：</span></p><ol class=\"ne-ol\"><li id=\"u89040f86\"><span class=\"ne-text\">TCP 协议是面向连接的，在通信双方进行通信前，需要通过三次握手建立连接。它需要在端系统中维护双方连接的状态信息。</span></li><li id=\"u2f83bff3\"><span class=\"ne-text\">TCP 协议通过序号、确认号、定时重传、检验和等机制，来提供可靠的数据传输服务。</span></li></ol><ol start=\"3\" class=\"ne-ol\"><li id=\"u61af4aa5\"><span class=\"ne-text\">TCP 协议提供的是点对点的服务，即它是在单个发送方和单个接收方之间的连接。</span></li><li id=\"ue6939c73\"><span class=\"ne-text\">TCP 协议提供的是全双工的服务，也就是说连接的双方的能够向对方发送和接收数据。</span></li></ol><ol start=\"5\" class=\"ne-ol\"><li id=\"u983671ae\"><span class=\"ne-text\">TCP 提供了拥塞控制机制，在网络拥塞的时候会控制发送数据的速率，有助于减少数据包的丢失和减轻网络中的拥塞程度。</span></li><li id=\"uc6c472ff\"><span class=\"ne-text\">TCP 提供了流量控制机制，保证了通信双方的发送和接收速率相同。如果接收方可接收的缓存很小时，发送方会降低发送<br />速率，避免因为缓存填满而造成的数据包的丢失。</span></li></ol><h3 id=\"hSJTU\"><span class=\"ne-text\">TCP 报文段结构</span></h3><p id=\"u8a18b94c\" class=\"ne-p\"><span class=\"ne-text\">TCP 报文段由首部和数据组成，它的首部一般为 20 个字节。</span></p><p id=\"ub6f224ec\" class=\"ne-p\"><span class=\"ne-text\">源端口和目的端口号用于报文段的多路复用和分解。</span></p><p id=\"u70baaa9f\" class=\"ne-p\"><span class=\"ne-text\">32 比特的序号和 32 比特的确认号，用与实现可靠数据运输服务。</span></p><p id=\"u32b331c3\" class=\"ne-p\"><span class=\"ne-text\">16 比特的接收窗口字段用于实现流量控制，该字段表示接收方愿意接收的字节的数量。</span></p><p id=\"u177e441e\" class=\"ne-p\"><span class=\"ne-text\">4 比特的首部长度字段，该字段指示了以 32 比特的字为单位的 TCP 首部的长度。</span></p><p id=\"uaf33d4a2\" class=\"ne-p\"><span class=\"ne-text\">6 比特的标志字段，ACK 字段用于指示确认序号的值是有效的，RST、SYN 和 FIN 比特用于连接建立和拆除。设置 PSH 字<br />段指示接收方应该立即将数据交给上层，URG 字段用来指示报文段里存在紧急的数据。</span></p><p id=\"ua2a97adb\" class=\"ne-p\"><span class=\"ne-text\">校验和提供了对数据的差错检测。</span></p><p id=\"uf7b1246d\" class=\"ne-p\"><img src=\"https://cdn.nlark.com/yuque/0/2022/png/732231/1647358828853-3b085082-d04c-43bf-8071-02b28c5d9270.png\" width=\"338\" id=\"uaa98eaf7\" class=\"ne-image\"></p><h3 id=\"V3jQj\"><span class=\"ne-text\">TCP 三次握手的过程</span></h3><p id=\"u426be83b\" class=\"ne-p\"><span class=\"ne-text\">第一次握手，客户端向服务器发送一个 SYN 连接请求报文段，报文段的首部中 SYN 标志位置为 1，序号字段是一个任选的<br />随机数。它代表的是客户端数据的初始序号。</span></p><p id=\"u2898566c\" class=\"ne-p\"><span class=\"ne-text\">第二次握手，服务器端接收到客户端发送的 SYN 连接请求报文段后，服务器首先会为该连接分配 TCP 缓存和变量，然后向<br />客户端发送 SYN ACK 报文段，报文段的首部中 SYN 和 ACK 标志位都被置为 1，代表这是一个对 SYN 连接请求的确认，<br />同时序号字段是服务器端产生的一个任选的随机数，它代表的是服务器端数据的初始序号。确认号字段为客户端发送的序号加<br />一。</span></p><p id=\"u2d34ee0d\" class=\"ne-p\"><span class=\"ne-text\">第三次握手，客户端接收到服务器的肯定应答后，它也会为这次 TCP 连接分配缓存和变量，同时向服务器端发送一个对服务<br />器端的报文段的确认。第三次握手可以在报文段中携带数据。</span></p><p id=\"u253d8cc8\" class=\"ne-p\"><span class=\"ne-text\">在我看来，TCP 三次握手的建立连接的过程就是相互确认初始序号的过程，告诉对方，什么样序号的报文段能够被正确接收。<br />第三次握手的作用是客户端对服务器端的初始序号的确认。如果只使用两次握手，那么服务器就没有办法知道自己的序号是否<br />已被确认。同时这样也是为了防止失效的请求报文段被服务器接收，而出现错误的情况。</span></p><p id=\"udeb6cef9\" class=\"ne-p\"><span class=\"ne-text\">详细资料可以参考：<br /></span><a href=\"https://www.zhihu.com/question/24853633\" data-href=\"https://www.zhihu.com/question/24853633\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">《TCP 为什么是三次握手，而不是两次或四次？》</span></a><span class=\"ne-text\"><br /></span><a href=\"https://blog.csdn.net/qzcsu/article/details/72861891\" data-href=\"https://blog.csdn.net/qzcsu/article/details/72861891\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">《TCP 的三次握手与四次挥手》</span></a></p><h3 id=\"yqbjc\"><span class=\"ne-text\">TCP 四次挥手的过程</span></h3><p id=\"uc8149072\" class=\"ne-p\"><span class=\"ne-text\">因为 TCP 连接是全双工的，也就是说通信的双方都可以向对方发送和接收消息，所以断开连接需要双方的确认。</span></p><p id=\"uf5435433\" class=\"ne-p\"><span class=\"ne-text\">第一次挥手，客户端认为没有数据要再发送给服务器端，它就向服务器发送一个 FIN 报文段，申请断开客户端到服务器端的<br />连接。发送后客户端进入 FIN_WAIT_1 状态。</span></p><p id=\"u8ca4fef8\" class=\"ne-p\"><span class=\"ne-text\">第二次挥手，服务器端接收到客户端释放连接的请求后，向客户端发送一个确认报文段，表示已经接收到了客户端释放连接的<br />请求，以后不再接收客户端发送过来的数据。但是因为连接是全双工的，所以此时，服务器端还可以向客户端发送数据。服务<br />器端进入 CLOSE_WAIT 状态。客户端收到确认后，进入 FIN_WAIT_2 状态。</span></p><p id=\"u657645a5\" class=\"ne-p\"><span class=\"ne-text\">第三次挥手，服务器端发送完所有数据后，向客户端发送 FIN 报文段，申请断开服务器端到客户端的连接。发送后进入 LAS<br />T_ACK 状态。</span></p><p id=\"u8ed65f9a\" class=\"ne-p\"><span class=\"ne-text\">第四次挥手，客户端接收到 FIN 请求后，向服务器端发送一个确认应答，并进入 TIME_WAIT 阶段。该阶段会持续一段时间，<br />这个时间为报文段在网络中的最大生存时间，如果该时间内服务端没有重发请求的话，客户端进入 CLOSED 的状态。如果收到<br />服务器的重发请求就重新发送确认报文段。服务器端收到客户端的确认报文段后就进入 CLOSED 状态，这样全双工的连接就被<br />释放了。</span></p><p id=\"u24034cf3\" class=\"ne-p\"><span class=\"ne-text\">TCP 使用四次挥手的原因是因为 TCP 的连接是全双工的，所以需要双方分别释放到对方的连接，单独一方的连接释放，只代<br />表不能再向对方发送数据，连接处于的是半释放的状态。</span></p><p id=\"ub35dbc77\" class=\"ne-p\"><span class=\"ne-text\">最后一次挥手中，客户端会等待一段时间再关闭的原因，是为了防止发送给服务器的确认报文段丢失或者出错，从而导致服务器<br />端不能正常关闭。</span></p><p id=\"ud7607da5\" class=\"ne-p\"><span class=\"ne-text\">详细资料可以参考：</span></p><p id=\"uec89caf5\" class=\"ne-p\"><a href=\"https://juejin.im/book/5bdc715fe51d454e755f75ef/section/5c447392e51d45524b02eaf5\" data-href=\"https://juejin.im/book/5bdc715fe51d454e755f75ef/section/5c447392e51d45524b02eaf5\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">《前端面试之道》</span></a></p><h3 id=\"LjYDN\"><span class=\"ne-text\">状态转化图</span></h3><p id=\"ue10a5e7a\" class=\"ne-p\"><img src=\"https://cdn.nlark.com/yuque/0/2022/png/732231/1647358828835-ea3a9e8e-c593-4b02-882c-c3262d08192b.png\" width=\"479\" id=\"u76f0851c\" class=\"ne-image\"></p><p id=\"u9511665b\" class=\"ne-p\"><img src=\"https://cdn.nlark.com/yuque/0/2022/png/732231/1647358829001-4a19b5b8-71b0-49f0-ae8d-b289001d1978.png\" width=\"485\" id=\"u43a18ca6\" class=\"ne-image\"></p><h3 id=\"Hm7FQ\"><span class=\"ne-text\">ARQ 协议</span></h3><p id=\"u504d6d37\" class=\"ne-p\"><span class=\"ne-text\">ARQ 协议指的是自动重传请求，它通过超时和重传来保证数据的可靠交付，它是 TCP 协议实现可靠数据传输的一个很重要的<br />机制。</span></p><p id=\"ud6046758\" class=\"ne-p\"><span class=\"ne-text\">它分为停止等待 ARQ 协议和连续 ARQ 协议。</span></p><p id=\"u491cbcd1\" class=\"ne-p\"><span class=\"ne-text\">一、停止等待 ARQ 协议</span></p><p id=\"u737071e4\" class=\"ne-p\"><span class=\"ne-text\">停止等待 ARQ 协议的基本原理是，对于发送方来说发送方每发送一个分组，就为这个分组设置一个定时器。当发送分组的确认<br />回答返回了，则清除定时器，发送下一个分组。如果在规定的时间内没有收到已发送分组的肯定回答，则重新发送上一个分组。</span></p><p id=\"ubdd0f47b\" class=\"ne-p\"><span class=\"ne-text\">对于接受方来说，每次接受到一个分组，就返回对这个分组的肯定应答，当收到冗余的分组时，就直接丢弃，并返回一个对冗余<br />分组的确认。当收到分组损坏的情况的时候，直接丢弃。</span></p><p id=\"u5e42ac08\" class=\"ne-p\"><span class=\"ne-text\">使用停止等待 ARQ 协议的缺点是每次发送分组必须等到分组确认后才能发送下一个分组，这样会造成信道的利用率过低。</span></p><p id=\"u80c8c1e5\" class=\"ne-p\"><span class=\"ne-text\">二、连续 ARQ 协议</span></p><p id=\"u5060eb08\" class=\"ne-p\"><span class=\"ne-text\">连续 ARQ 协议是为了解决停止等待 ARQ 协议对于信道的利用率过低的问题。它通过连续发送一组分组，然后再等待对分组的<br />确认回答，对于如何处理分组中可能出现的差错恢复情况，一般可以使用滑动窗口协议和选择重传协议来实现。</span></p><ol class=\"ne-ol\"><li id=\"u3d6e161b\"><span class=\"ne-text\">滑动窗口协议</span></li></ol><p id=\"u67f0c12c\" class=\"ne-p\"><span class=\"ne-text\">使用滑动窗口协议，在发送方维持了一个发送窗口，发送窗口以前的分组是已经发送并确认了的分组，发送窗口中包含了已经发<br />送但未确认的分组和允许发送但还未发送的分组，发送窗口以后的分组是缓存中还不允许发送的分组。当发送方向接收方发送分<br />组时，会依次发送窗口内的所有分组，并且设置一个定时器，这个定时器可以理解为是最早发送但未收到确认的分组。如果在定<br />时器的时间内收到某一个分组的确认回答，则滑动窗口，将窗口的首部移动到确认分组的后一个位置，此时如果还有已发送但没<br />有确认的分组，则重新设置定时器，如果没有了则关闭定时器。如果定时器超时，则重新发送所有已经发送但还未收到确认的分<br />组。</span></p><p id=\"u6b90d550\" class=\"ne-p\"><span class=\"ne-text\">接收方使用的是累计确认的机制，对于所有按序到达的分组，接收方返回一个分组的肯定回答。如果收到了一个乱序的分组，那<br />么接方会直接丢弃，并返回一个最近的按序到达的分组的肯定回答。使用累计确认保证了确认号以前的分组都已经按序到达了，<br />所以发送窗口可以移动到已确认分组的后面。</span></p><p id=\"u6cdc26fd\" class=\"ne-p\"><span class=\"ne-text\">滑动窗口协议的缺点是因为使用了累计确认的机制，如果出现了只是窗口中的第一个分组丢失，而后面的分组都按序到达的情况<br />的话，那么滑动窗口协议会重新发送所有的分组，这样就造成了大量不必要分组的丢弃和重传。</span></p><ol class=\"ne-ol\"><li id=\"u6ca95a8b\"><span class=\"ne-text\">选择重传协议</span></li></ol><p id=\"uce9e2ca8\" class=\"ne-p\"><span class=\"ne-text\">因为滑动窗口使用累计确认的方式，所以会造成很多不必要分组的重传。使用选择重传协议可以解决这个问题。</span></p><p id=\"ucc9008f2\" class=\"ne-p\"><span class=\"ne-text\">选择重传协议在发送方维护了一个发送窗口。发送窗口的以前是已经发送并确认的分组，窗口内包含了已发送但未被确认的分组，<br />已确认的乱序分组，和允许发送但还未发送的分组，发送窗口以后的是缓存中还不允许发送的分组。选择重传协议与滑动窗口协<br />议最大的不同是，发送方发送分组时，为一个分组都创建了一个定时器。当发送方接受到一个分组的确认应答后，取消该分组的<br />定时器，并判断接受该分组后，是否存在由窗口首部为首的连续的确认分组，如果有则向后移动窗口的位置，如果没有则将该分<br />组标识为已接收的乱序分组。当某一个分组定时器到时后，则重新传递这个分组。</span></p><p id=\"ued9f09b6\" class=\"ne-p\"><span class=\"ne-text\">在接收方，它会确认每一个正确接收的分组，不管这个分组是按序的还是乱序的，乱序的分组将被缓存下来，直到所有的乱序分<br />组都到达形成一个有序序列后，再将这一段分组交付给上层。对于不能被正确接收的分组，接收方直接忽略该分组。</span></p><p id=\"udd21dec1\" class=\"ne-p\"><span class=\"ne-text\">详细资料可以参考：<br /></span><a href=\"https://blog.csdn.net/guoweimelon/article/details/50879588\" data-href=\"https://blog.csdn.net/guoweimelon/article/details/50879588\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">《TCP 连续 ARQ 协议和滑动窗口协议》</span></a></p><h3 id=\"KWKxs\"><span class=\"ne-text\">TCP 的可靠运输机制</span></h3><p id=\"u6d8eb587\" class=\"ne-p\"><span class=\"ne-text\">TCP 的可靠运输机制是基于连续 ARQ 协议和滑动窗口协议的。</span></p><p id=\"u0f8ad560\" class=\"ne-p\"><span class=\"ne-text\">TCP 协议在发送方维持了一个发送窗口，发送窗口以前的报文段是已经发送并确认了的报文段，发送窗口中包含了已经发送但<br />未确认的报文段和允许发送但还未发送的报文段，发送窗口以后的报文段是缓存中还不允许发送的报文段。当发送方向接收方发<br />送报文时，会依次发送窗口内的所有报文段，并且设置一个定时器，这个定时器可以理解为是最早发送但未收到确认的报文段。<br />如果在定时器的时间内收到某一个报文段的确认回答，则滑动窗口，将窗口的首部向后滑动到确认报文段的后一个位置，此时如<br />果还有已发送但没有确认的报文段，则重新设置定时器，如果没有了则关闭定时器。如果定时器超时，则重新发送所有已经发送<br />但还未收到确认的报文段，并将超时的间隔设置为以前的两倍。当发送方收到接收方的三个冗余的确认应答后，这是一种指示，<br />说明该报文段以后的报文段很有可能发生丢失了，那么发送方会启用快速重传的机制，就是当前定时器结束前，发送所有的已发<br />送但确认的报文段。</span></p><p id=\"u81d5ba7c\" class=\"ne-p\"><span class=\"ne-text\">接收方使用的是累计确认的机制，对于所有按序到达的报文段，接收方返回一个报文段的肯定回答。如果收到了一个乱序的报文<br />段，那么接方会直接丢弃，并返回一个最近的按序到达的报文段的肯定回答。使用累计确认保证了返回的确认号之前的报文段都<br />已经按序到达了，所以发送窗口可以移动到已确认报文段的后面。</span></p><p id=\"u0762ed47\" class=\"ne-p\"><span class=\"ne-text\">发送窗口的大小是变化的，它是由接收窗口剩余大小和网络中拥塞程度来决定的，TCP 就是通过控制发送窗口的长度来控制报文<br />段的发送速率。</span></p><p id=\"u57fe0e53\" class=\"ne-p\"><span class=\"ne-text\">但是 TCP 协议并不完全和滑动窗口协议相同，因为许多的 TCP 实现会将失序的报文段给缓存起来，并且发生重传时，只会重<br />传一个报文段，因此 TCP 协议的可靠传输机制更像是窗口滑动协议和选择重传协议的一个混合体。</span></p><h3 id=\"C2X5c\"><span class=\"ne-text\">TCP 的流量控制机制</span></h3><p id=\"ub23d374e\" class=\"ne-p\"><span class=\"ne-text\">TCP 提供了流量控制的服务，这个服务的主要目的是控制发送方的发送速率，保证接收方来得及接收。因为一旦发送的速率大<br />于接收方所能接收的速率，就会造成报文段的丢失。接收方主要是通过接收窗口来告诉发送方自己所能接收的大小，发送方根据<br />接收方的接收窗口的大小来调整发送窗口的大小，以此来达到控制发送速率的目的。</span></p><h3 id=\"pQrEO\"><span class=\"ne-text\">TCP 的拥塞控制机制</span></h3><p id=\"u124c2e02\" class=\"ne-p\"><span class=\"ne-text\">TCP 的拥塞控制主要是根据网络中的拥塞情况来控制发送方数据的发送速率，如果网络处于拥塞的状态，发送方就减小发送的<br />速率，这样一方面是为了避免继续增加网络中的拥塞程度，另一方面也是为了避免网络拥塞可能造成的报文段丢失。</span></p><p id=\"u2e724865\" class=\"ne-p\"><span class=\"ne-text\">TCP 的拥塞控制主要使用了四个机制，分别是慢启动、拥塞避免、快速重传和快速恢复。</span></p><p id=\"u2c0e9e0b\" class=\"ne-p\"><span class=\"ne-text\">慢启动的基本思想是，因为在发送方刚开始发送数据的时候，并不知道网络中的拥塞程度，所以先以较低的速率发送，进行试探<br />，每次收到一个确认报文，就将发动窗口的长度加一，这样每个 RTT 时间后，发送窗口的长度就会加倍。当发送窗口的大小达<br />到一个阈值的时候就进入拥塞避免算法。</span></p><p id=\"u49364e4f\" class=\"ne-p\"><span class=\"ne-text\">拥塞避免算法是为了避免可能发生的拥塞，将发送窗口的大小由每过一个 RTT 增长一倍，变为每过一个 RTT ，长度只加一。<br />这样将窗口的增长速率由指数增长，变为加法线性增长。</span></p><p id=\"u864157aa\" class=\"ne-p\"><span class=\"ne-text\">快速重传指的是，当发送方收到三个冗余的确认应答时，因为 TCP 使用的是累计确认的机制，所以很有可能是发生了报文段的<br />丢失，因此采用立即重传的机制，在定时器结束前发送所有已发送但还未接收到确认应答的报文段。</span></p><p id=\"u89c5acdf\" class=\"ne-p\"><span class=\"ne-text\">快速恢复是对快速重传的后续处理，因为网络中可能已经出现了拥塞情况，所以会将慢启动的阀值减小为原来的一半，然后将拥<br />塞窗口的值置为减半后的阀值，然后开始执行拥塞避免算法，使得拥塞窗口缓慢地加性增大。简单来理解就是，乘性减，加性增。</span></p><p id=\"u0a06a455\" class=\"ne-p\"><span class=\"ne-text\">TCP 认为网络拥塞的主要依据是报文段的重传次数，它会根据网络中的拥塞程度，通过调整慢启动的阀值，然后交替使用上面四<br />种机制来达到拥塞控制的目的。</span></p><p id=\"u89796bf1\" class=\"ne-p\"><span class=\"ne-text\">详细资料可以参考：<br /></span><a href=\"https://www.jianshu.com/p/7d59f9292b03\" data-href=\"https://www.jianshu.com/p/7d59f9292b03\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">《TCP 的拥塞控制机制》</span></a><span class=\"ne-text\"><br /></span><a href=\"http://www.voidcn.com/article/p-vrdkquop-ms.html\" data-href=\"http://www.voidcn.com/article/p-vrdkquop-ms.html\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">《网络基本功：TCP 拥塞控制机制》</span></a></p><h3 id=\"wgwwt\"><span class=\"ne-text\">网络层</span></h3><p id=\"u8c98dfd0\" class=\"ne-p\"><span class=\"ne-text\">网络层协议主要实现了不同主机间的逻辑通信功能。网络层协议一共包含两个主要的组件，一个 IP 网际协议，一个是路由选<br />择协议。</span></p><p id=\"u3d3ac3df\" class=\"ne-p\"><span class=\"ne-text\">IP 网际协议规定了网络层的编址和转发方式，比如说我们接入网络的主机都会被分配一个 IP 地址，常用的比如 IPV4 使用<br />32 位来分配地址，还有 IPv6 使用 128 位来分配地址。</span></p><p id=\"u324e6848\" class=\"ne-p\"><span class=\"ne-text\">路由选择协议决定了数据报从源到目的地所流经的路径，常见的比如距离向量路由选择算法等。</span></p><h3 id=\"wITmj\"><span class=\"ne-text\">数据链路层</span></h3><p id=\"ucdaf9e73\" class=\"ne-p\"><span class=\"ne-text\">数据链路层提供的服务是如何将数据报通过单一通信链路从一个结点移动到相邻节点。每一台主机都有一个唯一的 MAC 地址，<br />这是由网络适配器决定的，在全世界都是独一无二的。</span></p><h3 id=\"xeTTJ\"><span class=\"ne-text\">物理层</span></h3><p id=\"ueac43db6\" class=\"ne-p\"><span class=\"ne-text\">物理层提供的服务是尽可能的屏蔽掉组成网络的物理设备和传输介质间的差异，使数据链路层不需要考虑网络的具体传输介质<br />是什么。</span></p><p id=\"u0405e50d\" class=\"ne-p\"><span class=\"ne-text\">详细资料可以参考：<br /></span><a href=\"https://juejin.im/post/5b7be0b2e51d4538db34a51e#heading-1\" data-href=\"https://juejin.im/post/5b7be0b2e51d4538db34a51e#heading-1\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">《搞定计算机网络面试，看这篇就够了（补充版）》</span></a><span class=\"ne-text\"><br /></span><a href=\"http://www.ruanyifeng.com/blog/2012/05/internet_protocol_suite_part_i.html\" data-href=\"http://www.ruanyifeng.com/blog/2012/05/internet_protocol_suite_part_i.html\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">《互联网协议入门（一）》</span></a><span class=\"ne-text\"><br /></span><a href=\"http://www.ruanyifeng.com/blog/2012/06/internet_protocol_suite_part_ii.html\" data-href=\"http://www.ruanyifeng.com/blog/2012/06/internet_protocol_suite_part_ii.html\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">《互联网协议入门（二）》</span></a></p></div>",
  "body_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"viewport\" content=\"adapt\" /><h2 data-lake-id=\"g3Ijk\" id=\"g3Ijk\"><span data-lake-id=\"u5edb6851\" id=\"u5edb6851\">传输层</span></h2><p data-lake-id=\"u6b356cfc\" id=\"u6b356cfc\"><span data-lake-id=\"u93854734\" id=\"u93854734\">传输层协议主要是为不同主机上的不同进程间提供了逻辑通信的功能。传输层只工作在端系统中。</span></p><h3 data-lake-id=\"TDltc\" id=\"TDltc\"><span data-lake-id=\"u12e505cb\" id=\"u12e505cb\">多路复用与多路分解</span></h3><p data-lake-id=\"u3ce2da77\" id=\"u3ce2da77\"><span data-lake-id=\"ue9e1d7ce\" id=\"ue9e1d7ce\">将传输层报文段中的数据交付到正确的套接字的工作被称为多路分解。</span></p><p data-lake-id=\"uf4c9413c\" id=\"uf4c9413c\"><span data-lake-id=\"uc9cf5587\" id=\"uc9cf5587\">在源主机上从不同的套接字中收集数据，封装头信息生成报文段后，将报文段传递到网络层，这个过程被称为多路复用。</span></p><p data-lake-id=\"udf81a79e\" id=\"udf81a79e\"><span data-lake-id=\"uce012127\" id=\"uce012127\">无连接的多路复用和多路分解指的是 UDP 套接字的分配过程，一个 UDP 套接字由一个二元组来标识，这个二元组包含了一<br />个目的地址和一个目的端口号。因此不同源地址和端口号的 UDP 报文段到达主机后，如果它们拥有相同的目的地址和目的端<br />口号，那么不同的报文段将会转交到同一个 UDP 套接字中。</span></p><p data-lake-id=\"u279f026e\" id=\"u279f026e\"><span data-lake-id=\"u37c7afc8\" id=\"u37c7afc8\">面向连接的多路复用和多路分解指的是 TCP 套接字的分配过程，一个 TCP 套接字由一个四元组来标识，这个四元组包含了<br />源 IP 地址、源端口号、目的地址和目的端口号。因此，一个 TCP 报文段从网络中到达一台主机上时，该主机使用全部 4 个<br />值来将报文段定向到相应的套接字。</span></p><h3 data-lake-id=\"THKiA\" id=\"THKiA\"><span data-lake-id=\"uffe23260\" id=\"uffe23260\">UDP 协议</span></h3><p data-lake-id=\"u9f476a55\" id=\"u9f476a55\"><span data-lake-id=\"u983e4fcd\" id=\"u983e4fcd\">UDP 是一种无连接的，不可靠的传输层协议。它只提供了传输层需要实现的最低限度的功能，除了复用/分解功能和少量的差<br />错检测外，它几乎没有对 IP 增加其他的东西。UDP 协议适用于对实时性要求高的应用场景。</span></p><p data-lake-id=\"u0b6e639c\" id=\"u0b6e639c\"><span data-lake-id=\"u3fbe554d\" id=\"u3fbe554d\">特点：</span></p><ol list=\"u3ad42e41\"><li fid=\"u408ec676\" data-lake-id=\"uf805b349\" id=\"uf805b349\"><span data-lake-id=\"ua7b74bc7\" id=\"ua7b74bc7\">使用 UDP 时，在发送报文段之前，通信双方没有握手的过程，因此 UDP 被称为是无连接的传输层协议。因为没有握手<br />过程，相对于 TCP 来说，没有建立连接的时延。因为没有连接，所以不需要在端系统中保存连接的状态。</span></li><li fid=\"u408ec676\" data-lake-id=\"u4cca1a3d\" id=\"u4cca1a3d\"><span data-lake-id=\"uf9aa5473\" id=\"uf9aa5473\">UDP 提供尽力而为的交付服务，也就是说 UDP 协议不保证数据的可靠交付。</span></li><li fid=\"u408ec676\" data-lake-id=\"u5a809e2d\" id=\"u5a809e2d\"><span data-lake-id=\"u99833d7a\" id=\"u99833d7a\">UDP 没有拥塞控制和流量控制的机制，所以 UDP 报文段的发送速率没有限制。</span></li><li fid=\"u408ec676\" data-lake-id=\"u2ec28c5d\" id=\"u2ec28c5d\"><span data-lake-id=\"ue4c120a9\" id=\"ue4c120a9\">因为一个 UDP 套接字只使用目的地址和目的端口来标识，所以 UDP 可以支持一对一、一对多、多对一和多对多的交互<br />通信。</span></li><li fid=\"u408ec676\" data-lake-id=\"u4483a2dc\" id=\"u4483a2dc\"><span data-lake-id=\"u03cf8db8\" id=\"u03cf8db8\">UDP 首部小，只有 8 个字节。</span></li></ol><h3 data-lake-id=\"Q9MaN\" id=\"Q9MaN\"><span data-lake-id=\"u980e89db\" id=\"u980e89db\">UDP 报文段结构</span></h3><p data-lake-id=\"u56b2d8b5\" id=\"u56b2d8b5\"><span data-lake-id=\"u8f2219e3\" id=\"u8f2219e3\">UDP 报文段由首部和应用数据组成。报文段首部包含四个字段，分别是源端口号、目的端口号、长度和检验和，每个字段的长<br />度为两个字节。长度字段指的是整个报文段的长度，包含了首部和应用数据的大小。校验和是 UDP 提供的一种差错校验机制。<br />虽然提供了差错校验的机制，但是 UDP 对于差错的恢复无能为力。</span></p><p data-lake-id=\"ub5be0cea\" id=\"ub5be0cea\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2022%2Fpng%2F732231%2F1647358828647-a5fcf4e0-a755-4189-ac81-8563aca79f9e.png%22%2C%22taskId%22%3A%22ucea0b5d2-7d3d-4625-8014-94f762d329b%22%2C%22clientId%22%3A%22ue2b5ebeb-dae8-4%22%2C%22originalType%22%3A%22url%22%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A38840%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A220%2C%22originHeight%22%3A192%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%E4%BB%99%E9%9F%B3%E7%85%A7%E7%A0%81%2032%E6%AF%94%E7%89%B9%20%E7%9B%AE%E7%9A%84%E7%AB%AF%E5%8F%A3%E5%8F%B7%20%E6%BA%90%E7%AB%AF%E5%8F%A3%E5%8F%B7%20%E6%A3%80%E9%AA%8C%E5%92%8C%20%E9%95%BF%E5%BA%A6%20%E5%BA%94%E7%94%A8%E6%95%B0%E6%8D%AE%20(%E6%8A%A5%E6%96%87)%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A135.20464%2C%22y%22%3A5.528559%2C%22width%22%3A68.11528999999999%2C%22height%22%3A14.134269000000002%2C%22text%22%3A%22%E4%BB%99%E9%9F%B3%E7%85%A7%E7%A0%81%22%7D%2C%7B%22x%22%3A89.822426%2C%22y%22%3A9.266713%2C%22width%22%3A39.591774%2C%22height%22%3A13.548574000000002%2C%22text%22%3A%2232%E6%AF%94%E7%89%B9%22%7D%2C%7B%22x%22%3A123.34827%2C%22y%22%3A55.37051%2C%22width%22%3A63.05982999999999%2C%22height%22%3A14.637263999999995%2C%22text%22%3A%22%E7%9B%AE%E7%9A%84%E7%AB%AF%E5%8F%A3%E5%8F%B7%22%7D%2C%7B%22x%22%3A35.396706%2C%22y%22%3A55.928936%2C%22width%22%3A50.732689%2C%22height%22%3A13.408363999999999%2C%22text%22%3A%22%E6%BA%90%E7%AB%AF%E5%8F%A3%E5%8F%B7%22%7D%2C%7B%22x%22%3A135.54007%2C%22y%22%3A86.44153%2C%22width%22%3A39.763960000000026%2C%22height%22%3A15.184420000000003%2C%22text%22%3A%22%E6%A3%80%E9%AA%8C%E5%92%8C%22%7D%2C%7B%22x%22%3A46.48819%2C%22y%22%3A86.59257%2C%22width%22%3A27.08856%2C%22height%22%3A13.775860000000009%2C%22text%22%3A%22%E9%95%BF%E5%BA%A6%22%7D%2C%7B%22x%22%3A84.51544%2C%22y%22%3A127.56605%2C%22width%22%3A50.767700000000005%2C%22height%22%3A13.327209999999994%2C%22text%22%3A%22%E5%BA%94%E7%94%A8%E6%95%B0%E6%8D%AE%22%7D%2C%7B%22x%22%3A93.34103%2C%22y%22%3A145.07796%2C%22width%22%3A34.48236%2C%22height%22%3A13.426720000000017%2C%22text%22%3A%22(%E6%8A%A5%E6%96%87)%22%7D%5D%2C%22id%22%3A%22u47cb5370%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><h3 data-lake-id=\"yOWDS\" id=\"yOWDS\"><span data-lake-id=\"u103f9780\" id=\"u103f9780\">TCP 协议</span></h3><p data-lake-id=\"uc02bc207\" id=\"uc02bc207\"><span data-lake-id=\"ub000874f\" id=\"ub000874f\">TCP 协议是面向连接的，提供可靠数据传输服务的传输层协议。</span></p><p data-lake-id=\"u3efa5443\" id=\"u3efa5443\"><span data-lake-id=\"u02d3d8ac\" id=\"u02d3d8ac\">特点：</span></p><ol list=\"u11868891\"><li fid=\"u4f235079\" data-lake-id=\"u89040f86\" id=\"u89040f86\"><span data-lake-id=\"u0b052c09\" id=\"u0b052c09\">TCP 协议是面向连接的，在通信双方进行通信前，需要通过三次握手建立连接。它需要在端系统中维护双方连接的状态信息。</span></li><li fid=\"u4f235079\" data-lake-id=\"u2f83bff3\" id=\"u2f83bff3\"><span data-lake-id=\"uf29107ea\" id=\"uf29107ea\">TCP 协议通过序号、确认号、定时重传、检验和等机制，来提供可靠的数据传输服务。</span></li><li fid=\"u4f235079\" data-lake-id=\"u61af4aa5\" id=\"u61af4aa5\"><span data-lake-id=\"ub1733465\" id=\"ub1733465\">TCP 协议提供的是点对点的服务，即它是在单个发送方和单个接收方之间的连接。</span></li><li fid=\"u4f235079\" data-lake-id=\"ue6939c73\" id=\"ue6939c73\"><span data-lake-id=\"u14a2add4\" id=\"u14a2add4\">TCP 协议提供的是全双工的服务，也就是说连接的双方的能够向对方发送和接收数据。</span></li><li fid=\"u4f235079\" data-lake-id=\"u983671ae\" id=\"u983671ae\"><span data-lake-id=\"u2d56973a\" id=\"u2d56973a\">TCP 提供了拥塞控制机制，在网络拥塞的时候会控制发送数据的速率，有助于减少数据包的丢失和减轻网络中的拥塞程度。</span></li><li fid=\"u4f235079\" data-lake-id=\"uc6c472ff\" id=\"uc6c472ff\"><span data-lake-id=\"u2b578143\" id=\"u2b578143\">TCP 提供了流量控制机制，保证了通信双方的发送和接收速率相同。如果接收方可接收的缓存很小时，发送方会降低发送<br />速率，避免因为缓存填满而造成的数据包的丢失。</span></li></ol><h3 data-lake-id=\"hSJTU\" id=\"hSJTU\"><span data-lake-id=\"uc4695879\" id=\"uc4695879\">TCP 报文段结构</span></h3><p data-lake-id=\"u8a18b94c\" id=\"u8a18b94c\"><span data-lake-id=\"u916fda95\" id=\"u916fda95\">TCP 报文段由首部和数据组成，它的首部一般为 20 个字节。</span></p><p data-lake-id=\"ub6f224ec\" id=\"ub6f224ec\"><span data-lake-id=\"u60791327\" id=\"u60791327\">源端口和目的端口号用于报文段的多路复用和分解。</span></p><p data-lake-id=\"u70baaa9f\" id=\"u70baaa9f\"><span data-lake-id=\"u2fcefa6f\" id=\"u2fcefa6f\">32 比特的序号和 32 比特的确认号，用与实现可靠数据运输服务。</span></p><p data-lake-id=\"u32b331c3\" id=\"u32b331c3\"><span data-lake-id=\"ue057fb5e\" id=\"ue057fb5e\">16 比特的接收窗口字段用于实现流量控制，该字段表示接收方愿意接收的字节的数量。</span></p><p data-lake-id=\"u177e441e\" id=\"u177e441e\"><span data-lake-id=\"u33d86014\" id=\"u33d86014\">4 比特的首部长度字段，该字段指示了以 32 比特的字为单位的 TCP 首部的长度。</span></p><p data-lake-id=\"uaf33d4a2\" id=\"uaf33d4a2\"><span data-lake-id=\"ua7f460a2\" id=\"ua7f460a2\">6 比特的标志字段，ACK 字段用于指示确认序号的值是有效的，RST、SYN 和 FIN 比特用于连接建立和拆除。设置 PSH 字<br />段指示接收方应该立即将数据交给上层，URG 字段用来指示报文段里存在紧急的数据。</span></p><p data-lake-id=\"ua2a97adb\" id=\"ua2a97adb\"><span data-lake-id=\"uc1d5a833\" id=\"uc1d5a833\">校验和提供了对数据的差错检测。</span></p><p data-lake-id=\"uf7b1246d\" id=\"uf7b1246d\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2022%2Fpng%2F732231%2F1647358828853-3b085082-d04c-43bf-8071-02b28c5d9270.png%22%2C%22taskId%22%3A%22u6ad690a4-6914-4271-8392-93e15f8c67b%22%2C%22clientId%22%3A%22ue2b5ebeb-dae8-4%22%2C%22originalType%22%3A%22url%22%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A95085%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A338%2C%22originHeight%22%3A315%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%2232%E6%AF%94%E7%89%B9%20%E6%BA%90%E7%AB%AF%E5%8F%A3%E5%8F%B7%20%E7%9B%AE%E7%9A%84%E7%AB%AF%E5%8F%A3%E5%8F%B7%20%E5%BA%8F%E5%8F%B7%20%E7%A1%AE%E8%AE%A4%E5%8F%B7%20%E9%A6%96%E9%83%A8%20%E4%BF%9D%E7%95%99%20ACK%20URG%20%E6%8E%A5%E6%94%B6%E7%AA%97%E5%8F%A3%20%E9%95%BF%E5%BA%A6%20%E6%9C%AA%E7%94%A8%20%E7%B4%A7%E6%80%A5%E6%95%B0%E6%8D%AE%E6%8C%87%E9%92%88%20%E5%9B%A0%E7%89%B9%E7%BD%91%E6%A3%80%E9%AA%8C%E5%92%8C%20%E9%80%89%E9%A1%B9%20%E6%95%B0%E6%8D%AE%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A148.29904%2C%22y%22%3A5.656092%2C%22width%22%3A38.72228000000001%2C%22height%22%3A12.830282%2C%22text%22%3A%2232%E6%AF%94%E7%89%B9%22%7D%2C%7B%22x%22%3A62.630573%2C%22y%22%3A48.290028%2C%22width%22%3A52.451667%2C%22height%22%3A15.278007000000002%2C%22text%22%3A%22%E6%BA%90%E7%AB%AF%E5%8F%A3%E5%8F%B7%22%7D%2C%7B%22x%22%3A219.12056%2C%22y%22%3A49.057785%2C%22width%22%3A62.827470000000005%2C%22height%22%3A13.676929999999999%2C%22text%22%3A%22%E7%9B%AE%E7%9A%84%E7%AB%AF%E5%8F%A3%E5%8F%B7%22%7D%2C%7B%22x%22%3A157.28539%2C%22y%22%3A74.93986%2C%22width%22%3A25.552699999999987%2C%22height%22%3A13.266840000000002%2C%22text%22%3A%22%E5%BA%8F%E5%8F%B7%22%7D%2C%7B%22x%22%3A150.55223%2C%22y%22%3A105.52459%2C%22width%22%3A39.130449999999996%2C%22height%22%3A14.68616999999999%2C%22text%22%3A%22%E7%A1%AE%E8%AE%A4%E5%8F%B7%22%7D%2C%7B%22x%22%3A17.681398%2C%22y%22%3A126.647095%2C%22width%22%3A27.737822%2C%22height%22%3A15.956104999999994%2C%22text%22%3A%22%E9%A6%96%E9%83%A8%22%7D%2C%7B%22x%22%3A61.210636%2C%22y%22%3A127.44272%2C%22width%22%3A28.083943999999995%2C%22height%22%3A13.729730000000004%2C%22text%22%3A%22%E4%BF%9D%E7%95%99%22%7D%2C%7B%22x%22%3A109.07728%2C%22y%22%3A128.32527%2C%22width%22%3A11.422299999999993%2C%22height%22%3A27.04024000000001%2C%22text%22%3A%22ACK%22%7D%2C%7B%22x%22%3A96.803%2C%22y%22%3A128.7758%2C%22width%22%3A11.65222%2C%22height%22%3A25.2594%2C%22text%22%3A%22URG%22%7D%2C%7B%22x%22%3A222.8587%2C%22y%22%3A132.77457%2C%22width%22%3A51.41906999999998%2C%22height%22%3A14.345069999999993%2C%22text%22%3A%22%E6%8E%A5%E6%94%B6%E7%AA%97%E5%8F%A3%22%7D%2C%7B%22x%22%3A16.858446%2C%22y%22%3A140.40572%2C%22width%22%3A29.306283999999998%2C%22height%22%3A15.13463999999999%2C%22text%22%3A%22%E9%95%BF%E5%BA%A6%22%7D%2C%7B%22x%22%3A61.597744%2C%22y%22%3A140.73392%2C%22width%22%3A28.741025999999998%2C%22height%22%3A14.664779999999979%2C%22text%22%3A%22%E6%9C%AA%E7%94%A8%22%7D%2C%7B%22x%22%3A211.32106%2C%22y%22%3A162.02843%2C%22width%22%3A77.53896000000003%2C%22height%22%3A15.702710000000025%2C%22text%22%3A%22%E7%B4%A7%E6%80%A5%E6%95%B0%E6%8D%AE%E6%8C%87%E9%92%88%22%7D%2C%7B%22x%22%3A44.969402%2C%22y%22%3A162.26015%2C%22width%22%3A79.785868%2C%22height%22%3A15.528049999999979%2C%22text%22%3A%22%E5%9B%A0%E7%89%B9%E7%BD%91%E6%A3%80%E9%AA%8C%E5%92%8C%22%7D%2C%7B%22x%22%3A155.72078%2C%22y%22%3A206.58159%2C%22width%22%3A28.007860000000022%2C%22height%22%3A13.99611999999999%2C%22text%22%3A%22%E9%80%89%E9%A1%B9%22%7D%2C%7B%22x%22%3A155.85066%2C%22y%22%3A268.13312%2C%22width%22%3A26.998220000000003%2C%22height%22%3A14.234479999999962%2C%22text%22%3A%22%E6%95%B0%E6%8D%AE%22%7D%5D%2C%22id%22%3A%22uaa98eaf7%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><h3 data-lake-id=\"V3jQj\" id=\"V3jQj\"><span data-lake-id=\"u74268862\" id=\"u74268862\">TCP 三次握手的过程</span></h3><p data-lake-id=\"u426be83b\" id=\"u426be83b\"><span data-lake-id=\"uf8e867ca\" id=\"uf8e867ca\">第一次握手，客户端向服务器发送一个 SYN 连接请求报文段，报文段的首部中 SYN 标志位置为 1，序号字段是一个任选的<br />随机数。它代表的是客户端数据的初始序号。</span></p><p data-lake-id=\"u2898566c\" id=\"u2898566c\"><span data-lake-id=\"u0d78845e\" id=\"u0d78845e\">第二次握手，服务器端接收到客户端发送的 SYN 连接请求报文段后，服务器首先会为该连接分配 TCP 缓存和变量，然后向<br />客户端发送 SYN ACK 报文段，报文段的首部中 SYN 和 ACK 标志位都被置为 1，代表这是一个对 SYN 连接请求的确认，<br />同时序号字段是服务器端产生的一个任选的随机数，它代表的是服务器端数据的初始序号。确认号字段为客户端发送的序号加<br />一。</span></p><p data-lake-id=\"u2d34ee0d\" id=\"u2d34ee0d\"><span data-lake-id=\"u7e7d4213\" id=\"u7e7d4213\">第三次握手，客户端接收到服务器的肯定应答后，它也会为这次 TCP 连接分配缓存和变量，同时向服务器端发送一个对服务<br />器端的报文段的确认。第三次握手可以在报文段中携带数据。</span></p><p data-lake-id=\"u253d8cc8\" id=\"u253d8cc8\"><span data-lake-id=\"uec31e217\" id=\"uec31e217\">在我看来，TCP 三次握手的建立连接的过程就是相互确认初始序号的过程，告诉对方，什么样序号的报文段能够被正确接收。<br />第三次握手的作用是客户端对服务器端的初始序号的确认。如果只使用两次握手，那么服务器就没有办法知道自己的序号是否<br />已被确认。同时这样也是为了防止失效的请求报文段被服务器接收，而出现错误的情况。</span></p><p data-lake-id=\"udeb6cef9\" id=\"udeb6cef9\"><span data-lake-id=\"uf5012d6d\" id=\"uf5012d6d\">详细资料可以参考：<br /></span><a href=\"https://www.zhihu.com/question/24853633\" target=\"_blank\" data-lake-id=\"ua1e3347b\" id=\"ua1e3347b\"><span data-lake-id=\"uc1617efc\" id=\"uc1617efc\">《TCP 为什么是三次握手，而不是两次或四次？》</span></a><span data-lake-id=\"u1933ea18\" id=\"u1933ea18\"><br /></span><a href=\"https://blog.csdn.net/qzcsu/article/details/72861891\" target=\"_blank\" data-lake-id=\"u6f29291c\" id=\"u6f29291c\"><span data-lake-id=\"u6302a95e\" id=\"u6302a95e\">《TCP 的三次握手与四次挥手》</span></a></p><h3 data-lake-id=\"yqbjc\" id=\"yqbjc\"><span data-lake-id=\"u97b8da98\" id=\"u97b8da98\">TCP 四次挥手的过程</span></h3><p data-lake-id=\"uc8149072\" id=\"uc8149072\"><span data-lake-id=\"u407443a0\" id=\"u407443a0\">因为 TCP 连接是全双工的，也就是说通信的双方都可以向对方发送和接收消息，所以断开连接需要双方的确认。</span></p><p data-lake-id=\"uf5435433\" id=\"uf5435433\"><span data-lake-id=\"ua3ec1730\" id=\"ua3ec1730\">第一次挥手，客户端认为没有数据要再发送给服务器端，它就向服务器发送一个 FIN 报文段，申请断开客户端到服务器端的<br />连接。发送后客户端进入 FIN_WAIT_1 状态。</span></p><p data-lake-id=\"u8ca4fef8\" id=\"u8ca4fef8\"><span data-lake-id=\"u1b7e6115\" id=\"u1b7e6115\">第二次挥手，服务器端接收到客户端释放连接的请求后，向客户端发送一个确认报文段，表示已经接收到了客户端释放连接的<br />请求，以后不再接收客户端发送过来的数据。但是因为连接是全双工的，所以此时，服务器端还可以向客户端发送数据。服务<br />器端进入 CLOSE_WAIT 状态。客户端收到确认后，进入 FIN_WAIT_2 状态。</span></p><p data-lake-id=\"u657645a5\" id=\"u657645a5\"><span data-lake-id=\"u0f8660f7\" id=\"u0f8660f7\">第三次挥手，服务器端发送完所有数据后，向客户端发送 FIN 报文段，申请断开服务器端到客户端的连接。发送后进入 LAS<br />T_ACK 状态。</span></p><p data-lake-id=\"u8ed65f9a\" id=\"u8ed65f9a\"><span data-lake-id=\"u632238fc\" id=\"u632238fc\">第四次挥手，客户端接收到 FIN 请求后，向服务器端发送一个确认应答，并进入 TIME_WAIT 阶段。该阶段会持续一段时间，<br />这个时间为报文段在网络中的最大生存时间，如果该时间内服务端没有重发请求的话，客户端进入 CLOSED 的状态。如果收到<br />服务器的重发请求就重新发送确认报文段。服务器端收到客户端的确认报文段后就进入 CLOSED 状态，这样全双工的连接就被<br />释放了。</span></p><p data-lake-id=\"u24034cf3\" id=\"u24034cf3\"><span data-lake-id=\"u0ee91f5b\" id=\"u0ee91f5b\">TCP 使用四次挥手的原因是因为 TCP 的连接是全双工的，所以需要双方分别释放到对方的连接，单独一方的连接释放，只代<br />表不能再向对方发送数据，连接处于的是半释放的状态。</span></p><p data-lake-id=\"ub35dbc77\" id=\"ub35dbc77\"><span data-lake-id=\"u74629112\" id=\"u74629112\">最后一次挥手中，客户端会等待一段时间再关闭的原因，是为了防止发送给服务器的确认报文段丢失或者出错，从而导致服务器<br />端不能正常关闭。</span></p><p data-lake-id=\"ud7607da5\" id=\"ud7607da5\"><span data-lake-id=\"u30fc786d\" id=\"u30fc786d\">详细资料可以参考：</span></p><p data-lake-id=\"uec89caf5\" id=\"uec89caf5\"><a href=\"https://juejin.im/book/5bdc715fe51d454e755f75ef/section/5c447392e51d45524b02eaf5\" target=\"_blank\" data-lake-id=\"u9e48a821\" id=\"u9e48a821\"><span data-lake-id=\"u48b806cd\" id=\"u48b806cd\">《前端面试之道》</span></a></p><h3 data-lake-id=\"LjYDN\" id=\"LjYDN\"><span data-lake-id=\"u68272cd0\" id=\"u68272cd0\">状态转化图</span></h3><p data-lake-id=\"ue10a5e7a\" id=\"ue10a5e7a\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2022%2Fpng%2F732231%2F1647358828835-ea3a9e8e-c593-4b02-882c-c3262d08192b.png%22%2C%22taskId%22%3A%22u7490fe82-fcd9-4fdc-b0a5-a4ced46fe66%22%2C%22clientId%22%3A%22ue2b5ebeb-dae8-4%22%2C%22originalType%22%3A%22url%22%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A124726%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A479%2C%22originHeight%22%3A372%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%E5%AE%A2%E6%88%B7%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E5%8F%91%E8%B5%B7%20%E4%B8%80%E4%B8%AATCP%E8%BF%9E%E6%8E%A5%20CLOSED%20%E7%AD%89%E5%BE%8530%E7%A7%92%20%E5%8F%91%E9%80%81SYN%20TIME%20WAIT%20SYN%20SENT%20%E6%8E%A5%E6%94%B6FIN%2C%20%E6%8E%A5%E6%94%B6SYN%26ACK%2C%20%E5%8F%91%E9%80%81ACK%20%E5%8F%91%E9%80%81ACK%20FIN%20WAIT%20ESTABLISHED%20%E5%8F%91%E9%80%81FIN%20%E6%8E%A5%E6%94%B6ACK%2C%20%E4%B8%8D%E5%8F%91%E9%80%81%20N%20WAIT%20%E5%AE%A2%E6%88%B7%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%20%E5%8F%91%E8%B5%B7%E5%85%B3%E9%97%AD%E8%BF%9E%E6%8E%A5%20%E5%9B%BE3-41%20%E5%AE%A2%E6%88%B7%20TCP%20%20TCP%20%E7%8A%B6%E6%80%81%E5%BA%8F%E5%88%97%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A283.87985%2C%22y%22%3A7.7180457%2C%22width%22%3A103.30252000000002%2C%22height%22%3A14.8013963%2C%22text%22%3A%22%E5%AE%A2%E6%88%B7%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E5%8F%91%E8%B5%B7%22%7D%2C%7B%22x%22%3A286.9236%2C%22y%22%3A24.141357%2C%22width%22%3A71.54102999999998%2C%22height%22%3A12.372487%2C%22text%22%3A%22%E4%B8%80%E4%B8%AATCP%E8%BF%9E%E6%8E%A5%22%7D%2C%7B%22x%22%3A207.14374%2C%22y%22%3A36.02251%2C%22width%22%3A46.396529999999984%2C%22height%22%3A11.166306000000006%2C%22text%22%3A%22CLOSED%22%7D%2C%7B%22x%22%3A62.799267%2C%22y%22%3A46.43623%2C%22width%22%3A62.613913%2C%22height%22%3A15.835467999999999%2C%22text%22%3A%22%E7%AD%89%E5%BE%8530%E7%A7%92%22%7D%2C%7B%22x%22%3A348.0491%2C%22y%22%3A63.92212%2C%22width%22%3A51.36996999999997%2C%22height%22%3A14.079060000000005%2C%22text%22%3A%22%E5%8F%91%E9%80%81SYN%22%7D%2C%7B%22x%22%3A69.728645%2C%22y%22%3A103.21957%2C%22width%22%3A70.83515499999999%2C%22height%22%3A12.780549999999991%2C%22text%22%3A%22TIME%20WAIT%22%7D%2C%7B%22x%22%3A322.2428%2C%22y%22%3A114.00464%2C%22width%22%3A62.123440000000016%2C%22height%22%3A10.653050000000007%2C%22text%22%3A%22SYN%20SENT%22%7D%2C%7B%22x%22%3A51.512165%2C%22y%22%3A152.53831%2C%22width%22%3A51.057849999999995%2C%22height%22%3A13.917270000000002%2C%22text%22%3A%22%E6%8E%A5%E6%94%B6FIN%2C%22%7D%2C%7B%22x%22%3A357.34238%2C%22y%22%3A154.62729%2C%22width%22%3A98.51846%2C%22height%22%3A13.329760000000022%2C%22text%22%3A%22%E6%8E%A5%E6%94%B6SYN%26ACK%2C%22%7D%2C%7B%22x%22%3A51.873455%2C%22y%22%3A167.81367%2C%22width%22%3A55.040791000000006%2C%22height%22%3A14.097170000000006%2C%22text%22%3A%22%E5%8F%91%E9%80%81ACK%22%7D%2C%7B%22x%22%3A358.4348%2C%22y%22%3A169.87877%2C%22width%22%3A51.896349999999984%2C%22height%22%3A13.077669999999983%2C%22text%22%3A%22%E5%8F%91%E9%80%81ACK%22%7D%2C%7B%22x%22%3A67.30785%2C%22y%22%3A211.47063%2C%22width%22%3A63.78829999999999%2C%22height%22%3A12.482859999999988%2C%22text%22%3A%22FIN%20WAIT%22%7D%2C%7B%22x%22%3A305.6983%2C%22y%22%3A219.0822%2C%22width%22%3A85.35159999999996%2C%22height%22%3A10.74185%2C%22text%22%3A%22ESTABLISHED%22%7D%2C%7B%22x%22%3A346.1956%2C%22y%22%3A262.95755%2C%22width%22%3A45.153549999999996%2C%22height%22%3A13.08569%2C%22text%22%3A%22%E5%8F%91%E9%80%81FIN%22%7D%2C%7B%22x%22%3A64.31632%2C%22y%22%3A275.8455%2C%22width%22%3A57.18017999999999%2C%22height%22%3A15.160050000000012%2C%22text%22%3A%22%E6%8E%A5%E6%94%B6ACK%2C%22%7D%2C%7B%22x%22%3A65.67383%2C%22y%22%3A292.11917%2C%22width%22%3A38.39576000000001%2C%22height%22%3A14.35338999999999%2C%22text%22%3A%22%E4%B8%8D%E5%8F%91%E9%80%81%22%7D%2C%7B%22x%22%3A199.50371%2C%22y%22%3A292.6368%2C%22width%22%3A45.88588999999999%2C%22height%22%3A9.89942000000002%2C%22text%22%3A%22N%20WAIT%22%7D%2C%7B%22x%22%3A292.3856%2C%22y%22%3A299.98416%2C%22width%22%3A74.82436000000001%2C%22height%22%3A11.794440000000009%2C%22text%22%3A%22%E5%AE%A2%E6%88%B7%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%22%7D%2C%7B%22x%22%3A291.41074%2C%22y%22%3A314.9318%2C%22width%22%3A75.65789000000001%2C%22height%22%3A12.715449999999976%2C%22text%22%3A%22%E5%8F%91%E8%B5%B7%E5%85%B3%E9%97%AD%E8%BF%9E%E6%8E%A5%22%7D%2C%7B%22x%22%3A105.861916%2C%22y%22%3A338.97495%2C%22width%22%3A293.185204%2C%22height%22%3A15.762020000000007%2C%22text%22%3A%22%E5%9B%BE3-41%20%E5%AE%A2%E6%88%B7%20TCP%20%20TCP%20%E7%8A%B6%E6%80%81%E5%BA%8F%E5%88%97%22%7D%5D%2C%22id%22%3A%22u76f0851c%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><p data-lake-id=\"u9511665b\" id=\"u9511665b\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2022%2Fpng%2F732231%2F1647358829001-4a19b5b8-71b0-49f0-ae8d-b289001d1978.png%22%2C%22taskId%22%3A%22ub3ea011a-e523-490d-9a4e-c234be14eb3%22%2C%22clientId%22%3A%22ue2b5ebeb-dae8-4%22%2C%22originalType%22%3A%22url%22%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A120002%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A485%2C%22originHeight%22%3A364%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E5%88%9B%E5%BB%BA%20%E4%B8%AA%E7%9B%91%E5%90%AC%E5%A5%97%E6%8E%A5%E5%AD%97%20%E6%8E%A5%E6%94%B6ACK%2C%20CLOSED%20%E4%B8%8D%E5%8F%91%E9%80%81%20LAST%20ACK%20LISTEN%20%E6%8E%A5%E6%94%B6SYN%E5%B9%B6%E5%8F%91%E9%80%81%20%E5%8F%91%E9%80%81FIN%20SYN%26ACK%20CLOSN%20WAIT%20SYN%20RCVD%20%E6%8E%A5%E6%94%B6FIN%2C%20%E6%8E%A5%E6%94%B6ACK%2C%20%E5%8F%91%E9%80%81ACK%20%E4%B8%8D%E5%8F%91%E9%80%81%20ESTABLISHED%20%E5%9B%BE3-42%20%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF%20TCP%E7%BB%8F%E5%8E%86%E7%9A%84%E5%85%B8%E5%9E%8B%E7%9A%84%20TCP%E7%8A%B6%E6%80%81%E5%BA%8F%E5%88%97%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A290.83405%2C%22y%22%3A16.1529%2C%22width%22%3A113.43450000000001%2C%22height%22%3A14.255442000000002%2C%22text%22%3A%22%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E5%88%9B%E5%BB%BA%22%7D%2C%7B%22x%22%3A306.59988%2C%22y%22%3A31.694376%2C%22width%22%3A73.37330000000003%2C%22height%22%3A14.874308%2C%22text%22%3A%22%E4%B8%AA%E7%9B%91%E5%90%AC%E5%A5%97%E6%8E%A5%E5%AD%97%22%7D%2C%7B%22x%22%3A74.51544%2C%22y%22%3A40.037365%2C%22width%22%3A56.81703%2C%22height%22%3A12.599730999999998%2C%22text%22%3A%22%E6%8E%A5%E6%94%B6ACK%2C%22%7D%2C%7B%22x%22%3A206.41315%2C%22y%22%3A41.121655%2C%22width%22%3A46.066479999999984%2C%22height%22%3A10.427325000000003%2C%22text%22%3A%22CLOSED%22%7D%2C%7B%22x%22%3A76.00985%2C%22y%22%3A55.105606%2C%22width%22%3A37.13505000000001%2C%22height%22%3A12.500154000000002%2C%22text%22%3A%22%E4%B8%8D%E5%8F%91%E9%80%81%22%7D%2C%7B%22x%22%3A77.19883%2C%22y%22%3A108.58856%2C%22width%22%3A62.62768999999999%2C%22height%22%3A11.515689999999992%2C%22text%22%3A%22LAST%20ACK%22%7D%2C%7B%22x%22%3A327.19315%2C%22y%22%3A116.35892%2C%22width%22%3A47.95697000000001%2C%22height%22%3A12.807840000000013%2C%22text%22%3A%22LISTEN%22%7D%2C%7B%22x%22%3A355.57077%2C%22y%22%3A157.55464%2C%22width%22%3A88.84039000000001%2C%22height%22%3A13.781059999999997%2C%22text%22%3A%22%E6%8E%A5%E6%94%B6SYN%E5%B9%B6%E5%8F%91%E9%80%81%22%7D%2C%7B%22x%22%3A56.18986%2C%22y%22%3A165.32097%2C%22width%22%3A45.860975%2C%22height%22%3A13.92935%2C%22text%22%3A%22%E5%8F%91%E9%80%81FIN%22%7D%2C%7B%22x%22%3A355.25452%2C%22y%22%3A174.30647%2C%22width%22%3A67.98867999999999%2C%22height%22%3A11.795630000000017%2C%22text%22%3A%22SYN%26ACK%22%7D%2C%7B%22x%22%3A67.866325%2C%22y%22%3A215.95825%2C%22width%22%3A79.62700499999998%2C%22height%22%3A13.26009000000002%2C%22text%22%3A%22CLOSN%20WAIT%22%7D%2C%7B%22x%22%3A320.8411%2C%22y%22%3A222.66753%2C%22width%22%3A60.134240000000034%2C%22height%22%3A11.112940000000009%2C%22text%22%3A%22SYN%20RCVD%22%7D%2C%7B%22x%22%3A66.41967%2C%22y%22%3A271.7748%2C%22width%22%3A50.67881%2C%22height%22%3A13.34717999999998%2C%22text%22%3A%22%E6%8E%A5%E6%94%B6FIN%2C%22%7D%2C%7B%22x%22%3A340.02258%2C%22y%22%3A274.17703%2C%22width%22%3A58.20443999999998%2C%22height%22%3A13.41552999999999%2C%22text%22%3A%22%E6%8E%A5%E6%94%B6ACK%2C%22%7D%2C%7B%22x%22%3A66.8715%2C%22y%22%3A287.31067%2C%22width%22%3A52.005735%2C%22height%22%3A12.69014999999996%2C%22text%22%3A%22%E5%8F%91%E9%80%81ACK%22%7D%2C%7B%22x%22%3A341.6907%2C%22y%22%3A289.44965%2C%22width%22%3A38.71136999999999%2C%22height%22%3A13.622680000000003%2C%22text%22%3A%22%E4%B8%8D%E5%8F%91%E9%80%81%22%7D%2C%7B%22x%22%3A181.80898%2C%22y%22%3A297.3396%2C%22width%22%3A83.07512%2C%22height%22%3A10.925999999999988%2C%22text%22%3A%22ESTABLISHED%22%7D%2C%7B%22x%22%3A87.26879%2C%22y%22%3A331.7965%2C%22width%22%3A323.09961%2C%22height%22%3A16.215460000000007%2C%22text%22%3A%22%E5%9B%BE3-42%20%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF%20TCP%E7%BB%8F%E5%8E%86%E7%9A%84%E5%85%B8%E5%9E%8B%E7%9A%84%20TCP%E7%8A%B6%E6%80%81%E5%BA%8F%E5%88%97%22%7D%5D%2C%22id%22%3A%22u43a18ca6%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><h3 data-lake-id=\"Hm7FQ\" id=\"Hm7FQ\"><span data-lake-id=\"u5483a039\" id=\"u5483a039\">ARQ 协议</span></h3><p data-lake-id=\"u504d6d37\" id=\"u504d6d37\"><span data-lake-id=\"u7fc0ae1c\" id=\"u7fc0ae1c\">ARQ 协议指的是自动重传请求，它通过超时和重传来保证数据的可靠交付，它是 TCP 协议实现可靠数据传输的一个很重要的<br />机制。</span></p><p data-lake-id=\"ud6046758\" id=\"ud6046758\"><span data-lake-id=\"u524f8535\" id=\"u524f8535\">它分为停止等待 ARQ 协议和连续 ARQ 协议。</span></p><p data-lake-id=\"u491cbcd1\" id=\"u491cbcd1\"><span data-lake-id=\"u0b1244cd\" id=\"u0b1244cd\">一、停止等待 ARQ 协议</span></p><p data-lake-id=\"u737071e4\" id=\"u737071e4\"><span data-lake-id=\"uf0f5cb74\" id=\"uf0f5cb74\">停止等待 ARQ 协议的基本原理是，对于发送方来说发送方每发送一个分组，就为这个分组设置一个定时器。当发送分组的确认<br />回答返回了，则清除定时器，发送下一个分组。如果在规定的时间内没有收到已发送分组的肯定回答，则重新发送上一个分组。</span></p><p data-lake-id=\"ubdd0f47b\" id=\"ubdd0f47b\"><span data-lake-id=\"u20251fbd\" id=\"u20251fbd\">对于接受方来说，每次接受到一个分组，就返回对这个分组的肯定应答，当收到冗余的分组时，就直接丢弃，并返回一个对冗余<br />分组的确认。当收到分组损坏的情况的时候，直接丢弃。</span></p><p data-lake-id=\"u5e42ac08\" id=\"u5e42ac08\"><span data-lake-id=\"ucb446994\" id=\"ucb446994\">使用停止等待 ARQ 协议的缺点是每次发送分组必须等到分组确认后才能发送下一个分组，这样会造成信道的利用率过低。</span></p><p data-lake-id=\"u80c8c1e5\" id=\"u80c8c1e5\"><span data-lake-id=\"u3f19da6c\" id=\"u3f19da6c\">二、连续 ARQ 协议</span></p><p data-lake-id=\"u5060eb08\" id=\"u5060eb08\"><span data-lake-id=\"u7344da71\" id=\"u7344da71\">连续 ARQ 协议是为了解决停止等待 ARQ 协议对于信道的利用率过低的问题。它通过连续发送一组分组，然后再等待对分组的<br />确认回答，对于如何处理分组中可能出现的差错恢复情况，一般可以使用滑动窗口协议和选择重传协议来实现。</span></p><ol list=\"ua3769f70\"><li fid=\"u8a973f80\" data-lake-id=\"u3d6e161b\" id=\"u3d6e161b\"><span data-lake-id=\"u0439401b\" id=\"u0439401b\">滑动窗口协议</span></li></ol><p data-lake-id=\"u67f0c12c\" id=\"u67f0c12c\"><span data-lake-id=\"u002391f1\" id=\"u002391f1\">使用滑动窗口协议，在发送方维持了一个发送窗口，发送窗口以前的分组是已经发送并确认了的分组，发送窗口中包含了已经发<br />送但未确认的分组和允许发送但还未发送的分组，发送窗口以后的分组是缓存中还不允许发送的分组。当发送方向接收方发送分<br />组时，会依次发送窗口内的所有分组，并且设置一个定时器，这个定时器可以理解为是最早发送但未收到确认的分组。如果在定<br />时器的时间内收到某一个分组的确认回答，则滑动窗口，将窗口的首部移动到确认分组的后一个位置，此时如果还有已发送但没<br />有确认的分组，则重新设置定时器，如果没有了则关闭定时器。如果定时器超时，则重新发送所有已经发送但还未收到确认的分<br />组。</span></p><p data-lake-id=\"u6b90d550\" id=\"u6b90d550\"><span data-lake-id=\"u00cbe07f\" id=\"u00cbe07f\">接收方使用的是累计确认的机制，对于所有按序到达的分组，接收方返回一个分组的肯定回答。如果收到了一个乱序的分组，那<br />么接方会直接丢弃，并返回一个最近的按序到达的分组的肯定回答。使用累计确认保证了确认号以前的分组都已经按序到达了，<br />所以发送窗口可以移动到已确认分组的后面。</span></p><p data-lake-id=\"u6cdc26fd\" id=\"u6cdc26fd\"><span data-lake-id=\"u1022ea05\" id=\"u1022ea05\">滑动窗口协议的缺点是因为使用了累计确认的机制，如果出现了只是窗口中的第一个分组丢失，而后面的分组都按序到达的情况<br />的话，那么滑动窗口协议会重新发送所有的分组，这样就造成了大量不必要分组的丢弃和重传。</span></p><ol list=\"u47feac9a\"><li fid=\"u05d4a6b3\" data-lake-id=\"u6ca95a8b\" id=\"u6ca95a8b\"><span data-lake-id=\"u61edebb6\" id=\"u61edebb6\">选择重传协议</span></li></ol><p data-lake-id=\"uce9e2ca8\" id=\"uce9e2ca8\"><span data-lake-id=\"u248769ac\" id=\"u248769ac\">因为滑动窗口使用累计确认的方式，所以会造成很多不必要分组的重传。使用选择重传协议可以解决这个问题。</span></p><p data-lake-id=\"ucc9008f2\" id=\"ucc9008f2\"><span data-lake-id=\"u331059f1\" id=\"u331059f1\">选择重传协议在发送方维护了一个发送窗口。发送窗口的以前是已经发送并确认的分组，窗口内包含了已发送但未被确认的分组，<br />已确认的乱序分组，和允许发送但还未发送的分组，发送窗口以后的是缓存中还不允许发送的分组。选择重传协议与滑动窗口协<br />议最大的不同是，发送方发送分组时，为一个分组都创建了一个定时器。当发送方接受到一个分组的确认应答后，取消该分组的<br />定时器，并判断接受该分组后，是否存在由窗口首部为首的连续的确认分组，如果有则向后移动窗口的位置，如果没有则将该分<br />组标识为已接收的乱序分组。当某一个分组定时器到时后，则重新传递这个分组。</span></p><p data-lake-id=\"ued9f09b6\" id=\"ued9f09b6\"><span data-lake-id=\"uac41e9f5\" id=\"uac41e9f5\">在接收方，它会确认每一个正确接收的分组，不管这个分组是按序的还是乱序的，乱序的分组将被缓存下来，直到所有的乱序分<br />组都到达形成一个有序序列后，再将这一段分组交付给上层。对于不能被正确接收的分组，接收方直接忽略该分组。</span></p><p data-lake-id=\"udd21dec1\" id=\"udd21dec1\"><span data-lake-id=\"ue41999bf\" id=\"ue41999bf\">详细资料可以参考：<br /></span><a href=\"https://blog.csdn.net/guoweimelon/article/details/50879588\" target=\"_blank\" data-lake-id=\"u9ef2b7a2\" id=\"u9ef2b7a2\"><span data-lake-id=\"ubbd19307\" id=\"ubbd19307\">《TCP 连续 ARQ 协议和滑动窗口协议》</span></a></p><h3 data-lake-id=\"KWKxs\" id=\"KWKxs\"><span data-lake-id=\"uba3fdbb4\" id=\"uba3fdbb4\">TCP 的可靠运输机制</span></h3><p data-lake-id=\"u6d8eb587\" id=\"u6d8eb587\"><span data-lake-id=\"u7c2fa36e\" id=\"u7c2fa36e\">TCP 的可靠运输机制是基于连续 ARQ 协议和滑动窗口协议的。</span></p><p data-lake-id=\"u0f8ad560\" id=\"u0f8ad560\"><span data-lake-id=\"uec4bb740\" id=\"uec4bb740\">TCP 协议在发送方维持了一个发送窗口，发送窗口以前的报文段是已经发送并确认了的报文段，发送窗口中包含了已经发送但<br />未确认的报文段和允许发送但还未发送的报文段，发送窗口以后的报文段是缓存中还不允许发送的报文段。当发送方向接收方发<br />送报文时，会依次发送窗口内的所有报文段，并且设置一个定时器，这个定时器可以理解为是最早发送但未收到确认的报文段。<br />如果在定时器的时间内收到某一个报文段的确认回答，则滑动窗口，将窗口的首部向后滑动到确认报文段的后一个位置，此时如<br />果还有已发送但没有确认的报文段，则重新设置定时器，如果没有了则关闭定时器。如果定时器超时，则重新发送所有已经发送<br />但还未收到确认的报文段，并将超时的间隔设置为以前的两倍。当发送方收到接收方的三个冗余的确认应答后，这是一种指示，<br />说明该报文段以后的报文段很有可能发生丢失了，那么发送方会启用快速重传的机制，就是当前定时器结束前，发送所有的已发<br />送但确认的报文段。</span></p><p data-lake-id=\"u81d5ba7c\" id=\"u81d5ba7c\"><span data-lake-id=\"u31febb99\" id=\"u31febb99\">接收方使用的是累计确认的机制，对于所有按序到达的报文段，接收方返回一个报文段的肯定回答。如果收到了一个乱序的报文<br />段，那么接方会直接丢弃，并返回一个最近的按序到达的报文段的肯定回答。使用累计确认保证了返回的确认号之前的报文段都<br />已经按序到达了，所以发送窗口可以移动到已确认报文段的后面。</span></p><p data-lake-id=\"u0762ed47\" id=\"u0762ed47\"><span data-lake-id=\"ud0adf7b1\" id=\"ud0adf7b1\">发送窗口的大小是变化的，它是由接收窗口剩余大小和网络中拥塞程度来决定的，TCP 就是通过控制发送窗口的长度来控制报文<br />段的发送速率。</span></p><p data-lake-id=\"u57fe0e53\" id=\"u57fe0e53\"><span data-lake-id=\"uf573179c\" id=\"uf573179c\">但是 TCP 协议并不完全和滑动窗口协议相同，因为许多的 TCP 实现会将失序的报文段给缓存起来，并且发生重传时，只会重<br />传一个报文段，因此 TCP 协议的可靠传输机制更像是窗口滑动协议和选择重传协议的一个混合体。</span></p><h3 data-lake-id=\"C2X5c\" id=\"C2X5c\"><span data-lake-id=\"udedda7b1\" id=\"udedda7b1\">TCP 的流量控制机制</span></h3><p data-lake-id=\"ub23d374e\" id=\"ub23d374e\"><span data-lake-id=\"uceb530c2\" id=\"uceb530c2\">TCP 提供了流量控制的服务，这个服务的主要目的是控制发送方的发送速率，保证接收方来得及接收。因为一旦发送的速率大<br />于接收方所能接收的速率，就会造成报文段的丢失。接收方主要是通过接收窗口来告诉发送方自己所能接收的大小，发送方根据<br />接收方的接收窗口的大小来调整发送窗口的大小，以此来达到控制发送速率的目的。</span></p><h3 data-lake-id=\"pQrEO\" id=\"pQrEO\"><span data-lake-id=\"u22406f00\" id=\"u22406f00\">TCP 的拥塞控制机制</span></h3><p data-lake-id=\"u124c2e02\" id=\"u124c2e02\"><span data-lake-id=\"u01a54fa5\" id=\"u01a54fa5\">TCP 的拥塞控制主要是根据网络中的拥塞情况来控制发送方数据的发送速率，如果网络处于拥塞的状态，发送方就减小发送的<br />速率，这样一方面是为了避免继续增加网络中的拥塞程度，另一方面也是为了避免网络拥塞可能造成的报文段丢失。</span></p><p data-lake-id=\"u2e724865\" id=\"u2e724865\"><span data-lake-id=\"u20fc423d\" id=\"u20fc423d\">TCP 的拥塞控制主要使用了四个机制，分别是慢启动、拥塞避免、快速重传和快速恢复。</span></p><p data-lake-id=\"u2c0e9e0b\" id=\"u2c0e9e0b\"><span data-lake-id=\"u2528be1e\" id=\"u2528be1e\">慢启动的基本思想是，因为在发送方刚开始发送数据的时候，并不知道网络中的拥塞程度，所以先以较低的速率发送，进行试探<br />，每次收到一个确认报文，就将发动窗口的长度加一，这样每个 RTT 时间后，发送窗口的长度就会加倍。当发送窗口的大小达<br />到一个阈值的时候就进入拥塞避免算法。</span></p><p data-lake-id=\"u49364e4f\" id=\"u49364e4f\"><span data-lake-id=\"ub52f749d\" id=\"ub52f749d\">拥塞避免算法是为了避免可能发生的拥塞，将发送窗口的大小由每过一个 RTT 增长一倍，变为每过一个 RTT ，长度只加一。<br />这样将窗口的增长速率由指数增长，变为加法线性增长。</span></p><p data-lake-id=\"u864157aa\" id=\"u864157aa\"><span data-lake-id=\"u8f288915\" id=\"u8f288915\">快速重传指的是，当发送方收到三个冗余的确认应答时，因为 TCP 使用的是累计确认的机制，所以很有可能是发生了报文段的<br />丢失，因此采用立即重传的机制，在定时器结束前发送所有已发送但还未接收到确认应答的报文段。</span></p><p data-lake-id=\"u89c5acdf\" id=\"u89c5acdf\"><span data-lake-id=\"u81093ca6\" id=\"u81093ca6\">快速恢复是对快速重传的后续处理，因为网络中可能已经出现了拥塞情况，所以会将慢启动的阀值减小为原来的一半，然后将拥<br />塞窗口的值置为减半后的阀值，然后开始执行拥塞避免算法，使得拥塞窗口缓慢地加性增大。简单来理解就是，乘性减，加性增。</span></p><p data-lake-id=\"u0a06a455\" id=\"u0a06a455\"><span data-lake-id=\"u0ca760f3\" id=\"u0ca760f3\">TCP 认为网络拥塞的主要依据是报文段的重传次数，它会根据网络中的拥塞程度，通过调整慢启动的阀值，然后交替使用上面四<br />种机制来达到拥塞控制的目的。</span></p><p data-lake-id=\"u89796bf1\" id=\"u89796bf1\"><span data-lake-id=\"u42297bd2\" id=\"u42297bd2\">详细资料可以参考：<br /></span><a href=\"https://www.jianshu.com/p/7d59f9292b03\" target=\"_blank\" data-lake-id=\"uabc18905\" id=\"uabc18905\"><span data-lake-id=\"u8d483ee7\" id=\"u8d483ee7\">《TCP 的拥塞控制机制》</span></a><span data-lake-id=\"u13258f18\" id=\"u13258f18\"><br /></span><a href=\"http://www.voidcn.com/article/p-vrdkquop-ms.html\" target=\"_blank\" data-lake-id=\"uc3fa54f4\" id=\"uc3fa54f4\"><span data-lake-id=\"ub0b3426a\" id=\"ub0b3426a\">《网络基本功：TCP 拥塞控制机制》</span></a></p><h3 data-lake-id=\"wgwwt\" id=\"wgwwt\"><span data-lake-id=\"u2ff7b571\" id=\"u2ff7b571\">网络层</span></h3><p data-lake-id=\"u8c98dfd0\" id=\"u8c98dfd0\"><span data-lake-id=\"u9dfd8cac\" id=\"u9dfd8cac\">网络层协议主要实现了不同主机间的逻辑通信功能。网络层协议一共包含两个主要的组件，一个 IP 网际协议，一个是路由选<br />择协议。</span></p><p data-lake-id=\"u3d3ac3df\" id=\"u3d3ac3df\"><span data-lake-id=\"u24a2d3a6\" id=\"u24a2d3a6\">IP 网际协议规定了网络层的编址和转发方式，比如说我们接入网络的主机都会被分配一个 IP 地址，常用的比如 IPV4 使用<br />32 位来分配地址，还有 IPv6 使用 128 位来分配地址。</span></p><p data-lake-id=\"u324e6848\" id=\"u324e6848\"><span data-lake-id=\"ueb30b8af\" id=\"ueb30b8af\">路由选择协议决定了数据报从源到目的地所流经的路径，常见的比如距离向量路由选择算法等。</span></p><h3 data-lake-id=\"wITmj\" id=\"wITmj\"><span data-lake-id=\"u81cf3a97\" id=\"u81cf3a97\">数据链路层</span></h3><p data-lake-id=\"ucdaf9e73\" id=\"ucdaf9e73\"><span data-lake-id=\"u180b82b0\" id=\"u180b82b0\">数据链路层提供的服务是如何将数据报通过单一通信链路从一个结点移动到相邻节点。每一台主机都有一个唯一的 MAC 地址，<br />这是由网络适配器决定的，在全世界都是独一无二的。</span></p><h3 data-lake-id=\"xeTTJ\" id=\"xeTTJ\"><span data-lake-id=\"ub7528353\" id=\"ub7528353\">物理层</span></h3><p data-lake-id=\"ueac43db6\" id=\"ueac43db6\"><span data-lake-id=\"u296507a0\" id=\"u296507a0\">物理层提供的服务是尽可能的屏蔽掉组成网络的物理设备和传输介质间的差异，使数据链路层不需要考虑网络的具体传输介质<br />是什么。</span></p><p data-lake-id=\"u0405e50d\" id=\"u0405e50d\"><span data-lake-id=\"u5df43874\" id=\"u5df43874\">详细资料可以参考：<br /></span><a href=\"https://juejin.im/post/5b7be0b2e51d4538db34a51e#heading-1\" target=\"_blank\" data-lake-id=\"u4c0f38c6\" id=\"u4c0f38c6\"><span data-lake-id=\"u503bf6f9\" id=\"u503bf6f9\">《搞定计算机网络面试，看这篇就够了（补充版）》</span></a><span data-lake-id=\"u1f71460d\" id=\"u1f71460d\"><br /></span><a href=\"http://www.ruanyifeng.com/blog/2012/05/internet_protocol_suite_part_i.html\" target=\"_blank\" data-lake-id=\"ue5f90428\" id=\"ue5f90428\"><span data-lake-id=\"uafa73d50\" id=\"uafa73d50\">《互联网协议入门（一）》</span></a><span data-lake-id=\"u6a959857\" id=\"u6a959857\"><br /></span><a href=\"http://www.ruanyifeng.com/blog/2012/06/internet_protocol_suite_part_ii.html\" target=\"_blank\" data-lake-id=\"ub668b25f\" id=\"ub668b25f\"><span data-lake-id=\"ucdb32dd7\" id=\"ucdb32dd7\">《互联网协议入门（二）》</span></a></p>",
  "body_draft_lake": "",
  "public": 0,
  "status": 1,
  "view_status": 0,
  "read_status": 1,
  "likes_count": 0,
  "comments_count": 0,
  "content_updated_at": "2022-03-15T15:40:41.000Z",
  "deleted_at": null,
  "created_at": "2022-03-15T15:39:55.000Z",
  "updated_at": "2022-03-15T15:55:11.000Z",
  "published_at": "2022-03-15T15:40:41.000Z",
  "first_published_at": "2022-03-15T15:40:41.000Z",
  "word_count": 5893,
  "cover": "https://cdn.nlark.com/yuque/0/2022/png/732231/1647358828647-a5fcf4e0-a755-4189-ac81-8563aca79f9e.png",
  "description": "传输层传输层协议主要是为不同主机上的不同进程间提供了逻辑通信的功能。传输层只工作在端系统中。多路复用与多路分解将传输层报文段中的数据交付到正确的套接字的工作被称为多路分解。在源主机上从不同的套接字中收集数据，封装头信息生成报文段后，将报文段传递到网络层，这个过程被称为多路复用。无连接的多路复用...",
  "custom_description": null,
  "hits": 0,
  "_serializer": "v2.doc_detail"
}