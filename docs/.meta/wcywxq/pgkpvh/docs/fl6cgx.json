{
  "id": 77021620,
  "slug": "fl6cgx",
  "title": "实现 Promise A+",
  "book_id": 27818302,
  "book": {
    "id": 27818302,
    "type": "Book",
    "slug": "pgkpvh",
    "name": "前端面试知识梳理",
    "user_id": 732231,
    "description": "",
    "creator_id": 732231,
    "public": 0,
    "items_count": 65,
    "likes_count": 0,
    "watches_count": 1,
    "content_updated_at": "2023-01-06T09:17:32.188Z",
    "updated_at": "2023-11-11T18:10:33.000Z",
    "created_at": "2022-05-11T14:43:59.000Z",
    "namespace": "wcywxq/pgkpvh",
    "user": {
      "id": 732231,
      "type": "User",
      "login": "wcywxq",
      "name": "magic",
      "description": null,
      "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/732231/1606968271774-avatar/886ad88b-d2cc-4c9e-a674-f70eb51a679c.png",
      "books_count": 18,
      "public_books_count": 0,
      "followers_count": 0,
      "following_count": 0,
      "created_at": "2020-01-08T14:21:31.000Z",
      "updated_at": "2023-11-13T09:32:35.000Z",
      "_serializer": "v2.user"
    },
    "_serializer": "v2.book"
  },
  "user_id": 732231,
  "creator": {
    "id": 732231,
    "type": "User",
    "login": "wcywxq",
    "name": "magic",
    "description": null,
    "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/732231/1606968271774-avatar/886ad88b-d2cc-4c9e-a674-f70eb51a679c.png",
    "books_count": 18,
    "public_books_count": 0,
    "followers_count": 0,
    "following_count": 0,
    "created_at": "2020-01-08T14:21:31.000Z",
    "updated_at": "2023-11-13T09:32:35.000Z",
    "_serializer": "v2.user"
  },
  "format": "lake",
  "body": "```javascript\n// A+\nconst PENDING = \"PENDING\"\nconst FULFILLED = \"fulfilled\"\nconst REJECTED = \"rejected\"\n\nclass _Promise {\n  constructor(executor) {\n    this.status = PENDING\n    this.value = undefined\n    this.reason = undefined\n    \n    this.onResolvedCallbackList = []\n    this.onRejectedCallbackList = []\n    \n    const resolve = value => {\n      if (this.status === PENDING) {\n        this.status = FULFILLED\n        this.value = value\n        this.onResolvedCallbackList.forEach(fn => fn())\n      }\n    }\n    const reject = reason => {\n      if (this.status === PENDING) {\n        this.status = REJECTED\n        this.reason = reason\n        this.onRejectedCallbackList.forEach(fn => fn())\n      }\n    }\n    \n    try {\n      executor(resolve, reject)\n    } catch (err) {\n      reject(err)\n    }\n  }\n  \n  resolvePromise(promise, next, resolve, reject) {\n    if (next === promise) {\n      return reject(new TypeError(\"xxx\"))\n    }\n    let called\n    if ((typeof next === \"object\" && next !== null) || typeof next === \"function\") {\n      try {\n        if (typeof next.then === \"function\") {\n          const resolveArg = resolveNext => {\n            this.resolvePromise(promise, resolveNext, resolve, reject)\n          }\n          const rejectArg = rejectNext => {\n            if (called) return\n            called = true\n            this.resolvePromise(promise, rejectNext, resolve, reject)\n          }\n          next.then.call(next, resolveArg, rejectArg)\n        } else {\n          resolve(next)\n        }\n      } catch (err) {\n        if (called) return\n        called = true\n        reject(err)\n      }\n    } else {\n      reject(next)\n    }\n  }\n  \n  then(onFulfilled, onRejected) {\n    onFulfilled =\n      typeof onFulfilled === \"function\"\n      ? onFulfilled\n    : function (val) {\n      return val\n    }\n    onRejected =\n      typeof onRejected === \"function\"\n      ? onRejected\n    : function (val) {\n      return val\n    }\n    \n    const promise = new Promise((resolve, reject) => {\n      const resolveCallback = () => {\n        try {\n          let next = onFulfilled(this.value)\n          this.resolvePromise(promise, next, resolve, reject)\n        } catch (err) {\n          reject(err)\n        }\n      }\n      const rejectCallback = () => {\n        try {\n          let next = onRejected(this.reason)\n          this.resolvePromise(promise, next, resolve, reject)\n        } catch (err) {\n          reject(err)\n        }\n      }\n      \n      if (this.status === FULFILLED) {\n        setTimeout(resolveCallback)\n      }\n      if (this.status === REJECTED) {\n        setTimeout(rejectCallback)\n      }\n      if (this.status === PENDING) {\n        this.onResolvedCallbackList.push(resolveCallback)\n        this.onRejectedCallbackList.push(rejectCallback)\n      }\n    })\n    return promise\n  }\n  \n  catch(callback) {\n    this.then(null, callback)\n  }\n  \n  static resolve(value) {\n    if (value instanceof Promise) {\n      return value\n    }\n    return new Promise((resolve, reject) => resolve(value))\n  }\n  \n  static reject(reason) {\n    if (reason instanceof Promise) {\n      return reason\n    }\n    return new Promise((resolve, reject) => reject(reason))\n  }\n  \n  static all(promises) {\n    return new Promise((resolve, reject) => {\n      let length = promises.length\n      let count = 0\n      let res = []\n      if (length === 0) return resolve([])\n      promises.forEach((item, index) => {\n        Promise.resolve(item)\n          .then(val => {\n          count++\n          res[i] = val\n          if (count === length) {\n            resolve(res)\n          }\n        })\n          .catch(err => reject(err))\n      })\n    })\n  }\n  \n  static race(promises) {\n    return new Promise((resolve, reject) => {\n      promises.forEach((item, index) => {\n        Promise.resolve(item)\n          .then(val => resolve(val))\n          .catch(err => reject(err))\n      })\n    })\n  }\n  \n  static any(promises) {\n    return new Promise((resolve, reject) => {\n      let length = promises.length\n      let count = 0\n      if (length === 0) return\n      promises.forEach((item, index) => {\n        Promise.resolve(item)\n          .then(val => resolve(val))\n          .catch(err => {\n          count++\n          if (count === length) {\n            return reject(\"All promises where rejected!\")\n          }\n        })\n      })\n    })\n  }\n  \n  static allSettled(promises) {\n    return new Promise((resolve, reject) => {\n      let length = promises.length\n      let count = 0\n      if (length === 0) return resolve([])\n      promises.forEach((item, index) => {\n        Promise.resolve(item)\n          .then(val => {\n          count++\n          res[i] = {\n            status: \"fulfilled\",\n            value: val\n          }\n          if (count === length) {\n            resolve(res)\n          }\n        })\n          .catch(err => {\n          count++\n          res[i] = {\n            status: \"rejected\",\n            reason: err\n          }\n          if (count === length) {\n            resolve(res)\n          }\n        })\n      })\n    })\n  }\n}\n```\n:::info\n`javaScript` 引擎为了让 `microtask` 尽快的输出，做了一些优化，连续的多个 `then``(3` 个)如果没有 `reject` 或者 `resolve` 会**交替执行 then** 而不至于让一个堵太久完成用户无响应，不单单 `v8` 这样其他引擎也是这样，因为其实 `promise` 内部状态已经结束了。这块在 `v8` 源码里有完整的体现\n:::\n",
  "body_draft": "",
  "body_html": "<!doctype html><pre data-lang=\"javascript\"><code>// A+\nconst PENDING = &quot;PENDING&quot;\nconst FULFILLED = &quot;fulfilled&quot;\nconst REJECTED = &quot;rejected&quot;\n\nclass _Promise {\n  constructor(executor) {\n    this.status = PENDING\n    this.value = undefined\n    this.reason = undefined\n    \n    this.onResolvedCallbackList = []\n    this.onRejectedCallbackList = []\n    \n    const resolve = value =&gt; {\n      if (this.status === PENDING) {\n        this.status = FULFILLED\n        this.value = value\n        this.onResolvedCallbackList.forEach(fn =&gt; fn())\n      }\n    }\n    const reject = reason =&gt; {\n      if (this.status === PENDING) {\n        this.status = REJECTED\n        this.reason = reason\n        this.onRejectedCallbackList.forEach(fn =&gt; fn())\n      }\n    }\n    \n    try {\n      executor(resolve, reject)\n    } catch (err) {\n      reject(err)\n    }\n  }\n  \n  resolvePromise(promise, next, resolve, reject) {\n    if (next === promise) {\n      return reject(new TypeError(&quot;xxx&quot;))\n    }\n    let called\n    if ((typeof next === &quot;object&quot; &amp;&amp; next !== null) || typeof next === &quot;function&quot;) {\n      try {\n        if (typeof next.then === &quot;function&quot;) {\n          const resolveArg = resolveNext =&gt; {\n            this.resolvePromise(promise, resolveNext, resolve, reject)\n          }\n          const rejectArg = rejectNext =&gt; {\n            if (called) return\n            called = true\n            this.resolvePromise(promise, rejectNext, resolve, reject)\n          }\n          next.then.call(next, resolveArg, rejectArg)\n        } else {\n          resolve(next)\n        }\n      } catch (err) {\n        if (called) return\n        called = true\n        reject(err)\n      }\n    } else {\n      reject(next)\n    }\n  }\n  \n  then(onFulfilled, onRejected) {\n    onFulfilled =\n      typeof onFulfilled === &quot;function&quot;\n      ? onFulfilled\n    : function (val) {\n      return val\n    }\n    onRejected =\n      typeof onRejected === &quot;function&quot;\n      ? onRejected\n    : function (val) {\n      return val\n    }\n    \n    const promise = new Promise((resolve, reject) =&gt; {\n      const resolveCallback = () =&gt; {\n        try {\n          let next = onFulfilled(this.value)\n          this.resolvePromise(promise, next, resolve, reject)\n        } catch (err) {\n          reject(err)\n        }\n      }\n      const rejectCallback = () =&gt; {\n        try {\n          let next = onRejected(this.reason)\n          this.resolvePromise(promise, next, resolve, reject)\n        } catch (err) {\n          reject(err)\n        }\n      }\n      \n      if (this.status === FULFILLED) {\n        setTimeout(resolveCallback)\n      }\n      if (this.status === REJECTED) {\n        setTimeout(rejectCallback)\n      }\n      if (this.status === PENDING) {\n        this.onResolvedCallbackList.push(resolveCallback)\n        this.onRejectedCallbackList.push(rejectCallback)\n      }\n    })\n    return promise\n  }\n  \n  catch(callback) {\n    this.then(null, callback)\n  }\n  \n  static resolve(value) {\n    if (value instanceof Promise) {\n      return value\n    }\n    return new Promise((resolve, reject) =&gt; resolve(value))\n  }\n  \n  static reject(reason) {\n    if (reason instanceof Promise) {\n      return reason\n    }\n    return new Promise((resolve, reject) =&gt; reject(reason))\n  }\n  \n  static all(promises) {\n    return new Promise((resolve, reject) =&gt; {\n      let length = promises.length\n      let count = 0\n      let res = []\n      if (length === 0) return resolve([])\n      promises.forEach((item, index) =&gt; {\n        Promise.resolve(item)\n          .then(val =&gt; {\n          count++\n          res[i] = val\n          if (count === length) {\n            resolve(res)\n          }\n        })\n          .catch(err =&gt; reject(err))\n      })\n    })\n  }\n  \n  static race(promises) {\n    return new Promise((resolve, reject) =&gt; {\n      promises.forEach((item, index) =&gt; {\n        Promise.resolve(item)\n          .then(val =&gt; resolve(val))\n          .catch(err =&gt; reject(err))\n      })\n    })\n  }\n  \n  static any(promises) {\n    return new Promise((resolve, reject) =&gt; {\n      let length = promises.length\n      let count = 0\n      if (length === 0) return\n      promises.forEach((item, index) =&gt; {\n        Promise.resolve(item)\n          .then(val =&gt; resolve(val))\n          .catch(err =&gt; {\n          count++\n          if (count === length) {\n            return reject(&quot;All promises where rejected!&quot;)\n          }\n        })\n      })\n    })\n  }\n  \n  static allSettled(promises) {\n    return new Promise((resolve, reject) =&gt; {\n      let length = promises.length\n      let count = 0\n      if (length === 0) return resolve([])\n      promises.forEach((item, index) =&gt; {\n        Promise.resolve(item)\n          .then(val =&gt; {\n          count++\n          res[i] = {\n            status: &quot;fulfilled&quot;,\n            value: val\n          }\n          if (count === length) {\n            resolve(res)\n          }\n        })\n          .catch(err =&gt; {\n          count++\n          res[i] = {\n            status: &quot;rejected&quot;,\n            reason: err\n          }\n          if (count === length) {\n            resolve(res)\n          }\n        })\n      })\n    })\n  }\n}</code></pre><blockquote class=\"lake-alert lake-alert-info\"><p data-lake-id=\"uc7f5f3ad\"><code><span>javaScript</span></code><span> 引擎为了让 </span><code><span>microtask</span></code><span> 尽快的输出，做了一些优化，连续的多个 </span><code><span>then</span></code><code><span>(3</span></code><span> 个)如果没有 </span><code><span>reject</span></code><span> 或者 </span><code><span>resolve</span></code><span> 会</span><strong><span>交替执行 then</span></strong><span> 而不至于让一个堵太久完成用户无响应，不单单 </span><code><span>v8</span></code><span> 这样其他引擎也是这样，因为其实 </span><code><span>promise</span></code><span> 内部状态已经结束了。这块在 </span><code><span>v8</span></code><span> 源码里有完整的体现</span></p></blockquote>",
  "body_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"viewport\" content=\"adapt\" /><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%20A%2B%5Cnconst%20PENDING%20%3D%20%5C%22PENDING%5C%22%5Cnconst%20FULFILLED%20%3D%20%5C%22fulfilled%5C%22%5Cnconst%20REJECTED%20%3D%20%5C%22rejected%5C%22%5Cn%5Cnclass%20_Promise%20%7B%5Cn%20%20constructor(executor)%20%7B%5Cn%20%20%20%20this.status%20%3D%20PENDING%5Cn%20%20%20%20this.value%20%3D%20undefined%5Cn%20%20%20%20this.reason%20%3D%20undefined%5Cn%20%20%20%20%5Cn%20%20%20%20this.onResolvedCallbackList%20%3D%20%5B%5D%5Cn%20%20%20%20this.onRejectedCallbackList%20%3D%20%5B%5D%5Cn%20%20%20%20%5Cn%20%20%20%20const%20resolve%20%3D%20value%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20if%20(this.status%20%3D%3D%3D%20PENDING)%20%7B%5Cn%20%20%20%20%20%20%20%20this.status%20%3D%20FULFILLED%5Cn%20%20%20%20%20%20%20%20this.value%20%3D%20value%5Cn%20%20%20%20%20%20%20%20this.onResolvedCallbackList.forEach(fn%20%3D%3E%20fn())%5Cn%20%20%20%20%20%20%7D%5Cn%20%20%20%20%7D%5Cn%20%20%20%20const%20reject%20%3D%20reason%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20if%20(this.status%20%3D%3D%3D%20PENDING)%20%7B%5Cn%20%20%20%20%20%20%20%20this.status%20%3D%20REJECTED%5Cn%20%20%20%20%20%20%20%20this.reason%20%3D%20reason%5Cn%20%20%20%20%20%20%20%20this.onRejectedCallbackList.forEach(fn%20%3D%3E%20fn())%5Cn%20%20%20%20%20%20%7D%5Cn%20%20%20%20%7D%5Cn%20%20%20%20%5Cn%20%20%20%20try%20%7B%5Cn%20%20%20%20%20%20executor(resolve%2C%20reject)%5Cn%20%20%20%20%7D%20catch%20(err)%20%7B%5Cn%20%20%20%20%20%20reject(err)%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%20%20%5Cn%20%20resolvePromise(promise%2C%20next%2C%20resolve%2C%20reject)%20%7B%5Cn%20%20%20%20if%20(next%20%3D%3D%3D%20promise)%20%7B%5Cn%20%20%20%20%20%20return%20reject(new%20TypeError(%5C%22xxx%5C%22))%5Cn%20%20%20%20%7D%5Cn%20%20%20%20let%20called%5Cn%20%20%20%20if%20((typeof%20next%20%3D%3D%3D%20%5C%22object%5C%22%20%26%26%20next%20!%3D%3D%20null)%20%7C%7C%20typeof%20next%20%3D%3D%3D%20%5C%22function%5C%22)%20%7B%5Cn%20%20%20%20%20%20try%20%7B%5Cn%20%20%20%20%20%20%20%20if%20(typeof%20next.then%20%3D%3D%3D%20%5C%22function%5C%22)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20const%20resolveArg%20%3D%20resolveNext%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20this.resolvePromise(promise%2C%20resolveNext%2C%20resolve%2C%20reject)%5Cn%20%20%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%20%20const%20rejectArg%20%3D%20rejectNext%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20if%20(called)%20return%5Cn%20%20%20%20%20%20%20%20%20%20%20%20called%20%3D%20true%5Cn%20%20%20%20%20%20%20%20%20%20%20%20this.resolvePromise(promise%2C%20rejectNext%2C%20resolve%2C%20reject)%5Cn%20%20%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%20%20next.then.call(next%2C%20resolveArg%2C%20rejectArg)%5Cn%20%20%20%20%20%20%20%20%7D%20else%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20resolve(next)%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%7D%20catch%20(err)%20%7B%5Cn%20%20%20%20%20%20%20%20if%20(called)%20return%5Cn%20%20%20%20%20%20%20%20called%20%3D%20true%5Cn%20%20%20%20%20%20%20%20reject(err)%5Cn%20%20%20%20%20%20%7D%5Cn%20%20%20%20%7D%20else%20%7B%5Cn%20%20%20%20%20%20reject(next)%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%20%20%5Cn%20%20then(onFulfilled%2C%20onRejected)%20%7B%5Cn%20%20%20%20onFulfilled%20%3D%5Cn%20%20%20%20%20%20typeof%20onFulfilled%20%3D%3D%3D%20%5C%22function%5C%22%5Cn%20%20%20%20%20%20%3F%20onFulfilled%5Cn%20%20%20%20%3A%20function%20(val)%20%7B%5Cn%20%20%20%20%20%20return%20val%5Cn%20%20%20%20%7D%5Cn%20%20%20%20onRejected%20%3D%5Cn%20%20%20%20%20%20typeof%20onRejected%20%3D%3D%3D%20%5C%22function%5C%22%5Cn%20%20%20%20%20%20%3F%20onRejected%5Cn%20%20%20%20%3A%20function%20(val)%20%7B%5Cn%20%20%20%20%20%20return%20val%5Cn%20%20%20%20%7D%5Cn%20%20%20%20%5Cn%20%20%20%20const%20promise%20%3D%20new%20Promise((resolve%2C%20reject)%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20const%20resolveCallback%20%3D%20()%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20%20%20try%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20let%20next%20%3D%20onFulfilled(this.value)%5Cn%20%20%20%20%20%20%20%20%20%20this.resolvePromise(promise%2C%20next%2C%20resolve%2C%20reject)%5Cn%20%20%20%20%20%20%20%20%7D%20catch%20(err)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20reject(err)%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20const%20rejectCallback%20%3D%20()%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20%20%20try%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20let%20next%20%3D%20onRejected(this.reason)%5Cn%20%20%20%20%20%20%20%20%20%20this.resolvePromise(promise%2C%20next%2C%20resolve%2C%20reject)%5Cn%20%20%20%20%20%20%20%20%7D%20catch%20(err)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20reject(err)%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%5Cn%20%20%20%20%20%20if%20(this.status%20%3D%3D%3D%20FULFILLED)%20%7B%5Cn%20%20%20%20%20%20%20%20setTimeout(resolveCallback)%5Cn%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20if%20(this.status%20%3D%3D%3D%20REJECTED)%20%7B%5Cn%20%20%20%20%20%20%20%20setTimeout(rejectCallback)%5Cn%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20if%20(this.status%20%3D%3D%3D%20PENDING)%20%7B%5Cn%20%20%20%20%20%20%20%20this.onResolvedCallbackList.push(resolveCallback)%5Cn%20%20%20%20%20%20%20%20this.onRejectedCallbackList.push(rejectCallback)%5Cn%20%20%20%20%20%20%7D%5Cn%20%20%20%20%7D)%5Cn%20%20%20%20return%20promise%5Cn%20%20%7D%5Cn%20%20%5Cn%20%20catch(callback)%20%7B%5Cn%20%20%20%20this.then(null%2C%20callback)%5Cn%20%20%7D%5Cn%20%20%5Cn%20%20static%20resolve(value)%20%7B%5Cn%20%20%20%20if%20(value%20instanceof%20Promise)%20%7B%5Cn%20%20%20%20%20%20return%20value%5Cn%20%20%20%20%7D%5Cn%20%20%20%20return%20new%20Promise((resolve%2C%20reject)%20%3D%3E%20resolve(value))%5Cn%20%20%7D%5Cn%20%20%5Cn%20%20static%20reject(reason)%20%7B%5Cn%20%20%20%20if%20(reason%20instanceof%20Promise)%20%7B%5Cn%20%20%20%20%20%20return%20reason%5Cn%20%20%20%20%7D%5Cn%20%20%20%20return%20new%20Promise((resolve%2C%20reject)%20%3D%3E%20reject(reason))%5Cn%20%20%7D%5Cn%20%20%5Cn%20%20static%20all(promises)%20%7B%5Cn%20%20%20%20return%20new%20Promise((resolve%2C%20reject)%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20let%20length%20%3D%20promises.length%5Cn%20%20%20%20%20%20let%20count%20%3D%200%5Cn%20%20%20%20%20%20let%20res%20%3D%20%5B%5D%5Cn%20%20%20%20%20%20if%20(length%20%3D%3D%3D%200)%20return%20resolve(%5B%5D)%5Cn%20%20%20%20%20%20promises.forEach((item%2C%20index)%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20%20%20Promise.resolve(item)%5Cn%20%20%20%20%20%20%20%20%20%20.then(val%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20count%2B%2B%5Cn%20%20%20%20%20%20%20%20%20%20res%5Bi%5D%20%3D%20val%5Cn%20%20%20%20%20%20%20%20%20%20if%20(count%20%3D%3D%3D%20length)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20resolve(res)%5Cn%20%20%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%7D)%5Cn%20%20%20%20%20%20%20%20%20%20.catch(err%20%3D%3E%20reject(err))%5Cn%20%20%20%20%20%20%7D)%5Cn%20%20%20%20%7D)%5Cn%20%20%7D%5Cn%20%20%5Cn%20%20static%20race(promises)%20%7B%5Cn%20%20%20%20return%20new%20Promise((resolve%2C%20reject)%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20promises.forEach((item%2C%20index)%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20%20%20Promise.resolve(item)%5Cn%20%20%20%20%20%20%20%20%20%20.then(val%20%3D%3E%20resolve(val))%5Cn%20%20%20%20%20%20%20%20%20%20.catch(err%20%3D%3E%20reject(err))%5Cn%20%20%20%20%20%20%7D)%5Cn%20%20%20%20%7D)%5Cn%20%20%7D%5Cn%20%20%5Cn%20%20static%20any(promises)%20%7B%5Cn%20%20%20%20return%20new%20Promise((resolve%2C%20reject)%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20let%20length%20%3D%20promises.length%5Cn%20%20%20%20%20%20let%20count%20%3D%200%5Cn%20%20%20%20%20%20if%20(length%20%3D%3D%3D%200)%20return%5Cn%20%20%20%20%20%20promises.forEach((item%2C%20index)%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20%20%20Promise.resolve(item)%5Cn%20%20%20%20%20%20%20%20%20%20.then(val%20%3D%3E%20resolve(val))%5Cn%20%20%20%20%20%20%20%20%20%20.catch(err%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20count%2B%2B%5Cn%20%20%20%20%20%20%20%20%20%20if%20(count%20%3D%3D%3D%20length)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20return%20reject(%5C%22All%20promises%20where%20rejected!%5C%22)%5Cn%20%20%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%7D)%5Cn%20%20%20%20%20%20%7D)%5Cn%20%20%20%20%7D)%5Cn%20%20%7D%5Cn%20%20%5Cn%20%20static%20allSettled(promises)%20%7B%5Cn%20%20%20%20return%20new%20Promise((resolve%2C%20reject)%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20let%20length%20%3D%20promises.length%5Cn%20%20%20%20%20%20let%20count%20%3D%200%5Cn%20%20%20%20%20%20if%20(length%20%3D%3D%3D%200)%20return%20resolve(%5B%5D)%5Cn%20%20%20%20%20%20promises.forEach((item%2C%20index)%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20%20%20Promise.resolve(item)%5Cn%20%20%20%20%20%20%20%20%20%20.then(val%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20count%2B%2B%5Cn%20%20%20%20%20%20%20%20%20%20res%5Bi%5D%20%3D%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20status%3A%20%5C%22fulfilled%5C%22%2C%5Cn%20%20%20%20%20%20%20%20%20%20%20%20value%3A%20val%5Cn%20%20%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%20%20if%20(count%20%3D%3D%3D%20length)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20resolve(res)%5Cn%20%20%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%7D)%5Cn%20%20%20%20%20%20%20%20%20%20.catch(err%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20count%2B%2B%5Cn%20%20%20%20%20%20%20%20%20%20res%5Bi%5D%20%3D%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20status%3A%20%5C%22rejected%5C%22%2C%5Cn%20%20%20%20%20%20%20%20%20%20%20%20reason%3A%20err%5Cn%20%20%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%20%20if%20(count%20%3D%3D%3D%20length)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20resolve(res)%5Cn%20%20%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%7D)%5Cn%20%20%20%20%20%20%7D)%5Cn%20%20%20%20%7D)%5Cn%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22Rr50N%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><blockquote data-lake-id=\"uef193e6f\" id=\"uef193e6f\" class=\"lake-alert lake-alert-info\"><p data-lake-id=\"uc7f5f3ad\" id=\"uc7f5f3ad\"><code data-lake-id=\"u065d8846\" id=\"u065d8846\"><span data-lake-id=\"u6737dd1d\" id=\"u6737dd1d\">javaScript</span></code><span data-lake-id=\"u33c2290e\" id=\"u33c2290e\"> 引擎为了让 </span><code data-lake-id=\"u11356f28\" id=\"u11356f28\"><span data-lake-id=\"u37710b85\" id=\"u37710b85\">microtask</span></code><span data-lake-id=\"ueb40ecae\" id=\"ueb40ecae\"> 尽快的输出，做了一些优化，连续的多个 </span><code data-lake-id=\"u75f5a921\" id=\"u75f5a921\"><span data-lake-id=\"u8369ec54\" id=\"u8369ec54\">then</span></code><code data-lake-id=\"ub8507ced\" id=\"ub8507ced\"><span data-lake-id=\"u97982c24\" id=\"u97982c24\">(3</span></code><span data-lake-id=\"u8640f765\" id=\"u8640f765\"> 个)如果没有 </span><code data-lake-id=\"u7e7b70f1\" id=\"u7e7b70f1\"><span data-lake-id=\"ubff623a7\" id=\"ubff623a7\">reject</span></code><span data-lake-id=\"ub3464cf8\" id=\"ub3464cf8\"> 或者 </span><code data-lake-id=\"ufa431762\" id=\"ufa431762\"><span data-lake-id=\"uc0e54aa8\" id=\"uc0e54aa8\">resolve</span></code><span data-lake-id=\"u76d3839a\" id=\"u76d3839a\"> 会</span><strong><span data-lake-id=\"u4f4e16e7\" id=\"u4f4e16e7\">交替执行 then</span></strong><span data-lake-id=\"u28009ba5\" id=\"u28009ba5\"> 而不至于让一个堵太久完成用户无响应，不单单 </span><code data-lake-id=\"u74465a8c\" id=\"u74465a8c\"><span data-lake-id=\"uf06fe675\" id=\"uf06fe675\">v8</span></code><span data-lake-id=\"u62affb65\" id=\"u62affb65\"> 这样其他引擎也是这样，因为其实 </span><code data-lake-id=\"u7c216331\" id=\"u7c216331\"><span data-lake-id=\"u6987d0d0\" id=\"u6987d0d0\">promise</span></code><span data-lake-id=\"u64e494ac\" id=\"u64e494ac\"> 内部状态已经结束了。这块在 </span><code data-lake-id=\"ub78b79e7\" id=\"ub78b79e7\"><span data-lake-id=\"ucc115817\" id=\"ucc115817\">v8</span></code><span data-lake-id=\"ucef5f66f\" id=\"ucef5f66f\"> 源码里有完整的体现</span></p></blockquote>",
  "body_draft_lake": "",
  "public": 0,
  "status": 1,
  "view_status": 0,
  "read_status": 1,
  "likes_count": 0,
  "comments_count": 0,
  "content_updated_at": "2022-05-11T15:01:31.000Z",
  "deleted_at": null,
  "created_at": "2022-05-11T15:01:31.000Z",
  "updated_at": "2022-05-11T15:08:08.000Z",
  "published_at": "2022-05-11T15:01:31.000Z",
  "first_published_at": "2022-05-11T15:01:30.927Z",
  "word_count": 637,
  "cover": null,
  "description": "// A+ const PENDING = \"PENDING\" const FULFILLED = \"fulfilled\" const REJECTED = \"rejected\"  class _Promise {   constructor(executor) {     this.stat...",
  "custom_description": null,
  "hits": 0,
  "_serializer": "v2.doc_detail"
}