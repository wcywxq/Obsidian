{
  "id": 77021689,
  "slug": "ba4wuo",
  "title": "实现 instanceof",
  "book_id": 27818302,
  "book": {
    "id": 27818302,
    "type": "Book",
    "slug": "pgkpvh",
    "name": "前端面试知识梳理",
    "user_id": 732231,
    "description": "",
    "creator_id": 732231,
    "public": 0,
    "items_count": 65,
    "likes_count": 0,
    "watches_count": 1,
    "content_updated_at": "2023-01-06T09:17:32.188Z",
    "updated_at": "2023-11-11T18:10:33.000Z",
    "created_at": "2022-05-11T14:43:59.000Z",
    "namespace": "wcywxq/pgkpvh",
    "user": {
      "id": 732231,
      "type": "User",
      "login": "wcywxq",
      "name": "magic",
      "description": null,
      "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/732231/1606968271774-avatar/886ad88b-d2cc-4c9e-a674-f70eb51a679c.png",
      "books_count": 18,
      "public_books_count": 0,
      "followers_count": 0,
      "following_count": 0,
      "created_at": "2020-01-08T14:21:31.000Z",
      "updated_at": "2023-11-13T09:32:35.000Z",
      "_serializer": "v2.user"
    },
    "_serializer": "v2.book"
  },
  "user_id": 732231,
  "creator": {
    "id": 732231,
    "type": "User",
    "login": "wcywxq",
    "name": "magic",
    "description": null,
    "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/732231/1606968271774-avatar/886ad88b-d2cc-4c9e-a674-f70eb51a679c.png",
    "books_count": 18,
    "public_books_count": 0,
    "followers_count": 0,
    "following_count": 0,
    "created_at": "2020-01-08T14:21:31.000Z",
    "updated_at": "2023-11-13T09:32:35.000Z",
    "_serializer": "v2.user"
  },
  "format": "lake",
  "body": "1. 首先获取原型的类型\n2. 然后获取对象的类型\n3. 然后一直循环判断对象的原型是否等于类型的原型，直到对象原型为 `null`，因为原型连最终为 `null`\n```javascript\nfunction _instanceOf(target, origin) {\n\tif (typeof target !== 'object' || target === null) return false\n  if (typeof origin !== 'function') {\n  \tthrow new TypeError('origin must be function')\n  }\n  let proto = Object.getPrototypeOf(target) // 相当于: proto = target.__proto__\n  while (proto) {\n  \tif (proto === origin.prototype) return true\n    proto = Object.getPrototypeOf(proto)\n  }\n  return false\n}\n```\n",
  "body_draft": "",
  "body_html": "<!doctype html><ol><li><span>首先获取原型的类型</span></li><li><span>然后获取对象的类型</span></li><li><span>然后一直循环判断对象的原型是否等于类型的原型，直到对象原型为 </span><code><span>null</span></code><span>，因为原型连最终为 </span><code><span>null</span></code></li></ol><pre data-lang=\"javascript\"><code>function _instanceOf(target, origin) {\n\tif (typeof target !== 'object' || target === null) return false\n  if (typeof origin !== 'function') {\n  \tthrow new TypeError('origin must be function')\n  }\n  let proto = Object.getPrototypeOf(target) // 相当于: proto = target.__proto__\n  while (proto) {\n  \tif (proto === origin.prototype) return true\n    proto = Object.getPrototypeOf(proto)\n  }\n  return false\n}</code></pre>",
  "body_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"viewport\" content=\"adapt\" /><ol list=\"u1c21985a\"><li fid=\"u263c0941\" data-lake-id=\"u2acad306\" id=\"u2acad306\"><span data-lake-id=\"u1bae9c57\" id=\"u1bae9c57\">首先获取原型的类型</span></li><li fid=\"u263c0941\" data-lake-id=\"u3831cccb\" id=\"u3831cccb\"><span data-lake-id=\"ud7fb1cae\" id=\"ud7fb1cae\">然后获取对象的类型</span></li><li fid=\"u263c0941\" data-lake-id=\"u763e9e6d\" id=\"u763e9e6d\"><span data-lake-id=\"u2c2517d5\" id=\"u2c2517d5\">然后一直循环判断对象的原型是否等于类型的原型，直到对象原型为 </span><code data-lake-id=\"u70dc7fbb\" id=\"u70dc7fbb\"><span data-lake-id=\"uf187277f\" id=\"uf187277f\">null</span></code><span data-lake-id=\"ue6102a2b\" id=\"ue6102a2b\">，因为原型连最终为 </span><code data-lake-id=\"ubf58291e\" id=\"ubf58291e\"><span data-lake-id=\"u554e0ba5\" id=\"u554e0ba5\">null</span></code></li></ol><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22function%20_instanceOf(target%2C%20origin)%20%7B%5Cn%5Ctif%20(typeof%20target%20!%3D%3D%20'object'%20%7C%7C%20target%20%3D%3D%3D%20null)%20return%20false%5Cn%20%20if%20(typeof%20origin%20!%3D%3D%20'function')%20%7B%5Cn%20%20%5Ctthrow%20new%20TypeError('origin%20must%20be%20function')%5Cn%20%20%7D%5Cn%20%20let%20proto%20%3D%20Object.getPrototypeOf(target)%20%2F%2F%20%E7%9B%B8%E5%BD%93%E4%BA%8E%3A%20proto%20%3D%20target.__proto__%5Cn%20%20while%20(proto)%20%7B%5Cn%20%20%5Ctif%20(proto%20%3D%3D%3D%20origin.prototype)%20return%20true%5Cn%20%20%20%20proto%20%3D%20Object.getPrototypeOf(proto)%5Cn%20%20%7D%5Cn%20%20return%20false%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22DE4RE%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card>",
  "body_draft_lake": "",
  "public": 0,
  "status": 1,
  "view_status": 0,
  "read_status": 1,
  "likes_count": 0,
  "comments_count": 0,
  "content_updated_at": "2022-05-11T15:02:00.000Z",
  "deleted_at": null,
  "created_at": "2022-05-11T15:02:00.000Z",
  "updated_at": "2022-05-11T15:08:07.000Z",
  "published_at": "2022-05-11T15:02:00.000Z",
  "first_published_at": "2022-05-11T15:01:59.952Z",
  "word_count": 115,
  "cover": null,
  "description": "首先获取原型的类型然后获取对象的类型然后一直循环判断对象的原型是否等于类型的原型，直到对象原型为 null，因为原型连最终为 nullfunction _instanceOf(target, origin) { \tif (typeof target !== 'object' || target...",
  "custom_description": null,
  "hits": 0,
  "_serializer": "v2.doc_detail"
}