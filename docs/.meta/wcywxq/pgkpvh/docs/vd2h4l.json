{
  "id": 77021632,
  "slug": "vd2h4l",
  "title": "Promise  常用方法实现",
  "book_id": 27818302,
  "book": {
    "id": 27818302,
    "type": "Book",
    "slug": "pgkpvh",
    "name": "前端面试知识梳理",
    "user_id": 732231,
    "description": "",
    "creator_id": 732231,
    "public": 0,
    "items_count": 65,
    "likes_count": 0,
    "watches_count": 1,
    "content_updated_at": "2023-01-06T09:17:32.188Z",
    "updated_at": "2023-11-11T18:10:33.000Z",
    "created_at": "2022-05-11T14:43:59.000Z",
    "namespace": "wcywxq/pgkpvh",
    "user": {
      "id": 732231,
      "type": "User",
      "login": "wcywxq",
      "name": "magic",
      "description": null,
      "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/732231/1606968271774-avatar/886ad88b-d2cc-4c9e-a674-f70eb51a679c.png",
      "books_count": 18,
      "public_books_count": 0,
      "followers_count": 0,
      "following_count": 0,
      "created_at": "2020-01-08T14:21:31.000Z",
      "updated_at": "2023-11-13T09:32:35.000Z",
      "_serializer": "v2.user"
    },
    "_serializer": "v2.book"
  },
  "user_id": 732231,
  "creator": {
    "id": 732231,
    "type": "User",
    "login": "wcywxq",
    "name": "magic",
    "description": null,
    "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/732231/1606968271774-avatar/886ad88b-d2cc-4c9e-a674-f70eb51a679c.png",
    "books_count": 18,
    "public_books_count": 0,
    "followers_count": 0,
    "following_count": 0,
    "created_at": "2020-01-08T14:21:31.000Z",
    "updated_at": "2023-11-13T09:32:35.000Z",
    "_serializer": "v2.user"
  },
  "format": "lake",
  "body": "<a name=\"OgAA4\"></a>\n## Promise.all\n`Promise.all` 方法用于将多个 `Promise` 实例，包装成一个新的 `Promise` 实例。\n\n- 如果每个实例都成功，会将所有实例的返回值组成一个数组\n- 如果其中一个实例运行失败，则返回最先失败的实例结果（在创建实例的时候，`promise.all` 内部的实例就已经执行了，无论哪一个失败）\n```javascript\nPromise.prototype.all = promises => {\n\treturn new Promise((resolve, reject) => {\n  \t// 计数器\n    let count = 0\n    // 存放结果\n    let result = []\n    let len = promises.length\n    if (len === 0) return resolve([])\n    promises.forEach((item, index) => {\n    \t// 注意有的数组项有可能不是 Promise，需要手动转化一下\n      Promise.resolve(item).then(res => {\n      \tcount += 1\n        // 收集每个 Promise 的返回值\n       \tresult[i] = res\n        // 当所有的 Promise 都成功了，那么将返回 Promise 结果\n        if(count === len) {\n        \tresolve(result)\n        }\n      }).catch(err => reject(err))\n    })\n  })\n}\n```\n<a name=\"N2V7r\"></a>\n## Promise.allSettled\n有时候，我们希望等到一组异步操作都结束了，不管一个操作是成功还是失败，再进行下一步操作。而 `Promise.all` (其只要是一个失败了，结果即进入失败状态)不太合适，所以有了 `Promise.allSettled`\n\n只有等到参数数组的所有 `Promise` 对象都发生状态变更(不管是 `fulfilled` 还是 `rejected`)，返回的 `Promise` 对象才会发生状态变更，一旦发生状态变更，状态总是 `fulfilled`，不会变成 `rejected`\n```javascript\nPromise.prototype.allSettled = promises => {\n\treturn new Promise((resolve, reject) => {\n  \tlet count = 0\n    let result = []\n    let len = promises.length\n    // 数组是空的话，直接返回空数组\n    if (len === 0) return resolve([])\n    promises.forEach((item, index) => {\n    \tPromise.resolve(item).then(res => {\n      \tcount += 1\n        // 成功属性设置\n        result[i] = {\n        \tstatus: 'fulfilled',\n          value: res\n        }\n        if (count === len) {\n        \tresolve(result)\n        }\n      }).catch(err => {\n      \tcount += 1\n        // 失败属性设置\n        result[i] = {\n        \tstatus: 'rejected',\n          reason: err\n        }\n        if (count === len) {\n        \tresolve(result)\n        }\n      })\n    })\n  })\n}\n```\n<a name=\"m5Trz\"></a>\n## Promise.race\n传入的所有实例哪一个实例的状态率先改变，那么就会返回哪个实例的返回值。无论成功还是失败\n```javascript\nPromise.prototype.race = promises => {\n\treturn new Promise((resolve, reject) => {\n  \tpromises.forEach(item => {\n  \t\t// 此处需要做二次包装，防止非 Promise 对象\n      // 同时进行状态监听\n      Promise.resolve(item)\n        .then(value => resolve(value))\n        .catch(err => reject(err))\n  \t})\n  })\n}\n```\n<a name=\"jdISu\"></a>\n## Promise.any\n只有全部实例都失败后才会返回失败，如果有一个实例的状态返回成功，则返回第一个成功的实例\n```javascript\nPromise.prototype.any = promises => {\n  return new Promise((resolve, reject) => {\n    let count = 0\n  \tlet len = promiseList.length\n    if (len === 0) return\n    promises.forEach(item => {\n    \tPromise.resolve(item)\n      \t.then(value => resolve(value))\n      \t.catch(err => {\n      \t\tcount+=1\n        \tif (count === len) {\n          \treturn reject(new Error('All promises where rejected'))\n          }\n      \t})\n    })\n  })\n}\n```\n",
  "body_draft": "",
  "body_html": "<!doctype html><h2 id=\"OgAA4\"><span>Promise.all</span></h2><p data-lake-id=\"ua757dd8b\"><code><span>Promise.all</span></code><span> 方法用于将多个 </span><code><span>Promise</span></code><span> 实例，包装成一个新的 </span><code><span>Promise</span></code><span> 实例。</span></p><ul><li><span>如果每个实例都成功，会将所有实例的返回值组成一个数组</span></li><li><span>如果其中一个实例运行失败，则返回最先失败的实例结果（在创建实例的时候，</span><code><span>promise.all</span></code><span> 内部的实例就已经执行了，无论哪一个失败）</span></li></ul><pre data-lang=\"javascript\"><code>Promise.prototype.all = promises =&gt; {\n\treturn new Promise((resolve, reject) =&gt; {\n  \t// 计数器\n    let count = 0\n    // 存放结果\n    let result = []\n    let len = promises.length\n    if (len === 0) return resolve([])\n    promises.forEach((item, index) =&gt; {\n    \t// 注意有的数组项有可能不是 Promise，需要手动转化一下\n      Promise.resolve(item).then(res =&gt; {\n      \tcount += 1\n        // 收集每个 Promise 的返回值\n       \tresult[i] = res\n        // 当所有的 Promise 都成功了，那么将返回 Promise 结果\n        if(count === len) {\n        \tresolve(result)\n        }\n      }).catch(err =&gt; reject(err))\n    })\n  })\n}</code></pre><h2 id=\"N2V7r\"><span>Promise.allSettled</span></h2><p data-lake-id=\"u10bb6481\"><span>有时候，我们希望等到一组异步操作都结束了，不管一个操作是成功还是失败，再进行下一步操作。而 </span><code><span>Promise.all</span></code><span> (其只要是一个失败了，结果即进入失败状态)不太合适，所以有了 </span><code><span>Promise.allSettled</span></code></p><p data-lake-id=\"u83a79e11\"><br /></p><p data-lake-id=\"u210f5b9b\"><span>只有等到参数数组的所有 </span><code><span>Promise</span></code><span> 对象都发生状态变更(不管是 </span><code><span>fulfilled</span></code><span> 还是 </span><code><span>rejected</span></code><span>)，返回的 </span><code><span>Promise</span></code><span> 对象才会发生状态变更，一旦发生状态变更，状态总是 </span><code><span>fulfilled</span></code><span>，不会变成 </span><code><span>rejected</span></code></p><pre data-lang=\"javascript\"><code>Promise.prototype.allSettled = promises =&gt; {\n\treturn new Promise((resolve, reject) =&gt; {\n  \tlet count = 0\n    let result = []\n    let len = promises.length\n    // 数组是空的话，直接返回空数组\n    if (len === 0) return resolve([])\n    promises.forEach((item, index) =&gt; {\n    \tPromise.resolve(item).then(res =&gt; {\n      \tcount += 1\n        // 成功属性设置\n        result[i] = {\n        \tstatus: 'fulfilled',\n          value: res\n        }\n        if (count === len) {\n        \tresolve(result)\n        }\n      }).catch(err =&gt; {\n      \tcount += 1\n        // 失败属性设置\n        result[i] = {\n        \tstatus: 'rejected',\n          reason: err\n        }\n        if (count === len) {\n        \tresolve(result)\n        }\n      })\n    })\n  })\n}</code></pre><h2 id=\"m5Trz\"><span>Promise.race</span></h2><p data-lake-id=\"u9d03eb9f\"><span>传入的所有实例哪一个实例的状态率先改变，那么就会返回哪个实例的返回值。无论成功还是失败</span></p><pre data-lang=\"javascript\"><code>Promise.prototype.race = promises =&gt; {\n\treturn new Promise((resolve, reject) =&gt; {\n  \tpromises.forEach(item =&gt; {\n  \t\t// 此处需要做二次包装，防止非 Promise 对象\n      // 同时进行状态监听\n      Promise.resolve(item)\n        .then(value =&gt; resolve(value))\n        .catch(err =&gt; reject(err))\n  \t})\n  })\n}</code></pre><h2 id=\"jdISu\"><span>Promise.any</span></h2><p data-lake-id=\"u44584718\"><span>只有全部实例都失败后才会返回失败，如果有一个实例的状态返回成功，则返回第一个成功的实例</span></p><pre data-lang=\"javascript\"><code>Promise.prototype.any = promises =&gt; {\n  return new Promise((resolve, reject) =&gt; {\n    let count = 0\n  \tlet len = promiseList.length\n    if (len === 0) return\n    promises.forEach(item =&gt; {\n    \tPromise.resolve(item)\n      \t.then(value =&gt; resolve(value))\n      \t.catch(err =&gt; {\n      \t\tcount+=1\n        \tif (count === len) {\n          \treturn reject(new Error('All promises where rejected'))\n          }\n      \t})\n    })\n  })\n}</code></pre>",
  "body_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"viewport\" content=\"adapt\" /><h2 data-lake-id=\"OgAA4\" id=\"OgAA4\"><span data-lake-id=\"uf8ba0563\" id=\"uf8ba0563\">Promise.all</span></h2><p data-lake-id=\"ua757dd8b\" id=\"ua757dd8b\"><code data-lake-id=\"u83e7a166\" id=\"u83e7a166\"><span data-lake-id=\"u3a47b8b4\" id=\"u3a47b8b4\">Promise.all</span></code><span data-lake-id=\"u4baf1c4b\" id=\"u4baf1c4b\"> 方法用于将多个 </span><code data-lake-id=\"u051b9f0c\" id=\"u051b9f0c\"><span data-lake-id=\"u5e4f38c7\" id=\"u5e4f38c7\">Promise</span></code><span data-lake-id=\"ub256277b\" id=\"ub256277b\"> 实例，包装成一个新的 </span><code data-lake-id=\"u96026a5a\" id=\"u96026a5a\"><span data-lake-id=\"u8e580469\" id=\"u8e580469\">Promise</span></code><span data-lake-id=\"u3ba0b801\" id=\"u3ba0b801\"> 实例。</span></p><ul list=\"ubb325e60\"><li fid=\"u2b46873c\" data-lake-id=\"uab7c154b\" id=\"uab7c154b\"><span data-lake-id=\"uac080284\" id=\"uac080284\">如果每个实例都成功，会将所有实例的返回值组成一个数组</span></li><li fid=\"u2b46873c\" data-lake-id=\"u1f6abcfb\" id=\"u1f6abcfb\"><span data-lake-id=\"ubd2c5b38\" id=\"ubd2c5b38\">如果其中一个实例运行失败，则返回最先失败的实例结果（在创建实例的时候，</span><code data-lake-id=\"ued21d4a1\" id=\"ued21d4a1\"><span data-lake-id=\"ue85a58c3\" id=\"ue85a58c3\">promise.all</span></code><span data-lake-id=\"ub4c5bd02\" id=\"ub4c5bd02\"> 内部的实例就已经执行了，无论哪一个失败）</span></li></ul><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22Promise.prototype.all%20%3D%20promises%20%3D%3E%20%7B%5Cn%5Ctreturn%20new%20Promise((resolve%2C%20reject)%20%3D%3E%20%7B%5Cn%20%20%5Ct%2F%2F%20%E8%AE%A1%E6%95%B0%E5%99%A8%5Cn%20%20%20%20let%20count%20%3D%200%5Cn%20%20%20%20%2F%2F%20%E5%AD%98%E6%94%BE%E7%BB%93%E6%9E%9C%5Cn%20%20%20%20let%20result%20%3D%20%5B%5D%5Cn%20%20%20%20let%20len%20%3D%20promises.length%5Cn%20%20%20%20if%20(len%20%3D%3D%3D%200)%20return%20resolve(%5B%5D)%5Cn%20%20%20%20promises.forEach((item%2C%20index)%20%3D%3E%20%7B%5Cn%20%20%20%20%5Ct%2F%2F%20%E6%B3%A8%E6%84%8F%E6%9C%89%E7%9A%84%E6%95%B0%E7%BB%84%E9%A1%B9%E6%9C%89%E5%8F%AF%E8%83%BD%E4%B8%8D%E6%98%AF%20Promise%EF%BC%8C%E9%9C%80%E8%A6%81%E6%89%8B%E5%8A%A8%E8%BD%AC%E5%8C%96%E4%B8%80%E4%B8%8B%5Cn%20%20%20%20%20%20Promise.resolve(item).then(res%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20%5Ctcount%20%2B%3D%201%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E6%94%B6%E9%9B%86%E6%AF%8F%E4%B8%AA%20Promise%20%E7%9A%84%E8%BF%94%E5%9B%9E%E5%80%BC%5Cn%20%20%20%20%20%20%20%5Ctresult%5Bi%5D%20%3D%20res%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E5%BD%93%E6%89%80%E6%9C%89%E7%9A%84%20Promise%20%E9%83%BD%E6%88%90%E5%8A%9F%E4%BA%86%EF%BC%8C%E9%82%A3%E4%B9%88%E5%B0%86%E8%BF%94%E5%9B%9E%20Promise%20%E7%BB%93%E6%9E%9C%5Cn%20%20%20%20%20%20%20%20if(count%20%3D%3D%3D%20len)%20%7B%5Cn%20%20%20%20%20%20%20%20%5Ctresolve(result)%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%7D).catch(err%20%3D%3E%20reject(err))%5Cn%20%20%20%20%7D)%5Cn%20%20%7D)%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22AZX8h%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h2 data-lake-id=\"N2V7r\" id=\"N2V7r\"><span data-lake-id=\"u58b20d23\" id=\"u58b20d23\">Promise.allSettled</span></h2><p data-lake-id=\"u10bb6481\" id=\"u10bb6481\"><span data-lake-id=\"u7bd9468c\" id=\"u7bd9468c\">有时候，我们希望等到一组异步操作都结束了，不管一个操作是成功还是失败，再进行下一步操作。而 </span><code data-lake-id=\"u288ab639\" id=\"u288ab639\"><span data-lake-id=\"uee093dce\" id=\"uee093dce\">Promise.all</span></code><span data-lake-id=\"u1bc21632\" id=\"u1bc21632\"> (其只要是一个失败了，结果即进入失败状态)不太合适，所以有了 </span><code data-lake-id=\"u7a28b616\" id=\"u7a28b616\"><span data-lake-id=\"u2e0fefe8\" id=\"u2e0fefe8\">Promise.allSettled</span></code></p><p data-lake-id=\"u83a79e11\" id=\"u83a79e11\"><br></p><p data-lake-id=\"u210f5b9b\" id=\"u210f5b9b\"><span data-lake-id=\"u2b380f96\" id=\"u2b380f96\">只有等到参数数组的所有 </span><code data-lake-id=\"uec601b9a\" id=\"uec601b9a\"><span data-lake-id=\"u6bc67070\" id=\"u6bc67070\">Promise</span></code><span data-lake-id=\"u79f123e9\" id=\"u79f123e9\"> 对象都发生状态变更(不管是 </span><code data-lake-id=\"u24c61bdc\" id=\"u24c61bdc\"><span data-lake-id=\"uc660ca34\" id=\"uc660ca34\">fulfilled</span></code><span data-lake-id=\"uc2f93828\" id=\"uc2f93828\"> 还是 </span><code data-lake-id=\"u659f443e\" id=\"u659f443e\"><span data-lake-id=\"u9e14a9de\" id=\"u9e14a9de\">rejected</span></code><span data-lake-id=\"uc1793761\" id=\"uc1793761\">)，返回的 </span><code data-lake-id=\"u7054fe1a\" id=\"u7054fe1a\"><span data-lake-id=\"u130b0651\" id=\"u130b0651\">Promise</span></code><span data-lake-id=\"uf7c1b972\" id=\"uf7c1b972\"> 对象才会发生状态变更，一旦发生状态变更，状态总是 </span><code data-lake-id=\"ueb2de0bf\" id=\"ueb2de0bf\"><span data-lake-id=\"u6f3bc033\" id=\"u6f3bc033\">fulfilled</span></code><span data-lake-id=\"u2dbce7af\" id=\"u2dbce7af\">，不会变成 </span><code data-lake-id=\"ucb2882dc\" id=\"ucb2882dc\"><span data-lake-id=\"u2ae17809\" id=\"u2ae17809\">rejected</span></code></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22Promise.prototype.allSettled%20%3D%20promises%20%3D%3E%20%7B%5Cn%5Ctreturn%20new%20Promise((resolve%2C%20reject)%20%3D%3E%20%7B%5Cn%20%20%5Ctlet%20count%20%3D%200%5Cn%20%20%20%20let%20result%20%3D%20%5B%5D%5Cn%20%20%20%20let%20len%20%3D%20promises.length%5Cn%20%20%20%20%2F%2F%20%E6%95%B0%E7%BB%84%E6%98%AF%E7%A9%BA%E7%9A%84%E8%AF%9D%EF%BC%8C%E7%9B%B4%E6%8E%A5%E8%BF%94%E5%9B%9E%E7%A9%BA%E6%95%B0%E7%BB%84%5Cn%20%20%20%20if%20(len%20%3D%3D%3D%200)%20return%20resolve(%5B%5D)%5Cn%20%20%20%20promises.forEach((item%2C%20index)%20%3D%3E%20%7B%5Cn%20%20%20%20%5CtPromise.resolve(item).then(res%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20%5Ctcount%20%2B%3D%201%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E6%88%90%E5%8A%9F%E5%B1%9E%E6%80%A7%E8%AE%BE%E7%BD%AE%5Cn%20%20%20%20%20%20%20%20result%5Bi%5D%20%3D%20%7B%5Cn%20%20%20%20%20%20%20%20%5Ctstatus%3A%20'fulfilled'%2C%5Cn%20%20%20%20%20%20%20%20%20%20value%3A%20res%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20if%20(count%20%3D%3D%3D%20len)%20%7B%5Cn%20%20%20%20%20%20%20%20%5Ctresolve(result)%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%7D).catch(err%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20%5Ctcount%20%2B%3D%201%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E5%A4%B1%E8%B4%A5%E5%B1%9E%E6%80%A7%E8%AE%BE%E7%BD%AE%5Cn%20%20%20%20%20%20%20%20result%5Bi%5D%20%3D%20%7B%5Cn%20%20%20%20%20%20%20%20%5Ctstatus%3A%20'rejected'%2C%5Cn%20%20%20%20%20%20%20%20%20%20reason%3A%20err%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20if%20(count%20%3D%3D%3D%20len)%20%7B%5Cn%20%20%20%20%20%20%20%20%5Ctresolve(result)%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%7D)%5Cn%20%20%20%20%7D)%5Cn%20%20%7D)%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22lCmol%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h2 data-lake-id=\"m5Trz\" id=\"m5Trz\"><span data-lake-id=\"u061f6cbe\" id=\"u061f6cbe\">Promise.race</span></h2><p data-lake-id=\"u9d03eb9f\" id=\"u9d03eb9f\"><span data-lake-id=\"uddc25bbb\" id=\"uddc25bbb\">传入的所有实例哪一个实例的状态率先改变，那么就会返回哪个实例的返回值。无论成功还是失败</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22Promise.prototype.race%20%3D%20promises%20%3D%3E%20%7B%5Cn%5Ctreturn%20new%20Promise((resolve%2C%20reject)%20%3D%3E%20%7B%5Cn%20%20%5Ctpromises.forEach(item%20%3D%3E%20%7B%5Cn%20%20%5Ct%5Ct%2F%2F%20%E6%AD%A4%E5%A4%84%E9%9C%80%E8%A6%81%E5%81%9A%E4%BA%8C%E6%AC%A1%E5%8C%85%E8%A3%85%EF%BC%8C%E9%98%B2%E6%AD%A2%E9%9D%9E%20Promise%20%E5%AF%B9%E8%B1%A1%5Cn%20%20%20%20%20%20%2F%2F%20%E5%90%8C%E6%97%B6%E8%BF%9B%E8%A1%8C%E7%8A%B6%E6%80%81%E7%9B%91%E5%90%AC%5Cn%20%20%20%20%20%20Promise.resolve(item)%5Cn%20%20%20%20%20%20%20%20.then(value%20%3D%3E%20resolve(value))%5Cn%20%20%20%20%20%20%20%20.catch(err%20%3D%3E%20reject(err))%5Cn%20%20%5Ct%7D)%5Cn%20%20%7D)%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22CMLgZ%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h2 data-lake-id=\"jdISu\" id=\"jdISu\"><span data-lake-id=\"u70a422b4\" id=\"u70a422b4\">Promise.any</span></h2><p data-lake-id=\"u44584718\" id=\"u44584718\"><span data-lake-id=\"ub9b16917\" id=\"ub9b16917\">只有全部实例都失败后才会返回失败，如果有一个实例的状态返回成功，则返回第一个成功的实例</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22Promise.prototype.any%20%3D%20promises%20%3D%3E%20%7B%5Cn%20%20return%20new%20Promise((resolve%2C%20reject)%20%3D%3E%20%7B%5Cn%20%20%20%20let%20count%20%3D%200%5Cn%20%20%5Ctlet%20len%20%3D%20promiseList.length%5Cn%20%20%20%20if%20(len%20%3D%3D%3D%200)%20return%5Cn%20%20%20%20promises.forEach(item%20%3D%3E%20%7B%5Cn%20%20%20%20%5CtPromise.resolve(item)%5Cn%20%20%20%20%20%20%5Ct.then(value%20%3D%3E%20resolve(value))%5Cn%20%20%20%20%20%20%5Ct.catch(err%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20%5Ct%5Ctcount%2B%3D1%5Cn%20%20%20%20%20%20%20%20%5Ctif%20(count%20%3D%3D%3D%20len)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%5Ctreturn%20reject(new%20Error('All%20promises%20where%20rejected'))%5Cn%20%20%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%5Ct%7D)%5Cn%20%20%20%20%7D)%5Cn%20%20%7D)%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22r6Eol%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card>",
  "body_draft_lake": "",
  "public": 0,
  "status": 1,
  "view_status": 0,
  "read_status": 1,
  "likes_count": 0,
  "comments_count": 0,
  "content_updated_at": "2022-05-11T15:01:35.000Z",
  "deleted_at": null,
  "created_at": "2022-05-11T15:01:35.000Z",
  "updated_at": "2022-05-11T15:08:08.000Z",
  "published_at": "2022-05-11T15:01:35.000Z",
  "first_published_at": "2022-05-11T15:01:34.833Z",
  "word_count": 662,
  "cover": null,
  "description": "Promise.allPromise.all 方法用于将多个 Promise 实例，包装成一个新的 Promise 实例。如果每个实例都成功，会将所有实例的返回值组成一个数组如果其中一个实例运行失败，则返回最先失败的实例结果（在创建实例的时候，promise.all 内部的实例就已经执行了，无...",
  "custom_description": null,
  "hits": 0,
  "_serializer": "v2.doc_detail"
}