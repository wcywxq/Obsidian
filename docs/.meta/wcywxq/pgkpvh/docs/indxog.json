{
  "id": 77021636,
  "slug": "indxog",
  "title": "简易版 vue2",
  "book_id": 27818302,
  "book": {
    "id": 27818302,
    "type": "Book",
    "slug": "pgkpvh",
    "name": "前端面试知识梳理",
    "user_id": 732231,
    "description": "",
    "creator_id": 732231,
    "public": 0,
    "items_count": 65,
    "likes_count": 0,
    "watches_count": 1,
    "content_updated_at": "2023-01-06T09:17:32.188Z",
    "updated_at": "2023-11-11T18:10:33.000Z",
    "created_at": "2022-05-11T14:43:59.000Z",
    "namespace": "wcywxq/pgkpvh",
    "user": {
      "id": 732231,
      "type": "User",
      "login": "wcywxq",
      "name": "magic",
      "description": null,
      "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/732231/1606968271774-avatar/886ad88b-d2cc-4c9e-a674-f70eb51a679c.png",
      "books_count": 18,
      "public_books_count": 0,
      "followers_count": 0,
      "following_count": 0,
      "created_at": "2020-01-08T14:21:31.000Z",
      "updated_at": "2023-11-13T09:32:35.000Z",
      "_serializer": "v2.user"
    },
    "_serializer": "v2.book"
  },
  "user_id": 732231,
  "creator": {
    "id": 732231,
    "type": "User",
    "login": "wcywxq",
    "name": "magic",
    "description": null,
    "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/732231/1606968271774-avatar/886ad88b-d2cc-4c9e-a674-f70eb51a679c.png",
    "books_count": 18,
    "public_books_count": 0,
    "followers_count": 0,
    "following_count": 0,
    "created_at": "2020-01-08T14:21:31.000Z",
    "updated_at": "2023-11-13T09:32:35.000Z",
    "_serializer": "v2.user"
  },
  "format": "lake",
  "body": "<a name=\"QZZzJ\"></a>\n## vue.js\n> 入口\n\n```javascript\nimport Observer from './observer.js'\nimport Compiler from './compiler.js'\n\n/**\n * 包括 vue 构造函数，接收各种配置参数等\n */\nexport default class Vue {\n\tconstructor(options = {}) {\n  \tthis.$options = options\n    this.$data = options.data\n    this.$methods = options.methods\n    \n    // 获取根元素，并存储到 vue 实例\n    this.initRootElement(options)\n    // 利用 Object.defineProperty 将 data 的属性注入到 vue 实例\n    this._proxyData(this.$data)\n    \n    // 实例化 Observer 对象，监听数据变化\n    new Observer(this.$data)\n    \n    // 实例化 Compiler 对象，解析指令和模版表达式\n    new Compiler(this)\n  }\n  \n  // 获取根元素，并存储到 vue 实例，简单检查以下传入的 el 是否合规\n  initRootElement(options) {\n  \tif (typeof options.el === 'string') {\n    \tthis.$el = document.querySelector(options.el)\n    } else if (options.el instanceof HTMLElement) {\n    \tthis.$el = options.el\n    }\n    \n    if (!this.$el) {\n    \tthrow new Error('传入的 el 不合法，请传入 css 选择器或 HTMLELement')\n    }\n  }\n  \n  // 利用 object.definedProperty 将 data 的属性注入到 vue 实例中\n  _proxyData(data) {\n  \tObject.keys(data).forEach(key => {\n    \tObject.defineProperty(this, key, {\n      \tenumerable: true.\n        configurable: true,\n        get() {\n      \t\treturn data[key]\n      \t},\n        set(newVal) {\n        \tif (data[key] === newVal) return\n          data[key] = newVal\n        }\n      })\n    })\n  }\n}\n```\n<a name=\"Rr6Bw\"></a>\n## complier.js \n> 解析模版和指令\n\n```javascript\nimport Watcher from './watcher.js'\n\nexport default class Compiler {\n\tconstructor(vm) {\n  \tthis.el = vm.$el\n    this.vm = vm\n    this.methods = vm.$methods\n    \n    // 编译模版\n    this.compile(vm.$el)\n  }\n  \n  // 编译模版\n  compile(el) {\n  \tconst childNodes = el.childNodes\n    Array.from(childNodes).forEach(node => {\n    \tif (this.isTextNode(node)) {\n      \t// 编译文本节点\n        this.compileText(node)\n      } else if (this.isElementNode(node)) {\n      \t// 元素节点\n        this.compileElement(node)\n      }\n      // 如果存在子节点，则递归调用\n      if (node.childNodes && node.childNodes.length) {\n      \tthis.compile(node)\n      }\n    })\n  }\n  \n  // 编译文本节点\n  compileText(node) {\n  \tconst reg = /\\{\\{(.*?)\\}\\}/g\n    const value = node.textContent\n    \n    if (reg.test(value)) {\n      const key = RegExp.$1.trim() // 获取变量名\n      node.textContent = value.replace(reg, this.vm[key])\n      \n      // 响应式更新\n      new Watcher(this.vm, key, newVal => {\n      \tnode.textContent = newVal\n      })\n    }\n  }\n  \n  // 编译元素节点\n  compileElement(node) {\n  \tif (node.attributes.length) {\n    \tArray.from(node.attributes).forEach(attr => {\n      \t// 遍历元素节点的所有属性\n        const attrName = attr.name \n        \n        // v-model v-html v-on:click\n        if (this.isDirective(attrName)) {\n        \tlet directiveName = attrName.indexOf(':') > 1\n          \t? attrName.subStr(5)\n          \t: attrName.subStr(2)\n          let key = attr.value\n          // 更新元素节点\n          this.update(node, key, directiveName)\n        }\n      })\n    }\n  }\n  \n  // 更新元素节点\n  update(node, key, directiveName) {\n  \tconst fn = this[`${directiveName}Updater`]\n    fn && fn.call(this, node, this.vm[key], key, directiveName)\n  }\n  \n  // 解析 v-text\n  textUpdater(node, value, key) {\n  \tnode.textContent = value\n    new Watcher(this.vm, key, newVal => {\n    \tnode.value = newVal\n    })\n  }\n  \n  // 解析 v-model\n  modelUpdater(node, value, key) {\n  \tnode.value = value\n    new Watcher(this.vm, key, newVal => {\n    \tnode.value = newVal\n    })\n    // 更新值，双向绑定\n    node.addEventListener('input', () => {\n    \tthis.vm[key] = node.value\n    })\n  }\n  \n  // 解析 v-html\n  htmlUpdater(node, value, key) {\n  \tnode.innerHTML = value\n    new Watcher(this.vm, key, newVal => {\n    \tnode.innerHTML = newVal\n    })\n  }\n  \n  // 解析 v-on\n  clickUpdater(node, value, key, directiveName) {\n  \tnode.addEventListener(directiveName, this.methods[key])\n  }\n  \n  // 判断元素属性是否是指令\n  isDirective(attrName) {\n  \treturn attrName.startsWith('v-')\n  }\n  \n  // 判断是否为文本节点\n  isTextNode(node) {\n  \treturn node.nodeType === 3\n  }\n  \n  // 判断是否为元素节点\n  isElementNode(node) {\n  \treturn node.nodeType === 1\n  }\n}\n```\n<a name=\"glz6o\"></a>\n## dep.js\n> 用于收集当前响应式对象的依赖关系，每个响应式对象都有一个 dep 实例\n\n```javascript\nexport default class Dep {\n\tconstructor() {\n  \t// 存储所有观察者\n    this.watchers = []\n  }\n  \n  // 添加观察者\n  addWatcher(watcher) {\n  \tif (watcher && watcher.update) {\n    \tthis.watchers.push(watcher)\n    }\n  }\n  \n  // 发送通知\n  notify() {\n  \tthis.watchers.forEach(watcher => {\n    \twatcher.update()\n    })\n  }\n}\n```\n<a name=\"YoNpk\"></a>\n## observer.js\n> 数据劫持实现，递归遍历所有属性\n\n```javascript\nimport Dep from './dep.js'\n\nexport default class Observer {\n\tconstructor(data) {\n  \tthis.traverse(data)\n  }\n  \n  // 递归遍历 data 里的所有属性\n  traverse(data) {\n  \tif (!data || typeof data !== 'object') return\n    Object.keys(data).forEach(key => {\n    \tthis.defineReactive(data, key, data[key])\n    })\n  }\n  \n  // 数据劫持, 给传入的数据设置 getter / setter\n  defineReactive(obj, key, val) {\n  \tthis.traverse(val)\n    \n    const _self = this\n    // 这里实例化，为了在 setter 中调用 dep.notify()\n    const dep = new Dep()\n    \n    Object.defineProperty(obj, key, {\n    \tenumerable: true,\n      configurable: true,\n      get() {\n      \t// 获取的时候做依赖收集\n        // Dep.target 是为了在此处添加依赖收集用的，添加之后就可以删除了，所以为 null\n        Dep.target && dep.addWatcher(Dep.target)\n        return val\n      },\n      set(newVal) {\n      \tif (val === newVal) return\n        val = newVal\n        // 设置的时候可能设置了一个对象，因此需要递归\n        this.traverse(newVal)\n        // 发起更新通知\n        dep.notify()\n      }\n    })\n  }\n}\n```\n<a name=\"vGEKS\"></a>\n## watcher.js\n> 负责依赖收集，收到的是一个个 Dep 类的实例化对象，需要有 update 方法\n\n```javascript\nimport Dep from './dep.js'\n\nexport default class Watcher {\n  /**\n   * @params vm Vue 实例\n   * @params key data 属性名\n   * @params cb 负责更新视图的回调\n   */\n\tconstructor(vm, key, cb) {\n  \tthis.vm = vm\n    this.key = key\n    this.cb = cb\n    \n    // 同一时间只维持一个 watcher\n    Dep.target = this\n    \n    // 触发 get 方法，在 get 方法里去做一些操作\n    this.oldVal = vm[key]\n    \n    // 为了避免重复添加 watcher，将其设置为 null\n    Dep.target = null\n  }\n  \n  // 当数据变化时，更新视图\n  update() {\n  \t// 需要判断新旧两个值的关系\n    let newVal = this.vm[this.key]\n    if (this.oldVal === newVal) return\n    this.cb(newVal)\n  }\n}\n```\n",
  "body_draft": "",
  "body_html": "<!doctype html><h2 id=\"QZZzJ\"><span>vue.js</span></h2><blockquote><p data-lake-id=\"u03c1bf50\"><span>入口</span></p></blockquote><pre data-lang=\"javascript\"><code>import Observer from './observer.js'\nimport Compiler from './compiler.js'\n\n/**\n * 包括 vue 构造函数，接收各种配置参数等\n */\nexport default class Vue {\n\tconstructor(options = {}) {\n  \tthis.$options = options\n    this.$data = options.data\n    this.$methods = options.methods\n    \n    // 获取根元素，并存储到 vue 实例\n    this.initRootElement(options)\n    // 利用 Object.defineProperty 将 data 的属性注入到 vue 实例\n    this._proxyData(this.$data)\n    \n    // 实例化 Observer 对象，监听数据变化\n    new Observer(this.$data)\n    \n    // 实例化 Compiler 对象，解析指令和模版表达式\n    new Compiler(this)\n  }\n  \n  // 获取根元素，并存储到 vue 实例，简单检查以下传入的 el 是否合规\n  initRootElement(options) {\n  \tif (typeof options.el === 'string') {\n    \tthis.$el = document.querySelector(options.el)\n    } else if (options.el instanceof HTMLElement) {\n    \tthis.$el = options.el\n    }\n    \n    if (!this.$el) {\n    \tthrow new Error('传入的 el 不合法，请传入 css 选择器或 HTMLELement')\n    }\n  }\n  \n  // 利用 object.definedProperty 将 data 的属性注入到 vue 实例中\n  _proxyData(data) {\n  \tObject.keys(data).forEach(key =&gt; {\n    \tObject.defineProperty(this, key, {\n      \tenumerable: true.\n        configurable: true,\n        get() {\n      \t\treturn data[key]\n      \t},\n        set(newVal) {\n        \tif (data[key] === newVal) return\n          data[key] = newVal\n        }\n      })\n    })\n  }\n}</code></pre><h2 id=\"Rr6Bw\"><span>complier.js </span></h2><blockquote><p data-lake-id=\"u31ad36de\"><span>解析模版和指令</span></p></blockquote><pre data-lang=\"javascript\"><code>import Watcher from './watcher.js'\n\nexport default class Compiler {\n\tconstructor(vm) {\n  \tthis.el = vm.$el\n    this.vm = vm\n    this.methods = vm.$methods\n    \n    // 编译模版\n    this.compile(vm.$el)\n  }\n  \n  // 编译模版\n  compile(el) {\n  \tconst childNodes = el.childNodes\n    Array.from(childNodes).forEach(node =&gt; {\n    \tif (this.isTextNode(node)) {\n      \t// 编译文本节点\n        this.compileText(node)\n      } else if (this.isElementNode(node)) {\n      \t// 元素节点\n        this.compileElement(node)\n      }\n      // 如果存在子节点，则递归调用\n      if (node.childNodes &amp;&amp; node.childNodes.length) {\n      \tthis.compile(node)\n      }\n    })\n  }\n  \n  // 编译文本节点\n  compileText(node) {\n  \tconst reg = /\\{\\{(.*?)\\}\\}/g\n    const value = node.textContent\n    \n    if (reg.test(value)) {\n      const key = RegExp.$1.trim() // 获取变量名\n      node.textContent = value.replace(reg, this.vm[key])\n      \n      // 响应式更新\n      new Watcher(this.vm, key, newVal =&gt; {\n      \tnode.textContent = newVal\n      })\n    }\n  }\n  \n  // 编译元素节点\n  compileElement(node) {\n  \tif (node.attributes.length) {\n    \tArray.from(node.attributes).forEach(attr =&gt; {\n      \t// 遍历元素节点的所有属性\n        const attrName = attr.name \n        \n        // v-model v-html v-on:click\n        if (this.isDirective(attrName)) {\n        \tlet directiveName = attrName.indexOf(':') &gt; 1\n          \t? attrName.subStr(5)\n          \t: attrName.subStr(2)\n          let key = attr.value\n          // 更新元素节点\n          this.update(node, key, directiveName)\n        }\n      })\n    }\n  }\n  \n  // 更新元素节点\n  update(node, key, directiveName) {\n  \tconst fn = this[`${directiveName}Updater`]\n    fn &amp;&amp; fn.call(this, node, this.vm[key], key, directiveName)\n  }\n  \n  // 解析 v-text\n  textUpdater(node, value, key) {\n  \tnode.textContent = value\n    new Watcher(this.vm, key, newVal =&gt; {\n    \tnode.value = newVal\n    })\n  }\n  \n  // 解析 v-model\n  modelUpdater(node, value, key) {\n  \tnode.value = value\n    new Watcher(this.vm, key, newVal =&gt; {\n    \tnode.value = newVal\n    })\n    // 更新值，双向绑定\n    node.addEventListener('input', () =&gt; {\n    \tthis.vm[key] = node.value\n    })\n  }\n  \n  // 解析 v-html\n  htmlUpdater(node, value, key) {\n  \tnode.innerHTML = value\n    new Watcher(this.vm, key, newVal =&gt; {\n    \tnode.innerHTML = newVal\n    })\n  }\n  \n  // 解析 v-on\n  clickUpdater(node, value, key, directiveName) {\n  \tnode.addEventListener(directiveName, this.methods[key])\n  }\n  \n  // 判断元素属性是否是指令\n  isDirective(attrName) {\n  \treturn attrName.startsWith('v-')\n  }\n  \n  // 判断是否为文本节点\n  isTextNode(node) {\n  \treturn node.nodeType === 3\n  }\n  \n  // 判断是否为元素节点\n  isElementNode(node) {\n  \treturn node.nodeType === 1\n  }\n}</code></pre><h2 id=\"glz6o\"><span>dep.js</span></h2><blockquote><p data-lake-id=\"u30520d33\"><span>用于收集当前响应式对象的依赖关系，每个响应式对象都有一个 dep 实例</span></p></blockquote><pre data-lang=\"javascript\"><code>export default class Dep {\n\tconstructor() {\n  \t// 存储所有观察者\n    this.watchers = []\n  }\n  \n  // 添加观察者\n  addWatcher(watcher) {\n  \tif (watcher &amp;&amp; watcher.update) {\n    \tthis.watchers.push(watcher)\n    }\n  }\n  \n  // 发送通知\n  notify() {\n  \tthis.watchers.forEach(watcher =&gt; {\n    \twatcher.update()\n    })\n  }\n}</code></pre><h2 id=\"YoNpk\"><span>observer.js</span></h2><blockquote><p data-lake-id=\"u2952bef7\"><span>数据劫持实现，递归遍历所有属性</span></p></blockquote><pre data-lang=\"javascript\"><code>import Dep from './dep.js'\n\nexport default class Observer {\n\tconstructor(data) {\n  \tthis.traverse(data)\n  }\n  \n  // 递归遍历 data 里的所有属性\n  traverse(data) {\n  \tif (!data || typeof data !== 'object') return\n    Object.keys(data).forEach(key =&gt; {\n    \tthis.defineReactive(data, key, data[key])\n    })\n  }\n  \n  // 数据劫持, 给传入的数据设置 getter / setter\n  defineReactive(obj, key, val) {\n  \tthis.traverse(val)\n    \n    const _self = this\n    // 这里实例化，为了在 setter 中调用 dep.notify()\n    const dep = new Dep()\n    \n    Object.defineProperty(obj, key, {\n    \tenumerable: true,\n      configurable: true,\n      get() {\n      \t// 获取的时候做依赖收集\n        // Dep.target 是为了在此处添加依赖收集用的，添加之后就可以删除了，所以为 null\n        Dep.target &amp;&amp; dep.addWatcher(Dep.target)\n        return val\n      },\n      set(newVal) {\n      \tif (val === newVal) return\n        val = newVal\n        // 设置的时候可能设置了一个对象，因此需要递归\n        this.traverse(newVal)\n        // 发起更新通知\n        dep.notify()\n      }\n    })\n  }\n}</code></pre><h2 id=\"vGEKS\"><span>watcher.js</span></h2><blockquote><p data-lake-id=\"ub95b4870\"><span>负责依赖收集，收到的是一个个 Dep 类的实例化对象，需要有 update 方法</span></p></blockquote><pre data-lang=\"javascript\"><code>import Dep from './dep.js'\n\nexport default class Watcher {\n  /**\n   * @params vm Vue 实例\n   * @params key data 属性名\n   * @params cb 负责更新视图的回调\n   */\n\tconstructor(vm, key, cb) {\n  \tthis.vm = vm\n    this.key = key\n    this.cb = cb\n    \n    // 同一时间只维持一个 watcher\n    Dep.target = this\n    \n    // 触发 get 方法，在 get 方法里去做一些操作\n    this.oldVal = vm[key]\n    \n    // 为了避免重复添加 watcher，将其设置为 null\n    Dep.target = null\n  }\n  \n  // 当数据变化时，更新视图\n  update() {\n  \t// 需要判断新旧两个值的关系\n    let newVal = this.vm[this.key]\n    if (this.oldVal === newVal) return\n    this.cb(newVal)\n  }\n}</code></pre>",
  "body_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"viewport\" content=\"adapt\" /><h2 data-lake-id=\"QZZzJ\" id=\"QZZzJ\"><span data-lake-id=\"u5d516cce\" id=\"u5d516cce\">vue.js</span></h2><blockquote data-lake-id=\"u2de17440\" id=\"u2de17440\"><p data-lake-id=\"u03c1bf50\" id=\"u03c1bf50\"><span data-lake-id=\"u11a608d1\" id=\"u11a608d1\">入口</span></p></blockquote><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22import%20Observer%20from%20'.%2Fobserver.js'%5Cnimport%20Compiler%20from%20'.%2Fcompiler.js'%5Cn%5Cn%2F**%5Cn%20*%20%E5%8C%85%E6%8B%AC%20vue%20%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%EF%BC%8C%E6%8E%A5%E6%94%B6%E5%90%84%E7%A7%8D%E9%85%8D%E7%BD%AE%E5%8F%82%E6%95%B0%E7%AD%89%5Cn%20*%2F%5Cnexport%20default%20class%20Vue%20%7B%5Cn%5Ctconstructor(options%20%3D%20%7B%7D)%20%7B%5Cn%20%20%5Ctthis.%24options%20%3D%20options%5Cn%20%20%20%20this.%24data%20%3D%20options.data%5Cn%20%20%20%20this.%24methods%20%3D%20options.methods%5Cn%20%20%20%20%5Cn%20%20%20%20%2F%2F%20%E8%8E%B7%E5%8F%96%E6%A0%B9%E5%85%83%E7%B4%A0%EF%BC%8C%E5%B9%B6%E5%AD%98%E5%82%A8%E5%88%B0%20vue%20%E5%AE%9E%E4%BE%8B%5Cn%20%20%20%20this.initRootElement(options)%5Cn%20%20%20%20%2F%2F%20%E5%88%A9%E7%94%A8%20Object.defineProperty%20%E5%B0%86%20data%20%E7%9A%84%E5%B1%9E%E6%80%A7%E6%B3%A8%E5%85%A5%E5%88%B0%20vue%20%E5%AE%9E%E4%BE%8B%5Cn%20%20%20%20this._proxyData(this.%24data)%5Cn%20%20%20%20%5Cn%20%20%20%20%2F%2F%20%E5%AE%9E%E4%BE%8B%E5%8C%96%20Observer%20%E5%AF%B9%E8%B1%A1%EF%BC%8C%E7%9B%91%E5%90%AC%E6%95%B0%E6%8D%AE%E5%8F%98%E5%8C%96%5Cn%20%20%20%20new%20Observer(this.%24data)%5Cn%20%20%20%20%5Cn%20%20%20%20%2F%2F%20%E5%AE%9E%E4%BE%8B%E5%8C%96%20Compiler%20%E5%AF%B9%E8%B1%A1%EF%BC%8C%E8%A7%A3%E6%9E%90%E6%8C%87%E4%BB%A4%E5%92%8C%E6%A8%A1%E7%89%88%E8%A1%A8%E8%BE%BE%E5%BC%8F%5Cn%20%20%20%20new%20Compiler(this)%5Cn%20%20%7D%5Cn%20%20%5Cn%20%20%2F%2F%20%E8%8E%B7%E5%8F%96%E6%A0%B9%E5%85%83%E7%B4%A0%EF%BC%8C%E5%B9%B6%E5%AD%98%E5%82%A8%E5%88%B0%20vue%20%E5%AE%9E%E4%BE%8B%EF%BC%8C%E7%AE%80%E5%8D%95%E6%A3%80%E6%9F%A5%E4%BB%A5%E4%B8%8B%E4%BC%A0%E5%85%A5%E7%9A%84%20el%20%E6%98%AF%E5%90%A6%E5%90%88%E8%A7%84%5Cn%20%20initRootElement(options)%20%7B%5Cn%20%20%5Ctif%20(typeof%20options.el%20%3D%3D%3D%20'string')%20%7B%5Cn%20%20%20%20%5Ctthis.%24el%20%3D%20document.querySelector(options.el)%5Cn%20%20%20%20%7D%20else%20if%20(options.el%20instanceof%20HTMLElement)%20%7B%5Cn%20%20%20%20%5Ctthis.%24el%20%3D%20options.el%5Cn%20%20%20%20%7D%5Cn%20%20%20%20%5Cn%20%20%20%20if%20(!this.%24el)%20%7B%5Cn%20%20%20%20%5Ctthrow%20new%20Error('%E4%BC%A0%E5%85%A5%E7%9A%84%20el%20%E4%B8%8D%E5%90%88%E6%B3%95%EF%BC%8C%E8%AF%B7%E4%BC%A0%E5%85%A5%20css%20%E9%80%89%E6%8B%A9%E5%99%A8%E6%88%96%20HTMLELement')%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%20%20%5Cn%20%20%2F%2F%20%E5%88%A9%E7%94%A8%20object.definedProperty%20%E5%B0%86%20data%20%E7%9A%84%E5%B1%9E%E6%80%A7%E6%B3%A8%E5%85%A5%E5%88%B0%20vue%20%E5%AE%9E%E4%BE%8B%E4%B8%AD%5Cn%20%20_proxyData(data)%20%7B%5Cn%20%20%5CtObject.keys(data).forEach(key%20%3D%3E%20%7B%5Cn%20%20%20%20%5CtObject.defineProperty(this%2C%20key%2C%20%7B%5Cn%20%20%20%20%20%20%5Ctenumerable%3A%20true.%5Cn%20%20%20%20%20%20%20%20configurable%3A%20true%2C%5Cn%20%20%20%20%20%20%20%20get()%20%7B%5Cn%20%20%20%20%20%20%5Ct%5Ctreturn%20data%5Bkey%5D%5Cn%20%20%20%20%20%20%5Ct%7D%2C%5Cn%20%20%20%20%20%20%20%20set(newVal)%20%7B%5Cn%20%20%20%20%20%20%20%20%5Ctif%20(data%5Bkey%5D%20%3D%3D%3D%20newVal)%20return%5Cn%20%20%20%20%20%20%20%20%20%20data%5Bkey%5D%20%3D%20newVal%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%7D)%5Cn%20%20%20%20%7D)%5Cn%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%E5%AE%9E%E4%BE%8B%E5%8C%96%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22vq0wF%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h2 data-lake-id=\"Rr6Bw\" id=\"Rr6Bw\"><span data-lake-id=\"u13bc640b\" id=\"u13bc640b\">complier.js </span></h2><blockquote data-lake-id=\"ud08898c0\" id=\"ud08898c0\"><p data-lake-id=\"u31ad36de\" id=\"u31ad36de\"><span data-lake-id=\"u70b60114\" id=\"u70b60114\">解析模版和指令</span></p></blockquote><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22import%20Watcher%20from%20'.%2Fwatcher.js'%5Cn%5Cnexport%20default%20class%20Compiler%20%7B%5Cn%5Ctconstructor(vm)%20%7B%5Cn%20%20%5Ctthis.el%20%3D%20vm.%24el%5Cn%20%20%20%20this.vm%20%3D%20vm%5Cn%20%20%20%20this.methods%20%3D%20vm.%24methods%5Cn%20%20%20%20%5Cn%20%20%20%20%2F%2F%20%E7%BC%96%E8%AF%91%E6%A8%A1%E7%89%88%5Cn%20%20%20%20this.compile(vm.%24el)%5Cn%20%20%7D%5Cn%20%20%5Cn%20%20%2F%2F%20%E7%BC%96%E8%AF%91%E6%A8%A1%E7%89%88%5Cn%20%20compile(el)%20%7B%5Cn%20%20%5Ctconst%20childNodes%20%3D%20el.childNodes%5Cn%20%20%20%20Array.from(childNodes).forEach(node%20%3D%3E%20%7B%5Cn%20%20%20%20%5Ctif%20(this.isTextNode(node))%20%7B%5Cn%20%20%20%20%20%20%5Ct%2F%2F%20%E7%BC%96%E8%AF%91%E6%96%87%E6%9C%AC%E8%8A%82%E7%82%B9%5Cn%20%20%20%20%20%20%20%20this.compileText(node)%5Cn%20%20%20%20%20%20%7D%20else%20if%20(this.isElementNode(node))%20%7B%5Cn%20%20%20%20%20%20%5Ct%2F%2F%20%E5%85%83%E7%B4%A0%E8%8A%82%E7%82%B9%5Cn%20%20%20%20%20%20%20%20this.compileElement(node)%5Cn%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%2F%2F%20%E5%A6%82%E6%9E%9C%E5%AD%98%E5%9C%A8%E5%AD%90%E8%8A%82%E7%82%B9%EF%BC%8C%E5%88%99%E9%80%92%E5%BD%92%E8%B0%83%E7%94%A8%5Cn%20%20%20%20%20%20if%20(node.childNodes%20%26%26%20node.childNodes.length)%20%7B%5Cn%20%20%20%20%20%20%5Ctthis.compile(node)%5Cn%20%20%20%20%20%20%7D%5Cn%20%20%20%20%7D)%5Cn%20%20%7D%5Cn%20%20%5Cn%20%20%2F%2F%20%E7%BC%96%E8%AF%91%E6%96%87%E6%9C%AC%E8%8A%82%E7%82%B9%5Cn%20%20compileText(node)%20%7B%5Cn%20%20%5Ctconst%20reg%20%3D%20%2F%5C%5C%7B%5C%5C%7B(.*%3F)%5C%5C%7D%5C%5C%7D%2Fg%5Cn%20%20%20%20const%20value%20%3D%20node.textContent%5Cn%20%20%20%20%5Cn%20%20%20%20if%20(reg.test(value))%20%7B%5Cn%20%20%20%20%20%20const%20key%20%3D%20RegExp.%241.trim()%20%2F%2F%20%E8%8E%B7%E5%8F%96%E5%8F%98%E9%87%8F%E5%90%8D%5Cn%20%20%20%20%20%20node.textContent%20%3D%20value.replace(reg%2C%20this.vm%5Bkey%5D)%5Cn%20%20%20%20%20%20%5Cn%20%20%20%20%20%20%2F%2F%20%E5%93%8D%E5%BA%94%E5%BC%8F%E6%9B%B4%E6%96%B0%5Cn%20%20%20%20%20%20new%20Watcher(this.vm%2C%20key%2C%20newVal%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20%5Ctnode.textContent%20%3D%20newVal%5Cn%20%20%20%20%20%20%7D)%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%20%20%5Cn%20%20%2F%2F%20%E7%BC%96%E8%AF%91%E5%85%83%E7%B4%A0%E8%8A%82%E7%82%B9%5Cn%20%20compileElement(node)%20%7B%5Cn%20%20%5Ctif%20(node.attributes.length)%20%7B%5Cn%20%20%20%20%5CtArray.from(node.attributes).forEach(attr%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20%5Ct%2F%2F%20%E9%81%8D%E5%8E%86%E5%85%83%E7%B4%A0%E8%8A%82%E7%82%B9%E7%9A%84%E6%89%80%E6%9C%89%E5%B1%9E%E6%80%A7%5Cn%20%20%20%20%20%20%20%20const%20attrName%20%3D%20attr.name%20%5Cn%20%20%20%20%20%20%20%20%5Cn%20%20%20%20%20%20%20%20%2F%2F%20v-model%20v-html%20v-on%3Aclick%5Cn%20%20%20%20%20%20%20%20if%20(this.isDirective(attrName))%20%7B%5Cn%20%20%20%20%20%20%20%20%5Ctlet%20directiveName%20%3D%20attrName.indexOf('%3A')%20%3E%201%5Cn%20%20%20%20%20%20%20%20%20%20%5Ct%3F%20attrName.subStr(5)%5Cn%20%20%20%20%20%20%20%20%20%20%5Ct%3A%20attrName.subStr(2)%5Cn%20%20%20%20%20%20%20%20%20%20let%20key%20%3D%20attr.value%5Cn%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E6%9B%B4%E6%96%B0%E5%85%83%E7%B4%A0%E8%8A%82%E7%82%B9%5Cn%20%20%20%20%20%20%20%20%20%20this.update(node%2C%20key%2C%20directiveName)%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%7D)%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%20%20%5Cn%20%20%2F%2F%20%E6%9B%B4%E6%96%B0%E5%85%83%E7%B4%A0%E8%8A%82%E7%82%B9%5Cn%20%20update(node%2C%20key%2C%20directiveName)%20%7B%5Cn%20%20%5Ctconst%20fn%20%3D%20this%5B%60%24%7BdirectiveName%7DUpdater%60%5D%5Cn%20%20%20%20fn%20%26%26%20fn.call(this%2C%20node%2C%20this.vm%5Bkey%5D%2C%20key%2C%20directiveName)%5Cn%20%20%7D%5Cn%20%20%5Cn%20%20%2F%2F%20%E8%A7%A3%E6%9E%90%20v-text%5Cn%20%20textUpdater(node%2C%20value%2C%20key)%20%7B%5Cn%20%20%5Ctnode.textContent%20%3D%20value%5Cn%20%20%20%20new%20Watcher(this.vm%2C%20key%2C%20newVal%20%3D%3E%20%7B%5Cn%20%20%20%20%5Ctnode.value%20%3D%20newVal%5Cn%20%20%20%20%7D)%5Cn%20%20%7D%5Cn%20%20%5Cn%20%20%2F%2F%20%E8%A7%A3%E6%9E%90%20v-model%5Cn%20%20modelUpdater(node%2C%20value%2C%20key)%20%7B%5Cn%20%20%5Ctnode.value%20%3D%20value%5Cn%20%20%20%20new%20Watcher(this.vm%2C%20key%2C%20newVal%20%3D%3E%20%7B%5Cn%20%20%20%20%5Ctnode.value%20%3D%20newVal%5Cn%20%20%20%20%7D)%5Cn%20%20%20%20%2F%2F%20%E6%9B%B4%E6%96%B0%E5%80%BC%EF%BC%8C%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A%5Cn%20%20%20%20node.addEventListener('input'%2C%20()%20%3D%3E%20%7B%5Cn%20%20%20%20%5Ctthis.vm%5Bkey%5D%20%3D%20node.value%5Cn%20%20%20%20%7D)%5Cn%20%20%7D%5Cn%20%20%5Cn%20%20%2F%2F%20%E8%A7%A3%E6%9E%90%20v-html%5Cn%20%20htmlUpdater(node%2C%20value%2C%20key)%20%7B%5Cn%20%20%5Ctnode.innerHTML%20%3D%20value%5Cn%20%20%20%20new%20Watcher(this.vm%2C%20key%2C%20newVal%20%3D%3E%20%7B%5Cn%20%20%20%20%5Ctnode.innerHTML%20%3D%20newVal%5Cn%20%20%20%20%7D)%5Cn%20%20%7D%5Cn%20%20%5Cn%20%20%2F%2F%20%E8%A7%A3%E6%9E%90%20v-on%5Cn%20%20clickUpdater(node%2C%20value%2C%20key%2C%20directiveName)%20%7B%5Cn%20%20%5Ctnode.addEventListener(directiveName%2C%20this.methods%5Bkey%5D)%5Cn%20%20%7D%5Cn%20%20%5Cn%20%20%2F%2F%20%E5%88%A4%E6%96%AD%E5%85%83%E7%B4%A0%E5%B1%9E%E6%80%A7%E6%98%AF%E5%90%A6%E6%98%AF%E6%8C%87%E4%BB%A4%5Cn%20%20isDirective(attrName)%20%7B%5Cn%20%20%5Ctreturn%20attrName.startsWith('v-')%5Cn%20%20%7D%5Cn%20%20%5Cn%20%20%2F%2F%20%E5%88%A4%E6%96%AD%E6%98%AF%E5%90%A6%E4%B8%BA%E6%96%87%E6%9C%AC%E8%8A%82%E7%82%B9%5Cn%20%20isTextNode(node)%20%7B%5Cn%20%20%5Ctreturn%20node.nodeType%20%3D%3D%3D%203%5Cn%20%20%7D%5Cn%20%20%5Cn%20%20%2F%2F%20%E5%88%A4%E6%96%AD%E6%98%AF%E5%90%A6%E4%B8%BA%E5%85%83%E7%B4%A0%E8%8A%82%E7%82%B9%5Cn%20%20isElementNode(node)%20%7B%5Cn%20%20%5Ctreturn%20node.nodeType%20%3D%3D%3D%201%5Cn%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%E6%A8%A1%E7%89%88%E7%BC%96%E8%AF%91%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22lBTfC%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h2 data-lake-id=\"glz6o\" id=\"glz6o\"><span data-lake-id=\"ua282cd7a\" id=\"ua282cd7a\">dep.js</span></h2><blockquote data-lake-id=\"ud590ea1e\" id=\"ud590ea1e\"><p data-lake-id=\"u30520d33\" id=\"u30520d33\"><span data-lake-id=\"u3c909306\" id=\"u3c909306\">用于收集当前响应式对象的依赖关系，每个响应式对象都有一个 dep 实例</span></p></blockquote><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22export%20default%20class%20Dep%20%7B%5Cn%5Ctconstructor()%20%7B%5Cn%20%20%5Ct%2F%2F%20%E5%AD%98%E5%82%A8%E6%89%80%E6%9C%89%E8%A7%82%E5%AF%9F%E8%80%85%5Cn%20%20%20%20this.watchers%20%3D%20%5B%5D%5Cn%20%20%7D%5Cn%20%20%5Cn%20%20%2F%2F%20%E6%B7%BB%E5%8A%A0%E8%A7%82%E5%AF%9F%E8%80%85%5Cn%20%20addWatcher(watcher)%20%7B%5Cn%20%20%5Ctif%20(watcher%20%26%26%20watcher.update)%20%7B%5Cn%20%20%20%20%5Ctthis.watchers.push(watcher)%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%20%20%5Cn%20%20%2F%2F%20%E5%8F%91%E9%80%81%E9%80%9A%E7%9F%A5%5Cn%20%20notify()%20%7B%5Cn%20%20%5Ctthis.watchers.forEach(watcher%20%3D%3E%20%7B%5Cn%20%20%20%20%5Ctwatcher.update()%5Cn%20%20%20%20%7D)%5Cn%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%E4%BE%9D%E8%B5%96%E6%94%B6%E9%9B%86%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22yixWB%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h2 data-lake-id=\"YoNpk\" id=\"YoNpk\"><span data-lake-id=\"u6582aa94\" id=\"u6582aa94\">observer.js</span></h2><blockquote data-lake-id=\"uc0f86e0e\" id=\"uc0f86e0e\"><p data-lake-id=\"u2952bef7\" id=\"u2952bef7\"><span data-lake-id=\"u3bf1cb45\" id=\"u3bf1cb45\">数据劫持实现，递归遍历所有属性</span></p></blockquote><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22import%20Dep%20from%20'.%2Fdep.js'%5Cn%5Cnexport%20default%20class%20Observer%20%7B%5Cn%5Ctconstructor(data)%20%7B%5Cn%20%20%5Ctthis.traverse(data)%5Cn%20%20%7D%5Cn%20%20%5Cn%20%20%2F%2F%20%E9%80%92%E5%BD%92%E9%81%8D%E5%8E%86%20data%20%E9%87%8C%E7%9A%84%E6%89%80%E6%9C%89%E5%B1%9E%E6%80%A7%5Cn%20%20traverse(data)%20%7B%5Cn%20%20%5Ctif%20(!data%20%7C%7C%20typeof%20data%20!%3D%3D%20'object')%20return%5Cn%20%20%20%20Object.keys(data).forEach(key%20%3D%3E%20%7B%5Cn%20%20%20%20%5Ctthis.defineReactive(data%2C%20key%2C%20data%5Bkey%5D)%5Cn%20%20%20%20%7D)%5Cn%20%20%7D%5Cn%20%20%5Cn%20%20%2F%2F%20%E6%95%B0%E6%8D%AE%E5%8A%AB%E6%8C%81%2C%20%E7%BB%99%E4%BC%A0%E5%85%A5%E7%9A%84%E6%95%B0%E6%8D%AE%E8%AE%BE%E7%BD%AE%20getter%20%2F%20setter%5Cn%20%20defineReactive(obj%2C%20key%2C%20val)%20%7B%5Cn%20%20%5Ctthis.traverse(val)%5Cn%20%20%20%20%5Cn%20%20%20%20const%20_self%20%3D%20this%5Cn%20%20%20%20%2F%2F%20%E8%BF%99%E9%87%8C%E5%AE%9E%E4%BE%8B%E5%8C%96%EF%BC%8C%E4%B8%BA%E4%BA%86%E5%9C%A8%20setter%20%E4%B8%AD%E8%B0%83%E7%94%A8%20dep.notify()%5Cn%20%20%20%20const%20dep%20%3D%20new%20Dep()%5Cn%20%20%20%20%5Cn%20%20%20%20Object.defineProperty(obj%2C%20key%2C%20%7B%5Cn%20%20%20%20%5Ctenumerable%3A%20true%2C%5Cn%20%20%20%20%20%20configurable%3A%20true%2C%5Cn%20%20%20%20%20%20get()%20%7B%5Cn%20%20%20%20%20%20%5Ct%2F%2F%20%E8%8E%B7%E5%8F%96%E7%9A%84%E6%97%B6%E5%80%99%E5%81%9A%E4%BE%9D%E8%B5%96%E6%94%B6%E9%9B%86%5Cn%20%20%20%20%20%20%20%20%2F%2F%20Dep.target%20%E6%98%AF%E4%B8%BA%E4%BA%86%E5%9C%A8%E6%AD%A4%E5%A4%84%E6%B7%BB%E5%8A%A0%E4%BE%9D%E8%B5%96%E6%94%B6%E9%9B%86%E7%94%A8%E7%9A%84%EF%BC%8C%E6%B7%BB%E5%8A%A0%E4%B9%8B%E5%90%8E%E5%B0%B1%E5%8F%AF%E4%BB%A5%E5%88%A0%E9%99%A4%E4%BA%86%EF%BC%8C%E6%89%80%E4%BB%A5%E4%B8%BA%20null%5Cn%20%20%20%20%20%20%20%20Dep.target%20%26%26%20dep.addWatcher(Dep.target)%5Cn%20%20%20%20%20%20%20%20return%20val%5Cn%20%20%20%20%20%20%7D%2C%5Cn%20%20%20%20%20%20set(newVal)%20%7B%5Cn%20%20%20%20%20%20%5Ctif%20(val%20%3D%3D%3D%20newVal)%20return%5Cn%20%20%20%20%20%20%20%20val%20%3D%20newVal%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E8%AE%BE%E7%BD%AE%E7%9A%84%E6%97%B6%E5%80%99%E5%8F%AF%E8%83%BD%E8%AE%BE%E7%BD%AE%E4%BA%86%E4%B8%80%E4%B8%AA%E5%AF%B9%E8%B1%A1%EF%BC%8C%E5%9B%A0%E6%AD%A4%E9%9C%80%E8%A6%81%E9%80%92%E5%BD%92%5Cn%20%20%20%20%20%20%20%20this.traverse(newVal)%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E5%8F%91%E8%B5%B7%E6%9B%B4%E6%96%B0%E9%80%9A%E7%9F%A5%5Cn%20%20%20%20%20%20%20%20dep.notify()%5Cn%20%20%20%20%20%20%7D%5Cn%20%20%20%20%7D)%5Cn%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%E6%95%B0%E6%8D%AE%E5%8A%AB%E6%8C%81%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22j4fGa%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h2 data-lake-id=\"vGEKS\" id=\"vGEKS\"><span data-lake-id=\"ued78cdad\" id=\"ued78cdad\">watcher.js</span></h2><blockquote data-lake-id=\"u8c9d186c\" id=\"u8c9d186c\"><p data-lake-id=\"ub95b4870\" id=\"ub95b4870\"><span data-lake-id=\"u3fa533f3\" id=\"u3fa533f3\">负责依赖收集，收到的是一个个 Dep 类的实例化对象，需要有 update 方法</span></p></blockquote><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22import%20Dep%20from%20'.%2Fdep.js'%5Cn%5Cnexport%20default%20class%20Watcher%20%7B%5Cn%20%20%2F**%5Cn%20%20%20*%20%40params%20vm%20Vue%20%E5%AE%9E%E4%BE%8B%5Cn%20%20%20*%20%40params%20key%20data%20%E5%B1%9E%E6%80%A7%E5%90%8D%5Cn%20%20%20*%20%40params%20cb%20%E8%B4%9F%E8%B4%A3%E6%9B%B4%E6%96%B0%E8%A7%86%E5%9B%BE%E7%9A%84%E5%9B%9E%E8%B0%83%5Cn%20%20%20*%2F%5Cn%5Ctconstructor(vm%2C%20key%2C%20cb)%20%7B%5Cn%20%20%5Ctthis.vm%20%3D%20vm%5Cn%20%20%20%20this.key%20%3D%20key%5Cn%20%20%20%20this.cb%20%3D%20cb%5Cn%20%20%20%20%5Cn%20%20%20%20%2F%2F%20%E5%90%8C%E4%B8%80%E6%97%B6%E9%97%B4%E5%8F%AA%E7%BB%B4%E6%8C%81%E4%B8%80%E4%B8%AA%20watcher%5Cn%20%20%20%20Dep.target%20%3D%20this%5Cn%20%20%20%20%5Cn%20%20%20%20%2F%2F%20%E8%A7%A6%E5%8F%91%20get%20%E6%96%B9%E6%B3%95%EF%BC%8C%E5%9C%A8%20get%20%E6%96%B9%E6%B3%95%E9%87%8C%E5%8E%BB%E5%81%9A%E4%B8%80%E4%BA%9B%E6%93%8D%E4%BD%9C%5Cn%20%20%20%20this.oldVal%20%3D%20vm%5Bkey%5D%5Cn%20%20%20%20%5Cn%20%20%20%20%2F%2F%20%E4%B8%BA%E4%BA%86%E9%81%BF%E5%85%8D%E9%87%8D%E5%A4%8D%E6%B7%BB%E5%8A%A0%20watcher%EF%BC%8C%E5%B0%86%E5%85%B6%E8%AE%BE%E7%BD%AE%E4%B8%BA%20null%5Cn%20%20%20%20Dep.target%20%3D%20null%5Cn%20%20%7D%5Cn%20%20%5Cn%20%20%2F%2F%20%E5%BD%93%E6%95%B0%E6%8D%AE%E5%8F%98%E5%8C%96%E6%97%B6%EF%BC%8C%E6%9B%B4%E6%96%B0%E8%A7%86%E5%9B%BE%5Cn%20%20update()%20%7B%5Cn%20%20%5Ct%2F%2F%20%E9%9C%80%E8%A6%81%E5%88%A4%E6%96%AD%E6%96%B0%E6%97%A7%E4%B8%A4%E4%B8%AA%E5%80%BC%E7%9A%84%E5%85%B3%E7%B3%BB%5Cn%20%20%20%20let%20newVal%20%3D%20this.vm%5Bthis.key%5D%5Cn%20%20%20%20if%20(this.oldVal%20%3D%3D%3D%20newVal)%20return%5Cn%20%20%20%20this.cb(newVal)%5Cn%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22px71N%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card>",
  "body_draft_lake": "",
  "public": 0,
  "status": 1,
  "view_status": 0,
  "read_status": 1,
  "likes_count": 0,
  "comments_count": 0,
  "content_updated_at": "2022-05-11T15:01:37.000Z",
  "deleted_at": null,
  "created_at": "2022-05-11T15:01:37.000Z",
  "updated_at": "2022-05-11T15:08:08.000Z",
  "published_at": "2022-05-11T15:01:37.000Z",
  "first_published_at": "2022-05-11T15:01:37.436Z",
  "word_count": 1087,
  "cover": null,
  "description": "vue.js入口import Observer from './observer.js' import Compiler from './compiler.js'  /**  * 包括 vue 构造函数，接收各种配置参数等  */ export default class Vue { \tcon...",
  "custom_description": null,
  "hits": 0,
  "_serializer": "v2.doc_detail"
}