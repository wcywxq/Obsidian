{
  "id": 77021715,
  "slug": "ybrsyw",
  "title": "实现 call、apply、bind",
  "book_id": 27818302,
  "book": {
    "id": 27818302,
    "type": "Book",
    "slug": "pgkpvh",
    "name": "前端面试知识梳理",
    "user_id": 732231,
    "description": "",
    "creator_id": 732231,
    "public": 0,
    "items_count": 65,
    "likes_count": 0,
    "watches_count": 1,
    "content_updated_at": "2023-01-06T09:17:32.188Z",
    "updated_at": "2023-11-11T18:10:33.000Z",
    "created_at": "2022-05-11T14:43:59.000Z",
    "namespace": "wcywxq/pgkpvh",
    "user": {
      "id": 732231,
      "type": "User",
      "login": "wcywxq",
      "name": "magic",
      "description": null,
      "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/732231/1606968271774-avatar/886ad88b-d2cc-4c9e-a674-f70eb51a679c.png",
      "books_count": 18,
      "public_books_count": 0,
      "followers_count": 0,
      "following_count": 0,
      "created_at": "2020-01-08T14:21:31.000Z",
      "updated_at": "2023-11-13T09:32:35.000Z",
      "_serializer": "v2.user"
    },
    "_serializer": "v2.book"
  },
  "user_id": 732231,
  "creator": {
    "id": 732231,
    "type": "User",
    "login": "wcywxq",
    "name": "magic",
    "description": null,
    "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/732231/1606968271774-avatar/886ad88b-d2cc-4c9e-a674-f70eb51a679c.png",
    "books_count": 18,
    "public_books_count": 0,
    "followers_count": 0,
    "following_count": 0,
    "created_at": "2020-01-08T14:21:31.000Z",
    "updated_at": "2023-11-13T09:32:35.000Z",
    "_serializer": "v2.user"
  },
  "format": "lake",
  "body": "<a name=\"PtZZM\"></a>\n## call\n1. 判断调用对象是否为函数，即使我们是定义在函数的原型上的，但是可能出现使用 `call` 等方式调用的情况。\n2. 判断传入上下文对象是否存在，如果不存在，则设置为 `window` 。\n3. 处理传入的参数，截取第一个参数后的所有参数。\n4. 将函数作为上下文对象的一个属性。\n5. 使用上下文对象来调用这个方法，并保存返回结果。\n6. 删除刚才新增的属性。\n7. 返回结果。\n```javascript\nFunction.prototype.call = function(ctx) {\n\tconst args = [...arguments].slice(1)\n  const res = null\n  ctx = ctx || window\n  ctx.fn = this\n  res =  ctx.fn(...args)\n  delete ctx.fn\n  return res\n}\n```\n<a name=\"iJWCa\"></a>\n## apply\n\n1. 判断调用对象是否为函数，即使我们是定义在函数的原型上的，但是可能出现使用 `call` 等方式调用的情况。\n2. 判断传入上下文对象是否存在，如果不存在，则设置为 `window` 。\n3. 将函数作为上下文对象的一个属性。\n4. 判断参数值是否传入\n5. 使用上下文对象来调用这个方法，并保存返回结果。\n6. 删除刚才新增的属性\n7. 返回结果\n```javascript\nFunction.prototype.apply = function(ctx) {\n  let res = null\n  // 判断 context 是否存在，如果未传入则为 window\n  ctx = ctx || window\n  ctx.fn = this\n  res = arguments[1] ? ctx.fn(...arguments[1]) : ctx.fn()\n  // 将属性删除\n  delete ctx.fn\n  return res\n}\n```\n<a name=\"G08P5\"></a>\n## bind\n\n1. 判断调用对象是否为函数，即使我们是定义在函数的原型上的，但是可能出现使用 `call` 等方式调用的情况。\n2. 保存当前函数的引用，获取其余传入参数值。\n3. 创建一个函数返回\n4. 函数内部使用 `apply` 来绑定函数调用，需要判断函数作为构造函数的情况，这个时候需要传入当前函数的 `this` 给 `apply` 调用，其余情况都传入指定的上下文对象。\n```javascript\nFunction.prototype.bind = function(ctx, ...args) {\n\tconst args = [...arguments].slice(1)\n  const fn = this\n  \n  return function Fn() {\n  \treturn fn.apply(this instanceof Fn ? this : ctx, args.concat(...arguments))\n  }\n}\n```\n",
  "body_draft": "",
  "body_html": "<!doctype html><h2 id=\"PtZZM\"><span>call</span></h2><ol><li><span>判断调用对象是否为函数，即使我们是定义在函数的原型上的，但是可能出现使用 </span><code><span>call</span></code><span> 等方式调用的情况。</span></li><li><span>判断传入上下文对象是否存在，如果不存在，则设置为 </span><code><span>window</span></code><span> 。</span></li><li><span>处理传入的参数，截取第一个参数后的所有参数。</span></li><li><span>将函数作为上下文对象的一个属性。</span></li><li><span>使用上下文对象来调用这个方法，并保存返回结果。</span></li><li><span>删除刚才新增的属性。</span></li><li><span>返回结果。</span></li></ol><pre data-lang=\"javascript\"><code>Function.prototype.call = function(ctx) {\n\tconst args = [...arguments].slice(1)\n  const res = null\n  ctx = ctx || window\n  ctx.fn = this\n  res =  ctx.fn(...args)\n  delete ctx.fn\n  return res\n}</code></pre><h2 id=\"iJWCa\"><span>apply</span></h2><ol><li><span>判断调用对象是否为函数，即使我们是定义在函数的原型上的，但是可能出现使用 </span><code><span>call</span></code><span> 等方式调用的情况。</span></li><li><span>判断传入上下文对象是否存在，如果不存在，则设置为 </span><code><span>window</span></code><span> 。</span></li><li><span>将函数作为上下文对象的一个属性。</span></li><li><span>判断参数值是否传入</span></li><li><span>使用上下文对象来调用这个方法，并保存返回结果。</span></li><li><span>删除刚才新增的属性</span></li><li><span>返回结果</span></li></ol><pre data-lang=\"javascript\"><code>Function.prototype.apply = function(ctx) {\n  let res = null\n  // 判断 context 是否存在，如果未传入则为 window\n  ctx = ctx || window\n  ctx.fn = this\n  res = arguments[1] ? ctx.fn(...arguments[1]) : ctx.fn()\n  // 将属性删除\n  delete ctx.fn\n  return res\n}</code></pre><h2 id=\"G08P5\"><span>bind</span></h2><ol><li><span>判断调用对象是否为函数，即使我们是定义在函数的原型上的，但是可能出现使用 </span><code><span>call</span></code><span> 等方式调用的情况。</span></li><li><span>保存当前函数的引用，获取其余传入参数值。</span></li><li><span>创建一个函数返回</span></li><li><span>函数内部使用 </span><code><span>apply</span></code><span> 来绑定函数调用，需要判断函数作为构造函数的情况，这个时候需要传入当前函数的 </span><code><span>this</span></code><span> 给 </span><code><span>apply</span></code><span> 调用，其余情况都传入指定的上下文对象。</span></li></ol><pre data-lang=\"javascript\"><code>Function.prototype.bind = function(ctx, ...args) {\n\tconst args = [...arguments].slice(1)\n  const fn = this\n  \n  return function Fn() {\n  \treturn fn.apply(this instanceof Fn ? this : ctx, args.concat(...arguments))\n  }\n}</code></pre>",
  "body_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"viewport\" content=\"adapt\" /><h2 data-lake-id=\"PtZZM\" id=\"PtZZM\"><span data-lake-id=\"u900bd09b\" id=\"u900bd09b\">call</span></h2><ol list=\"ue7c83b19\"><li fid=\"ub3f9dce6\" data-lake-id=\"ufda5580d\" id=\"ufda5580d\"><span data-lake-id=\"ub0da9364\" id=\"ub0da9364\">判断调用对象是否为函数，即使我们是定义在函数的原型上的，但是可能出现使用 </span><code data-lake-id=\"ua9cd16b5\" id=\"ua9cd16b5\"><span data-lake-id=\"u225fec40\" id=\"u225fec40\">call</span></code><span data-lake-id=\"ube5d5858\" id=\"ube5d5858\"> 等方式调用的情况。</span></li><li fid=\"ub3f9dce6\" data-lake-id=\"u2fd453a3\" id=\"u2fd453a3\"><span data-lake-id=\"ub72996c4\" id=\"ub72996c4\">判断传入上下文对象是否存在，如果不存在，则设置为 </span><code data-lake-id=\"u71d0189a\" id=\"u71d0189a\"><span data-lake-id=\"ub278591e\" id=\"ub278591e\">window</span></code><span data-lake-id=\"uee84cbd1\" id=\"uee84cbd1\"> 。</span></li><li fid=\"ub3f9dce6\" data-lake-id=\"u4f15ab66\" id=\"u4f15ab66\"><span data-lake-id=\"u86d48539\" id=\"u86d48539\">处理传入的参数，截取第一个参数后的所有参数。</span></li><li fid=\"ub3f9dce6\" data-lake-id=\"u93f8badb\" id=\"u93f8badb\"><span data-lake-id=\"u7f4ff639\" id=\"u7f4ff639\">将函数作为上下文对象的一个属性。</span></li><li fid=\"ub3f9dce6\" data-lake-id=\"u29b33d2b\" id=\"u29b33d2b\"><span data-lake-id=\"u45175af3\" id=\"u45175af3\">使用上下文对象来调用这个方法，并保存返回结果。</span></li><li fid=\"ub3f9dce6\" data-lake-id=\"u454448cd\" id=\"u454448cd\"><span data-lake-id=\"uaf44edc4\" id=\"uaf44edc4\">删除刚才新增的属性。</span></li><li fid=\"ub3f9dce6\" data-lake-id=\"u69734b30\" id=\"u69734b30\"><span data-lake-id=\"u19b10098\" id=\"u19b10098\">返回结果。</span></li></ol><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22Function.prototype.call%20%3D%20function(ctx)%20%7B%5Cn%5Ctconst%20args%20%3D%20%5B...arguments%5D.slice(1)%5Cn%20%20const%20res%20%3D%20null%5Cn%20%20ctx%20%3D%20ctx%20%7C%7C%20window%5Cn%20%20ctx.fn%20%3D%20this%5Cn%20%20res%20%3D%20%20ctx.fn(...args)%5Cn%20%20delete%20ctx.fn%5Cn%20%20return%20res%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22l24cW%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h2 data-lake-id=\"iJWCa\" id=\"iJWCa\"><span data-lake-id=\"u60fcca59\" id=\"u60fcca59\">apply</span></h2><ol list=\"ud9caeb14\"><li fid=\"u6591f62d\" data-lake-id=\"u0f7f1b45\" id=\"u0f7f1b45\"><span data-lake-id=\"uf20a8382\" id=\"uf20a8382\">判断调用对象是否为函数，即使我们是定义在函数的原型上的，但是可能出现使用 </span><code data-lake-id=\"uef45a315\" id=\"uef45a315\"><span data-lake-id=\"u9cc4ba25\" id=\"u9cc4ba25\">call</span></code><span data-lake-id=\"u8e0f2719\" id=\"u8e0f2719\"> 等方式调用的情况。</span></li><li fid=\"u6591f62d\" data-lake-id=\"u3e5be890\" id=\"u3e5be890\"><span data-lake-id=\"u24f2a2a1\" id=\"u24f2a2a1\">判断传入上下文对象是否存在，如果不存在，则设置为 </span><code data-lake-id=\"udce8b191\" id=\"udce8b191\"><span data-lake-id=\"u78d97849\" id=\"u78d97849\">window</span></code><span data-lake-id=\"u4455450e\" id=\"u4455450e\"> 。</span></li><li fid=\"u6591f62d\" data-lake-id=\"u4bb09952\" id=\"u4bb09952\"><span data-lake-id=\"uc6340148\" id=\"uc6340148\">将函数作为上下文对象的一个属性。</span></li><li fid=\"u6591f62d\" data-lake-id=\"u49a9ee01\" id=\"u49a9ee01\"><span data-lake-id=\"u1893002f\" id=\"u1893002f\">判断参数值是否传入</span></li><li fid=\"u6591f62d\" data-lake-id=\"ua792c459\" id=\"ua792c459\"><span data-lake-id=\"uf220980f\" id=\"uf220980f\">使用上下文对象来调用这个方法，并保存返回结果。</span></li><li fid=\"u6591f62d\" data-lake-id=\"uc74b198f\" id=\"uc74b198f\"><span data-lake-id=\"ub24dd9f0\" id=\"ub24dd9f0\">删除刚才新增的属性</span></li><li fid=\"u6591f62d\" data-lake-id=\"ufdc4670f\" id=\"ufdc4670f\"><span data-lake-id=\"ua6945915\" id=\"ua6945915\">返回结果</span></li></ol><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22Function.prototype.apply%20%3D%20function(ctx)%20%7B%5Cn%20%20let%20res%20%3D%20null%5Cn%20%20%2F%2F%20%E5%88%A4%E6%96%AD%20context%20%E6%98%AF%E5%90%A6%E5%AD%98%E5%9C%A8%EF%BC%8C%E5%A6%82%E6%9E%9C%E6%9C%AA%E4%BC%A0%E5%85%A5%E5%88%99%E4%B8%BA%20window%5Cn%20%20ctx%20%3D%20ctx%20%7C%7C%20window%5Cn%20%20ctx.fn%20%3D%20this%5Cn%20%20res%20%3D%20arguments%5B1%5D%20%3F%20ctx.fn(...arguments%5B1%5D)%20%3A%20ctx.fn()%5Cn%20%20%2F%2F%20%E5%B0%86%E5%B1%9E%E6%80%A7%E5%88%A0%E9%99%A4%5Cn%20%20delete%20ctx.fn%5Cn%20%20return%20res%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22ATaVF%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h2 data-lake-id=\"G08P5\" id=\"G08P5\"><span data-lake-id=\"u004a7fe8\" id=\"u004a7fe8\">bind</span></h2><ol list=\"u00484ebf\"><li fid=\"u2b434a3f\" data-lake-id=\"ue7b4f4e7\" id=\"ue7b4f4e7\"><span data-lake-id=\"uea43b4cb\" id=\"uea43b4cb\">判断调用对象是否为函数，即使我们是定义在函数的原型上的，但是可能出现使用 </span><code data-lake-id=\"u7363c6d3\" id=\"u7363c6d3\"><span data-lake-id=\"u835834a3\" id=\"u835834a3\">call</span></code><span data-lake-id=\"ubb5a5878\" id=\"ubb5a5878\"> 等方式调用的情况。</span></li><li fid=\"u2b434a3f\" data-lake-id=\"ue1308af7\" id=\"ue1308af7\"><span data-lake-id=\"uf697020d\" id=\"uf697020d\">保存当前函数的引用，获取其余传入参数值。</span></li><li fid=\"u2b434a3f\" data-lake-id=\"u954ecd86\" id=\"u954ecd86\"><span data-lake-id=\"uf2da8e8d\" id=\"uf2da8e8d\">创建一个函数返回</span></li><li fid=\"u2b434a3f\" data-lake-id=\"u59996bec\" id=\"u59996bec\"><span data-lake-id=\"ub420d4b0\" id=\"ub420d4b0\">函数内部使用 </span><code data-lake-id=\"ue1b41557\" id=\"ue1b41557\"><span data-lake-id=\"u48d9f9a4\" id=\"u48d9f9a4\">apply</span></code><span data-lake-id=\"ufaa571f1\" id=\"ufaa571f1\"> 来绑定函数调用，需要判断函数作为构造函数的情况，这个时候需要传入当前函数的 </span><code data-lake-id=\"uca327394\" id=\"uca327394\"><span data-lake-id=\"u2edb7909\" id=\"u2edb7909\">this</span></code><span data-lake-id=\"u42e47ef9\" id=\"u42e47ef9\"> 给 </span><code data-lake-id=\"ub463cb8e\" id=\"ub463cb8e\"><span data-lake-id=\"ue99937fc\" id=\"ue99937fc\">apply</span></code><span data-lake-id=\"u20314275\" id=\"u20314275\"> 调用，其余情况都传入指定的上下文对象。</span></li></ol><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22Function.prototype.bind%20%3D%20function(ctx%2C%20...args)%20%7B%5Cn%5Ctconst%20args%20%3D%20%5B...arguments%5D.slice(1)%5Cn%20%20const%20fn%20%3D%20this%5Cn%20%20%5Cn%20%20return%20function%20Fn()%20%7B%5Cn%20%20%5Ctreturn%20fn.apply(this%20instanceof%20Fn%20%3F%20this%20%3A%20ctx%2C%20args.concat(...arguments))%5Cn%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22qdHWq%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card>",
  "body_draft_lake": "",
  "public": 0,
  "status": 1,
  "view_status": 0,
  "read_status": 1,
  "likes_count": 0,
  "comments_count": 0,
  "content_updated_at": "2022-05-11T15:02:10.000Z",
  "deleted_at": null,
  "created_at": "2022-05-11T15:02:10.000Z",
  "updated_at": "2022-05-11T15:08:06.000Z",
  "published_at": "2022-05-11T15:02:10.000Z",
  "first_published_at": "2022-05-11T15:02:10.168Z",
  "word_count": 531,
  "cover": null,
  "description": "call判断调用对象是否为函数，即使我们是定义在函数的原型上的，但是可能出现使用 call 等方式调用的情况。判断传入上下文对象是否存在，如果不存在，则设置为 window 。处理传入的参数，截取第一个参数后的所有参数。将函数作为上下文对象的一个属性。使用上下文对象来调用这个方法，并保存返回结...",
  "custom_description": null,
  "hits": 0,
  "_serializer": "v2.doc_detail"
}