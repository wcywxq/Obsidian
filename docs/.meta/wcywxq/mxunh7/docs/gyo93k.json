{
  "id": 72212066,
  "slug": "gyo93k",
  "title": "new 和 Object.create",
  "book_id": 26225124,
  "book": {
    "id": 26225124,
    "type": "Book",
    "slug": "mxunh7",
    "name": "八股文 eight-part essay writing",
    "user_id": 732231,
    "description": "前端八股文",
    "creator_id": 732231,
    "public": 0,
    "items_count": 239,
    "likes_count": 0,
    "watches_count": 1,
    "content_updated_at": "2023-11-11T18:15:57.023Z",
    "updated_at": "2023-11-11T18:15:57.000Z",
    "created_at": "2022-04-04T11:31:45.000Z",
    "namespace": "wcywxq/mxunh7",
    "user": {
      "id": 732231,
      "type": "User",
      "login": "wcywxq",
      "name": "magic",
      "description": null,
      "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/732231/1606968271774-avatar/886ad88b-d2cc-4c9e-a674-f70eb51a679c.png",
      "books_count": 18,
      "public_books_count": 0,
      "followers_count": 0,
      "following_count": 0,
      "created_at": "2020-01-08T14:21:31.000Z",
      "updated_at": "2023-11-13T09:32:35.000Z",
      "_serializer": "v2.user"
    },
    "_serializer": "v2.book"
  },
  "user_id": 732231,
  "creator": {
    "id": 732231,
    "type": "User",
    "login": "wcywxq",
    "name": "magic",
    "description": null,
    "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/732231/1606968271774-avatar/886ad88b-d2cc-4c9e-a674-f70eb51a679c.png",
    "books_count": 18,
    "public_books_count": 0,
    "followers_count": 0,
    "following_count": 0,
    "created_at": "2020-01-08T14:21:31.000Z",
    "updated_at": "2023-11-13T09:32:35.000Z",
    "_serializer": "v2.user"
  },
  "format": "lake",
  "body": "<a name=\"vUwby\"></a>\n## new 关键字\n在使用 new 关键字创建对象的时候，new 关键字会帮助我们做以下四件事情：\n\n1. 帮助我们创建一个空对象\n2. 将新对象的原型 prototype 指向构造函数的原型 prototype\n3. 执行构造函数, 改变 this，把构造函数的属性添加到新对象\n4. 返回创建的新对象\n:::warning\n不能 new 一个箭头函数，因为箭头函数没有 this\n:::\n```javascript\nfunction newFactory(fn, ...args) {\n  \t// method1\n  \tconst obj = new Object()\n    obj.__proto__ = newFactory.prototype\n  \tnewFactory.apply(obj, args)\n    return obj\n  \n  \t// method2\n    const obj = Object.create(fn.prototype)\n    fn.apply(obj, args)\n  \treturn obj\n}\n\n// 测试用例\nfunction Person(name, age) {\n    this.name = name\n    this.age = age\n}\n\nPerson.prototype.say = function() {\n    return this.name + ':' + this.age\n}\n\nconst person = newFactory(Person, 'zhangsan', 20)\n\nconsole.log(person, person.say())\n```\n<a name=\"twvte\"></a>\n## Object.create\n定义：Object.create 方法创建一个新对象，使用现有的对象来提供新创建的对象的对象 proto<br />参数：Object.create(proto, propertiesObject)\n\n- proto：传递一个现在有的对象，即新对象的原型对象(新创建的对象 __proto__ 属性指向现有属性)。第一个参数 proto 的值为 null，那么创建出来的对象是一个 {}(空对象)并且没有原型\n- propertiesObject：可选，给新对象添加新属性以及描述器。如果没有指定则创建一个 {}，有原型也有继承 Object.prototype 上的方法\n<a name=\"m5UXH\"></a>\n## new Object 和 Object.create 区别\n\n- new Object 继承内置对象 Object，而 Object.create 则是继承指定对象\n- 可以通过 Object.create(null) 创建一个干净的对象，也就是没有原型，而 new Object() 创建的对象是 Object 的实例，原型永远指向 Object.prototype\n",
  "body_draft": "",
  "body_html": "<!doctype html><div class=\"lake-content\" typography=\"classic\"><h2 id=\"vUwby\"><span class=\"ne-text\">new 关键字</span></h2><p id=\"u9705e458\" class=\"ne-p\"><span class=\"ne-text\">在使用 new 关键字创建对象的时候，new 关键字会帮助我们做以下四件事情：</span></p><ol class=\"ne-ol\"><li id=\"u0708ae34\"><span class=\"ne-text\">帮助我们创建一个空对象</span></li><li id=\"u5b273268\"><span class=\"ne-text\">将新对象的原型 prototype 指向构造函数的原型 prototype</span></li><li id=\"u3eab10df\"><span class=\"ne-text\">执行构造函数, 改变 this，把构造函数的属性添加到新对象</span></li><li id=\"u59cdd59e\"><span class=\"ne-text\">返回创建的新对象</span></li></ol><div data-type=\"warning\" class=\"ne-alert\"><p id=\"ua8d8e855\" class=\"ne-p\"><span class=\"ne-text\">不能 new 一个箭头函数，因为箭头函数没有 this</span></p></div><pre data-language=\"javascript\" id=\"Uoj56\" class=\"ne-codeblock language-javascript\">function newFactory(fn, ...args) {\n  \t// method1\n  \tconst obj = new Object()\n    obj.__proto__ = newFactory.prototype\n  \tnewFactory.apply(obj, args)\n    return obj\n  \n  \t// method2\n    const obj = Object.create(fn.prototype)\n    fn.apply(obj, args)\n  \treturn obj\n}\n\n// 测试用例\nfunction Person(name, age) {\n    this.name = name\n    this.age = age\n}\n\nPerson.prototype.say = function() {\n    return this.name + ':' + this.age\n}\n\nconst person = newFactory(Person, 'zhangsan', 20)\n\nconsole.log(person, person.say())</pre><h2 id=\"twvte\"><span class=\"ne-text\">Object.create</span></h2><p id=\"u5e10c213\" class=\"ne-p\"><span class=\"ne-text\">定义：Object.create 方法创建一个新对象，使用现有的对象来提供新创建的对象的对象 proto</span></p><p id=\"u00df7a16\" class=\"ne-p\"><span class=\"ne-text\">参数：Object.create(proto, propertiesObject)</span></p><ul class=\"ne-ul\"><li id=\"uec9e9d39\"><span class=\"ne-text\">proto：传递一个现在有的对象，即新对象的原型对象(新创建的对象 __proto__ 属性指向现有属性)。第一个参数 proto 的值为 null，那么创建出来的对象是一个 {}(空对象)并且没有原型</span></li><li id=\"ub8abb25c\"><span class=\"ne-text\">propertiesObject：可选，给新对象添加新属性以及描述器。如果没有指定则创建一个 {}，有原型也有继承 Object.prototype 上的方法</span></li></ul><h2 id=\"m5UXH\"><span class=\"ne-text\">new Object 和 Object.create 区别</span></h2><ul class=\"ne-ul\"><li id=\"uf728e3ea\"><span class=\"ne-text\">new Object 继承内置对象 Object，而 Object.create 则是继承指定对象</span></li><li id=\"u1c238967\"><span class=\"ne-text\">可以通过 Object.create(null) 创建一个干净的对象，也就是没有原型，而 new Object() 创建的对象是 Object 的实例，原型永远指向 Object.prototype</span></li></ul></div>",
  "body_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"viewport\" content=\"adapt\" /><h2 data-lake-id=\"vUwby\" id=\"vUwby\"><span data-lake-id=\"u7fc9d698\" id=\"u7fc9d698\">new 关键字</span></h2><p data-lake-id=\"u9705e458\" id=\"u9705e458\"><span data-lake-id=\"ue3fb3e76\" id=\"ue3fb3e76\">在使用 new 关键字创建对象的时候，new 关键字会帮助我们做以下四件事情：</span></p><ol list=\"uc1bd7c0e\"><li fid=\"u9f7f7c0b\" data-lake-id=\"u0708ae34\" id=\"u0708ae34\"><span data-lake-id=\"uffdf9a70\" id=\"uffdf9a70\">帮助我们创建一个空对象</span></li><li fid=\"u9f7f7c0b\" data-lake-id=\"u5b273268\" id=\"u5b273268\"><span data-lake-id=\"u0bf8b04d\" id=\"u0bf8b04d\">将新对象的原型 prototype 指向构造函数的原型 prototype</span></li><li fid=\"u9f7f7c0b\" data-lake-id=\"u3eab10df\" id=\"u3eab10df\"><span data-lake-id=\"u3db6414f\" id=\"u3db6414f\">执行构造函数, 改变 this，把构造函数的属性添加到新对象</span></li><li fid=\"u9f7f7c0b\" data-lake-id=\"u59cdd59e\" id=\"u59cdd59e\"><span data-lake-id=\"u79736382\" id=\"u79736382\">返回创建的新对象</span></li></ol><blockquote data-lake-id=\"uc61f5373\" id=\"uc61f5373\" class=\"lake-alert lake-alert-warning\"><p data-lake-id=\"ua8d8e855\" id=\"ua8d8e855\"><span data-lake-id=\"u1b929bcf\" id=\"u1b929bcf\">不能 new 一个箭头函数，因为箭头函数没有 this</span></p></blockquote><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22function%20newFactory(fn%2C%20...args)%20%7B%5Cn%20%20%5Ct%2F%2F%20method1%5Cn%20%20%5Ctconst%20obj%20%3D%20new%20Object()%5Cn%20%20%20%20obj.__proto__%20%3D%20newFactory.prototype%5Cn%20%20%5CtnewFactory.apply(obj%2C%20args)%5Cn%20%20%20%20return%20obj%5Cn%20%20%5Cn%20%20%5Ct%2F%2F%20method2%5Cn%20%20%20%20const%20obj%20%3D%20Object.create(fn.prototype)%5Cn%20%20%20%20fn.apply(obj%2C%20args)%5Cn%20%20%5Ctreturn%20obj%5Cn%7D%5Cn%5Cn%2F%2F%20%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B%5Cnfunction%20Person(name%2C%20age)%20%7B%5Cn%20%20%20%20this.name%20%3D%20name%5Cn%20%20%20%20this.age%20%3D%20age%5Cn%7D%5Cn%5CnPerson.prototype.say%20%3D%20function()%20%7B%5Cn%20%20%20%20return%20this.name%20%2B%20'%3A'%20%2B%20this.age%5Cn%7D%5Cn%5Cnconst%20person%20%3D%20newFactory(Person%2C%20'zhangsan'%2C%2020)%5Cn%5Cnconsole.log(person%2C%20person.say())%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22Uoj56%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h2 data-lake-id=\"twvte\" id=\"twvte\"><span data-lake-id=\"u8cb29c91\" id=\"u8cb29c91\">Object.create</span></h2><p data-lake-id=\"u5e10c213\" id=\"u5e10c213\"><span data-lake-id=\"u76e3cdba\" id=\"u76e3cdba\">定义：Object.create 方法创建一个新对象，使用现有的对象来提供新创建的对象的对象 proto</span></p><p data-lake-id=\"u00df7a16\" id=\"u00df7a16\"><span data-lake-id=\"uf988962d\" id=\"uf988962d\">参数：Object.create(proto, propertiesObject)</span></p><ul list=\"u22429433\"><li fid=\"u8e77d281\" data-lake-id=\"uec9e9d39\" id=\"uec9e9d39\"><span data-lake-id=\"ua498ee62\" id=\"ua498ee62\">proto：传递一个现在有的对象，即新对象的原型对象(新创建的对象 __proto__ 属性指向现有属性)。第一个参数 proto 的值为 null，那么创建出来的对象是一个 {}(空对象)并且没有原型</span></li><li fid=\"u8e77d281\" data-lake-id=\"ub8abb25c\" id=\"ub8abb25c\"><span data-lake-id=\"u587eca26\" id=\"u587eca26\">propertiesObject：可选，给新对象添加新属性以及描述器。如果没有指定则创建一个 {}，有原型也有继承 Object.prototype 上的方法</span></li></ul><h2 data-lake-id=\"m5UXH\" id=\"m5UXH\"><span data-lake-id=\"u5cd3e9de\" id=\"u5cd3e9de\">new Object 和 Object.create 区别</span></h2><ul list=\"u497a75b2\"><li fid=\"u7b56baca\" data-lake-id=\"uf728e3ea\" id=\"uf728e3ea\"><span data-lake-id=\"ub70746b9\" id=\"ub70746b9\">new Object 继承内置对象 Object，而 Object.create 则是继承指定对象</span></li><li fid=\"u7b56baca\" data-lake-id=\"u1c238967\" id=\"u1c238967\"><span data-lake-id=\"uf5a54bee\" id=\"uf5a54bee\">可以通过 Object.create(null) 创建一个干净的对象，也就是没有原型，而 new Object() 创建的对象是 Object 的实例，原型永远指向 Object.prototype</span></li></ul>",
  "body_draft_lake": "",
  "public": 0,
  "status": 1,
  "view_status": 0,
  "read_status": 1,
  "likes_count": 0,
  "comments_count": 0,
  "content_updated_at": "2022-05-15T15:45:32.000Z",
  "deleted_at": null,
  "created_at": "2022-04-04T11:32:50.000Z",
  "updated_at": "2022-05-15T15:45:32.000Z",
  "published_at": "2022-05-15T15:45:32.000Z",
  "first_published_at": "2022-04-04T11:32:49.873Z",
  "word_count": 410,
  "cover": null,
  "description": "new 关键字在使用 new 关键字创建对象的时候，new 关键字会帮助我们做以下四件事情：帮助我们创建一个空对象将新对象的原型 prototype 指向构造函数的原型 prototype执行构造函数, 改变 this，把构造函数的属性添加到新对象返回创建的新对象不能 new 一个箭头函数，因...",
  "custom_description": null,
  "hits": 0,
  "_serializer": "v2.doc_detail"
}