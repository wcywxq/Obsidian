{
  "id": 72212146,
  "slug": "tcfotb",
  "title": "前端性能优化",
  "book_id": 26225124,
  "book": {
    "id": 26225124,
    "type": "Book",
    "slug": "mxunh7",
    "name": "八股文 eight-part essay writing",
    "user_id": 732231,
    "description": "前端八股文",
    "creator_id": 732231,
    "public": 0,
    "items_count": 239,
    "likes_count": 0,
    "watches_count": 1,
    "content_updated_at": "2023-11-11T18:15:57.023Z",
    "updated_at": "2023-11-11T18:15:57.000Z",
    "created_at": "2022-04-04T11:31:45.000Z",
    "namespace": "wcywxq/mxunh7",
    "user": {
      "id": 732231,
      "type": "User",
      "login": "wcywxq",
      "name": "magic",
      "description": null,
      "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/732231/1606968271774-avatar/886ad88b-d2cc-4c9e-a674-f70eb51a679c.png",
      "books_count": 18,
      "public_books_count": 0,
      "followers_count": 0,
      "following_count": 0,
      "created_at": "2020-01-08T14:21:31.000Z",
      "updated_at": "2023-11-13T09:32:35.000Z",
      "_serializer": "v2.user"
    },
    "_serializer": "v2.book"
  },
  "user_id": 732231,
  "creator": {
    "id": 732231,
    "type": "User",
    "login": "wcywxq",
    "name": "magic",
    "description": null,
    "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/732231/1606968271774-avatar/886ad88b-d2cc-4c9e-a674-f70eb51a679c.png",
    "books_count": 18,
    "public_books_count": 0,
    "followers_count": 0,
    "following_count": 0,
    "created_at": "2020-01-08T14:21:31.000Z",
    "updated_at": "2023-11-13T09:32:35.000Z",
    "_serializer": "v2.user"
  },
  "format": "lake",
  "body": "性能优化的目的：哪些指标影响了业务，则对应指标就是优化的关键点\n<a name=\"SS7MK\"></a>\n## 常见的性能优化关键点\n\n1. 首屏渲染时间\n2. 首次可交互时间(例如：手机验证码的获取)\n3. 首次有意义内容的渲染时间(例如：主要元素的渲染时间)\n<a name=\"EaHdU\"></a>\n## 性能优化-根据类型\n<a name=\"gj5nn\"></a>\n### 只获取 所需资源\n\n1. 异步加载路由\n2. 图片的懒加载\n3. babel 的 polyfill(低版本下对高版本语法的补充)\n4. cdn 记载 polyfill 服务，可以实现对 polyfill 的按需加载\n<a name=\"mWn1V\"></a>\n### 缩减资源体积\n\n1. 打包压缩\n2. gzip\n3. 图片格式的优化、压缩(base64、svg、小图 png、照片 jpeg)；根据屏幕分辨率展示不同分辨率图片；webp 图片格式的使用；\n4. 在请求头控制 cookie 大小\n<a name=\"tn4pe\"></a>\n### 时序优化\n\n1. 对于没有相互关联，没有依赖关系的请求，采用 Promise.all 并行请求\n2. 服务端渲染 ssr(在服务端打包，同时可以做缓存)\n3. 预解析 prefetch、预连接 preconnect、预加载 preload(利用 webpack 魔法注释：`/* webpackPrefetch: true */`)\n   1. dns 预解析：`<link rel='dns-prefetch' href='xxx1.com' />`\n   2. 预连接：`<link rel='preconnect' href='xxx1.com' />`\n   3. 预加载 `<link rel='preload' as='image' href='https://xxx/a.png' />`\n<a name=\"VjDti\"></a>\n### 合理利用缓存\n\n1. cdn(源站和 cdn 服务器域名一般都是不同的，其中一个目的是为了缩减不必要的 cookie 携带)\n   1. cdn 预热：cdn 厂家不通过用户的访问提前把源站的内容分发到不同的 cdn 节点上(大流量场景都需要做)\n   2. cdn 刷新：源站刷新了，将会让 cdn 节点强制拉取源站的 cdn 文件\n<a name=\"ZRGfo\"></a>\n## 性能优化-根据优化方向\n<a name=\"U4pU7\"></a>\n### 工程化方向\n\n1. 客户端 gzip 离线包、服务器资源 gzip 压缩\n2. es-module\n3. 动态 Import\n4. 动态 polyfill(利用 cdn)\n5. 图片加载优化：webp、图片预加载、懒加载、客户端预渲染\n6. 服务端渲染 ssr\n7. cdn 静态资源加速\n8. webpack 提供的优化：\n   1. base64图片\n   2. 使用 tree-shaking 去除未使用的代码\n   3. 资源压缩\n   4. 分包策略 chunk\n   5. webpack dll、通用方法优先打包抽离\n   6. 别名 alias 的使用\n9. 浏览器缓存策略，service worker\n10. 骨架图\n11. 数据预存取：如接口缓存\n12. 减少资源重定向\n13. nginx 负载均衡(可以提高响应速度)\n14. 使用 http/2。因为解析速度快，拥有 header 压缩、多路复用、服务器推送静态资源等功能\n15. oss(对象存储。海量、安全、低成本、高可靠的云存储服务) + cdn(内容分发网络)\n<a name=\"NFPU2\"></a>\n### 开发细节方向\n\n1. 图片：占位图、雪碧图(css 精灵)\n2. prefetch/preload 预加载\n3. defer/async：defer `=>` 所有资源加载完之后执行 js；async `=>` 加载完 js 立即执行\n4. 减少 dom 操作，减少重排重绘\n5. 在客户端层面，首屏减少和客户端交互，合并接口请求\n6. 首页不加载不可视组件\n7. 防止渲染抖动，控制加载时序\n8. 减少组件层级\n9. 优先使用弹性布局\n<a name=\"EIl1N\"></a>\n## 解决卡顿问题\n\n1. css 动画效率比 js 高，css 可以使用 gpu 加速，3d 加速。如果非要用 js 动画，可以使用 requestAnimationFrame\n2. 批量进行 dom 操作，固定图片容器大小，避免屏幕抖动\n3. 减少重排重绘\n4. 防抖和节流\n5. 减少临时大对象的产生，利用对象缓存，主要是减少垃圾回收时产生过多的内存碎片\n6. 异步操作：IntersectionObserver、PostMessage、RequestIdleCallback\n<a name=\"KzSBK\"></a>\n## 性能优化 api\n\n1. Performance。performance.now() 与 new Date() 是有区别的，它是高精度的，且是相对时间，相对于页面加载的那一刻。但是不一定适合单页面场景。\n2. `window.addEventListener('load', '')`；`window.addEventListener('domContentLoaded', '')`\n3. img 的 onload 事件，监听首屏内的图片是否加载完成，判断首屏事件\n4. requestAnimationFrame 和 requestIdleCallback\n5. IntersectionObserver、MutationObserver、PostMessage\n6. web worker，耗时任务放在里面执行\n\n",
  "body_draft": "",
  "body_html": "<!doctype html><p data-lake-id=\"u811c2416\"><span>性能优化的目的：哪些指标影响了业务，则对应指标就是优化的关键点</span></p><h2 id=\"SS7MK\"><span>常见的性能优化关键点</span></h2><ol><li><span>首屏渲染时间</span></li><li><span>首次可交互时间(例如：手机验证码的获取)</span></li><li><span>首次有意义内容的渲染时间(例如：主要元素的渲染时间)</span></li></ol><h2 id=\"EaHdU\"><span>性能优化-根据类型</span></h2><h3 id=\"gj5nn\"><span>只获取 所需资源</span></h3><ol><li><span>异步加载路由</span></li><li><span>图片的懒加载</span></li><li><span>babel 的 polyfill(低版本下对高版本语法的补充)</span></li><li><span>cdn 记载 polyfill 服务，可以实现对 polyfill 的按需加载</span></li></ol><h3 id=\"mWn1V\"><span>缩减资源体积</span></h3><ol><li><span>打包压缩</span></li><li><span>gzip</span></li><li><span>图片格式的优化、压缩(base64、svg、小图 png、照片 jpeg)；根据屏幕分辨率展示不同分辨率图片；webp 图片格式的使用；</span></li><li><span>在请求头控制 cookie 大小</span></li></ol><h3 id=\"tn4pe\"><span>时序优化</span></h3><ol><li><span>对于没有相互关联，没有依赖关系的请求，采用 Promise.all 并行请求</span></li><li><span>服务端渲染 ssr(在服务端打包，同时可以做缓存)</span></li><li><span>预解析 prefetch、预连接 preconnect、预加载 preload(利用 webpack 魔法注释：</span><code><span>/* webpackPrefetch: true */</span></code><span>)</span></li></ol><ol data-lake-indent=\"1\"><li><span>dns 预解析：</span><code><span>&lt;link rel='dns-prefetch' href='xxx1.com' /&gt;</span></code></li><li><span>预连接：</span><code><span>&lt;link rel='preconnect' href='xxx1.com' /&gt;</span></code></li><li><span>预加载 </span><code><span>&lt;link rel='preload' as='image' href='https://xxx/a.png' /&gt;</span></code></li></ol><h3 id=\"VjDti\"><span>合理利用缓存</span></h3><ol><li><span>cdn(源站和 cdn 服务器域名一般都是不同的，其中一个目的是为了缩减不必要的 cookie 携带)</span></li></ol><ol data-lake-indent=\"1\"><li><span>cdn 预热：cdn 厂家不通过用户的访问提前把源站的内容分发到不同的 cdn 节点上(大流量场景都需要做)</span></li><li><span>cdn 刷新：源站刷新了，将会让 cdn 节点强制拉取源站的 cdn 文件</span></li></ol><h2 id=\"ZRGfo\"><span>性能优化-根据优化方向</span></h2><h3 id=\"U4pU7\"><span>工程化方向</span></h3><ol><li><span>客户端 gzip 离线包、服务器资源 gzip 压缩</span></li><li><span>es-module</span></li><li><span>动态 Import</span></li><li><span>动态 polyfill(利用 cdn)</span></li><li><span>图片加载优化：webp、图片预加载、懒加载、客户端预渲染</span></li><li><span>服务端渲染 ssr</span></li><li><span>cdn 静态资源加速</span></li><li><span>webpack 提供的优化：</span></li></ol><ol data-lake-indent=\"1\"><li><span>base64图片</span></li><li><span>使用 tree-shaking 去除未使用的代码</span></li><li><span>资源压缩</span></li><li><span>分包策略 chunk</span></li><li><span>webpack dll、通用方法优先打包抽离</span></li><li><span>别名 alias 的使用</span></li></ol><ol start=\"9\"><li><span>浏览器缓存策略，service worker</span></li><li><span>骨架图</span></li><li><span>数据预存取：如接口缓存</span></li><li><span>减少资源重定向</span></li><li><span>nginx 负载均衡(可以提高响应速度)</span></li><li><span>使用 http/2。因为解析速度快，拥有 header 压缩、多路复用、服务器推送静态资源等功能</span></li><li><span>oss(对象存储。海量、安全、低成本、高可靠的云存储服务) + cdn(内容分发网络)</span></li></ol><h3 id=\"NFPU2\"><span>开发细节方向</span></h3><ol><li><span>图片：占位图、雪碧图(css 精灵)</span></li><li><span>prefetch/preload 预加载</span></li><li><span>defer/async：defer </span><code><span>=&gt;</span></code><span> 所有资源加载完之后执行 js；async </span><code><span>=&gt;</span></code><span> 加载完 js 立即执行</span></li><li><span>减少 dom 操作，减少重排重绘</span></li><li><span>在客户端层面，首屏减少和客户端交互，合并接口请求</span></li><li><span>首页不加载不可视组件</span></li><li><span>防止渲染抖动，控制加载时序</span></li><li><span>减少组件层级</span></li><li><span>优先使用弹性布局</span></li></ol><h2 id=\"EIl1N\"><span>解决卡顿问题</span></h2><ol><li><span>css 动画效率比 js 高，css 可以使用 gpu 加速，3d 加速。如果非要用 js 动画，可以使用 requestAnimationFrame</span></li><li><span>批量进行 dom 操作，固定图片容器大小，避免屏幕抖动</span></li><li><span>减少重排重绘</span></li><li><span>防抖和节流</span></li><li><span>减少临时大对象的产生，利用对象缓存，主要是减少垃圾回收时产生过多的内存碎片</span></li><li><span>异步操作：IntersectionObserver、PostMessage、RequestIdleCallback</span></li></ol><h2 id=\"KzSBK\"><span>性能优化 api</span></h2><ol><li><span>Performance。performance.now() 与 new Date() 是有区别的，它是高精度的，且是相对时间，相对于页面加载的那一刻。但是不一定适合单页面场景。</span></li><li><code><span>window.addEventListener('load', '')</span></code><span>；</span><code><span>window.addEventListener('domContentLoaded', '')</span></code></li><li><span>img 的 onload 事件，监听首屏内的图片是否加载完成，判断首屏事件</span></li><li><span>requestAnimationFrame 和 requestIdleCallback</span></li><li><span>IntersectionObserver、MutationObserver、PostMessage</span></li><li><span>web worker，耗时任务放在里面执行</span></li></ol><p data-lake-id=\"u1437da14\"><br /></p>",
  "body_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"viewport\" content=\"adapt\" /><p data-lake-id=\"u811c2416\" id=\"u811c2416\"><span data-lake-id=\"u76c26cdd\" id=\"u76c26cdd\">性能优化的目的：哪些指标影响了业务，则对应指标就是优化的关键点</span></p><h2 data-lake-id=\"SS7MK\" id=\"SS7MK\"><span data-lake-id=\"u6d1b6e4b\" id=\"u6d1b6e4b\">常见的性能优化关键点</span></h2><ol list=\"ub903ac82\"><li fid=\"u0ed6190a\" data-lake-id=\"u36e2cdda\" id=\"u36e2cdda\"><span data-lake-id=\"u13b78b5d\" id=\"u13b78b5d\">首屏渲染时间</span></li><li fid=\"u0ed6190a\" data-lake-id=\"u85dae503\" id=\"u85dae503\"><span data-lake-id=\"ua3588727\" id=\"ua3588727\">首次可交互时间(例如：手机验证码的获取)</span></li><li fid=\"u0ed6190a\" data-lake-id=\"uc20cbc33\" id=\"uc20cbc33\"><span data-lake-id=\"u3cc206f5\" id=\"u3cc206f5\">首次有意义内容的渲染时间(例如：主要元素的渲染时间)</span></li></ol><h2 data-lake-id=\"EaHdU\" id=\"EaHdU\"><span data-lake-id=\"u4f861967\" id=\"u4f861967\">性能优化-根据类型</span></h2><h3 data-lake-id=\"gj5nn\" id=\"gj5nn\"><span data-lake-id=\"u83e4a71a\" id=\"u83e4a71a\">只获取 所需资源</span></h3><ol list=\"uea4ec1da\"><li fid=\"uce32a0f5\" data-lake-id=\"u6bbaf6b3\" id=\"u6bbaf6b3\"><span data-lake-id=\"u34b846c0\" id=\"u34b846c0\">异步加载路由</span></li><li fid=\"uce32a0f5\" data-lake-id=\"udaea8bb2\" id=\"udaea8bb2\"><span data-lake-id=\"ub8db7a9d\" id=\"ub8db7a9d\">图片的懒加载</span></li><li fid=\"uce32a0f5\" data-lake-id=\"u7a875c8e\" id=\"u7a875c8e\"><span data-lake-id=\"u2a0abb13\" id=\"u2a0abb13\">babel 的 polyfill(低版本下对高版本语法的补充)</span></li><li fid=\"uce32a0f5\" data-lake-id=\"u4699414f\" id=\"u4699414f\"><span data-lake-id=\"ub3f5f6d7\" id=\"ub3f5f6d7\">cdn 记载 polyfill 服务，可以实现对 polyfill 的按需加载</span></li></ol><h3 data-lake-id=\"mWn1V\" id=\"mWn1V\"><span data-lake-id=\"u6c55d629\" id=\"u6c55d629\">缩减资源体积</span></h3><ol list=\"uacee5fbe\"><li fid=\"ufdf2d35b\" data-lake-id=\"ud2bbff5b\" id=\"ud2bbff5b\"><span data-lake-id=\"u544dc4f0\" id=\"u544dc4f0\">打包压缩</span></li><li fid=\"ufdf2d35b\" data-lake-id=\"u72b7ff90\" id=\"u72b7ff90\"><span data-lake-id=\"u55e12399\" id=\"u55e12399\">gzip</span></li><li fid=\"ufdf2d35b\" data-lake-id=\"u014c5302\" id=\"u014c5302\"><span data-lake-id=\"u15788178\" id=\"u15788178\">图片格式的优化、压缩(base64、svg、小图 png、照片 jpeg)；根据屏幕分辨率展示不同分辨率图片；webp 图片格式的使用；</span></li><li fid=\"ufdf2d35b\" data-lake-id=\"u34c5e325\" id=\"u34c5e325\"><span data-lake-id=\"ucc0637f0\" id=\"ucc0637f0\">在请求头控制 cookie 大小</span></li></ol><h3 data-lake-id=\"tn4pe\" id=\"tn4pe\"><span data-lake-id=\"u06a14e63\" id=\"u06a14e63\">时序优化</span></h3><ol list=\"ue2278ebf\"><li fid=\"u506c7e17\" data-lake-id=\"u48c52dc8\" id=\"u48c52dc8\"><span data-lake-id=\"u588c0152\" id=\"u588c0152\">对于没有相互关联，没有依赖关系的请求，采用 Promise.all 并行请求</span></li><li fid=\"u506c7e17\" data-lake-id=\"u870dfb99\" id=\"u870dfb99\"><span data-lake-id=\"ubdb91934\" id=\"ubdb91934\">服务端渲染 ssr(在服务端打包，同时可以做缓存)</span></li><li fid=\"u506c7e17\" data-lake-id=\"ufd7867ee\" id=\"ufd7867ee\"><span data-lake-id=\"u97aa8754\" id=\"u97aa8754\">预解析 prefetch、预连接 preconnect、预加载 preload(利用 webpack 魔法注释：</span><code data-lake-id=\"u70223d6b\" id=\"u70223d6b\"><span data-lake-id=\"uda67447e\" id=\"uda67447e\">/* webpackPrefetch: true */</span></code><span data-lake-id=\"uf66d2175\" id=\"uf66d2175\">)</span></li></ol><ol list=\"ue2278ebf\" data-lake-indent=\"1\"><li fid=\"u506c7e17\" data-lake-id=\"ud5467737\" id=\"ud5467737\"><span data-lake-id=\"u4df6fe06\" id=\"u4df6fe06\">dns 预解析：</span><code data-lake-id=\"ued539cf0\" id=\"ued539cf0\"><span data-lake-id=\"udca1d6c0\" id=\"udca1d6c0\">&lt;link rel='dns-prefetch' href='xxx1.com' /&gt;</span></code></li><li fid=\"u506c7e17\" data-lake-id=\"uade047ba\" id=\"uade047ba\"><span data-lake-id=\"u9e43dc38\" id=\"u9e43dc38\">预连接：</span><code data-lake-id=\"ua9acad81\" id=\"ua9acad81\"><span data-lake-id=\"uee576661\" id=\"uee576661\">&lt;link rel='preconnect' href='xxx1.com' /&gt;</span></code></li><li fid=\"u506c7e17\" data-lake-id=\"u9f899b2a\" id=\"u9f899b2a\"><span data-lake-id=\"u595f7b57\" id=\"u595f7b57\">预加载 </span><code data-lake-id=\"u78e301ec\" id=\"u78e301ec\"><span data-lake-id=\"ua150ef7f\" id=\"ua150ef7f\">&lt;link rel='preload' as='image' href='https://xxx/a.png' /&gt;</span></code></li></ol><h3 data-lake-id=\"VjDti\" id=\"VjDti\"><span data-lake-id=\"ue9269717\" id=\"ue9269717\">合理利用缓存</span></h3><ol list=\"ue3fa6276\"><li fid=\"ua5aa8d9f\" data-lake-id=\"ubce52360\" id=\"ubce52360\"><span data-lake-id=\"uf1800775\" id=\"uf1800775\">cdn(源站和 cdn 服务器域名一般都是不同的，其中一个目的是为了缩减不必要的 cookie 携带)</span></li></ol><ol list=\"ue3fa6276\" data-lake-indent=\"1\"><li fid=\"ua5aa8d9f\" data-lake-id=\"u2322c9c0\" id=\"u2322c9c0\"><span data-lake-id=\"u462d1986\" id=\"u462d1986\">cdn 预热：cdn 厂家不通过用户的访问提前把源站的内容分发到不同的 cdn 节点上(大流量场景都需要做)</span></li><li fid=\"ua5aa8d9f\" data-lake-id=\"uc3b18623\" id=\"uc3b18623\"><span data-lake-id=\"uc5abba83\" id=\"uc5abba83\">cdn 刷新：源站刷新了，将会让 cdn 节点强制拉取源站的 cdn 文件</span></li></ol><h2 data-lake-id=\"ZRGfo\" id=\"ZRGfo\"><span data-lake-id=\"u9cf8f04a\" id=\"u9cf8f04a\">性能优化-根据优化方向</span></h2><h3 data-lake-id=\"U4pU7\" id=\"U4pU7\"><span data-lake-id=\"u5700d89d\" id=\"u5700d89d\">工程化方向</span></h3><ol list=\"u84d07fb4\"><li fid=\"ufb8b2ac6\" data-lake-id=\"u6f06b6b9\" id=\"u6f06b6b9\"><span data-lake-id=\"u7b7a2e9c\" id=\"u7b7a2e9c\">客户端 gzip 离线包、服务器资源 gzip 压缩</span></li><li fid=\"ufb8b2ac6\" data-lake-id=\"ua2476f3a\" id=\"ua2476f3a\"><span data-lake-id=\"u109c9a1c\" id=\"u109c9a1c\">es-module</span></li><li fid=\"ufb8b2ac6\" data-lake-id=\"u82c9bbe4\" id=\"u82c9bbe4\"><span data-lake-id=\"u936fd4f4\" id=\"u936fd4f4\">动态 Import</span></li><li fid=\"ufb8b2ac6\" data-lake-id=\"ub6d874ed\" id=\"ub6d874ed\"><span data-lake-id=\"u2d03bf9b\" id=\"u2d03bf9b\">动态 polyfill(利用 cdn)</span></li><li fid=\"ufb8b2ac6\" data-lake-id=\"uf673eb3f\" id=\"uf673eb3f\"><span data-lake-id=\"ua876f140\" id=\"ua876f140\">图片加载优化：webp、图片预加载、懒加载、客户端预渲染</span></li><li fid=\"ufb8b2ac6\" data-lake-id=\"u3073a5c9\" id=\"u3073a5c9\"><span data-lake-id=\"ua3b6e2d0\" id=\"ua3b6e2d0\">服务端渲染 ssr</span></li><li fid=\"ufb8b2ac6\" data-lake-id=\"u8de0275c\" id=\"u8de0275c\"><span data-lake-id=\"u37c80f86\" id=\"u37c80f86\">cdn 静态资源加速</span></li><li fid=\"ufb8b2ac6\" data-lake-id=\"ue6e001f8\" id=\"ue6e001f8\"><span data-lake-id=\"ue7907860\" id=\"ue7907860\">webpack 提供的优化：</span></li></ol><ol list=\"u84d07fb4\" data-lake-indent=\"1\"><li fid=\"ufb8b2ac6\" data-lake-id=\"ucff515c6\" id=\"ucff515c6\"><span data-lake-id=\"u3f5f58ef\" id=\"u3f5f58ef\">base64图片</span></li><li fid=\"ufb8b2ac6\" data-lake-id=\"ucc4986ae\" id=\"ucc4986ae\"><span data-lake-id=\"u9b3048f5\" id=\"u9b3048f5\">使用 tree-shaking 去除未使用的代码</span></li><li fid=\"ufb8b2ac6\" data-lake-id=\"u356e64f2\" id=\"u356e64f2\"><span data-lake-id=\"u51da4b42\" id=\"u51da4b42\">资源压缩</span></li><li fid=\"ufb8b2ac6\" data-lake-id=\"u8dae531d\" id=\"u8dae531d\"><span data-lake-id=\"u70cf8e34\" id=\"u70cf8e34\">分包策略 chunk</span></li><li fid=\"ufb8b2ac6\" data-lake-id=\"uce1bb998\" id=\"uce1bb998\"><span data-lake-id=\"ub10d5e23\" id=\"ub10d5e23\">webpack dll、通用方法优先打包抽离</span></li><li fid=\"ufb8b2ac6\" data-lake-id=\"ude61ba65\" id=\"ude61ba65\"><span data-lake-id=\"ud1969fe7\" id=\"ud1969fe7\">别名 alias 的使用</span></li></ol><ol list=\"u84d07fb4\" start=\"9\"><li fid=\"ufb8b2ac6\" data-lake-id=\"uf29f78a0\" id=\"uf29f78a0\"><span data-lake-id=\"u9ca7f645\" id=\"u9ca7f645\">浏览器缓存策略，service worker</span></li><li fid=\"ufb8b2ac6\" data-lake-id=\"u4f403a75\" id=\"u4f403a75\"><span data-lake-id=\"u0dc82ce2\" id=\"u0dc82ce2\">骨架图</span></li><li fid=\"ufb8b2ac6\" data-lake-id=\"u2c8ef9fd\" id=\"u2c8ef9fd\"><span data-lake-id=\"u4540da8d\" id=\"u4540da8d\">数据预存取：如接口缓存</span></li><li fid=\"ufb8b2ac6\" data-lake-id=\"uc942518b\" id=\"uc942518b\"><span data-lake-id=\"u95ab20a6\" id=\"u95ab20a6\">减少资源重定向</span></li><li fid=\"ufb8b2ac6\" data-lake-id=\"u68ece6ff\" id=\"u68ece6ff\"><span data-lake-id=\"ub4c096ba\" id=\"ub4c096ba\">nginx 负载均衡(可以提高响应速度)</span></li><li fid=\"ufb8b2ac6\" data-lake-id=\"u96313a78\" id=\"u96313a78\"><span data-lake-id=\"ua1dae661\" id=\"ua1dae661\">使用 http/2。因为解析速度快，拥有 header 压缩、多路复用、服务器推送静态资源等功能</span></li><li fid=\"ufb8b2ac6\" data-lake-id=\"u007e2b12\" id=\"u007e2b12\"><span data-lake-id=\"u1a39c4d4\" id=\"u1a39c4d4\">oss(对象存储。海量、安全、低成本、高可靠的云存储服务) + cdn(内容分发网络)</span></li></ol><h3 data-lake-id=\"NFPU2\" id=\"NFPU2\"><span data-lake-id=\"u3a5ee8ff\" id=\"u3a5ee8ff\">开发细节方向</span></h3><ol list=\"u815a7630\"><li fid=\"u84a9a477\" data-lake-id=\"u7cf0a9d2\" id=\"u7cf0a9d2\"><span data-lake-id=\"u9e38ced4\" id=\"u9e38ced4\">图片：占位图、雪碧图(css 精灵)</span></li><li fid=\"u84a9a477\" data-lake-id=\"u69017405\" id=\"u69017405\"><span data-lake-id=\"u363008f7\" id=\"u363008f7\">prefetch/preload 预加载</span></li><li fid=\"u84a9a477\" data-lake-id=\"ub7963028\" id=\"ub7963028\"><span data-lake-id=\"ue5a12a11\" id=\"ue5a12a11\">defer/async：defer </span><code data-lake-id=\"u11baa90f\" id=\"u11baa90f\"><span data-lake-id=\"u919b73ad\" id=\"u919b73ad\">=&gt;</span></code><span data-lake-id=\"u8a6a02e2\" id=\"u8a6a02e2\"> 所有资源加载完之后执行 js；async </span><code data-lake-id=\"ufd18b328\" id=\"ufd18b328\"><span data-lake-id=\"u460cd3b1\" id=\"u460cd3b1\">=&gt;</span></code><span data-lake-id=\"ue04ba8c2\" id=\"ue04ba8c2\"> 加载完 js 立即执行</span></li><li fid=\"u84a9a477\" data-lake-id=\"u11e31466\" id=\"u11e31466\"><span data-lake-id=\"u10974dee\" id=\"u10974dee\">减少 dom 操作，减少重排重绘</span></li><li fid=\"u84a9a477\" data-lake-id=\"u68fa3cfc\" id=\"u68fa3cfc\"><span data-lake-id=\"u06126454\" id=\"u06126454\">在客户端层面，首屏减少和客户端交互，合并接口请求</span></li><li fid=\"u84a9a477\" data-lake-id=\"ue8388827\" id=\"ue8388827\"><span data-lake-id=\"u2ee198d2\" id=\"u2ee198d2\">首页不加载不可视组件</span></li><li fid=\"u84a9a477\" data-lake-id=\"u79a7f0e8\" id=\"u79a7f0e8\"><span data-lake-id=\"uc7ededa5\" id=\"uc7ededa5\">防止渲染抖动，控制加载时序</span></li><li fid=\"u84a9a477\" data-lake-id=\"u77891e4a\" id=\"u77891e4a\"><span data-lake-id=\"uf227ff3c\" id=\"uf227ff3c\">减少组件层级</span></li><li fid=\"u84a9a477\" data-lake-id=\"u8d6b569a\" id=\"u8d6b569a\"><span data-lake-id=\"ud76b8dc1\" id=\"ud76b8dc1\">优先使用弹性布局</span></li></ol><h2 data-lake-id=\"EIl1N\" id=\"EIl1N\"><span data-lake-id=\"u6ec5122a\" id=\"u6ec5122a\">解决卡顿问题</span></h2><ol list=\"u19e10165\"><li fid=\"u0613061d\" data-lake-id=\"u849a1cae\" id=\"u849a1cae\"><span data-lake-id=\"u54cd25c3\" id=\"u54cd25c3\">css 动画效率比 js 高，css 可以使用 gpu 加速，3d 加速。如果非要用 js 动画，可以使用 requestAnimationFrame</span></li><li fid=\"u0613061d\" data-lake-id=\"ud00456f8\" id=\"ud00456f8\"><span data-lake-id=\"u71455347\" id=\"u71455347\">批量进行 dom 操作，固定图片容器大小，避免屏幕抖动</span></li><li fid=\"u0613061d\" data-lake-id=\"u741077ad\" id=\"u741077ad\"><span data-lake-id=\"ubb22c0ff\" id=\"ubb22c0ff\">减少重排重绘</span></li><li fid=\"u0613061d\" data-lake-id=\"uc0e89708\" id=\"uc0e89708\"><span data-lake-id=\"u53839247\" id=\"u53839247\">防抖和节流</span></li><li fid=\"u0613061d\" data-lake-id=\"u25d21381\" id=\"u25d21381\"><span data-lake-id=\"u98bd8b85\" id=\"u98bd8b85\">减少临时大对象的产生，利用对象缓存，主要是减少垃圾回收时产生过多的内存碎片</span></li><li fid=\"u0613061d\" data-lake-id=\"u24af4eba\" id=\"u24af4eba\"><span data-lake-id=\"uf8768535\" id=\"uf8768535\">异步操作：IntersectionObserver、PostMessage、RequestIdleCallback</span></li></ol><h2 data-lake-id=\"KzSBK\" id=\"KzSBK\"><span data-lake-id=\"uf2a05980\" id=\"uf2a05980\">性能优化 api</span></h2><ol list=\"u9fbb3408\"><li fid=\"u07e2953b\" data-lake-id=\"u3031811e\" id=\"u3031811e\"><span data-lake-id=\"u53153d7d\" id=\"u53153d7d\">Performance。performance.now() 与 new Date() 是有区别的，它是高精度的，且是相对时间，相对于页面加载的那一刻。但是不一定适合单页面场景。</span></li><li fid=\"u07e2953b\" data-lake-id=\"u9d6c72af\" id=\"u9d6c72af\"><code data-lake-id=\"u72489db1\" id=\"u72489db1\"><span data-lake-id=\"u63445a7e\" id=\"u63445a7e\">window.addEventListener('load', '')</span></code><span data-lake-id=\"ufa7b3d69\" id=\"ufa7b3d69\">；</span><code data-lake-id=\"ua3f41a61\" id=\"ua3f41a61\"><span data-lake-id=\"uaf09c766\" id=\"uaf09c766\">window.addEventListener('domContentLoaded', '')</span></code></li><li fid=\"u07e2953b\" data-lake-id=\"u1cf53706\" id=\"u1cf53706\"><span data-lake-id=\"udc191b43\" id=\"udc191b43\">img 的 onload 事件，监听首屏内的图片是否加载完成，判断首屏事件</span></li><li fid=\"u07e2953b\" data-lake-id=\"u61f9b916\" id=\"u61f9b916\"><span data-lake-id=\"uf2e982e2\" id=\"uf2e982e2\">requestAnimationFrame 和 requestIdleCallback</span></li><li fid=\"u07e2953b\" data-lake-id=\"u96a883a8\" id=\"u96a883a8\"><span data-lake-id=\"u9d8eea6a\" id=\"u9d8eea6a\">IntersectionObserver、MutationObserver、PostMessage</span></li><li fid=\"u07e2953b\" data-lake-id=\"ube3f60e5\" id=\"ube3f60e5\"><span data-lake-id=\"u9b9fd0b8\" id=\"u9b9fd0b8\">web worker，耗时任务放在里面执行</span></li></ol><p data-lake-id=\"u1437da14\" id=\"u1437da14\"><br></p>",
  "body_draft_lake": "",
  "public": 0,
  "status": 1,
  "view_status": 0,
  "read_status": 1,
  "likes_count": 0,
  "comments_count": 0,
  "content_updated_at": "2022-04-04T11:33:18.000Z",
  "deleted_at": null,
  "created_at": "2022-04-04T11:33:18.000Z",
  "updated_at": "2022-05-10T15:12:38.000Z",
  "published_at": "2022-04-04T11:33:18.000Z",
  "first_published_at": "2022-04-04T11:33:18.117Z",
  "word_count": 1041,
  "cover": null,
  "description": "性能优化的目的：哪些指标影响了业务，则对应指标就是优化的关键点常见的性能优化关键点首屏渲染时间首次可交互时间(例如：手机验证码的获取)首次有意义内容的渲染时间(例如：主要元素的渲染时间)性能优化-根据类型只获取 所需资源异步加载路由图片的懒加载babel 的 polyfill(低版本下对高版本...",
  "custom_description": null,
  "hits": 0,
  "_serializer": "v2.doc_detail"
}