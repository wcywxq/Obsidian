{
  "id": 72212110,
  "slug": "oagu14",
  "title": "生命周期相关问题",
  "book_id": 26225124,
  "book": {
    "id": 26225124,
    "type": "Book",
    "slug": "mxunh7",
    "name": "八股文 eight-part essay writing",
    "user_id": 732231,
    "description": "前端八股文",
    "creator_id": 732231,
    "public": 0,
    "items_count": 239,
    "likes_count": 0,
    "watches_count": 1,
    "content_updated_at": "2023-11-11T18:15:57.023Z",
    "updated_at": "2023-11-11T18:15:57.000Z",
    "created_at": "2022-04-04T11:31:45.000Z",
    "namespace": "wcywxq/mxunh7",
    "user": {
      "id": 732231,
      "type": "User",
      "login": "wcywxq",
      "name": "magic",
      "description": null,
      "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/732231/1606968271774-avatar/886ad88b-d2cc-4c9e-a674-f70eb51a679c.png",
      "books_count": 18,
      "public_books_count": 0,
      "followers_count": 0,
      "following_count": 0,
      "created_at": "2020-01-08T14:21:31.000Z",
      "updated_at": "2023-11-13T09:32:35.000Z",
      "_serializer": "v2.user"
    },
    "_serializer": "v2.book"
  },
  "user_id": 732231,
  "creator": {
    "id": 732231,
    "type": "User",
    "login": "wcywxq",
    "name": "magic",
    "description": null,
    "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/732231/1606968271774-avatar/886ad88b-d2cc-4c9e-a674-f70eb51a679c.png",
    "books_count": 18,
    "public_books_count": 0,
    "followers_count": 0,
    "following_count": 0,
    "created_at": "2020-01-08T14:21:31.000Z",
    "updated_at": "2023-11-13T09:32:35.000Z",
    "_serializer": "v2.user"
  },
  "format": "lake",
  "body": "<a name=\"EPmJD\"></a>\n## 生命周期\n- beforeCreate\n- created\n- beforeMount\n- mounted\n- beforeUpdate\n- updated\n- beforeDestory\n- destoryed\n- actived(keep-alive)\n- deactived(keep-alive)\n- errorCaptured\n\n1. beforeCreate: new Vue()之后触发的第一个钩子, data、methods、computed 以及 watch 上的数据和方法都不能被访问。\n2. created: 当前阶段已经完成了数据观测，可以使用数据，更改数据，在这里更改数据不会触发 updated 函数。可以做一些初始数据的获取，在当前阶段无法与 Dom 进行交互，如果非要想，可以通过 vm.$nextTick 来访问 Dom。\n3. beforeMount 发生在挂载之前，在这之前 template 模板已导入渲染函数编译。而当前阶段虚拟 Dom 已经创建完成，即将开始渲染。在此时也可以对数据进行更改，不会触发 updated。\n4. mounted: 真实的 Dom 挂载完毕，数据完成双向绑定，可以访问到 Dom 节点，使用 $refs 属性对 Dom 进行操作。\n5. beforeUpdate: 也就是响应式数据发生更新，虚拟 dom 重新渲染之前被触发，可以在当前阶段进行更改数据，不会造成重渲染。\n6. updated: 当前阶段组件 Dom 已完成更新。要注意的是避免在此期间更改数据，因为这可能会导致无限循环的更新。\n7. beforeDestroy: 在当前阶段实例完全可以被使用，我们可以在这时进行善后收尾工作，比如清除计时器。\n8. destroyed: 这个时候只剩下了 dom 空壳。组件已被拆解，数据绑定被卸除，监听被移出，子实例也统统被销毁。\n<a name=\"SIEHu\"></a>\n## 父子组件生命周期调用顺序\n\n- 加载渲染过程<br />父 beforeCreate => 父 created => 父 beforeMount => 子 beforeCreate => 子 created => 子 beforeMount => 子 mounted => 父 mounted\n- 子组件更新流程<br />父 beforeUpdate => 子 beforeUpdate => 子 updated => 父 updated\n- 父组件更新流程<br />父 beforeUpdate => 父 updated\n- 销毁过程<br />父 beforeDestory => 子 beforeDestory => 子 destoryed => 父 destoryed\n:::info\n理解: 组件调用顺序都是先父后子，渲染完成的顺序是先子后父，组件销毁的操作是先父后子，销毁完成的顺序是先子后父\n:::\n",
  "body_draft": "",
  "body_html": "<!doctype html><h2 id=\"EPmJD\"><span>生命周期</span></h2><ul><li><span>beforeCreate</span></li><li><span>created</span></li><li><span>beforeMount</span></li><li><span>mounted</span></li><li><span>beforeUpdate</span></li><li><span>updated</span></li><li><span>beforeDestory</span></li><li><span>destoryed</span></li><li><span>actived(keep-alive)</span></li><li><span>deactived(keep-alive)</span></li><li><span>errorCaptured</span></li></ul><p data-lake-id=\"uf3e4c5e3\"><span>​</span><br /></p><ol><li><span>beforeCreate: new Vue()之后触发的第一个钩子, data、methods、computed 以及 watch 上的数据和方法都不能被访问。</span></li><li><span>created: 当前阶段已经完成了数据观测，可以使用数据，更改数据，在这里更改数据不会触发 updated 函数。可以做一些初始数据的获取，在当前阶段无法与 Dom 进行交互，如果非要想，可以通过 vm.$nextTick 来访问 Dom。</span></li><li><span>beforeMount 发生在挂载之前，在这之前 template 模板已导入渲染函数编译。而当前阶段虚拟 Dom 已经创建完成，即将开始渲染。在此时也可以对数据进行更改，不会触发 updated。</span></li><li><span>mounted: 真实的 Dom 挂载完毕，数据完成双向绑定，可以访问到 Dom 节点，使用 $refs 属性对 Dom 进行操作。</span></li><li><span>beforeUpdate: 也就是响应式数据发生更新，虚拟 dom 重新渲染之前被触发，可以在当前阶段进行更改数据，不会造成重渲染。</span></li><li><span>updated: 当前阶段组件 Dom 已完成更新。要注意的是避免在此期间更改数据，因为这可能会导致无限循环的更新。</span></li><li><span>beforeDestroy: 在当前阶段实例完全可以被使用，我们可以在这时进行善后收尾工作，比如清除计时器。</span></li><li><span>destroyed: 这个时候只剩下了 dom 空壳。组件已被拆解，数据绑定被卸除，监听被移出，子实例也统统被销毁。</span></li></ol><h2 id=\"SIEHu\"><span>父子组件生命周期调用顺序</span></h2><ul><li><span>加载渲染过程<br /></span><span>父 beforeCreate =&gt; 父 created =&gt; 父 beforeMount =&gt; 子 beforeCreate =&gt; 子 created =&gt; 子 beforeMount =&gt; 子 mounted =&gt; 父 mounted</span></li><li><span>子组件更新流程<br /></span><span>父 beforeUpdate =&gt; 子 beforeUpdate =&gt; 子 updated =&gt; 父 updated</span></li><li><span>父组件更新流程<br /></span><span>父 beforeUpdate =&gt; 父 updated</span></li><li><span>销毁过程<br /></span><span>父 beforeDestory =&gt; 子 beforeDestory =&gt; 子 destoryed =&gt; 父 destoryed</span></li></ul><blockquote class=\"lake-alert lake-alert-info\"><p data-lake-id=\"u81dc7d13\"><span>理解: 组件调用顺序都是先父后子，渲染完成的顺序是先子后父，组件销毁的操作是先父后子，销毁完成的顺序是先子后父</span></p></blockquote>",
  "body_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"viewport\" content=\"adapt\" /><h2 data-lake-id=\"EPmJD\" id=\"EPmJD\"><span data-lake-id=\"u45e93b56\" id=\"u45e93b56\">生命周期</span></h2><ul list=\"u1dcff32e\"><li fid=\"u343da077\" data-lake-id=\"u53d861c1\" id=\"u53d861c1\"><span data-lake-id=\"u0545da3d\" id=\"u0545da3d\">beforeCreate</span></li><li fid=\"u343da077\" data-lake-id=\"uf6692e2c\" id=\"uf6692e2c\"><span data-lake-id=\"u6ffea66b\" id=\"u6ffea66b\">created</span></li><li fid=\"u343da077\" data-lake-id=\"ud5a46d90\" id=\"ud5a46d90\"><span data-lake-id=\"ub96b7812\" id=\"ub96b7812\">beforeMount</span></li><li fid=\"u343da077\" data-lake-id=\"uc276dece\" id=\"uc276dece\"><span data-lake-id=\"u60fb130a\" id=\"u60fb130a\">mounted</span></li><li fid=\"u343da077\" data-lake-id=\"u7278820b\" id=\"u7278820b\"><span data-lake-id=\"udc7c34eb\" id=\"udc7c34eb\">beforeUpdate</span></li><li fid=\"u343da077\" data-lake-id=\"u935b0e84\" id=\"u935b0e84\"><span data-lake-id=\"ue038383d\" id=\"ue038383d\">updated</span></li><li fid=\"u343da077\" data-lake-id=\"u8917b390\" id=\"u8917b390\"><span data-lake-id=\"udcfb2301\" id=\"udcfb2301\">beforeDestory</span></li><li fid=\"u343da077\" data-lake-id=\"u41c7a232\" id=\"u41c7a232\"><span data-lake-id=\"u8b5d0095\" id=\"u8b5d0095\">destoryed</span></li><li fid=\"u343da077\" data-lake-id=\"ua06aa269\" id=\"ua06aa269\"><span data-lake-id=\"u9ad8a26f\" id=\"u9ad8a26f\">actived(keep-alive)</span></li><li fid=\"u343da077\" data-lake-id=\"uf249c4e2\" id=\"uf249c4e2\"><span data-lake-id=\"ue65b79c8\" id=\"ue65b79c8\">deactived(keep-alive)</span></li><li fid=\"u343da077\" data-lake-id=\"ua0a24b1c\" id=\"ua0a24b1c\"><span data-lake-id=\"u67fda9d3\" id=\"u67fda9d3\">errorCaptured</span></li></ul><p data-lake-id=\"uf3e4c5e3\" id=\"uf3e4c5e3\"><span data-lake-id=\"ud8aff1ef\" id=\"ud8aff1ef\">​</span><br></p><ol list=\"u3171984c\"><li fid=\"u0c1bc178\" data-lake-id=\"uf74e9900\" id=\"uf74e9900\"><span data-lake-id=\"u0d4026b9\" id=\"u0d4026b9\">beforeCreate: new Vue()之后触发的第一个钩子, data、methods、computed 以及 watch 上的数据和方法都不能被访问。</span></li><li fid=\"u0c1bc178\" data-lake-id=\"u9b98ecf3\" id=\"u9b98ecf3\"><span data-lake-id=\"u30b54452\" id=\"u30b54452\">created: 当前阶段已经完成了数据观测，可以使用数据，更改数据，在这里更改数据不会触发 updated 函数。可以做一些初始数据的获取，在当前阶段无法与 Dom 进行交互，如果非要想，可以通过 vm.$nextTick 来访问 Dom。</span></li><li fid=\"u0c1bc178\" data-lake-id=\"u09a07180\" id=\"u09a07180\"><span data-lake-id=\"u97d483bd\" id=\"u97d483bd\">beforeMount 发生在挂载之前，在这之前 template 模板已导入渲染函数编译。而当前阶段虚拟 Dom 已经创建完成，即将开始渲染。在此时也可以对数据进行更改，不会触发 updated。</span></li><li fid=\"u0c1bc178\" data-lake-id=\"u28229a4c\" id=\"u28229a4c\"><span data-lake-id=\"ue88d4924\" id=\"ue88d4924\">mounted: 真实的 Dom 挂载完毕，数据完成双向绑定，可以访问到 Dom 节点，使用 $refs 属性对 Dom 进行操作。</span></li><li fid=\"u0c1bc178\" data-lake-id=\"u7d19f6fb\" id=\"u7d19f6fb\"><span data-lake-id=\"ub441a377\" id=\"ub441a377\">beforeUpdate: 也就是响应式数据发生更新，虚拟 dom 重新渲染之前被触发，可以在当前阶段进行更改数据，不会造成重渲染。</span></li><li fid=\"u0c1bc178\" data-lake-id=\"u631cf6a6\" id=\"u631cf6a6\"><span data-lake-id=\"ucf3dd32d\" id=\"ucf3dd32d\">updated: 当前阶段组件 Dom 已完成更新。要注意的是避免在此期间更改数据，因为这可能会导致无限循环的更新。</span></li><li fid=\"u0c1bc178\" data-lake-id=\"u22ab76fd\" id=\"u22ab76fd\"><span data-lake-id=\"u0643b647\" id=\"u0643b647\">beforeDestroy: 在当前阶段实例完全可以被使用，我们可以在这时进行善后收尾工作，比如清除计时器。</span></li><li fid=\"u0c1bc178\" data-lake-id=\"ub948e020\" id=\"ub948e020\"><span data-lake-id=\"uc72b5874\" id=\"uc72b5874\">destroyed: 这个时候只剩下了 dom 空壳。组件已被拆解，数据绑定被卸除，监听被移出，子实例也统统被销毁。</span></li></ol><h2 data-lake-id=\"SIEHu\" id=\"SIEHu\"><span data-lake-id=\"u77143209\" id=\"u77143209\">父子组件生命周期调用顺序</span></h2><ul list=\"uc5166541\"><li fid=\"u4b7f4d51\" data-lake-id=\"u809796d4\" id=\"u809796d4\"><span data-lake-id=\"u2991f499\" id=\"u2991f499\">加载渲染过程<br /></span><span data-lake-id=\"u821c010c\" id=\"u821c010c\">父 beforeCreate =&gt; 父 created =&gt; 父 beforeMount =&gt; 子 beforeCreate =&gt; 子 created =&gt; 子 beforeMount =&gt; 子 mounted =&gt; 父 mounted</span></li><li fid=\"u4b7f4d51\" data-lake-id=\"ub464b27a\" id=\"ub464b27a\"><span data-lake-id=\"u1428aef5\" id=\"u1428aef5\">子组件更新流程<br /></span><span data-lake-id=\"ue3c62feb\" id=\"ue3c62feb\">父 beforeUpdate =&gt; 子 beforeUpdate =&gt; 子 updated =&gt; 父 updated</span></li><li fid=\"u4b7f4d51\" data-lake-id=\"ue418d04f\" id=\"ue418d04f\"><span data-lake-id=\"ua2931684\" id=\"ua2931684\">父组件更新流程<br /></span><span data-lake-id=\"u02e1bd5c\" id=\"u02e1bd5c\">父 beforeUpdate =&gt; 父 updated</span></li><li fid=\"u4b7f4d51\" data-lake-id=\"u0609978e\" id=\"u0609978e\"><span data-lake-id=\"u6d0a1e90\" id=\"u6d0a1e90\">销毁过程<br /></span><span data-lake-id=\"u68c470ff\" id=\"u68c470ff\">父 beforeDestory =&gt; 子 beforeDestory =&gt; 子 destoryed =&gt; 父 destoryed</span></li></ul><blockquote data-lake-id=\"u74a2c1c8\" id=\"u74a2c1c8\" class=\"lake-alert lake-alert-info\"><p data-lake-id=\"u81dc7d13\" id=\"u81dc7d13\"><span data-lake-id=\"u16833dfe\" id=\"u16833dfe\">理解: 组件调用顺序都是先父后子，渲染完成的顺序是先子后父，组件销毁的操作是先父后子，销毁完成的顺序是先子后父</span></p></blockquote>",
  "body_draft_lake": "",
  "public": 0,
  "status": 1,
  "view_status": 0,
  "read_status": 1,
  "likes_count": 0,
  "comments_count": 0,
  "content_updated_at": "2022-04-04T11:33:05.000Z",
  "deleted_at": null,
  "created_at": "2022-04-04T11:33:05.000Z",
  "updated_at": "2022-05-10T15:12:40.000Z",
  "published_at": "2022-04-04T11:33:05.000Z",
  "first_published_at": "2022-04-04T11:33:04.697Z",
  "word_count": 563,
  "cover": null,
  "description": "生命周期beforeCreatecreatedbeforeMountmountedbeforeUpdateupdatedbeforeDestorydestoryedactived(keep-alive)deactived(keep-alive)errorCapturedbeforeCreate...",
  "custom_description": null,
  "hits": 0,
  "_serializer": "v2.doc_detail"
}