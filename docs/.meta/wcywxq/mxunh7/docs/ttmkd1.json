{
  "id": 72212054,
  "slug": "ttmkd1",
  "title": "生命周期",
  "book_id": 26225124,
  "book": {
    "id": 26225124,
    "type": "Book",
    "slug": "mxunh7",
    "name": "八股文 eight-part essay writing",
    "user_id": 732231,
    "description": "前端八股文",
    "creator_id": 732231,
    "public": 0,
    "items_count": 239,
    "likes_count": 0,
    "watches_count": 1,
    "content_updated_at": "2023-11-11T18:15:57.023Z",
    "updated_at": "2023-11-11T18:15:57.000Z",
    "created_at": "2022-04-04T11:31:45.000Z",
    "namespace": "wcywxq/mxunh7",
    "user": {
      "id": 732231,
      "type": "User",
      "login": "wcywxq",
      "name": "magic",
      "description": null,
      "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/732231/1606968271774-avatar/886ad88b-d2cc-4c9e-a674-f70eb51a679c.png",
      "books_count": 18,
      "public_books_count": 0,
      "followers_count": 0,
      "following_count": 0,
      "created_at": "2020-01-08T14:21:31.000Z",
      "updated_at": "2023-11-13T09:32:35.000Z",
      "_serializer": "v2.user"
    },
    "_serializer": "v2.book"
  },
  "user_id": 732231,
  "creator": {
    "id": 732231,
    "type": "User",
    "login": "wcywxq",
    "name": "magic",
    "description": null,
    "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/732231/1606968271774-avatar/886ad88b-d2cc-4c9e-a674-f70eb51a679c.png",
    "books_count": 18,
    "public_books_count": 0,
    "followers_count": 0,
    "following_count": 0,
    "created_at": "2020-01-08T14:21:31.000Z",
    "updated_at": "2023-11-13T09:32:35.000Z",
    "_serializer": "v2.user"
  },
  "format": "lake",
  "body": "<a name=\"D1A6O\"></a>\n## 官方图解\n![image.png](https://cdn.nlark.com/yuque/0/2022/png/732231/1646657266595-d9e4c515-733d-4d3c-ba45-eb78b06b74a5.png#clientId=ubaa79684-21e9-4&from=paste&height=376&id=u69651ec0&originHeight=752&originWidth=1225&originalType=binary&ratio=1&rotation=0&showTitle=false&size=102914&status=done&style=none&taskId=ueca6a312-f0de-49b0-9386-7c99569eb0c&title=&width=612.5)\n\n:::info\n**执行过程：**\n\n- 挂载阶段，首先执行 `constructor` 构造方法，来创建组件\n- 创建完成之后，就会执行 `render` 方法，该方法会返回需要渲染的内容\n- 随后，`React` 会将需要渲染的内容挂载到 `DOM` 树上\n- 挂载完成之后就会执行 `componentDidMount` 生命周期函数\n- 如果我们给组件创建一个 `props`（用于组件通信）、调用 `setState`（更改 `state` 中的数据）、调用 `forceUpdate`（强制更新组件）时，都会重新调用 `render` 函数\n- `render` 函数重新执行之后，就会重新进行 `DOM` 树的挂载\n- 挂载完成之后就会执行 `componentDidUpdate` 生命周期函数\n- 当移除组件时，就会执行 `componentWillUnmount` 生命周期函数\n:::\n<a name=\"U61d0\"></a>\n## 挂载阶段\n\n- **constructor**\n\n组件状态的初始化，用来读取初始 `state` 和 `props` 以及绑定 `this` 上下文。通常只会在初始化时运行一次\n\n- **static getDerivedStateFromProps **不常用\n\n会在调用 `render` 方法之前调用，并且在初始挂载及后续更新时都会被调用。它应返回一个对象来更新 `state`，如果返回 `null` 则不更新任何内容。\n:::info\n此方法配合 `componentDidUpdate` 使用，可以覆盖 `componentWillReceiveProps` 所有用法\n:::\n\n- **render**\n\n该方法是 `class` 组件中唯一必须实现的方法，同时 `render` 应该为纯函数。当 `render` 被调用时，它会检查 `this.props` 和 `this.state` 的变化并返回相应的渲染内容\n\n- **componentDidMount**\n\n会在组件挂载后(插入 `DOM` 树中)立即调用\n:::info\n如果在该生命周期直接调用 `setState`，将会触发额外渲染，但此渲染会发生在浏览器更新屏幕之前\n:::\n\n:::warning\n**注意：下述生命周期方法即将过时，在新代码中应该避免使用它们**\n\n- [UNSAFE_componentWillMount](https://zh-hans.reactjs.org/docs/react-component.html#unsafe_componentwillmount)：该生命周期会在 render 之前调用(如果在此调用 `setState`，将不会触发重渲染，而是进行 `state` 合并)，所以此时的 `state` 不是最新的，在 `render` 中才可以获取更新后的 `state`\n:::\n<a name=\"XRZyT\"></a>\n## 更新阶段\n\n- **static getDerivedStateFromProps **不常用\n\n会在调用 `render` 方法之前调用，并且在初始挂载及后续更新时都会被调用。它应返回一个对象来更新 `state`，如果返回 `null` 则不更新任何内容。\n:::info\n此方法配合 `componentDidUpdate` 使用，可以覆盖 `componentWillReceiveProps` 所有用法\n:::\n\n- **shouldComponentUpdate**\n\n返回一个布尔值，用来判断使用触发重渲染\n:::info\n此方法仅作为性能优化的方式而存在。尽量使用 `PureComponent` 组件，而不是手动编写 `shouldComponentUpdate`，因为 `PureComponent` 会对 `props` 和 `state` 进行浅层比较\n:::\n\n- **render**\n\n在更新阶段也会触发此生命周期\n\n- **getSnapshotBeforeUpdate **不常用\n\n会在最近一次渲染输出(提交到 `DOM` 节点)之前调用。它会在组件发生更改之前从 `DOM` 中捕获一些信息(如：滚动位置)。此生命周期方法的任何返回值都将作为参数传递给 `componentDidUpdate`\n:::info\n返回值会作为 `componentDidUpdate` 的第三个参数\n:::\n\n- **componentDidUpdate**\n\n会在更新后被立即调用，首次渲染将不会执行此方法。当组件更新后，可以在此处对 `DOM` 进行操作。如果对更新前后的 `props` 进行了比较，那么可以选择在此处进行网络请求\n:::warning\n\n- 可以在该生命周期中直接调用 `setState`，但 `setState` 必须被包裹在一个条件语句中，否则会导致死循环\n- 如果 `shouldComponentUpdate` 返回值为 `false`，将不会调用 `componentDidUpdate`\n:::\n<br />\n:::warning\n**注意：下述方法即将过时，在新代码中应该避免使用它们**\n\n- [UNSAFE_componentWillUpdate](https://zh-hans.reactjs.org/docs/react-component.html#unsafe_componentwillupdate)\n- [UNSAFE_componentWillReceiveProps](https://zh-hans.reactjs.org/docs/react-component.html#unsafe_componentwillreceiveprops)\n:::\n<a name=\"slP8w\"></a>\n## 卸载阶段\n\n- **componentWillUnmount**\n\n会在组件卸载及销毁之前直接调用。通常在此方法中执行必要的清理操作，如清理定时器、取消网络请求、清除在 `componentDidMount` 中创建的订阅等\n:::warning\n`componentWillUnmount` 中不应该调用 `setState`，因为该组件将永远不会重新渲染。组件实例卸载后，将永远不会再挂载它。\n:::\n<a name=\"UsgfN\"></a>\n## 错误处理\n当渲染过程，生命周期，或子组件的构造函数中抛出错误时，会调用如下方法：\n\n- **static getDerivedStateFromError**\n\n此生命周期会在后代组件中抛出错误后被调用。它将抛出的错误作为参数，并返回一个值以更新 state\n```jsx\nclass ErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError(error) {\n    // 更新 state 使下一次渲染可以显降级 UI\n    return { hasError: true };\n  }\n\n  render() {\n    if (this.state.hasError) {\n      // 你可以渲染任何自定义的降级  UI\n      return <h1>Something went wrong.</h1>;\n    }\n\n    return this.props.children;\n  }\n}\n```\n:::warning\n**注意：**`getDerivedStateFromError` 会在渲染阶段调用，因此**不允许执行副作用**。 如遇此类情况，请改用 `componentDidCatch`\n:::\n\n- **componentDidCatch**\n\n此生命周期在后代组件抛出错误后被调用。它接收两个参数：`error`(抛出的错误)，`info`(带有 `componentStack key` 的对象，其中包含有关组件引发错误的栈信息)。`componentDidCatch` 会在 “提交” 阶段被调用，因此**允许执行副作用**。通常用于记录错误之类的情况\n```jsx\nclass ErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError(error) {\n    // 更新 state 使下一次渲染可以显示降级 UI\n    return { hasError: true };\n  }\n\n  componentDidCatch(error, info) {\n    // \"组件堆栈\" 例子:\n    //   in ComponentThatThrows (created by App)\n    //   in ErrorBoundary (created by App)\n    //   in div (created by App)\n    //   in App\n    logComponentStackToMyService(info.componentStack);\n  }\n\n  render() {\n    if (this.state.hasError) {\n      // 你可以渲染任何自定义的降级 UI\n      return <h1>Something went wrong.</h1>;\n    }\n\n    return this.props.children;\n  }\n}\n```\n**在开发模式下，错误会冒泡至 window**。这意味着任何 `window.onerror` 或 `window.addEventListener('error', callback)` 会中断这些已经被 `componentDidCatch` 捕获的错误。<br />**在生产模式下，错误不会冒泡**。这意味着任何根错误处理器只会接受那些没有显示地被 `componentDidCatch` 捕获的错误\n:::warning\n**注意：**如果发生错误，可以通过调用 `setState` 使用 `componentDidCatch` 渲染降级 `UI`，但在未来的版本中将不推荐这样做。可以使用静态方法 `getDerivedStateFromError` 来处理降级渲染\n:::\n<a name=\"sHTVD\"></a>\n## 总结\n![image.png](https://cdn.nlark.com/yuque/0/2022/png/732231/1646657220993-91518caa-70c1-4b94-bbe2-0736dcc4103f.png#clientId=ubaa79684-21e9-4&from=paste&height=385&id=xy4vz&originHeight=770&originWidth=850&originalType=binary&ratio=1&rotation=0&showTitle=false&size=97736&status=done&style=none&taskId=u541cfc9b-4590-4962-bcad-4df6526427f&title=&width=425)\n<a name=\"sBapQ\"></a>\n### 不能使用 setState 的生命周期\n![image.png](https://cdn.nlark.com/yuque/0/2022/png/732231/1646657408225-53c606d8-ddbb-4f56-a3f4-f56c6bd896c3.png#clientId=ubaa79684-21e9-4&from=paste&height=409&id=u6da471ae&originHeight=818&originWidth=1304&originalType=binary&ratio=1&rotation=0&showTitle=false&size=302728&status=done&style=none&taskId=ue9bebb71-ad98-46dd-990b-8cd004700ee&title=&width=652)\n:::warning\n其中打 **❌ **的是不能使用 setState 的，打 ✅ 的是能用 setState 的\n:::\n<a name=\"t7fn1\"></a>\n### state 触发更新的生命周期\n\n1. `shouldComponentUpdate`\n2. `componentWillUpdate`\n3. `componentDidUpdate`\n<a name=\"rMqtD\"></a>\n### props 触发更新的生命周期\n\n1. `shouldComponentUpdate`\n2. `componentWillUpdate`\n3. `componentDidUpdate`\n4. `static componentWillReceiveProps`\n",
  "body_draft": "",
  "body_html": "<!doctype html><div class=\"lake-content\" typography=\"classic\"><h2 id=\"D1A6O\"><span class=\"ne-text\">官方图解</span></h2><p id=\"uf7ccd023\" class=\"ne-p\"><img src=\"https://cdn.nlark.com/yuque/0/2022/png/732231/1646657266595-d9e4c515-733d-4d3c-ba45-eb78b06b74a5.png\" width=\"612.5\" id=\"u69651ec0\" class=\"ne-image\"></p><p id=\"uf42319fb\" class=\"ne-p\"><br></p><div data-type=\"info\" class=\"ne-alert\"><p id=\"u021c7b9a\" class=\"ne-p\"><strong><span class=\"ne-text\">执行过程：</span></strong></p><ul class=\"ne-ul\"><li id=\"uea0fd657\"><span class=\"ne-text\">挂载阶段，首先执行 </span><code class=\"ne-code\"><span class=\"ne-text\">constructor</span></code><span class=\"ne-text\"> 构造方法，来创建组件</span></li><li id=\"u14728826\"><span class=\"ne-text\">创建完成之后，就会执行 </span><code class=\"ne-code\"><span class=\"ne-text\">render</span></code><span class=\"ne-text\"> 方法，该方法会返回需要渲染的内容</span></li><li id=\"u896b2580\"><span class=\"ne-text\">随后，</span><code class=\"ne-code\"><span class=\"ne-text\">React</span></code><span class=\"ne-text\"> 会将需要渲染的内容挂载到 </span><code class=\"ne-code\"><span class=\"ne-text\">DOM</span></code><span class=\"ne-text\"> 树上</span></li><li id=\"u2b6d66f1\"><span class=\"ne-text\">挂载完成之后就会执行 </span><code class=\"ne-code\"><span class=\"ne-text\">componentDidMount</span></code><span class=\"ne-text\"> 生命周期函数</span></li><li id=\"udb9922c7\"><span class=\"ne-text\">如果我们给组件创建一个 </span><code class=\"ne-code\"><span class=\"ne-text\">props</span></code><span class=\"ne-text\">（用于组件通信）、调用 </span><code class=\"ne-code\"><span class=\"ne-text\">setState</span></code><span class=\"ne-text\">（更改 </span><code class=\"ne-code\"><span class=\"ne-text\">state</span></code><span class=\"ne-text\"> 中的数据）、调用 </span><code class=\"ne-code\"><span class=\"ne-text\">forceUpdate</span></code><span class=\"ne-text\">（强制更新组件）时，都会重新调用 </span><code class=\"ne-code\"><span class=\"ne-text\">render</span></code><span class=\"ne-text\"> 函数</span></li><li id=\"u3631acc0\"><code class=\"ne-code\"><span class=\"ne-text\">render</span></code><span class=\"ne-text\"> 函数重新执行之后，就会重新进行 </span><code class=\"ne-code\"><span class=\"ne-text\">DOM</span></code><span class=\"ne-text\"> 树的挂载</span></li><li id=\"ud479e8c6\"><span class=\"ne-text\">挂载完成之后就会执行 </span><code class=\"ne-code\"><span class=\"ne-text\">componentDidUpdate</span></code><span class=\"ne-text\"> 生命周期函数</span></li><li id=\"u7fcb64d2\"><span class=\"ne-text\">当移除组件时，就会执行 </span><code class=\"ne-code\"><span class=\"ne-text\">componentWillUnmount</span></code><span class=\"ne-text\"> 生命周期函数</span></li></ul></div><h2 id=\"U61d0\"><span class=\"ne-text\">挂载阶段</span></h2><ul class=\"ne-ul\"><li id=\"u3680cc86\"><strong><span class=\"ne-text\">constructor</span></strong></li></ul><p id=\"u48eef138\" class=\"ne-p\"><span class=\"ne-text\">组件状态的初始化，用来读取初始 </span><code class=\"ne-code\"><span class=\"ne-text\">state</span></code><span class=\"ne-text\"> 和 </span><code class=\"ne-code\"><span class=\"ne-text\">props</span></code><span class=\"ne-text\"> 以及绑定 </span><code class=\"ne-code\"><span class=\"ne-text\">this</span></code><span class=\"ne-text\"> 上下文。通常只会在初始化时运行一次</span></p><ul class=\"ne-ul\"><li id=\"u4e1e661f\"><strong><span class=\"ne-text\">static getDerivedStateFromProps </span></strong><span data-color=\"0\" id=\"NxNP7\" class=\"ne-label\">不常用</span></li></ul><p id=\"uf73b160c\" class=\"ne-p\"><span class=\"ne-text\">会在调用 </span><code class=\"ne-code\"><span class=\"ne-text\">render</span></code><span class=\"ne-text\"> 方法之前调用，并且在初始挂载及后续更新时都会被调用。它应返回一个对象来更新 </span><code class=\"ne-code\"><span class=\"ne-text\">state</span></code><span class=\"ne-text\">，如果返回 </span><code class=\"ne-code\"><span class=\"ne-text\">null</span></code><span class=\"ne-text\"> 则不更新任何内容。</span></p><div data-type=\"info\" class=\"ne-alert\"><p id=\"u6b9ed465\" class=\"ne-p\"><span class=\"ne-text\">此方法配合 </span><code class=\"ne-code\"><span class=\"ne-text\">componentDidUpdate</span></code><span class=\"ne-text\"> 使用，可以覆盖 </span><code class=\"ne-code\"><span class=\"ne-text\">componentWillReceiveProps</span></code><span class=\"ne-text\"> 所有用法</span></p></div><ul class=\"ne-ul\"><li id=\"u5b06a60e\"><strong><span class=\"ne-text\">render</span></strong></li></ul><p id=\"ufedd47ad\" class=\"ne-p\"><span class=\"ne-text\">该方法是 </span><code class=\"ne-code\"><span class=\"ne-text\">class</span></code><span class=\"ne-text\"> 组件中唯一必须实现的方法，同时 </span><code class=\"ne-code\"><span class=\"ne-text\">render</span></code><span class=\"ne-text\"> 应该为纯函数。当 </span><code class=\"ne-code\"><span class=\"ne-text\">render</span></code><span class=\"ne-text\"> 被调用时，它会检查 </span><code class=\"ne-code\"><span class=\"ne-text\">this.props</span></code><span class=\"ne-text\"> 和 </span><code class=\"ne-code\"><span class=\"ne-text\">this.state</span></code><span class=\"ne-text\"> 的变化并返回相应的渲染内容</span></p><ul class=\"ne-ul\"><li id=\"u62d32a5e\"><strong><span class=\"ne-text\">componentDidMount</span></strong></li></ul><p id=\"u7635a257\" class=\"ne-p\"><span class=\"ne-text\">会在组件挂载后(插入 </span><code class=\"ne-code\"><span class=\"ne-text\">DOM</span></code><span class=\"ne-text\"> 树中)立即调用</span></p><div data-type=\"info\" class=\"ne-alert\"><p id=\"u81d0605c\" class=\"ne-p\"><span class=\"ne-text\">如果在该生命周期直接调用 </span><code class=\"ne-code\"><span class=\"ne-text\">setState</span></code><span class=\"ne-text\">，将会触发额外渲染，但此渲染会发生在浏览器更新屏幕之前</span></p></div><p id=\"u4b181ee3\" class=\"ne-p\"><br></p><div data-type=\"warning\" class=\"ne-alert\"><p id=\"u2e1e2bca\" class=\"ne-p\"><strong><span class=\"ne-text\">注意：下述生命周期方法即将过时，在新代码中应该避免使用它们</span></strong></p><ul class=\"ne-ul\"><li id=\"uf9d1c327\"><a href=\"https://zh-hans.reactjs.org/docs/react-component.html#unsafe_componentwillmount\" data-href=\"https://zh-hans.reactjs.org/docs/react-component.html#unsafe_componentwillmount\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">UNSAFE_componentWillMount</span></a><span class=\"ne-text\">：该生命周期会在 render 之前调用(如果在此调用 </span><code class=\"ne-code\"><span class=\"ne-text\">setState</span></code><span class=\"ne-text\">，将不会触发重渲染，而是进行 </span><code class=\"ne-code\"><span class=\"ne-text\">state</span></code><span class=\"ne-text\"> 合并)，所以此时的 </span><code class=\"ne-code\"><span class=\"ne-text\">state</span></code><span class=\"ne-text\"> 不是最新的，在 </span><code class=\"ne-code\"><span class=\"ne-text\">render</span></code><span class=\"ne-text\"> 中才可以获取更新后的 </span><code class=\"ne-code\"><span class=\"ne-text\">state</span></code></li></ul></div><h2 id=\"XRZyT\"><span class=\"ne-text\">更新阶段</span></h2><ul class=\"ne-ul\"><li id=\"u456bb792\"><strong><span class=\"ne-text\">static getDerivedStateFromProps </span></strong><span data-color=\"0\" id=\"LAR6Y\" class=\"ne-label\">不常用</span></li></ul><p id=\"u1621a6c9\" class=\"ne-p\"><span class=\"ne-text\">会在调用 </span><code class=\"ne-code\"><span class=\"ne-text\">render</span></code><span class=\"ne-text\"> 方法之前调用，并且在初始挂载及后续更新时都会被调用。它应返回一个对象来更新 </span><code class=\"ne-code\"><span class=\"ne-text\">state</span></code><span class=\"ne-text\">，如果返回 </span><code class=\"ne-code\"><span class=\"ne-text\">null</span></code><span class=\"ne-text\"> 则不更新任何内容。</span></p><div data-type=\"info\" class=\"ne-alert\"><p id=\"u21b336fa\" class=\"ne-p\"><span class=\"ne-text\">此方法配合 </span><code class=\"ne-code\"><span class=\"ne-text\">componentDidUpdate</span></code><span class=\"ne-text\"> 使用，可以覆盖 </span><code class=\"ne-code\"><span class=\"ne-text\">componentWillReceiveProps</span></code><span class=\"ne-text\"> 所有用法</span></p></div><ul class=\"ne-ul\"><li id=\"ue19c9d7b\"><strong><span class=\"ne-text\">shouldComponentUpdate</span></strong></li></ul><p id=\"u9725bd7d\" class=\"ne-p\"><span class=\"ne-text\">返回一个布尔值，用来判断使用触发重渲染</span></p><div data-type=\"info\" class=\"ne-alert\"><p id=\"u3edd6eed\" class=\"ne-p\"><span class=\"ne-text\">此方法仅作为性能优化的方式而存在。尽量使用 </span><code class=\"ne-code\"><span class=\"ne-text\">PureComponent</span></code><span class=\"ne-text\"> 组件，而不是手动编写 </span><code class=\"ne-code\"><span class=\"ne-text\">shouldComponentUpdate</span></code><span class=\"ne-text\">，因为 </span><code class=\"ne-code\"><span class=\"ne-text\">PureComponent</span></code><span class=\"ne-text\"> 会对 </span><code class=\"ne-code\"><span class=\"ne-text\">props</span></code><span class=\"ne-text\"> 和 </span><code class=\"ne-code\"><span class=\"ne-text\">state</span></code><span class=\"ne-text\"> 进行浅层比较</span></p></div><ul class=\"ne-ul\"><li id=\"u097b4693\"><strong><span class=\"ne-text\">render</span></strong></li></ul><p id=\"u8da45e9e\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(68, 68, 68); font-size: 15px\">在更新阶段也会触发此生命周期</span></p><ul class=\"ne-ul\"><li id=\"u9bf97899\"><strong><span class=\"ne-text\">getSnapshotBeforeUpdate </span></strong><span data-color=\"0\" id=\"nDnFH\" class=\"ne-label\">不常用</span></li></ul><p id=\"u0d2fb1f8\" class=\"ne-p\"><span class=\"ne-text\">会在最近一次渲染输出(提交到 </span><code class=\"ne-code\"><span class=\"ne-text\">DOM</span></code><span class=\"ne-text\"> 节点)之前调用。它会在组件发生更改之前从 </span><code class=\"ne-code\"><span class=\"ne-text\">DOM</span></code><span class=\"ne-text\"> 中捕获一些信息(如：滚动位置)。此生命周期方法的任何返回值都将作为参数传递给 </span><code class=\"ne-code\"><span class=\"ne-text\">componentDidUpdate</span></code></p><div data-type=\"info\" class=\"ne-alert\"><p id=\"uc9fa9cb8\" class=\"ne-p\"><span class=\"ne-text\">返回值会作为 </span><code class=\"ne-code\"><span class=\"ne-text\">componentDidUpdate</span></code><span class=\"ne-text\"> 的第三个参数</span></p></div><ul class=\"ne-ul\"><li id=\"u07e49f39\"><strong><span class=\"ne-text\">componentDidUpdate</span></strong></li></ul><p id=\"ud14ec393\" class=\"ne-p\"><span class=\"ne-text\">会在更新后被立即调用，首次渲染将不会执行此方法。当组件更新后，可以在此处对 </span><code class=\"ne-code\"><span class=\"ne-text\">DOM</span></code><span class=\"ne-text\"> 进行操作。如果对更新前后的 </span><code class=\"ne-code\"><span class=\"ne-text\">props</span></code><span class=\"ne-text\"> 进行了比较，那么可以选择在此处进行网络请求</span></p><div data-type=\"warning\" class=\"ne-alert\"><ul class=\"ne-ul\"><li id=\"ua342ed23\"><span class=\"ne-text\">可以在该生命周期中直接调用 </span><code class=\"ne-code\"><span class=\"ne-text\">setState</span></code><span class=\"ne-text\">，但 </span><code class=\"ne-code\"><span class=\"ne-text\">setState</span></code><span class=\"ne-text\"> 必须被包裹在一个条件语句中，否则会导致死循环</span></li></ul><ul class=\"ne-ul\"><li id=\"u03d28087\"><span class=\"ne-text\">如果 </span><code class=\"ne-code\"><span class=\"ne-text\">shouldComponentUpdate</span></code><span class=\"ne-text\"> 返回值为 </span><code class=\"ne-code\"><span class=\"ne-text\">false</span></code><span class=\"ne-text\">，将不会调用 </span><code class=\"ne-code\"><span class=\"ne-text\">componentDidUpdate</span></code></li></ul></div><p id=\"u93091c58\" class=\"ne-p\"><strong><span class=\"ne-text\"></span></strong></p><div data-type=\"warning\" class=\"ne-alert\"><p id=\"uf5f3b720\" class=\"ne-p\"><strong><span class=\"ne-text\" style=\"color: rgb(0, 0, 0)\">注意：下述方法即将过时，</span></strong><strong><span class=\"ne-text\">在新代码中应该避免使用它们</span></strong></p><ul class=\"ne-ul\"><li id=\"u9cbd2cc4\"><a href=\"https://zh-hans.reactjs.org/docs/react-component.html#unsafe_componentwillupdate\" data-href=\"https://zh-hans.reactjs.org/docs/react-component.html#unsafe_componentwillupdate\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">UNSAFE_componentWillUpdate</span></a></li><li id=\"u80d05467\"><a href=\"https://zh-hans.reactjs.org/docs/react-component.html#unsafe_componentwillreceiveprops\" data-href=\"https://zh-hans.reactjs.org/docs/react-component.html#unsafe_componentwillreceiveprops\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">UNSAFE_componentWillReceiveProps</span></a></li></ul></div><h2 id=\"slP8w\"><span class=\"ne-text\">卸载阶段</span></h2><ul class=\"ne-ul\"><li id=\"u4507372b\"><strong><span class=\"ne-text\">componentWillUnmount</span></strong></li></ul><p id=\"u60a794d6\" class=\"ne-p\"><span class=\"ne-text\">会在组件卸载及销毁之前直接调用。通常在此方法中执行必要的清理操作，如清理定时器、取消网络请求、清除在 </span><code class=\"ne-code\"><span class=\"ne-text\">componentDidMount</span></code><span class=\"ne-text\"> 中创建的订阅等</span></p><div data-type=\"warning\" class=\"ne-alert\"><p id=\"u4a229d1e\" class=\"ne-p\"><code class=\"ne-code\"><span class=\"ne-text\">componentWillUnmount</span></code><span class=\"ne-text\"> 中不应该调用 </span><code class=\"ne-code\"><span class=\"ne-text\">setState</span></code><span class=\"ne-text\">，因为该组件将永远不会重新渲染。组件实例卸载后，将永远不会再挂载它。</span></p></div><h2 id=\"UsgfN\"><span class=\"ne-text\">错误处理</span></h2><p id=\"u43618e0a\" class=\"ne-p\"><span class=\"ne-text\">当渲染过程，生命周期，或子组件的构造函数中抛出错误时，会调用如下方法：</span></p><ul class=\"ne-ul\"><li id=\"uf5d5adb2\"><strong><span class=\"ne-text\">static getDerivedStateFromError</span></strong></li></ul><p id=\"uf0c0e960\" class=\"ne-p\"><span class=\"ne-text\">此生命周期会在后代组件中抛出错误后被调用。它将抛出的错误作为参数，并返回一个值以更新 state</span></p><pre data-language=\"jsx\" id=\"uwYN0\" class=\"ne-codeblock language-jsx\">class ErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError(error) {\n    // 更新 state 使下一次渲染可以显降级 UI\n    return { hasError: true };\n  }\n\n  render() {\n    if (this.state.hasError) {\n      // 你可以渲染任何自定义的降级  UI\n      return &lt;h1&gt;Something went wrong.&lt;/h1&gt;;\n    }\n\n    return this.props.children;\n  }\n}</pre><div data-type=\"warning\" class=\"ne-alert\"><p id=\"ufb262fdf\" class=\"ne-p\"><strong><span class=\"ne-text\" style=\"color: rgb(0, 0, 0)\">注意：</span></strong><code class=\"ne-code\"><span class=\"ne-text\" style=\"color: rgb(26, 26, 26)\">getDerivedStateFromError</span></code><span class=\"ne-text\" style=\"color: rgb(0, 0, 0)\"> 会在</span><span class=\"ne-text\" style=\"color: rgb(26, 26, 26)\">渲染</span><span class=\"ne-text\" style=\"color: rgb(0, 0, 0)\">阶段调用，因此</span><strong><span class=\"ne-text\" style=\"color: rgba(54,137,85,1)\">不允许执行副作用</span></strong><span class=\"ne-text\" style=\"color: rgb(0, 0, 0)\">。 如遇此类情况，请改用 </span><code class=\"ne-code\"><span class=\"ne-text\" style=\"color: rgb(26, 26, 26)\">componentDidCatch</span></code></p></div><ul class=\"ne-ul\"><li id=\"u81738f8c\"><strong><span class=\"ne-text\">componentDidCatch</span></strong></li></ul><p id=\"u6ecfa386\" class=\"ne-p\"><span class=\"ne-text\">此生命周期在后代组件抛出错误后被调用。它接收两个参数：</span><code class=\"ne-code\"><span class=\"ne-text\">error</span></code><span class=\"ne-text\">(抛出的错误)，</span><code class=\"ne-code\"><span class=\"ne-text\">info</span></code><span class=\"ne-text\">(带有 </span><code class=\"ne-code\"><span class=\"ne-text\">componentStack key</span></code><span class=\"ne-text\"> 的对象，其中包含有关组件引发错误的栈信息)。</span><code class=\"ne-code\"><span class=\"ne-text\">componentDidCatch</span></code><span class=\"ne-text\"> 会在 “提交” 阶段被调用，因此</span><strong><span class=\"ne-text\" style=\"color: rgba(54,137,85,1)\">允许执行副作用</span></strong><span class=\"ne-text\">。通常用于记录错误之类的情况</span></p><pre data-language=\"jsx\" id=\"Iq96E\" class=\"ne-codeblock language-jsx\">class ErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError(error) {\n    // 更新 state 使下一次渲染可以显示降级 UI\n    return { hasError: true };\n  }\n\n  componentDidCatch(error, info) {\n    // &quot;组件堆栈&quot; 例子:\n    //   in ComponentThatThrows (created by App)\n    //   in ErrorBoundary (created by App)\n    //   in div (created by App)\n    //   in App\n    logComponentStackToMyService(info.componentStack);\n  }\n\n  render() {\n    if (this.state.hasError) {\n      // 你可以渲染任何自定义的降级 UI\n      return &lt;h1&gt;Something went wrong.&lt;/h1&gt;;\n    }\n\n    return this.props.children;\n  }\n}</pre><p id=\"u279c8fdb\" class=\"ne-p\"><strong><span class=\"ne-text\" style=\"color: rgba(54,137,85,1)\">在开发模式下，错误会冒泡至 window</span></strong><span class=\"ne-text\">。这意味着任何 </span><code class=\"ne-code\"><span class=\"ne-text\">window.onerror</span></code><span class=\"ne-text\"> 或 </span><code class=\"ne-code\"><span class=\"ne-text\">window.addEventListener('error', callback)</span></code><span class=\"ne-text\"> 会中断这些已经被 </span><code class=\"ne-code\"><span class=\"ne-text\">componentDidCatch</span></code><span class=\"ne-text\"> 捕获的错误。</span></p><p id=\"ue0220660\" class=\"ne-p\"><strong><span class=\"ne-text\" style=\"color: rgba(54,137,85,1)\">在生产模式下，错误不会冒泡</span></strong><span class=\"ne-text\">。这意味着任何根错误处理器只会接受那些没有显示地被 </span><code class=\"ne-code\"><span class=\"ne-text\">componentDidCatch</span></code><span class=\"ne-text\"> 捕获的错误</span></p><div data-type=\"warning\" class=\"ne-alert\"><p id=\"u22f93122\" class=\"ne-p\"><strong><span class=\"ne-text\">注意：</span></strong><span class=\"ne-text\">如果发生错误，可以通过调用 </span><code class=\"ne-code\"><span class=\"ne-text\">setState</span></code><span class=\"ne-text\"> 使用 </span><code class=\"ne-code\"><span class=\"ne-text\">componentDidCatch</span></code><span class=\"ne-text\"> 渲染降级 </span><code class=\"ne-code\"><span class=\"ne-text\">UI</span></code><span class=\"ne-text\">，但在未来的版本中将不推荐这样做。可以使用静态方法 </span><code class=\"ne-code\"><span class=\"ne-text\">getDerivedStateFromError</span></code><span class=\"ne-text\"> 来处理降级渲染</span></p></div><h2 id=\"sHTVD\"><span class=\"ne-text\">总结</span></h2><p id=\"ud4b7ee6a\" class=\"ne-p\"><img src=\"https://cdn.nlark.com/yuque/0/2022/png/732231/1646657220993-91518caa-70c1-4b94-bbe2-0736dcc4103f.png\" width=\"425\" id=\"xy4vz\" class=\"ne-image\"></p><h3 id=\"sBapQ\"><span class=\"ne-text\">不能使用 setState 的生命周期</span></h3><p id=\"u0d099ddb\" class=\"ne-p\"><img src=\"https://cdn.nlark.com/yuque/0/2022/png/732231/1646657408225-53c606d8-ddbb-4f56-a3f4-f56c6bd896c3.png\" width=\"652\" id=\"u6da471ae\" class=\"ne-image\"></p><div data-type=\"warning\" class=\"ne-alert\"><p id=\"u4fda14a8\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(51, 51, 51); font-size: 16px\">其中打 </span><strong><span class=\"ne-text\" style=\"color: rgb(51, 51, 51); font-size: 16px\">❌ </span></strong><span class=\"ne-text\" style=\"color: rgb(51, 51, 51); font-size: 16px\">的是不能使用 setState 的，打 ✅ 的是能用 setState 的</span></p></div><h3 id=\"t7fn1\"><span class=\"ne-text\">state 触发更新的生命周期</span></h3><ol class=\"ne-ol\"><li id=\"ub426d614\"><code class=\"ne-code\"><span class=\"ne-text\">shouldComponentUpdate</span></code></li><li id=\"u28f4d5a2\"><code class=\"ne-code\"><span class=\"ne-text\">componentWillUpdate</span></code></li><li id=\"u75ed075a\"><code class=\"ne-code\"><span class=\"ne-text\">componentDidUpdate</span></code></li></ol><h3 id=\"rMqtD\"><span class=\"ne-text\">props 触发更新的生命周期</span></h3><ol class=\"ne-ol\"><li id=\"u46dc8416\"><code class=\"ne-code\"><span class=\"ne-text\" style=\"color: rgb(56, 56, 56); font-size: 15px\">shouldComponentUpdate</span></code></li><li id=\"u4519ea96\"><code class=\"ne-code\"><span class=\"ne-text\" style=\"color: rgb(56, 56, 56); font-size: 15px\">componentWillUpdate</span></code></li><li id=\"u47186607\"><code class=\"ne-code\"><span class=\"ne-text\" style=\"color: rgb(56, 56, 56); font-size: 15px\">componentDidUpdate</span></code></li><li id=\"u13351b06\"><code class=\"ne-code\"><span class=\"ne-text\" style=\"color: rgb(56, 56, 56); font-size: 15px\">static componentWillReceiveProps</span></code></li></ol></div>",
  "body_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"viewport\" content=\"adapt\" /><h2 data-lake-id=\"D1A6O\" id=\"D1A6O\"><span data-lake-id=\"u9ad3aae0\" id=\"u9ad3aae0\">官方图解</span></h2><p data-lake-id=\"uf7ccd023\" id=\"uf7ccd023\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2022%2Fpng%2F732231%2F1646657266595-d9e4c515-733d-4d3c-ba45-eb78b06b74a5.png%22%2C%22taskId%22%3A%22ueca6a312-f0de-49b0-9386-7c99569eb0c%22%2C%22clientId%22%3A%22ubaa79684-21e9-4%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A612.5%2C%22height%22%3A376%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A102914%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A1225%2C%22originHeight%22%3A752%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%E5%B1%95%E7%A4%BA%E4%B8%8D%E5%B8%B8%E7%94%A8%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%20%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87%20REACT%20VERSION%20LANGUAGE%20216.4%20%E6%8C%82%E8%BD%BD%E6%97%B6%20%E5%8D%B8%E8%BD%BD%E6%97%B6%20%E6%9B%B4%E6%96%B0%E6%97%B6%20CONSTRUCTOR%20FORCEUPDATE()%20SETSTATE()%20NEW%20PROPS%20GETDERIVEDSTATEFROMPROPS%20%5C%22RENDER%E9%98%B6%E6%AE%B5%5C%22%20%E7%BA%AF%E5%87%80%E4%B8%94%E4%B8%8D%E5%8C%85%E5%90%AB%E5%89%AF%E4%BD%9C%E7%94%A8.%20%E5%8F%AF%E8%83%BD%E4%BC%9A%E8%A2%ABREACT%E6%9A%82%20%E5%81%9C%2C%E4%B8%AD%E6%AD%A2%E6%88%96%E9%87%8D%E6%96%B0%E5%90%AF%E5%8A%A8.%20SHOULD%20COMPONENTUPDATE%20RENDER%20PRE-COMMIT%20%E9%98%B6%E6%AE%B5%5C%22%20GETSNAPSHOTBEFOREUPDATE%20%E5%8F%AF%E4%BB%A5%E8%AF%BB%E5%8F%96DOM.%20REACT%E6%9B%B4%E6%96%B0DOM%E5%92%8CREFS%20%5C%22COMMIT%20%E9%98%B6%E6%AE%B5%5C%22%20%E5%8F%AF%E4%BB%A5%E4%BD%BF%E7%94%A8DOM%2C%E8%BF%90%E8%A1%8C%20%E5%89%AF%E4%BD%9C%E7%94%A8%2C%E5%AE%89%E6%8E%92%E6%9B%B4%E6%96%B0.%20COMPONENTDIDMOUNT%20COMPONENTDIDUPDATE%20COMPONENTWILLUNMOUNT%20SEE%20PROJECT%20ON%20GITHUB%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A553.05554%2C%22y%22%3A12.408335%2C%22width%22%3A240.78650000000005%2C%22height%22%3A23.148123%2C%22text%22%3A%22%E5%B1%95%E7%A4%BA%E4%B8%8D%E5%B8%B8%E7%94%A8%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%22%7D%2C%7B%22x%22%3A729.8933%2C%22y%22%3A53.422787%2C%22width%22%3A57.41640000000007%2C%22height%22%3A14.943692999999996%2C%22text%22%3A%22%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87%22%7D%2C%7B%22x%22%3A473.87833%2C%22y%22%3A54.62959%2C%22width%22%3A88.88086999999996%2C%22height%22%3A13.99613%2C%22text%22%3A%22REACT%20VERSION%22%7D%2C%7B%22x%22%3A637.8671%2C%22y%22%3A54.674362%2C%22width%22%3A66.17779999999993%2C%22height%22%3A15.347663999999995%2C%22text%22%3A%22LANGUAGE%22%7D%2C%7B%22x%22%3A569.43964%2C%22y%22%3A54.435184%2C%22width%22%3A46.731199999999944%2C%22height%22%3A13.494515999999997%2C%22text%22%3A%22216.4%22%7D%2C%7B%22x%22%3A306.02277%2C%22y%22%3A117.248924%2C%22width%22%3A73.54519000000005%2C%22height%22%3A26.608176%2C%22text%22%3A%22%E6%8C%82%E8%BD%BD%E6%97%B6%22%7D%2C%7B%22x%22%3A975.2915%2C%22y%22%3A118.373%2C%22width%22%3A73.40169999999989%2C%22height%22%3A25.097599999999986%2C%22text%22%3A%22%E5%8D%B8%E8%BD%BD%E6%97%B6%22%7D%2C%7B%22x%22%3A635.77673%2C%22y%22%3A119.10557%2C%22width%22%3A72.87586999999996%2C%22height%22%3A24.684609999999992%2C%22text%22%3A%22%E6%9B%B4%E6%96%B0%E6%97%B6%22%7D%2C%7B%22x%22%3A298.85614%2C%22y%22%3A207.5127%2C%22width%22%3A90.17883%2C%22height%22%3A13.14634000000001%2C%22text%22%3A%22CONSTRUCTOR%22%7D%2C%7B%22x%22%3A748.0836%2C%22y%22%3A207.7738%2C%22width%22%3A93.5125999999999%2C%22height%22%3A15.212130000000002%2C%22text%22%3A%22FORCEUPDATE()%22%7D%2C%7B%22x%22%3A642.33575%2C%22y%22%3A209.00476%2C%22width%22%3A65.23535000000004%2C%22height%22%3A13.506589999999989%2C%22text%22%3A%22SETSTATE()%22%7D%2C%7B%22x%22%3A515.9043%2C%22y%22%3A209.3657%2C%22width%22%3A71.86539999999991%2C%22height%22%3A12.888010000000008%2C%22text%22%3A%22NEW%20PROPS%22%7D%2C%7B%22x%22%3A449.8289%2C%22y%22%3A281.41064%2C%22width%22%3A196.13076%2C%22height%22%3A17.618960000000015%2C%22text%22%3A%22GETDERIVEDSTATEFROMPROPS%22%7D%2C%7B%22x%22%3A81.04835%2C%22y%22%3A286.66248%2C%22width%22%3A105.93894%2C%22height%22%3A18.273120000000006%2C%22text%22%3A%22%5C%22RENDER%E9%98%B6%E6%AE%B5%5C%22%22%7D%2C%7B%22x%22%3A62.62895%2C%22y%22%3A312.4228%2C%22width%22%3A132.69737%2C%22height%22%3A17.377250000000004%2C%22text%22%3A%22%E7%BA%AF%E5%87%80%E4%B8%94%E4%B8%8D%E5%8C%85%E5%90%AB%E5%89%AF%E4%BD%9C%E7%94%A8.%22%7D%2C%7B%22x%22%3A72.66747%2C%22y%22%3A330.40408%2C%22width%22%3A120.58325%2C%22height%22%3A15.404969999999992%2C%22text%22%3A%22%E5%8F%AF%E8%83%BD%E4%BC%9A%E8%A2%ABREACT%E6%9A%82%22%7D%2C%7B%22x%22%3A62.64951%2C%22y%22%3A347.4204%2C%22width%22%3A134.18257%2C%22height%22%3A15.182140000000004%2C%22text%22%3A%22%E5%81%9C%2C%E4%B8%AD%E6%AD%A2%E6%88%96%E9%87%8D%E6%96%B0%E5%90%AF%E5%8A%A8.%22%7D%2C%7B%22x%22%3A518.2704%2C%22y%22%3A356.07843%2C%22width%22%3A186.2219%2C%22height%22%3A16.779719999999998%2C%22text%22%3A%22SHOULD%20COMPONENTUPDATE%22%7D%2C%7B%22x%22%3A520.0508%2C%22y%22%3A432.35983%2C%22width%22%3A53.07896000000005%2C%22height%22%3A13.455390000000023%2C%22text%22%3A%22RENDER%22%7D%2C%7B%22x%22%3A66.586525%2C%22y%22%3A492.29984%2C%22width%22%3A134.46312500000002%2C%22height%22%3A15.840910000000008%2C%22text%22%3A%22PRE-COMMIT%20%E9%98%B6%E6%AE%B5%5C%22%22%7D%2C%7B%22x%22%3A575.2407%2C%22y%22%3A504.64243%2C%22width%22%3A194.21640000000002%2C%22height%22%3A17.21884%2C%22text%22%3A%22GETSNAPSHOTBEFOREUPDATE%22%7D%2C%7B%22x%22%3A79.62393%2C%22y%22%3A515.8417%2C%22width%22%3A97.00228999999999%2C%22height%22%3A14.399400000000014%2C%22text%22%3A%22%E5%8F%AF%E4%BB%A5%E8%AF%BB%E5%8F%96DOM.%22%7D%2C%7B%22x%22%3A460.42874%2C%22y%22%3A576.0579%2C%22width%22%3A174.28298999999998%2C%22height%22%3A19.18229999999994%2C%22text%22%3A%22REACT%E6%9B%B4%E6%96%B0DOM%E5%92%8CREFS%22%7D%2C%7B%22x%22%3A78.89813%2C%22y%22%3A595.0493%2C%22width%22%3A107.93013%2C%22height%22%3A16.64985999999999%2C%22text%22%3A%22%5C%22COMMIT%20%E9%98%B6%E6%AE%B5%5C%22%22%7D%2C%7B%22x%22%3A66.84276%2C%22y%22%3A619.4475%2C%22width%22%3A135.06381%2C%22height%22%3A16.234500000000025%2C%22text%22%3A%22%E5%8F%AF%E4%BB%A5%E4%BD%BF%E7%94%A8DOM%2C%E8%BF%90%E8%A1%8C%22%7D%2C%7B%22x%22%3A69.08886%2C%22y%22%3A636.99396%2C%22width%22%3A119.32486999999999%2C%22height%22%3A15.661740000000009%2C%22text%22%3A%22%E5%89%AF%E4%BD%9C%E7%94%A8%2C%E5%AE%89%E6%8E%92%E6%9B%B4%E6%96%B0.%22%7D%2C%7B%22x%22%3A262.59186%2C%22y%22%3A652.8157%2C%22width%22%3A162.98774000000003%2C%22height%22%3A15.835239999999999%2C%22text%22%3A%22COMPONENTDIDMOUNT%22%7D%2C%7B%22x%22%3A588.2135%2C%22y%22%3A652.5006%2C%22width%22%3A168.56586000000004%2C%22height%22%3A17.17380000000003%2C%22text%22%3A%22COMPONENTDIDUPDATE%22%7D%2C%7B%22x%22%3A919.9593%2C%22y%22%3A653.9677%2C%22width%22%3A185.37879999999996%2C%22height%22%3A15.615369999999984%2C%22text%22%3A%22COMPONENTWILLUNMOUNT%22%7D%2C%7B%22x%22%3A518.0398%2C%22y%22%3A726.71686%2C%22width%22%3A160.47295999999994%2C%22height%22%3A15.32928000000004%2C%22text%22%3A%22SEE%20PROJECT%20ON%20GITHUB%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22id%22%3A%22u69651ec0%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><p data-lake-id=\"uf42319fb\" id=\"uf42319fb\"><br></p><blockquote data-lake-id=\"u779c0353\" id=\"u779c0353\" class=\"lake-alert lake-alert-info\"><p data-lake-id=\"u021c7b9a\" id=\"u021c7b9a\"><strong><span data-lake-id=\"uff5293ac\" id=\"uff5293ac\">执行过程：</span></strong></p><ul list=\"ue3c65b3e\"><li fid=\"uc7be0a4a\" data-lake-id=\"uea0fd657\" id=\"uea0fd657\"><span data-lake-id=\"u18c6c607\" id=\"u18c6c607\">挂载阶段，首先执行 </span><code data-lake-id=\"uacf28263\" id=\"uacf28263\"><span data-lake-id=\"u621d4a54\" id=\"u621d4a54\">constructor</span></code><span data-lake-id=\"ud3a8cf96\" id=\"ud3a8cf96\"> 构造方法，来创建组件</span></li><li fid=\"uc7be0a4a\" data-lake-id=\"u14728826\" id=\"u14728826\"><span data-lake-id=\"u4e433f77\" id=\"u4e433f77\">创建完成之后，就会执行 </span><code data-lake-id=\"ufbcb0d5b\" id=\"ufbcb0d5b\"><span data-lake-id=\"u29a12c42\" id=\"u29a12c42\">render</span></code><span data-lake-id=\"u56e46e31\" id=\"u56e46e31\"> 方法，该方法会返回需要渲染的内容</span></li><li fid=\"uc7be0a4a\" data-lake-id=\"u896b2580\" id=\"u896b2580\"><span data-lake-id=\"u98b23a92\" id=\"u98b23a92\">随后，</span><code data-lake-id=\"u7c124e68\" id=\"u7c124e68\"><span data-lake-id=\"ud75df781\" id=\"ud75df781\">React</span></code><span data-lake-id=\"u49e97bb7\" id=\"u49e97bb7\"> 会将需要渲染的内容挂载到 </span><code data-lake-id=\"u7994de39\" id=\"u7994de39\"><span data-lake-id=\"u4bc14243\" id=\"u4bc14243\">DOM</span></code><span data-lake-id=\"u3ac50041\" id=\"u3ac50041\"> 树上</span></li><li fid=\"uc7be0a4a\" data-lake-id=\"u2b6d66f1\" id=\"u2b6d66f1\"><span data-lake-id=\"ubb315e01\" id=\"ubb315e01\">挂载完成之后就会执行 </span><code data-lake-id=\"u35a7c639\" id=\"u35a7c639\"><span data-lake-id=\"ub876e279\" id=\"ub876e279\">componentDidMount</span></code><span data-lake-id=\"u5ae0afd1\" id=\"u5ae0afd1\"> 生命周期函数</span></li><li fid=\"uc7be0a4a\" data-lake-id=\"udb9922c7\" id=\"udb9922c7\"><span data-lake-id=\"u35afb098\" id=\"u35afb098\">如果我们给组件创建一个 </span><code data-lake-id=\"u71f82628\" id=\"u71f82628\"><span data-lake-id=\"u878fd0be\" id=\"u878fd0be\">props</span></code><span data-lake-id=\"u8b88c6f0\" id=\"u8b88c6f0\">（用于组件通信）、调用 </span><code data-lake-id=\"u0a0c3e3a\" id=\"u0a0c3e3a\"><span data-lake-id=\"u48e702c9\" id=\"u48e702c9\">setState</span></code><span data-lake-id=\"u0d414fe3\" id=\"u0d414fe3\">（更改 </span><code data-lake-id=\"ub3b5ad06\" id=\"ub3b5ad06\"><span data-lake-id=\"u733ca78c\" id=\"u733ca78c\">state</span></code><span data-lake-id=\"u4c9a21cd\" id=\"u4c9a21cd\"> 中的数据）、调用 </span><code data-lake-id=\"u9b029533\" id=\"u9b029533\"><span data-lake-id=\"u41a8974e\" id=\"u41a8974e\">forceUpdate</span></code><span data-lake-id=\"u4f936f3f\" id=\"u4f936f3f\">（强制更新组件）时，都会重新调用 </span><code data-lake-id=\"u3a840295\" id=\"u3a840295\"><span data-lake-id=\"u9a6aebbe\" id=\"u9a6aebbe\">render</span></code><span data-lake-id=\"u57f316df\" id=\"u57f316df\"> 函数</span></li><li fid=\"uc7be0a4a\" data-lake-id=\"u3631acc0\" id=\"u3631acc0\"><code data-lake-id=\"u61dc746e\" id=\"u61dc746e\"><span data-lake-id=\"ucad84237\" id=\"ucad84237\">render</span></code><span data-lake-id=\"u45eb2099\" id=\"u45eb2099\"> 函数重新执行之后，就会重新进行 </span><code data-lake-id=\"u01f495fd\" id=\"u01f495fd\"><span data-lake-id=\"u16df9ea7\" id=\"u16df9ea7\">DOM</span></code><span data-lake-id=\"uf32d165a\" id=\"uf32d165a\"> 树的挂载</span></li><li fid=\"uc7be0a4a\" data-lake-id=\"ud479e8c6\" id=\"ud479e8c6\"><span data-lake-id=\"ud02a5555\" id=\"ud02a5555\">挂载完成之后就会执行 </span><code data-lake-id=\"u7c112fa1\" id=\"u7c112fa1\"><span data-lake-id=\"ubcfef808\" id=\"ubcfef808\">componentDidUpdate</span></code><span data-lake-id=\"ueae18154\" id=\"ueae18154\"> 生命周期函数</span></li><li fid=\"uc7be0a4a\" data-lake-id=\"u7fcb64d2\" id=\"u7fcb64d2\"><span data-lake-id=\"u96336147\" id=\"u96336147\">当移除组件时，就会执行 </span><code data-lake-id=\"ua80b16e5\" id=\"ua80b16e5\"><span data-lake-id=\"u2ebe7115\" id=\"u2ebe7115\">componentWillUnmount</span></code><span data-lake-id=\"u5a6b1f8e\" id=\"u5a6b1f8e\"> 生命周期函数</span></li></ul></blockquote><h2 data-lake-id=\"U61d0\" id=\"U61d0\"><span data-lake-id=\"u8f050f37\" id=\"u8f050f37\">挂载阶段</span></h2><ul list=\"u1a883212\"><li fid=\"u4bd29398\" data-lake-id=\"u3680cc86\" id=\"u3680cc86\"><strong><span data-lake-id=\"u39f4893a\" id=\"u39f4893a\">constructor</span></strong></li></ul><p data-lake-id=\"u48eef138\" id=\"u48eef138\"><span data-lake-id=\"u9d71e49c\" id=\"u9d71e49c\">组件状态的初始化，用来读取初始 </span><code data-lake-id=\"u18eb79bf\" id=\"u18eb79bf\"><span data-lake-id=\"u3b9918ea\" id=\"u3b9918ea\">state</span></code><span data-lake-id=\"u8f639e24\" id=\"u8f639e24\"> 和 </span><code data-lake-id=\"u6b09745b\" id=\"u6b09745b\"><span data-lake-id=\"uf3b02fec\" id=\"uf3b02fec\">props</span></code><span data-lake-id=\"ucb0fc138\" id=\"ucb0fc138\"> 以及绑定 </span><code data-lake-id=\"u20b11250\" id=\"u20b11250\"><span data-lake-id=\"u6eb55070\" id=\"u6eb55070\">this</span></code><span data-lake-id=\"ubf3bfb3b\" id=\"ubf3bfb3b\"> 上下文。通常只会在初始化时运行一次</span></p><ul list=\"uc438a0eb\"><li fid=\"ua0cf7889\" data-lake-id=\"u4e1e661f\" id=\"u4e1e661f\"><strong><span data-lake-id=\"u41877ff8\" id=\"u41877ff8\">static getDerivedStateFromProps </span></strong><card type=\"inline\" name=\"label\" value=\"data:%7B%22label%22%3A%22%E4%B8%8D%E5%B8%B8%E7%94%A8%22%2C%22colorIndex%22%3A0%2C%22id%22%3A%22NxNP7%22%7D\"></card></li></ul><p data-lake-id=\"uf73b160c\" id=\"uf73b160c\"><span data-lake-id=\"u0eb48e07\" id=\"u0eb48e07\">会在调用 </span><code data-lake-id=\"ubf018a76\" id=\"ubf018a76\"><span data-lake-id=\"ude0a4a51\" id=\"ude0a4a51\">render</span></code><span data-lake-id=\"uc9068391\" id=\"uc9068391\"> 方法之前调用，并且在初始挂载及后续更新时都会被调用。它应返回一个对象来更新 </span><code data-lake-id=\"ue0348539\" id=\"ue0348539\"><span data-lake-id=\"u29b9c856\" id=\"u29b9c856\">state</span></code><span data-lake-id=\"u9e599582\" id=\"u9e599582\">，如果返回 </span><code data-lake-id=\"u1128da29\" id=\"u1128da29\"><span data-lake-id=\"u35abb925\" id=\"u35abb925\">null</span></code><span data-lake-id=\"u390876e1\" id=\"u390876e1\"> 则不更新任何内容。</span></p><blockquote data-lake-id=\"u64c9a722\" id=\"u64c9a722\" class=\"lake-alert lake-alert-info\"><p data-lake-id=\"u6b9ed465\" id=\"u6b9ed465\"><span data-lake-id=\"u318b0509\" id=\"u318b0509\">此方法配合 </span><code data-lake-id=\"u44efa1c8\" id=\"u44efa1c8\"><span data-lake-id=\"ub54e0827\" id=\"ub54e0827\">componentDidUpdate</span></code><span data-lake-id=\"u66dad8ca\" id=\"u66dad8ca\"> 使用，可以覆盖 </span><code data-lake-id=\"ucd79f946\" id=\"ucd79f946\"><span data-lake-id=\"u8c5b770c\" id=\"u8c5b770c\">componentWillReceiveProps</span></code><span data-lake-id=\"uf41f34bc\" id=\"uf41f34bc\"> 所有用法</span></p></blockquote><ul list=\"u1f55a4e5\"><li fid=\"ufcbfad14\" data-lake-id=\"u5b06a60e\" id=\"u5b06a60e\"><strong><span data-lake-id=\"u6a8c66e5\" id=\"u6a8c66e5\">render</span></strong></li></ul><p data-lake-id=\"ufedd47ad\" id=\"ufedd47ad\"><span data-lake-id=\"u307d60ab\" id=\"u307d60ab\">该方法是 </span><code data-lake-id=\"u783ebca3\" id=\"u783ebca3\"><span data-lake-id=\"u93449584\" id=\"u93449584\">class</span></code><span data-lake-id=\"uf676207a\" id=\"uf676207a\"> 组件中唯一必须实现的方法，同时 </span><code data-lake-id=\"uf3c9e553\" id=\"uf3c9e553\"><span data-lake-id=\"u972c7618\" id=\"u972c7618\">render</span></code><span data-lake-id=\"udd8b1fcb\" id=\"udd8b1fcb\"> 应该为纯函数。当 </span><code data-lake-id=\"u62f903d0\" id=\"u62f903d0\"><span data-lake-id=\"u6f25fed5\" id=\"u6f25fed5\">render</span></code><span data-lake-id=\"u4c591cd5\" id=\"u4c591cd5\"> 被调用时，它会检查 </span><code data-lake-id=\"ud41ade4d\" id=\"ud41ade4d\"><span data-lake-id=\"u7c388e16\" id=\"u7c388e16\">this.props</span></code><span data-lake-id=\"u8b7161a3\" id=\"u8b7161a3\"> 和 </span><code data-lake-id=\"u2b9ea23a\" id=\"u2b9ea23a\"><span data-lake-id=\"ucc7646f0\" id=\"ucc7646f0\">this.state</span></code><span data-lake-id=\"ua973080d\" id=\"ua973080d\"> 的变化并返回相应的渲染内容</span></p><ul list=\"u1f55a4e5\" start=\"2\"><li fid=\"ufcbfad14\" data-lake-id=\"u62d32a5e\" id=\"u62d32a5e\"><strong><span data-lake-id=\"u149f72ba\" id=\"u149f72ba\">componentDidMount</span></strong></li></ul><p data-lake-id=\"u7635a257\" id=\"u7635a257\"><span data-lake-id=\"u7aaf387f\" id=\"u7aaf387f\">会在组件挂载后(插入 </span><code data-lake-id=\"u7b02cce7\" id=\"u7b02cce7\"><span data-lake-id=\"u620eb804\" id=\"u620eb804\">DOM</span></code><span data-lake-id=\"u78dc2622\" id=\"u78dc2622\"> 树中)立即调用</span></p><blockquote data-lake-id=\"u4d6c4aea\" id=\"u4d6c4aea\" class=\"lake-alert lake-alert-info\"><p data-lake-id=\"u81d0605c\" id=\"u81d0605c\"><span data-lake-id=\"udcf88d71\" id=\"udcf88d71\">如果在该生命周期直接调用 </span><code data-lake-id=\"ud17f1cc2\" id=\"ud17f1cc2\"><span data-lake-id=\"uc14804f9\" id=\"uc14804f9\">setState</span></code><span data-lake-id=\"ud5a8648c\" id=\"ud5a8648c\">，将会触发额外渲染，但此渲染会发生在浏览器更新屏幕之前</span></p></blockquote><p data-lake-id=\"u4b181ee3\" id=\"u4b181ee3\"><br></p><blockquote data-lake-id=\"uea62bebd\" id=\"uea62bebd\" class=\"lake-alert lake-alert-warning\"><p data-lake-id=\"u2e1e2bca\" id=\"u2e1e2bca\"><strong><span data-lake-id=\"u4d1d45bc\" id=\"u4d1d45bc\">注意：下述生命周期方法即将过时，在新代码中应该避免使用它们</span></strong></p><ul list=\"u8c25255a\"><li fid=\"u6abfa354\" data-lake-id=\"uf9d1c327\" id=\"uf9d1c327\"><a href=\"https://zh-hans.reactjs.org/docs/react-component.html#unsafe_componentwillmount\" target=\"_blank\" data-lake-id=\"u21805397\" id=\"u21805397\"><span data-lake-id=\"uda988f67\" id=\"uda988f67\">UNSAFE_componentWillMount</span></a><span data-lake-id=\"uad322249\" id=\"uad322249\">：该生命周期会在 render 之前调用(如果在此调用 </span><code data-lake-id=\"u9d4cd708\" id=\"u9d4cd708\"><span data-lake-id=\"u54fe1562\" id=\"u54fe1562\">setState</span></code><span data-lake-id=\"u23587d8f\" id=\"u23587d8f\">，将不会触发重渲染，而是进行 </span><code data-lake-id=\"ua231ef41\" id=\"ua231ef41\"><span data-lake-id=\"u95da2a1d\" id=\"u95da2a1d\">state</span></code><span data-lake-id=\"uc2e8fbe3\" id=\"uc2e8fbe3\"> 合并)，所以此时的 </span><code data-lake-id=\"ub9752f10\" id=\"ub9752f10\"><span data-lake-id=\"u35aaad6b\" id=\"u35aaad6b\">state</span></code><span data-lake-id=\"u1b79d86d\" id=\"u1b79d86d\"> 不是最新的，在 </span><code data-lake-id=\"u186e6120\" id=\"u186e6120\"><span data-lake-id=\"ua0154301\" id=\"ua0154301\">render</span></code><span data-lake-id=\"ufcc91d1f\" id=\"ufcc91d1f\"> 中才可以获取更新后的 </span><code data-lake-id=\"u5b519431\" id=\"u5b519431\"><span data-lake-id=\"u2e79f24a\" id=\"u2e79f24a\">state</span></code></li></ul></blockquote><h2 data-lake-id=\"XRZyT\" id=\"XRZyT\"><span data-lake-id=\"u4bc0e50b\" id=\"u4bc0e50b\">更新阶段</span></h2><ul list=\"u3cfacf2c\"><li fid=\"u1d81c2f7\" data-lake-id=\"u456bb792\" id=\"u456bb792\"><strong><span data-lake-id=\"u9e4499fe\" id=\"u9e4499fe\">static getDerivedStateFromProps </span></strong><card type=\"inline\" name=\"label\" value=\"data:%7B%22label%22%3A%22%E4%B8%8D%E5%B8%B8%E7%94%A8%22%2C%22colorIndex%22%3A0%2C%22id%22%3A%22LAR6Y%22%7D\"></card></li></ul><p data-lake-id=\"u1621a6c9\" id=\"u1621a6c9\"><span data-lake-id=\"ucbe5e595\" id=\"ucbe5e595\">会在调用 </span><code data-lake-id=\"u721d8a97\" id=\"u721d8a97\"><span data-lake-id=\"u12513bfd\" id=\"u12513bfd\">render</span></code><span data-lake-id=\"u2b8b7a4c\" id=\"u2b8b7a4c\"> 方法之前调用，并且在初始挂载及后续更新时都会被调用。它应返回一个对象来更新 </span><code data-lake-id=\"ub6fd5472\" id=\"ub6fd5472\"><span data-lake-id=\"u16154336\" id=\"u16154336\">state</span></code><span data-lake-id=\"u9a8939b4\" id=\"u9a8939b4\">，如果返回 </span><code data-lake-id=\"ucde5e024\" id=\"ucde5e024\"><span data-lake-id=\"ua242462e\" id=\"ua242462e\">null</span></code><span data-lake-id=\"ub962b7e4\" id=\"ub962b7e4\"> 则不更新任何内容。</span></p><blockquote data-lake-id=\"ubec3d2f4\" id=\"ubec3d2f4\" class=\"lake-alert lake-alert-info\"><p data-lake-id=\"u21b336fa\" id=\"u21b336fa\"><span data-lake-id=\"ucab9426e\" id=\"ucab9426e\">此方法配合 </span><code data-lake-id=\"u00b6068f\" id=\"u00b6068f\"><span data-lake-id=\"u0df78315\" id=\"u0df78315\">componentDidUpdate</span></code><span data-lake-id=\"ucde60acf\" id=\"ucde60acf\"> 使用，可以覆盖 </span><code data-lake-id=\"u69e2eaaa\" id=\"u69e2eaaa\"><span data-lake-id=\"uda2e88b1\" id=\"uda2e88b1\">componentWillReceiveProps</span></code><span data-lake-id=\"ud028d233\" id=\"ud028d233\"> 所有用法</span></p></blockquote><ul list=\"u3cfacf2c\" start=\"2\"><li fid=\"u1d81c2f7\" data-lake-id=\"ue19c9d7b\" id=\"ue19c9d7b\"><strong><span data-lake-id=\"ue92c0a66\" id=\"ue92c0a66\">shouldComponentUpdate</span></strong></li></ul><p data-lake-id=\"u9725bd7d\" id=\"u9725bd7d\"><span data-lake-id=\"u14bbcd17\" id=\"u14bbcd17\">返回一个布尔值，用来判断使用触发重渲染</span></p><blockquote data-lake-id=\"u50740335\" id=\"u50740335\" class=\"lake-alert lake-alert-info\"><p data-lake-id=\"u3edd6eed\" id=\"u3edd6eed\"><span data-lake-id=\"u80989b95\" id=\"u80989b95\">此方法仅作为性能优化的方式而存在。尽量使用 </span><code data-lake-id=\"ue34bd659\" id=\"ue34bd659\"><span data-lake-id=\"ub3f9b4d7\" id=\"ub3f9b4d7\">PureComponent</span></code><span data-lake-id=\"uf9b8e98f\" id=\"uf9b8e98f\"> 组件，而不是手动编写 </span><code data-lake-id=\"u6179af44\" id=\"u6179af44\"><span data-lake-id=\"ub675cb58\" id=\"ub675cb58\">shouldComponentUpdate</span></code><span data-lake-id=\"u58add520\" id=\"u58add520\">，因为 </span><code data-lake-id=\"u46e0bd76\" id=\"u46e0bd76\"><span data-lake-id=\"u998def38\" id=\"u998def38\">PureComponent</span></code><span data-lake-id=\"u0a58fbc9\" id=\"u0a58fbc9\"> 会对 </span><code data-lake-id=\"u0d2f3999\" id=\"u0d2f3999\"><span data-lake-id=\"u82110c06\" id=\"u82110c06\">props</span></code><span data-lake-id=\"u2b8e39d1\" id=\"u2b8e39d1\"> 和 </span><code data-lake-id=\"u03ced0fa\" id=\"u03ced0fa\"><span data-lake-id=\"u10ec73d1\" id=\"u10ec73d1\">state</span></code><span data-lake-id=\"ufe96140e\" id=\"ufe96140e\"> 进行浅层比较</span></p></blockquote><ul list=\"u3cfacf2c\" start=\"3\"><li fid=\"u1d81c2f7\" data-lake-id=\"u097b4693\" id=\"u097b4693\"><strong><span data-lake-id=\"uf86f04c7\" id=\"uf86f04c7\">render</span></strong></li></ul><p data-lake-id=\"u8da45e9e\" id=\"u8da45e9e\"><span data-lake-id=\"u6b2a4851\" id=\"u6b2a4851\" class=\"lake-fontsize-1515\" style=\"color: rgb(68, 68, 68)\">在更新阶段也会触发此生命周期</span></p><ul list=\"u3cfacf2c\" start=\"4\"><li fid=\"u1d81c2f7\" data-lake-id=\"u9bf97899\" id=\"u9bf97899\"><strong><span data-lake-id=\"ube20ffd3\" id=\"ube20ffd3\">getSnapshotBeforeUpdate </span></strong><card type=\"inline\" name=\"label\" value=\"data:%7B%22label%22%3A%22%E4%B8%8D%E5%B8%B8%E7%94%A8%22%2C%22colorIndex%22%3A0%2C%22id%22%3A%22nDnFH%22%7D\"></card></li></ul><p data-lake-id=\"u0d2fb1f8\" id=\"u0d2fb1f8\"><span data-lake-id=\"ub341cb46\" id=\"ub341cb46\">会在最近一次渲染输出(提交到 </span><code data-lake-id=\"u2031e7e0\" id=\"u2031e7e0\"><span data-lake-id=\"uccfd24e5\" id=\"uccfd24e5\">DOM</span></code><span data-lake-id=\"u3f7c1ddd\" id=\"u3f7c1ddd\"> 节点)之前调用。它会在组件发生更改之前从 </span><code data-lake-id=\"u5a170888\" id=\"u5a170888\"><span data-lake-id=\"ufd0befec\" id=\"ufd0befec\">DOM</span></code><span data-lake-id=\"ubecb97fd\" id=\"ubecb97fd\"> 中捕获一些信息(如：滚动位置)。此生命周期方法的任何返回值都将作为参数传递给 </span><code data-lake-id=\"u54b3604e\" id=\"u54b3604e\"><span data-lake-id=\"ucd1a0662\" id=\"ucd1a0662\">componentDidUpdate</span></code></p><blockquote data-lake-id=\"uc7c0da83\" id=\"uc7c0da83\" class=\"lake-alert lake-alert-info\"><p data-lake-id=\"uc9fa9cb8\" id=\"uc9fa9cb8\"><span data-lake-id=\"u49152276\" id=\"u49152276\">返回值会作为 </span><code data-lake-id=\"u45706377\" id=\"u45706377\"><span data-lake-id=\"u4508d086\" id=\"u4508d086\">componentDidUpdate</span></code><span data-lake-id=\"u1adeee6a\" id=\"u1adeee6a\"> 的第三个参数</span></p></blockquote><ul list=\"u3cfacf2c\" start=\"5\"><li fid=\"u1d81c2f7\" data-lake-id=\"u07e49f39\" id=\"u07e49f39\"><strong><span data-lake-id=\"ub200b98b\" id=\"ub200b98b\">componentDidUpdate</span></strong></li></ul><p data-lake-id=\"ud14ec393\" id=\"ud14ec393\"><span data-lake-id=\"u579c42f9\" id=\"u579c42f9\">会在更新后被立即调用，首次渲染将不会执行此方法。当组件更新后，可以在此处对 </span><code data-lake-id=\"u89324e2c\" id=\"u89324e2c\"><span data-lake-id=\"u7e9f9752\" id=\"u7e9f9752\">DOM</span></code><span data-lake-id=\"u2c53db74\" id=\"u2c53db74\"> 进行操作。如果对更新前后的 </span><code data-lake-id=\"u8e4a83ef\" id=\"u8e4a83ef\"><span data-lake-id=\"ue9d0c93e\" id=\"ue9d0c93e\">props</span></code><span data-lake-id=\"u5984a5c4\" id=\"u5984a5c4\"> 进行了比较，那么可以选择在此处进行网络请求</span></p><blockquote data-lake-id=\"u47972189\" id=\"u47972189\" class=\"lake-alert lake-alert-warning\"><ul list=\"u9e9e6ed7\"><li fid=\"u99becb51\" data-lake-id=\"ua342ed23\" id=\"ua342ed23\"><span data-lake-id=\"uded41549\" id=\"uded41549\">可以在该生命周期中直接调用 </span><code data-lake-id=\"udc13cb49\" id=\"udc13cb49\"><span data-lake-id=\"ue769e167\" id=\"ue769e167\">setState</span></code><span data-lake-id=\"u10bb627e\" id=\"u10bb627e\">，但 </span><code data-lake-id=\"ue4e94a6c\" id=\"ue4e94a6c\"><span data-lake-id=\"ua9ad70ce\" id=\"ua9ad70ce\">setState</span></code><span data-lake-id=\"uf629f760\" id=\"uf629f760\"> 必须被包裹在一个条件语句中，否则会导致死循环</span></li></ul><ul list=\"ua1d9f437\"><li fid=\"ub0f04eed\" data-lake-id=\"u03d28087\" id=\"u03d28087\"><span data-lake-id=\"u6890f8d5\" id=\"u6890f8d5\">如果 </span><code data-lake-id=\"ud495f14b\" id=\"ud495f14b\"><span data-lake-id=\"uf8a33ee9\" id=\"uf8a33ee9\">shouldComponentUpdate</span></code><span data-lake-id=\"ufeb8768d\" id=\"ufeb8768d\"> 返回值为 </span><code data-lake-id=\"u91618e1e\" id=\"u91618e1e\"><span data-lake-id=\"ue4c01561\" id=\"ue4c01561\">false</span></code><span data-lake-id=\"uddd952d0\" id=\"uddd952d0\">，将不会调用 </span><code data-lake-id=\"u88d7f1a4\" id=\"u88d7f1a4\"><span data-lake-id=\"u4f76e2d3\" id=\"u4f76e2d3\">componentDidUpdate</span></code></li></ul></blockquote><p data-lake-id=\"u93091c58\" id=\"u93091c58\"><strong><span data-lake-id=\"ue9d52189\" id=\"ue9d52189\">​</span></strong><br></p><blockquote data-lake-id=\"u2afb64d3\" id=\"u2afb64d3\" class=\"lake-alert lake-alert-warning\"><p data-lake-id=\"uf5f3b720\" id=\"uf5f3b720\"><strong><span data-lake-id=\"u4c991bde\" id=\"u4c991bde\" style=\"color: rgb(0, 0, 0)\">注意：下述方法即将过时，</span></strong><strong><span data-lake-id=\"ua19ad095\" id=\"ua19ad095\">在新代码中应该避免使用它们</span></strong></p><ul list=\"u328b31a3\"><li fid=\"ufcaa89cd\" data-lake-id=\"u9cbd2cc4\" id=\"u9cbd2cc4\"><a href=\"https://zh-hans.reactjs.org/docs/react-component.html#unsafe_componentwillupdate\" target=\"_blank\" data-lake-id=\"u8f24bb44\" id=\"u8f24bb44\"><span data-lake-id=\"u583f92aa\" id=\"u583f92aa\">UNSAFE_componentWillUpdate</span></a></li><li fid=\"ufcaa89cd\" data-lake-id=\"u80d05467\" id=\"u80d05467\"><a href=\"https://zh-hans.reactjs.org/docs/react-component.html#unsafe_componentwillreceiveprops\" target=\"_blank\" data-lake-id=\"u5dd0107e\" id=\"u5dd0107e\"><span data-lake-id=\"uf805604b\" id=\"uf805604b\">UNSAFE_componentWillReceiveProps</span></a></li></ul></blockquote><h2 data-lake-id=\"slP8w\" id=\"slP8w\"><span data-lake-id=\"u7f498085\" id=\"u7f498085\">卸载阶段</span></h2><ul list=\"u16719013\"><li fid=\"u88ea9276\" data-lake-id=\"u4507372b\" id=\"u4507372b\"><strong><span data-lake-id=\"udd81375b\" id=\"udd81375b\">componentWillUnmount</span></strong></li></ul><p data-lake-id=\"u60a794d6\" id=\"u60a794d6\"><span data-lake-id=\"ucc50999a\" id=\"ucc50999a\">会在组件卸载及销毁之前直接调用。通常在此方法中执行必要的清理操作，如清理定时器、取消网络请求、清除在 </span><code data-lake-id=\"u9c66648b\" id=\"u9c66648b\"><span data-lake-id=\"ua75c705b\" id=\"ua75c705b\">componentDidMount</span></code><span data-lake-id=\"ub3548103\" id=\"ub3548103\"> 中创建的订阅等</span></p><blockquote data-lake-id=\"u9cf7a91f\" id=\"u9cf7a91f\" class=\"lake-alert lake-alert-warning\"><p data-lake-id=\"u4a229d1e\" id=\"u4a229d1e\"><code data-lake-id=\"u98abc34d\" id=\"u98abc34d\"><span data-lake-id=\"ud6be33db\" id=\"ud6be33db\">componentWillUnmount</span></code><span data-lake-id=\"u3e463ca0\" id=\"u3e463ca0\"> 中不应该调用 </span><code data-lake-id=\"u30f523a3\" id=\"u30f523a3\"><span data-lake-id=\"u9cd98a3f\" id=\"u9cd98a3f\">setState</span></code><span data-lake-id=\"ucd2f204a\" id=\"ucd2f204a\">，因为该组件将永远不会重新渲染。组件实例卸载后，将永远不会再挂载它。</span></p></blockquote><h2 data-lake-id=\"UsgfN\" id=\"UsgfN\"><span data-lake-id=\"u926df6e1\" id=\"u926df6e1\">错误处理</span></h2><p data-lake-id=\"u43618e0a\" id=\"u43618e0a\"><span data-lake-id=\"u0b9b1e03\" id=\"u0b9b1e03\">当渲染过程，生命周期，或子组件的构造函数中抛出错误时，会调用如下方法：</span></p><ul list=\"u1d2e2ca3\"><li fid=\"ub5cef857\" data-lake-id=\"uf5d5adb2\" id=\"uf5d5adb2\"><strong><span data-lake-id=\"uad2538a5\" id=\"uad2538a5\">static getDerivedStateFromError</span></strong></li></ul><p data-lake-id=\"uf0c0e960\" id=\"uf0c0e960\"><span data-lake-id=\"u21e13421\" id=\"u21e13421\">此生命周期会在后代组件中抛出错误后被调用。它将抛出的错误作为参数，并返回一个值以更新 state</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22jsx%22%2C%22code%22%3A%22class%20ErrorBoundary%20extends%20React.Component%20%7B%5Cn%20%20constructor(props)%20%7B%5Cn%20%20%20%20super(props)%3B%5Cn%20%20%20%20this.state%20%3D%20%7B%20hasError%3A%20false%20%7D%3B%5Cn%20%20%7D%5Cn%5Cn%20%20static%20getDerivedStateFromError(error)%20%7B%5Cn%20%20%20%20%2F%2F%20%E6%9B%B4%E6%96%B0%20state%20%E4%BD%BF%E4%B8%8B%E4%B8%80%E6%AC%A1%E6%B8%B2%E6%9F%93%E5%8F%AF%E4%BB%A5%E6%98%BE%E9%99%8D%E7%BA%A7%20UI%5Cn%20%20%20%20return%20%7B%20hasError%3A%20true%20%7D%3B%5Cn%20%20%7D%5Cn%5Cn%20%20render()%20%7B%5Cn%20%20%20%20if%20(this.state.hasError)%20%7B%5Cn%20%20%20%20%20%20%2F%2F%20%E4%BD%A0%E5%8F%AF%E4%BB%A5%E6%B8%B2%E6%9F%93%E4%BB%BB%E4%BD%95%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9A%84%E9%99%8D%E7%BA%A7%20%20UI%5Cn%20%20%20%20%20%20return%20%3Ch1%3ESomething%20went%20wrong.%3C%2Fh1%3E%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20return%20this.props.children%3B%5Cn%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22uwYN0%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><blockquote data-lake-id=\"u13c07ac8\" id=\"u13c07ac8\" class=\"lake-alert lake-alert-warning\"><p data-lake-id=\"ufb262fdf\" id=\"ufb262fdf\"><strong><span data-lake-id=\"u3e89607e\" id=\"u3e89607e\" style=\"color: rgb(0, 0, 0)\">注意：</span></strong><code data-lake-id=\"u89d347bf\" id=\"u89d347bf\"><span data-lake-id=\"uf93cb2b7\" id=\"uf93cb2b7\" style=\"color: rgb(26, 26, 26)\">getDerivedStateFromError</span></code><span data-lake-id=\"u89eb2faa\" id=\"u89eb2faa\" style=\"color: rgb(0, 0, 0)\"> 会在</span><span data-lake-id=\"ud7dbf9ec\" id=\"ud7dbf9ec\" style=\"color: rgb(26, 26, 26)\">渲染</span><span data-lake-id=\"u215cdece\" id=\"u215cdece\" style=\"color: rgb(0, 0, 0)\">阶段调用，因此</span><strong><span data-lake-id=\"u781a7c1e\" id=\"u781a7c1e\" style=\"color: rgba(54,137,85,1)\">不允许执行副作用</span></strong><span data-lake-id=\"u51584410\" id=\"u51584410\" style=\"color: rgb(0, 0, 0)\">。 如遇此类情况，请改用 </span><code data-lake-id=\"ubf4a27ae\" id=\"ubf4a27ae\"><span data-lake-id=\"u8a1326ce\" id=\"u8a1326ce\" style=\"color: rgb(26, 26, 26)\">componentDidCatch</span></code></p></blockquote><ul list=\"u1d2e2ca3\" start=\"2\"><li fid=\"ub5cef857\" data-lake-id=\"u81738f8c\" id=\"u81738f8c\"><strong><span data-lake-id=\"ub0c67975\" id=\"ub0c67975\">componentDidCatch</span></strong></li></ul><p data-lake-id=\"u6ecfa386\" id=\"u6ecfa386\"><span data-lake-id=\"u98fa1036\" id=\"u98fa1036\">此生命周期在后代组件抛出错误后被调用。它接收两个参数：</span><code data-lake-id=\"u1953b61f\" id=\"u1953b61f\"><span data-lake-id=\"u2c8dfc25\" id=\"u2c8dfc25\">error</span></code><span data-lake-id=\"u8723e9e6\" id=\"u8723e9e6\">(抛出的错误)，</span><code data-lake-id=\"ub2e595a0\" id=\"ub2e595a0\"><span data-lake-id=\"ua0a12b2c\" id=\"ua0a12b2c\">info</span></code><span data-lake-id=\"u13653e35\" id=\"u13653e35\">(带有 </span><code data-lake-id=\"u7d3b9f76\" id=\"u7d3b9f76\"><span data-lake-id=\"u1aff6d1d\" id=\"u1aff6d1d\">componentStack key</span></code><span data-lake-id=\"u6ece7e14\" id=\"u6ece7e14\"> 的对象，其中包含有关组件引发错误的栈信息)。</span><code data-lake-id=\"udbb09cd6\" id=\"udbb09cd6\"><span data-lake-id=\"u40cfca86\" id=\"u40cfca86\">componentDidCatch</span></code><span data-lake-id=\"uf7ec5d3a\" id=\"uf7ec5d3a\"> 会在 “提交” 阶段被调用，因此</span><strong><span data-lake-id=\"uf5e7c96e\" id=\"uf5e7c96e\" style=\"color: rgba(54,137,85,1)\">允许执行副作用</span></strong><span data-lake-id=\"ube6e1d34\" id=\"ube6e1d34\">。通常用于记录错误之类的情况</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22jsx%22%2C%22code%22%3A%22class%20ErrorBoundary%20extends%20React.Component%20%7B%5Cn%20%20constructor(props)%20%7B%5Cn%20%20%20%20super(props)%3B%5Cn%20%20%20%20this.state%20%3D%20%7B%20hasError%3A%20false%20%7D%3B%5Cn%20%20%7D%5Cn%5Cn%20%20static%20getDerivedStateFromError(error)%20%7B%5Cn%20%20%20%20%2F%2F%20%E6%9B%B4%E6%96%B0%20state%20%E4%BD%BF%E4%B8%8B%E4%B8%80%E6%AC%A1%E6%B8%B2%E6%9F%93%E5%8F%AF%E4%BB%A5%E6%98%BE%E7%A4%BA%E9%99%8D%E7%BA%A7%20UI%5Cn%20%20%20%20return%20%7B%20hasError%3A%20true%20%7D%3B%5Cn%20%20%7D%5Cn%5Cn%20%20componentDidCatch(error%2C%20info)%20%7B%5Cn%20%20%20%20%2F%2F%20%5C%22%E7%BB%84%E4%BB%B6%E5%A0%86%E6%A0%88%5C%22%20%E4%BE%8B%E5%AD%90%3A%5Cn%20%20%20%20%2F%2F%20%20%20in%20ComponentThatThrows%20(created%20by%20App)%5Cn%20%20%20%20%2F%2F%20%20%20in%20ErrorBoundary%20(created%20by%20App)%5Cn%20%20%20%20%2F%2F%20%20%20in%20div%20(created%20by%20App)%5Cn%20%20%20%20%2F%2F%20%20%20in%20App%5Cn%20%20%20%20logComponentStackToMyService(info.componentStack)%3B%5Cn%20%20%7D%5Cn%5Cn%20%20render()%20%7B%5Cn%20%20%20%20if%20(this.state.hasError)%20%7B%5Cn%20%20%20%20%20%20%2F%2F%20%E4%BD%A0%E5%8F%AF%E4%BB%A5%E6%B8%B2%E6%9F%93%E4%BB%BB%E4%BD%95%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9A%84%E9%99%8D%E7%BA%A7%20UI%5Cn%20%20%20%20%20%20return%20%3Ch1%3ESomething%20went%20wrong.%3C%2Fh1%3E%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20return%20this.props.children%3B%5Cn%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22Iq96E%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u279c8fdb\" id=\"u279c8fdb\"><strong><span data-lake-id=\"ubc79195a\" id=\"ubc79195a\" style=\"color: rgba(54,137,85,1)\">在开发模式下，错误会冒泡至 window</span></strong><span data-lake-id=\"ude521d55\" id=\"ude521d55\">。这意味着任何 </span><code data-lake-id=\"uc6534483\" id=\"uc6534483\"><span data-lake-id=\"u045a890b\" id=\"u045a890b\">window.onerror</span></code><span data-lake-id=\"u462a9e62\" id=\"u462a9e62\"> 或 </span><code data-lake-id=\"udc81cdd5\" id=\"udc81cdd5\"><span data-lake-id=\"u45540f75\" id=\"u45540f75\">window.addEventListener('error', callback)</span></code><span data-lake-id=\"ucaaf2b4b\" id=\"ucaaf2b4b\"> 会中断这些已经被 </span><code data-lake-id=\"u17a7c94a\" id=\"u17a7c94a\"><span data-lake-id=\"u7a943124\" id=\"u7a943124\">componentDidCatch</span></code><span data-lake-id=\"u9bc6302b\" id=\"u9bc6302b\"> 捕获的错误。</span></p><p data-lake-id=\"ue0220660\" id=\"ue0220660\"><strong><span data-lake-id=\"u7aaddfd2\" id=\"u7aaddfd2\" style=\"color: rgba(54,137,85,1)\">在生产模式下，错误不会冒泡</span></strong><span data-lake-id=\"u99702ccd\" id=\"u99702ccd\">。这意味着任何根错误处理器只会接受那些没有显示地被 </span><code data-lake-id=\"uba0d2491\" id=\"uba0d2491\"><span data-lake-id=\"uc0c9d16c\" id=\"uc0c9d16c\">componentDidCatch</span></code><span data-lake-id=\"ufece5d6d\" id=\"ufece5d6d\"> 捕获的错误</span></p><blockquote data-lake-id=\"u9b7cdbff\" id=\"u9b7cdbff\" class=\"lake-alert lake-alert-warning\"><p data-lake-id=\"u22f93122\" id=\"u22f93122\"><strong><span data-lake-id=\"u6d9936db\" id=\"u6d9936db\">注意：</span></strong><span data-lake-id=\"u07e1b986\" id=\"u07e1b986\">如果发生错误，可以通过调用 </span><code data-lake-id=\"u2cec618c\" id=\"u2cec618c\"><span data-lake-id=\"u7e4f3539\" id=\"u7e4f3539\">setState</span></code><span data-lake-id=\"u44461ddd\" id=\"u44461ddd\"> 使用 </span><code data-lake-id=\"udaa7f201\" id=\"udaa7f201\"><span data-lake-id=\"ufaaf9f31\" id=\"ufaaf9f31\">componentDidCatch</span></code><span data-lake-id=\"u4b022a40\" id=\"u4b022a40\"> 渲染降级 </span><code data-lake-id=\"uc9d89e5b\" id=\"uc9d89e5b\"><span data-lake-id=\"u2fa2eb04\" id=\"u2fa2eb04\">UI</span></code><span data-lake-id=\"ua1502632\" id=\"ua1502632\">，但在未来的版本中将不推荐这样做。可以使用静态方法 </span><code data-lake-id=\"u3f4fd5d2\" id=\"u3f4fd5d2\"><span data-lake-id=\"u2a74b51c\" id=\"u2a74b51c\">getDerivedStateFromError</span></code><span data-lake-id=\"u93e69fc1\" id=\"u93e69fc1\"> 来处理降级渲染</span></p></blockquote><h2 data-lake-id=\"sHTVD\" id=\"sHTVD\"><span data-lake-id=\"u1d6bf441\" id=\"u1d6bf441\">总结</span></h2><p data-lake-id=\"ud4b7ee6a\" id=\"ud4b7ee6a\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2022%2Fpng%2F732231%2F1646657220993-91518caa-70c1-4b94-bbe2-0736dcc4103f.png%22%2C%22taskId%22%3A%22u541cfc9b-4590-4962-bcad-4df6526427f%22%2C%22clientId%22%3A%22ubaa79684-21e9-4%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A425%2C%22height%22%3A385%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A97736%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A850%2C%22originHeight%22%3A770%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22CONSTRUCTOR%20GETDERIVEDSTATEFROMPROPS%20%E7%BB%84%E4%BB%B6%E8%A3%85%E8%BD%BD(MOUNT)%20RENDER%20COMPONENTDIDMOUNT%20GETDERIVEDSTATEFROMPROPS%20SHOULDCOMPONENTUPDATE%20REACT%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%20%E7%BB%84%E4%BB%B6%E6%9B%B4%E6%96%B0(UPDATE)%20RENDER%20GETSNAPSHOTBEFOREUPDATE%20COMPONENTDIDUPDATE%20%E7%BB%84%E4%BB%B6%E5%8D%B8%E8%BD%BD(UNMOUNT)%20COMPONENTWILLUNMOUNT%20%E7%A8%80%E5%9C%9F%E6%8D%86%E9%87%91%E6%8A%80%E6%9C%AF%E7%A4%BE%E5%8C%BA%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A518.1352%2C%22y%22%3A59.273136%2C%22width%22%3A114.37459999999999%2C%22height%22%3A16.497904%2C%22text%22%3A%22CONSTRUCTOR%22%7D%2C%7B%22x%22%3A516.2401%2C%22y%22%3A118.861855%2C%22width%22%3A268.23176%2C%22height%22%3A20.075294999999997%2C%22text%22%3A%22GETDERIVEDSTATEFROMPROPS%22%7D%2C%7B%22x%22%3A267.66418%2C%22y%22%3A148.75319%2C%22width%22%3A175.1875%2C%22height%22%3A19.710980000000006%2C%22text%22%3A%22%E7%BB%84%E4%BB%B6%E8%A3%85%E8%BD%BD(MOUNT)%22%7D%2C%7B%22x%22%3A518.01697%2C%22y%22%3A181.82375%2C%22width%22%3A64.04792999999995%2C%22height%22%3A15.135370000000023%2C%22text%22%3A%22RENDER%22%7D%2C%7B%22x%22%3A516.2057%2C%22y%22%3A240.25024%2C%22width%22%3A210.25554%2C%22height%22%3A21.12894000000003%2C%22text%22%3A%22COMPONENTDIDMOUNT%22%7D%2C%7B%22x%22%3A522.93066%2C%22y%22%3A301.9703%2C%22width%22%3A267.18926999999996%2C%22height%22%3A20.447459999999978%2C%22text%22%3A%22GETDERIVEDSTATEFROMPROPS%22%7D%2C%7B%22x%22%3A523.7288%2C%22y%22%3A363.4718%2C%22width%22%3A252.58204999999998%2C%22height%22%3A18.678960000000018%2C%22text%22%3A%22SHOULDCOMPONENTUPDATE%22%7D%2C%7B%22x%22%3A64.02943%2C%22y%22%3A399.57864%2C%22width%22%3A135.43725999999998%2C%22height%22%3A22.15210000000002%2C%22text%22%3A%22REACT%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%22%7D%2C%7B%22x%22%3A268.38376%2C%22y%22%3A423.1%2C%22width%22%3A180.57641%2C%22height%22%3A21.141849999999977%2C%22text%22%3A%22%E7%BB%84%E4%BB%B6%E6%9B%B4%E6%96%B0(UPDATE)%22%7D%2C%7B%22x%22%3A524.1175%2C%22y%22%3A426.65182%2C%22width%22%3A65.0108600000001%2C%22height%22%3A15.930180000000007%2C%22text%22%3A%22RENDER%22%7D%2C%7B%22x%22%3A522.59906%2C%22y%22%3A487.18335%2C%22width%22%3A262.51464%2C%22height%22%3A19.964689999999962%2C%22text%22%3A%22GETSNAPSHOTBEFOREUPDATE%22%7D%2C%7B%22x%22%3A522.6522%2C%22y%22%3A548.0225%2C%22width%22%3A217.81380000000001%2C%22height%22%3A21.653459999999995%2C%22text%22%3A%22COMPONENTDIDUPDATE%22%7D%2C%7B%22x%22%3A267.62137%2C%22y%22%3A605.2946%2C%22width%22%3A201.83636%2C%22height%22%3A21.373550000000023%2C%22text%22%3A%22%E7%BB%84%E4%BB%B6%E5%8D%B8%E8%BD%BD(UNMOUNT)%22%7D%2C%7B%22x%22%3A543.5461%2C%22y%22%3A607.9972%2C%22width%22%3A240.51099999999997%2C%22height%22%3A18.981699999999933%2C%22text%22%3A%22COMPONENTWILLUNMOUNT%22%7D%2C%7B%22x%22%3A683.85547%2C%22y%22%3A729.6841%2C%22width%22%3A145.65283%2C%22height%22%3A18.4448000000001%2C%22text%22%3A%22%E7%A8%80%E5%9C%9F%E6%8D%86%E9%87%91%E6%8A%80%E6%9C%AF%E7%A4%BE%E5%8C%BA%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22id%22%3A%22xy4vz%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><h3 data-lake-id=\"sBapQ\" id=\"sBapQ\"><span data-lake-id=\"u5f2da496\" id=\"u5f2da496\">不能使用 setState 的生命周期</span></h3><p data-lake-id=\"u0d099ddb\" id=\"u0d099ddb\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2022%2Fpng%2F732231%2F1646657408225-53c606d8-ddbb-4f56-a3f4-f56c6bd896c3.png%22%2C%22taskId%22%3A%22ue9bebb71-ad98-46dd-990b-8cd004700ee%22%2C%22clientId%22%3A%22ubaa79684-21e9-4%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A652%2C%22height%22%3A409%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A302728%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A1304%2C%22originHeight%22%3A818%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%E5%8D%B8%E8%BD%BD%E6%97%B6%20%E6%9B%B4%E6%96%B0%E6%97%B6%20%E5%88%9B%E5%BB%BA%E6%97%B6%20FORCEUPDATE()%20SETSTATE()%20NEW%20PROPS%20CONSTRUCTOR%20GETDERIVEDSTATEFROMPROPS%20SHOULDCOMPONENTUPDATE%20RENDER%20GETSNAPSHOTBEFOREUPDATE%20REACT%E6%9B%B4%E6%96%B0DOM%E5%92%8CREFS%20COMPONENTWILLUNMOUNT%20COMPONENTDIDMOUNT%20COMPONENTDIDUPDATE%20%40%E7%A8%80%E5%9C%9F%E6%8E%98%E9%87%91%E6%8A%80%E6%9C%AF%E7%A4%BE%E5%8C%BA%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A1000.97156%2C%22y%22%3A32.34176%2C%22width%22%3A95.28224%2C%22height%22%3A32.914725%2C%22text%22%3A%22%E5%8D%B8%E8%BD%BD%E6%97%B6%22%7D%2C%7B%22x%22%3A556.898%2C%22y%22%3A33.363808%2C%22width%22%3A94.8501%2C%22height%22%3A33.375442%2C%22text%22%3A%22%E6%9B%B4%E6%96%B0%E6%97%B6%22%7D%2C%7B%22x%22%3A128.22029%2C%22y%22%3A33.56271%2C%22width%22%3A94.87476999999998%2C%22height%22%3A32.95275999999999%2C%22text%22%3A%22%E5%88%9B%E5%BB%BA%E6%97%B6%22%7D%2C%7B%22x%22%3A703.6907%2C%22y%22%3A151.12498%2C%22width%22%3A123.45230000000004%2C%22height%22%3A22.541840000000008%2C%22text%22%3A%22FORCEUPDATE()%22%7D%2C%7B%22x%22%3A564.6784%2C%22y%22%3A152.57866%2C%22width%22%3A89.25829999999996%2C%22height%22%3A20.843459999999993%2C%22text%22%3A%22SETSTATE()%22%7D%2C%7B%22x%22%3A400.78748%2C%22y%22%3A152.6819%2C%22width%22%3A95.90821999999997%2C%22height%22%3A18.822189999999978%2C%22text%22%3A%22NEW%20PROPS%22%7D%2C%7B%22x%22%3A114.16296%2C%22y%22%3A151.74617%2C%22width%22%3A122.22052%2C%22height%22%3A18.344210000000004%2C%22text%22%3A%22CONSTRUCTOR%22%7D%2C%7B%22x%22%3A304.17697%2C%22y%22%3A251.24757%2C%22width%22%3A269.56369000000007%2C%22height%22%3A21.398270000000025%2C%22text%22%3A%22GETDERIVEDSTATEFROMPROPS%22%7D%2C%7B%22x%22%3A398.90634%2C%22y%22%3A347.24512%2C%22width%22%3A253.60172%2C%22height%22%3A19.675659999999993%2C%22text%22%3A%22SHOULDCOMPONENTUPDATE%22%7D%2C%7B%22x%22%3A404.9203%2C%22y%22%3A444.51483%2C%22width%22%3A71.52850000000001%2C%22height%22%3A20.66596999999996%2C%22text%22%3A%22RENDER%22%7D%2C%7B%22x%22%3A471.9344%2C%22y%22%3A539.65875%2C%22width%22%3A265.11186%2C%22height%22%3A22.60351999999989%2C%22text%22%3A%22GETSNAPSHOTBEFOREUPDATE%22%7D%2C%7B%22x%22%3A326.42282%2C%22y%22%3A637.99023%2C%22width%22%3A230.93898000000002%2C%22height%22%3A22.849919999999997%2C%22text%22%3A%22REACT%E6%9B%B4%E6%96%B0DOM%E5%92%8CREFS%22%7D%2C%7B%22x%22%3A924.7148%2C%22y%22%3A739.224%2C%22width%22%3A250.7886000000001%2C%22height%22%3A19.478149999999914%2C%22text%22%3A%22COMPONENTWILLUNMOUNT%22%7D%2C%7B%22x%22%3A68.18383%2C%22y%22%3A740.62805%2C%22width%22%3A216.77744%2C%22height%22%3A17.360779999999977%2C%22text%22%3A%22COMPONENTDIDMOUNT%22%7D%2C%7B%22x%22%3A491.7081%2C%22y%22%3A739.58044%2C%22width%22%3A225.75309999999996%2C%22height%22%3A19.800460000000044%2C%22text%22%3A%22COMPONENTDIDUPDATE%22%7D%2C%7B%22x%22%3A1122.6349%2C%22y%22%3A774.8452%2C%22width%22%3A161.51340000000005%2C%22height%22%3A20.504099999999994%2C%22text%22%3A%22%40%E7%A8%80%E5%9C%9F%E6%8E%98%E9%87%91%E6%8A%80%E6%9C%AF%E7%A4%BE%E5%8C%BA%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22id%22%3A%22u6da471ae%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><blockquote data-lake-id=\"u0e0bea1d\" id=\"u0e0bea1d\" class=\"lake-alert lake-alert-warning\"><p data-lake-id=\"u4fda14a8\" id=\"u4fda14a8\"><span data-lake-id=\"uf6459278\" id=\"uf6459278\" class=\"lake-fontsize-12\" style=\"color: rgb(51, 51, 51)\">其中打 </span><strong><span data-lake-id=\"u75451c9e\" id=\"u75451c9e\" class=\"lake-fontsize-12\" style=\"color: rgb(51, 51, 51)\">❌ </span></strong><span data-lake-id=\"u5b39c563\" id=\"u5b39c563\" class=\"lake-fontsize-12\" style=\"color: rgb(51, 51, 51)\">的是不能使用 setState 的，打 ✅ 的是能用 setState 的</span></p></blockquote><h3 data-lake-id=\"t7fn1\" id=\"t7fn1\"><span data-lake-id=\"u15f8edc9\" id=\"u15f8edc9\">state 触发更新的生命周期</span></h3><ol list=\"u24b1599b\"><li fid=\"u005b45d1\" data-lake-id=\"ub426d614\" id=\"ub426d614\"><code data-lake-id=\"ufdc5f38b\" id=\"ufdc5f38b\"><span data-lake-id=\"u911fcf0b\" id=\"u911fcf0b\">shouldComponentUpdate</span></code></li><li fid=\"u005b45d1\" data-lake-id=\"u28f4d5a2\" id=\"u28f4d5a2\"><code data-lake-id=\"u25d5adfe\" id=\"u25d5adfe\"><span data-lake-id=\"u92e217cf\" id=\"u92e217cf\">componentWillUpdate</span></code></li><li fid=\"u005b45d1\" data-lake-id=\"u75ed075a\" id=\"u75ed075a\"><code data-lake-id=\"u8fbd0693\" id=\"u8fbd0693\"><span data-lake-id=\"u27ad8e0e\" id=\"u27ad8e0e\">componentDidUpdate</span></code></li></ol><h3 data-lake-id=\"rMqtD\" id=\"rMqtD\"><span data-lake-id=\"u787067c8\" id=\"u787067c8\">props 触发更新的生命周期</span></h3><ol list=\"u998fc1f4\"><li fid=\"u57ecf9c0\" data-lake-id=\"u46dc8416\" id=\"u46dc8416\"><code data-lake-id=\"u4b7df664\" id=\"u4b7df664\"><span data-lake-id=\"ue9c08d54\" id=\"ue9c08d54\" class=\"lake-fontsize-1515\" style=\"color: rgb(56, 56, 56)\">shouldComponentUpdate</span></code></li><li fid=\"u57ecf9c0\" data-lake-id=\"u4519ea96\" id=\"u4519ea96\"><code data-lake-id=\"u1ab5f0b8\" id=\"u1ab5f0b8\"><span data-lake-id=\"ueedf13fa\" id=\"ueedf13fa\" class=\"lake-fontsize-1515\" style=\"color: rgb(56, 56, 56)\">componentWillUpdate</span></code></li><li fid=\"u57ecf9c0\" data-lake-id=\"u47186607\" id=\"u47186607\"><code data-lake-id=\"uc697bb1f\" id=\"uc697bb1f\"><span data-lake-id=\"u8bb8b0a6\" id=\"u8bb8b0a6\" class=\"lake-fontsize-1515\" style=\"color: rgb(56, 56, 56)\">componentDidUpdate</span></code></li><li fid=\"u57ecf9c0\" data-lake-id=\"u13351b06\" id=\"u13351b06\"><code data-lake-id=\"u4da517dd\" id=\"u4da517dd\"><span data-lake-id=\"ub3577b6b\" id=\"ub3577b6b\" class=\"lake-fontsize-1515\" style=\"color: rgb(56, 56, 56)\">static componentWillReceiveProps</span></code></li></ol>",
  "body_draft_lake": "",
  "public": 0,
  "status": 1,
  "view_status": 0,
  "read_status": 1,
  "likes_count": 0,
  "comments_count": 0,
  "content_updated_at": "2022-05-29T20:46:02.000Z",
  "deleted_at": null,
  "created_at": "2022-04-04T11:32:45.000Z",
  "updated_at": "2022-05-29T20:46:02.000Z",
  "published_at": "2022-05-29T20:46:02.000Z",
  "first_published_at": "2022-04-04T11:32:44.970Z",
  "word_count": 1659,
  "cover": "https://cdn.nlark.com/yuque/0/2022/png/732231/1646657266595-d9e4c515-733d-4d3c-ba45-eb78b06b74a5.png",
  "description": "官方图解执行过程：挂载阶段，首先执行 constructor 构造方法，来创建组件创建完成之后，就会执行 render 方法，该方法会返回需要渲染的内容随后，React 会将需要渲染的内容挂载到 DOM 树上挂载完成之后就会执行 componentDidMount 生命周期函数如果我们给组件创...",
  "custom_description": null,
  "hits": 0,
  "_serializer": "v2.doc_detail"
}