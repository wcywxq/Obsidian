{
  "id": 74888813,
  "slug": "nt0p86",
  "title": "事件相关",
  "book_id": 26225124,
  "book": {
    "id": 26225124,
    "type": "Book",
    "slug": "mxunh7",
    "name": "八股文 eight-part essay writing",
    "user_id": 732231,
    "description": "前端八股文",
    "creator_id": 732231,
    "public": 0,
    "items_count": 239,
    "likes_count": 0,
    "watches_count": 1,
    "content_updated_at": "2023-11-11T18:15:57.023Z",
    "updated_at": "2023-11-11T18:15:57.000Z",
    "created_at": "2022-04-04T11:31:45.000Z",
    "namespace": "wcywxq/mxunh7",
    "user": {
      "id": 732231,
      "type": "User",
      "login": "wcywxq",
      "name": "magic",
      "description": null,
      "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/732231/1606968271774-avatar/886ad88b-d2cc-4c9e-a674-f70eb51a679c.png",
      "books_count": 18,
      "public_books_count": 0,
      "followers_count": 0,
      "following_count": 0,
      "created_at": "2020-01-08T14:21:31.000Z",
      "updated_at": "2023-11-13T09:32:35.000Z",
      "_serializer": "v2.user"
    },
    "_serializer": "v2.book"
  },
  "user_id": 732231,
  "creator": {
    "id": 732231,
    "type": "User",
    "login": "wcywxq",
    "name": "magic",
    "description": null,
    "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/732231/1606968271774-avatar/886ad88b-d2cc-4c9e-a674-f70eb51a679c.png",
    "books_count": 18,
    "public_books_count": 0,
    "followers_count": 0,
    "following_count": 0,
    "created_at": "2020-01-08T14:21:31.000Z",
    "updated_at": "2023-11-13T09:32:35.000Z",
    "_serializer": "v2.user"
  },
  "format": "lake",
  "body": "<a name=\"E5yo3\"></a>\n## on 和 addEventListener 区别\n- addEventListener 可以给一个事件注册多个 listener，而 on 在同一时间只能指向唯一对象\n- addEventListener 对任何 DOM 都是有效的，而 onclick 仅限于 html\n- on 事件解绑需要将其设置为 none，而 addEventListener 需要使用 removeEventListener\n<a name=\"Hs9Sz\"></a>\n### 例子\n```javascript\nwindow.onload = function () {\n  const container = document.querySelector('#container')\n  container.onclick = function () {\n    console.log('first onclick event')\n  }\n  container.onclick = function () {\n    console.log('second onclick event')\n  }\n}\n\n// 执行 -> second onclick event\n\n// on 绑定\nwindow.onresize = function () {}\n// on 解绑\t\n```\n```javascript\nwindow.onload = function () {\n  const container = document.querySelector('#container')\n  container.addEventListener('click', function () {\n     console.log('first onclick event')\n  }, false)\n  container.addEventListener('click', function () {\n     console.log('second onclick event')\n  }, false)\n}\n\n// 执行 -> first onclick event\n// 执行 -> second onclick event\n```\n<a name=\"Gl0La\"></a>\n## 事件冒泡和事件捕获\n`addEventListener`函数的第三个参数默认为 `false`，也就是允许冒泡，如果改为 `true`，那么就只会在捕获阶段执行\n<a name=\"ythef\"></a>\n### 事件冒泡\n\n- 执行顺序：自底向上。(`目标元素 -> window`)\n- 案例：\n```javascript\nwindow.addEventListener('click', () => {\n\t// 事件触发顺序为冒泡顺序\n}) // 第三个参数默认为 false\n```\n<a name=\"e41oA\"></a>\n### 事件捕获\n\n- 执行顺序：自顶向下。(`window -> 目标元素`)\n- 案例：\n```javascript\nwindow.addEventListener('click', () => {\n\t// 事件触发顺序为捕获顺序\n}, true)\n```\n<a name=\"VzJmc\"></a>\n### 事件的执行顺序\n\n1. 事件捕获，从 `window -> document` 依次向下执行\n2. 处理目标事件\n3. 事件冒泡\n<a name=\"KaMr4\"></a>\n### 应用场景\n\n- 事件委托(事件代理)\n<a name=\"joDIp\"></a>\n## 原生自定义事件\n通过两个构造函数可以实现原生的自定义事件：`new CustomEvent` 和 `new Event`\n<a name=\"Sv8Ta\"></a>\n### new Event\n第一个参数是事件名称，第二个参数是修饰符，通过 `dispatchEvent`派发，`addEventListener`调用\n```javascript\nlet event = new Event('xx', { cancelable: false, bubbles: true })\ndocument.dispatchEvent(event)\n```\n<a name=\"xucug\"></a>\n### new CustomEvent\n接收三个参数：第一个是事件名称，第二个参数是 `detail`，是一个对象，内部是参数键值对，通过 `e.detail`拿到传递的参数\n```javascript\nlet event = new CustomEvent('xx', detail: { 要传的参数 }, {\n  cancelable: false,\n  bubbles: true\n})\ndocument.dispatchEvent(event)\n```\n",
  "body_draft": "",
  "body_html": "<!doctype html><div class=\"lake-content\" typography=\"classic\"><h2 id=\"E5yo3\"><span class=\"ne-text\">on 和 addEventListener 区别</span></h2><ul class=\"ne-ul\"><li id=\"ub25c4404\"><span class=\"ne-text\">addEventListener 可以给一个事件注册多个 listener，而 on 在同一时间只能指向唯一对象</span></li><li id=\"u6aa8627c\"><span class=\"ne-text\">addEventListener 对任何 DOM 都是有效的，而 onclick 仅限于 html</span></li><li id=\"u6a770853\"><span class=\"ne-text\">on 事件解绑需要将其设置为 none，而 addEventListener 需要使用 removeEventListener</span></li></ul><h3 id=\"Hs9Sz\"><span class=\"ne-text\">例子</span></h3><pre data-language=\"javascript\" id=\"AGkED\" class=\"ne-codeblock language-javascript\">window.onload = function () {\n  const container = document.querySelector('#container')\n  container.onclick = function () {\n    console.log('first onclick event')\n  }\n  container.onclick = function () {\n    console.log('second onclick event')\n  }\n}\n\n// 执行 -&gt; second onclick event\n\n// on 绑定\nwindow.onresize = function () {}\n// on 解绑\t</pre><pre data-language=\"javascript\" id=\"PRyJg\" class=\"ne-codeblock language-javascript\">window.onload = function () {\n  const container = document.querySelector('#container')\n  container.addEventListener('click', function () {\n     console.log('first onclick event')\n  }, false)\n  container.addEventListener('click', function () {\n     console.log('second onclick event')\n  }, false)\n}\n\n// 执行 -&gt; first onclick event\n// 执行 -&gt; second onclick event</pre><h2 id=\"Gl0La\"><span class=\"ne-text\">事件冒泡和事件捕获</span></h2><p id=\"ub599f1b9\" class=\"ne-p\"><code class=\"ne-code\"><span class=\"ne-text\">addEventListener</span></code><span class=\"ne-text\">函数的第三个参数默认为 </span><code class=\"ne-code\"><span class=\"ne-text\">false</span></code><span class=\"ne-text\">，也就是允许冒泡，如果改为 </span><code class=\"ne-code\"><span class=\"ne-text\">true</span></code><span class=\"ne-text\">，那么就只会在捕获阶段执行</span></p><h3 id=\"ythef\"><span class=\"ne-text\">事件冒泡</span></h3><ul class=\"ne-ul\"><li id=\"uab63be34\"><span class=\"ne-text\">执行顺序：自底向上。(</span><code class=\"ne-code\"><span class=\"ne-text\">目标元素 -&gt; window</span></code><span class=\"ne-text\">)</span></li><li id=\"u9b978b03\"><span class=\"ne-text\">案例：</span></li></ul><pre data-language=\"javascript\" id=\"pyP0f\" class=\"ne-codeblock language-javascript\">window.addEventListener('click', () =&gt; {\n\t// 事件触发顺序为冒泡顺序\n}) // 第三个参数默认为 false</pre><h3 id=\"e41oA\"><span class=\"ne-text\">事件捕获</span></h3><ul class=\"ne-ul\"><li id=\"ud5a7a1d1\"><span class=\"ne-text\">执行顺序：自顶向下。(</span><code class=\"ne-code\"><span class=\"ne-text\">window -&gt; 目标元素</span></code><span class=\"ne-text\">)</span></li><li id=\"u14f5e394\"><span class=\"ne-text\">案例：</span></li></ul><pre data-language=\"javascript\" id=\"oPHmc\" class=\"ne-codeblock language-javascript\">window.addEventListener('click', () =&gt; {\n\t// 事件触发顺序为捕获顺序\n}, true)</pre><h3 id=\"VzJmc\"><span class=\"ne-text\">事件的执行顺序</span></h3><ol class=\"ne-ol\"><li id=\"u7cde6c35\"><span class=\"ne-text\">事件捕获，从 </span><code class=\"ne-code\"><span class=\"ne-text\">window -&gt; document</span></code><span class=\"ne-text\"> 依次向下执行</span></li><li id=\"u5cc5ea61\"><span class=\"ne-text\">处理目标事件</span></li><li id=\"u3d6a6d60\"><span class=\"ne-text\">事件冒泡</span></li></ol><h3 id=\"KaMr4\"><span class=\"ne-text\">应用场景</span></h3><ul class=\"ne-ul\"><li id=\"u0f811279\"><span class=\"ne-text\">事件委托(事件代理)</span></li></ul><h2 id=\"joDIp\"><span class=\"ne-text\">原生自定义事件</span></h2><p id=\"u702c61bf\" class=\"ne-p\"><span class=\"ne-text\">通过两个构造函数可以实现原生的自定义事件：</span><code class=\"ne-code\"><span class=\"ne-text\">new CustomEvent</span></code><span class=\"ne-text\"> 和 </span><code class=\"ne-code\"><span class=\"ne-text\">new Event</span></code></p><h3 id=\"Sv8Ta\"><span class=\"ne-text\">new Event</span></h3><p id=\"u8b313d25\" class=\"ne-p\"><span class=\"ne-text\">第一个参数是事件名称，第二个参数是修饰符，通过 </span><code class=\"ne-code\"><span class=\"ne-text\">dispatchEvent</span></code><span class=\"ne-text\">派发，</span><code class=\"ne-code\"><span class=\"ne-text\">addEventListener</span></code><span class=\"ne-text\">调用</span></p><pre data-language=\"javascript\" id=\"K2LaT\" class=\"ne-codeblock language-javascript\">let event = new Event('xx', { cancelable: false, bubbles: true })\ndocument.dispatchEvent(event)</pre><h3 id=\"xucug\"><span class=\"ne-text\">new CustomEvent</span></h3><p id=\"u6d434178\" class=\"ne-p\"><span class=\"ne-text\">接收三个参数：第一个是事件名称，第二个参数是 </span><code class=\"ne-code\"><span class=\"ne-text\">detail</span></code><span class=\"ne-text\">，是一个对象，内部是参数键值对，通过 </span><code class=\"ne-code\"><span class=\"ne-text\">e.detail</span></code><span class=\"ne-text\">拿到传递的参数</span></p><pre data-language=\"javascript\" id=\"ichAK\" class=\"ne-codeblock language-javascript\">let event = new CustomEvent('xx', detail: { 要传的参数 }, {\n  cancelable: false,\n  bubbles: true\n})\ndocument.dispatchEvent(event)</pre></div>",
  "body_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"viewport\" content=\"adapt\" /><h2 data-lake-id=\"E5yo3\" id=\"E5yo3\"><span data-lake-id=\"u06ea81be\" id=\"u06ea81be\">on 和 addEventListener 区别</span></h2><ul list=\"u05158289\"><li fid=\"u211fd23b\" data-lake-id=\"ub25c4404\" id=\"ub25c4404\"><span data-lake-id=\"u9fe85573\" id=\"u9fe85573\">addEventListener 可以给一个事件注册多个 listener，而 on 在同一时间只能指向唯一对象</span></li><li fid=\"u211fd23b\" data-lake-id=\"u6aa8627c\" id=\"u6aa8627c\"><span data-lake-id=\"ud111a71d\" id=\"ud111a71d\">addEventListener 对任何 DOM 都是有效的，而 onclick 仅限于 html</span></li><li fid=\"u211fd23b\" data-lake-id=\"u6a770853\" id=\"u6a770853\"><span data-lake-id=\"ua16321b4\" id=\"ua16321b4\">on 事件解绑需要将其设置为 none，而 addEventListener 需要使用 removeEventListener</span></li></ul><h3 data-lake-id=\"Hs9Sz\" id=\"Hs9Sz\"><span data-lake-id=\"u0ecc34a5\" id=\"u0ecc34a5\">例子</span></h3><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22window.onload%20%3D%20function%20()%20%7B%5Cn%20%20const%20container%20%3D%20document.querySelector('%23container')%5Cn%20%20container.onclick%20%3D%20function%20()%20%7B%5Cn%20%20%20%20console.log('first%20onclick%20event')%5Cn%20%20%7D%5Cn%20%20container.onclick%20%3D%20function%20()%20%7B%5Cn%20%20%20%20console.log('second%20onclick%20event')%5Cn%20%20%7D%5Cn%7D%5Cn%5Cn%2F%2F%20%E6%89%A7%E8%A1%8C%20-%3E%20second%20onclick%20event%5Cn%5Cn%2F%2F%20on%20%E7%BB%91%E5%AE%9A%5Cnwindow.onresize%20%3D%20function%20()%20%7B%7D%5Cn%2F%2F%20on%20%E8%A7%A3%E7%BB%91%5Ct%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22AGkED%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22window.onload%20%3D%20function%20()%20%7B%5Cn%20%20const%20container%20%3D%20document.querySelector('%23container')%5Cn%20%20container.addEventListener('click'%2C%20function%20()%20%7B%5Cn%20%20%20%20%20console.log('first%20onclick%20event')%5Cn%20%20%7D%2C%20false)%5Cn%20%20container.addEventListener('click'%2C%20function%20()%20%7B%5Cn%20%20%20%20%20console.log('second%20onclick%20event')%5Cn%20%20%7D%2C%20false)%5Cn%7D%5Cn%5Cn%2F%2F%20%E6%89%A7%E8%A1%8C%20-%3E%20first%20onclick%20event%5Cn%2F%2F%20%E6%89%A7%E8%A1%8C%20-%3E%20second%20onclick%20event%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22PRyJg%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h2 data-lake-id=\"Gl0La\" id=\"Gl0La\"><span data-lake-id=\"u2f7f3b6b\" id=\"u2f7f3b6b\">事件冒泡和事件捕获</span></h2><p data-lake-id=\"ub599f1b9\" id=\"ub599f1b9\"><code data-lake-id=\"u61d21a5d\" id=\"u61d21a5d\"><span data-lake-id=\"u992fef5c\" id=\"u992fef5c\">addEventListener</span></code><span data-lake-id=\"u4e0804f0\" id=\"u4e0804f0\">函数的第三个参数默认为 </span><code data-lake-id=\"u695b38db\" id=\"u695b38db\"><span data-lake-id=\"uf82c07fa\" id=\"uf82c07fa\">false</span></code><span data-lake-id=\"u18df3328\" id=\"u18df3328\">，也就是允许冒泡，如果改为 </span><code data-lake-id=\"uc5aabf37\" id=\"uc5aabf37\"><span data-lake-id=\"u2e0188ff\" id=\"u2e0188ff\">true</span></code><span data-lake-id=\"ud8808fe4\" id=\"ud8808fe4\">，那么就只会在捕获阶段执行</span></p><h3 data-lake-id=\"ythef\" id=\"ythef\"><span data-lake-id=\"ue09eeb20\" id=\"ue09eeb20\">事件冒泡</span></h3><ul list=\"u919d0500\"><li fid=\"u7444295a\" data-lake-id=\"uab63be34\" id=\"uab63be34\"><span data-lake-id=\"u3d1f891f\" id=\"u3d1f891f\">执行顺序：自底向上。(</span><code data-lake-id=\"u286ebf94\" id=\"u286ebf94\"><span data-lake-id=\"u8d58edee\" id=\"u8d58edee\">目标元素 -&gt; window</span></code><span data-lake-id=\"ua02dfd51\" id=\"ua02dfd51\">)</span></li><li fid=\"u7444295a\" data-lake-id=\"u9b978b03\" id=\"u9b978b03\"><span data-lake-id=\"u98a093dd\" id=\"u98a093dd\">案例：</span></li></ul><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22window.addEventListener('click'%2C%20()%20%3D%3E%20%7B%5Cn%5Ct%2F%2F%20%E4%BA%8B%E4%BB%B6%E8%A7%A6%E5%8F%91%E9%A1%BA%E5%BA%8F%E4%B8%BA%E5%86%92%E6%B3%A1%E9%A1%BA%E5%BA%8F%5Cn%7D)%20%2F%2F%20%E7%AC%AC%E4%B8%89%E4%B8%AA%E5%8F%82%E6%95%B0%E9%BB%98%E8%AE%A4%E4%B8%BA%20false%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22pyP0f%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h3 data-lake-id=\"e41oA\" id=\"e41oA\"><span data-lake-id=\"ud3638552\" id=\"ud3638552\">事件捕获</span></h3><ul list=\"u332a05c2\"><li fid=\"ua8f16608\" data-lake-id=\"ud5a7a1d1\" id=\"ud5a7a1d1\"><span data-lake-id=\"u14dfdf3e\" id=\"u14dfdf3e\">执行顺序：自顶向下。(</span><code data-lake-id=\"u9be853be\" id=\"u9be853be\"><span data-lake-id=\"u93fb09bf\" id=\"u93fb09bf\">window -&gt; 目标元素</span></code><span data-lake-id=\"uf028730f\" id=\"uf028730f\">)</span></li><li fid=\"ua8f16608\" data-lake-id=\"u14f5e394\" id=\"u14f5e394\"><span data-lake-id=\"u5c98e57f\" id=\"u5c98e57f\">案例：</span></li></ul><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22window.addEventListener('click'%2C%20()%20%3D%3E%20%7B%5Cn%5Ct%2F%2F%20%E4%BA%8B%E4%BB%B6%E8%A7%A6%E5%8F%91%E9%A1%BA%E5%BA%8F%E4%B8%BA%E6%8D%95%E8%8E%B7%E9%A1%BA%E5%BA%8F%5Cn%7D%2C%20true)%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22oPHmc%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h3 data-lake-id=\"VzJmc\" id=\"VzJmc\"><span data-lake-id=\"u782a927b\" id=\"u782a927b\">事件的执行顺序</span></h3><ol list=\"ufae4cc8f\"><li fid=\"u8c3ada0f\" data-lake-id=\"u7cde6c35\" id=\"u7cde6c35\"><span data-lake-id=\"ub7216cbe\" id=\"ub7216cbe\">事件捕获，从 </span><code data-lake-id=\"ubbcd8c7c\" id=\"ubbcd8c7c\"><span data-lake-id=\"u0e42b0ef\" id=\"u0e42b0ef\">window -&gt; document</span></code><span data-lake-id=\"u995a1914\" id=\"u995a1914\"> 依次向下执行</span></li><li fid=\"u8c3ada0f\" data-lake-id=\"u5cc5ea61\" id=\"u5cc5ea61\"><span data-lake-id=\"ud437f3e2\" id=\"ud437f3e2\">处理目标事件</span></li><li fid=\"u8c3ada0f\" data-lake-id=\"u3d6a6d60\" id=\"u3d6a6d60\"><span data-lake-id=\"u3980f34e\" id=\"u3980f34e\">事件冒泡</span></li></ol><h3 data-lake-id=\"KaMr4\" id=\"KaMr4\"><span data-lake-id=\"ueb1f5b59\" id=\"ueb1f5b59\">应用场景</span></h3><ul list=\"u1c930e75\"><li fid=\"ue3bc043f\" data-lake-id=\"u0f811279\" id=\"u0f811279\"><span data-lake-id=\"ufb74c391\" id=\"ufb74c391\">事件委托(事件代理)</span></li></ul><h2 data-lake-id=\"joDIp\" id=\"joDIp\"><span data-lake-id=\"u2287651a\" id=\"u2287651a\">原生自定义事件</span></h2><p data-lake-id=\"u702c61bf\" id=\"u702c61bf\"><span data-lake-id=\"udc3e85f5\" id=\"udc3e85f5\">通过两个构造函数可以实现原生的自定义事件：</span><code data-lake-id=\"ue053f6c6\" id=\"ue053f6c6\"><span data-lake-id=\"ud23df9cc\" id=\"ud23df9cc\">new CustomEvent</span></code><span data-lake-id=\"ubbaa6fb5\" id=\"ubbaa6fb5\"> 和 </span><code data-lake-id=\"u2c4806e4\" id=\"u2c4806e4\"><span data-lake-id=\"u40056483\" id=\"u40056483\">new Event</span></code></p><h3 data-lake-id=\"Sv8Ta\" id=\"Sv8Ta\"><span data-lake-id=\"u71298a0b\" id=\"u71298a0b\">new Event</span></h3><p data-lake-id=\"u8b313d25\" id=\"u8b313d25\"><span data-lake-id=\"u00f11678\" id=\"u00f11678\">第一个参数是事件名称，第二个参数是修饰符，通过 </span><code data-lake-id=\"u38c40e78\" id=\"u38c40e78\"><span data-lake-id=\"u3af5a7a1\" id=\"u3af5a7a1\">dispatchEvent</span></code><span data-lake-id=\"u02309f52\" id=\"u02309f52\">派发，</span><code data-lake-id=\"u51f2c570\" id=\"u51f2c570\"><span data-lake-id=\"uedb1df61\" id=\"uedb1df61\">addEventListener</span></code><span data-lake-id=\"u3401e421\" id=\"u3401e421\">调用</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22let%20event%20%3D%20new%20Event('xx'%2C%20%7B%20cancelable%3A%20false%2C%20bubbles%3A%20true%20%7D)%5Cndocument.dispatchEvent(event)%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22K2LaT%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h3 data-lake-id=\"xucug\" id=\"xucug\"><span data-lake-id=\"u1c2762b5\" id=\"u1c2762b5\">new CustomEvent</span></h3><p data-lake-id=\"u6d434178\" id=\"u6d434178\"><span data-lake-id=\"u528f9d23\" id=\"u528f9d23\">接收三个参数：第一个是事件名称，第二个参数是 </span><code data-lake-id=\"ue20e05d5\" id=\"ue20e05d5\"><span data-lake-id=\"u14a1fe04\" id=\"u14a1fe04\">detail</span></code><span data-lake-id=\"u3f68f718\" id=\"u3f68f718\">，是一个对象，内部是参数键值对，通过 </span><code data-lake-id=\"ua5967d0d\" id=\"ua5967d0d\"><span data-lake-id=\"u75d7f1eb\" id=\"u75d7f1eb\">e.detail</span></code><span data-lake-id=\"u18adb41d\" id=\"u18adb41d\">拿到传递的参数</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22let%20event%20%3D%20new%20CustomEvent('xx'%2C%20detail%3A%20%7B%20%E8%A6%81%E4%BC%A0%E7%9A%84%E5%8F%82%E6%95%B0%20%7D%2C%20%7B%5Cn%20%20cancelable%3A%20false%2C%5Cn%20%20bubbles%3A%20true%5Cn%7D)%5Cndocument.dispatchEvent(event)%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22ichAK%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card>",
  "body_draft_lake": "",
  "public": 0,
  "status": 1,
  "view_status": 0,
  "read_status": 1,
  "likes_count": 0,
  "comments_count": 0,
  "content_updated_at": "2022-08-03T08:52:11.000Z",
  "deleted_at": null,
  "created_at": "2022-04-24T14:08:33.000Z",
  "updated_at": "2022-08-03T08:52:11.000Z",
  "published_at": "2022-08-03T08:52:11.000Z",
  "first_published_at": "2022-04-24T14:09:11.548Z",
  "word_count": 502,
  "cover": null,
  "description": "on 和 addEventListener 区别addEventListener 可以给一个事件注册多个 listener，而 on 在同一时间只能指向唯一对象addEventListener 对任何 DOM 都是有效的，而 onclick 仅限于 htmlon 事件解绑需要将其设置为 non...",
  "custom_description": null,
  "hits": 0,
  "_serializer": "v2.doc_detail"
}