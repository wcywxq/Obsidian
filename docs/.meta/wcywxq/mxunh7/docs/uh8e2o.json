{
  "id": 76189255,
  "slug": "uh8e2o",
  "title": "koa",
  "book_id": 26225124,
  "book": {
    "id": 26225124,
    "type": "Book",
    "slug": "mxunh7",
    "name": "八股文 eight-part essay writing",
    "user_id": 732231,
    "description": "前端八股文",
    "creator_id": 732231,
    "public": 0,
    "items_count": 239,
    "likes_count": 0,
    "watches_count": 1,
    "content_updated_at": "2023-11-11T18:15:57.023Z",
    "updated_at": "2023-11-11T18:15:57.000Z",
    "created_at": "2022-04-04T11:31:45.000Z",
    "namespace": "wcywxq/mxunh7",
    "user": {
      "id": 732231,
      "type": "User",
      "login": "wcywxq",
      "name": "magic",
      "description": null,
      "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/732231/1606968271774-avatar/886ad88b-d2cc-4c9e-a674-f70eb51a679c.png",
      "books_count": 18,
      "public_books_count": 0,
      "followers_count": 0,
      "following_count": 0,
      "created_at": "2020-01-08T14:21:31.000Z",
      "updated_at": "2023-11-13T09:32:35.000Z",
      "_serializer": "v2.user"
    },
    "_serializer": "v2.book"
  },
  "user_id": 732231,
  "creator": {
    "id": 732231,
    "type": "User",
    "login": "wcywxq",
    "name": "magic",
    "description": null,
    "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/732231/1606968271774-avatar/886ad88b-d2cc-4c9e-a674-f70eb51a679c.png",
    "books_count": 18,
    "public_books_count": 0,
    "followers_count": 0,
    "following_count": 0,
    "created_at": "2020-01-08T14:21:31.000Z",
    "updated_at": "2023-11-13T09:32:35.000Z",
    "_serializer": "v2.user"
  },
  "format": "lake",
  "body": "<a name=\"OXAlW\"></a>\n### Logger 功能\n`Koa` 的最大特色，也是最重要的一个设计，就是中间件（`middleware`）。为了理解中间件，我们先看一下 `Logger` （打印日志）功能的实现\n<a name=\"RMmPQ\"></a>\n### 中间件的概念\n\"中间件\"（`middleware`），它处在 `HTTP Request` 和 `HTTP Response` 中间，用来实现某种中间功能。`app.use()`用来加载中间件\n\n- 基本上，`Koa` 所有的功能都是通过中间件实现的\n- 每个中间件默认接受两个参数，第一个参数是 `Context` 对象，第二个参数是 `next` 函数。只要调用 `next` 函数，就可以把执行权转交给下一个中间件\n:::info\n `express` 和 `koa` 中间件的区别：\n\n- 相同点：\n   - 在两种框架中，中间件的执行顺序都是**自上而下**的\n- 不同点：\n   - 执行顺序上：\n      - `Express` 中间件链是基于回调的\n      - `Koa` 是基于 `Promise` 的\n   - 模型上：\n      - `Express` 是线性模型\n      - `Koa` 是洋葱圈模型\n:::\n![image.png](https://cdn.nlark.com/yuque/0/2022/png/732231/1652114238935-e6c47451-975b-4dcc-9eef-fc46a6d7ba00.png#averageHue=%23ededed&clientId=u9b99217a-245f-4&from=paste&height=227&id=u8dd6f91b&originHeight=454&originWidth=679&originalType=binary&ratio=1&rotation=0&showTitle=false&size=166367&status=done&style=none&taskId=u3b731315-5d95-4a8c-ae42-4f1503167b3&title=&width=339.5)\n<a name=\"PjewG\"></a>\n### 中间件栈\n多个中间件会形成一个**栈结构**（`middle stack`），以\"先进后出\"（`first-in-last-out`）的顺序执行\n\n- 最外层的中间件首先执行。\n- 调用 `next` 函数，把执行权交给下一个中间件。\n- ...\n- 最内层的中间件最后执行。\n- 执行结束后，把执行权交回上一层的中间件。\n- ...\n- 最外层的中间件收回执行权之后，执行 `next` 函数后面的代码\n```javascript\nconst Koa = require('koa');\nconst app = new Koa();\n\nconst one = (ctx, next) => {\n  console.log('>> one');\n  next();\n  console.log('<< one');\n}\n\nconst two = (ctx, next) => {\n  console.log('>> two');\n  next();\n  console.log('<< two');\n}\n\nconst three = (ctx, next) => {\n  console.log('>> three');\n  next();\n  console.log('<< three');\n}\n\napp.use(one);\napp.use(two);\napp.use(three);\n\napp.listen(3000);\n```\n```javascript\n>> one\n>> two\n>> three\n<< three\n<< two\n<< one\n```\n<a name=\"SGbqc\"></a>\n### koa-compose\n```javascript\n// 完整版\nfunction compose (middleware) {\n  // 判断参数是否合法，middleware 要求为数组且其中每个数组元素都为 function\n  if (!Array.isArray(middleware)) throw new TypeError('Middleware stack must be an array!')\n  for (const fn of middleware) {\n    if (typeof fn !== 'function') throw new TypeError('Middleware must be composed of functions!')\n  }\n  \n  /**\n  * @param {Object} context\n  * @return {Promise}\n  * @api public\n  */\n  \n  return function (context, next) {\n    // last called middleware #\n    let index = -1\n    // 递归返回一个函数 该函数返回一个 Promise 的对象\n    return dispatch(0)\n    function dispatch (i) {\n      // 当 next 方法被多次调用时会出现\n      if (i <= index) return Promise.reject(new Error('next() called multiple times'))\n      index = i\n      let fn = middleware[i]\n      // 最后一个中间件\n      if (i === middleware.length) fn = next\n      if (!fn) return Promise.resolve()\n      // Promise 封装中间件 进行递归调用\n      try {\n        return Promise.resolve(fn(context, dispatch.bind(null, i + 1)));\n      } catch (err) {\n        return Promise.reject(err)\n      }\n    }\n  }\n}\n```\n```javascript\n// 简化版\nfunction compose(middleware) {\n  return function(context, next) {\n    let index = -1\n    return dispatch(0)\n    function dispatch(i) {\n      index = i\n      const fn = middleware[i] || next\n      if (!fn) return Promise.resolve()\n      return Promise.resolve(fn(context, function next() {\n        return dispatch(i + 1)\n      }))\n    }\n  }\n}\n```\n",
  "body_draft": "",
  "body_html": "<!doctype html><div class=\"lake-content\" typography=\"classic\"><h3 id=\"OXAlW\" style=\"text-align: right\"><span class=\"ne-text\">Logger 功能</span></h3><p id=\"u23f1a83d\" class=\"ne-p\"><code class=\"ne-code\"><span class=\"ne-text\">Koa</span></code><span class=\"ne-text\"> 的最大特色，也是最重要的一个设计，就是中间件（</span><code class=\"ne-code\"><span class=\"ne-text\">middleware</span></code><span class=\"ne-text\">）。为了理解中间件，我们先看一下 </span><code class=\"ne-code\"><span class=\"ne-text\">Logger</span></code><span class=\"ne-text\"> （打印日志）功能的实现</span></p><h3 id=\"RMmPQ\"><span class=\"ne-text\">中间件的概念</span></h3><p id=\"uf1085ad5\" class=\"ne-p\"><span class=\"ne-text\">&quot;中间件&quot;（</span><code class=\"ne-code\"><span class=\"ne-text\">middleware</span></code><span class=\"ne-text\">），它处在 </span><code class=\"ne-code\"><span class=\"ne-text\">HTTP Request</span></code><span class=\"ne-text\"> 和 </span><code class=\"ne-code\"><span class=\"ne-text\">HTTP Response</span></code><span class=\"ne-text\"> 中间，用来实现某种中间功能。</span><code class=\"ne-code\"><span class=\"ne-text\">app.use()</span></code><span class=\"ne-text\">用来加载中间件</span></p><ul class=\"ne-ul\"><li id=\"u40f69dc5\" data-lake-index-type=\"0\"><span class=\"ne-text\">基本上，</span><code class=\"ne-code\"><span class=\"ne-text\">Koa</span></code><span class=\"ne-text\"> 所有的功能都是通过中间件实现的</span></li><li id=\"u5ccf9ddc\" data-lake-index-type=\"0\"><span class=\"ne-text\">每个中间件默认接受两个参数，第一个参数是 </span><code class=\"ne-code\"><span class=\"ne-text\">Context</span></code><span class=\"ne-text\"> 对象，第二个参数是 </span><code class=\"ne-code\"><span class=\"ne-text\">next</span></code><span class=\"ne-text\"> 函数。只要调用 </span><code class=\"ne-code\"><span class=\"ne-text\">next</span></code><span class=\"ne-text\"> 函数，就可以把执行权转交给下一个中间件</span></li></ul><div data-type=\"info\" class=\"ne-alert\"><p id=\"u04d1c79e\" class=\"ne-p\"><span class=\"ne-text\"> </span><code class=\"ne-code\"><span class=\"ne-text\">express</span></code><span class=\"ne-text\"> 和 </span><code class=\"ne-code\"><span class=\"ne-text\">koa</span></code><span class=\"ne-text\"> 中间件的区别：</span></p><ul class=\"ne-ul\"><li id=\"u99c82792\" data-lake-index-type=\"0\"><span class=\"ne-text\">相同点：</span></li></ul><ul class=\"ne-list-wrap\"><ul ne-level=\"1\" class=\"ne-ul\"><li id=\"ubc8a0a46\" data-lake-index-type=\"0\"><span class=\"ne-text\">在两种框架中，中间件的执行顺序都是</span><strong><span class=\"ne-text\">自上而下</span></strong><span class=\"ne-text\">的</span></li></ul></ul><ul class=\"ne-ul\"><li id=\"u531ff567\" data-lake-index-type=\"0\"><span class=\"ne-text\" style=\"color: rgb(51, 51, 51); font-size: 16px\">不同点：</span></li></ul><ul class=\"ne-list-wrap\"><ul ne-level=\"1\" class=\"ne-ul\"><li id=\"u557f98cd\" data-lake-index-type=\"0\"><span class=\"ne-text\" style=\"color: rgb(51, 51, 51); font-size: 16px\">执行顺序上：</span></li></ul></ul><ul class=\"ne-list-wrap\"><ul class=\"ne-list-wrap\"><ul ne-level=\"2\" class=\"ne-ul\"><li id=\"u03431f29\" data-lake-index-type=\"0\"><code class=\"ne-code\"><span class=\"ne-text\">Express</span></code><span class=\"ne-text\"> 中间件链是基于回调的</span></li><li id=\"u99d50be6\" data-lake-index-type=\"0\"><code class=\"ne-code\"><span class=\"ne-text\">Koa</span></code><span class=\"ne-text\"> 是基于 </span><code class=\"ne-code\"><span class=\"ne-text\">Promise</span></code><span class=\"ne-text\"> 的</span></li></ul></ul></ul><ul class=\"ne-list-wrap\"><ul ne-level=\"1\" class=\"ne-ul\"><li id=\"u5f379c1e\" data-lake-index-type=\"0\"><span class=\"ne-text\">模型上：</span></li></ul></ul><ul class=\"ne-list-wrap\"><ul class=\"ne-list-wrap\"><ul ne-level=\"2\" class=\"ne-ul\"><li id=\"udb2c35bf\" data-lake-index-type=\"0\"><code class=\"ne-code\"><span class=\"ne-text\">Express</span></code><span class=\"ne-text\"> 是线性模型</span></li><li id=\"ubdf2bc25\" data-lake-index-type=\"0\"><code class=\"ne-code\"><span class=\"ne-text\">Koa</span></code><span class=\"ne-text\"> 是洋葱圈模型</span></li></ul></ul></ul></div><p id=\"u89bae1ca\" class=\"ne-p\"><img src=\"https://cdn.nlark.com/yuque/0/2022/png/732231/1652114238935-e6c47451-975b-4dcc-9eef-fc46a6d7ba00.png\" width=\"339.5\" id=\"u8dd6f91b\" class=\"ne-image\"></p><h3 id=\"PjewG\"><span class=\"ne-text\">中间件栈</span></h3><p id=\"u84aac164\" class=\"ne-p\"><span class=\"ne-text\">多个中间件会形成一个</span><strong><span class=\"ne-text\">栈结构</span></strong><span class=\"ne-text\">（</span><code class=\"ne-code\"><span class=\"ne-text\">middle stack</span></code><span class=\"ne-text\">），以&quot;先进后出&quot;（</span><code class=\"ne-code\"><span class=\"ne-text\">first-in-last-out</span></code><span class=\"ne-text\">）的顺序执行</span></p><ul class=\"ne-ul\"><li id=\"uaba3ad9d\" data-lake-index-type=\"0\"><span class=\"ne-text\">最外层的中间件首先执行。</span></li><li id=\"u6bfc1137\" data-lake-index-type=\"0\"><span class=\"ne-text\">调用 </span><code class=\"ne-code\"><span class=\"ne-text\">next</span></code><span class=\"ne-text\"> 函数，把执行权交给下一个中间件。</span></li><li id=\"u1994c5d6\" data-lake-index-type=\"0\"><span class=\"ne-text\">...</span></li><li id=\"u5dec465a\" data-lake-index-type=\"0\"><span class=\"ne-text\">最内层的中间件最后执行。</span></li><li id=\"u834a5565\" data-lake-index-type=\"0\"><span class=\"ne-text\">执行结束后，把执行权交回上一层的中间件。</span></li><li id=\"u08c40761\" data-lake-index-type=\"0\"><span class=\"ne-text\">...</span></li><li id=\"u30be9007\" data-lake-index-type=\"0\"><span class=\"ne-text\">最外层的中间件收回执行权之后，执行 </span><code class=\"ne-code\"><span class=\"ne-text\">next</span></code><span class=\"ne-text\"> 函数后面的代码</span></li></ul><pre data-language=\"javascript\" id=\"m3EvB\" class=\"ne-codeblock language-javascript\"><code>const Koa = require('koa');\nconst app = new Koa();\n\nconst one = (ctx, next) =&gt; {\n  console.log('&gt;&gt; one');\n  next();\n  console.log('&lt;&lt; one');\n}\n\nconst two = (ctx, next) =&gt; {\n  console.log('&gt;&gt; two');\n  next();\n  console.log('&lt;&lt; two');\n}\n\nconst three = (ctx, next) =&gt; {\n  console.log('&gt;&gt; three');\n  next();\n  console.log('&lt;&lt; three');\n}\n\napp.use(one);\napp.use(two);\napp.use(three);\n\napp.listen(3000);</code></pre><pre data-language=\"javascript\" id=\"nZ8r5\" class=\"ne-codeblock language-javascript\"><code>&gt;&gt; one\n&gt;&gt; two\n&gt;&gt; three\n&lt;&lt; three\n&lt;&lt; two\n&lt;&lt; one</code></pre><h3 id=\"SGbqc\"><span class=\"ne-text\">koa-compose</span></h3><pre data-language=\"javascript\" id=\"oxgNF\" class=\"ne-codeblock language-javascript\"><code>// 完整版\nfunction compose (middleware) {\n  // 判断参数是否合法，middleware 要求为数组且其中每个数组元素都为 function\n  if (!Array.isArray(middleware)) throw new TypeError('Middleware stack must be an array!')\n  for (const fn of middleware) {\n    if (typeof fn !== 'function') throw new TypeError('Middleware must be composed of functions!')\n  }\n  \n  /**\n  * @param {Object} context\n  * @return {Promise}\n  * @api public\n  */\n  \n  return function (context, next) {\n    // last called middleware #\n    let index = -1\n    // 递归返回一个函数 该函数返回一个 Promise 的对象\n    return dispatch(0)\n    function dispatch (i) {\n      // 当 next 方法被多次调用时会出现\n      if (i &lt;= index) return Promise.reject(new Error('next() called multiple times'))\n      index = i\n      let fn = middleware[i]\n      // 最后一个中间件\n      if (i === middleware.length) fn = next\n      if (!fn) return Promise.resolve()\n      // Promise 封装中间件 进行递归调用\n      try {\n        return Promise.resolve(fn(context, dispatch.bind(null, i + 1)));\n      } catch (err) {\n        return Promise.reject(err)\n      }\n    }\n  }\n}</code></pre><pre data-language=\"javascript\" id=\"WIFGi\" class=\"ne-codeblock language-javascript\"><code>// 简化版\nfunction compose(middleware) {\n  return function(context, next) {\n    let index = -1\n    return dispatch(0)\n    function dispatch(i) {\n      index = i\n      const fn = middleware[i] || next\n      if (!fn) return Promise.resolve()\n      return Promise.resolve(fn(context, function next() {\n        return dispatch(i + 1)\n      }))\n    }\n  }\n}</code></pre></div>",
  "body_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"viewport\" content=\"adapt\" /><meta name=\"typography\" content=\"classic\" /><h3 data-lake-id=\"OXAlW\" id=\"OXAlW\" style=\"text-align: right\"><span data-lake-id=\"uf4dff7f1\" id=\"uf4dff7f1\">Logger 功能</span></h3><p data-lake-id=\"u23f1a83d\" id=\"u23f1a83d\"><code data-lake-id=\"ufbe62eda\" id=\"ufbe62eda\"><span data-lake-id=\"u111ea1d7\" id=\"u111ea1d7\">Koa</span></code><span data-lake-id=\"u4de9cf58\" id=\"u4de9cf58\"> 的最大特色，也是最重要的一个设计，就是中间件（</span><code data-lake-id=\"u0254617c\" id=\"u0254617c\"><span data-lake-id=\"ucf2e4c7e\" id=\"ucf2e4c7e\">middleware</span></code><span data-lake-id=\"ub5b879f0\" id=\"ub5b879f0\">）。为了理解中间件，我们先看一下 </span><code data-lake-id=\"uaa4d617f\" id=\"uaa4d617f\"><span data-lake-id=\"uf3cdd694\" id=\"uf3cdd694\">Logger</span></code><span data-lake-id=\"u5016f82e\" id=\"u5016f82e\"> （打印日志）功能的实现</span></p><h3 data-lake-id=\"RMmPQ\" id=\"RMmPQ\"><span data-lake-id=\"ufd8319a9\" id=\"ufd8319a9\">中间件的概念</span></h3><p data-lake-id=\"uf1085ad5\" id=\"uf1085ad5\"><span data-lake-id=\"u2d4f1eee\" id=\"u2d4f1eee\">&quot;中间件&quot;（</span><code data-lake-id=\"u9d45c81b\" id=\"u9d45c81b\"><span data-lake-id=\"ue99ddf0e\" id=\"ue99ddf0e\">middleware</span></code><span data-lake-id=\"ud08f446d\" id=\"ud08f446d\">），它处在 </span><code data-lake-id=\"ue142ce00\" id=\"ue142ce00\"><span data-lake-id=\"ue3752390\" id=\"ue3752390\">HTTP Request</span></code><span data-lake-id=\"u8cc6e945\" id=\"u8cc6e945\"> 和 </span><code data-lake-id=\"u82b8a0f8\" id=\"u82b8a0f8\"><span data-lake-id=\"uf43498b0\" id=\"uf43498b0\">HTTP Response</span></code><span data-lake-id=\"ua1667677\" id=\"ua1667677\"> 中间，用来实现某种中间功能。</span><code data-lake-id=\"u6310624e\" id=\"u6310624e\"><span data-lake-id=\"uef3bc7aa\" id=\"uef3bc7aa\">app.use()</span></code><span data-lake-id=\"ude1a2cbf\" id=\"ude1a2cbf\">用来加载中间件</span></p><ul list=\"u4b7a3348\"><li fid=\"uf495fb34\" data-lake-id=\"u40f69dc5\" id=\"u40f69dc5\"><span data-lake-id=\"u685906eb\" id=\"u685906eb\">基本上，</span><code data-lake-id=\"u93e037ea\" id=\"u93e037ea\"><span data-lake-id=\"ue40f7778\" id=\"ue40f7778\">Koa</span></code><span data-lake-id=\"u498f8880\" id=\"u498f8880\"> 所有的功能都是通过中间件实现的</span></li><li fid=\"uf495fb34\" data-lake-id=\"u5ccf9ddc\" id=\"u5ccf9ddc\"><span data-lake-id=\"ub63554a7\" id=\"ub63554a7\">每个中间件默认接受两个参数，第一个参数是 </span><code data-lake-id=\"u051a9879\" id=\"u051a9879\"><span data-lake-id=\"uf76a0067\" id=\"uf76a0067\">Context</span></code><span data-lake-id=\"ue29c5b55\" id=\"ue29c5b55\"> 对象，第二个参数是 </span><code data-lake-id=\"u9a8423fe\" id=\"u9a8423fe\"><span data-lake-id=\"ude94fac6\" id=\"ude94fac6\">next</span></code><span data-lake-id=\"uea67a9ca\" id=\"uea67a9ca\"> 函数。只要调用 </span><code data-lake-id=\"u1e383493\" id=\"u1e383493\"><span data-lake-id=\"uadcf6cde\" id=\"uadcf6cde\">next</span></code><span data-lake-id=\"u5e067348\" id=\"u5e067348\"> 函数，就可以把执行权转交给下一个中间件</span></li></ul><blockquote data-lake-id=\"uf8140483\" id=\"uf8140483\" class=\"lake-alert lake-alert-info\"><p data-lake-id=\"u04d1c79e\" id=\"u04d1c79e\"><span data-lake-id=\"ub75024e0\" id=\"ub75024e0\"> </span><code data-lake-id=\"ucc93a8bd\" id=\"ucc93a8bd\"><span data-lake-id=\"u912bfde2\" id=\"u912bfde2\">express</span></code><span data-lake-id=\"uee6252ec\" id=\"uee6252ec\"> 和 </span><code data-lake-id=\"ucc4b227d\" id=\"ucc4b227d\"><span data-lake-id=\"u0ddc854a\" id=\"u0ddc854a\">koa</span></code><span data-lake-id=\"ubc00ee3c\" id=\"ubc00ee3c\"> 中间件的区别：</span></p><ul list=\"u68e13b99\"><li fid=\"u6a59df2e\" data-lake-id=\"u99c82792\" id=\"u99c82792\"><span data-lake-id=\"u37c38d40\" id=\"u37c38d40\">相同点：</span></li></ul><ul list=\"u68e13b99\" data-lake-indent=\"1\"><li fid=\"u6a59df2e\" data-lake-id=\"ubc8a0a46\" id=\"ubc8a0a46\"><span data-lake-id=\"ub4395449\" id=\"ub4395449\">在两种框架中，中间件的执行顺序都是</span><strong><span data-lake-id=\"u5169d96b\" id=\"u5169d96b\">自上而下</span></strong><span data-lake-id=\"u89c80c07\" id=\"u89c80c07\">的</span></li></ul><ul list=\"u68e13b99\" start=\"2\"><li fid=\"u6a59df2e\" data-lake-id=\"u531ff567\" id=\"u531ff567\"><span data-lake-id=\"ubeee46f5\" id=\"ubeee46f5\" class=\"lake-fontsize-12\" style=\"color: rgb(51, 51, 51)\">不同点：</span></li></ul><ul list=\"u68e13b99\" data-lake-indent=\"1\"><li fid=\"u6a59df2e\" data-lake-id=\"u557f98cd\" id=\"u557f98cd\"><span data-lake-id=\"ud22f33e4\" id=\"ud22f33e4\" class=\"lake-fontsize-12\" style=\"color: rgb(51, 51, 51)\">执行顺序上：</span></li></ul><ul list=\"u951e2580\" data-lake-indent=\"2\"><li fid=\"u23bd8ebd\" data-lake-id=\"u03431f29\" id=\"u03431f29\"><code data-lake-id=\"u7f1b7d33\" id=\"u7f1b7d33\"><span data-lake-id=\"u831f0798\" id=\"u831f0798\">Express</span></code><span data-lake-id=\"u8ed7c87e\" id=\"u8ed7c87e\"> 中间件链是基于回调的</span></li><li fid=\"u23bd8ebd\" data-lake-id=\"u99d50be6\" id=\"u99d50be6\"><code data-lake-id=\"u749a20b4\" id=\"u749a20b4\"><span data-lake-id=\"uc90faba8\" id=\"uc90faba8\">Koa</span></code><span data-lake-id=\"uae51753d\" id=\"uae51753d\"> 是基于 </span><code data-lake-id=\"u74b64b67\" id=\"u74b64b67\"><span data-lake-id=\"u7bff4fc1\" id=\"u7bff4fc1\">Promise</span></code><span data-lake-id=\"ud4587d9d\" id=\"ud4587d9d\"> 的</span></li></ul><ul list=\"u951e2580\" data-lake-indent=\"1\"><li fid=\"u23bd8ebd\" data-lake-id=\"u5f379c1e\" id=\"u5f379c1e\"><span data-lake-id=\"ucf99c05b\" id=\"ucf99c05b\">模型上：</span></li></ul><ul list=\"u951e2580\" data-lake-indent=\"2\"><li fid=\"u23bd8ebd\" data-lake-id=\"udb2c35bf\" id=\"udb2c35bf\"><code data-lake-id=\"ue7cdafdc\" id=\"ue7cdafdc\"><span data-lake-id=\"u3ce3ced2\" id=\"u3ce3ced2\">Express</span></code><span data-lake-id=\"u9daeb1f8\" id=\"u9daeb1f8\"> 是线性模型</span></li><li fid=\"u23bd8ebd\" data-lake-id=\"ubdf2bc25\" id=\"ubdf2bc25\"><code data-lake-id=\"u9a1e088e\" id=\"u9a1e088e\"><span data-lake-id=\"u637d920a\" id=\"u637d920a\">Koa</span></code><span data-lake-id=\"u63888d1b\" id=\"u63888d1b\"> 是洋葱圈模型</span></li></ul></blockquote><p data-lake-id=\"u89bae1ca\" id=\"u89bae1ca\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2022%2Fpng%2F732231%2F1652114238935-e6c47451-975b-4dcc-9eef-fc46a6d7ba00.png%22%2C%22taskId%22%3A%22u3b731315-5d95-4a8c-ae42-4f1503167b3%22%2C%22clientId%22%3A%22u9b99217a-245f-4%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A339.5%2C%22height%22%3A227%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A166367%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A679%2C%22originHeight%22%3A454%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22REQUEST%20RESPONSE%20-REGISTRY%20MANAGER%20-STATUS%20CODE%20REDIRECT%20ERROR%20HANDLER%20CACHEMIDDLEWARE%20SESSION%20MIDDLEWARE%20PYLONS%20APP%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A103.10958%2C%22y%22%3A84.47385%2C%22width%22%3A124.30904000000001%2C%22height%22%3A28.864050000000006%2C%22text%22%3A%22REQUEST%22%7D%2C%7B%22x%22%3A435.2655%2C%22y%22%3A124.88444%2C%22width%22%3A147.84130000000005%2C%22height%22%3A35.18674%2C%22text%22%3A%22RESPONSE%22%7D%2C%7B%22x%22%3A428.04236%2C%22y%22%3A319.5117%2C%22width%22%3A113.22904%2C%22height%22%3A13.65537999999998%2C%22text%22%3A%22-REGISTRY%20MANAGER%22%7D%2C%7B%22x%22%3A435.76645%2C%22y%22%3A338.0839%2C%22width%22%3A126.00741%2C%22height%22%3A12.880199999999945%2C%22text%22%3A%22-STATUS%20CODE%20REDIRECT%22%7D%2C%7B%22x%22%3A437.4342%2C%22y%22%3A355.98303%2C%22width%22%3A79.69330000000008%2C%22height%22%3A14.153410000000008%2C%22text%22%3A%22ERROR%20HANDLER%22%7D%2C%7B%22x%22%3A436.58536%2C%22y%22%3A375.38638%2C%22width%22%3A111.42757999999998%2C%22height%22%3A14.224060000000009%2C%22text%22%3A%22CACHEMIDDLEWARE%22%7D%2C%7B%22x%22%3A437.50342%2C%22y%22%3A394.833%2C%22width%22%3A118.05291999999997%2C%22height%22%3A14.480139999999949%2C%22text%22%3A%22SESSION%20MIDDLEWARE%22%7D%2C%7B%22x%22%3A436.68234%2C%22y%22%3A430.55435%2C%22width%22%3A67.59478999999999%2C%22height%22%3A16.61572000000001%2C%22text%22%3A%22PYLONS%20APP%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23ededed%22%2C%22id%22%3A%22u8dd6f91b%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><h3 data-lake-id=\"PjewG\" id=\"PjewG\"><span data-lake-id=\"ubad81d19\" id=\"ubad81d19\">中间件栈</span></h3><p data-lake-id=\"u84aac164\" id=\"u84aac164\"><span data-lake-id=\"ub50214c7\" id=\"ub50214c7\">多个中间件会形成一个</span><strong><span data-lake-id=\"u18e03869\" id=\"u18e03869\">栈结构</span></strong><span data-lake-id=\"u8f97e926\" id=\"u8f97e926\">（</span><code data-lake-id=\"ue51bab93\" id=\"ue51bab93\"><span data-lake-id=\"ua2a2dae9\" id=\"ua2a2dae9\">middle stack</span></code><span data-lake-id=\"u9d005d93\" id=\"u9d005d93\">），以&quot;先进后出&quot;（</span><code data-lake-id=\"ub211d838\" id=\"ub211d838\"><span data-lake-id=\"ufb2a548f\" id=\"ufb2a548f\">first-in-last-out</span></code><span data-lake-id=\"ub01e90d3\" id=\"ub01e90d3\">）的顺序执行</span></p><ul list=\"ud42317df\"><li fid=\"u30be06bb\" data-lake-id=\"uaba3ad9d\" id=\"uaba3ad9d\"><span data-lake-id=\"u9b9a6d00\" id=\"u9b9a6d00\">最外层的中间件首先执行。</span></li><li fid=\"u30be06bb\" data-lake-id=\"u6bfc1137\" id=\"u6bfc1137\"><span data-lake-id=\"u5ca930d8\" id=\"u5ca930d8\">调用 </span><code data-lake-id=\"u9e039d03\" id=\"u9e039d03\"><span data-lake-id=\"uf4d549c6\" id=\"uf4d549c6\">next</span></code><span data-lake-id=\"ub5b43f90\" id=\"ub5b43f90\"> 函数，把执行权交给下一个中间件。</span></li><li fid=\"u30be06bb\" data-lake-id=\"u1994c5d6\" id=\"u1994c5d6\"><span data-lake-id=\"ua8cb5064\" id=\"ua8cb5064\">...</span></li><li fid=\"u30be06bb\" data-lake-id=\"u5dec465a\" id=\"u5dec465a\"><span data-lake-id=\"u1f8bd77c\" id=\"u1f8bd77c\">最内层的中间件最后执行。</span></li><li fid=\"u30be06bb\" data-lake-id=\"u834a5565\" id=\"u834a5565\"><span data-lake-id=\"ud2448e13\" id=\"ud2448e13\">执行结束后，把执行权交回上一层的中间件。</span></li><li fid=\"u30be06bb\" data-lake-id=\"u08c40761\" id=\"u08c40761\"><span data-lake-id=\"ub4bf1fac\" id=\"ub4bf1fac\">...</span></li><li fid=\"u30be06bb\" data-lake-id=\"u30be9007\" id=\"u30be9007\"><span data-lake-id=\"u313b85dd\" id=\"u313b85dd\">最外层的中间件收回执行权之后，执行 </span><code data-lake-id=\"u845edcb7\" id=\"u845edcb7\"><span data-lake-id=\"u4c41ef73\" id=\"u4c41ef73\">next</span></code><span data-lake-id=\"u0517d265\" id=\"u0517d265\"> 函数后面的代码</span></li></ul><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22javascript%22%2C%22code%22%3A%22const%20Koa%20%3D%20require('koa')%3B%5Cnconst%20app%20%3D%20new%20Koa()%3B%5Cn%5Cnconst%20one%20%3D%20(ctx%2C%20next)%20%3D%3E%20%7B%5Cn%20%20console.log('%3E%3E%20one')%3B%5Cn%20%20next()%3B%5Cn%20%20console.log('%3C%3C%20one')%3B%5Cn%7D%5Cn%5Cnconst%20two%20%3D%20(ctx%2C%20next)%20%3D%3E%20%7B%5Cn%20%20console.log('%3E%3E%20two')%3B%5Cn%20%20next()%3B%5Cn%20%20console.log('%3C%3C%20two')%3B%5Cn%7D%5Cn%5Cnconst%20three%20%3D%20(ctx%2C%20next)%20%3D%3E%20%7B%5Cn%20%20console.log('%3E%3E%20three')%3B%5Cn%20%20next()%3B%5Cn%20%20console.log('%3C%3C%20three')%3B%5Cn%7D%5Cn%5Cnapp.use(one)%3B%5Cnapp.use(two)%3B%5Cnapp.use(three)%3B%5Cn%5Cnapp.listen(3000)%3B%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22m3EvB%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%3E%3E%20one%5Cn%3E%3E%20two%5Cn%3E%3E%20three%5Cn%3C%3C%20three%5Cn%3C%3C%20two%5Cn%3C%3C%20one%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22nZ8r5%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h3 data-lake-id=\"SGbqc\" id=\"SGbqc\"><span data-lake-id=\"u24a8092e\" id=\"u24a8092e\">koa-compose</span></h3><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%20%E5%AE%8C%E6%95%B4%E7%89%88%5Cnfunction%20compose%20(middleware)%20%7B%5Cn%20%20%2F%2F%20%E5%88%A4%E6%96%AD%E5%8F%82%E6%95%B0%E6%98%AF%E5%90%A6%E5%90%88%E6%B3%95%EF%BC%8Cmiddleware%20%E8%A6%81%E6%B1%82%E4%B8%BA%E6%95%B0%E7%BB%84%E4%B8%94%E5%85%B6%E4%B8%AD%E6%AF%8F%E4%B8%AA%E6%95%B0%E7%BB%84%E5%85%83%E7%B4%A0%E9%83%BD%E4%B8%BA%20function%5Cn%20%20if%20(!Array.isArray(middleware))%20throw%20new%20TypeError('Middleware%20stack%20must%20be%20an%20array!')%5Cn%20%20for%20(const%20fn%20of%20middleware)%20%7B%5Cn%20%20%20%20if%20(typeof%20fn%20!%3D%3D%20'function')%20throw%20new%20TypeError('Middleware%20must%20be%20composed%20of%20functions!')%5Cn%20%20%7D%5Cn%20%20%5Cn%20%20%2F**%5Cn%20%20*%20%40param%20%7BObject%7D%20context%5Cn%20%20*%20%40return%20%7BPromise%7D%5Cn%20%20*%20%40api%20public%5Cn%20%20*%2F%5Cn%20%20%5Cn%20%20return%20function%20(context%2C%20next)%20%7B%5Cn%20%20%20%20%2F%2F%20last%20called%20middleware%20%23%5Cn%20%20%20%20let%20index%20%3D%20-1%5Cn%20%20%20%20%2F%2F%20%E9%80%92%E5%BD%92%E8%BF%94%E5%9B%9E%E4%B8%80%E4%B8%AA%E5%87%BD%E6%95%B0%20%E8%AF%A5%E5%87%BD%E6%95%B0%E8%BF%94%E5%9B%9E%E4%B8%80%E4%B8%AA%20Promise%20%E7%9A%84%E5%AF%B9%E8%B1%A1%5Cn%20%20%20%20return%20dispatch(0)%5Cn%20%20%20%20function%20dispatch%20(i)%20%7B%5Cn%20%20%20%20%20%20%2F%2F%20%E5%BD%93%20next%20%E6%96%B9%E6%B3%95%E8%A2%AB%E5%A4%9A%E6%AC%A1%E8%B0%83%E7%94%A8%E6%97%B6%E4%BC%9A%E5%87%BA%E7%8E%B0%5Cn%20%20%20%20%20%20if%20(i%20%3C%3D%20index)%20return%20Promise.reject(new%20Error('next()%20called%20multiple%20times'))%5Cn%20%20%20%20%20%20index%20%3D%20i%5Cn%20%20%20%20%20%20let%20fn%20%3D%20middleware%5Bi%5D%5Cn%20%20%20%20%20%20%2F%2F%20%E6%9C%80%E5%90%8E%E4%B8%80%E4%B8%AA%E4%B8%AD%E9%97%B4%E4%BB%B6%5Cn%20%20%20%20%20%20if%20(i%20%3D%3D%3D%20middleware.length)%20fn%20%3D%20next%5Cn%20%20%20%20%20%20if%20(!fn)%20return%20Promise.resolve()%5Cn%20%20%20%20%20%20%2F%2F%20Promise%20%E5%B0%81%E8%A3%85%E4%B8%AD%E9%97%B4%E4%BB%B6%20%E8%BF%9B%E8%A1%8C%E9%80%92%E5%BD%92%E8%B0%83%E7%94%A8%5Cn%20%20%20%20%20%20try%20%7B%5Cn%20%20%20%20%20%20%20%20return%20Promise.resolve(fn(context%2C%20dispatch.bind(null%2C%20i%20%2B%201)))%3B%5Cn%20%20%20%20%20%20%7D%20catch%20(err)%20%7B%5Cn%20%20%20%20%20%20%20%20return%20Promise.reject(err)%5Cn%20%20%20%20%20%20%7D%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22oxgNF%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%20%E7%AE%80%E5%8C%96%E7%89%88%5Cnfunction%20compose(middleware)%20%7B%5Cn%20%20return%20function(context%2C%20next)%20%7B%5Cn%20%20%20%20let%20index%20%3D%20-1%5Cn%20%20%20%20return%20dispatch(0)%5Cn%20%20%20%20function%20dispatch(i)%20%7B%5Cn%20%20%20%20%20%20index%20%3D%20i%5Cn%20%20%20%20%20%20const%20fn%20%3D%20middleware%5Bi%5D%20%7C%7C%20next%5Cn%20%20%20%20%20%20if%20(!fn)%20return%20Promise.resolve()%5Cn%20%20%20%20%20%20return%20Promise.resolve(fn(context%2C%20function%20next()%20%7B%5Cn%20%20%20%20%20%20%20%20return%20dispatch(i%20%2B%201)%5Cn%20%20%20%20%20%20%7D))%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22WIFGi%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card>",
  "body_draft_lake": "",
  "public": 0,
  "status": 1,
  "view_status": 0,
  "read_status": 1,
  "likes_count": 0,
  "comments_count": 0,
  "content_updated_at": "2023-11-09T16:51:31.000Z",
  "deleted_at": null,
  "created_at": "2022-05-05T10:28:17.000Z",
  "updated_at": "2023-11-09T16:51:32.000Z",
  "published_at": "2023-11-09T16:51:31.000Z",
  "first_published_at": "2022-05-05T10:30:00.093Z",
  "word_count": 696,
  "cover": "https://cdn.nlark.com/yuque/0/2022/png/732231/1652114238935-e6c47451-975b-4dcc-9eef-fc46a6d7ba00.png",
  "description": "Logger 功能Koa 的最大特色，也是最重要的一个设计，就是中间件（middleware）。为了理解中间件，我们先看一下 Logger （打印日志）功能的实现中间件的概念\"中间件\"（middleware），它处在 HTTP Request 和 HTTP Response 中间，用来实现某种...",
  "custom_description": null,
  "hits": 0,
  "_serializer": "v2.doc_detail"
}