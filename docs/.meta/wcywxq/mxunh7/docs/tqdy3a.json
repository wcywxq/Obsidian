{
  "id": 72212194,
  "slug": "tqdy3a",
  "title": "函数式编程的理解",
  "book_id": 26225124,
  "book": {
    "id": 26225124,
    "type": "Book",
    "slug": "mxunh7",
    "name": "八股文 eight-part essay writing",
    "user_id": 732231,
    "description": "前端八股文",
    "creator_id": 732231,
    "public": 0,
    "items_count": 239,
    "likes_count": 0,
    "watches_count": 1,
    "content_updated_at": "2023-11-11T18:15:57.023Z",
    "updated_at": "2023-11-11T18:15:57.000Z",
    "created_at": "2022-04-04T11:31:45.000Z",
    "namespace": "wcywxq/mxunh7",
    "user": {
      "id": 732231,
      "type": "User",
      "login": "wcywxq",
      "name": "magic",
      "description": null,
      "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/732231/1606968271774-avatar/886ad88b-d2cc-4c9e-a674-f70eb51a679c.png",
      "books_count": 18,
      "public_books_count": 0,
      "followers_count": 0,
      "following_count": 0,
      "created_at": "2020-01-08T14:21:31.000Z",
      "updated_at": "2023-11-13T09:32:35.000Z",
      "_serializer": "v2.user"
    },
    "_serializer": "v2.book"
  },
  "user_id": 732231,
  "creator": {
    "id": 732231,
    "type": "User",
    "login": "wcywxq",
    "name": "magic",
    "description": null,
    "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/732231/1606968271774-avatar/886ad88b-d2cc-4c9e-a674-f70eb51a679c.png",
    "books_count": 18,
    "public_books_count": 0,
    "followers_count": 0,
    "following_count": 0,
    "created_at": "2020-01-08T14:21:31.000Z",
    "updated_at": "2023-11-13T09:32:35.000Z",
    "_serializer": "v2.user"
  },
  "format": "lake",
  "body": "<a name=\"IvT5B\"></a>\n## 函数式编程有两个核心概念\n- **数据不可变(无副作用)：**它要求你所有的数据都是不可变的，这意味着如果你想修改一个对象，那你应该创建一个新的对象用来修改，而不是修改已有的对象。\n- **无状态：**主要是强调对于一个函数，不管你何时运行，它都应该像第一次运行一样，给定相同的输入，给出相同的输出，完全不依赖外部状态的变化。\n\n<a name=\"xuGxT\"></a>\n## 纯函数带来的意义\n\n- **便于测试和优化**：这个意义在实际项目开发中意义非常大，由于纯函数对于相同的输入永远会返回相同的结果，因此我们可以轻松断言函数的执行结果，同时也可以保证函数的优化不会影响其他代码的执行。\n- **可缓存性**：因为相同的输入总是可以返回相同的输出，因此，我们可以提前缓存函数的执行结果。\n- **更少的 Bug**：使用纯函数意味着你的函数中**不存在指向不明的 this，不存在对全局变量的引用，不存在对参数的修改**，这些共享状态往往是绝大多数 bug 的源头。\n\n",
  "body_draft": "",
  "body_html": "<!doctype html><h2 id=\"IvT5B\"><span>函数式编程有两个核心概念</span></h2><ul><li><strong><span>数据不可变(无副作用)：</span></strong><span>它要求你所有的数据都是不可变的，这意味着如果你想修改一个对象，那你应该创建一个新的对象用来修改，而不是修改已有的对象。</span></li><li><strong><span>无状态：</span></strong><span>主要是强调对于一个函数，不管你何时运行，它都应该像第一次运行一样，给定相同的输入，给出相同的输出，完全不依赖外部状态的变化。</span></li></ul><p data-lake-id=\"uc5c2c06d\"><br /></p><h2 id=\"xuGxT\"><span>纯函数带来的意义</span></h2><ul><li><strong><span>便于测试和优化</span></strong><span>：这个意义在实际项目开发中意义非常大，由于纯函数对于相同的输入永远会返回相同的结果，因此我们可以轻松断言函数的执行结果，同时也可以保证函数的优化不会影响其他代码的执行。</span></li><li><strong><span>可缓存性</span></strong><span>：因为相同的输入总是可以返回相同的输出，因此，我们可以提前缓存函数的执行结果。</span></li><li><strong><span>更少的 Bug</span></strong><span>：使用纯函数意味着你的函数中</span><strong><span>不存在指向不明的 this，不存在对全局变量的引用，不存在对参数的修改</span></strong><span>，这些共享状态往往是绝大多数 bug 的源头。</span></li></ul><p data-lake-id=\"u7f04ef24\"><span>​</span><br /></p>",
  "body_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"viewport\" content=\"adapt\" /><h2 data-lake-id=\"IvT5B\" id=\"IvT5B\"><span data-lake-id=\"u8d8cb376\" id=\"u8d8cb376\">函数式编程有两个核心概念</span></h2><ul list=\"u7efb8d22\"><li fid=\"uea650d6f\" data-lake-id=\"u6b688c7c\" id=\"u6b688c7c\"><strong><span data-lake-id=\"u378e6847\" id=\"u378e6847\">数据不可变(无副作用)：</span></strong><span data-lake-id=\"uecb72229\" id=\"uecb72229\">它要求你所有的数据都是不可变的，这意味着如果你想修改一个对象，那你应该创建一个新的对象用来修改，而不是修改已有的对象。</span></li><li fid=\"uea650d6f\" data-lake-id=\"u6b4a4b17\" id=\"u6b4a4b17\"><strong><span data-lake-id=\"u5db91251\" id=\"u5db91251\">无状态：</span></strong><span data-lake-id=\"ub5b78537\" id=\"ub5b78537\">主要是强调对于一个函数，不管你何时运行，它都应该像第一次运行一样，给定相同的输入，给出相同的输出，完全不依赖外部状态的变化。</span></li></ul><p data-lake-id=\"uc5c2c06d\" id=\"uc5c2c06d\"><br></p><h2 data-lake-id=\"xuGxT\" id=\"xuGxT\"><span data-lake-id=\"ue66af348\" id=\"ue66af348\">纯函数带来的意义</span></h2><ul list=\"u3249848e\"><li fid=\"u1668ab89\" data-lake-id=\"u3d1aba29\" id=\"u3d1aba29\"><strong><span data-lake-id=\"u59516044\" id=\"u59516044\">便于测试和优化</span></strong><span data-lake-id=\"uf05ab7e9\" id=\"uf05ab7e9\">：这个意义在实际项目开发中意义非常大，由于纯函数对于相同的输入永远会返回相同的结果，因此我们可以轻松断言函数的执行结果，同时也可以保证函数的优化不会影响其他代码的执行。</span></li><li fid=\"u1668ab89\" data-lake-id=\"u8ff2c97d\" id=\"u8ff2c97d\"><strong><span data-lake-id=\"u644461c0\" id=\"u644461c0\">可缓存性</span></strong><span data-lake-id=\"ua1574e28\" id=\"ua1574e28\">：因为相同的输入总是可以返回相同的输出，因此，我们可以提前缓存函数的执行结果。</span></li><li fid=\"u1668ab89\" data-lake-id=\"u2fb57788\" id=\"u2fb57788\"><strong><span data-lake-id=\"u0696c4c6\" id=\"u0696c4c6\">更少的 Bug</span></strong><span data-lake-id=\"ub49e721d\" id=\"ub49e721d\">：使用纯函数意味着你的函数中</span><strong><span data-lake-id=\"u00cea6a2\" id=\"u00cea6a2\">不存在指向不明的 this，不存在对全局变量的引用，不存在对参数的修改</span></strong><span data-lake-id=\"u0729d3a2\" id=\"u0729d3a2\">，这些共享状态往往是绝大多数 bug 的源头。</span></li></ul><p data-lake-id=\"u7f04ef24\" id=\"u7f04ef24\"><span data-lake-id=\"u5afca14b\" id=\"u5afca14b\">​</span><br></p>",
  "body_draft_lake": "",
  "public": 0,
  "status": 1,
  "view_status": 0,
  "read_status": 1,
  "likes_count": 0,
  "comments_count": 0,
  "content_updated_at": "2022-04-04T11:33:33.000Z",
  "deleted_at": null,
  "created_at": "2022-04-04T11:33:33.000Z",
  "updated_at": "2022-05-10T15:12:36.000Z",
  "published_at": "2022-04-04T11:33:33.000Z",
  "first_published_at": "2022-04-04T11:33:32.868Z",
  "word_count": 359,
  "cover": null,
  "description": "函数式编程有两个核心概念数据不可变(无副作用)：它要求你所有的数据都是不可变的，这意味着如果你想修改一个对象，那你应该创建一个新的对象用来修改，而不是修改已有的对象。无状态：主要是强调对于一个函数，不管你何时运行，它都应该像第一次运行一样，给定相同的输入，给出相同的输出，完全不依赖外部状态的变...",
  "custom_description": null,
  "hits": 0,
  "_serializer": "v2.doc_detail"
}