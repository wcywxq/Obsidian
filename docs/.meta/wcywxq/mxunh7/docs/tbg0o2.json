{
  "id": 72212193,
  "slug": "tbg0o2",
  "title": "简述 0.1 + 0.2 !== 0.3 的原因",
  "book_id": 26225124,
  "book": {
    "id": 26225124,
    "type": "Book",
    "slug": "mxunh7",
    "name": "八股文 eight-part essay writing",
    "user_id": 732231,
    "description": "前端八股文",
    "creator_id": 732231,
    "public": 0,
    "items_count": 239,
    "likes_count": 0,
    "watches_count": 1,
    "content_updated_at": "2023-11-11T18:15:57.023Z",
    "updated_at": "2023-11-11T18:15:57.000Z",
    "created_at": "2022-04-04T11:31:45.000Z",
    "namespace": "wcywxq/mxunh7",
    "user": {
      "id": 732231,
      "type": "User",
      "login": "wcywxq",
      "name": "magic",
      "description": null,
      "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/732231/1606968271774-avatar/886ad88b-d2cc-4c9e-a674-f70eb51a679c.png",
      "books_count": 18,
      "public_books_count": 0,
      "followers_count": 0,
      "following_count": 0,
      "created_at": "2020-01-08T14:21:31.000Z",
      "updated_at": "2023-11-13T09:32:35.000Z",
      "_serializer": "v2.user"
    },
    "_serializer": "v2.book"
  },
  "user_id": 732231,
  "creator": {
    "id": 732231,
    "type": "User",
    "login": "wcywxq",
    "name": "magic",
    "description": null,
    "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/732231/1606968271774-avatar/886ad88b-d2cc-4c9e-a674-f70eb51a679c.png",
    "books_count": 18,
    "public_books_count": 0,
    "followers_count": 0,
    "following_count": 0,
    "created_at": "2020-01-08T14:21:31.000Z",
    "updated_at": "2023-11-13T09:32:35.000Z",
    "_serializer": "v2.user"
  },
  "format": "lake",
  "body": "<a name=\"OYsd7\"></a>\n## 原因总结\n- 进制转换 ：js 在做数字计算的时候，0.1 和 0.2 都会被转成二进制后无限循环 ，但是 js 采用的 **IEEE 754** 二进制浮点运算，最大可以存储 53 位有效数字，于是大于 53 位后面的会全部截掉，将导致精度丢失。\n- 对阶运算 ：由于指数位数不相同，运算时需要对阶运算，阶小的尾数要根据阶差来右移（0舍1入），尾数位移时可能会发生数丢失的情况，影响精度。\n<a name=\"TlbYN\"></a>\n## 解决方案\n<a name=\"hGF8e\"></a>\n### 转换为整数\n```javascript\n\nfunction add(num1, num2) {\n const num1Digits = (num1.toString().split('.')[1] || '').length;\n const num2Digits = (num2.toString().split('.')[1] || '').length;\n const baseNum = Math.pow(10, Math.max(num1Digits, num2Digits));\n return (num1 * baseNum + num2 * baseNum) / baseNum;\n}\n```\n<a name=\"NpciW\"></a>\n### 使用 Number.EPSILON 误差范围\n```javascript\nfunction isEqual(a, b) {\n  return Math.abs(a - b) < Number.EPSILON;\n}\n\nconsole.log(isEqual(0.1 + 0.2, 0.3)); // true\n```\n<a name=\"wXDjy\"></a>\n### 转换为字符串，对字符串做加法运算\n```javascript\n// 字符串数字相加\nvar addStrings = function (num1, num2) {\n  let i = num1.length - 1;\n  let j = num2.length - 1;\n  const res = [];\n  let carry = 0;\n  while (i >= 0 || j >= 0) {\n    const n1 = i >= 0 ? Number(num1[i]) : 0;\n    const n2 = j >= 0 ? Number(num2[j]) : 0;\n    const sum = n1 + n2 + carry;\n    res.unshift(sum % 10);\n    carry = Math.floor(sum / 10);\n    i--;\n    j--;\n  }\n  if (carry) {\n    res.unshift(carry);\n  }\n  return res.join(\"\");\n};\n\nfunction isEqual(a, b, sum) {\n  const [intStr1, deciStr1] = a.toString().split(\".\");\n  const [intStr2, deciStr2] = b.toString().split(\".\");\n  const inteSum = addStrings(intStr1, intStr2); // 获取整数相加部分\n  const deciSum = addStrings(deciStr1, deciStr2); // 获取小数相加部分\n  return inteSum + \".\" + deciSum === String(sum);\n}\n\nconsole.log(isEqual(0.1, 0.2, 0.3)); // true\n```\n\n",
  "body_draft": "",
  "body_html": "<!doctype html><h2 id=\"OYsd7\"><span>原因总结</span></h2><ul><li><span>进制转换 ：js 在做数字计算的时候，0.1 和 0.2 都会被转成二进制后无限循环 ，但是 js 采用的 </span><strong><span>IEEE 754</span></strong><span> 二进制浮点运算，最大可以存储 53 位有效数字，于是大于 53 位后面的会全部截掉，将导致精度丢失。</span></li><li><span>对阶运算 ：由于指数位数不相同，运算时需要对阶运算，阶小的尾数要根据阶差来右移（0舍1入），尾数位移时可能会发生数丢失的情况，影响精度。</span></li></ul><h2 id=\"TlbYN\"><span>解决方案</span></h2><h3 id=\"hGF8e\"><span>转换为整数</span></h3><pre data-lang=\"javascript\"><code>\nfunction add(num1, num2) {\n const num1Digits = (num1.toString().split('.')[1] || '').length;\n const num2Digits = (num2.toString().split('.')[1] || '').length;\n const baseNum = Math.pow(10, Math.max(num1Digits, num2Digits));\n return (num1 * baseNum + num2 * baseNum) / baseNum;\n}</code></pre><h3 id=\"NpciW\"><span>使用 Number.EPSILON 误差范围</span></h3><pre data-lang=\"javascript\"><code>function isEqual(a, b) {\n  return Math.abs(a - b) &lt; Number.EPSILON;\n}\n\nconsole.log(isEqual(0.1 + 0.2, 0.3)); // true</code></pre><h3 id=\"wXDjy\"><span>转换为字符串，对字符串做加法运算</span></h3><pre data-lang=\"javascript\"><code>// 字符串数字相加\nvar addStrings = function (num1, num2) {\n  let i = num1.length - 1;\n  let j = num2.length - 1;\n  const res = [];\n  let carry = 0;\n  while (i &gt;= 0 || j &gt;= 0) {\n    const n1 = i &gt;= 0 ? Number(num1[i]) : 0;\n    const n2 = j &gt;= 0 ? Number(num2[j]) : 0;\n    const sum = n1 + n2 + carry;\n    res.unshift(sum % 10);\n    carry = Math.floor(sum / 10);\n    i--;\n    j--;\n  }\n  if (carry) {\n    res.unshift(carry);\n  }\n  return res.join(&quot;&quot;);\n};\n\nfunction isEqual(a, b, sum) {\n  const [intStr1, deciStr1] = a.toString().split(&quot;.&quot;);\n  const [intStr2, deciStr2] = b.toString().split(&quot;.&quot;);\n  const inteSum = addStrings(intStr1, intStr2); // 获取整数相加部分\n  const deciSum = addStrings(deciStr1, deciStr2); // 获取小数相加部分\n  return inteSum + &quot;.&quot; + deciSum === String(sum);\n}\n\nconsole.log(isEqual(0.1, 0.2, 0.3)); // true</code></pre><p data-lake-id=\"u7a8db9fd\"><br /></p>",
  "body_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"viewport\" content=\"adapt\" /><h2 data-lake-id=\"OYsd7\" id=\"OYsd7\"><span data-lake-id=\"ub1363877\" id=\"ub1363877\">原因总结</span></h2><ul list=\"u247905de\"><li fid=\"uf18b0127\" data-lake-id=\"u8866e556\" id=\"u8866e556\"><span data-lake-id=\"u53ed63f1\" id=\"u53ed63f1\">进制转换 ：js 在做数字计算的时候，0.1 和 0.2 都会被转成二进制后无限循环 ，但是 js 采用的 </span><strong><span data-lake-id=\"u0b18d0d0\" id=\"u0b18d0d0\">IEEE 754</span></strong><span data-lake-id=\"u01da9513\" id=\"u01da9513\"> 二进制浮点运算，最大可以存储 53 位有效数字，于是大于 53 位后面的会全部截掉，将导致精度丢失。</span></li><li fid=\"uf18b0127\" data-lake-id=\"u1a9a71a2\" id=\"u1a9a71a2\"><span data-lake-id=\"ue157fa58\" id=\"ue157fa58\">对阶运算 ：由于指数位数不相同，运算时需要对阶运算，阶小的尾数要根据阶差来右移（0舍1入），尾数位移时可能会发生数丢失的情况，影响精度。</span></li></ul><h2 data-lake-id=\"TlbYN\" id=\"TlbYN\"><span data-lake-id=\"u586ce582\" id=\"u586ce582\">解决方案</span></h2><h3 data-lake-id=\"hGF8e\" id=\"hGF8e\"><span data-lake-id=\"u1c8108f6\" id=\"u1c8108f6\">转换为整数</span></h3><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%5Cnfunction%20add(num1%2C%20num2)%20%7B%5Cn%20const%20num1Digits%20%3D%20(num1.toString().split('.')%5B1%5D%20%7C%7C%20'').length%3B%5Cn%20const%20num2Digits%20%3D%20(num2.toString().split('.')%5B1%5D%20%7C%7C%20'').length%3B%5Cn%20const%20baseNum%20%3D%20Math.pow(10%2C%20Math.max(num1Digits%2C%20num2Digits))%3B%5Cn%20return%20(num1%20*%20baseNum%20%2B%20num2%20*%20baseNum)%20%2F%20baseNum%3B%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22GxQAa%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h3 data-lake-id=\"NpciW\" id=\"NpciW\"><span data-lake-id=\"u78d79ea4\" id=\"u78d79ea4\">使用 Number.EPSILON 误差范围</span></h3><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22function%20isEqual(a%2C%20b)%20%7B%5Cn%20%20return%20Math.abs(a%20-%20b)%20%3C%20Number.EPSILON%3B%5Cn%7D%5Cn%5Cnconsole.log(isEqual(0.1%20%2B%200.2%2C%200.3))%3B%20%2F%2F%20true%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22I7AKz%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h3 data-lake-id=\"wXDjy\" id=\"wXDjy\"><span data-lake-id=\"u020c11c2\" id=\"u020c11c2\">转换为字符串，对字符串做加法运算</span></h3><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%20%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%95%B0%E5%AD%97%E7%9B%B8%E5%8A%A0%5Cnvar%20addStrings%20%3D%20function%20(num1%2C%20num2)%20%7B%5Cn%20%20let%20i%20%3D%20num1.length%20-%201%3B%5Cn%20%20let%20j%20%3D%20num2.length%20-%201%3B%5Cn%20%20const%20res%20%3D%20%5B%5D%3B%5Cn%20%20let%20carry%20%3D%200%3B%5Cn%20%20while%20(i%20%3E%3D%200%20%7C%7C%20j%20%3E%3D%200)%20%7B%5Cn%20%20%20%20const%20n1%20%3D%20i%20%3E%3D%200%20%3F%20Number(num1%5Bi%5D)%20%3A%200%3B%5Cn%20%20%20%20const%20n2%20%3D%20j%20%3E%3D%200%20%3F%20Number(num2%5Bj%5D)%20%3A%200%3B%5Cn%20%20%20%20const%20sum%20%3D%20n1%20%2B%20n2%20%2B%20carry%3B%5Cn%20%20%20%20res.unshift(sum%20%25%2010)%3B%5Cn%20%20%20%20carry%20%3D%20Math.floor(sum%20%2F%2010)%3B%5Cn%20%20%20%20i--%3B%5Cn%20%20%20%20j--%3B%5Cn%20%20%7D%5Cn%20%20if%20(carry)%20%7B%5Cn%20%20%20%20res.unshift(carry)%3B%5Cn%20%20%7D%5Cn%20%20return%20res.join(%5C%22%5C%22)%3B%5Cn%7D%3B%5Cn%5Cnfunction%20isEqual(a%2C%20b%2C%20sum)%20%7B%5Cn%20%20const%20%5BintStr1%2C%20deciStr1%5D%20%3D%20a.toString().split(%5C%22.%5C%22)%3B%5Cn%20%20const%20%5BintStr2%2C%20deciStr2%5D%20%3D%20b.toString().split(%5C%22.%5C%22)%3B%5Cn%20%20const%20inteSum%20%3D%20addStrings(intStr1%2C%20intStr2)%3B%20%2F%2F%20%E8%8E%B7%E5%8F%96%E6%95%B4%E6%95%B0%E7%9B%B8%E5%8A%A0%E9%83%A8%E5%88%86%5Cn%20%20const%20deciSum%20%3D%20addStrings(deciStr1%2C%20deciStr2)%3B%20%2F%2F%20%E8%8E%B7%E5%8F%96%E5%B0%8F%E6%95%B0%E7%9B%B8%E5%8A%A0%E9%83%A8%E5%88%86%5Cn%20%20return%20inteSum%20%2B%20%5C%22.%5C%22%20%2B%20deciSum%20%3D%3D%3D%20String(sum)%3B%5Cn%7D%5Cn%5Cnconsole.log(isEqual(0.1%2C%200.2%2C%200.3))%3B%20%2F%2F%20true%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22eX898%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u7a8db9fd\" id=\"u7a8db9fd\"><br></p>",
  "body_draft_lake": "",
  "public": 0,
  "status": 1,
  "view_status": 0,
  "read_status": 1,
  "likes_count": 0,
  "comments_count": 0,
  "content_updated_at": "2022-04-04T11:33:32.000Z",
  "deleted_at": null,
  "created_at": "2022-04-04T11:33:32.000Z",
  "updated_at": "2022-05-10T15:12:36.000Z",
  "published_at": "2022-04-04T11:33:32.000Z",
  "first_published_at": "2022-04-04T11:33:32.347Z",
  "word_count": 388,
  "cover": null,
  "description": "原因总结进制转换 ：js 在做数字计算的时候，0.1 和 0.2 都会被转成二进制后无限循环 ，但是 js 采用的 IEEE 754 二进制浮点运算，最大可以存储 53 位有效数字，于是大于 53 位后面的会全部截掉，将导致精度丢失。对阶运算 ：由于指数位数不相同，运算时需要对阶运算，阶小的尾...",
  "custom_description": null,
  "hits": 0,
  "_serializer": "v2.doc_detail"
}