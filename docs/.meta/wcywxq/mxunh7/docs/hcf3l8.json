{
  "id": 81931436,
  "slug": "hcf3l8",
  "title": "for await ... of",
  "book_id": 26225124,
  "book": {
    "id": 26225124,
    "type": "Book",
    "slug": "mxunh7",
    "name": "八股文 eight-part essay writing",
    "user_id": 732231,
    "description": "前端八股文",
    "creator_id": 732231,
    "public": 0,
    "items_count": 239,
    "likes_count": 0,
    "watches_count": 1,
    "content_updated_at": "2023-11-11T18:15:57.023Z",
    "updated_at": "2023-11-11T18:15:57.000Z",
    "created_at": "2022-04-04T11:31:45.000Z",
    "namespace": "wcywxq/mxunh7",
    "user": {
      "id": 732231,
      "type": "User",
      "login": "wcywxq",
      "name": "magic",
      "description": null,
      "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/732231/1606968271774-avatar/886ad88b-d2cc-4c9e-a674-f70eb51a679c.png",
      "books_count": 18,
      "public_books_count": 0,
      "followers_count": 0,
      "following_count": 0,
      "created_at": "2020-01-08T14:21:31.000Z",
      "updated_at": "2023-11-13T09:32:35.000Z",
      "_serializer": "v2.user"
    },
    "_serializer": "v2.book"
  },
  "user_id": 732231,
  "creator": {
    "id": 732231,
    "type": "User",
    "login": "wcywxq",
    "name": "magic",
    "description": null,
    "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/732231/1606968271774-avatar/886ad88b-d2cc-4c9e-a674-f70eb51a679c.png",
    "books_count": 18,
    "public_books_count": 0,
    "followers_count": 0,
    "following_count": 0,
    "created_at": "2020-01-08T14:21:31.000Z",
    "updated_at": "2023-11-13T09:32:35.000Z",
    "_serializer": "v2.user"
  },
  "format": "lake",
  "body": "`for await...of` 语句创建一个循环，该循环遍历异步可迭代对象以及同步可迭代对象，包括: 内置的 `String`、`Array`，类似数组对象 (例如 `arguments` 或 `NodeList`)、`TypedArray`、`Map`、`Set` 和用户定义的异步/同步迭代器。它使用对象的每个不同属性的值调用要执行的语句来调用自定义迭代钩子。<br />类似于 `await` 运算符一样，该语句只能在一个 `async function` 内部使用。\n<a name=\"GvXbL\"></a>\n## 语法\n```javascript\nfor await (variable of iterable) {\n  statement\n}\n```\n\n- `variable`\n\n在每次迭代中，将不同属性的值分配给变量。变量有可能以 `const`、`let` 或者 `var` 来声明。\n\n- `iterable`\n\n被迭代枚举其属性的对象。与 `for...of` 相比，这里的对象可以返回 `Promise`，如果是这样，那么 `variable` 将是 `Promise` 所包含的值，否则是值本身。\n<a name=\"QwJAx\"></a>\n## 例子\n<a name=\"FSKkX\"></a>\n### 异步可迭代对象\n```javascript\nvar asyncIterable = {\n  [Symbol.asyncIterator]() {\n    return {\n      i: 0,\n      next() {\n        if (this.i < 3) {\n          return Promise.resolve({ value: this.i++, done: false });\n        }\n\n        return Promise.resolve({ done: true });\n      }\n    };\n  }\n};\n\n(async function() {\n   for await (num of asyncIterable) {\n     console.log(num);\n   }\n})();\n\n// 0\n// 1\n// 2\n```\n<a name=\"uZtnX\"></a>\n### 迭代异步生成器\n异步生成器已经实现了异步迭代器协议，所以可以用 `for await...of` 循环。\n```javascript\nasync function* asyncGenerator() {\n  var i = 0;\n  while (i < 3) {\n    yield i++;\n  }\n}\n\n(async function() {\n  for await (num of asyncGenerator()) {\n    console.log(num);\n  }\n})();\n// 0\n// 1\n// 2\n```\n有关使用 `for await... of` 考虑迭代 `API` 中获取数据的异步 `generator` 更具体的例子。这个例子首先为一个数据流创建了一个异步 `generator`，然后使用它来获得这个 `API` 的响应值的大小。\n```javascript\nasync function* streamAsyncIterator(stream) {\n  const reader = stream.getReader();\n  try {\n    while (true) {\n      const { done, value } = await reader.read();\n      if (done) {\n        return;\n      }\n      yield value;\n    }\n  } finally {\n    reader.releaseLock();\n  }\n}\n// 从 url 获取数据并使用异步 generator 来计算响应值的大小\nasync function getResponseSize(url) {\n  const response = await fetch(url);\n  // Will hold the size of the response, in bytes.\n  let responseSize = 0;\n  // 使用 for-await-of 循环。异步 generator 会遍历响应值的每一部分\n  for await (const chunk of streamAsyncIterator(response.body)) {\n    // Incrementing the total response length.\n    responseSize += chunk.length;\n  }\n\n  console.log(`Response Size: ${responseSize} bytes`);\n  // expected output: \"Response Size: 1071472\"\n  return responseSize;\n}\ngetResponseSize('https://jsonplaceholder.typicode.com/photos');\n```\n",
  "body_draft": "",
  "body_html": "<!doctype html><div class=\"lake-content\" typography=\"classic\"><p id=\"ub5ac6864\" class=\"ne-p\"><code class=\"ne-code\"><span class=\"ne-text\">for await...of</span></code><span class=\"ne-text\"> 语句创建一个循环，该循环遍历异步可迭代对象以及同步可迭代对象，包括: 内置的 </span><code class=\"ne-code\"><span class=\"ne-text\">String</span></code><span class=\"ne-text\">、</span><code class=\"ne-code\"><span class=\"ne-text\">Array</span></code><span class=\"ne-text\">，类似数组对象 (例如 </span><code class=\"ne-code\"><span class=\"ne-text\">arguments</span></code><span class=\"ne-text\"> 或 </span><code class=\"ne-code\"><span class=\"ne-text\">NodeList</span></code><span class=\"ne-text\">)、</span><code class=\"ne-code\"><span class=\"ne-text\">TypedArray</span></code><span class=\"ne-text\">、</span><code class=\"ne-code\"><span class=\"ne-text\">Map</span></code><span class=\"ne-text\">、</span><code class=\"ne-code\"><span class=\"ne-text\">Set</span></code><span class=\"ne-text\"> 和用户定义的异步/同步迭代器。它使用对象的每个不同属性的值调用要执行的语句来调用自定义迭代钩子。</span></p><p id=\"u26e7b6db\" class=\"ne-p\"><span class=\"ne-text\">类似于 </span><code class=\"ne-code\"><span class=\"ne-text\">await</span></code><span class=\"ne-text\"> 运算符一样，该语句只能在一个 </span><code class=\"ne-code\"><span class=\"ne-text\">async function</span></code><span class=\"ne-text\"> 内部使用。</span></p><h2 id=\"GvXbL\"><span class=\"ne-text\">语法</span></h2><pre data-language=\"javascript\" id=\"AgbZy\" class=\"ne-codeblock language-javascript\">for await (variable of iterable) {\n  statement\n}</pre><ul class=\"ne-ul\"><li id=\"u80a38a2e\"><code class=\"ne-code\"><span class=\"ne-text\">variable</span></code></li></ul><p id=\"u9b9f78c0\" class=\"ne-p\"><span class=\"ne-text\">在每次迭代中，将不同属性的值分配给变量。变量有可能以 </span><code class=\"ne-code\"><span class=\"ne-text\">const</span></code><span class=\"ne-text\">、</span><code class=\"ne-code\"><span class=\"ne-text\">let</span></code><span class=\"ne-text\"> 或者 </span><code class=\"ne-code\"><span class=\"ne-text\">var</span></code><span class=\"ne-text\"> 来声明。</span></p><ul class=\"ne-ul\"><li id=\"u641bbdaa\"><code class=\"ne-code\"><span class=\"ne-text\">iterable</span></code></li></ul><p id=\"u175dd262\" class=\"ne-p\"><span class=\"ne-text\">被迭代枚举其属性的对象。与 </span><code class=\"ne-code\"><span class=\"ne-text\">for...of</span></code><span class=\"ne-text\"> 相比，这里的对象可以返回 </span><code class=\"ne-code\"><span class=\"ne-text\">Promise</span></code><span class=\"ne-text\">，如果是这样，那么 </span><code class=\"ne-code\"><span class=\"ne-text\">variable</span></code><span class=\"ne-text\"> 将是 </span><code class=\"ne-code\"><span class=\"ne-text\">Promise</span></code><span class=\"ne-text\"> 所包含的值，否则是值本身。</span></p><h2 id=\"QwJAx\"><span class=\"ne-text\">例子</span></h2><h3 id=\"FSKkX\"><span class=\"ne-text\">异步可迭代对象</span></h3><pre data-language=\"javascript\" id=\"Qp6Mi\" class=\"ne-codeblock language-javascript\">var asyncIterable = {\n  [Symbol.asyncIterator]() {\n    return {\n      i: 0,\n      next() {\n        if (this.i &lt; 3) {\n          return Promise.resolve({ value: this.i++, done: false });\n        }\n\n        return Promise.resolve({ done: true });\n      }\n    };\n  }\n};\n\n(async function() {\n   for await (num of asyncIterable) {\n     console.log(num);\n   }\n})();\n\n// 0\n// 1\n// 2</pre><h3 id=\"uZtnX\"><span class=\"ne-text\">迭代异步生成器</span></h3><p id=\"u4c9af63d\" class=\"ne-p\"><span class=\"ne-text\">异步生成器已经实现了异步迭代器协议，所以可以用 </span><code class=\"ne-code\"><span class=\"ne-text\">for await...of</span></code><span class=\"ne-text\"> 循环。</span></p><pre data-language=\"javascript\" id=\"MdRxK\" class=\"ne-codeblock language-javascript\">async function* asyncGenerator() {\n  var i = 0;\n  while (i &lt; 3) {\n    yield i++;\n  }\n}\n\n(async function() {\n  for await (num of asyncGenerator()) {\n    console.log(num);\n  }\n})();\n// 0\n// 1\n// 2</pre><p id=\"uda440f41\" class=\"ne-p\"><span class=\"ne-text\">有关使用 </span><code class=\"ne-code\"><span class=\"ne-text\">for await... of</span></code><span class=\"ne-text\"> 考虑迭代 </span><code class=\"ne-code\"><span class=\"ne-text\">API</span></code><span class=\"ne-text\"> 中获取数据的异步 </span><code class=\"ne-code\"><span class=\"ne-text\">generator</span></code><span class=\"ne-text\"> 更具体的例子。这个例子首先为一个数据流创建了一个异步 </span><code class=\"ne-code\"><span class=\"ne-text\">generator</span></code><span class=\"ne-text\">，然后使用它来获得这个 </span><code class=\"ne-code\"><span class=\"ne-text\">API</span></code><span class=\"ne-text\"> 的响应值的大小。</span></p><pre data-language=\"javascript\" id=\"YzV6q\" class=\"ne-codeblock language-javascript\">async function* streamAsyncIterator(stream) {\n  const reader = stream.getReader();\n  try {\n    while (true) {\n      const { done, value } = await reader.read();\n      if (done) {\n        return;\n      }\n      yield value;\n    }\n  } finally {\n    reader.releaseLock();\n  }\n}\n// 从 url 获取数据并使用异步 generator 来计算响应值的大小\nasync function getResponseSize(url) {\n  const response = await fetch(url);\n  // Will hold the size of the response, in bytes.\n  let responseSize = 0;\n  // 使用 for-await-of 循环。异步 generator 会遍历响应值的每一部分\n  for await (const chunk of streamAsyncIterator(response.body)) {\n    // Incrementing the total response length.\n    responseSize += chunk.length;\n  }\n\n  console.log(`Response Size: ${responseSize} bytes`);\n  // expected output: &quot;Response Size: 1071472&quot;\n  return responseSize;\n}\ngetResponseSize('https://jsonplaceholder.typicode.com/photos');</pre></div>",
  "body_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"viewport\" content=\"adapt\" /><meta name=\"paragraphSpacing\" content=\"relax\" /><p data-lake-id=\"ub5ac6864\" id=\"ub5ac6864\"><code data-lake-id=\"uee3dafba\" id=\"uee3dafba\"><span data-lake-id=\"u4b3cc0de\" id=\"u4b3cc0de\">for await...of</span></code><span data-lake-id=\"uc30e260d\" id=\"uc30e260d\"> 语句创建一个循环，该循环遍历异步可迭代对象以及同步可迭代对象，包括: 内置的 </span><code data-lake-id=\"udd846157\" id=\"udd846157\"><span data-lake-id=\"u280ea011\" id=\"u280ea011\">String</span></code><span data-lake-id=\"u121f3512\" id=\"u121f3512\">、</span><code data-lake-id=\"ue1eccb7e\" id=\"ue1eccb7e\"><span data-lake-id=\"ua3632fa3\" id=\"ua3632fa3\">Array</span></code><span data-lake-id=\"ucd4beb6b\" id=\"ucd4beb6b\">，类似数组对象 (例如 </span><code data-lake-id=\"u217cb35c\" id=\"u217cb35c\"><span data-lake-id=\"u71722b29\" id=\"u71722b29\">arguments</span></code><span data-lake-id=\"ue7831ff2\" id=\"ue7831ff2\"> 或 </span><code data-lake-id=\"ueeea4b91\" id=\"ueeea4b91\"><span data-lake-id=\"uaccc27ad\" id=\"uaccc27ad\">NodeList</span></code><span data-lake-id=\"u898077b2\" id=\"u898077b2\">)、</span><code data-lake-id=\"uc5f0be89\" id=\"uc5f0be89\"><span data-lake-id=\"u449f5943\" id=\"u449f5943\">TypedArray</span></code><span data-lake-id=\"uabdbf7c6\" id=\"uabdbf7c6\">、</span><code data-lake-id=\"u310171fc\" id=\"u310171fc\"><span data-lake-id=\"udc4443f0\" id=\"udc4443f0\">Map</span></code><span data-lake-id=\"u16e327a8\" id=\"u16e327a8\">、</span><code data-lake-id=\"u45b1a58c\" id=\"u45b1a58c\"><span data-lake-id=\"u66c7de5e\" id=\"u66c7de5e\">Set</span></code><span data-lake-id=\"u05522ff2\" id=\"u05522ff2\"> 和用户定义的异步/同步迭代器。它使用对象的每个不同属性的值调用要执行的语句来调用自定义迭代钩子。</span></p><p data-lake-id=\"u26e7b6db\" id=\"u26e7b6db\"><span data-lake-id=\"uf8671d69\" id=\"uf8671d69\">类似于 </span><code data-lake-id=\"ue10997d3\" id=\"ue10997d3\"><span data-lake-id=\"ucb898c3e\" id=\"ucb898c3e\">await</span></code><span data-lake-id=\"u876547ea\" id=\"u876547ea\"> 运算符一样，该语句只能在一个 </span><code data-lake-id=\"u7248fc29\" id=\"u7248fc29\"><span data-lake-id=\"ua1e6c4ef\" id=\"ua1e6c4ef\">async function</span></code><span data-lake-id=\"u53026e78\" id=\"u53026e78\"> 内部使用。</span></p><h2 data-lake-id=\"GvXbL\" id=\"GvXbL\"><span data-lake-id=\"ubba927d3\" id=\"ubba927d3\">语法</span></h2><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22for%20await%20(variable%20of%20iterable)%20%7B%5Cn%20%20statement%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22AgbZy%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><ul list=\"u1e69a18e\"><li fid=\"u102586c3\" data-lake-id=\"u80a38a2e\" id=\"u80a38a2e\"><code data-lake-id=\"u2790812e\" id=\"u2790812e\"><span data-lake-id=\"uea9e9faf\" id=\"uea9e9faf\">variable</span></code></li></ul><p data-lake-id=\"u9b9f78c0\" id=\"u9b9f78c0\"><span data-lake-id=\"u9c6a72f3\" id=\"u9c6a72f3\">在每次迭代中，将不同属性的值分配给变量。变量有可能以 </span><code data-lake-id=\"ufd90050d\" id=\"ufd90050d\"><span data-lake-id=\"uf5cc2bd9\" id=\"uf5cc2bd9\">const</span></code><span data-lake-id=\"u9df0e057\" id=\"u9df0e057\">、</span><code data-lake-id=\"u4a3437d5\" id=\"u4a3437d5\"><span data-lake-id=\"ucb93715e\" id=\"ucb93715e\">let</span></code><span data-lake-id=\"ue39ce7b8\" id=\"ue39ce7b8\"> 或者 </span><code data-lake-id=\"ue9c00f1b\" id=\"ue9c00f1b\"><span data-lake-id=\"uee72c9f8\" id=\"uee72c9f8\">var</span></code><span data-lake-id=\"u9e27b07b\" id=\"u9e27b07b\"> 来声明。</span></p><ul list=\"u289b98e7\"><li fid=\"udee6bbb3\" data-lake-id=\"u641bbdaa\" id=\"u641bbdaa\"><code data-lake-id=\"uf15b9d6a\" id=\"uf15b9d6a\"><span data-lake-id=\"ue4f35072\" id=\"ue4f35072\">iterable</span></code></li></ul><p data-lake-id=\"u175dd262\" id=\"u175dd262\"><span data-lake-id=\"u84825e1c\" id=\"u84825e1c\">被迭代枚举其属性的对象。与 </span><code data-lake-id=\"u6b22a945\" id=\"u6b22a945\"><span data-lake-id=\"u9278f585\" id=\"u9278f585\">for...of</span></code><span data-lake-id=\"uc389e3cc\" id=\"uc389e3cc\"> 相比，这里的对象可以返回 </span><code data-lake-id=\"udafb1ca1\" id=\"udafb1ca1\"><span data-lake-id=\"ude068fb7\" id=\"ude068fb7\">Promise</span></code><span data-lake-id=\"u0efb249e\" id=\"u0efb249e\">，如果是这样，那么 </span><code data-lake-id=\"u63c53776\" id=\"u63c53776\"><span data-lake-id=\"u267ba5b8\" id=\"u267ba5b8\">variable</span></code><span data-lake-id=\"u2bca9b50\" id=\"u2bca9b50\"> 将是 </span><code data-lake-id=\"u1bb73f95\" id=\"u1bb73f95\"><span data-lake-id=\"u9cffba36\" id=\"u9cffba36\">Promise</span></code><span data-lake-id=\"uba58014e\" id=\"uba58014e\"> 所包含的值，否则是值本身。</span></p><h2 data-lake-id=\"QwJAx\" id=\"QwJAx\"><span data-lake-id=\"u53f60d7f\" id=\"u53f60d7f\">例子</span></h2><h3 data-lake-id=\"FSKkX\" id=\"FSKkX\"><span data-lake-id=\"u80c72d7e\" id=\"u80c72d7e\">异步可迭代对象</span></h3><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22var%20asyncIterable%20%3D%20%7B%5Cn%20%20%5BSymbol.asyncIterator%5D()%20%7B%5Cn%20%20%20%20return%20%7B%5Cn%20%20%20%20%20%20i%3A%200%2C%5Cn%20%20%20%20%20%20next()%20%7B%5Cn%20%20%20%20%20%20%20%20if%20(this.i%20%3C%203)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20return%20Promise.resolve(%7B%20value%3A%20this.i%2B%2B%2C%20done%3A%20false%20%7D)%3B%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%20%20%20%20return%20Promise.resolve(%7B%20done%3A%20true%20%7D)%3B%5Cn%20%20%20%20%20%20%7D%5Cn%20%20%20%20%7D%3B%5Cn%20%20%7D%5Cn%7D%3B%5Cn%5Cn(async%20function()%20%7B%5Cn%20%20%20for%20await%20(num%20of%20asyncIterable)%20%7B%5Cn%20%20%20%20%20console.log(num)%3B%5Cn%20%20%20%7D%5Cn%7D)()%3B%5Cn%5Cn%2F%2F%200%5Cn%2F%2F%201%5Cn%2F%2F%202%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22Qp6Mi%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h3 data-lake-id=\"uZtnX\" id=\"uZtnX\"><span data-lake-id=\"u381ab42c\" id=\"u381ab42c\">迭代异步生成器</span></h3><p data-lake-id=\"u4c9af63d\" id=\"u4c9af63d\"><span data-lake-id=\"u4035163c\" id=\"u4035163c\">异步生成器已经实现了异步迭代器协议，所以可以用 </span><code data-lake-id=\"u3fada048\" id=\"u3fada048\"><span data-lake-id=\"ud7d372a6\" id=\"ud7d372a6\">for await...of</span></code><span data-lake-id=\"uc52688ff\" id=\"uc52688ff\"> 循环。</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22async%20function*%20asyncGenerator()%20%7B%5Cn%20%20var%20i%20%3D%200%3B%5Cn%20%20while%20(i%20%3C%203)%20%7B%5Cn%20%20%20%20yield%20i%2B%2B%3B%5Cn%20%20%7D%5Cn%7D%5Cn%5Cn(async%20function()%20%7B%5Cn%20%20for%20await%20(num%20of%20asyncGenerator())%20%7B%5Cn%20%20%20%20console.log(num)%3B%5Cn%20%20%7D%5Cn%7D)()%3B%5Cn%2F%2F%200%5Cn%2F%2F%201%5Cn%2F%2F%202%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22MdRxK%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"uda440f41\" id=\"uda440f41\"><span data-lake-id=\"u0485adfd\" id=\"u0485adfd\">有关使用 </span><code data-lake-id=\"u68d05a4c\" id=\"u68d05a4c\"><span data-lake-id=\"u669a4698\" id=\"u669a4698\">for await... of</span></code><span data-lake-id=\"u71aed6b4\" id=\"u71aed6b4\"> 考虑迭代 </span><code data-lake-id=\"udea62866\" id=\"udea62866\"><span data-lake-id=\"uea1d0135\" id=\"uea1d0135\">API</span></code><span data-lake-id=\"ub1e0fab1\" id=\"ub1e0fab1\"> 中获取数据的异步 </span><code data-lake-id=\"ufa945635\" id=\"ufa945635\"><span data-lake-id=\"u83e6e778\" id=\"u83e6e778\">generator</span></code><span data-lake-id=\"ue8fc49e1\" id=\"ue8fc49e1\"> 更具体的例子。这个例子首先为一个数据流创建了一个异步 </span><code data-lake-id=\"u8cb4eca5\" id=\"u8cb4eca5\"><span data-lake-id=\"u81aa9dce\" id=\"u81aa9dce\">generator</span></code><span data-lake-id=\"uc6109c77\" id=\"uc6109c77\">，然后使用它来获得这个 </span><code data-lake-id=\"u45f6f3f3\" id=\"u45f6f3f3\"><span data-lake-id=\"ub71f8382\" id=\"ub71f8382\">API</span></code><span data-lake-id=\"u47292f96\" id=\"u47292f96\"> 的响应值的大小。</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22async%20function*%20streamAsyncIterator(stream)%20%7B%5Cn%20%20const%20reader%20%3D%20stream.getReader()%3B%5Cn%20%20try%20%7B%5Cn%20%20%20%20while%20(true)%20%7B%5Cn%20%20%20%20%20%20const%20%7B%20done%2C%20value%20%7D%20%3D%20await%20reader.read()%3B%5Cn%20%20%20%20%20%20if%20(done)%20%7B%5Cn%20%20%20%20%20%20%20%20return%3B%5Cn%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20yield%20value%3B%5Cn%20%20%20%20%7D%5Cn%20%20%7D%20finally%20%7B%5Cn%20%20%20%20reader.releaseLock()%3B%5Cn%20%20%7D%5Cn%7D%5Cn%2F%2F%20%E4%BB%8E%20url%20%E8%8E%B7%E5%8F%96%E6%95%B0%E6%8D%AE%E5%B9%B6%E4%BD%BF%E7%94%A8%E5%BC%82%E6%AD%A5%20generator%20%E6%9D%A5%E8%AE%A1%E7%AE%97%E5%93%8D%E5%BA%94%E5%80%BC%E7%9A%84%E5%A4%A7%E5%B0%8F%5Cnasync%20function%20getResponseSize(url)%20%7B%5Cn%20%20const%20response%20%3D%20await%20fetch(url)%3B%5Cn%20%20%2F%2F%20Will%20hold%20the%20size%20of%20the%20response%2C%20in%20bytes.%5Cn%20%20let%20responseSize%20%3D%200%3B%5Cn%20%20%2F%2F%20%E4%BD%BF%E7%94%A8%20for-await-of%20%E5%BE%AA%E7%8E%AF%E3%80%82%E5%BC%82%E6%AD%A5%20generator%20%E4%BC%9A%E9%81%8D%E5%8E%86%E5%93%8D%E5%BA%94%E5%80%BC%E7%9A%84%E6%AF%8F%E4%B8%80%E9%83%A8%E5%88%86%5Cn%20%20for%20await%20(const%20chunk%20of%20streamAsyncIterator(response.body))%20%7B%5Cn%20%20%20%20%2F%2F%20Incrementing%20the%20total%20response%20length.%5Cn%20%20%20%20responseSize%20%2B%3D%20chunk.length%3B%5Cn%20%20%7D%5Cn%5Cn%20%20console.log(%60Response%20Size%3A%20%24%7BresponseSize%7D%20bytes%60)%3B%5Cn%20%20%2F%2F%20expected%20output%3A%20%5C%22Response%20Size%3A%201071472%5C%22%5Cn%20%20return%20responseSize%3B%5Cn%7D%5CngetResponseSize('https%3A%2F%2Fjsonplaceholder.typicode.com%2Fphotos')%3B%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22YzV6q%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card>",
  "body_draft_lake": "",
  "public": 0,
  "status": 1,
  "view_status": 0,
  "read_status": 1,
  "likes_count": 0,
  "comments_count": 0,
  "content_updated_at": "2022-06-30T06:17:56.000Z",
  "deleted_at": null,
  "created_at": "2022-06-30T06:13:49.000Z",
  "updated_at": "2022-06-30T06:17:56.000Z",
  "published_at": "2022-06-30T06:17:56.000Z",
  "first_published_at": "2022-06-30T06:15:17.950Z",
  "word_count": 567,
  "cover": null,
  "description": "for await...of 语句创建一个循环，该循环遍历异步可迭代对象以及同步可迭代对象，包括: 内置的 String、Array，类似数组对象 (例如 arguments 或 NodeList)、TypedArray、Map、Set 和用户定义的异步/同步迭代器。它使用对象的每个不同属性的...",
  "custom_description": null,
  "hits": 0,
  "_serializer": "v2.doc_detail"
}