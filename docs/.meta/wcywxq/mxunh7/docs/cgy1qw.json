{
  "id": 72212096,
  "slug": "cgy1qw",
  "title": "vue3 api 的变化",
  "book_id": 26225124,
  "book": {
    "id": 26225124,
    "type": "Book",
    "slug": "mxunh7",
    "name": "八股文 eight-part essay writing",
    "user_id": 732231,
    "description": "前端八股文",
    "creator_id": 732231,
    "public": 0,
    "items_count": 239,
    "likes_count": 0,
    "watches_count": 1,
    "content_updated_at": "2023-11-11T18:15:57.023Z",
    "updated_at": "2023-11-11T18:15:57.000Z",
    "created_at": "2022-04-04T11:31:45.000Z",
    "namespace": "wcywxq/mxunh7",
    "user": {
      "id": 732231,
      "type": "User",
      "login": "wcywxq",
      "name": "magic",
      "description": null,
      "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/732231/1606968271774-avatar/886ad88b-d2cc-4c9e-a674-f70eb51a679c.png",
      "books_count": 18,
      "public_books_count": 0,
      "followers_count": 0,
      "following_count": 0,
      "created_at": "2020-01-08T14:21:31.000Z",
      "updated_at": "2023-11-13T09:32:35.000Z",
      "_serializer": "v2.user"
    },
    "_serializer": "v2.book"
  },
  "user_id": 732231,
  "creator": {
    "id": 732231,
    "type": "User",
    "login": "wcywxq",
    "name": "magic",
    "description": null,
    "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/732231/1606968271774-avatar/886ad88b-d2cc-4c9e-a674-f70eb51a679c.png",
    "books_count": 18,
    "public_books_count": 0,
    "followers_count": 0,
    "following_count": 0,
    "created_at": "2020-01-08T14:21:31.000Z",
    "updated_at": "2023-11-13T09:32:35.000Z",
    "_serializer": "v2.user"
  },
  "format": "lake",
  "body": "<a name=\"ANZGw\"></a>\n## watch 的变化\n- vue3 中的 watch 函数第一个参数为响应式对象，有 getter/setter 的 effect 函数，或者这些类型数组；第二个参数为数据变化时的回调；第三个函数为 watchOption，提供是否立即监听和是否深度监听的配置\n- vue3 可以多次使用 watch 方法\n```javascript\nwatch(data, () => {})\nwatch(() => data.name, () => {})\nwatch([data, name], () => {})\n```\n\n- vue3 的 setup 中不存在 this 对象，监听路由需要使用 vue-router 提供的 useRoute，vue2 则是在 watch 对象里添加 '$route' 进行监听\n```vue\n<script>\n\timport { useRoute } from 'vue-router'\n  // setup\n  const route = useRoute()\n  const userData = ref()\n  // 当参数更改时获取用户信息\n  watch(() => route.params, () => {})\n</script>\n```\n<a name=\"kTbgM\"></a>\n## vue3 中 watchEffect 与 watch 的异同\n不同点：\n\n- watchEffect 立即执行传入的函数，在初始化时自动收集依赖，并在其依赖变更时重新运行该函数\n- watchEffect 无法获取原值，只能得到变化后的值\n\n相同点：<br />二者都可以通过 StopHandle.stop 函数手动停止监听\n```javascript\nconst stopHandle = watchEffect()\nstopHandle.stop()\n```\n<a name=\"V0h8X\"></a>\n## v-model 的变化\n<a name=\"cfxNZ\"></a>\n### vue2 的 v-model\nv-model 通过在数据修改时，通知父级节点实现数据的双向绑定。其实是一个语法糖当满足以下两个条件时，可实现自定义组件的v-model：\n\n- 子组件受控接收 prop\n- 数据修改时触发 event 把新的数据提交给父组件\n```vue\n<script>\nexport default {\n\tprops: {\n  \tvalue: String\n  },\n  model: {\n    prop: 'value',\n    event: 'change'\n  }\n}\n</script>\n```\n<a name=\"tGMtG\"></a>\n### vue3 的 v-model\nvue3 中升级了 v-model 的用法，通过 update:modelValue 来触发事件，prop 也被更改为 modelValue。还在一个组件上支持多个 v-model，如新增 v-model:lastName 等。\n```javascript\nprops: {\n  modelValue: String,\n}\nemits: ['update:modelValue'],\nmethods: {\n  changeTitle() {\n    this.$emit('update:modelValue', title)\n  }\n}\n```\n",
  "body_draft": "",
  "body_html": "<!doctype html><h2 id=\"ANZGw\"><span>watch 的变化</span></h2><ul><li><span>vue3 中的 watch 函数第一个参数为响应式对象，有 getter/setter 的 effect 函数，或者这些类型数组；第二个参数为数据变化时的回调；第三个函数为 watchOption，提供是否立即监听和是否深度监听的配置</span></li><li><span>vue3 可以多次使用 watch 方法</span></li></ul><pre data-lang=\"javascript\"><code>watch(data, () =&gt; {})\nwatch(() =&gt; data.name, () =&gt; {})\nwatch([data, name], () =&gt; {})</code></pre><ul><li><span>vue3 的 setup 中不存在 this 对象，监听路由需要使用 vue-router 提供的 useRoute，vue2 则是在 watch 对象里添加 '$route' 进行监听</span></li></ul><pre data-lang=\"vue\"><code>&lt;script&gt;\n\timport { useRoute } from 'vue-router'\n  // setup\n  const route = useRoute()\n  const userData = ref()\n  // 当参数更改时获取用户信息\n  watch(() =&gt; route.params, () =&gt; {})\n&lt;/script&gt;</code></pre><h2 id=\"kTbgM\"><span>vue3 中 watchEffect 与 watch 的异同</span></h2><p data-lake-id=\"u3320f404\"><span>不同点：</span></p><ul><li><span>watchEffect 立即执行传入的函数，在初始化时自动收集依赖，并在其依赖变更时重新运行该函数</span></li><li><span>watchEffect 无法获取原值，只能得到变化后的值</span></li></ul><p data-lake-id=\"ue0d267e7\"><span>相同点：</span></p><p data-lake-id=\"ub1e5a60f\"><span>二者都可以通过 StopHandle.stop 函数手动停止监听</span></p><pre data-lang=\"javascript\"><code>const stopHandle = watchEffect()\nstopHandle.stop()</code></pre><h2 id=\"V0h8X\"><span>v-model 的变化</span></h2><h3 id=\"cfxNZ\"><span>vue2 的 v-model</span></h3><p data-lake-id=\"u2447a58d\"><span>v-model 通过在数据修改时，通知父级节点实现数据的双向绑定。其实是一个语法糖当满足以下两个条件时，可实现自定义组件的v-model：</span></p><ul><li><span>子组件受控接收 prop</span></li><li><span>数据修改时触发 event 把新的数据提交给父组件</span></li></ul><pre data-lang=\"vue\"><code>&lt;script&gt;\nexport default {\n\tprops: {\n  \tvalue: String\n  },\n  model: {\n    prop: 'value',\n    event: 'change'\n  }\n}\n&lt;/script&gt;</code></pre><h3 id=\"tGMtG\"><span>vue3 的 v-model</span></h3><p data-lake-id=\"uc48c0a7b\"><span>vue3 中升级了 v-model 的用法，通过 update:modelValue 来触发事件，prop 也被更改为 modelValue。还在一个组件上支持多个 v-model，如新增 v-model:lastName 等。</span></p><pre data-lang=\"javascript\"><code>props: {\n  modelValue: String,\n}\nemits: ['update:modelValue'],\nmethods: {\n  changeTitle() {\n    this.$emit('update:modelValue', title)\n  }\n}</code></pre>",
  "body_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"viewport\" content=\"adapt\" /><h2 data-lake-id=\"ANZGw\" id=\"ANZGw\"><span data-lake-id=\"uc88793cd\" id=\"uc88793cd\">watch 的变化</span></h2><ul list=\"ude79b5b5\"><li fid=\"u95a60858\" data-lake-id=\"ucdea5190\" id=\"ucdea5190\"><span data-lake-id=\"u2c708225\" id=\"u2c708225\">vue3 中的 watch 函数第一个参数为响应式对象，有 getter/setter 的 effect 函数，或者这些类型数组；第二个参数为数据变化时的回调；第三个函数为 watchOption，提供是否立即监听和是否深度监听的配置</span></li><li fid=\"u95a60858\" data-lake-id=\"u48ec0888\" id=\"u48ec0888\"><span data-lake-id=\"ua2905f76\" id=\"ua2905f76\">vue3 可以多次使用 watch 方法</span></li></ul><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22watch(data%2C%20()%20%3D%3E%20%7B%7D)%5Cnwatch(()%20%3D%3E%20data.name%2C%20()%20%3D%3E%20%7B%7D)%5Cnwatch(%5Bdata%2C%20name%5D%2C%20()%20%3D%3E%20%7B%7D)%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22VS6uW%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><ul list=\"u3e4800b0\"><li fid=\"ud88114d6\" data-lake-id=\"ub30fb4d5\" id=\"ub30fb4d5\"><span data-lake-id=\"u10936e83\" id=\"u10936e83\">vue3 的 setup 中不存在 this 对象，监听路由需要使用 vue-router 提供的 useRoute，vue2 则是在 watch 对象里添加 '$route' 进行监听</span></li></ul><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22vue%22%2C%22code%22%3A%22%3Cscript%3E%5Cn%5Ctimport%20%7B%20useRoute%20%7D%20from%20'vue-router'%5Cn%20%20%2F%2F%20setup%5Cn%20%20const%20route%20%3D%20useRoute()%5Cn%20%20const%20userData%20%3D%20ref()%5Cn%20%20%2F%2F%20%E5%BD%93%E5%8F%82%E6%95%B0%E6%9B%B4%E6%94%B9%E6%97%B6%E8%8E%B7%E5%8F%96%E7%94%A8%E6%88%B7%E4%BF%A1%E6%81%AF%5Cn%20%20watch(()%20%3D%3E%20route.params%2C%20()%20%3D%3E%20%7B%7D)%5Cn%3C%2Fscript%3E%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22l38H3%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h2 data-lake-id=\"kTbgM\" id=\"kTbgM\"><span data-lake-id=\"uacbb2389\" id=\"uacbb2389\">vue3 中 watchEffect 与 watch 的异同</span></h2><p data-lake-id=\"u3320f404\" id=\"u3320f404\"><span data-lake-id=\"u156c4aea\" id=\"u156c4aea\">不同点：</span></p><ul list=\"u9963021b\"><li fid=\"ue7b45d52\" data-lake-id=\"u0be4c756\" id=\"u0be4c756\"><span data-lake-id=\"u7929875b\" id=\"u7929875b\">watchEffect 立即执行传入的函数，在初始化时自动收集依赖，并在其依赖变更时重新运行该函数</span></li><li fid=\"ue7b45d52\" data-lake-id=\"u4eb0a82d\" id=\"u4eb0a82d\"><span data-lake-id=\"u28799f66\" id=\"u28799f66\">watchEffect 无法获取原值，只能得到变化后的值</span></li></ul><p data-lake-id=\"ue0d267e7\" id=\"ue0d267e7\"><span data-lake-id=\"u3ff89934\" id=\"u3ff89934\">相同点：</span></p><p data-lake-id=\"ub1e5a60f\" id=\"ub1e5a60f\"><span data-lake-id=\"uf6bd5c2f\" id=\"uf6bd5c2f\">二者都可以通过 StopHandle.stop 函数手动停止监听</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22const%20stopHandle%20%3D%20watchEffect()%5CnstopHandle.stop()%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22BIF8c%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h2 data-lake-id=\"V0h8X\" id=\"V0h8X\"><span data-lake-id=\"u0f206eb6\" id=\"u0f206eb6\">v-model 的变化</span></h2><h3 data-lake-id=\"cfxNZ\" id=\"cfxNZ\"><span data-lake-id=\"u1e188c0d\" id=\"u1e188c0d\">vue2 的 v-model</span></h3><p data-lake-id=\"u2447a58d\" id=\"u2447a58d\"><span data-lake-id=\"uca869edc\" id=\"uca869edc\">v-model 通过在数据修改时，通知父级节点实现数据的双向绑定。其实是一个语法糖当满足以下两个条件时，可实现自定义组件的v-model：</span></p><ul list=\"uce703ba4\"><li fid=\"u68b02ada\" data-lake-id=\"u068ef019\" id=\"u068ef019\"><span data-lake-id=\"ue56d6dbb\" id=\"ue56d6dbb\">子组件受控接收 prop</span></li><li fid=\"u68b02ada\" data-lake-id=\"u6267feca\" id=\"u6267feca\"><span data-lake-id=\"u72b7fb4a\" id=\"u72b7fb4a\">数据修改时触发 event 把新的数据提交给父组件</span></li></ul><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22vue%22%2C%22code%22%3A%22%3Cscript%3E%5Cnexport%20default%20%7B%5Cn%5Ctprops%3A%20%7B%5Cn%20%20%5Ctvalue%3A%20String%5Cn%20%20%7D%2C%5Cn%20%20model%3A%20%7B%5Cn%20%20%20%20prop%3A%20'value'%2C%5Cn%20%20%20%20event%3A%20'change'%5Cn%20%20%7D%5Cn%7D%5Cn%3C%2Fscript%3E%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22dr9LM%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h3 data-lake-id=\"tGMtG\" id=\"tGMtG\"><span data-lake-id=\"u9cfc9934\" id=\"u9cfc9934\">vue3 的 v-model</span></h3><p data-lake-id=\"uc48c0a7b\" id=\"uc48c0a7b\"><span data-lake-id=\"uc30752d5\" id=\"uc30752d5\">vue3 中升级了 v-model 的用法，通过 update:modelValue 来触发事件，prop 也被更改为 modelValue。还在一个组件上支持多个 v-model，如新增 v-model:lastName 等。</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22props%3A%20%7B%5Cn%20%20modelValue%3A%20String%2C%5Cn%7D%5Cnemits%3A%20%5B'update%3AmodelValue'%5D%2C%5Cnmethods%3A%20%7B%5Cn%20%20changeTitle()%20%7B%5Cn%20%20%20%20this.%24emit('update%3AmodelValue'%2C%20title)%5Cn%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22lWCMF%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card>",
  "body_draft_lake": "",
  "public": 0,
  "status": 1,
  "view_status": 0,
  "read_status": 1,
  "likes_count": 0,
  "comments_count": 0,
  "content_updated_at": "2022-04-04T11:33:01.000Z",
  "deleted_at": null,
  "created_at": "2022-04-04T11:33:01.000Z",
  "updated_at": "2022-05-10T15:12:40.000Z",
  "published_at": "2022-04-04T11:33:01.000Z",
  "first_published_at": "2022-04-04T11:33:00.563Z",
  "word_count": 445,
  "cover": null,
  "description": "watch 的变化vue3 中的 watch 函数第一个参数为响应式对象，有 getter/setter 的 effect 函数，或者这些类型数组；第二个参数为数据变化时的回调；第三个函数为 watchOption，提供是否立即监听和是否深度监听的配置vue3 可以多次使用 watch 方法w...",
  "custom_description": null,
  "hits": 0,
  "_serializer": "v2.doc_detail"
}