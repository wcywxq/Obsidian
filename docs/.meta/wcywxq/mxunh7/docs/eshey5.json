{
  "id": 72212151,
  "slug": "eshey5",
  "title": "打包构建流程",
  "book_id": 26225124,
  "book": {
    "id": 26225124,
    "type": "Book",
    "slug": "mxunh7",
    "name": "八股文 eight-part essay writing",
    "user_id": 732231,
    "description": "前端八股文",
    "creator_id": 732231,
    "public": 0,
    "items_count": 239,
    "likes_count": 0,
    "watches_count": 1,
    "content_updated_at": "2023-11-11T18:15:57.023Z",
    "updated_at": "2023-11-11T18:15:57.000Z",
    "created_at": "2022-04-04T11:31:45.000Z",
    "namespace": "wcywxq/mxunh7",
    "user": {
      "id": 732231,
      "type": "User",
      "login": "wcywxq",
      "name": "magic",
      "description": null,
      "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/732231/1606968271774-avatar/886ad88b-d2cc-4c9e-a674-f70eb51a679c.png",
      "books_count": 18,
      "public_books_count": 0,
      "followers_count": 0,
      "following_count": 0,
      "created_at": "2020-01-08T14:21:31.000Z",
      "updated_at": "2023-11-13T09:32:35.000Z",
      "_serializer": "v2.user"
    },
    "_serializer": "v2.book"
  },
  "user_id": 732231,
  "creator": {
    "id": 732231,
    "type": "User",
    "login": "wcywxq",
    "name": "magic",
    "description": null,
    "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/732231/1606968271774-avatar/886ad88b-d2cc-4c9e-a674-f70eb51a679c.png",
    "books_count": 18,
    "public_books_count": 0,
    "followers_count": 0,
    "following_count": 0,
    "created_at": "2020-01-08T14:21:31.000Z",
    "updated_at": "2023-11-13T09:32:35.000Z",
    "_serializer": "v2.user"
  },
  "format": "lake",
  "body": "<a name=\"DAHWU\"></a>\n## 简述\n1. 初始化：启动构建，读取与合并配置参数，加载 `plugin`，实例化 `compiler`(编译器)\n2. 编译：从 `entry`(入口文件)出发，针对每个模块串行调用对应的 `loader` 去翻译文件的内容，再找到该模块依赖的模块，递归的进行编译处理\n3. 输出：将编译后的模块组合成 `chunk`，将 `chunk` 转换成文件，输出到文件系统\n<a name=\"uCkyM\"></a>\n## 流程\n`webpack` 的运行流程是一个串行的流程，从启动到结束依次会执行以下流程：\n\n1. 初始化参数：从配置文件和 `shell` 语句中读取与合并参数，得到最终的参数\n2. 开始编译：用上一部得到的参数来初始化 `Compiler` 对象，加载所有配置插件，执行对象的 `run` 方法开始执行编译\n3. 确定入口：根据配置中的 `entry` 找到所有的入口文件\n4. 编译模块：从入口文件触发，调用所有配置的 `Loader` 对模块进行编译，再找出该模块依赖的模块，之后递归执行本步骤直到所有入口依赖的文件都经过本步骤的处理\n5. 完成模块编译：经过上一步之后，使用 `Loader` 编译完所有模块后，**得到了每个模块编译后的最终内容以及他们之间的依赖关系(依赖图)**\n6. 输出资源：根据入口和模块之间的依赖关系，组装成一个个包含多个模块的 `chunk`，再把每个 `chunk` 转换成一个单独的文件加入到输出列表，这一步是可以修改输出内容的最后机会\n7. 输出完成：在确定好输入内容后，根据配置确定输出的路径和文件名，把文件内容写入到文件系统\n\n:::warning\n在以上过程中，`webpack` 会在特定的时间点广播出特定的事件，插件在监听到感兴趣的事件后会执行特定的逻辑，并且插件可以调用 `webpack` 提供的 `api` 来改变 `webpack` 的运行结果\n:::\n\n",
  "body_draft": "",
  "body_html": "<!doctype html><h2 id=\"DAHWU\"><span>简述</span></h2><ol><li><span>初始化：启动构建，读取与合并配置参数，加载 </span><code><span>plugin</span></code><span>，实例化 </span><code><span>compiler</span></code><span>(编译器)</span></li><li><span>编译：从 </span><code><span>entry</span></code><span>(入口文件)出发，针对每个模块串行调用对应的 </span><code><span>loader</span></code><span> 去翻译文件的内容，再找到该模块依赖的模块，递归的进行编译处理</span></li><li><span>输出：将编译后的模块组合成 </span><code><span>chunk</span></code><span>，将 </span><code><span>chunk</span></code><span> 转换成文件，输出到文件系统</span></li></ol><h2 id=\"uCkyM\"><span>流程</span></h2><p data-lake-id=\"u33378225\"><code><span>webpack</span></code><span> 的运行流程是一个串行的流程，从启动到结束依次会执行以下流程：</span></p><p data-lake-id=\"u7c2694ca\"><span>​</span><br /></p><ol><li><span>初始化参数：从配置文件和 </span><code><span>shell</span></code><span> 语句中读取与合并参数，得到最终的参数</span></li><li><span>开始编译：用上一部得到的参数来初始化 </span><code><span>Compiler</span></code><span> 对象，加载所有配置插件，执行对象的 </span><code><span>run</span></code><span> 方法开始执行编译</span></li><li><span>确定入口：根据配置中的 </span><code><span>entry</span></code><span> 找到所有的入口文件</span></li><li><span>编译模块：从入口文件触发，调用所有配置的 </span><code><span>Loader</span></code><span> 对模块进行编译，再找出该模块依赖的模块，之后递归执行本步骤直到所有入口依赖的文件都经过本步骤的处理</span></li><li><span>完成模块编译：经过上一步之后，使用 </span><code><span>Loader</span></code><span> 编译完所有模块后，</span><strong><span>得到了每个模块编译后的最终内容以及他们之间的依赖关系(依赖图)</span></strong></li><li><span>输出资源：根据入口和模块之间的依赖关系，组装成一个个包含多个模块的 </span><code><span>chunk</span></code><span>，再把每个 </span><code><span>chunk</span></code><span> 转换成一个单独的文件加入到输出列表，这一步是可以修改输出内容的最后机会</span></li><li><span>输出完成：在确定好输入内容后，根据配置确定输出的路径和文件名，把文件内容写入到文件系统</span></li></ol><p data-lake-id=\"u2f2e585e\"><br /></p><blockquote class=\"lake-alert lake-alert-warning\"><p data-lake-id=\"u0f3dd045\"><span>在以上过程中，</span><code><span>webpack</span></code><span> 会在特定的时间点广播出特定的事件，插件在监听到感兴趣的事件后会执行特定的逻辑，并且插件可以调用 </span><code><span>webpack</span></code><span> 提供的 </span><code><span>api</span></code><span> 来改变 </span><code><span>webpack</span></code><span> 的运行结果</span></p></blockquote><p data-lake-id=\"ucf7c973c\"><span>​</span><br /></p>",
  "body_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"viewport\" content=\"adapt\" /><h2 data-lake-id=\"DAHWU\" id=\"DAHWU\"><span data-lake-id=\"ud22b778a\" id=\"ud22b778a\">简述</span></h2><ol list=\"u10f59015\"><li fid=\"u6a8e5edd\" data-lake-id=\"u7dc2740a\" id=\"u7dc2740a\"><span data-lake-id=\"u280d930b\" id=\"u280d930b\">初始化：启动构建，读取与合并配置参数，加载 </span><code data-lake-id=\"u59bf16ff\" id=\"u59bf16ff\"><span data-lake-id=\"u5162ffc8\" id=\"u5162ffc8\">plugin</span></code><span data-lake-id=\"u23770b41\" id=\"u23770b41\">，实例化 </span><code data-lake-id=\"u454c7bd3\" id=\"u454c7bd3\"><span data-lake-id=\"u42f1cec3\" id=\"u42f1cec3\">compiler</span></code><span data-lake-id=\"u22784199\" id=\"u22784199\">(编译器)</span></li><li fid=\"u6a8e5edd\" data-lake-id=\"ucf82857c\" id=\"ucf82857c\"><span data-lake-id=\"uf28f8115\" id=\"uf28f8115\">编译：从 </span><code data-lake-id=\"u099c22cf\" id=\"u099c22cf\"><span data-lake-id=\"u459d7185\" id=\"u459d7185\">entry</span></code><span data-lake-id=\"u596eaf6d\" id=\"u596eaf6d\">(入口文件)出发，针对每个模块串行调用对应的 </span><code data-lake-id=\"udf071800\" id=\"udf071800\"><span data-lake-id=\"ud5c530b5\" id=\"ud5c530b5\">loader</span></code><span data-lake-id=\"u190860b5\" id=\"u190860b5\"> 去翻译文件的内容，再找到该模块依赖的模块，递归的进行编译处理</span></li><li fid=\"u6a8e5edd\" data-lake-id=\"ufa38d41b\" id=\"ufa38d41b\"><span data-lake-id=\"u390d5992\" id=\"u390d5992\">输出：将编译后的模块组合成 </span><code data-lake-id=\"ua7923fb0\" id=\"ua7923fb0\"><span data-lake-id=\"u936f2a35\" id=\"u936f2a35\">chunk</span></code><span data-lake-id=\"u32b458bd\" id=\"u32b458bd\">，将 </span><code data-lake-id=\"uaa124065\" id=\"uaa124065\"><span data-lake-id=\"ude7f63e8\" id=\"ude7f63e8\">chunk</span></code><span data-lake-id=\"u30f81008\" id=\"u30f81008\"> 转换成文件，输出到文件系统</span></li></ol><h2 data-lake-id=\"uCkyM\" id=\"uCkyM\"><span data-lake-id=\"u62dc6dda\" id=\"u62dc6dda\">流程</span></h2><p data-lake-id=\"u33378225\" id=\"u33378225\"><code data-lake-id=\"u8a7d4535\" id=\"u8a7d4535\"><span data-lake-id=\"u9c283a99\" id=\"u9c283a99\">webpack</span></code><span data-lake-id=\"uedc3d116\" id=\"uedc3d116\"> 的运行流程是一个串行的流程，从启动到结束依次会执行以下流程：</span></p><p data-lake-id=\"u7c2694ca\" id=\"u7c2694ca\"><span data-lake-id=\"uc83794ff\" id=\"uc83794ff\">​</span><br></p><ol list=\"udce6b4b2\"><li fid=\"u06df8949\" data-lake-id=\"u6356247b\" id=\"u6356247b\"><span data-lake-id=\"u8de98329\" id=\"u8de98329\">初始化参数：从配置文件和 </span><code data-lake-id=\"u3cb46820\" id=\"u3cb46820\"><span data-lake-id=\"u258c2a0c\" id=\"u258c2a0c\">shell</span></code><span data-lake-id=\"u1c02c69e\" id=\"u1c02c69e\"> 语句中读取与合并参数，得到最终的参数</span></li><li fid=\"u06df8949\" data-lake-id=\"ue46a30e5\" id=\"ue46a30e5\"><span data-lake-id=\"uf534a85b\" id=\"uf534a85b\">开始编译：用上一部得到的参数来初始化 </span><code data-lake-id=\"u087527ef\" id=\"u087527ef\"><span data-lake-id=\"ucc988638\" id=\"ucc988638\">Compiler</span></code><span data-lake-id=\"u709d4be1\" id=\"u709d4be1\"> 对象，加载所有配置插件，执行对象的 </span><code data-lake-id=\"u336c6ff6\" id=\"u336c6ff6\"><span data-lake-id=\"ufe9bb183\" id=\"ufe9bb183\">run</span></code><span data-lake-id=\"u904a5503\" id=\"u904a5503\"> 方法开始执行编译</span></li><li fid=\"u06df8949\" data-lake-id=\"u6e9af814\" id=\"u6e9af814\"><span data-lake-id=\"u34075996\" id=\"u34075996\">确定入口：根据配置中的 </span><code data-lake-id=\"ubbe2a67d\" id=\"ubbe2a67d\"><span data-lake-id=\"u0f18dc43\" id=\"u0f18dc43\">entry</span></code><span data-lake-id=\"uae3cd463\" id=\"uae3cd463\"> 找到所有的入口文件</span></li><li fid=\"u06df8949\" data-lake-id=\"u8745c3f2\" id=\"u8745c3f2\"><span data-lake-id=\"u71bf7ded\" id=\"u71bf7ded\">编译模块：从入口文件触发，调用所有配置的 </span><code data-lake-id=\"uc519666c\" id=\"uc519666c\"><span data-lake-id=\"u6d0946f0\" id=\"u6d0946f0\">Loader</span></code><span data-lake-id=\"u801c3eef\" id=\"u801c3eef\"> 对模块进行编译，再找出该模块依赖的模块，之后递归执行本步骤直到所有入口依赖的文件都经过本步骤的处理</span></li><li fid=\"u06df8949\" data-lake-id=\"u80bd7003\" id=\"u80bd7003\"><span data-lake-id=\"ubb0b6f88\" id=\"ubb0b6f88\">完成模块编译：经过上一步之后，使用 </span><code data-lake-id=\"u2ff87b27\" id=\"u2ff87b27\"><span data-lake-id=\"ud05f0d49\" id=\"ud05f0d49\">Loader</span></code><span data-lake-id=\"u4abe1aa6\" id=\"u4abe1aa6\"> 编译完所有模块后，</span><strong><span data-lake-id=\"ud805dd76\" id=\"ud805dd76\">得到了每个模块编译后的最终内容以及他们之间的依赖关系(依赖图)</span></strong></li><li fid=\"u06df8949\" data-lake-id=\"u58c29139\" id=\"u58c29139\"><span data-lake-id=\"u08f15e98\" id=\"u08f15e98\">输出资源：根据入口和模块之间的依赖关系，组装成一个个包含多个模块的 </span><code data-lake-id=\"u9321b635\" id=\"u9321b635\"><span data-lake-id=\"ufae93bb3\" id=\"ufae93bb3\">chunk</span></code><span data-lake-id=\"u2f05a7d7\" id=\"u2f05a7d7\">，再把每个 </span><code data-lake-id=\"u3900a677\" id=\"u3900a677\"><span data-lake-id=\"uf3e03a0c\" id=\"uf3e03a0c\">chunk</span></code><span data-lake-id=\"ubdacd359\" id=\"ubdacd359\"> 转换成一个单独的文件加入到输出列表，这一步是可以修改输出内容的最后机会</span></li><li fid=\"u06df8949\" data-lake-id=\"u52518933\" id=\"u52518933\"><span data-lake-id=\"ua199d47f\" id=\"ua199d47f\">输出完成：在确定好输入内容后，根据配置确定输出的路径和文件名，把文件内容写入到文件系统</span></li></ol><p data-lake-id=\"u2f2e585e\" id=\"u2f2e585e\"><br></p><blockquote data-lake-id=\"u8bea2363\" id=\"u8bea2363\" class=\"lake-alert lake-alert-warning\"><p data-lake-id=\"u0f3dd045\" id=\"u0f3dd045\"><span data-lake-id=\"u070a55c2\" id=\"u070a55c2\">在以上过程中，</span><code data-lake-id=\"u769a1e5a\" id=\"u769a1e5a\"><span data-lake-id=\"u39c6befd\" id=\"u39c6befd\">webpack</span></code><span data-lake-id=\"u92ee564e\" id=\"u92ee564e\"> 会在特定的时间点广播出特定的事件，插件在监听到感兴趣的事件后会执行特定的逻辑，并且插件可以调用 </span><code data-lake-id=\"ucef400e2\" id=\"ucef400e2\"><span data-lake-id=\"ub64d78bf\" id=\"ub64d78bf\">webpack</span></code><span data-lake-id=\"u048e2732\" id=\"u048e2732\"> 提供的 </span><code data-lake-id=\"u12c034d6\" id=\"u12c034d6\"><span data-lake-id=\"u144e04ea\" id=\"u144e04ea\">api</span></code><span data-lake-id=\"u06a0b922\" id=\"u06a0b922\"> 来改变 </span><code data-lake-id=\"u26551ec5\" id=\"u26551ec5\"><span data-lake-id=\"u6bca4ab6\" id=\"u6bca4ab6\">webpack</span></code><span data-lake-id=\"u8ec42f83\" id=\"u8ec42f83\"> 的运行结果</span></p></blockquote><p data-lake-id=\"ucf7c973c\" id=\"ucf7c973c\"><span data-lake-id=\"ubd2c0bc1\" id=\"ubd2c0bc1\">​</span><br></p>",
  "body_draft_lake": "",
  "public": 0,
  "status": 1,
  "view_status": 0,
  "read_status": 1,
  "likes_count": 0,
  "comments_count": 0,
  "content_updated_at": "2022-04-04T11:33:19.000Z",
  "deleted_at": null,
  "created_at": "2022-04-04T11:33:19.000Z",
  "updated_at": "2022-05-10T15:12:38.000Z",
  "published_at": "2022-04-04T11:33:19.000Z",
  "first_published_at": "2022-04-04T11:33:19.194Z",
  "word_count": 567,
  "cover": null,
  "description": "简述初始化：启动构建，读取与合并配置参数，加载 plugin，实例化 compiler(编译器)编译：从 entry(入口文件)出发，针对每个模块串行调用对应的 loader 去翻译文件的内容，再找到该模块依赖的模块，递归的进行编译处理输出：将编译后的模块组合成 chunk，将 chunk 转...",
  "custom_description": null,
  "hits": 0,
  "_serializer": "v2.doc_detail"
}