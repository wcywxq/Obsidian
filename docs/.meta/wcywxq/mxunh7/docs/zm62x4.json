{
  "id": 72212085,
  "slug": "zm62x4",
  "title": "http 协议和 https 协议",
  "book_id": 26225124,
  "book": {
    "id": 26225124,
    "type": "Book",
    "slug": "mxunh7",
    "name": "八股文 eight-part essay writing",
    "user_id": 732231,
    "description": "前端八股文",
    "creator_id": 732231,
    "public": 0,
    "items_count": 239,
    "likes_count": 0,
    "watches_count": 1,
    "content_updated_at": "2023-11-11T18:15:57.023Z",
    "updated_at": "2023-11-11T18:15:57.000Z",
    "created_at": "2022-04-04T11:31:45.000Z",
    "namespace": "wcywxq/mxunh7",
    "user": {
      "id": 732231,
      "type": "User",
      "login": "wcywxq",
      "name": "magic",
      "description": null,
      "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/732231/1606968271774-avatar/886ad88b-d2cc-4c9e-a674-f70eb51a679c.png",
      "books_count": 18,
      "public_books_count": 0,
      "followers_count": 0,
      "following_count": 0,
      "created_at": "2020-01-08T14:21:31.000Z",
      "updated_at": "2023-11-13T09:32:35.000Z",
      "_serializer": "v2.user"
    },
    "_serializer": "v2.book"
  },
  "user_id": 732231,
  "creator": {
    "id": 732231,
    "type": "User",
    "login": "wcywxq",
    "name": "magic",
    "description": null,
    "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/732231/1606968271774-avatar/886ad88b-d2cc-4c9e-a674-f70eb51a679c.png",
    "books_count": 18,
    "public_books_count": 0,
    "followers_count": 0,
    "following_count": 0,
    "created_at": "2020-01-08T14:21:31.000Z",
    "updated_at": "2023-11-13T09:32:35.000Z",
    "_serializer": "v2.user"
  },
  "format": "lake",
  "body": "<a name=\"uavBw\"></a>\n## http\nhttp 是超文本传输协议，它定义了客户端与服务器之间交换报文的格式和方式，默认使用 80 端口。它使用 tcp 作为传输层协议，保证了数据传输的可靠性\n\n- http 是一个无状态的协议，http 服务器不会保存关于客户的任何信息\n- http 有两种连接方式，一种是持续连接，另一种是非持续连接。\n   - 非持续连接：服务器必须为每一个请求的对象建立和维护一个全新的连接\n   - 持续连接：tcp 连接默认不关闭，可以被多个请求复用\n- 采用持续连接的好处是：可以避免每次建立 tcp 连接 3 次握手时所花费的时间。在 http/1.0 以前使用的是非持续的连接，但可以在请求时加上 Connection: keep-alive 来要求服务器不要关闭 tcp 连接。在 http/1.1 以后默认采用的是持续的连接/目前对于同一个域，大多数浏览器支持同时建立 **6** 个持久连接\n<a name=\"oFPXE\"></a>\n### 请求报文和响应报文\nhttp 报文有两种，一种是请求报文，一种是响应报文\n<a name=\"tmJ4Q\"></a>\n#### http 请求报文\nhttp 请求报文的格式如下：\n```html\nGET / HTTP/1.1\nUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_5)\nAccept: */*\n```\nhttp 请求报文的第一行叫做请求行，后面的行叫做首部行，首部行后还可以根一个实体主体。请求首部之后有一个空行，这个空行不能省略，它用来划分首部与实体\n\n请求行包含三个字段：**方法字段**、**url 字段**和 **http 版本字段**\n\n方法字段可以取几个不同的值：一般有 GET、POST、HEAD、PUT 和 DELETE。一般 GET 方法只被用于 向服务器获取数据。POST 方法用于将实体提交到指定的资源，通常会造成服务器资源的修改。HEAD 方法与 GET 方法类似，但是在返回的响应中，不包含请求对象。PUT 方法用于上传文件到服务器，DELETE 方法用于删除服务器上的对象。虽然请求的方法很多，但更多表达的是一种语义上的区别，并不是说 POST 能做的事情，GET 就更不能做了，主要看我们如何选择\n<a name=\"B5N7E\"></a>\n#### http 响应报文\nhttp 响应报文的格式如下：\n```html\nHTTP/1.0 200 OK\nContent-Type: text/plain\nContent-Length: 137582\nExpires: Thu, 05 Dec 1997 16:00:00 GMT\nLast-Modified: Wed, 5 August 1996 15:55:28 GMT\nServer: Apache 0.84\n\n<html>\n  <body>Hello World</body>\n</html>\n```\nhttp 响应报文的第一行叫做状态行，后面的行是首部行，最后是实体主体\n\n状态行包含了三个字段：**协议版本字段**、**状态码**和**响应的状态信息**\n\n实体部分是报文的主要部分，它包含了所请求的对象。<br />常见的状态码有：<br />[常见的 http 状态码](https://www.yuque.com/go/doc/69183233?view=doc_embed)\n<a name=\"H5oEc\"></a>\n### http/0.9\nhttp/0.9 只能用来传输体积很小的 html 文件，采用的是 ASCII 字节码编码。请求和响应的格式都很简单，请求只有一个请求行，响应部分也只有一个响应体。<br />![image.png](https://cdn.nlark.com/yuque/0/2022/png/732231/1647496305663-e32231da-f410-4054-b3bd-0ba0f8a797d4.png#clientId=uaa145f8b-00d1-4&from=paste&height=396&id=u6f08f342&originHeight=396&originWidth=1304&originalType=binary&ratio=1&rotation=0&showTitle=false&size=60486&status=done&style=none&taskId=u7960ab82-ba26-4d9d-b6ba-6a0ecc2d915&title=&width=1304)\n<a name=\"Qc4DV\"></a>\n### http/1.0\n因为 http/1.0 支持了更多样的文件格式，在请求发送时需要标注：文件类型、文件编码等，因此请求头产生了。<br />服务器收到请求后不一定可以按照指定的要求准备数据，所以会在响应头里标注数据最终的组织形式，因此产生了响应头。<br />![image.png](https://cdn.nlark.com/yuque/0/2022/png/732231/1647496411480-5efdc7c7-7fde-493d-a7a8-e632a0e8e09c.png#clientId=uaa145f8b-00d1-4&from=paste&height=589&id=u6367db68&originHeight=589&originWidth=1304&originalType=binary&ratio=1&rotation=0&showTitle=false&size=86656&status=done&style=none&taskId=u481ff0ae-d90d-4ebf-9719-59a337e1575&title=&width=1304)\n<a name=\"Qcj6c\"></a>\n#### 常见的请求头、响应头\n浏览器会用请求头告诉服务器它想要的文件类型、文件编码、压缩形式、文件语言...<br />服务器会用响应头告诉浏览器最终的处理结果\n<a name=\"ygCCe\"></a>\n##### 文件类型\n除了 html，还有 javaScript/css/图片/音频/视频\n```\n// 请求头\naccept: application/json, text/plain, */*\n// 响应头\ncontent-type: application/json\n```\n<a name=\"F8D1a\"></a>\n##### 文件压缩格式\n为了减轻传输压力，服务器会对数据进行压缩后再传输，所以浏览器需要知道服务器压缩的方法，通常针对 css/js 文件\n```\n// 请求头\naccept-encoding: gzip, deflate, br\n// 响应头\ncontent-encoding: gzip\n```\n<a name=\"RyboK\"></a>\n##### 文件编码格式\n不同类型的文件，编码形式会不一样，为了能够精准地读取文件，浏览器需要知道文件的编码类型\n```\n// 请求头\naccept:text/plain; charset=utf-8\n// 响应头\ncontent-type: application/json; charset=utf-8\n```\n<a name=\"j3syU\"></a>\n##### 缓存\nhttp/1.0 提供了缓存机制，用来缓存已经下载过的数据\n```\n// 请求头 响应头 \ncache-control: no-store, no-cache, must-revalidate\n```\n<a name=\"McH4d\"></a>\n##### 客户端基础信息\n通过 ua，可以知道浏览器的版本、操作系统等信息\n```\n// 请求头\nuser-agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7)\n```\n<a name=\"xIP3m\"></a>\n### http/1.1\nhttp/1.1 默认使用了持久连接，多个请求可以复用同一个 tcp 连接，但是在同一个 tcp 连接里面，数据请求的通信次序是固定的。服务器只有处理完一个请求的响应后，才会进行下一个请求的处理，如果前面请求的响应特别慢的话，就会造成许多请求排队等待的情况，这种情况被称为**队头阻塞**。队头阻塞会导致持久连接在达到最大数量时，剩余的资源需要等待其他资源请求完成后才能发起请求\n\n为了避免这个问题，一个是减少请求数，另一个是同时打开多个持久连接。这就是我们对网站优化时，使用雪碧图、合并脚本的原因。\n<a name=\"cflLg\"></a>\n#### http/1.1 与 http/1.0 的区别\n![image.png](https://cdn.nlark.com/yuque/0/2022/png/732231/1647496796030-30d933d6-7fe3-4319-94de-e7a1a13f4a43.png#clientId=uaa145f8b-00d1-4&from=paste&height=828&id=u2b1e61c2&originHeight=828&originWidth=1304&originalType=binary&ratio=1&rotation=0&showTitle=false&size=283135&status=done&style=none&taskId=uad708bd0-4d21-44f5-a043-24a100931e1&title=&width=1304)<br />持久连接通过请求头控制，不做特殊处理时候，默认会保持持久连接。\n```\n// 请求头\nconnection: keep-alive\n```\n可以通过以下方式关闭持久连接\n```\n// 请求头\nconnection: close\n```\n:::info\n\n1. 连接方面的区别，http1.1 默认使用持久连接，而 http1.0 默认使用非持久连接。http1.1 通过使用持久连接来使多个 http 请求复用同一个 TCP 连接，以此来避免使用非持久连接时每次需要建立连接的时延。\n2. 资源请求方面的区别，在 http1.0 中，存在一些浪费带宽的现象，例如客户端只是需要某个对象的一部分，而服务器却将整个对象送过来了，并且不支持断点续传功能，http1.1 则在请求头引入了 range 头域，它允许只请求资源的某个部分，即返回码是 206（Partial Content），这样就方便了开发者自由的选择以便于充分利用带宽和连接。\n3. 缓存方面的区别，在 http1.0 中主要使用 header 里的 If-Modified-Since,Expires 来做为缓存判断的标准，http1.1 则引入了更多的缓存控制策略例如 Etag、If-Unmodified-Since、If-Match、If-None-Match 等更多可供选择的缓存头来控制缓存策略。\n4. http1.1 中还新增了 host 字段，用来指定服务器的域名。http1.0 中认为每台服务器都绑定一个唯一的 IP 地址，因此，请求消息中的 URL 并没有传递主机名（hostname）。但随着虚拟主机技术的发展，在一台物理服务器上可以存在多个虚拟主机，并且它们共享一个 IP 地址。因此有了 host 字段，就可以将请求发往同一台服务器上的不同网站。\n5. http1.1 相对于 http1.0 还新增了很多方法，如 PUT、HEAD、OPTIONS 等。\n:::\n<a name=\"tToff\"></a>\n### http/2\n2009 年，谷歌公开了自行研发的 SPDY 协议，主要解决 http/1.1 效率不高的问题。这个协议在 Chrome 浏览器上证明可行以后，就被当作 http/2 的基础，主要特性都在 http/2 之中得到继承。在 2015 年，http/2 发布。以下是 http/2 的新特性：\n<a name=\"ewFuZ\"></a>\n#### 二进制协议(二进制传输)\n\n- 在 http/1.1 中，报文的头信息必须是文本(ASCII编码)；在 http/2 中，数据体可以是文本，也可以分割所有传输数据，并采用二进制进行编码。\n- http/2 则是一个彻底的二进制协议，头信息和数据体都是二进制，并且统称为**帧**，可以分为头信息帧和数据帧。帧的概念是它实现多路复用的基础\n<a name=\"Ya5Iy\"></a>\n#### 数据流\n\n- http/2 使用了数据流的概念，因为 http/2 的数据包是不按顺序发送的，同一个连接里面连续的数据包，可能属于不同的请求。因此，必须要对数据包做标记，指出它属于哪个请求。\n- http/2 将每个请求或回应的所有数据包，称为一个数据流。每个数据流都有一个独一无二的编号。数据包发送的时，都必须标记数据流 id，用来区分它属于哪个数据流\n<a name=\"dsJcb\"></a>\n#### header 头信息压缩\n\n- http/2 实现了头信息压缩，由于 http/1.1 协议不带有状态，每次请求都必须附带上所有信息。所以，请求的很多字段都是重复的，比如 Cookie 和 User Agent，一模一样的内容，每次请求都必须携带，这样会浪费很多带宽，也影响了速度\n- http/2 对这一点做了优化，引入了头部压缩机制\n   - 采用 HPACK 算法，在客户端和服务端两端建立**字典**，用索引号表示重复的字符串\n   - 采用哈夫曼编码来压缩整数和字符串，可以达到 50% ～ 90% 的高压缩率\n- 一方面，头信息使用 gzip 或 compress 压缩后再发送；另一方面，客户端和服务器同时维护一张头信息表，所有字段都会存入这个表，生成一个索引号，以后就不发送同样字段了，只发送索引号，这样就能提高速度了\n<a name=\"Wn2hE\"></a>\n#### 多路复用\n\n- 采用二进制分帧传输，用帧来标识请求，因为一个 tcp 连接可在多条**流**中，即可以发送多个请求。另外，不存在先后关系，也就不存在等待排队的问题，所以可避免 http/1 中队头阻塞的问题\n- 通信双方都可以给对方发送二进制帧，这种二进制帧的双向传输序列，又叫做**流**。http/2 用**流**来在一个 tcp 连接上进行数据帧的通信\n<a name=\"jnfRi\"></a>\n#### 服务端推送\nhttp/2 允许服务器未经请求，主动向客户端发送资源，这叫做服务端推送。使用服务端推送，提前给客户端推送必要的资源，这样就可以相对减少一些延迟时间。这里需要注意的是 http2 下服务器主动推送的是静态资源，和 webSocket 以及使用 SSE 等方式向客户端发送即时数据推送是不同的\n\n- 服务器不再是完全被动地响应请求，也可以新建**流**主动向客户端发送消息\n<a name=\"dcwcs\"></a>\n#### 大幅度提高网页性能\n\n- http/1 最大的请求数为 6，会造成对头阻塞，需等待其他资源请求完成后才能发起请求\n:::danger\n**http/2 协议缺点：**<br />因为 http/2 使用了多路复用，一般来说，同一域名下只需要使用一个 tcp 连接。由于多个数据流使用同一个 tcp 连接，遵守同一个流量状态控制和拥塞控制。只要一个数据流遭遇到阻塞，剩下的数据流就没办法出去，这样就导致了后面的所有数据都会被阻塞。http/2 出现的这个问题是由于其使用 tcp 协议的问题，与它本身的实现其实没有多大的关系\n:::\n<a name=\"v6GvI\"></a>\n### http/3\nhttp/3 基于 udp 实现了类似于 tcp 的多路数据流、传输可靠性等功能，这套功能又称为 quic 协议。quic 协议在 udp 协议上实现了多路复用、有序支付、重传等功能\n\n- 实现了类似于 tcp 的流量控制、传输可靠性的功能\n- 集成了 tls 加密功能\n- 解决了 http/2 下多路复用时丢包产生的问题，即解决了 tcp 协议的一些问题\n:::warning\n和 tcp 不同，quic 协议实现了在同一物理连接上可以有多个独立的逻辑数据流。从而实现了数据流的单独传输，因此就解决了 tcp 中队头阻塞的问题\n:::\n<a name=\"Fz4wD\"></a>\n## ![image.png](https://cdn.nlark.com/yuque/0/2022/png/732231/1647496985371-a318bd43-f1c4-4a30-84b7-f999ebc186ca.png#clientId=uaa145f8b-00d1-4&from=paste&height=776&id=u33bb5ddb&originHeight=776&originWidth=880&originalType=binary&ratio=1&rotation=0&showTitle=false&size=224387&status=done&style=none&taskId=udd6251e8-35bb-4d03-b81b-4bf7b9c63d1&title=&width=880)\n<a name=\"fhgyU\"></a>\n## https\nhttp 协议是用于 web 浏览器和网站服务器之间传递信息，http 协议以明文的方式来发送内容，不提供任何方式的数据加密。所以，http 协议不适合传输敏感信息。https 就是解决这一缺陷的，用来保证数据传输安全。\n\n:::info\n被监听 https 是基于 http 协议的，它在 http 的基础上加入了 ssl/tls 协议。ssl/tls 协议依靠证书来验证服务器的身份，并为浏览器和服务器之间的通信进行加密，这保证了传输过程中的安全性，减少了恶意劫持的可能。<br />被篡改并且它提供了一种校验机制，信息一旦被篡改，通信双方都会立刻发现。<br />被伪装它还配备了身份证书，防止身份被冒充的情况出现。\n:::\nhttps 很好的解决了 http 的多个缺点(被监听、被篡改、被伪装)。\n\n- https 协议 = http 协议 + ssl/tls 协议\n- 加密方式采取了对称加密和非对称加密\n- 整体而言，对数据进行对称加密，对称加密所需要使用的密钥通过非对称加密进行传输\n:::info\nhttps 采用混合加密机制，如果密钥能够保证安全交换，那么全程有可能仅使用对称密钥加密来进行通信，如果不能保证密钥安全交换，可在密钥交换环节使用非对称加密方式，之后使用对称加密方式。这样做的目的是因为对称密钥加密相较非对称秘钥加密处理速度更快。<br />但是加密了就安全了吗，就不会被窃听了吗？实际上，即使通信被加密，通信内容还是可以被技术手段窃听到，但是通信加密后就不容易看懂具体的报文信息了，相当于达到了加密的目的。<br />https 加密传输过程中需要传输公开密钥，那么公开密钥又是如何保证其正确性呢，当然是数字认证机构颁发的公开密钥证书。\n:::\n![image.png](https://cdn.nlark.com/yuque/0/2022/png/732231/1647345138666-c3a5f9f2-df02-44a0-8226-e85c74b5d228.png#clientId=u920a8100-c084-4&from=paste&height=430&id=xylZO&originHeight=430&originWidth=643&originalType=binary&ratio=1&rotation=0&showTitle=false&size=147351&status=done&style=none&taskId=u1c935397-e0ce-4d2b-b3fd-483e55eab64&title=&width=643)\n<a name=\"nh9lc\"></a>\n### TLS 握手过程\n\n1. 第一步：客户端向服务器发起请求，请求中包含使用的**协议版本号**、**生成的一个随机数**、以及**客户端支持的加密方法**\n2. 第二步：服务端收到请求后，确认双方使用的加密方法，并**给出服务器的证书**、以及**一个服务器生成的随机数**\n3. 第三步：客户端确认服务器证书有效后，生成一个新的随机数，并使用数字证书中的公钥，加密这个随机数，然后发送给服务器。并且还会提供一个前面所有内容的**哈希值**，用来供**服务器检验**\n4. 第四步：服务器使用自己的私钥，来解密客户端发送过来的随机数，并提供前面所有内容的**哈希值**，用来供**客户端检验**\n5. 第五步：客户端和服务器根据约定的加密方法，**使用前面的三个随机数，生成对话的密钥**，以后的对话过程都使用这个密钥来加密信息\n:::info\n**TLS 的握手过程主要用到了三个方法来保证传输的安全：**\n\n1. 对称加密\n2. 非对称加密\n3. 数字证书\n:::\n<a name=\"X7Mwv\"></a>\n### TLS 的实现原理\n<a name=\"hNnfH\"></a>\n#### 对称加密\n加密的密钥和解密的密钥相同\n:::danger\n**缺陷**：如何保证密钥传输的安全性，因为密钥还是会通过网络进行传输的，一旦密钥被其他人获取到，那么整个加密过程就毫无作用了。因此引出了非对称加密的方法。\n:::\n<a name=\"SSqF8\"></a>\n#### 非对称加密\n将密钥分为公钥和私钥，公钥可公开，私钥保密。客户端用公钥加密的数据，服务端可以通过私钥解密\n:::danger\n缺陷：无法确认得到的公钥一定是安全的公钥，可能存在一个中间人，截取了对方发给我们的公钥，然后将他自己的公钥发送给我们，当我们使用他的公钥加密后发送信息，就可以被他用自己的私钥解密。伪装后以同样的方法向对方发送信息，这样信息就被窃取了。所以引出了数字证书的概念\n:::\n<a name=\"lCL70\"></a>\n#### 数字证书\n\n- 首先我们使用一种哈希算法来对公钥和其他信息进行加密生成一个信息摘要。\n- 然后让有公信力的认证中心(简称CA)，用它的私钥对消息摘要加密，形成签名。\n- 最后**将原始的信息和签名结合在一起**，称为**数字证书。**\n- 当接收方收到数字证书的时候，先根据原始信息使用同样的哈希算法生成一个摘要，然后使用公证处的公钥来对数字证书中摘要进行解密，最后将解密的摘要和我们生成的摘要进行对比，就能发现我们得到的信息是否被更改了。\n- 这个方法最重要的是认证中心的可靠性，一般浏览器内部会内置一些顶层的认证中心证书，相当于我们自动信任了他们，只有这样我们才能够保证数据安全。\n<a name=\"qcWsh\"></a>\n## http 和 https 的区别\n\n- https 协议需要 CA 证书，一般免费证书表较少，因而需要一定的费用\n- http 是超文本传输协议，信息是明文传输；https 则是具有安全性的 ssl 加密传输协议\n- http 和 https 使用的是完全不同的连接方式，使用的端口也不同，前者是 80，后者是 443\n- http 的连接很简单，是无状态的；https 协议是由 ssl + http 协议构建的可进行加密传输、身份认证的网络协议，比 http 协议安全\n- https \n<a name=\"GpbQT\"></a>\n## 对称加密和非对称加密的区别\n[https://www.jianshu.com/p/de50d1489359](https://www.jianshu.com/p/de50d1489359)\n",
  "body_draft": "",
  "body_html": "<!doctype html><div class=\"lake-content\" typography=\"classic\"><h2 id=\"uavBw\"><span class=\"ne-text\">http</span></h2><p id=\"u8154aa21\" class=\"ne-p\" style=\"text-indent: 2em\"><span class=\"ne-text\">http 是超文本传输协议，它定义了客户端与服务器之间交换报文的格式和方式，默认使用 80 端口。它使用 tcp 作为传输层协议，保证了数据传输的可靠性</span></p><ul class=\"ne-ul\"><li id=\"u36d19862\"><span class=\"ne-text\">http 是一个无状态的协议，http 服务器不会保存关于客户的任何信息</span></li><li id=\"ud4f42186\"><span class=\"ne-text\">http 有两种连接方式，一种是持续连接，另一种是非持续连接。</span></li></ul><ul class=\"ne-list-wrap\"><ul ne-level=\"1\" class=\"ne-ul\"><li id=\"u5adc1c70\"><span class=\"ne-text\">非持续连接：服务器必须为每一个请求的对象建立和维护一个全新的连接</span></li><li id=\"ua531fc13\"><span class=\"ne-text\">持续连接：tcp 连接默认不关闭，可以被多个请求复用</span></li></ul></ul><ul class=\"ne-ul\"><li id=\"u23d2bfaa\"><span class=\"ne-text\">采用持续连接的好处是：可以避免每次建立 tcp 连接 3 次握手时所花费的时间。在 http/1.0 以前使用的是非持续的连接，但可以在请求时加上 Connection: keep-alive 来要求服务器不要关闭 tcp 连接。在 http/1.1 以后默认采用的是持续的连接/目前对于同一个域，大多数浏览器支持同时建立 </span><strong><span class=\"ne-text\">6</span></strong><span class=\"ne-text\"> 个持久连接</span></li></ul><h3 id=\"oFPXE\"><span class=\"ne-text\">请求报文和响应报文</span></h3><p id=\"u475045ac\" class=\"ne-p\"><span class=\"ne-text\">http 报文有两种，一种是请求报文，一种是响应报文</span></p><h4 id=\"tmJ4Q\"><span class=\"ne-text\">http 请求报文</span></h4><p id=\"udc1f817d\" class=\"ne-p\"><span class=\"ne-text\">http 请求报文的格式如下：</span></p><pre data-language=\"html\" id=\"bNq4j\" class=\"ne-codeblock language-html\">GET / HTTP/1.1\nUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_5)\nAccept: */*</pre><p id=\"u1a341b79\" class=\"ne-p\" style=\"text-indent: 2em\"><span class=\"ne-text\">http 请求报文的第一行叫做请求行，后面的行叫做首部行，首部行后还可以根一个实体主体。请求首部之后有一个空行，这个空行不能省略，它用来划分首部与实体</span></p><p id=\"u44921dc9\" class=\"ne-p\"><span class=\"ne-text\"></span></p><p id=\"uc0276100\" class=\"ne-p\" style=\"text-indent: 2em\"><span class=\"ne-text\">请求行包含三个字段：</span><strong><span class=\"ne-text\">方法字段</span></strong><span class=\"ne-text\">、</span><strong><span class=\"ne-text\">url 字段</span></strong><span class=\"ne-text\">和 </span><strong><span class=\"ne-text\">http 版本字段</span></strong></p><p id=\"ub4e6eee6\" class=\"ne-p\"><strong><span class=\"ne-text\"></span></strong></p><p id=\"u6af26c87\" class=\"ne-p\" style=\"text-indent: 2em\"><span class=\"ne-text\">方法字段可以取几个不同的值：一般有 GET、POST、HEAD、PUT 和 DELETE。一般 GET 方法只被用于 向服务器获取数据。POST 方法用于将实体提交到指定的资源，通常会造成服务器资源的修改。HEAD 方法与 GET 方法类似，但是在返回的响应中，不包含请求对象。PUT 方法用于上传文件到服务器，DELETE 方法用于删除服务器上的对象。虽然请求的方法很多，但更多表达的是一种语义上的区别，并不是说 POST 能做的事情，GET 就更不能做了，主要看我们如何选择</span></p><h4 id=\"B5N7E\"><span class=\"ne-text\">http 响应报文</span></h4><p id=\"u8dd001bc\" class=\"ne-p\"><span class=\"ne-text\">http 响应报文的格式如下：</span></p><pre data-language=\"html\" id=\"x6SUN\" class=\"ne-codeblock language-html\">HTTP/1.0 200 OK\nContent-Type: text/plain\nContent-Length: 137582\nExpires: Thu, 05 Dec 1997 16:00:00 GMT\nLast-Modified: Wed, 5 August 1996 15:55:28 GMT\nServer: Apache 0.84\n\n&lt;html&gt;\n  &lt;body&gt;Hello World&lt;/body&gt;\n&lt;/html&gt;</pre><p id=\"uc710bf45\" class=\"ne-p\"><span class=\"ne-text\">http 响应报文的第一行叫做状态行，后面的行是首部行，最后是实体主体</span></p><p id=\"ua97b7fe9\" class=\"ne-p\"><span class=\"ne-text\"></span></p><p id=\"u129d6978\" class=\"ne-p\"><span class=\"ne-text\">状态行包含了三个字段：</span><strong><span class=\"ne-text\">协议版本字段</span></strong><span class=\"ne-text\">、</span><strong><span class=\"ne-text\">状态码</span></strong><span class=\"ne-text\">和</span><strong><span class=\"ne-text\">响应的状态信息</span></strong></p><p id=\"uf6ff5250\" class=\"ne-p\"><strong><span class=\"ne-text\"></span></strong></p><p id=\"u443a80cc\" class=\"ne-p\"><span class=\"ne-text\">实体部分是报文的主要部分，它包含了所请求的对象。</span></p><p id=\"u357c02cd\" class=\"ne-p\"><span class=\"ne-text\">常见的状态码有：</span></p><div id=\"LX2OB\" class=\"ne-yuque\">此处为语雀内容卡片，点击链接查看：<a href=\"https://www.yuque.com/go/doc/69183233\" target=\"_blank\">https://www.yuque.com/go/doc/69183233</a></div><h3 id=\"H5oEc\"><span class=\"ne-text\">http/0.9</span></h3><p id=\"uf22a15c9\" class=\"ne-p\" style=\"text-indent: 2em\"><span class=\"ne-text\">http/0.9 只能用来传输体积很小的 html 文件，采用的是 ASCII 字节码编码。请求和响应的格式都很简单，请求只有一个请求行，响应部分也只有一个响应体。</span></p><p id=\"uea3ed587\" class=\"ne-p\"><img src=\"https://cdn.nlark.com/yuque/0/2022/png/732231/1647496305663-e32231da-f410-4054-b3bd-0ba0f8a797d4.png\" width=\"1304\" id=\"u6f08f342\" class=\"ne-image\"></p><h3 id=\"Qc4DV\"><span class=\"ne-text\">http/1.0</span></h3><p id=\"ub673d7df\" class=\"ne-p\" style=\"text-indent: 2em\"><span class=\"ne-text\">因为 http/1.0 支持了更多样的文件格式，在请求发送时需要标注：文件类型、文件编码等，因此请求头产生了。</span></p><p id=\"u4128aebb\" class=\"ne-p\" style=\"text-indent: 2em\"><span class=\"ne-text\">服务器收到请求后不一定可以按照指定的要求准备数据，所以会在响应头里标注数据最终的组织形式，因此产生了响应头。</span></p><p id=\"udded657e\" class=\"ne-p\"><img src=\"https://cdn.nlark.com/yuque/0/2022/png/732231/1647496411480-5efdc7c7-7fde-493d-a7a8-e632a0e8e09c.png\" width=\"1304\" id=\"u6367db68\" class=\"ne-image\"></p><h4 id=\"Qcj6c\"><span class=\"ne-text\">常见的请求头、响应头</span></h4><p id=\"u65ca5793\" class=\"ne-p\" style=\"text-indent: 2em\"><span class=\"ne-text\">浏览器会用请求头告诉服务器它想要的文件类型、文件编码、压缩形式、文件语言...</span></p><p id=\"u9c119807\" class=\"ne-p\" style=\"text-indent: 2em\"><span class=\"ne-text\">服务器会用响应头告诉浏览器最终的处理结果</span></p><h5 id=\"ygCCe\"><span class=\"ne-text\">文件类型</span></h5><p id=\"uda782fa7\" class=\"ne-p\"><span class=\"ne-text\">除了 html，还有 javaScript/css/图片/音频/视频</span></p><pre data-language=\"plain\" id=\"NeGeD\" class=\"ne-codeblock language-plain\">// 请求头\naccept: application/json, text/plain, */*\n// 响应头\ncontent-type: application/json</pre><h5 id=\"F8D1a\"><span class=\"ne-text\">文件压缩格式</span></h5><p id=\"u13789745\" class=\"ne-p\"><span class=\"ne-text\">为了减轻传输压力，服务器会对数据进行压缩后再传输，所以浏览器需要知道服务器压缩的方法，通常针对 css/js 文件</span></p><pre data-language=\"plain\" id=\"uPcxF\" class=\"ne-codeblock language-plain\">// 请求头\naccept-encoding: gzip, deflate, br\n// 响应头\ncontent-encoding: gzip</pre><h5 id=\"RyboK\"><span class=\"ne-text\">文件编码格式</span></h5><p id=\"udbc8ab2a\" class=\"ne-p\"><span class=\"ne-text\">不同类型的文件，编码形式会不一样，为了能够精准地读取文件，浏览器需要知道文件的编码类型</span></p><pre data-language=\"plain\" id=\"KTxUd\" class=\"ne-codeblock language-plain\">// 请求头\naccept:text/plain; charset=utf-8\n// 响应头\ncontent-type: application/json; charset=utf-8</pre><h5 id=\"j3syU\"><span class=\"ne-text\">缓存</span></h5><p id=\"u541e9a86\" class=\"ne-p\"><span class=\"ne-text\">http/1.0 提供了缓存机制，用来缓存已经下载过的数据</span></p><pre data-language=\"plain\" id=\"PEIPy\" class=\"ne-codeblock language-plain\">// 请求头 响应头 \ncache-control: no-store, no-cache, must-revalidate</pre><h5 id=\"McH4d\"><span class=\"ne-text\">客户端基础信息</span></h5><p id=\"u54330dbf\" class=\"ne-p\"><span class=\"ne-text\">通过 ua，可以知道浏览器的版本、操作系统等信息</span></p><pre data-language=\"plain\" id=\"FScqp\" class=\"ne-codeblock language-plain\">// 请求头\nuser-agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7)</pre><h3 id=\"xIP3m\"><span class=\"ne-text\">http/1.1</span></h3><p id=\"udeee5c17\" class=\"ne-p\" style=\"text-indent: 2em\"><span class=\"ne-text\">http/1.1 默认使用了持久连接，多个请求可以复用同一个 tcp 连接，但是在同一个 tcp 连接里面，数据请求的通信次序是固定的。服务器只有处理完一个请求的响应后，才会进行下一个请求的处理，如果前面请求的响应特别慢的话，就会造成许多请求排队等待的情况，这种情况被称为</span><strong><span class=\"ne-text\">队头阻塞</span></strong><span class=\"ne-text\">。队头阻塞会导致持久连接在达到最大数量时，剩余的资源需要等待其他资源请求完成后才能发起请求</span></p><p id=\"u87c6c9fb\" class=\"ne-p\"><span class=\"ne-text\"></span></p><p id=\"u59dd1c87\" class=\"ne-p\" style=\"text-indent: 2em\"><span class=\"ne-text\">为了避免这个问题，一个是减少请求数，另一个是同时打开多个持久连接。这就是我们对网站优化时，使用雪碧图、合并脚本的原因。</span></p><h4 id=\"cflLg\"><span class=\"ne-text\">http/1.1 与 http/1.0 的区别</span></h4><p id=\"u94c2c819\" class=\"ne-p\"><img src=\"https://cdn.nlark.com/yuque/0/2022/png/732231/1647496796030-30d933d6-7fe3-4319-94de-e7a1a13f4a43.png\" width=\"1304\" id=\"u2b1e61c2\" class=\"ne-image\"></p><p id=\"u5ab7a2b7\" class=\"ne-p\"><span class=\"ne-text\">持久连接通过请求头控制，不做特殊处理时候，默认会保持持久连接。</span></p><pre data-language=\"plain\" id=\"eahS7\" class=\"ne-codeblock language-plain\">// 请求头\nconnection: keep-alive</pre><p id=\"u66fc92a1\" class=\"ne-p\"><span class=\"ne-text\">可以通过以下方式关闭持久连接</span></p><pre data-language=\"plain\" id=\"yFX7g\" class=\"ne-codeblock language-plain\">// 请求头\nconnection: close</pre><div data-type=\"info\" class=\"ne-alert\"><ol class=\"ne-ol\"><li id=\"u0aea94d0\"><span class=\"ne-text\">连接方面的区别，http1.1 默认使用持久连接，而 http1.0 默认使用非持久连接。http1.1 通过使用持久连接来使多个 http 请求复用同一个 TCP 连接，以此来避免使用非持久连接时每次需要建立连接的时延。</span></li><li id=\"u48571386\"><span class=\"ne-text\">资源请求方面的区别，在 http1.0 中，存在一些浪费带宽的现象，例如客户端只是需要某个对象的一部分，而服务器却将整个对象送过来了，并且不支持断点续传功能，http1.1 则在请求头引入了 range 头域，它允许只请求资源的某个部分，即返回码是 206（Partial Content），这样就方便了开发者自由的选择以便于充分利用带宽和连接。</span></li><li id=\"ufcd26764\"><span class=\"ne-text\">缓存方面的区别，在 http1.0 中主要使用 header 里的 If-Modified-Since,Expires 来做为缓存判断的标准，http1.1 则引入了更多的缓存控制策略例如 Etag、If-Unmodified-Since、If-Match、If-None-Match 等更多可供选择的缓存头来控制缓存策略。</span></li><li id=\"u29bcce70\"><span class=\"ne-text\">http1.1 中还新增了 host 字段，用来指定服务器的域名。http1.0 中认为每台服务器都绑定一个唯一的 IP 地址，因此，请求消息中的 URL 并没有传递主机名（hostname）。但随着虚拟主机技术的发展，在一台物理服务器上可以存在多个虚拟主机，并且它们共享一个 IP 地址。因此有了 host 字段，就可以将请求发往同一台服务器上的不同网站。</span></li><li id=\"ua628cfd0\"><span class=\"ne-text\">http1.1 相对于 http1.0 还新增了很多方法，如 PUT、HEAD、OPTIONS 等。</span></li></ol></div><h3 id=\"tToff\"><span class=\"ne-text\">http/2</span></h3><p id=\"u6ad22d75\" class=\"ne-p\" style=\"text-indent: 2em\"><span class=\"ne-text\">2009 年，谷歌公开了自行研发的 SPDY 协议，主要解决 http/1.1 效率不高的问题。这个协议在 Chrome 浏览器上证明可行以后，就被当作 http/2 的基础，主要特性都在 http/2 之中得到继承。在 2015 年，http/2 发布。以下是 http/2 的新特性：</span></p><h4 id=\"ewFuZ\"><span class=\"ne-text\">二进制协议(二进制传输)</span></h4><ul class=\"ne-ul\"><li id=\"ufb8f67c4\"><span class=\"ne-text\">在 http/1.1 中，报文的头信息必须是文本(ASCII编码)；在 http/2 中，数据体可以是文本，也可以分割所有传输数据，并采用二进制进行编码。</span></li><li id=\"udeee4424\"><span class=\"ne-text\">http/2 则是一个彻底的二进制协议，头信息和数据体都是二进制，并且统称为</span><strong><span class=\"ne-text\">帧</span></strong><span class=\"ne-text\">，可以分为头信息帧和数据帧。帧的概念是它实现多路复用的基础</span></li></ul><h4 id=\"Ya5Iy\"><span class=\"ne-text\">数据流</span></h4><ul class=\"ne-ul\"><li id=\"u13569953\"><span class=\"ne-text\">http/2 使用了数据流的概念，因为 http/2 的数据包是不按顺序发送的，同一个连接里面连续的数据包，可能属于不同的请求。因此，必须要对数据包做标记，指出它属于哪个请求。</span></li><li id=\"ua1625898\"><span class=\"ne-text\">http/2 将每个请求或回应的所有数据包，称为一个数据流。每个数据流都有一个独一无二的编号。数据包发送的时，都必须标记数据流 id，用来区分它属于哪个数据流</span></li></ul><h4 id=\"dsJcb\"><span class=\"ne-text\">header 头信息压缩</span></h4><ul class=\"ne-ul\"><li id=\"uc720a8b5\"><span class=\"ne-text\">http/2 实现了头信息压缩，由于 http/1.1 协议不带有状态，每次请求都必须附带上所有信息。所以，请求的很多字段都是重复的，比如 Cookie 和 User Agent，一模一样的内容，每次请求都必须携带，这样会浪费很多带宽，也影响了速度</span></li><li id=\"u33fe18c3\"><span class=\"ne-text\">http/2 对这一点做了优化，引入了头部压缩机制</span></li></ul><ul class=\"ne-list-wrap\"><ul ne-level=\"1\" class=\"ne-ul\"><li id=\"u06617969\"><span class=\"ne-text\">采用 HPACK 算法，在客户端和服务端两端建立</span><strong><span class=\"ne-text\" style=\"color: #13C2C2\">字典</span></strong><span class=\"ne-text\">，用索引号表示重复的字符串</span></li></ul></ul><ul class=\"ne-list-wrap\"><ul ne-level=\"1\" class=\"ne-ul\"><li id=\"u6b72bb26\"><span class=\"ne-text\">采用哈夫曼编码来压缩整数和字符串，可以达到 50% ～ 90% 的高压缩率</span></li></ul></ul><ul class=\"ne-ul\"><li id=\"ua15911a2\"><span class=\"ne-text\">一方面，头信息使用 gzip 或 compress 压缩后再发送；另一方面，客户端和服务器同时维护一张头信息表，所有字段都会存入这个表，生成一个索引号，以后就不发送同样字段了，只发送索引号，这样就能提高速度了</span></li></ul><h4 id=\"Wn2hE\"><span class=\"ne-text\">多路复用</span></h4><ul class=\"ne-ul\"><li id=\"u42bdc71d\"><span class=\"ne-text\">采用二进制分帧传输，用帧来标识请求，因为一个 tcp 连接可在多条</span><strong><span class=\"ne-text\" style=\"color: #13C2C2\">流</span></strong><span class=\"ne-text\">中，即可以发送多个请求。另外，不存在先后关系，也就不存在等待排队的问题，所以可避免 http/1 中队头阻塞的问题</span></li><li id=\"ub00b1f70\"><span class=\"ne-text\">通信双方都可以给对方发送二进制帧，这种二进制帧的双向传输序列，又叫做</span><strong><span class=\"ne-text\" style=\"color: #13C2C2\">流</span></strong><span class=\"ne-text\">。http/2 用</span><strong><span class=\"ne-text\" style=\"color: #13C2C2\">流</span></strong><span class=\"ne-text\">来在一个 tcp 连接上进行数据帧的通信</span></li></ul><h4 id=\"jnfRi\"><span class=\"ne-text\">服务端推送</span></h4><p id=\"u3b8e146c\" class=\"ne-p\" style=\"text-indent: 2em\"><span class=\"ne-text\">http/2 允许服务器未经请求，主动向客户端发送资源，这叫做服务端推送。使用服务端推送，提前给客户端推送必要的资源，这样就可以相对减少一些延迟时间。这里需要注意的是 http2 下服务器主动推送的是静态资源，和 webSocket 以及使用 SSE 等方式向客户端发送即时数据推送是不同的</span></p><ul class=\"ne-ul\"><li id=\"u53cad573\"><span class=\"ne-text\">服务器不再是完全被动地响应请求，也可以新建</span><strong><span class=\"ne-text\" style=\"color: #13C2C2\">流</span></strong><span class=\"ne-text\">主动向客户端发送消息</span></li></ul><h4 id=\"dcwcs\"><span class=\"ne-text\">大幅度提高网页性能</span></h4><ul class=\"ne-ul\"><li id=\"u4dd8bd62\"><span class=\"ne-text\">http/1 最大的请求数为 6，会造成对头阻塞，需等待其他资源请求完成后才能发起请求</span></li></ul><div data-type=\"danger\" class=\"ne-alert\"><p id=\"u3cfea0bb\" class=\"ne-p\"><strong><span class=\"ne-text\">http/2 协议缺点：</span></strong></p><p id=\"uac99c206\" class=\"ne-p\"><span class=\"ne-text\">因为 http/2 使用了多路复用，一般来说，同一域名下只需要使用一个 tcp 连接。由于多个数据流使用同一个 tcp 连接，遵守同一个流量状态控制和拥塞控制。只要一个数据流遭遇到阻塞，剩下的数据流就没办法出去，这样就导致了后面的所有数据都会被阻塞。http/2 出现的这个问题是由于其使用 tcp 协议的问题，与它本身的实现其实没有多大的关系</span></p></div><h3 id=\"v6GvI\"><span class=\"ne-text\">http/3</span></h3><p id=\"ud78df30b\" class=\"ne-p\" style=\"text-indent: 2em\"><span class=\"ne-text\">http/3 基于 udp 实现了类似于 tcp 的多路数据流、传输可靠性等功能，这套功能又称为 quic 协议。quic 协议在 udp 协议上实现了多路复用、有序支付、重传等功能</span></p><ul class=\"ne-ul\"><li id=\"u1edc2754\"><span class=\"ne-text\">实现了类似于 tcp 的流量控制、传输可靠性的功能</span></li><li id=\"ua9c90237\"><span class=\"ne-text\">集成了 tls 加密功能</span></li><li id=\"u2e45a427\"><span class=\"ne-text\">解决了 http/2 下多路复用时丢包产生的问题，即解决了 tcp 协议的一些问题</span></li></ul><div data-type=\"warning\" class=\"ne-alert\"><p id=\"u43ce4c22\" class=\"ne-p\"><span class=\"ne-text\">和 tcp 不同，quic 协议实现了在同一物理连接上可以有多个独立的逻辑数据流。从而实现了数据流的单独传输，因此就解决了 tcp 中队头阻塞的问题</span></p></div><h2 id=\"Fz4wD\"><img src=\"https://cdn.nlark.com/yuque/0/2022/png/732231/1647496985371-a318bd43-f1c4-4a30-84b7-f999ebc186ca.png\" width=\"880\" id=\"u33bb5ddb\" class=\"ne-image\"></h2><h2 id=\"fhgyU\"><span class=\"ne-text\">https</span></h2><p id=\"u06f4812d\" class=\"ne-p\" style=\"text-indent: 2em\"><span class=\"ne-text\">http 协议是用于 web 浏览器和网站服务器之间传递信息，http 协议以明文的方式来发送内容，不提供任何方式的数据加密。所以，http 协议不适合传输敏感信息。https 就是解决这一缺陷的，用来保证数据传输安全。</span></p><p id=\"u515007a6\" class=\"ne-p\"><br></p><div data-type=\"info\" class=\"ne-alert\"><p id=\"ua3da0711\" class=\"ne-p\"><span data-color=\"4\" id=\"IcjO8\" class=\"ne-label\">被监听</span><span class=\"ne-text\"> https 是基于 http 协议的，它在 http 的基础上加入了 ssl/tls 协议。ssl/tls 协议依靠证书来验证服务器的身份，并为浏览器和服务器之间的通信进行加密，这保证了传输过程中的安全性，减少了恶意劫持的可能。</span></p><p id=\"u1cdbb90a\" class=\"ne-p\"><span data-color=\"4\" id=\"Mynyr\" class=\"ne-label\">被篡改</span><span class=\"ne-text\">并且它提供了一种校验机制，信息一旦被篡改，通信双方都会立刻发现。</span></p><p id=\"u3bc3e639\" class=\"ne-p\"><span data-color=\"4\" id=\"cjN89\" class=\"ne-label\">被伪装</span><span class=\"ne-text\">它还配备了身份证书，防止身份被冒充的情况出现。</span></p></div><p id=\"ued1f6ecd\" class=\"ne-p\"><span class=\"ne-text\">https 很好的解决了 http 的多个缺点(被监听、被篡改、被伪装)。</span></p><ul class=\"ne-ul\"><li id=\"uc05d79f0\"><span class=\"ne-text\">https 协议 = http 协议 + ssl/tls 协议</span></li><li id=\"ub36bb37f\"><span class=\"ne-text\">加密方式采取了对称加密和非对称加密</span></li><li id=\"u3547935c\"><span class=\"ne-text\">整体而言，对数据进行对称加密，对称加密所需要使用的密钥通过非对称加密进行传输</span></li></ul><div data-type=\"info\" class=\"ne-alert\"><p id=\"u455ae0d8\" class=\"ne-p\" style=\"text-indent: 2em\"><span class=\"ne-text\">https 采用混合加密机制，如果密钥能够保证安全交换，那么全程有可能仅使用对称密钥加密来进行通信，如果不能保证密钥安全交换，可在密钥交换环节使用非对称加密方式，之后使用对称加密方式。这样做的目的是因为对称密钥加密相较非对称秘钥加密处理速度更快。</span></p><p id=\"u4d6f0125\" class=\"ne-p\" style=\"text-indent: 2em\"><span class=\"ne-text\">但是加密了就安全了吗，就不会被窃听了吗？实际上，即使通信被加密，通信内容还是可以被技术手段窃听到，但是通信加密后就不容易看懂具体的报文信息了，相当于达到了加密的目的。</span></p><p id=\"u427d1624\" class=\"ne-p\"><span class=\"ne-text\">https 加密传输过程中需要传输公开密钥，那么公开密钥又是如何保证其正确性呢，当然是数字认证机构颁发的公开密钥证书。</span></p></div><p id=\"u833f192f\" class=\"ne-p\"><img src=\"https://cdn.nlark.com/yuque/0/2022/png/732231/1647345138666-c3a5f9f2-df02-44a0-8226-e85c74b5d228.png\" width=\"643\" id=\"xylZO\" class=\"ne-image\"></p><h3 id=\"nh9lc\"><span class=\"ne-text\">TLS 握手过程</span></h3><ol class=\"ne-ol\"><li id=\"u2bb04e02\"><span class=\"ne-text\">第一步：客户端向服务器发起请求，请求中包含使用的</span><strong><span class=\"ne-text\">协议版本号</span></strong><span class=\"ne-text\">、</span><strong><span class=\"ne-text\">生成的一个随机数</span></strong><span class=\"ne-text\">、以及</span><strong><span class=\"ne-text\">客户端支持的加密方法</span></strong></li><li id=\"u68ce7989\"><span class=\"ne-text\">第二步：服务端收到请求后，确认双方使用的加密方法，并</span><strong><span class=\"ne-text\">给出服务器的证书</span></strong><span class=\"ne-text\">、以及</span><strong><span class=\"ne-text\">一个服务器生成的随机数</span></strong></li><li id=\"u61e55c57\"><span class=\"ne-text\">第三步：客户端确认服务器证书有效后，生成一个新的随机数，并使用数字证书中的公钥，加密这个随机数，然后发送给服务器。并且还会提供一个前面所有内容的</span><strong><span class=\"ne-text\">哈希值</span></strong><span class=\"ne-text\">，用来供</span><strong><span class=\"ne-text\">服务器检验</span></strong></li><li id=\"u5a92dc96\"><span class=\"ne-text\">第四步：服务器使用自己的私钥，来解密客户端发送过来的随机数，并提供前面所有内容的</span><strong><span class=\"ne-text\">哈希值</span></strong><span class=\"ne-text\">，用来供</span><strong><span class=\"ne-text\">客户端检验</span></strong></li><li id=\"u11197671\"><span class=\"ne-text\">第五步：客户端和服务器根据约定的加密方法，</span><strong><span class=\"ne-text\">使用前面的三个随机数，生成对话的密钥</span></strong><span class=\"ne-text\">，以后的对话过程都使用这个密钥来加密信息</span></li></ol><div data-type=\"info\" class=\"ne-alert\"><p id=\"u8f47b2c7\" class=\"ne-p\"><strong><span class=\"ne-text\">TLS 的握手过程主要用到了三个方法来保证传输的安全：</span></strong></p><ol class=\"ne-ol\"><li id=\"uf3a67940\"><span class=\"ne-text\">对称加密</span></li><li id=\"u8127bcf2\"><span class=\"ne-text\">非对称加密</span></li><li id=\"u6e8a08c6\"><span class=\"ne-text\">数字证书</span></li></ol></div><h3 id=\"X7Mwv\"><span class=\"ne-text\">TLS 的实现原理</span></h3><h4 id=\"hNnfH\"><span class=\"ne-text\">对称加密</span></h4><p id=\"u38c8cdae\" class=\"ne-p\"><span class=\"ne-text\">加密的密钥和解密的密钥相同</span></p><div data-type=\"danger\" class=\"ne-alert\"><p id=\"u78393777\" class=\"ne-p\"><strong><span class=\"ne-text\">缺陷</span></strong><span class=\"ne-text\">：如何保证密钥传输的安全性，因为密钥还是会通过网络进行传输的，一旦密钥被其他人获取到，那么整个加密过程就毫无作用了。因此引出了非对称加密的方法。</span></p></div><h4 id=\"SSqF8\"><span class=\"ne-text\">非对称加密</span></h4><p id=\"u16287d99\" class=\"ne-p\"><span class=\"ne-text\">将密钥分为公钥和私钥，公钥可公开，私钥保密。客户端用公钥加密的数据，服务端可以通过私钥解密</span></p><div data-type=\"danger\" class=\"ne-alert\"><p id=\"ued5f40a6\" class=\"ne-p\"><span class=\"ne-text\">缺陷：无法确认得到的公钥一定是安全的公钥，可能存在一个中间人，截取了对方发给我们的公钥，然后将他自己的公钥发送给我们，当我们使用他的公钥加密后发送信息，就可以被他用自己的私钥解密。伪装后以同样的方法向对方发送信息，这样信息就被窃取了。所以引出了数字证书的概念</span></p></div><h4 id=\"lCL70\"><span class=\"ne-text\">数字证书</span></h4><ul class=\"ne-ul\"><li id=\"ue95efe74\"><span class=\"ne-text\">首先我们使用一种哈希算法来对公钥和其他信息进行加密生成一个信息摘要。</span></li><li id=\"uadc7b34c\"><span class=\"ne-text\">然后让有公信力的认证中心(简称CA)，用它的私钥对消息摘要加密，形成签名。</span></li><li id=\"ua2182181\"><span class=\"ne-text\">最后</span><strong><span class=\"ne-text\">将原始的信息和签名结合在一起</span></strong><span class=\"ne-text\">，称为</span><strong><span class=\"ne-text\">数字证书。</span></strong></li><li id=\"u10b2790b\"><span class=\"ne-text\">当接收方收到数字证书的时候，先根据原始信息使用同样的哈希算法生成一个摘要，然后使用公证处的公钥来对数字证书中摘要进行解密，最后将解密的摘要和我们生成的摘要进行对比，就能发现我们得到的信息是否被更改了。</span></li><li id=\"udcf9964c\"><span class=\"ne-text\">这个方法最重要的是认证中心的可靠性，一般浏览器内部会内置一些顶层的认证中心证书，相当于我们自动信任了他们，只有这样我们才能够保证数据安全。</span></li></ul><h2 id=\"qcWsh\"><span class=\"ne-text\">http 和 https 的区别</span></h2><ul class=\"ne-ul\"><li id=\"ucefbed7c\"><span class=\"ne-text\">https 协议需要 CA 证书，一般免费证书表较少，因而需要一定的费用</span></li><li id=\"uaa49beb2\"><span class=\"ne-text\">http 是超文本传输协议，信息是明文传输；https 则是具有安全性的 ssl 加密传输协议</span></li><li id=\"uff45e9c9\"><span class=\"ne-text\">http 和 https 使用的是完全不同的连接方式，使用的端口也不同，前者是 80，后者是 443</span></li><li id=\"uabcd249d\"><span class=\"ne-text\">http 的连接很简单，是无状态的；https 协议是由 ssl + http 协议构建的可进行加密传输、身份认证的网络协议，比 http 协议安全</span></li><li id=\"uf41f99e5\"><span class=\"ne-text\">https </span></li></ul><h2 id=\"GpbQT\"><span class=\"ne-text\">对称加密和非对称加密的区别</span></h2><p id=\"u1873aace\" class=\"ne-p\"><a href=\"https://www.jianshu.com/p/de50d1489359\" data-href=\"https://www.jianshu.com/p/de50d1489359\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">https://www.jianshu.com/p/de50d1489359</span></a></p></div>",
  "body_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"viewport\" content=\"adapt\" /><h2 data-lake-id=\"uavBw\" id=\"uavBw\"><span data-lake-id=\"u0f0e2a58\" id=\"u0f0e2a58\">http</span></h2><p data-lake-id=\"u8154aa21\" id=\"u8154aa21\" style=\"text-indent: 2em\"><span data-lake-id=\"ua3fb8adc\" id=\"ua3fb8adc\">http 是超文本传输协议，它定义了客户端与服务器之间交换报文的格式和方式，默认使用 80 端口。它使用 tcp 作为传输层协议，保证了数据传输的可靠性</span></p><ul list=\"u5ce8ff1b\"><li fid=\"uf3a36ead\" data-lake-id=\"u36d19862\" id=\"u36d19862\"><span data-lake-id=\"uae9ef9f4\" id=\"uae9ef9f4\">http 是一个无状态的协议，http 服务器不会保存关于客户的任何信息</span></li><li fid=\"uf3a36ead\" data-lake-id=\"ud4f42186\" id=\"ud4f42186\"><span data-lake-id=\"u07f4e26d\" id=\"u07f4e26d\">http 有两种连接方式，一种是持续连接，另一种是非持续连接。</span></li></ul><ul list=\"u5ce8ff1b\" data-lake-indent=\"1\"><li fid=\"uf3a36ead\" data-lake-id=\"u5adc1c70\" id=\"u5adc1c70\"><span data-lake-id=\"u56b92086\" id=\"u56b92086\">非持续连接：服务器必须为每一个请求的对象建立和维护一个全新的连接</span></li><li fid=\"uf3a36ead\" data-lake-id=\"ua531fc13\" id=\"ua531fc13\"><span data-lake-id=\"u0b798629\" id=\"u0b798629\">持续连接：tcp 连接默认不关闭，可以被多个请求复用</span></li></ul><ul list=\"u5ce8ff1b\" start=\"3\"><li fid=\"uf3a36ead\" data-lake-id=\"u23d2bfaa\" id=\"u23d2bfaa\"><span data-lake-id=\"uae6b436b\" id=\"uae6b436b\">采用持续连接的好处是：可以避免每次建立 tcp 连接 3 次握手时所花费的时间。在 http/1.0 以前使用的是非持续的连接，但可以在请求时加上 Connection: keep-alive 来要求服务器不要关闭 tcp 连接。在 http/1.1 以后默认采用的是持续的连接/目前对于同一个域，大多数浏览器支持同时建立 </span><strong><span data-lake-id=\"u0820cae8\" id=\"u0820cae8\">6</span></strong><span data-lake-id=\"u60efa06f\" id=\"u60efa06f\"> 个持久连接</span></li></ul><h3 data-lake-id=\"oFPXE\" id=\"oFPXE\"><span data-lake-id=\"u7edbb8c8\" id=\"u7edbb8c8\">请求报文和响应报文</span></h3><p data-lake-id=\"u475045ac\" id=\"u475045ac\"><span data-lake-id=\"u77f1c6d1\" id=\"u77f1c6d1\">http 报文有两种，一种是请求报文，一种是响应报文</span></p><h4 data-lake-id=\"tmJ4Q\" id=\"tmJ4Q\"><span data-lake-id=\"uc25b7f89\" id=\"uc25b7f89\">http 请求报文</span></h4><p data-lake-id=\"udc1f817d\" id=\"udc1f817d\"><span data-lake-id=\"u0af9485e\" id=\"u0af9485e\">http 请求报文的格式如下：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22html%22%2C%22code%22%3A%22GET%20%2F%20HTTP%2F1.1%5CnUser-Agent%3A%20Mozilla%2F5.0%20(Macintosh%3B%20Intel%20Mac%20OS%20X%2010_10_5)%5CnAccept%3A%20*%2F*%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22bNq4j%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u1a341b79\" id=\"u1a341b79\" style=\"text-indent: 2em\"><span data-lake-id=\"u8285a2b6\" id=\"u8285a2b6\">http 请求报文的第一行叫做请求行，后面的行叫做首部行，首部行后还可以根一个实体主体。请求首部之后有一个空行，这个空行不能省略，它用来划分首部与实体</span></p><p data-lake-id=\"u44921dc9\" id=\"u44921dc9\"><span data-lake-id=\"ucf597721\" id=\"ucf597721\">​</span><br></p><p data-lake-id=\"uc0276100\" id=\"uc0276100\" style=\"text-indent: 2em\"><span data-lake-id=\"u108a33ef\" id=\"u108a33ef\">请求行包含三个字段：</span><strong><span data-lake-id=\"uf1701601\" id=\"uf1701601\">方法字段</span></strong><span data-lake-id=\"u0d7024f8\" id=\"u0d7024f8\">、</span><strong><span data-lake-id=\"u0840ada1\" id=\"u0840ada1\">url 字段</span></strong><span data-lake-id=\"uea612e4d\" id=\"uea612e4d\">和 </span><strong><span data-lake-id=\"u60cdc137\" id=\"u60cdc137\">http 版本字段</span></strong></p><p data-lake-id=\"ub4e6eee6\" id=\"ub4e6eee6\"><strong><span data-lake-id=\"u4ce694c1\" id=\"u4ce694c1\">​</span></strong><br></p><p data-lake-id=\"u6af26c87\" id=\"u6af26c87\" style=\"text-indent: 2em\"><span data-lake-id=\"u3ec007c7\" id=\"u3ec007c7\">方法字段可以取几个不同的值：一般有 GET、POST、HEAD、PUT 和 DELETE。一般 GET 方法只被用于 向服务器获取数据。POST 方法用于将实体提交到指定的资源，通常会造成服务器资源的修改。HEAD 方法与 GET 方法类似，但是在返回的响应中，不包含请求对象。PUT 方法用于上传文件到服务器，DELETE 方法用于删除服务器上的对象。虽然请求的方法很多，但更多表达的是一种语义上的区别，并不是说 POST 能做的事情，GET 就更不能做了，主要看我们如何选择</span></p><h4 data-lake-id=\"B5N7E\" id=\"B5N7E\"><span data-lake-id=\"u22c94bd4\" id=\"u22c94bd4\">http 响应报文</span></h4><p data-lake-id=\"u8dd001bc\" id=\"u8dd001bc\"><span data-lake-id=\"u50dcd9ed\" id=\"u50dcd9ed\">http 响应报文的格式如下：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22html%22%2C%22code%22%3A%22HTTP%2F1.0%20200%20OK%5CnContent-Type%3A%20text%2Fplain%5CnContent-Length%3A%20137582%5CnExpires%3A%20Thu%2C%2005%20Dec%201997%2016%3A00%3A00%20GMT%5CnLast-Modified%3A%20Wed%2C%205%20August%201996%2015%3A55%3A28%20GMT%5CnServer%3A%20Apache%200.84%5Cn%5Cn%3Chtml%3E%5Cn%20%20%3Cbody%3EHello%20World%3C%2Fbody%3E%5Cn%3C%2Fhtml%3E%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22x6SUN%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"uc710bf45\" id=\"uc710bf45\"><span data-lake-id=\"ud822c1aa\" id=\"ud822c1aa\">http 响应报文的第一行叫做状态行，后面的行是首部行，最后是实体主体</span></p><p data-lake-id=\"ua97b7fe9\" id=\"ua97b7fe9\"><span data-lake-id=\"u1e152f3c\" id=\"u1e152f3c\">​</span><br></p><p data-lake-id=\"u129d6978\" id=\"u129d6978\"><span data-lake-id=\"u2a9b95ee\" id=\"u2a9b95ee\">状态行包含了三个字段：</span><strong><span data-lake-id=\"u613aa654\" id=\"u613aa654\">协议版本字段</span></strong><span data-lake-id=\"uf520e7bc\" id=\"uf520e7bc\">、</span><strong><span data-lake-id=\"u8e726ca7\" id=\"u8e726ca7\">状态码</span></strong><span data-lake-id=\"u68db75a1\" id=\"u68db75a1\">和</span><strong><span data-lake-id=\"u15a780e0\" id=\"u15a780e0\">响应的状态信息</span></strong></p><p data-lake-id=\"uf6ff5250\" id=\"uf6ff5250\"><strong><span data-lake-id=\"u6d969d15\" id=\"u6d969d15\">​</span></strong><br></p><p data-lake-id=\"u443a80cc\" id=\"u443a80cc\"><span data-lake-id=\"u1061067e\" id=\"u1061067e\">实体部分是报文的主要部分，它包含了所请求的对象。</span></p><p data-lake-id=\"u357c02cd\" id=\"u357c02cd\"><span data-lake-id=\"uafb4962e\" id=\"uafb4962e\">常见的状态码有：</span></p><card type=\"block\" name=\"yuque\" value=\"data:%7B%22mode%22%3A%22embed%22%2C%22heightMode%22%3A%22default%22%2C%22src%22%3A%22https%3A%2F%2Fwww.yuque.com%2Fgo%2Fdoc%2F69183233%22%2C%22url%22%3A%22https%3A%2F%2Fwww.yuque.com%2Fgo%2Fdoc%2F69183233%3Fview%3Ddoc_embed%22%2C%22detail%22%3A%7B%22image%22%3Anull%2C%22title%22%3A%22%E5%B8%B8%E8%A7%81%E7%9A%84%20http%20%E7%8A%B6%E6%80%81%E7%A0%81%22%2C%22type%22%3A%22doc%22%2C%22belong%22%3A%22%E5%89%8D%E7%AB%AF%E6%A0%B8%E5%BF%83%E8%80%83%E7%82%B9%22%2C%22belong_url%22%3A%22%2Fconjuring%2Ftas4vt%22%2C%22desc%22%3A%221XX(%E4%BB%A3%E8%A1%A8%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%8E%A5%E6%94%B6%E5%88%B0%E8%AF%B7%E6%B1%82)2XX(Success%20%E6%88%90%E5%8A%9F%E7%8A%B6%E6%80%81%E7%A0%81)200%20OK%20%E8%A1%A8%E6%98%8E%E8%AF%B7%E6%B1%82%E5%B7%B2%E7%BB%8F%E6%88%90%E5%8A%9F.%20%E9%BB%98%E8%AE%A4%E6%83%85%E5%86%B5%E4%B8%8B%E7%8A%B6%E6%80%81%E7%A0%81%E4%B8%BA200%E7%9A%84%E5%93%8D%E5%BA%94%E5%8F%AF%E4%BB%A5%E8%A2%AB%E7%BC%93%E5%AD%98%E3%80%82204%20No%20Content%20%E8%A1%A8%E7%A4%BA%E7%9B%AE%E5%89%8D%E8%AF%B7%E6%B1%82%E6%88%90%E5%8A%9F%EF%BC%8C%E4%BD%86%E5%AE%A2%E6%88%B7%E7%AB%AF%E4%B8%8D%E9%9C%80%E8%A6%81%E6%9B%B4%E6%96%B0%E5%85%B6%E7%8E%B0%E6%9C%89%E9%A1%B5%E9%9D%A23XX(Redirection%20%E9%87%8D%E5%AE%9A%E5%90%91%E7%8A%B6%E6%80%81%E7%A0%81)301%20Moved%20Perma...%22%2C%22url%22%3A%22https%3A%2F%2Fwww.yuque.com%2Fgo%2Fdoc%2F69183233%22%2C%22target_type%22%3A%22Doc%22%2C%22_serializer%22%3A%22web.editor_link_detail%22%7D%2C%22id%22%3A%22LX2OB%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h3 data-lake-id=\"H5oEc\" id=\"H5oEc\"><span data-lake-id=\"ubd7b6215\" id=\"ubd7b6215\">http/0.9</span></h3><p data-lake-id=\"uf22a15c9\" id=\"uf22a15c9\" style=\"text-indent: 2em\"><span data-lake-id=\"u3fd19b5a\" id=\"u3fd19b5a\">http/0.9 只能用来传输体积很小的 html 文件，采用的是 ASCII 字节码编码。请求和响应的格式都很简单，请求只有一个请求行，响应部分也只有一个响应体。</span></p><p data-lake-id=\"uea3ed587\" id=\"uea3ed587\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2022%2Fpng%2F732231%2F1647496305663-e32231da-f410-4054-b3bd-0ba0f8a797d4.png%22%2C%22taskId%22%3A%22u7960ab82-ba26-4d9d-b6ba-6a0ecc2d915%22%2C%22clientId%22%3A%22uaa145f8b-00d1-4%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A1304%2C%22height%22%3A396%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A60486%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A1304%2C%22originHeight%22%3A396%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%E8%AF%B7%E6%B1%82%E8%A1%8C%20%E8%AF%B7%E6%B1%82%20%E6%A0%BC%E5%BC%8F%20%E5%93%8D%E5%BA%94%E4%BD%93%20%E5%93%8D%E5%BA%94%20%E7%A8%80%E5%91%B3%E6%8E%98%E9%87%91%E6%8A%80%E6%9C%AF%E8%A2%AB%E5%8C%BA%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A947.91235%2C%22y%22%3A134.76898%2C%22width%22%3A68.22242000000006%2C%22height%22%3A24.07158000000001%2C%22text%22%3A%22%E8%AF%B7%E6%B1%82%E8%A1%8C%22%7D%2C%7B%22x%22%3A495.9539%2C%22y%22%3A135.3299%2C%22width%22%3A47.28250000000003%2C%22height%22%3A23.591639999999984%2C%22text%22%3A%22%E8%AF%B7%E6%B1%82%22%7D%2C%7B%22x%22%3A45.10031%2C%22y%22%3A188.54106%2C%22width%22%3A45.98179%2C%22height%22%3A23.32924%2C%22text%22%3A%22%E6%A0%BC%E5%BC%8F%22%7D%2C%7B%22x%22%3A946.7211%2C%22y%22%3A240.51105%2C%22width%22%3A70.45260000000007%2C%22height%22%3A24.787049999999965%2C%22text%22%3A%22%E5%93%8D%E5%BA%94%E4%BD%93%22%7D%2C%7B%22x%22%3A495.8238%2C%22y%22%3A241.32971%2C%22width%22%3A47.15264000000002%2C%22height%22%3A24.943329999999975%2C%22text%22%3A%22%E5%93%8D%E5%BA%94%22%7D%2C%7B%22x%22%3A1146.0504%2C%22y%22%3A359.34778%2C%22width%22%3A144.71849999999995%2C%22height%22%3A23.685299999999984%2C%22text%22%3A%22%E7%A8%80%E5%91%B3%E6%8E%98%E9%87%91%E6%8A%80%E6%9C%AF%E8%A2%AB%E5%8C%BA%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22id%22%3A%22u6f08f342%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><h3 data-lake-id=\"Qc4DV\" id=\"Qc4DV\"><span data-lake-id=\"uc7db64db\" id=\"uc7db64db\">http/1.0</span></h3><p data-lake-id=\"ub673d7df\" id=\"ub673d7df\" style=\"text-indent: 2em\"><span data-lake-id=\"ud6d5ebd9\" id=\"ud6d5ebd9\">因为 http/1.0 支持了更多样的文件格式，在请求发送时需要标注：文件类型、文件编码等，因此请求头产生了。</span></p><p data-lake-id=\"u4128aebb\" id=\"u4128aebb\" style=\"text-indent: 2em\"><span data-lake-id=\"ue74173d0\" id=\"ue74173d0\">服务器收到请求后不一定可以按照指定的要求准备数据，所以会在响应头里标注数据最终的组织形式，因此产生了响应头。</span></p><p data-lake-id=\"udded657e\" id=\"udded657e\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2022%2Fpng%2F732231%2F1647496411480-5efdc7c7-7fde-493d-a7a8-e632a0e8e09c.png%22%2C%22taskId%22%3A%22u481ff0ae-d90d-4ebf-9719-59a337e1575%22%2C%22clientId%22%3A%22uaa145f8b-00d1-4%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A1304%2C%22height%22%3A589%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A86656%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A1304%2C%22originHeight%22%3A589%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%E8%AF%B7%E6%B1%82%E8%A1%8C%20%E8%AF%B7%E6%B1%82%20%E8%AF%B7%E6%B1%82%E5%A4%B4%20HTTP%2F1.0%E6%96%B0%E5%A2%9E%20%E6%A0%BC%E5%BC%8F%20%E5%93%8D%E5%BA%94%E8%A1%8C%20%E5%93%8D%E5%BA%94%E5%A4%B4%20%E5%93%8D%E5%BA%94%20%E5%93%8D%E5%BA%94%E4%BD%93%20%E7%A8%80%E8%BE%BE%E6%8D%AE%E7%9B%9B%E8%BE%A3%E6%88%90%E7%AB%99%E5%8C%BA%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A701.1419%2C%22y%22%3A137.77603%2C%22width%22%3A53.576200000000085%2C%22height%22%3A21.668930000000017%2C%22text%22%3A%22%E8%AF%B7%E6%B1%82%E8%A1%8C%22%7D%2C%7B%22x%22%3A365.90488%2C%22y%22%3A178.24597%2C%22width%22%3A36.552580000000034%2C%22height%22%3A20.1866%2C%22text%22%3A%22%E8%AF%B7%E6%B1%82%22%7D%2C%7B%22x%22%3A700.5638%2C%22y%22%3A217.50392%2C%22width%22%3A55.434799999999996%2C%22height%22%3A22.361940000000004%2C%22text%22%3A%22%E8%AF%B7%E6%B1%82%E5%A4%B4%22%7D%2C%7B%22x%22%3A1036.2894%2C%22y%22%3A302.98322%2C%22width%22%3A111.67460000000005%2C%22height%22%3A21.95659999999998%2C%22text%22%3A%22HTTP%2F1.0%E6%96%B0%E5%A2%9E%22%7D%2C%7B%22x%22%3A29.621758%2C%22y%22%3A304.3257%2C%22width%22%3A37.800972%2C%22height%22%3A18.62288000000001%2C%22text%22%3A%22%E6%A0%BC%E5%BC%8F%22%7D%2C%7B%22x%22%3A701.71124%2C%22y%22%3A312.2978%2C%22width%22%3A52.37045999999998%2C%22height%22%3A17.544579999999996%2C%22text%22%3A%22%E5%93%8D%E5%BA%94%E8%A1%8C%22%7D%2C%7B%22x%22%3A701.8639%2C%22y%22%3A391.18167%2C%22width%22%3A51.64470000000006%2C%22height%22%3A17.852449999999976%2C%22text%22%3A%22%E5%93%8D%E5%BA%94%E5%A4%B4%22%7D%2C%7B%22x%22%3A366.51526%2C%22y%22%3A391.78055%2C%22width%22%3A35.96913999999998%2C%22height%22%3A17.729980000000012%2C%22text%22%3A%22%E5%93%8D%E5%BA%94%22%7D%2C%7B%22x%22%3A701.5004%2C%22y%22%3A468.48016%2C%22width%22%3A53.056299999999965%2C%22height%22%3A18.55473999999998%2C%22text%22%3A%22%E5%93%8D%E5%BA%94%E4%BD%93%22%7D%2C%7B%22x%22%3A1141.003%2C%22y%22%3A550.38574%2C%22width%22%3A146.81259999999997%2C%22height%22%3A21.12955999999997%2C%22text%22%3A%22%E7%A8%80%E8%BE%BE%E6%8D%AE%E7%9B%9B%E8%BE%A3%E6%88%90%E7%AB%99%E5%8C%BA%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22id%22%3A%22u6367db68%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><h4 data-lake-id=\"Qcj6c\" id=\"Qcj6c\"><span data-lake-id=\"u97bb0cb0\" id=\"u97bb0cb0\">常见的请求头、响应头</span></h4><p data-lake-id=\"u65ca5793\" id=\"u65ca5793\" style=\"text-indent: 2em\"><span data-lake-id=\"u45fbaa3c\" id=\"u45fbaa3c\">浏览器会用请求头告诉服务器它想要的文件类型、文件编码、压缩形式、文件语言...</span></p><p data-lake-id=\"u9c119807\" id=\"u9c119807\" style=\"text-indent: 2em\"><span data-lake-id=\"uc917e963\" id=\"uc917e963\">服务器会用响应头告诉浏览器最终的处理结果</span></p><h5 data-lake-id=\"ygCCe\" id=\"ygCCe\"><span data-lake-id=\"u70c2b500\" id=\"u70c2b500\">文件类型</span></h5><p data-lake-id=\"uda782fa7\" id=\"uda782fa7\"><span data-lake-id=\"u1c229917\" id=\"u1c229917\">除了 html，还有 javaScript/css/图片/音频/视频</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22plain%22%2C%22code%22%3A%22%2F%2F%20%E8%AF%B7%E6%B1%82%E5%A4%B4%5Cnaccept%3A%20application%2Fjson%2C%20text%2Fplain%2C%20*%2F*%5Cn%2F%2F%20%E5%93%8D%E5%BA%94%E5%A4%B4%5Cncontent-type%3A%20application%2Fjson%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22NeGeD%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h5 data-lake-id=\"F8D1a\" id=\"F8D1a\"><span data-lake-id=\"u2c23c900\" id=\"u2c23c900\">文件压缩格式</span></h5><p data-lake-id=\"u13789745\" id=\"u13789745\"><span data-lake-id=\"ubd710101\" id=\"ubd710101\">为了减轻传输压力，服务器会对数据进行压缩后再传输，所以浏览器需要知道服务器压缩的方法，通常针对 css/js 文件</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22plain%22%2C%22code%22%3A%22%2F%2F%20%E8%AF%B7%E6%B1%82%E5%A4%B4%5Cnaccept-encoding%3A%20gzip%2C%20deflate%2C%20br%5Cn%2F%2F%20%E5%93%8D%E5%BA%94%E5%A4%B4%5Cncontent-encoding%3A%20gzip%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22uPcxF%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h5 data-lake-id=\"RyboK\" id=\"RyboK\"><span data-lake-id=\"u106c8152\" id=\"u106c8152\">文件编码格式</span></h5><p data-lake-id=\"udbc8ab2a\" id=\"udbc8ab2a\"><span data-lake-id=\"u29a2ebd5\" id=\"u29a2ebd5\">不同类型的文件，编码形式会不一样，为了能够精准地读取文件，浏览器需要知道文件的编码类型</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22plain%22%2C%22code%22%3A%22%2F%2F%20%E8%AF%B7%E6%B1%82%E5%A4%B4%5Cnaccept%3Atext%2Fplain%3B%20charset%3Dutf-8%5Cn%2F%2F%20%E5%93%8D%E5%BA%94%E5%A4%B4%5Cncontent-type%3A%20application%2Fjson%3B%20charset%3Dutf-8%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22KTxUd%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h5 data-lake-id=\"j3syU\" id=\"j3syU\"><span data-lake-id=\"u68d54073\" id=\"u68d54073\">缓存</span></h5><p data-lake-id=\"u541e9a86\" id=\"u541e9a86\"><span data-lake-id=\"ud334c5a6\" id=\"ud334c5a6\">http/1.0 提供了缓存机制，用来缓存已经下载过的数据</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22plain%22%2C%22code%22%3A%22%2F%2F%20%E8%AF%B7%E6%B1%82%E5%A4%B4%20%E5%93%8D%E5%BA%94%E5%A4%B4%20%5Cncache-control%3A%20no-store%2C%20no-cache%2C%20must-revalidate%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22PEIPy%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h5 data-lake-id=\"McH4d\" id=\"McH4d\"><span data-lake-id=\"uc0209791\" id=\"uc0209791\">客户端基础信息</span></h5><p data-lake-id=\"u54330dbf\" id=\"u54330dbf\"><span data-lake-id=\"uf6e5d3de\" id=\"uf6e5d3de\">通过 ua，可以知道浏览器的版本、操作系统等信息</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22plain%22%2C%22code%22%3A%22%2F%2F%20%E8%AF%B7%E6%B1%82%E5%A4%B4%5Cnuser-agent%3A%20Mozilla%2F5.0%20(Macintosh%3B%20Intel%20Mac%20OS%20X%2010_15_7)%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22FScqp%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h3 data-lake-id=\"xIP3m\" id=\"xIP3m\"><span data-lake-id=\"u0abb2474\" id=\"u0abb2474\">http/1.1</span></h3><p data-lake-id=\"udeee5c17\" id=\"udeee5c17\" style=\"text-indent: 2em\"><span data-lake-id=\"u428134a2\" id=\"u428134a2\">http/1.1 默认使用了持久连接，多个请求可以复用同一个 tcp 连接，但是在同一个 tcp 连接里面，数据请求的通信次序是固定的。服务器只有处理完一个请求的响应后，才会进行下一个请求的处理，如果前面请求的响应特别慢的话，就会造成许多请求排队等待的情况，这种情况被称为</span><strong><span data-lake-id=\"ua403ce2c\" id=\"ua403ce2c\">队头阻塞</span></strong><span data-lake-id=\"u25de6b3f\" id=\"u25de6b3f\">。队头阻塞会导致持久连接在达到最大数量时，剩余的资源需要等待其他资源请求完成后才能发起请求</span></p><p data-lake-id=\"u87c6c9fb\" id=\"u87c6c9fb\"><span data-lake-id=\"uef5a7237\" id=\"uef5a7237\">​</span><br></p><p data-lake-id=\"u59dd1c87\" id=\"u59dd1c87\" style=\"text-indent: 2em\"><span data-lake-id=\"u6a797082\" id=\"u6a797082\">为了避免这个问题，一个是减少请求数，另一个是同时打开多个持久连接。这就是我们对网站优化时，使用雪碧图、合并脚本的原因。</span></p><h4 data-lake-id=\"cflLg\" id=\"cflLg\"><span data-lake-id=\"udd285cd0\" id=\"udd285cd0\">http/1.1 与 http/1.0 的区别</span></h4><p data-lake-id=\"u94c2c819\" id=\"u94c2c819\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2022%2Fpng%2F732231%2F1647496796030-30d933d6-7fe3-4319-94de-e7a1a13f4a43.png%22%2C%22taskId%22%3A%22uad708bd0-4d21-44f5-a043-24a100931e1%22%2C%22clientId%22%3A%22uaa145f8b-00d1-4%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A1304%2C%22height%22%3A828%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A283135%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A1304%2C%22originHeight%22%3A828%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%E7%AB%8BTCP%E8%BF%9E%E6%8E%A5%20HTTP%E8%AF%B7%E6%B1%82%20%E7%AB%8BTCP%E8%BF%9E%E6%8E%A5%20HTTP%E5%93%8D%E5%BA%94%20HTTP%E8%AF%B7%E6%B1%821%20%E6%96%AD%E5%BC%80TCP%E8%BF%9E%E6%8E%A5%20HTTP%E5%93%8D%E5%BA%941%20%E5%BB%BA%E7%AB%8BTCP%E8%BF%9E%E6%8E%A5%20HTTP%E8%AF%B7%E6%B1%822%20%E6%9C%8D%E5%8A%A1%E5%99%A8%20%E6%B5%8F%E8%A7%88%E5%99%A8%20%E6%9C%8D%E5%8A%A1%E5%99%A8%20%E6%B5%8F%E8%A7%88%E5%99%A8%20HTTP%E8%AF%B7%E6%B1%82%20HTTP%E5%93%8D%E5%BA%942%20HTTP%E5%93%8D%E5%BA%94%20HTTP%E8%AF%B7%E6%B1%823%20%E6%96%AD%E5%BC%80TCP%E8%BF%9E*%20HTTP%E5%93%8D%E5%BA%943%20%E6%96%AD%E5%BC%80TCP%E8%BF%9E%E6%8E%A5%20%E7%AB%8BTCP%E8%BF%9E%E6%8E%A5%20HTTP%E8%AF%B7%E6%B1%82%20HTTP%E5%93%8D%E5%BA%94%20%E6%96%AD%E5%BC%80TCP%E8%BF%9E%E6%8E%A5%20HTTP%2F1.0%20HTTP%2F1.1%20%E7%A8%80%E5%9C%9F%E6%8E%98%E9%87%91%E6%8A%80%E6%9C%AF%E7%A4%BE%E5%8C%BA%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A292.21152%2C%22y%22%3A94.90778%2C%22width%22%3A98.97600999999997%2C%22height%22%3A21.880669999999995%2C%22text%22%3A%22%E7%AB%8BTCP%E8%BF%9E%E6%8E%A5%22%7D%2C%7B%22x%22%3A281.26953%2C%22y%22%3A144.85057%2C%22width%22%3A95.36704000000003%2C%22height%22%3A19.30843999999999%2C%22text%22%3A%22HTTP%E8%AF%B7%E6%B1%82%22%7D%2C%7B%22x%22%3A979.816%2C%22y%22%3A157.7417%2C%22width%22%3A90.2817%2C%22height%22%3A18.272660000000002%2C%22text%22%3A%22%E7%AB%8BTCP%E8%BF%9E%E6%8E%A5%22%7D%2C%7B%22x%22%3A280.57996%2C%22y%22%3A194.6347%2C%22width%22%3A97.1694%2C%22height%22%3A18.358829999999983%2C%22text%22%3A%22HTTP%E5%93%8D%E5%BA%94%22%7D%2C%7B%22x%22%3A951.8799%2C%22y%22%3A206.21025%2C%22width%22%3A110.51490000000001%2C%22height%22%3A19.90521000000001%2C%22text%22%3A%22HTTP%E8%AF%B7%E6%B1%821%22%7D%2C%7B%22x%22%3A269.57004%2C%22y%22%3A244.61456%2C%22width%22%3A121.42309%2C%22height%22%3A19.888709999999975%2C%22text%22%3A%22%E6%96%AD%E5%BC%80TCP%E8%BF%9E%E6%8E%A5%22%7D%2C%7B%22x%22%3A950.1881%2C%22y%22%3A256.95135%2C%22width%22%3A113.37720000000002%2C%22height%22%3A20.66825%2C%22text%22%3A%22HTTP%E5%93%8D%E5%BA%941%22%7D%2C%7B%22x%22%3A278.76593%2C%22y%22%3A303.93692%2C%22width%22%3A112.19836999999995%2C%22height%22%3A18.358580000000018%2C%22text%22%3A%22%E5%BB%BA%E7%AB%8BTCP%E8%BF%9E%E6%8E%A5%22%7D%2C%7B%22x%22%3A950.5624%2C%22y%22%3A307.7646%2C%22width%22%3A112.9822999999999%2C%22height%22%3A20.333500000000015%2C%22text%22%3A%22HTTP%E8%AF%B7%E6%B1%822%22%7D%2C%7B%22x%22%3A1176.7325%2C%22y%22%3A316.43164%2C%22width%22%3A95.7808%2C%22height%22%3A30.882290000000012%2C%22text%22%3A%22%E6%9C%8D%E5%8A%A1%E5%99%A8%22%7D%2C%7B%22x%22%3A742.0551%2C%22y%22%3A316.6589%2C%22width%22%3A97.68025%2C%22height%22%3A32.420259999999985%2C%22text%22%3A%22%E6%B5%8F%E8%A7%88%E5%99%A8%22%7D%2C%7B%22x%22%3A530.76514%2C%22y%22%3A317.38297%2C%22width%22%3A94.25439000000006%2C%22height%22%3A29.470360000000028%2C%22text%22%3A%22%E6%9C%8D%E5%8A%A1%E5%99%A8%22%7D%2C%7B%22x%22%3A18.380901%2C%22y%22%3A325.97177%2C%22width%22%3A95.53815900000001%2C%22height%22%3A31.86310000000003%2C%22text%22%3A%22%E6%B5%8F%E8%A7%88%E5%99%A8%22%7D%2C%7B%22x%22%3A281.39798%2C%22y%22%3A352.84015%2C%22width%22%3A94.89218%2C%22height%22%3A18.933449999999993%2C%22text%22%3A%22HTTP%E8%AF%B7%E6%B1%82%22%7D%2C%7B%22x%22%3A950.01984%2C%22y%22%3A357.92407%2C%22width%22%3A114.19376%2C%22height%22%3A20.43601000000001%2C%22text%22%3A%22HTTP%E5%93%8D%E5%BA%942%22%7D%2C%7B%22x%22%3A281.07172%2C%22y%22%3A401.8086%2C%22width%22%3A95.06261999999998%2C%22height%22%3A20.006280000000004%2C%22text%22%3A%22HTTP%E5%93%8D%E5%BA%94%22%7D%2C%7B%22x%22%3A950.0745%2C%22y%22%3A408.56854%2C%22width%22%3A112.66460000000006%2C%22height%22%3A20.00562000000002%2C%22text%22%3A%22HTTP%E8%AF%B7%E6%B1%823%22%7D%2C%7B%22x%22%3A270.24466%2C%22y%22%3A452.2915%2C%22width%22%3A120.77330999999998%2C%22height%22%3A19.763680000000022%2C%22text%22%3A%22%E6%96%AD%E5%BC%80TCP%E8%BF%9E*%22%7D%2C%7B%22x%22%3A950.2142%2C%22y%22%3A459.5658%2C%22width%22%3A113.46770000000004%2C%22height%22%3A18.20274999999998%2C%22text%22%3A%22HTTP%E5%93%8D%E5%BA%943%22%7D%2C%7B%22x%22%3A946.785%2C%22y%22%3A510.8841%2C%22width%22%3A122.9620000000001%2C%22height%22%3A18.539099999999962%2C%22text%22%3A%22%E6%96%AD%E5%BC%80TCP%E8%BF%9E%E6%8E%A5%22%7D%2C%7B%22x%22%3A292.13602%2C%22y%22%3A511.56503%2C%22width%22%3A98.20398%2C%22height%22%3A18.272170000000074%2C%22text%22%3A%22%E7%AB%8BTCP%E8%BF%9E%E6%8E%A5%22%7D%2C%7B%22x%22%3A280.884%2C%22y%22%3A560.30396%2C%22width%22%3A94.66515999999996%2C%22height%22%3A19.17199000000005%2C%22text%22%3A%22HTTP%E8%AF%B7%E6%B1%82%22%7D%2C%7B%22x%22%3A281.21112%2C%22y%22%3A609.2125%2C%22width%22%3A94.12871999999999%2C%22height%22%3A17.476040000000012%2C%22text%22%3A%22HTTP%E5%93%8D%E5%BA%94%22%7D%2C%7B%22x%22%3A270.3748%2C%22y%22%3A658.1048%2C%22width%22%3A119.75220000000002%2C%22height%22%3A20.24890000000005%2C%22text%22%3A%22%E6%96%AD%E5%BC%80TCP%E8%BF%9E%E6%8E%A5%22%7D%2C%7B%22x%22%3A277.65863%2C%22y%22%3A784.40704%2C%22width%22%3A99.46346999999997%2C%22height%22%3A22.44085999999993%2C%22text%22%3A%22HTTP%2F1.0%22%7D%2C%7B%22x%22%3A957.49554%2C%22y%22%3A784.6702%2C%22width%22%3A97.24025999999992%2C%22height%22%3A22.101499999999987%2C%22text%22%3A%22HTTP%2F1.1%22%7D%2C%7B%22x%22%3A1132.0374%2C%22y%22%3A783.9166%2C%22width%22%3A151.58270000000016%2C%22height%22%3A21.651939999999968%2C%22text%22%3A%22%E7%A8%80%E5%9C%9F%E6%8E%98%E9%87%91%E6%8A%80%E6%9C%AF%E7%A4%BE%E5%8C%BA%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22id%22%3A%22u2b1e61c2%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><p data-lake-id=\"u5ab7a2b7\" id=\"u5ab7a2b7\"><span data-lake-id=\"u8a490e4a\" id=\"u8a490e4a\">持久连接通过请求头控制，不做特殊处理时候，默认会保持持久连接。</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22plain%22%2C%22code%22%3A%22%2F%2F%20%E8%AF%B7%E6%B1%82%E5%A4%B4%5Cnconnection%3A%20keep-alive%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22eahS7%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u66fc92a1\" id=\"u66fc92a1\"><span data-lake-id=\"u86bba47f\" id=\"u86bba47f\">可以通过以下方式关闭持久连接</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22plain%22%2C%22code%22%3A%22%2F%2F%20%E8%AF%B7%E6%B1%82%E5%A4%B4%5Cnconnection%3A%20close%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22yFX7g%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><blockquote data-lake-id=\"ud501edbe\" id=\"ud501edbe\" class=\"lake-alert lake-alert-info\"><ol list=\"uace7ce6e\"><li fid=\"u56cbd228\" data-lake-id=\"u0aea94d0\" id=\"u0aea94d0\"><span data-lake-id=\"u8f8ff80f\" id=\"u8f8ff80f\">连接方面的区别，http1.1 默认使用持久连接，而 http1.0 默认使用非持久连接。http1.1 通过使用持久连接来使多个 http 请求复用同一个 TCP 连接，以此来避免使用非持久连接时每次需要建立连接的时延。</span></li><li fid=\"u56cbd228\" data-lake-id=\"u48571386\" id=\"u48571386\"><span data-lake-id=\"ucae7e23f\" id=\"ucae7e23f\">资源请求方面的区别，在 http1.0 中，存在一些浪费带宽的现象，例如客户端只是需要某个对象的一部分，而服务器却将整个对象送过来了，并且不支持断点续传功能，http1.1 则在请求头引入了 range 头域，它允许只请求资源的某个部分，即返回码是 206（Partial Content），这样就方便了开发者自由的选择以便于充分利用带宽和连接。</span></li><li fid=\"u56cbd228\" data-lake-id=\"ufcd26764\" id=\"ufcd26764\"><span data-lake-id=\"u521093bc\" id=\"u521093bc\">缓存方面的区别，在 http1.0 中主要使用 header 里的 If-Modified-Since,Expires 来做为缓存判断的标准，http1.1 则引入了更多的缓存控制策略例如 Etag、If-Unmodified-Since、If-Match、If-None-Match 等更多可供选择的缓存头来控制缓存策略。</span></li><li fid=\"u56cbd228\" data-lake-id=\"u29bcce70\" id=\"u29bcce70\"><span data-lake-id=\"u7bd55c9f\" id=\"u7bd55c9f\">http1.1 中还新增了 host 字段，用来指定服务器的域名。http1.0 中认为每台服务器都绑定一个唯一的 IP 地址，因此，请求消息中的 URL 并没有传递主机名（hostname）。但随着虚拟主机技术的发展，在一台物理服务器上可以存在多个虚拟主机，并且它们共享一个 IP 地址。因此有了 host 字段，就可以将请求发往同一台服务器上的不同网站。</span></li><li fid=\"u56cbd228\" data-lake-id=\"ua628cfd0\" id=\"ua628cfd0\"><span data-lake-id=\"ucbce7e16\" id=\"ucbce7e16\">http1.1 相对于 http1.0 还新增了很多方法，如 PUT、HEAD、OPTIONS 等。</span></li></ol></blockquote><h3 data-lake-id=\"tToff\" id=\"tToff\"><span data-lake-id=\"u0417ad5b\" id=\"u0417ad5b\">http/2</span></h3><p data-lake-id=\"u6ad22d75\" id=\"u6ad22d75\" style=\"text-indent: 2em\"><span data-lake-id=\"uf638e839\" id=\"uf638e839\">2009 年，谷歌公开了自行研发的 SPDY 协议，主要解决 http/1.1 效率不高的问题。这个协议在 Chrome 浏览器上证明可行以后，就被当作 http/2 的基础，主要特性都在 http/2 之中得到继承。在 2015 年，http/2 发布。以下是 http/2 的新特性：</span></p><h4 data-lake-id=\"ewFuZ\" id=\"ewFuZ\"><span data-lake-id=\"u972fa1b6\" id=\"u972fa1b6\">二进制协议(二进制传输)</span></h4><ul list=\"u8f6e2ee4\"><li fid=\"ufa8f84c2\" data-lake-id=\"ufb8f67c4\" id=\"ufb8f67c4\"><span data-lake-id=\"ubb1735f2\" id=\"ubb1735f2\">在 http/1.1 中，报文的头信息必须是文本(ASCII编码)；在 http/2 中，数据体可以是文本，也可以分割所有传输数据，并采用二进制进行编码。</span></li><li fid=\"ufa8f84c2\" data-lake-id=\"udeee4424\" id=\"udeee4424\"><span data-lake-id=\"u4f889372\" id=\"u4f889372\">http/2 则是一个彻底的二进制协议，头信息和数据体都是二进制，并且统称为</span><strong><span data-lake-id=\"u0793b1b0\" id=\"u0793b1b0\">帧</span></strong><span data-lake-id=\"ue8fc6919\" id=\"ue8fc6919\">，可以分为头信息帧和数据帧。帧的概念是它实现多路复用的基础</span></li></ul><h4 data-lake-id=\"Ya5Iy\" id=\"Ya5Iy\"><span data-lake-id=\"u7cf2bb64\" id=\"u7cf2bb64\">数据流</span></h4><ul list=\"ucdc8d2df\"><li fid=\"u02bc679d\" data-lake-id=\"u13569953\" id=\"u13569953\"><span data-lake-id=\"u391362ad\" id=\"u391362ad\">http/2 使用了数据流的概念，因为 http/2 的数据包是不按顺序发送的，同一个连接里面连续的数据包，可能属于不同的请求。因此，必须要对数据包做标记，指出它属于哪个请求。</span></li><li fid=\"u02bc679d\" data-lake-id=\"ua1625898\" id=\"ua1625898\"><span data-lake-id=\"u72a0df6d\" id=\"u72a0df6d\">http/2 将每个请求或回应的所有数据包，称为一个数据流。每个数据流都有一个独一无二的编号。数据包发送的时，都必须标记数据流 id，用来区分它属于哪个数据流</span></li></ul><h4 data-lake-id=\"dsJcb\" id=\"dsJcb\"><span data-lake-id=\"u55cad143\" id=\"u55cad143\">header 头信息压缩</span></h4><ul list=\"udfcf946b\"><li fid=\"ua19efed3\" data-lake-id=\"uc720a8b5\" id=\"uc720a8b5\"><span data-lake-id=\"u746aec4f\" id=\"u746aec4f\">http/2 实现了头信息压缩，由于 http/1.1 协议不带有状态，每次请求都必须附带上所有信息。所以，请求的很多字段都是重复的，比如 Cookie 和 User Agent，一模一样的内容，每次请求都必须携带，这样会浪费很多带宽，也影响了速度</span></li><li fid=\"ua19efed3\" data-lake-id=\"u33fe18c3\" id=\"u33fe18c3\"><span data-lake-id=\"uaf16f4f8\" id=\"uaf16f4f8\">http/2 对这一点做了优化，引入了头部压缩机制</span></li></ul><ul list=\"udfcf946b\" data-lake-indent=\"1\"><li fid=\"ua19efed3\" data-lake-id=\"u06617969\" id=\"u06617969\"><span data-lake-id=\"uf14331fb\" id=\"uf14331fb\">采用 HPACK 算法，在客户端和服务端两端建立</span><strong><span data-lake-id=\"u38528c74\" id=\"u38528c74\" style=\"color: #13C2C2\">字典</span></strong><span data-lake-id=\"uac377dd1\" id=\"uac377dd1\">，用索引号表示重复的字符串</span></li></ul><ul list=\"uf438ca3b\" data-lake-indent=\"1\"><li fid=\"u2872937d\" data-lake-id=\"u6b72bb26\" id=\"u6b72bb26\"><span data-lake-id=\"uefa14b88\" id=\"uefa14b88\">采用哈夫曼编码来压缩整数和字符串，可以达到 50% ～ 90% 的高压缩率</span></li></ul><ul list=\"uf438ca3b\"><li fid=\"u2872937d\" data-lake-id=\"ua15911a2\" id=\"ua15911a2\"><span data-lake-id=\"u185baf9e\" id=\"u185baf9e\">一方面，头信息使用 gzip 或 compress 压缩后再发送；另一方面，客户端和服务器同时维护一张头信息表，所有字段都会存入这个表，生成一个索引号，以后就不发送同样字段了，只发送索引号，这样就能提高速度了</span></li></ul><h4 data-lake-id=\"Wn2hE\" id=\"Wn2hE\"><span data-lake-id=\"udef5771f\" id=\"udef5771f\">多路复用</span></h4><ul list=\"ua89537e6\"><li fid=\"u12650961\" data-lake-id=\"u42bdc71d\" id=\"u42bdc71d\"><span data-lake-id=\"u848d4ef2\" id=\"u848d4ef2\">采用二进制分帧传输，用帧来标识请求，因为一个 tcp 连接可在多条</span><strong><span data-lake-id=\"u218ab00e\" id=\"u218ab00e\" style=\"color: #13C2C2\">流</span></strong><span data-lake-id=\"uf78a72ba\" id=\"uf78a72ba\">中，即可以发送多个请求。另外，不存在先后关系，也就不存在等待排队的问题，所以可避免 http/1 中队头阻塞的问题</span></li><li fid=\"u12650961\" data-lake-id=\"ub00b1f70\" id=\"ub00b1f70\"><span data-lake-id=\"u8b147f29\" id=\"u8b147f29\">通信双方都可以给对方发送二进制帧，这种二进制帧的双向传输序列，又叫做</span><strong><span data-lake-id=\"uccb9ee1a\" id=\"uccb9ee1a\" style=\"color: #13C2C2\">流</span></strong><span data-lake-id=\"u3c87d9e7\" id=\"u3c87d9e7\">。http/2 用</span><strong><span data-lake-id=\"u693b9fcb\" id=\"u693b9fcb\" style=\"color: #13C2C2\">流</span></strong><span data-lake-id=\"u5992e444\" id=\"u5992e444\">来在一个 tcp 连接上进行数据帧的通信</span></li></ul><h4 data-lake-id=\"jnfRi\" id=\"jnfRi\"><span data-lake-id=\"u5dcb7b58\" id=\"u5dcb7b58\">服务端推送</span></h4><p data-lake-id=\"u3b8e146c\" id=\"u3b8e146c\" style=\"text-indent: 2em\"><span data-lake-id=\"uf065ffdf\" id=\"uf065ffdf\">http/2 允许服务器未经请求，主动向客户端发送资源，这叫做服务端推送。使用服务端推送，提前给客户端推送必要的资源，这样就可以相对减少一些延迟时间。这里需要注意的是 http2 下服务器主动推送的是静态资源，和 webSocket 以及使用 SSE 等方式向客户端发送即时数据推送是不同的</span></p><ul list=\"uaf1702af\"><li fid=\"uc102a06b\" data-lake-id=\"u53cad573\" id=\"u53cad573\"><span data-lake-id=\"u244929b0\" id=\"u244929b0\">服务器不再是完全被动地响应请求，也可以新建</span><strong><span data-lake-id=\"u2b8ac121\" id=\"u2b8ac121\" style=\"color: #13C2C2\">流</span></strong><span data-lake-id=\"u27eb3bb2\" id=\"u27eb3bb2\">主动向客户端发送消息</span></li></ul><h4 data-lake-id=\"dcwcs\" id=\"dcwcs\"><span data-lake-id=\"u1fe2c4d7\" id=\"u1fe2c4d7\">大幅度提高网页性能</span></h4><ul list=\"uf4229195\"><li fid=\"u5e3e036f\" data-lake-id=\"u4dd8bd62\" id=\"u4dd8bd62\"><span data-lake-id=\"ue0d09a07\" id=\"ue0d09a07\">http/1 最大的请求数为 6，会造成对头阻塞，需等待其他资源请求完成后才能发起请求</span></li></ul><blockquote data-lake-id=\"u6323deca\" id=\"u6323deca\" class=\"lake-alert lake-alert-danger\"><p data-lake-id=\"u3cfea0bb\" id=\"u3cfea0bb\"><strong><span data-lake-id=\"u48e18931\" id=\"u48e18931\">http/2 协议缺点：</span></strong></p><p data-lake-id=\"uac99c206\" id=\"uac99c206\"><span data-lake-id=\"u8ccfc439\" id=\"u8ccfc439\">因为 http/2 使用了多路复用，一般来说，同一域名下只需要使用一个 tcp 连接。由于多个数据流使用同一个 tcp 连接，遵守同一个流量状态控制和拥塞控制。只要一个数据流遭遇到阻塞，剩下的数据流就没办法出去，这样就导致了后面的所有数据都会被阻塞。http/2 出现的这个问题是由于其使用 tcp 协议的问题，与它本身的实现其实没有多大的关系</span></p></blockquote><h3 data-lake-id=\"v6GvI\" id=\"v6GvI\"><span data-lake-id=\"u9a3bcd36\" id=\"u9a3bcd36\">http/3</span></h3><p data-lake-id=\"ud78df30b\" id=\"ud78df30b\" style=\"text-indent: 2em\"><span data-lake-id=\"u738cc220\" id=\"u738cc220\">http/3 基于 udp 实现了类似于 tcp 的多路数据流、传输可靠性等功能，这套功能又称为 quic 协议。quic 协议在 udp 协议上实现了多路复用、有序支付、重传等功能</span></p><ul list=\"u1e2c5f7d\"><li fid=\"u51f96853\" data-lake-id=\"u1edc2754\" id=\"u1edc2754\"><span data-lake-id=\"u58e42fcb\" id=\"u58e42fcb\">实现了类似于 tcp 的流量控制、传输可靠性的功能</span></li><li fid=\"u51f96853\" data-lake-id=\"ua9c90237\" id=\"ua9c90237\"><span data-lake-id=\"u3c257253\" id=\"u3c257253\">集成了 tls 加密功能</span></li><li fid=\"u51f96853\" data-lake-id=\"u2e45a427\" id=\"u2e45a427\"><span data-lake-id=\"u982e6c80\" id=\"u982e6c80\">解决了 http/2 下多路复用时丢包产生的问题，即解决了 tcp 协议的一些问题</span></li></ul><blockquote data-lake-id=\"u549be221\" id=\"u549be221\" class=\"lake-alert lake-alert-warning\"><p data-lake-id=\"u43ce4c22\" id=\"u43ce4c22\"><span data-lake-id=\"ua5c6ec6a\" id=\"ua5c6ec6a\">和 tcp 不同，quic 协议实现了在同一物理连接上可以有多个独立的逻辑数据流。从而实现了数据流的单独传输，因此就解决了 tcp 中队头阻塞的问题</span></p></blockquote><h2 data-lake-id=\"Fz4wD\" id=\"Fz4wD\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2022%2Fpng%2F732231%2F1647496985371-a318bd43-f1c4-4a30-84b7-f999ebc186ca.png%22%2C%22taskId%22%3A%22udd6251e8-35bb-4d03-b81b-4bf7b9c63d1%22%2C%22clientId%22%3A%22uaa145f8b-00d1-4%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A880%2C%22height%22%3A776%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A224387%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A880%2C%22originHeight%22%3A776%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22HTTP%2F3%20HTTP%2F2%20QUIC%20TLS%20%E5%A4%9A%E8%B7%AF%E6%95%B0%E6%8D%AE%E6%B5%81%20%E6%9C%89%E5%BA%8F%E4%BA%A4%E4%BB%98%20TLS%20TCP%20%E5%8F%AF%E9%9D%A0%E6%80%A7%20%E5%BF%AB%E9%80%9F%E6%8F%A1%E6%89%8B%20UDP%20IP%20HTTP%2F2%E5%92%8CHTTP%2F3%20%E5%8D%8F%E8%AE%AE%E6%A0%88%20%E7%A8%80%E5%9C%9F%E6%8D%86%E9%87%91%E6%8A%80%E6%9C%AF%E7%A4%BE%E5%8C%BA%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A569.3949%2C%22y%22%3A53.574528%2C%22width%22%3A135.45807000000002%2C%22height%22%3A35.303172%2C%22text%22%3A%22HTTP%2F3%22%7D%2C%7B%22x%22%3A166.92104%2C%22y%22%3A53.802685%2C%22width%22%3A135.24421%2C%22height%22%3A35.96918500000001%2C%22text%22%3A%22HTTP%2F2%22%7D%2C%7B%22x%22%3A590.2162%2C%22y%22%3A135.37218%2C%22width%22%3A98.94950000000006%2C%22height%22%3A35.07811000000001%2C%22text%22%3A%22QUIC%22%7D%2C%7B%22x%22%3A201.9877%2C%22y%22%3A144.57098%2C%22width%22%3A68.92212000000004%2C%22height%22%3A32.56552000000002%2C%22text%22%3A%22TLS%22%7D%2C%7B%22x%22%3A558.22156%2C%22y%22%3A221.1614%2C%22width%22%3A153.61969%2C%22height%22%3A30.86760000000001%2C%22text%22%3A%22%E5%A4%9A%E8%B7%AF%E6%95%B0%E6%8D%AE%E6%B5%81%22%7D%2C%7B%22x%22%3A659.27185%2C%22y%22%3A305.49124%2C%22width%22%3A123.21978999999999%2C%22height%22%3A30.192409999999995%2C%22text%22%3A%22%E6%9C%89%E5%BA%8F%E4%BA%A4%E4%BB%98%22%7D%2C%7B%22x%22%3A514.98425%2C%22y%22%3A308.1532%2C%22width%22%3A56.96082000000001%2C%22height%22%3A24.640319999999974%2C%22text%22%3A%22TLS%22%7D%2C%7B%22x%22%3A199.8423%2C%22y%22%3A359.07532%2C%22width%22%3A72.20725999999999%2C%22height%22%3A32.59405000000004%2C%22text%22%3A%22TCP%22%7D%2C%7B%22x%22%3A674.76984%2C%22y%22%3A382.62994%2C%22width%22%3A91.75705999999991%2C%22height%22%3A30.439660000000003%2C%22text%22%3A%22%E5%8F%AF%E9%9D%A0%E6%80%A7%22%7D%2C%7B%22x%22%3A482.3548%2C%22y%22%3A384.16632%2C%22width%22%3A118.80080000000004%2C%22height%22%3A28.92243000000002%2C%22text%22%3A%22%E5%BF%AB%E9%80%9F%E6%8F%A1%E6%89%8B%22%7D%2C%7B%22x%22%3A601.3306%2C%22y%22%3A488.3934%2C%22width%22%3A78.25909999999999%2C%22height%22%3A31.387099999999975%2C%22text%22%3A%22UDP%22%7D%2C%7B%22x%22%3A415.40784%2C%22y%22%3A576.12823%2C%22width%22%3A43.93563999999998%2C%22height%22%3A33.400699999999915%2C%22text%22%3A%22IP%22%7D%2C%7B%22x%22%3A248.38817%2C%22y%22%3A720.52576%2C%22width%22%3A371.51192999999995%2C%22height%22%3A28.11904000000004%2C%22text%22%3A%22HTTP%2F2%E5%92%8CHTTP%2F3%20%E5%8D%8F%E8%AE%AE%E6%A0%88%22%7D%2C%7B%22x%22%3A712.96313%2C%22y%22%3A733.5079%2C%22width%22%3A145.90777000000003%2C%22height%22%3A20.31797000000006%2C%22text%22%3A%22%E7%A8%80%E5%9C%9F%E6%8D%86%E9%87%91%E6%8A%80%E6%9C%AF%E7%A4%BE%E5%8C%BA%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22id%22%3A%22u33bb5ddb%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></h2><h2 data-lake-id=\"fhgyU\" id=\"fhgyU\"><span data-lake-id=\"u68a03193\" id=\"u68a03193\">https</span></h2><p data-lake-id=\"u06f4812d\" id=\"u06f4812d\" style=\"text-indent: 2em\"><span data-lake-id=\"u4fe911cc\" id=\"u4fe911cc\">http 协议是用于 web 浏览器和网站服务器之间传递信息，http 协议以明文的方式来发送内容，不提供任何方式的数据加密。所以，http 协议不适合传输敏感信息。https 就是解决这一缺陷的，用来保证数据传输安全。</span></p><p data-lake-id=\"u515007a6\" id=\"u515007a6\"><br></p><blockquote data-lake-id=\"u24cf3cb6\" id=\"u24cf3cb6\" class=\"lake-alert lake-alert-info\"><p data-lake-id=\"ua3da0711\" id=\"ua3da0711\"><card type=\"inline\" name=\"label\" value=\"data:%7B%22label%22%3A%22%E8%A2%AB%E7%9B%91%E5%90%AC%22%2C%22colorIndex%22%3A4%2C%22id%22%3A%22IcjO8%22%7D\"></card><span data-lake-id=\"u885d9b6e\" id=\"u885d9b6e\"> https 是基于 http 协议的，它在 http 的基础上加入了 ssl/tls 协议。ssl/tls 协议依靠证书来验证服务器的身份，并为浏览器和服务器之间的通信进行加密，这保证了传输过程中的安全性，减少了恶意劫持的可能。</span></p><p data-lake-id=\"u1cdbb90a\" id=\"u1cdbb90a\"><card type=\"inline\" name=\"label\" value=\"data:%7B%22label%22%3A%22%E8%A2%AB%E7%AF%A1%E6%94%B9%22%2C%22colorIndex%22%3A4%2C%22id%22%3A%22Mynyr%22%7D\"></card><span data-lake-id=\"u8c41146b\" id=\"u8c41146b\">并且它提供了一种校验机制，信息一旦被篡改，通信双方都会立刻发现。</span></p><p data-lake-id=\"u3bc3e639\" id=\"u3bc3e639\"><card type=\"inline\" name=\"label\" value=\"data:%7B%22label%22%3A%22%E8%A2%AB%E4%BC%AA%E8%A3%85%22%2C%22colorIndex%22%3A4%2C%22id%22%3A%22cjN89%22%7D\"></card><span data-lake-id=\"udca1a38d\" id=\"udca1a38d\">它还配备了身份证书，防止身份被冒充的情况出现。</span></p></blockquote><p data-lake-id=\"ued1f6ecd\" id=\"ued1f6ecd\"><span data-lake-id=\"u54c75730\" id=\"u54c75730\">https 很好的解决了 http 的多个缺点(被监听、被篡改、被伪装)。</span></p><ul list=\"u7dc408f6\"><li fid=\"u73def1b5\" data-lake-id=\"uc05d79f0\" id=\"uc05d79f0\"><span data-lake-id=\"ud56a7799\" id=\"ud56a7799\">https 协议 = http 协议 + ssl/tls 协议</span></li><li fid=\"u73def1b5\" data-lake-id=\"ub36bb37f\" id=\"ub36bb37f\"><span data-lake-id=\"u1b04f948\" id=\"u1b04f948\">加密方式采取了对称加密和非对称加密</span></li><li fid=\"u73def1b5\" data-lake-id=\"u3547935c\" id=\"u3547935c\"><span data-lake-id=\"ua3052b27\" id=\"ua3052b27\">整体而言，对数据进行对称加密，对称加密所需要使用的密钥通过非对称加密进行传输</span></li></ul><blockquote data-lake-id=\"u25dc0142\" id=\"u25dc0142\" class=\"lake-alert lake-alert-info\"><p data-lake-id=\"u455ae0d8\" id=\"u455ae0d8\" style=\"text-indent: 2em\"><span data-lake-id=\"u22bc8db7\" id=\"u22bc8db7\">https 采用混合加密机制，如果密钥能够保证安全交换，那么全程有可能仅使用对称密钥加密来进行通信，如果不能保证密钥安全交换，可在密钥交换环节使用非对称加密方式，之后使用对称加密方式。这样做的目的是因为对称密钥加密相较非对称秘钥加密处理速度更快。</span></p><p data-lake-id=\"u4d6f0125\" id=\"u4d6f0125\" style=\"text-indent: 2em\"><span data-lake-id=\"uacde2ae9\" id=\"uacde2ae9\">但是加密了就安全了吗，就不会被窃听了吗？实际上，即使通信被加密，通信内容还是可以被技术手段窃听到，但是通信加密后就不容易看懂具体的报文信息了，相当于达到了加密的目的。</span></p><p data-lake-id=\"u427d1624\" id=\"u427d1624\"><span data-lake-id=\"u903b1e77\" id=\"u903b1e77\">https 加密传输过程中需要传输公开密钥，那么公开密钥又是如何保证其正确性呢，当然是数字认证机构颁发的公开密钥证书。</span></p></blockquote><p data-lake-id=\"u833f192f\" id=\"u833f192f\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2022%2Fpng%2F732231%2F1647345138666-c3a5f9f2-df02-44a0-8226-e85c74b5d228.png%22%2C%22taskId%22%3A%22u1c935397-e0ce-4d2b-b3fd-483e55eab64%22%2C%22clientId%22%3A%22u920a8100-c084-4%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A643%2C%22height%22%3A430%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A147351%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A643%2C%22originHeight%22%3A430%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22CLIENT%20SERVER%3F%20%E5%8F%91%E9%80%81%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%94%AF%E6%8C%81%E7%9A%84%E5%8A%A0%E5%AF%86%E5%8D%8F%E8%AE%AE%E5%8F%8A%E7%89%88%E6%9C%AC%2CSSL%2CTLS%20%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF%E4%BB%8E%E4%B8%AD%E7%AD%9B%E9%80%89%E9%80%89%E6%8B%A9%E5%90%88%E9%80%82%E7%9A%84%E5%8A%A0%E5%AF%86%E5%8D%8F%E8%AE%AE%20%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF%E8%BF%94%E5%9B%9E%E8%AF%81%E4%B9%A6%2C%E8%AF%81%E4%B9%A6%E4%B8%AD%E6%9C%89%E5%85%AC%E9%92%A5%20%E5%AE%A2%E6%88%B7%E7%AB%AF%E4%BD%BF%E7%94%A8%E6%A0%B9%E8%AF%81%E4%B9%A6%E9%AA%8C%E8%AF%81%E4%B9%A6%E5%90%88%E6%B3%95%E6%80%A7%20%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%94%9F%E6%88%90%E5%AF%B9%E7%A7%B0%E5%AF%86%E9%92%A5%2C%E9%80%9A%E8%BF%87%E8%AF%81%E4%B9%A6%E4%B8%AD%E7%9A%84%E5%85%AC%E9%92%A5%E5%8A%A0%E5%AF%86%2C%E5%8F%91%E9%80%81%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF%20%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF%E4%BD%BF%E7%94%A8%E7%A7%81%E9%92%A5%E8%A7%A3%E5%AF%86%2C%E8%8E%B7%E5%8F%96%E5%AF%B9%E7%A7%B0%E5%AF%86%E9%92%A5%2C%E4%BD%BF%E7%94%A8%E5%AF%B9%E7%A7%B0%E5%AF%86%E9%92%A5%E5%8A%A0%E5%AF%86%E6%95%B0%E6%8D%AE%20%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%A7%A3%E5%AF%86%E6%95%B0%E6%8D%AE%2CSSL%E5%BC%80%E5%A7%8B%E9%80%9A%E4%BF%A1...%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A17.1243%2C%22y%22%3A24.099031%2C%22width%22%3A59.54953599999999%2C%22height%22%3A18.394136999999997%2C%22text%22%3A%22CLIENT%22%7D%2C%7B%22x%22%3A555.77374%2C%22y%22%3A28.792358%2C%22width%22%3A58.24566000000004%2C%22height%22%3A12.022382%2C%22text%22%3A%22SERVER%3F%22%7D%2C%7B%22x%22%3A126.96075%2C%22y%22%3A92.33082%2C%22width%22%3A381.21515%2C%22height%22%3A21.891440000000003%2C%22text%22%3A%22%E5%8F%91%E9%80%81%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%94%AF%E6%8C%81%E7%9A%84%E5%8A%A0%E5%AF%86%E5%8D%8F%E8%AE%AE%E5%8F%8A%E7%89%88%E6%9C%AC%2CSSL%2CTLS%22%7D%2C%7B%22x%22%3A154.07576%2C%22y%22%3A141.8807%2C%22width%22%3A323.29948%2C%22height%22%3A20.30800000000002%2C%22text%22%3A%22%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF%E4%BB%8E%E4%B8%AD%E7%AD%9B%E9%80%89%E9%80%89%E6%8B%A9%E5%90%88%E9%80%82%E7%9A%84%E5%8A%A0%E5%AF%86%E5%8D%8F%E8%AE%AE%22%7D%2C%7B%22x%22%3A175.04054%2C%22y%22%3A190.39252%2C%22width%22%3A283.94782999999995%2C%22height%22%3A20.14506%2C%22text%22%3A%22%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF%E8%BF%94%E5%9B%9E%E8%AF%81%E4%B9%A6%2C%E8%AF%81%E4%B9%A6%E4%B8%AD%E6%9C%89%E5%85%AC%E9%92%A5%22%7D%2C%7B%22x%22%3A174.12642%2C%22y%22%3A239.8922%2C%22width%22%3A283.52548%2C%22height%22%3A20.288369999999986%2C%22text%22%3A%22%E5%AE%A2%E6%88%B7%E7%AB%AF%E4%BD%BF%E7%94%A8%E6%A0%B9%E8%AF%81%E4%B9%A6%E9%AA%8C%E8%AF%81%E4%B9%A6%E5%90%88%E6%B3%95%E6%80%A7%22%7D%2C%7B%22x%22%3A46.920715%2C%22y%22%3A286.71378%2C%22width%22%3A534.7108850000001%2C%22height%22%3A22.15237000000002%2C%22text%22%3A%22%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%94%9F%E6%88%90%E5%AF%B9%E7%A7%B0%E5%AF%86%E9%92%A5%2C%E9%80%9A%E8%BF%87%E8%AF%81%E4%B9%A6%E4%B8%AD%E7%9A%84%E5%85%AC%E9%92%A5%E5%8A%A0%E5%AF%86%2C%E5%8F%91%E9%80%81%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF%22%7D%2C%7B%22x%22%3A48.164654%2C%22y%22%3A337.4404%2C%22width%22%3A535.3750759999999%2C%22height%22%3A20.530820000000006%2C%22text%22%3A%22%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF%E4%BD%BF%E7%94%A8%E7%A7%81%E9%92%A5%E8%A7%A3%E5%AF%86%2C%E8%8E%B7%E5%8F%96%E5%AF%B9%E7%A7%B0%E5%AF%86%E9%92%A5%2C%E4%BD%BF%E7%94%A8%E5%AF%B9%E7%A7%B0%E5%AF%86%E9%92%A5%E5%8A%A0%E5%AF%86%E6%95%B0%E6%8D%AE%22%7D%2C%7B%22x%22%3A174.24763%2C%22y%22%3A386.8231%2C%22width%22%3A280.79885%2C%22height%22%3A17.969960000000015%2C%22text%22%3A%22%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%A7%A3%E5%AF%86%E6%95%B0%E6%8D%AE%2CSSL%E5%BC%80%E5%A7%8B%E9%80%9A%E4%BF%A1...%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22id%22%3A%22xylZO%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><h3 data-lake-id=\"nh9lc\" id=\"nh9lc\"><span data-lake-id=\"u329e28f6\" id=\"u329e28f6\">TLS 握手过程</span></h3><ol list=\"u41a09cef\"><li fid=\"uc3e7633a\" data-lake-id=\"u2bb04e02\" id=\"u2bb04e02\"><span data-lake-id=\"u42d9d953\" id=\"u42d9d953\">第一步：客户端向服务器发起请求，请求中包含使用的</span><strong><span data-lake-id=\"u3ee20227\" id=\"u3ee20227\">协议版本号</span></strong><span data-lake-id=\"u09c36af5\" id=\"u09c36af5\">、</span><strong><span data-lake-id=\"uaf5832cd\" id=\"uaf5832cd\">生成的一个随机数</span></strong><span data-lake-id=\"uf784beb9\" id=\"uf784beb9\">、以及</span><strong><span data-lake-id=\"ud3e96f5e\" id=\"ud3e96f5e\">客户端支持的加密方法</span></strong></li><li fid=\"uc3e7633a\" data-lake-id=\"u68ce7989\" id=\"u68ce7989\"><span data-lake-id=\"u09f5d96e\" id=\"u09f5d96e\">第二步：服务端收到请求后，确认双方使用的加密方法，并</span><strong><span data-lake-id=\"ufc1512b4\" id=\"ufc1512b4\">给出服务器的证书</span></strong><span data-lake-id=\"u8567cac6\" id=\"u8567cac6\">、以及</span><strong><span data-lake-id=\"ubdc1bd32\" id=\"ubdc1bd32\">一个服务器生成的随机数</span></strong></li><li fid=\"uc3e7633a\" data-lake-id=\"u61e55c57\" id=\"u61e55c57\"><span data-lake-id=\"ub678e1c5\" id=\"ub678e1c5\">第三步：客户端确认服务器证书有效后，生成一个新的随机数，并使用数字证书中的公钥，加密这个随机数，然后发送给服务器。并且还会提供一个前面所有内容的</span><strong><span data-lake-id=\"u614c3543\" id=\"u614c3543\">哈希值</span></strong><span data-lake-id=\"ud05d7d0e\" id=\"ud05d7d0e\">，用来供</span><strong><span data-lake-id=\"u305a16ba\" id=\"u305a16ba\">服务器检验</span></strong></li><li fid=\"uc3e7633a\" data-lake-id=\"u5a92dc96\" id=\"u5a92dc96\"><span data-lake-id=\"u5a2c00be\" id=\"u5a2c00be\">第四步：服务器使用自己的私钥，来解密客户端发送过来的随机数，并提供前面所有内容的</span><strong><span data-lake-id=\"uc98e6aa1\" id=\"uc98e6aa1\">哈希值</span></strong><span data-lake-id=\"uc2aa40b0\" id=\"uc2aa40b0\">，用来供</span><strong><span data-lake-id=\"u7daafbb4\" id=\"u7daafbb4\">客户端检验</span></strong></li><li fid=\"uc3e7633a\" data-lake-id=\"u11197671\" id=\"u11197671\"><span data-lake-id=\"uea1ddd8e\" id=\"uea1ddd8e\">第五步：客户端和服务器根据约定的加密方法，</span><strong><span data-lake-id=\"u964007b4\" id=\"u964007b4\">使用前面的三个随机数，生成对话的密钥</span></strong><span data-lake-id=\"u55234862\" id=\"u55234862\">，以后的对话过程都使用这个密钥来加密信息</span></li></ol><blockquote data-lake-id=\"u59a13bc9\" id=\"u59a13bc9\" class=\"lake-alert lake-alert-info\"><p data-lake-id=\"u8f47b2c7\" id=\"u8f47b2c7\"><strong><span data-lake-id=\"u6ed81865\" id=\"u6ed81865\">TLS 的握手过程主要用到了三个方法来保证传输的安全：</span></strong></p><ol list=\"ucf1552a1\"><li fid=\"ue9591ad4\" data-lake-id=\"uf3a67940\" id=\"uf3a67940\"><span data-lake-id=\"u12da7d5e\" id=\"u12da7d5e\">对称加密</span></li><li fid=\"ue9591ad4\" data-lake-id=\"u8127bcf2\" id=\"u8127bcf2\"><span data-lake-id=\"u7364c454\" id=\"u7364c454\">非对称加密</span></li><li fid=\"ue9591ad4\" data-lake-id=\"u6e8a08c6\" id=\"u6e8a08c6\"><span data-lake-id=\"u5a77ada9\" id=\"u5a77ada9\">数字证书</span></li></ol></blockquote><h3 data-lake-id=\"X7Mwv\" id=\"X7Mwv\"><span data-lake-id=\"ua23c0473\" id=\"ua23c0473\">TLS 的实现原理</span></h3><h4 data-lake-id=\"hNnfH\" id=\"hNnfH\"><span data-lake-id=\"u8808e7b3\" id=\"u8808e7b3\">对称加密</span></h4><p data-lake-id=\"u38c8cdae\" id=\"u38c8cdae\"><span data-lake-id=\"uad91e183\" id=\"uad91e183\">加密的密钥和解密的密钥相同</span></p><blockquote data-lake-id=\"ud7437efd\" id=\"ud7437efd\" class=\"lake-alert lake-alert-danger\"><p data-lake-id=\"u78393777\" id=\"u78393777\"><strong><span data-lake-id=\"u4e9e9c24\" id=\"u4e9e9c24\">缺陷</span></strong><span data-lake-id=\"u6dc4bec3\" id=\"u6dc4bec3\">：如何保证密钥传输的安全性，因为密钥还是会通过网络进行传输的，一旦密钥被其他人获取到，那么整个加密过程就毫无作用了。因此引出了非对称加密的方法。</span></p></blockquote><h4 data-lake-id=\"SSqF8\" id=\"SSqF8\"><span data-lake-id=\"uff9df9c5\" id=\"uff9df9c5\">非对称加密</span></h4><p data-lake-id=\"u16287d99\" id=\"u16287d99\"><span data-lake-id=\"ua935585f\" id=\"ua935585f\">将密钥分为公钥和私钥，公钥可公开，私钥保密。客户端用公钥加密的数据，服务端可以通过私钥解密</span></p><blockquote data-lake-id=\"u44984c8b\" id=\"u44984c8b\" class=\"lake-alert lake-alert-danger\"><p data-lake-id=\"ued5f40a6\" id=\"ued5f40a6\"><span data-lake-id=\"u6b34a542\" id=\"u6b34a542\">缺陷：无法确认得到的公钥一定是安全的公钥，可能存在一个中间人，截取了对方发给我们的公钥，然后将他自己的公钥发送给我们，当我们使用他的公钥加密后发送信息，就可以被他用自己的私钥解密。伪装后以同样的方法向对方发送信息，这样信息就被窃取了。所以引出了数字证书的概念</span></p></blockquote><h4 data-lake-id=\"lCL70\" id=\"lCL70\"><span data-lake-id=\"u0ffea662\" id=\"u0ffea662\">数字证书</span></h4><ul list=\"u0fd0b62b\"><li fid=\"ucd2a3bdd\" data-lake-id=\"ue95efe74\" id=\"ue95efe74\"><span data-lake-id=\"ue313d9de\" id=\"ue313d9de\">首先我们使用一种哈希算法来对公钥和其他信息进行加密生成一个信息摘要。</span></li><li fid=\"ucd2a3bdd\" data-lake-id=\"uadc7b34c\" id=\"uadc7b34c\"><span data-lake-id=\"u17fb6589\" id=\"u17fb6589\">然后让有公信力的认证中心(简称CA)，用它的私钥对消息摘要加密，形成签名。</span></li><li fid=\"ucd2a3bdd\" data-lake-id=\"ua2182181\" id=\"ua2182181\"><span data-lake-id=\"ua7eb8522\" id=\"ua7eb8522\">最后</span><strong><span data-lake-id=\"uda2d5be6\" id=\"uda2d5be6\">将原始的信息和签名结合在一起</span></strong><span data-lake-id=\"u6e6b8c6d\" id=\"u6e6b8c6d\">，称为</span><strong><span data-lake-id=\"ua85ad733\" id=\"ua85ad733\">数字证书。</span></strong></li><li fid=\"ucd2a3bdd\" data-lake-id=\"u10b2790b\" id=\"u10b2790b\"><span data-lake-id=\"u5259fc46\" id=\"u5259fc46\">当接收方收到数字证书的时候，先根据原始信息使用同样的哈希算法生成一个摘要，然后使用公证处的公钥来对数字证书中摘要进行解密，最后将解密的摘要和我们生成的摘要进行对比，就能发现我们得到的信息是否被更改了。</span></li><li fid=\"ucd2a3bdd\" data-lake-id=\"udcf9964c\" id=\"udcf9964c\"><span data-lake-id=\"u2aea0cdc\" id=\"u2aea0cdc\">这个方法最重要的是认证中心的可靠性，一般浏览器内部会内置一些顶层的认证中心证书，相当于我们自动信任了他们，只有这样我们才能够保证数据安全。</span></li></ul><h2 data-lake-id=\"qcWsh\" id=\"qcWsh\"><span data-lake-id=\"uec9bcdb5\" id=\"uec9bcdb5\">http 和 https 的区别</span></h2><ul list=\"u7fbc5ae9\"><li fid=\"ua2a42944\" data-lake-id=\"ucefbed7c\" id=\"ucefbed7c\"><span data-lake-id=\"ub492f91f\" id=\"ub492f91f\">https 协议需要 CA 证书，一般免费证书表较少，因而需要一定的费用</span></li><li fid=\"ua2a42944\" data-lake-id=\"uaa49beb2\" id=\"uaa49beb2\"><span data-lake-id=\"u257be231\" id=\"u257be231\">http 是超文本传输协议，信息是明文传输；https 则是具有安全性的 ssl 加密传输协议</span></li><li fid=\"ua2a42944\" data-lake-id=\"uff45e9c9\" id=\"uff45e9c9\"><span data-lake-id=\"u75c21b85\" id=\"u75c21b85\">http 和 https 使用的是完全不同的连接方式，使用的端口也不同，前者是 80，后者是 443</span></li><li fid=\"ua2a42944\" data-lake-id=\"uabcd249d\" id=\"uabcd249d\"><span data-lake-id=\"u5bfacf10\" id=\"u5bfacf10\">http 的连接很简单，是无状态的；https 协议是由 ssl + http 协议构建的可进行加密传输、身份认证的网络协议，比 http 协议安全</span></li><li fid=\"ua2a42944\" data-lake-id=\"uf41f99e5\" id=\"uf41f99e5\"><span data-lake-id=\"u61a19a5c\" id=\"u61a19a5c\">https </span></li></ul><h2 data-lake-id=\"GpbQT\" id=\"GpbQT\"><span data-lake-id=\"ue0affa4f\" id=\"ue0affa4f\">对称加密和非对称加密的区别</span></h2><p data-lake-id=\"u1873aace\" id=\"u1873aace\"><a href=\"https://www.jianshu.com/p/de50d1489359\" target=\"_blank\" data-lake-id=\"u21729896\" id=\"u21729896\"><span data-lake-id=\"u449cc8bc\" id=\"u449cc8bc\">https://www.jianshu.com/p/de50d1489359</span></a></p>",
  "body_draft_lake": "",
  "public": 0,
  "status": 1,
  "view_status": 0,
  "read_status": 1,
  "likes_count": 0,
  "comments_count": 0,
  "content_updated_at": "2022-06-30T07:19:42.000Z",
  "deleted_at": null,
  "created_at": "2022-04-04T11:32:57.000Z",
  "updated_at": "2022-06-30T07:19:42.000Z",
  "published_at": "2022-06-30T07:19:42.000Z",
  "first_published_at": "2022-04-04T11:32:56.975Z",
  "word_count": 4950,
  "cover": "https://cdn.nlark.com/yuque/0/2022/png/732231/1647496305663-e32231da-f410-4054-b3bd-0ba0f8a797d4.png",
  "description": "httphttp 是超文本传输协议，它定义了客户端与服务器之间交换报文的格式和方式，默认使用 80 端口。它使用 tcp 作为传输层协议，保证了数据传输的可靠性http 是一个无状态的协议，http 服务器不会保存关于客户的任何信息http 有两种连接方式，一种是持续连接，另一种是非持续连接。...",
  "custom_description": null,
  "hits": 0,
  "_serializer": "v2.doc_detail"
}