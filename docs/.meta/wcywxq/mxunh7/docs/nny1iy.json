{
  "id": 72212170,
  "slug": "nny1iy",
  "title": "babel",
  "book_id": 26225124,
  "book": {
    "id": 26225124,
    "type": "Book",
    "slug": "mxunh7",
    "name": "八股文 eight-part essay writing",
    "user_id": 732231,
    "description": "前端八股文",
    "creator_id": 732231,
    "public": 0,
    "items_count": 239,
    "likes_count": 0,
    "watches_count": 1,
    "content_updated_at": "2023-11-11T18:15:57.023Z",
    "updated_at": "2023-11-11T18:15:57.000Z",
    "created_at": "2022-04-04T11:31:45.000Z",
    "namespace": "wcywxq/mxunh7",
    "user": {
      "id": 732231,
      "type": "User",
      "login": "wcywxq",
      "name": "magic",
      "description": null,
      "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/732231/1606968271774-avatar/886ad88b-d2cc-4c9e-a674-f70eb51a679c.png",
      "books_count": 18,
      "public_books_count": 0,
      "followers_count": 0,
      "following_count": 0,
      "created_at": "2020-01-08T14:21:31.000Z",
      "updated_at": "2023-11-13T09:32:35.000Z",
      "_serializer": "v2.user"
    },
    "_serializer": "v2.book"
  },
  "user_id": 732231,
  "creator": {
    "id": 732231,
    "type": "User",
    "login": "wcywxq",
    "name": "magic",
    "description": null,
    "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/732231/1606968271774-avatar/886ad88b-d2cc-4c9e-a674-f70eb51a679c.png",
    "books_count": 18,
    "public_books_count": 0,
    "followers_count": 0,
    "following_count": 0,
    "created_at": "2020-01-08T14:21:31.000Z",
    "updated_at": "2023-11-13T09:32:35.000Z",
    "_serializer": "v2.user"
  },
  "format": "lake",
  "body": "<a name=\"FUqRV\"></a>\n## Babel 处理步骤\n`babel` 大概分为三个部分：解析 `parse`、转换 `transform`、生成 `generate`\n<a name=\"gvSJj\"></a>\n### 解析 `parse`\n:::success\n将代码转换为 `ast` 抽象语法树\n:::\n<a name=\"JxSrN\"></a>\n#### 词法分析\n:::success\n将字符串形式的代码转换为令牌 `token` 流，即语法片段组成的数组\n:::\n```javascript\nn * n\n\n[\n  { type: { ... }, value: \"n\", start: 0, end: 1, loc: { ... } },\n  { type: { ... }, value: \"*\", start: 2, end: 3, loc: { ... } },\n  { type: { ... }, value: \"n\", start: 4, end: 5, loc: { ... } },\n  ...\n]\n  \n// 每一个 type 有一组属性来描述该令牌\n{\n  type: {\n    label: 'name',\n    keyword: undefined,\n    beforeExpr: false,\n    startsExpr: true,\n    rightAssociative: false,\n    isLoop: false,\n    isAssign: false,\n    prefix: false,\n    postfix: false,\n    binop: null,\n    updateContext: null\n  },\n  ...\n}\n  \n// 和 AST 节点一样它们也有 start，end，loc 属性。\n```\n<a name=\"zpTXR\"></a>\n#### 语法分析\n:::success\n将一个 `token` 流(上一步生成的数组)转换成 `ast` 的形式。这个阶段会使用令牌中的信息把他们转换成一个 `ast` 的表述结构，这样更易于后续操作\n:::\n<a name=\"cRt2A\"></a>\n### 转换 `transform`\n:::success\n接收 `ast` 并对其进行遍历，在此过程中对节点进行添加、更新及移除等操作，最终产出新的 `ast`。这是 `babel` 或是其他编译器中最复杂的过程，同时也是插件将要介入工作的部分\n:::\n<a name=\"ErZ8J\"></a>\n### 生成 `generate`\n:::success\n把最终(经过一系列转换之后)的 `ast` 转换成字符串形式的代码，同时还会创建源码映射(`source map`)\n:::\n\n:::info\n`taro` 就是利用 `babel` 完成的小程序语法转换；通过**关键字**来进行词法分析。\n:::\n<a name=\"DaTkJ\"></a>\n## Babel 处理流程\n![image.png](https://cdn.nlark.com/yuque/0/2022/png/732231/1647834450045-c103406c-5882-49c4-8610-f3dcea673daf.png#clientId=ued7a0e2b-50d9-4&from=paste&height=844&id=ucf533d40&originHeight=844&originWidth=805&originalType=binary&ratio=1&rotation=0&showTitle=false&size=87138&status=done&style=none&taskId=u9f018e1f-5879-4b3b-b8e2-4411ce1a6f9&title=&width=805)\n<a name=\"Y4qoH\"></a>\n## Babel 的架构\n![image.png](https://cdn.nlark.com/yuque/0/2022/png/732231/1647834559210-cc1ffba0-5db5-41dd-8f05-53a01092d910.png#clientId=ued7a0e2b-50d9-4&from=paste&height=615&id=u2474e002&originHeight=615&originWidth=1290&originalType=binary&ratio=1&rotation=0&showTitle=false&size=75212&status=done&style=none&taskId=ue70324a5-5656-4568-bb7a-4e09d9ff070&title=&width=1290)<br />Babel 是一个 [MonoRepo](https://github.com/lerna/lerna) 项目， 不过组织非常清晰，下面就源码上我们能看到的模块进行一下分类， 配合上面的架构图让你对Babel有个大概的认识:\n\n<a name=\"qtNtO\"></a>\n### 1. 核心\n`@babel/core` 这也是上面说的‘微内核’架构中的‘内核’。对于 `babel` 来说，这个内核主要干这些事情：\n\n- 加载和处理配置(`config`)\n- 加载插件\n- 调用 `Parser` 进行语法解析，生成 `ast`\n- 调用 `Traverser` 遍历 `ast`，并使用访问者模式应用’插件’对 `ast` 进行转换\n- 生成代码，包括 `source-map` 转换和源代码生成\n```javascript\nimport * as babel from \"@babel/core\"\n\nbabel.transform(code, options, function (err, result) {\n  console.log(result) // { code, map, ast }\n})\n```\n<a name=\"QGsG4\"></a>\n### 2. 核心周边支撑\n\n- `Parser`(`@babel/parser`)： 将源代码解析为 `ast` 。 它已经内置支持很多语法. 例如 `JSX`、`TypeScript`、`flow`、以及最新的 `ECMAScript` 规范。目前为了执行效率，`Parser` 是[不支持扩展的](https://babeljs.io/docs/en/babel-parser#faq)，由官方进行维护。如果你要支持自定义语法，可以 `fork` 它，不过这种场景非常少。\n- `Traverser`(`@babel/traverse`)： 实现了**访问者模式**，对 `ast` 进行遍历，转换插件会通过它获取感兴趣的 `ast` 节点，对节点继续操作，下文会详细介绍**访问器模式**。\n```javascript\n// 使用 @babel/parser @babel/traverse 一起遍历和更新节点:\nimport * as parser from \"@babel/parser\"\nimport traverse from \"@babel/traverse\"\n\nconst code = `function square(n) {\n  return n * n\n}`\n\nconst ast = parser.parse(code)\n\ntraverse(ast, {\n  enter(path) {\n    if (path.isIdentifier({ name: \"n\" })) {\n      path.node.name = \"x\"\n    }\n  },\n  // 此外，我们可以针对语法树中的特定节点类型\n  FunctionDeclaration: function(path) {\n    path.node.id.name = \"x\"\n  }\n})\n```\n\n- `generator`(`@babel/generator`)： 将 `ast` 转换为源代码，支持 `source-map`\n```javascript\n// @babel/generator 是 Babel 的代码生成器，它将转换成源代码\nimport parser from \"@babel/parser\"\nimport generate from \"@babel/generator\"\n\nconst code = `function square(n) {\n  return n * n\n}`\n\nconst ast = parser.parse(code)\n\ngenerate(ast, {}, code)\n// {\n//   code: \"...\",\n//   map: \"...\",\n// }\n\n// 或者传递参数\ngenerate(ast, {\n  retainLines: false,\n  compact: \"auto\",\n  concise: false,\n  quotes: \"double\",\n  // ...\n}, code)\n```\n<a name=\"MKkFE\"></a>\n### 3. 插件\n打开 `babel` 的源代码，会发现有好几种类型的 **\"插件\"**。\n\n- **语法插件**(`@babel/plugin-syntax-*`)：上面说了 `@babel/parser` 已经支持了很多 `JavaScript` 语法特性，`Parser` 也不支持扩展。因此 `plugin-syntax-*` 实际上只是用于开启或者配置 `parser` 的某个功能特性。一般用户不需要关心这个，`transform` 插件里面已经包含了相关的 `plugin-syntax-*` 插件了。用户也可以通过 [parserOpts](https://babeljs.io/docs/en/options#parseropts) 配置项来直接配置 `Parser`\n- **转换插件**： 用于对  `ast` 进行转换, 实现转换为 `es5` 代码、压缩、功能增强等目的。`babel` 仓库将转换插件划分为两种(只是命名上的区别)：\n   - `@babel/plugin-transform-*`： 普通的转换插件\n   - `@babel/plugin-proposal-*`： 还在 **\"提议阶段\"**(非正式)的语言特性, 目前有[这些](https://babeljs.io/docs/en/next/plugins#experimental)\n- **预定义集合(**`**@babel/preset-***`**)**： 插件集合或者分组，主要方便用户对插件进行管理和使用。\n   - 比如 `@babel/preset-env` 含括所有的标准的最新特性\n   - 比如 `@babel/preset-react` 含括所有 `react` 相关的插件\n   - 比如 `@babel/typescript`包含所有 `typescript` 相关的插件\n<a name=\"Kxctu\"></a>\n### 4. 插件开发辅助\n\n- `@babel/template`： 某些场景直接操作 `ast` 太麻烦，就比如我们直接操作 `dom` 一样，所以 `babel` 实现了这么一个简单的模板引擎，可以将字符串代码转换为 `ast`。比如在生成一些辅助代码(`helper`)时会用到这个库\n- `@babel/types`： `ast` 节点构造器和断言，插件开发时使用很频繁\n- `@babel/helper-*`： 一些辅助器，用于辅助插件开发，例如：简化 `ast` 操作\n- `@babel/helper`： 辅助代码，单纯的语法转换可能无法让代码运行起来，比如低版本浏览器无法识别 `class`关键字，这时候需要添加辅助代码，对 `class` 进行模拟。\n<a name=\"RQWjE\"></a>\n### 5. 工具\n\n- `@babel/node`： `Node.js CLI`，通过它直接运行需要 `babel` 处理的 `javaScript` 文件\n- `@babel/register`： `Patch NodeJs`  的 `require` 方法，支持导入需要 `babel` 处理的 `javaScript` 模块\n- `@babel/cli`： `CLI` 工具\n<a name=\"xdUAd\"></a>\n## 编写 Babel 插件\n```javascript\n// 源代码\nfoo === bar;\n```\n其 `AST` 形式如下：\n```javascript\n{\n  type: \"BinaryExpression\",\n  operator: \"===\",\n  left: {\n    type: \"Identifier\",\n    name: \"foo\"\n  },\n  right: {\n    type: \"Identifier\",\n    name: \"bar\"\n  }\n}\n```\n添加 `BinaryExpression`访问者(`visitor`)方法开始：\n```javascript\nexport default function(babel) {\n  const { types: t } = babel\n  \n  return {\n    visitor: {\n      BinaryExpression(path) {\n        if (path.node.operator !== \"===\") {\n          return\n        }\n        path.node.left = t.identifier(\"sebmck\")\n      }\n    }\n  }\n}\n```\n运行插件后可以得到：\n```javascript\nsebmck === bar\n```\n接下来需要替换 `right` 属性\n```javascript\nexport default function(babel) {\n  const { types: t } = babel\n  \n  return {\n    visitor: {\n      BinaryExpression(path) {\n        if (path.node.operator !== \"===\") {\n          return\n        }\n        path.node.left = t.identifier(\"sebmck\")\n        path.node.right = t.identifier(\"dork\")\n      }\n    }\n  }\n}\n```\n最终结果：\n```javascript\nsebmck === dork\n```\n",
  "body_draft": "",
  "body_html": "<!doctype html><div class=\"lake-content\" typography=\"classic\"><h2 id=\"FUqRV\"><span class=\"ne-text\">Babel 处理步骤</span></h2><p id=\"u920cc291\" class=\"ne-p\"><code class=\"ne-code\"><span class=\"ne-text\">babel</span></code><span class=\"ne-text\"> 大概分为三个部分：解析 </span><code class=\"ne-code\"><span class=\"ne-text\">parse</span></code><span class=\"ne-text\">、转换 </span><code class=\"ne-code\"><span class=\"ne-text\">transform</span></code><span class=\"ne-text\">、生成 </span><code class=\"ne-code\"><span class=\"ne-text\">generate</span></code></p><h3 id=\"gvSJj\"><span class=\"ne-text\">解析 </span><code class=\"ne-code\"><span class=\"ne-text\">parse</span></code></h3><div data-type=\"success\" class=\"ne-alert\"><p id=\"u766c55e3\" class=\"ne-p\"><span class=\"ne-text\">将代码转换为 </span><code class=\"ne-code\"><span class=\"ne-text\">ast</span></code><span class=\"ne-text\"> 抽象语法树</span></p></div><h4 id=\"JxSrN\"><span class=\"ne-text\">词法分析</span></h4><div data-type=\"success\" class=\"ne-alert\"><p id=\"u46336b29\" class=\"ne-p\"><span class=\"ne-text\">将字符串形式的代码转换为令牌 </span><code class=\"ne-code\"><span class=\"ne-text\">token</span></code><span class=\"ne-text\"> 流，即语法片段组成的数组</span></p></div><pre data-language=\"javascript\" id=\"mFjnb\" class=\"ne-codeblock language-javascript\">n * n\n\n[\n  { type: { ... }, value: &quot;n&quot;, start: 0, end: 1, loc: { ... } },\n  { type: { ... }, value: &quot;*&quot;, start: 2, end: 3, loc: { ... } },\n  { type: { ... }, value: &quot;n&quot;, start: 4, end: 5, loc: { ... } },\n  ...\n]\n  \n// 每一个 type 有一组属性来描述该令牌\n{\n  type: {\n    label: 'name',\n    keyword: undefined,\n    beforeExpr: false,\n    startsExpr: true,\n    rightAssociative: false,\n    isLoop: false,\n    isAssign: false,\n    prefix: false,\n    postfix: false,\n    binop: null,\n    updateContext: null\n  },\n  ...\n}\n  \n// 和 AST 节点一样它们也有 start，end，loc 属性。</pre><h4 id=\"zpTXR\"><span class=\"ne-text\">语法分析</span></h4><div data-type=\"success\" class=\"ne-alert\"><p id=\"u2836d7ef\" class=\"ne-p\"><span class=\"ne-text\">将一个 </span><code class=\"ne-code\"><span class=\"ne-text\">token</span></code><span class=\"ne-text\"> 流(上一步生成的数组)转换成 </span><code class=\"ne-code\"><span class=\"ne-text\">ast</span></code><span class=\"ne-text\"> 的形式。这个阶段会使用令牌中的信息把他们转换成一个 </span><code class=\"ne-code\"><span class=\"ne-text\">ast</span></code><span class=\"ne-text\"> 的表述结构，这样更易于后续操作</span></p></div><h3 id=\"cRt2A\"><span class=\"ne-text\">转换 </span><code class=\"ne-code\"><span class=\"ne-text\">transform</span></code></h3><div data-type=\"success\" class=\"ne-alert\"><p id=\"uad3bae04\" class=\"ne-p\"><span class=\"ne-text\">接收 </span><code class=\"ne-code\"><span class=\"ne-text\">ast</span></code><span class=\"ne-text\"> 并对其进行遍历，在此过程中对节点进行添加、更新及移除等操作，最终产出新的 </span><code class=\"ne-code\"><span class=\"ne-text\">ast</span></code><span class=\"ne-text\">。这是 </span><code class=\"ne-code\"><span class=\"ne-text\">babel</span></code><span class=\"ne-text\"> 或是其他编译器中最复杂的过程，同时也是插件将要介入工作的部分</span></p></div><h3 id=\"ErZ8J\"><span class=\"ne-text\">生成 </span><code class=\"ne-code\"><span class=\"ne-text\">generate</span></code></h3><div data-type=\"success\" class=\"ne-alert\"><p id=\"u5496166a\" class=\"ne-p\"><span class=\"ne-text\">把最终(经过一系列转换之后)的 </span><code class=\"ne-code\"><span class=\"ne-text\">ast</span></code><span class=\"ne-text\"> 转换成字符串形式的代码，同时还会创建源码映射(</span><code class=\"ne-code\"><span class=\"ne-text\">source map</span></code><span class=\"ne-text\">)</span></p></div><p id=\"uaf9cdf1e\" class=\"ne-p\"><br></p><div data-type=\"info\" class=\"ne-alert\"><p id=\"uead5fc2f\" class=\"ne-p\"><code class=\"ne-code\"><span class=\"ne-text\">taro</span></code><span class=\"ne-text\"> 就是利用 </span><code class=\"ne-code\"><span class=\"ne-text\">babel</span></code><span class=\"ne-text\"> 完成的小程序语法转换；通过</span><strong><span class=\"ne-text\">关键字</span></strong><span class=\"ne-text\">来进行词法分析。</span></p></div><h2 id=\"DaTkJ\"><span class=\"ne-text\">Babel 处理流程</span></h2><p id=\"ue69c7a58\" class=\"ne-p\"><img src=\"https://cdn.nlark.com/yuque/0/2022/png/732231/1647834450045-c103406c-5882-49c4-8610-f3dcea673daf.png\" width=\"805\" id=\"ucf533d40\" class=\"ne-image\"></p><h2 id=\"Y4qoH\"><span class=\"ne-text\">Babel 的架构</span></h2><p id=\"u073fa809\" class=\"ne-p\"><img src=\"https://cdn.nlark.com/yuque/0/2022/png/732231/1647834559210-cc1ffba0-5db5-41dd-8f05-53a01092d910.png\" width=\"1290\" id=\"u2474e002\" class=\"ne-image\"></p><p id=\"u2c300d58\" class=\"ne-p\"><span class=\"ne-text\">Babel 是一个 </span><a href=\"https://github.com/lerna/lerna\" data-href=\"https://github.com/lerna/lerna\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">MonoRepo</span></a><span class=\"ne-text\"> 项目， 不过组织非常清晰，下面就源码上我们能看到的模块进行一下分类， 配合上面的架构图让你对Babel有个大概的认识:</span></p><p id=\"ub57ee3b4\" class=\"ne-p\"><span class=\"ne-text\"></span></p><h3 id=\"qtNtO\"><span class=\"ne-text\">1. 核心</span></h3><p id=\"uc1119487\" class=\"ne-p\"><code class=\"ne-code\"><span class=\"ne-text\">@babel/core</span></code><span class=\"ne-text\"> 这也是上面说的‘微内核’架构中的‘内核’。对于 </span><code class=\"ne-code\"><span class=\"ne-text\">babel</span></code><span class=\"ne-text\"> 来说，这个内核主要干这些事情：</span></p><ul class=\"ne-ul\"><li id=\"u8d2a540c\"><span class=\"ne-text\">加载和处理配置(</span><code class=\"ne-code\"><span class=\"ne-text\">config</span></code><span class=\"ne-text\">)</span></li><li id=\"u107265a3\"><span class=\"ne-text\">加载插件</span></li><li id=\"uc9a28b4c\"><span class=\"ne-text\">调用 </span><code class=\"ne-code\"><span class=\"ne-text\">Parser</span></code><span class=\"ne-text\"> 进行语法解析，生成 </span><code class=\"ne-code\"><span class=\"ne-text\">ast</span></code></li><li id=\"u39bd4b32\"><span class=\"ne-text\">调用 </span><code class=\"ne-code\"><span class=\"ne-text\">Traverser</span></code><span class=\"ne-text\"> 遍历 </span><code class=\"ne-code\"><span class=\"ne-text\">ast</span></code><span class=\"ne-text\">，并使用访问者模式应用’插件’对 </span><code class=\"ne-code\"><span class=\"ne-text\">ast</span></code><span class=\"ne-text\"> 进行转换</span></li><li id=\"ucd3c4388\"><span class=\"ne-text\">生成代码，包括 </span><code class=\"ne-code\"><span class=\"ne-text\">source-map</span></code><span class=\"ne-text\"> 转换和源代码生成</span></li></ul><pre data-language=\"javascript\" id=\"wq0gE\" class=\"ne-codeblock language-javascript\">import * as babel from &quot;@babel/core&quot;\n\nbabel.transform(code, options, function (err, result) {\n  console.log(result) // { code, map, ast }\n})</pre><h3 id=\"QGsG4\"><span class=\"ne-text\">2. 核心周边支撑</span></h3><ul class=\"ne-ul\"><li id=\"u7ec75771\"><code class=\"ne-code\"><span class=\"ne-text\">Parser</span></code><span class=\"ne-text\">(</span><code class=\"ne-code\"><span class=\"ne-text\">@babel/parser</span></code><span class=\"ne-text\">)： 将源代码解析为 </span><code class=\"ne-code\"><span class=\"ne-text\">ast</span></code><span class=\"ne-text\"> 。 它已经内置支持很多语法. 例如 </span><code class=\"ne-code\"><span class=\"ne-text\">JSX</span></code><span class=\"ne-text\">、</span><code class=\"ne-code\"><span class=\"ne-text\">TypeScript</span></code><span class=\"ne-text\">、</span><code class=\"ne-code\"><span class=\"ne-text\">flow</span></code><span class=\"ne-text\">、以及最新的 </span><code class=\"ne-code\"><span class=\"ne-text\">ECMAScript</span></code><span class=\"ne-text\"> 规范。目前为了执行效率，</span><code class=\"ne-code\"><span class=\"ne-text\">Parser</span></code><span class=\"ne-text\"> 是</span><a href=\"https://babeljs.io/docs/en/babel-parser#faq\" data-href=\"https://babeljs.io/docs/en/babel-parser#faq\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">不支持扩展的</span></a><span class=\"ne-text\">，由官方进行维护。如果你要支持自定义语法，可以 </span><code class=\"ne-code\"><span class=\"ne-text\">fork</span></code><span class=\"ne-text\"> 它，不过这种场景非常少。</span></li><li id=\"u351953cd\"><code class=\"ne-code\"><span class=\"ne-text\">Traverser</span></code><span class=\"ne-text\">(</span><code class=\"ne-code\"><span class=\"ne-text\">@babel/traverse</span></code><span class=\"ne-text\">)： 实现了</span><strong><span class=\"ne-text\">访问者模式</span></strong><span class=\"ne-text\">，对 </span><code class=\"ne-code\"><span class=\"ne-text\">ast</span></code><span class=\"ne-text\"> 进行遍历，转换插件会通过它获取感兴趣的 </span><code class=\"ne-code\"><span class=\"ne-text\">ast</span></code><span class=\"ne-text\"> 节点，对节点继续操作，下文会详细介绍</span><strong><span class=\"ne-text\">访问器模式</span></strong><span class=\"ne-text\">。</span></li></ul><pre data-language=\"javascript\" id=\"YFWvH\" class=\"ne-codeblock language-javascript\">// 使用 @babel/parser @babel/traverse 一起遍历和更新节点:\nimport * as parser from &quot;@babel/parser&quot;\nimport traverse from &quot;@babel/traverse&quot;\n\nconst code = `function square(n) {\n  return n * n\n}`\n\nconst ast = parser.parse(code)\n\ntraverse(ast, {\n  enter(path) {\n    if (path.isIdentifier({ name: &quot;n&quot; })) {\n      path.node.name = &quot;x&quot;\n    }\n  },\n  // 此外，我们可以针对语法树中的特定节点类型\n  FunctionDeclaration: function(path) {\n    path.node.id.name = &quot;x&quot;\n  }\n})</pre><ul class=\"ne-ul\"><li id=\"u8aef0ee5\"><code class=\"ne-code\"><span class=\"ne-text\">generator</span></code><span class=\"ne-text\">(</span><code class=\"ne-code\"><span class=\"ne-text\">@babel/generator</span></code><span class=\"ne-text\">)： 将 </span><code class=\"ne-code\"><span class=\"ne-text\">ast</span></code><span class=\"ne-text\"> 转换为源代码，支持 </span><code class=\"ne-code\"><span class=\"ne-text\">source-map</span></code></li></ul><pre data-language=\"javascript\" id=\"lWPe2\" class=\"ne-codeblock language-javascript\">// @babel/generator 是 Babel 的代码生成器，它将转换成源代码\nimport parser from &quot;@babel/parser&quot;\nimport generate from &quot;@babel/generator&quot;\n\nconst code = `function square(n) {\n  return n * n\n}`\n\nconst ast = parser.parse(code)\n\ngenerate(ast, {}, code)\n// {\n//   code: &quot;...&quot;,\n//   map: &quot;...&quot;,\n// }\n\n// 或者传递参数\ngenerate(ast, {\n  retainLines: false,\n  compact: &quot;auto&quot;,\n  concise: false,\n  quotes: &quot;double&quot;,\n  // ...\n}, code)</pre><h3 id=\"MKkFE\"><span class=\"ne-text\">3. 插件</span></h3><p id=\"uc08f6ee6\" class=\"ne-p\"><span class=\"ne-text\">打开 </span><code class=\"ne-code\"><span class=\"ne-text\">babel</span></code><span class=\"ne-text\"> 的源代码，会发现有好几种类型的 </span><strong><span class=\"ne-text\">&quot;插件&quot;</span></strong><span class=\"ne-text\">。</span></p><ul class=\"ne-ul\"><li id=\"u4022ad8b\"><strong><span class=\"ne-text\">语法插件</span></strong><span class=\"ne-text\">(</span><code class=\"ne-code\"><span class=\"ne-text\">@babel/plugin-syntax-*</span></code><span class=\"ne-text\">)：上面说了 </span><code class=\"ne-code\"><span class=\"ne-text\">@babel/parser</span></code><span class=\"ne-text\"> 已经支持了很多 </span><code class=\"ne-code\"><span class=\"ne-text\">JavaScript</span></code><span class=\"ne-text\"> 语法特性，</span><code class=\"ne-code\"><span class=\"ne-text\">Parser</span></code><span class=\"ne-text\"> 也不支持扩展。因此 </span><code class=\"ne-code\"><span class=\"ne-text\">plugin-syntax-*</span></code><span class=\"ne-text\"> 实际上只是用于开启或者配置 </span><code class=\"ne-code\"><span class=\"ne-text\">parser</span></code><span class=\"ne-text\"> 的某个功能特性。一般用户不需要关心这个，</span><code class=\"ne-code\"><span class=\"ne-text\">transform</span></code><span class=\"ne-text\"> 插件里面已经包含了相关的 </span><code class=\"ne-code\"><span class=\"ne-text\">plugin-syntax-*</span></code><span class=\"ne-text\"> 插件了。用户也可以通过 </span><a href=\"https://babeljs.io/docs/en/options#parseropts\" data-href=\"https://babeljs.io/docs/en/options#parseropts\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">parserOpts</span></a><span class=\"ne-text\"> 配置项来直接配置 </span><code class=\"ne-code\"><span class=\"ne-text\">Parser</span></code></li><li id=\"u0c2fdca4\"><strong><span class=\"ne-text\">转换插件</span></strong><span class=\"ne-text\">： 用于对  </span><code class=\"ne-code\"><span class=\"ne-text\">ast</span></code><span class=\"ne-text\"> 进行转换, 实现转换为 </span><code class=\"ne-code\"><span class=\"ne-text\">es5</span></code><span class=\"ne-text\"> 代码、压缩、功能增强等目的。</span><code class=\"ne-code\"><span class=\"ne-text\">babel</span></code><span class=\"ne-text\"> 仓库将转换插件划分为两种(只是命名上的区别)：</span></li></ul><ul class=\"ne-list-wrap\"><ul ne-level=\"1\" class=\"ne-ul\"><li id=\"u3efbe038\"><code class=\"ne-code\"><span class=\"ne-text\">@babel/plugin-transform-*</span></code><span class=\"ne-text\">： 普通的转换插件</span></li><li id=\"ud1a1cdcb\"><code class=\"ne-code\"><span class=\"ne-text\">@babel/plugin-proposal-*</span></code><span class=\"ne-text\">： 还在 </span><strong><span class=\"ne-text\">&quot;提议阶段&quot;</span></strong><span class=\"ne-text\">(非正式)的语言特性, 目前有</span><a href=\"https://babeljs.io/docs/en/next/plugins#experimental\" data-href=\"https://babeljs.io/docs/en/next/plugins#experimental\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">这些</span></a></li></ul></ul><ul class=\"ne-ul\"><li id=\"u45761153\"><strong><span class=\"ne-text\">预定义集合(</span></strong><code class=\"ne-code\"><strong><span class=\"ne-text\">@babel/preset-*</span></strong></code><strong><span class=\"ne-text\">)</span></strong><span class=\"ne-text\">： 插件集合或者分组，主要方便用户对插件进行管理和使用。</span></li></ul><ul class=\"ne-list-wrap\"><ul ne-level=\"1\" class=\"ne-ul\"><li id=\"ue20e5afb\"><span class=\"ne-text\">比如 </span><code class=\"ne-code\"><span class=\"ne-text\">@babel/preset-env</span></code><span class=\"ne-text\"> 含括所有的标准的最新特性</span></li><li id=\"u9518dd1d\"><span class=\"ne-text\">比如 </span><code class=\"ne-code\"><span class=\"ne-text\">@babel/preset-react</span></code><span class=\"ne-text\"> 含括所有 </span><code class=\"ne-code\"><span class=\"ne-text\">react</span></code><span class=\"ne-text\"> 相关的插件</span></li><li id=\"u86deba16\"><span class=\"ne-text\">比如 </span><code class=\"ne-code\"><span class=\"ne-text\">@babel/typescript</span></code><span class=\"ne-text\">包含所有 </span><code class=\"ne-code\"><span class=\"ne-text\">typescript</span></code><span class=\"ne-text\"> 相关的插件</span></li></ul></ul><h3 id=\"Kxctu\"><span class=\"ne-text\">4. 插件开发辅助</span></h3><ul class=\"ne-ul\"><li id=\"u10635e05\"><code class=\"ne-code\"><span class=\"ne-text\">@babel/template</span></code><span class=\"ne-text\">： 某些场景直接操作 </span><code class=\"ne-code\"><span class=\"ne-text\">ast</span></code><span class=\"ne-text\"> 太麻烦，就比如我们直接操作 </span><code class=\"ne-code\"><span class=\"ne-text\">dom</span></code><span class=\"ne-text\"> 一样，所以 </span><code class=\"ne-code\"><span class=\"ne-text\">babel</span></code><span class=\"ne-text\"> 实现了这么一个简单的模板引擎，可以将字符串代码转换为 </span><code class=\"ne-code\"><span class=\"ne-text\">ast</span></code><span class=\"ne-text\">。比如在生成一些辅助代码(</span><code class=\"ne-code\"><span class=\"ne-text\">helper</span></code><span class=\"ne-text\">)时会用到这个库</span></li><li id=\"uab94861e\"><code class=\"ne-code\"><span class=\"ne-text\">@babel/types</span></code><span class=\"ne-text\">： </span><code class=\"ne-code\"><span class=\"ne-text\">ast</span></code><span class=\"ne-text\"> 节点构造器和断言，插件开发时使用很频繁</span></li><li id=\"u7147d6e8\"><code class=\"ne-code\"><span class=\"ne-text\">@babel/helper-*</span></code><span class=\"ne-text\">： 一些辅助器，用于辅助插件开发，例如：简化 </span><code class=\"ne-code\"><span class=\"ne-text\">ast</span></code><span class=\"ne-text\"> 操作</span></li><li id=\"u9b490c7e\"><code class=\"ne-code\"><span class=\"ne-text\">@babel/helper</span></code><span class=\"ne-text\">： 辅助代码，单纯的语法转换可能无法让代码运行起来，比如低版本浏览器无法识别 </span><code class=\"ne-code\"><span class=\"ne-text\">class</span></code><span class=\"ne-text\">关键字，这时候需要添加辅助代码，对 </span><code class=\"ne-code\"><span class=\"ne-text\">class</span></code><span class=\"ne-text\"> 进行模拟。</span></li></ul><h3 id=\"RQWjE\"><span class=\"ne-text\">5. 工具</span></h3><ul class=\"ne-ul\"><li id=\"uda17538f\"><code class=\"ne-code\"><span class=\"ne-text\">@babel/node</span></code><span class=\"ne-text\">： </span><code class=\"ne-code\"><span class=\"ne-text\">Node.js CLI</span></code><span class=\"ne-text\">，通过它直接运行需要 </span><code class=\"ne-code\"><span class=\"ne-text\">babel</span></code><span class=\"ne-text\"> 处理的 </span><code class=\"ne-code\"><span class=\"ne-text\">javaScript</span></code><span class=\"ne-text\"> 文件</span></li><li id=\"u899b42a2\"><code class=\"ne-code\"><span class=\"ne-text\">@babel/register</span></code><span class=\"ne-text\">： </span><code class=\"ne-code\"><span class=\"ne-text\">Patch NodeJs</span></code><span class=\"ne-text\">  的 </span><code class=\"ne-code\"><span class=\"ne-text\">require</span></code><span class=\"ne-text\"> 方法，支持导入需要 </span><code class=\"ne-code\"><span class=\"ne-text\">babel</span></code><span class=\"ne-text\"> 处理的 </span><code class=\"ne-code\"><span class=\"ne-text\">javaScript</span></code><span class=\"ne-text\"> 模块</span></li><li id=\"u8dfa2654\"><code class=\"ne-code\"><span class=\"ne-text\">@babel/cli</span></code><span class=\"ne-text\">： </span><code class=\"ne-code\"><span class=\"ne-text\">CLI</span></code><span class=\"ne-text\"> 工具</span></li></ul><h2 id=\"xdUAd\"><span class=\"ne-text\">编写 Babel 插件</span></h2><pre data-language=\"javascript\" id=\"o55Ti\" class=\"ne-codeblock language-javascript\">// 源代码\nfoo === bar;</pre><p id=\"udecb12cd\" class=\"ne-p\"><span class=\"ne-text\">其 </span><code class=\"ne-code\"><span class=\"ne-text\">AST</span></code><span class=\"ne-text\"> 形式如下：</span></p><pre data-language=\"javascript\" id=\"cT4Ei\" class=\"ne-codeblock language-javascript\">{\n  type: &quot;BinaryExpression&quot;,\n  operator: &quot;===&quot;,\n  left: {\n    type: &quot;Identifier&quot;,\n    name: &quot;foo&quot;\n  },\n  right: {\n    type: &quot;Identifier&quot;,\n    name: &quot;bar&quot;\n  }\n}</pre><p id=\"ub45fa182\" class=\"ne-p\"><span class=\"ne-text\">添加 </span><code class=\"ne-code\"><span class=\"ne-text\">BinaryExpression</span></code><span class=\"ne-text\">访问者(</span><code class=\"ne-code\"><span class=\"ne-text\">visitor</span></code><span class=\"ne-text\">)方法开始：</span></p><pre data-language=\"javascript\" id=\"GQE5Z\" class=\"ne-codeblock language-javascript\">export default function(babel) {\n  const { types: t } = babel\n  \n  return {\n    visitor: {\n      BinaryExpression(path) {\n        if (path.node.operator !== &quot;===&quot;) {\n          return\n        }\n        path.node.left = t.identifier(&quot;sebmck&quot;)\n      }\n    }\n  }\n}</pre><p id=\"u9e501a85\" class=\"ne-p\"><span class=\"ne-text\">运行插件后可以得到：</span></p><pre data-language=\"javascript\" id=\"YQsFY\" class=\"ne-codeblock language-javascript\">sebmck === bar</pre><p id=\"u3ea441a2\" class=\"ne-p\"><span class=\"ne-text\">接下来需要替换 </span><code class=\"ne-code\"><span class=\"ne-text\">right</span></code><span class=\"ne-text\"> 属性</span></p><pre data-language=\"javascript\" id=\"OkJdw\" class=\"ne-codeblock language-javascript\">export default function(babel) {\n  const { types: t } = babel\n  \n  return {\n    visitor: {\n      BinaryExpression(path) {\n        if (path.node.operator !== &quot;===&quot;) {\n          return\n        }\n        path.node.left = t.identifier(&quot;sebmck&quot;)\n        path.node.right = t.identifier(&quot;dork&quot;)\n      }\n    }\n  }\n}</pre><p id=\"u7a0191fa\" class=\"ne-p\"><span class=\"ne-text\">最终结果：</span></p><pre data-language=\"javascript\" id=\"RgsLF\" class=\"ne-codeblock language-javascript\">sebmck === dork</pre></div>",
  "body_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"viewport\" content=\"adapt\" /><h2 data-lake-id=\"FUqRV\" id=\"FUqRV\"><span data-lake-id=\"u10b9cae7\" id=\"u10b9cae7\">Babel 处理步骤</span></h2><p data-lake-id=\"u920cc291\" id=\"u920cc291\"><code data-lake-id=\"ucd7ba6b8\" id=\"ucd7ba6b8\"><span data-lake-id=\"u8fdc9da9\" id=\"u8fdc9da9\">babel</span></code><span data-lake-id=\"uf9355e00\" id=\"uf9355e00\"> 大概分为三个部分：解析 </span><code data-lake-id=\"ue7230dd1\" id=\"ue7230dd1\"><span data-lake-id=\"u57cef3c4\" id=\"u57cef3c4\">parse</span></code><span data-lake-id=\"u773395dc\" id=\"u773395dc\">、转换 </span><code data-lake-id=\"u1b6f2388\" id=\"u1b6f2388\"><span data-lake-id=\"uf0888aa9\" id=\"uf0888aa9\">transform</span></code><span data-lake-id=\"u1a396a73\" id=\"u1a396a73\">、生成 </span><code data-lake-id=\"u6b2cf1e8\" id=\"u6b2cf1e8\"><span data-lake-id=\"udbf34efa\" id=\"udbf34efa\">generate</span></code></p><h3 data-lake-id=\"gvSJj\" id=\"gvSJj\"><span data-lake-id=\"u74a30fa9\" id=\"u74a30fa9\">解析 </span><code data-lake-id=\"u456118c3\" id=\"u456118c3\"><span data-lake-id=\"ub8d9ed78\" id=\"ub8d9ed78\">parse</span></code></h3><blockquote data-lake-id=\"u89471aca\" id=\"u89471aca\" class=\"lake-alert lake-alert-success\"><p data-lake-id=\"u766c55e3\" id=\"u766c55e3\"><span data-lake-id=\"u2d3e7b70\" id=\"u2d3e7b70\">将代码转换为 </span><code data-lake-id=\"u193c6be9\" id=\"u193c6be9\"><span data-lake-id=\"ubdeec9d8\" id=\"ubdeec9d8\">ast</span></code><span data-lake-id=\"ue38af15a\" id=\"ue38af15a\"> 抽象语法树</span></p></blockquote><h4 data-lake-id=\"JxSrN\" id=\"JxSrN\"><span data-lake-id=\"u77c65781\" id=\"u77c65781\">词法分析</span></h4><blockquote data-lake-id=\"ua721c38d\" id=\"ua721c38d\" class=\"lake-alert lake-alert-success\"><p data-lake-id=\"u46336b29\" id=\"u46336b29\"><span data-lake-id=\"ud098ccd5\" id=\"ud098ccd5\">将字符串形式的代码转换为令牌 </span><code data-lake-id=\"uf121b5ca\" id=\"uf121b5ca\"><span data-lake-id=\"u5b0faa85\" id=\"u5b0faa85\">token</span></code><span data-lake-id=\"u05a0eb1c\" id=\"u05a0eb1c\"> 流，即语法片段组成的数组</span></p></blockquote><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22n%20*%20n%5Cn%5Cn%5B%5Cn%20%20%7B%20type%3A%20%7B%20...%20%7D%2C%20value%3A%20%5C%22n%5C%22%2C%20start%3A%200%2C%20end%3A%201%2C%20loc%3A%20%7B%20...%20%7D%20%7D%2C%5Cn%20%20%7B%20type%3A%20%7B%20...%20%7D%2C%20value%3A%20%5C%22*%5C%22%2C%20start%3A%202%2C%20end%3A%203%2C%20loc%3A%20%7B%20...%20%7D%20%7D%2C%5Cn%20%20%7B%20type%3A%20%7B%20...%20%7D%2C%20value%3A%20%5C%22n%5C%22%2C%20start%3A%204%2C%20end%3A%205%2C%20loc%3A%20%7B%20...%20%7D%20%7D%2C%5Cn%20%20...%5Cn%5D%5Cn%20%20%5Cn%2F%2F%20%E6%AF%8F%E4%B8%80%E4%B8%AA%20type%20%E6%9C%89%E4%B8%80%E7%BB%84%E5%B1%9E%E6%80%A7%E6%9D%A5%E6%8F%8F%E8%BF%B0%E8%AF%A5%E4%BB%A4%E7%89%8C%5Cn%7B%5Cn%20%20type%3A%20%7B%5Cn%20%20%20%20label%3A%20'name'%2C%5Cn%20%20%20%20keyword%3A%20undefined%2C%5Cn%20%20%20%20beforeExpr%3A%20false%2C%5Cn%20%20%20%20startsExpr%3A%20true%2C%5Cn%20%20%20%20rightAssociative%3A%20false%2C%5Cn%20%20%20%20isLoop%3A%20false%2C%5Cn%20%20%20%20isAssign%3A%20false%2C%5Cn%20%20%20%20prefix%3A%20false%2C%5Cn%20%20%20%20postfix%3A%20false%2C%5Cn%20%20%20%20binop%3A%20null%2C%5Cn%20%20%20%20updateContext%3A%20null%5Cn%20%20%7D%2C%5Cn%20%20...%5Cn%7D%5Cn%20%20%5Cn%2F%2F%20%E5%92%8C%20AST%20%E8%8A%82%E7%82%B9%E4%B8%80%E6%A0%B7%E5%AE%83%E4%BB%AC%E4%B9%9F%E6%9C%89%20start%EF%BC%8Cend%EF%BC%8Cloc%20%E5%B1%9E%E6%80%A7%E3%80%82%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22mFjnb%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h4 data-lake-id=\"zpTXR\" id=\"zpTXR\"><span data-lake-id=\"u0a729dcb\" id=\"u0a729dcb\">语法分析</span></h4><blockquote data-lake-id=\"u75136076\" id=\"u75136076\" class=\"lake-alert lake-alert-success\"><p data-lake-id=\"u2836d7ef\" id=\"u2836d7ef\"><span data-lake-id=\"uc4e18722\" id=\"uc4e18722\">将一个 </span><code data-lake-id=\"ue62f39c8\" id=\"ue62f39c8\"><span data-lake-id=\"ubf56acfa\" id=\"ubf56acfa\">token</span></code><span data-lake-id=\"uc42b8d12\" id=\"uc42b8d12\"> 流(上一步生成的数组)转换成 </span><code data-lake-id=\"u08b300da\" id=\"u08b300da\"><span data-lake-id=\"uac321338\" id=\"uac321338\">ast</span></code><span data-lake-id=\"ue7920498\" id=\"ue7920498\"> 的形式。这个阶段会使用令牌中的信息把他们转换成一个 </span><code data-lake-id=\"u4b0b4a4f\" id=\"u4b0b4a4f\"><span data-lake-id=\"u269c29b2\" id=\"u269c29b2\">ast</span></code><span data-lake-id=\"u5ce3afdc\" id=\"u5ce3afdc\"> 的表述结构，这样更易于后续操作</span></p></blockquote><h3 data-lake-id=\"cRt2A\" id=\"cRt2A\"><span data-lake-id=\"ub8315546\" id=\"ub8315546\">转换 </span><code data-lake-id=\"ucc1acbd8\" id=\"ucc1acbd8\"><span data-lake-id=\"u1d3e636c\" id=\"u1d3e636c\">transform</span></code></h3><blockquote data-lake-id=\"u329a8eef\" id=\"u329a8eef\" class=\"lake-alert lake-alert-success\"><p data-lake-id=\"uad3bae04\" id=\"uad3bae04\"><span data-lake-id=\"u74d8a991\" id=\"u74d8a991\">接收 </span><code data-lake-id=\"u0e5e38ca\" id=\"u0e5e38ca\"><span data-lake-id=\"u5e7f2d12\" id=\"u5e7f2d12\">ast</span></code><span data-lake-id=\"u6ea85296\" id=\"u6ea85296\"> 并对其进行遍历，在此过程中对节点进行添加、更新及移除等操作，最终产出新的 </span><code data-lake-id=\"uf4ec37e1\" id=\"uf4ec37e1\"><span data-lake-id=\"ufbfda848\" id=\"ufbfda848\">ast</span></code><span data-lake-id=\"ucae15200\" id=\"ucae15200\">。这是 </span><code data-lake-id=\"u9402e9f8\" id=\"u9402e9f8\"><span data-lake-id=\"u6e024425\" id=\"u6e024425\">babel</span></code><span data-lake-id=\"u0187d5b7\" id=\"u0187d5b7\"> 或是其他编译器中最复杂的过程，同时也是插件将要介入工作的部分</span></p></blockquote><h3 data-lake-id=\"ErZ8J\" id=\"ErZ8J\"><span data-lake-id=\"u4ff593ef\" id=\"u4ff593ef\">生成 </span><code data-lake-id=\"uf812c195\" id=\"uf812c195\"><span data-lake-id=\"ufccbc9b5\" id=\"ufccbc9b5\">generate</span></code></h3><blockquote data-lake-id=\"ue4ab9d8a\" id=\"ue4ab9d8a\" class=\"lake-alert lake-alert-success\"><p data-lake-id=\"u5496166a\" id=\"u5496166a\"><span data-lake-id=\"u66fc9ec8\" id=\"u66fc9ec8\">把最终(经过一系列转换之后)的 </span><code data-lake-id=\"uc69b5270\" id=\"uc69b5270\"><span data-lake-id=\"u58b5bcbb\" id=\"u58b5bcbb\">ast</span></code><span data-lake-id=\"uc4cd1a39\" id=\"uc4cd1a39\"> 转换成字符串形式的代码，同时还会创建源码映射(</span><code data-lake-id=\"ue77d8ce7\" id=\"ue77d8ce7\"><span data-lake-id=\"u6d723c0c\" id=\"u6d723c0c\">source map</span></code><span data-lake-id=\"uc60e978f\" id=\"uc60e978f\">)</span></p></blockquote><p data-lake-id=\"uaf9cdf1e\" id=\"uaf9cdf1e\"><br></p><blockquote data-lake-id=\"u29acba4b\" id=\"u29acba4b\" class=\"lake-alert lake-alert-info\"><p data-lake-id=\"uead5fc2f\" id=\"uead5fc2f\"><code data-lake-id=\"u9b7520bf\" id=\"u9b7520bf\"><span data-lake-id=\"uf426f353\" id=\"uf426f353\">taro</span></code><span data-lake-id=\"ufe3f5f3a\" id=\"ufe3f5f3a\"> 就是利用 </span><code data-lake-id=\"u57de3c21\" id=\"u57de3c21\"><span data-lake-id=\"u3cc0a0f8\" id=\"u3cc0a0f8\">babel</span></code><span data-lake-id=\"u2242a052\" id=\"u2242a052\"> 完成的小程序语法转换；通过</span><strong><span data-lake-id=\"u3404f0a9\" id=\"u3404f0a9\">关键字</span></strong><span data-lake-id=\"ue6ad4bfd\" id=\"ue6ad4bfd\">来进行词法分析。</span></p></blockquote><h2 data-lake-id=\"DaTkJ\" id=\"DaTkJ\"><span data-lake-id=\"u310ef32a\" id=\"u310ef32a\">Babel 处理流程</span></h2><p data-lake-id=\"ue69c7a58\" id=\"ue69c7a58\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2022%2Fpng%2F732231%2F1647834450045-c103406c-5882-49c4-8610-f3dcea673daf.png%22%2C%22taskId%22%3A%22u9f018e1f-5879-4b3b-b8e2-4411ce1a6f9%22%2C%22clientId%22%3A%22ued7a0e2b-50d9-4%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A805%2C%22height%22%3A844%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A87138%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A805%2C%22originHeight%22%3A844%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22CONSOLE.LOG('HELLOWORLD')%20%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90%2C%E5%B0%86%E6%BA%90%E4%BB%A3%E7%A0%81%E5%88%86%20TOKENIZER%20%5B'CONSOLE'%2CLOG'%2C%5C%22HELLO%20WORLD%5C%22%2C1%5D%5D%5D%5D%20%E5%89%B2%E6%88%90TOKEN%E6%95%B0%E7%BB%84%20FILE%20PROGRAM%3APROGROGRAM%20SOURCETYPE%3AMODUIE%5C%22%20BODY%3A%5B%20EXPRESSIONSTATEMENT%20EXPRESSION%3A%20CALLEXPRESSION%20MEMBEREXPRESSION%20CALLEE%3AN%20%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90%2C%E5%B0%86TOKEN%E6%95%B0%E7%BB%84%E8%BD%AC%20PARSER%20-OBJECT%3AIDENTIFIEX%20%E6%8D%A2%E4%B8%BAAST%20NAME%3A'CONSOLE'%20RTY%3AIDENTIFIERSNODE%20PROPERTY%3A%20NAME%3A''LOG%20COMPUTED%3AFALSE%20%E9%81%8D%E5%8E%86(%E8%AE%BF%E9%97%AE%E5%99%A8%E6%A8%A1%E5%BC%8F)AST%20%E5%B9%B6%E5%BA%94%E7%94%A8%E8%BD%AC%E6%8D%A2%E5%99%A8%20TRAVERSER%20ARGUMENTS%3A%20STRINGLITERAL%20EXT%E5%B7%A5%E7%A8%8B%3A%20%3A%3AXAWVAIUE%2CXAWY%20VALUE%3A%20'HELLO%20WORLD%5C%22%20VISITOR%3A%201%2F%E5%8F%8D%E8%BD%AC%E6%A0%87%E8%AF%86%E7%AC%A6%20IDENTIFIER(PATH)%20PATH.NODE%2CNAMEPATH.NODE.NAME%20AST%E8%BD%AC%E6%8D%A2%E5%99%A8%2C%E5%A2%9E%E5%88%A0%E6%9F%A5%E6%94%B9%20AST%20%E8%8A%82%E7%82%B9%20TRANSFORMER%20.SP11T(%5C%22)%20%60REVERSE()%20%60JOIN(*)%3A%20GENERATOR%20ELOSNOC.GOL((HELLO%20WORLD')%3B%20%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%2C%E5%B0%86AST%E8%BD%AC%E6%8D%A2%E4%B8%BA%E6%BA%90%E4%BB%A3%E7%A0%81%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A58.19502%2C%22y%22%3A54.394985%2C%22width%22%3A132.9395%2C%22height%22%3A14.367581000000008%2C%22text%22%3A%22CONSOLE.LOG('HELLOWORLD')%22%7D%2C%7B%22x%22%3A219.53377%2C%22y%22%3A122.63904%2C%22width%22%3A122.10147999999998%2C%22height%22%3A13.919309999999996%2C%22text%22%3A%22%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90%2C%E5%B0%86%E6%BA%90%E4%BB%A3%E7%A0%81%E5%88%86%22%7D%2C%7B%22x%22%3A95.085175%2C%22y%22%3A129.88428%2C%22width%22%3A57.687325%2C%22height%22%3A11.38366000000002%2C%22text%22%3A%22TOKENIZER%22%7D%2C%7B%22x%22%3A402.35876%2C%22y%22%3A130.20279%2C%22width%22%3A189.19674000000003%2C%22height%22%3A13.692689999999999%2C%22text%22%3A%22%5B'CONSOLE'%2CLOG'%2C%5C%22HELLO%20WORLD%5C%22%2C1%5D%5D%5D%5D%22%7D%2C%7B%22x%22%3A240.13081%2C%22y%22%3A137.39606%2C%22width%22%3A82.13591000000002%2C%22height%22%3A12.729109999999991%2C%22text%22%3A%22%E5%89%B2%E6%88%90TOKEN%E6%95%B0%E7%BB%84%22%7D%2C%7B%22x%22%3A396.13977%2C%22y%22%3A190.67473%2C%22width%22%3A27.237700000000018%2C%22height%22%3A7.99194%2C%22text%22%3A%22FILE%22%7D%2C%7B%22x%22%3A405.43494%2C%22y%22%3A205.69872%2C%22width%22%3A103.13956000000002%2C%22height%22%3A8.96217999999999%2C%22text%22%3A%22PROGRAM%3APROGROGRAM%22%7D%2C%7B%22x%22%3A430.45724%2C%22y%22%3A220.66937%2C%22width%22%3A115.45945999999998%2C%22height%22%3A8.708010000000002%2C%22text%22%3A%22SOURCETYPE%3AMODUIE%5C%22%22%7D%2C%7B%22x%22%3A427.13803%2C%22y%22%3A237.7088%2C%22width%22%3A52.20742999999999%2C%22height%22%3A10.428420000000017%2C%22text%22%3A%22BODY%3A%5B%22%7D%2C%7B%22x%22%3A439.28104%2C%22y%22%3A252.39171%2C%22width%22%3A118.82869999999997%2C%22height%22%3A9.540140000000008%2C%22text%22%3A%22EXPRESSIONSTATEMENT%22%7D%2C%7B%22x%22%3A460.8046%2C%22y%22%3A265.59396%2C%22width%22%3A154.6941%2C%22height%22%3A11.692080000000033%2C%22text%22%3A%22EXPRESSION%3A%20CALLEXPRESSION%22%7D%2C%7B%22x%22%3A521.4295%2C%22y%22%3A281.75034%2C%22width%22%3A99.54084%2C%22height%22%3A9.493190000000027%2C%22text%22%3A%22MEMBEREXPRESSION%22%7D%2C%7B%22x%22%3A476.9799%2C%22y%22%3A282.72345%2C%22width%22%3A53.79824000000002%2C%22height%22%3A8.576999999999998%2C%22text%22%3A%22CALLEE%3AN%22%7D%2C%7B%22x%22%3A213.75252%2C%22y%22%3A291.3077%2C%22width%22%3A142.16958%2C%22height%22%3A13.996499999999969%2C%22text%22%3A%22%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90%2C%E5%B0%86TOKEN%E6%95%B0%E7%BB%84%E8%BD%AC%22%7D%2C%7B%22x%22%3A104.49338%2C%22y%22%3A291.79556%2C%22width%22%3A40.56255999999999%2C%22height%22%3A12.236580000000004%2C%22text%22%3A%22PARSER%22%7D%2C%7B%22x%22%3A487.06308%2C%22y%22%3A295.99728%2C%22width%22%3A114.84871999999996%2C%22height%22%3A11.541080000000022%2C%22text%22%3A%22-OBJECT%3AIDENTIFIEX%22%7D%2C%7B%22x%22%3A258.35%2C%22y%22%3A306.20413%2C%22width%22%3A52.86883999999998%2C%22height%22%3A12.450749999999971%2C%22text%22%3A%22%E6%8D%A2%E4%B8%BAAST%22%7D%2C%7B%22x%22%3A512.09467%2C%22y%22%3A311.05154%2C%22width%22%3A86.03869000000009%2C%22height%22%3A8.965090000000032%2C%22text%22%3A%22NAME%3A'CONSOLE'%22%7D%2C%7B%22x%22%3A530.95465%2C%22y%22%3A343.4391%2C%22width%22%3A125.44505000000004%2C%22height%22%3A9.043540000000007%2C%22text%22%3A%22RTY%3AIDENTIFIERSNODE%22%7D%2C%7B%22x%22%3A492.97855%2C%22y%22%3A344.2819%2C%22width%22%3A54.72764999999998%2C%22height%22%3A8.820150000000012%2C%22text%22%3A%22PROPERTY%3A%22%7D%2C%7B%22x%22%3A511.9536%2C%22y%22%3A357.9473%2C%22width%22%3A61.74830000000003%2C%22height%22%3A9.70517000000001%2C%22text%22%3A%22NAME%3A''LOG%22%7D%2C%7B%22x%22%3A495.551%2C%22y%22%3A391.2876%2C%22width%22%3A88.00119999999998%2C%22height%22%3A9.10311999999999%2C%22text%22%3A%22COMPUTED%3AFALSE%22%7D%2C%7B%22x%22%3A212.03595%2C%22y%22%3A407.93314%2C%22width%22%3A196.36737%2C%22height%22%3A14.619860000000017%2C%22text%22%3A%22%E9%81%8D%E5%8E%86(%E8%AE%BF%E9%97%AE%E5%99%A8%E6%A8%A1%E5%BC%8F)AST%20%E5%B9%B6%E5%BA%94%E7%94%A8%E8%BD%AC%E6%8D%A2%E5%99%A8%22%7D%2C%7B%22x%22%3A95.20551%2C%22y%22%3A408.97314%2C%22width%22%3A56.09706%2C%22height%22%3A12.346589999999992%2C%22text%22%3A%22TRAVERSER%22%7D%2C%7B%22x%22%3A478.68552%2C%22y%22%3A424.36655%2C%22width%22%3A58.58018000000004%2C%22height%22%3A7.81714999999997%2C%22text%22%3A%22ARGUMENTS%3A%22%7D%2C%7B%22x%22%3A491.55786%2C%22y%22%3A437.87076%2C%22width%22%3A80.07154000000003%2C%22height%22%3A9.831969999999956%2C%22text%22%3A%22STRINGLITERAL%22%7D%2C%7B%22x%22%3A510.2799%2C%22y%22%3A453.79648%2C%22width%22%3A44.3972%2C%22height%22%3A8.478020000000015%2C%22text%22%3A%22EXT%E5%B7%A5%E7%A8%8B%3A%22%7D%2C%7B%22x%22%3A546.0985%2C%22y%22%3A454.20435%2C%22width%22%3A80.22676000000001%2C%22height%22%3A8.434900000000027%2C%22text%22%3A%22%3A%3AXAWVAIUE%2CXAWY%22%7D%2C%7B%22x%22%3A511.74466%2C%22y%22%3A470.4918%2C%22width%22%3A115.59873999999996%2C%22height%22%3A10.260639999999967%2C%22text%22%3A%22VALUE%3A%20'HELLO%20WORLD%5C%22%22%7D%2C%7B%22x%22%3A423.63306%2C%22y%22%3A596.7039%2C%22width%22%3A53.80858999999998%2C%22height%22%3A9.079850000000079%2C%22text%22%3A%22VISITOR%3A%22%7D%2C%7B%22x%22%3A436.30887%2C%22y%22%3A607.3321%2C%22width%22%3A67.26668999999998%2C%22height%22%3A11.977300000000014%2C%22text%22%3A%221%2F%E5%8F%8D%E8%BD%AC%E6%A0%87%E8%AF%86%E7%AC%A6%22%7D%2C%7B%22x%22%3A434.44226%2C%22y%22%3A620.58295%2C%22width%22%3A96.07758000000007%2C%22height%22%3A10.75184999999999%2C%22text%22%3A%22IDENTIFIER(PATH)%22%7D%2C%7B%22x%22%3A446.5089%2C%22y%22%3A633.5118%2C%22width%22%3A180.34443000000005%2C%22height%22%3A9.161230000000046%2C%22text%22%3A%22PATH.NODE%2CNAMEPATH.NODE.NAME%22%7D%2C%7B%22x%22%3A212.69121%2C%22y%22%3A640.2242%2C%22width%22%3A177.65812%2C%22height%22%3A13.755539999999996%2C%22text%22%3A%22AST%E8%BD%AC%E6%8D%A2%E5%99%A8%2C%E5%A2%9E%E5%88%A0%E6%9F%A5%E6%94%B9%20AST%20%E8%8A%82%E7%82%B9%22%7D%2C%7B%22x%22%3A86.89959%2C%22y%22%3A640.5644%2C%22width%22%3A73.1589%2C%22height%22%3A12.153599999999983%2C%22text%22%3A%22TRANSFORMER%22%7D%2C%7B%22x%22%3A460.1384%2C%22y%22%3A644.27686%2C%22width%22%3A54.62375000000003%2C%22height%22%3A9.920839999999998%2C%22text%22%3A%22.SP11T(%5C%22)%22%7D%2C%7B%22x%22%3A460.70822%2C%22y%22%3A655.68243%2C%22width%22%3A55.705479999999966%2C%22height%22%3A9.54747000000009%2C%22text%22%3A%22%60REVERSE()%22%7D%2C%7B%22x%22%3A460.16397%2C%22y%22%3A668.0821%2C%22width%22%3A56.683929999999975%2C%22height%22%3A10.036740000000009%2C%22text%22%3A%22%60JOIN(*)%3A%22%7D%2C%7B%22x%22%3A93.869865%2C%22y%22%3A755.35767%2C%22width%22%3A59.968345%2C%22height%22%3A12.941730000000007%2C%22text%22%3A%22GENERATOR%22%7D%2C%7B%22x%22%3A417.24905%2C%22y%22%3A756.1246%2C%22width%22%3A137.04178000000002%2C%22height%22%3A14.522799999999961%2C%22text%22%3A%22ELOSNOC.GOL((HELLO%20WORLD')%3B%22%7D%2C%7B%22x%22%3A211.19719%2C%22y%22%3A755.6885%2C%22width%22%3A176.06877%2C%22height%22%3A15.583500000000072%2C%22text%22%3A%22%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%2C%E5%B0%86AST%E8%BD%AC%E6%8D%A2%E4%B8%BA%E6%BA%90%E4%BB%A3%E7%A0%81%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22id%22%3A%22ucf533d40%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><h2 data-lake-id=\"Y4qoH\" id=\"Y4qoH\"><span data-lake-id=\"u67f99624\" id=\"u67f99624\">Babel 的架构</span></h2><p data-lake-id=\"u073fa809\" id=\"u073fa809\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2022%2Fpng%2F732231%2F1647834559210-cc1ffba0-5db5-41dd-8f05-53a01092d910.png%22%2C%22taskId%22%3A%22ue70324a5-5656-4568-bb7a-4e09d9ff070%22%2C%22clientId%22%3A%22ued7a0e2b-50d9-4%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A1290%2C%22height%22%3A615%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A75212%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A1290%2C%22originHeight%22%3A615%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22searchocrLocations%22%3A%5B%7B%22x%22%3A631.886%2C%22y%22%3A70.615005%2C%22width%22%3A55.073170000000005%2C%22height%22%3A20.961185%2C%22text%22%3A%22%E5%B7%A5%E5%85%B7%E5%B1%82%22%7D%2C%7B%22x%22%3A949.7235%2C%22y%22%3A151.01349%2C%22width%22%3A75.57350000000008%2C%22height%22%3A22.530730000000005%2C%22text%22%3A%22%E7%94%9F%E6%80%81%E7%B3%BB%E7%BB%9F%22%7D%2C%7B%22x%22%3A286.93542%2C%22y%22%3A153.31038%2C%22width%22%3A112.21047999999996%2C%22height%22%3A18.635559999999998%2C%22text%22%3A%22BABEL%E7%9A%84%E6%A0%B8%E5%BF%83%22%7D%2C%7B%22x%22%3A940.64575%2C%22y%22%3A189.63283%2C%22width%22%3A271.8854499999999%2C%22height%22%3A16.88048999999998%2C%22text%22%3A%22BABEI%E7%9A%84%E8%AF%AD%E6%B3%95%E8%A7%A3%E6%9E%90%E5%99%A8%2C%E6%94%AF%E6%8C%81%E8%AF%86%E5%88%ABESNEXT%2C%20TYPESCRIPT%2C%22%7D%2C%7B%22x%22%3A802.9768%2C%22y%22%3A198.09923%2C%22width%22%3A84.96799999999996%2C%22height%22%3A13.912090000000006%2C%22text%22%3A%22WBABEL%2FPARSER%22%7D%2C%7B%22x%22%3A941.0205%2C%22y%22%3A204.55084%2C%22width%22%3A156.61250000000007%2C%22height%22%3A13.837559999999996%2C%22text%22%3A%22JSX%E7%AD%89%E5%A4%9A%E7%A7%8D%E8%AF%AD%E6%B3%95%2C%E4%B8%8D%E6%94%AF%E6%8C%81%E6%89%A9%E5%B1%95%22%7D%2C%7B%22x%22%3A495.7744%2C%22y%22%3A216.68301%2C%22width%22%3A108.09299999999996%2C%22height%22%3A13.225819999999999%2C%22text%22%3A%22%E5%B0%86%E6%BA%90%E4%BB%A3%E7%A0%81%E8%A7%A3%E6%9E%90%E6%88%90AST%22%7D%2C%7B%22x%22%3A314.28107%2C%22y%22%3A217.19753%2C%22width%22%3A43.068359999999984%2C%22height%22%3A12.767709999999994%2C%22text%22%3A%22PARSING%22%7D%2C%7B%22x%22%3A941.5716%2C%22y%22%3A237.7077%2C%22width%22%3A249.1672000000001%2C%22height%22%3A14.385320000000007%2C%22text%22%3A%22%E7%94%A8%E4%BA%8E%E9%85%8D%E7%BD%AEBABEL%E6%9D%A5%E6%94%AF%E6%8C%81%E6%9F%90%E7%A7%8D%E8%AF%AD%E6%B3%95.%E5%AE%9E%E9%99%85%E4%B8%8A%E5%B0%B1%E6%98%AF%E9%85%8D%22%7D%2C%7B%22x%22%3A800.39526%2C%22y%22%3A245.00894%2C%22width%22%3A90.16283999999996%2C%22height%22%3A16.202699999999993%2C%22text%22%3A%22SYNTAX%20PLUGINS%22%7D%2C%7B%22x%22%3A942.6934%2C%22y%22%3A253.87288%2C%22width%22%3A98.5883%2C%22height%22%3A11.616989999999987%2C%22text%22%3A%22%E7%BD%AE%40BABEL%2FPARSER%22%7D%2C%7B%22x%22%3A940.1374%2C%22y%22%3A308.20728%2C%22width%22%3A239.29090000000008%2C%22height%22%3A16.57335999999998%2C%22text%22%3A%22AST%20%E9%81%8D%E5%8E%86%E5%99%A8%2C%E5%AE%9E%E7%8E%B0%E4%BA%86%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F%2C%E8%B4%9F%E8%B4%A3%E9%81%8D%E5%8E%86%2C%22%7D%2C%7B%22x%22%3A798.3196%2C%22y%22%3A315.61865%2C%22width%22%3A94.0027%2C%22height%22%3A13.537629999999979%2C%22text%22%3A%22%40BABEL%2FTRAVERSE%22%7D%2C%7B%22x%22%3A940.0142%2C%22y%22%3A324.68518%2C%22width%22%3A165.49170000000015%2C%22height%22%3A12.91143999999997%2C%22text%22%3A%22%E7%BB%B4%E6%8A%A4%E8%8A%82%E7%82%B9%E7%9A%84%E7%8A%B6%E6%80%81%E5%92%8C%E5%85%B3%E8%81%94%E5%85%B3%E7%B3%BB%22%7D%2C%7B%22x%22%3A660.4488%2C%22y%22%3A353.358%2C%22width%22%3A85.99364000000003%2C%22height%22%3A12.506799999999998%2C%22text%22%3A%22PLUGIN%20SYSTEM%22%7D%2C%7B%22x%22%3A492.2217%2C%22y%22%3A354.34225%2C%22width%22%3A120.03622999999999%2C%22height%22%3A13.51218%2C%22text%22%3A%22%E8%BD%AC%E6%8D%A2AST%E4%B8%BA%E9%9C%80%E8%A6%81%E7%9A%84%E6%A0%B7%E5%AD%90%22%7D%2C%7B%22x%22%3A300.04556%2C%22y%22%3A356.2553%2C%22width%22%3A72.40483999999998%2C%22height%22%3A14.236730000000023%2C%22text%22%3A%22TRANSFORMING%22%7D%2C%7B%22x%22%3A940.94763%2C%22y%22%3A362.0113%2C%22width%22%3A208.02047000000005%2C%22height%22%3A14.06286%2C%22text%22%3A%22%E7%94%A8%E4%BA%8E%E6%89%A9%E5%B1%95%20BABEL%20%E6%9D%A5%E5%AF%B9AST%E7%BB%A7%E7%BB%AD%E6%9F%90%E7%A7%8D%E8%BD%AC%E6%8D%A2%22%7D%2C%7B%22x%22%3A791.9372%2C%22y%22%3A366.99805%2C%22width%22%3A106.52430000000004%2C%22height%22%3A13.301170000000013%2C%22text%22%3A%22TRANSFORM%20PLUGINS%22%7D%2C%7B%22x%22%3A791.8512%2C%22y%22%3A479.68066%2C%22width%22%3A103.83070000000009%2C%22height%22%3A12.616860000000031%2C%22text%22%3A%22%40BABEL%2FGENERATOR%22%7D%2C%7B%22x%22%3A495.55695%2C%22y%22%3A483.95322%2C%22width%22%3A104.30371000000008%2C%22height%22%3A16.640100000000018%2C%22text%22%3A%22%E6%89%93%E5%8D%B0AST%E4%B8%BA'%E6%BA%90%E4%BB%A3%E7%A0%81%5C%22%22%7D%2C%7B%22x%22%3A313.43552%2C%22y%22%3A485.93527%2C%22width%22%3A44.18027999999998%2C%22height%22%3A13.49912999999998%2C%22text%22%3A%22PRINTING%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22id%22%3A%22u2474e002%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><p data-lake-id=\"u2c300d58\" id=\"u2c300d58\"><span data-lake-id=\"u609b038b\" id=\"u609b038b\">Babel 是一个 </span><a href=\"https://github.com/lerna/lerna\" target=\"_blank\" data-lake-id=\"ucf08962b\" id=\"ucf08962b\"><span data-lake-id=\"ud6f44a5b\" id=\"ud6f44a5b\">MonoRepo</span></a><span data-lake-id=\"u0e0abcf1\" id=\"u0e0abcf1\"> 项目， 不过组织非常清晰，下面就源码上我们能看到的模块进行一下分类， 配合上面的架构图让你对Babel有个大概的认识:</span></p><p data-lake-id=\"ub57ee3b4\" id=\"ub57ee3b4\"><span data-lake-id=\"ucf050dec\" id=\"ucf050dec\">​</span><br></p><h3 data-lake-id=\"qtNtO\" id=\"qtNtO\"><span data-lake-id=\"u8b927f57\" id=\"u8b927f57\">1. 核心</span></h3><p data-lake-id=\"uc1119487\" id=\"uc1119487\"><code data-lake-id=\"u25526111\" id=\"u25526111\"><span data-lake-id=\"u524a0b3a\" id=\"u524a0b3a\">@babel/core</span></code><span data-lake-id=\"u5285363a\" id=\"u5285363a\"> 这也是上面说的‘微内核’架构中的‘内核’。对于 </span><code data-lake-id=\"u04839f84\" id=\"u04839f84\"><span data-lake-id=\"u0d8d9145\" id=\"u0d8d9145\">babel</span></code><span data-lake-id=\"u0c55e3da\" id=\"u0c55e3da\"> 来说，这个内核主要干这些事情：</span></p><ul list=\"u53121a8f\"><li fid=\"ube0cbb3f\" data-lake-id=\"u8d2a540c\" id=\"u8d2a540c\"><span data-lake-id=\"ud199d3a1\" id=\"ud199d3a1\">加载和处理配置(</span><code data-lake-id=\"u179c115c\" id=\"u179c115c\"><span data-lake-id=\"u286a1c69\" id=\"u286a1c69\">config</span></code><span data-lake-id=\"ubcf3dc23\" id=\"ubcf3dc23\">)</span></li><li fid=\"ube0cbb3f\" data-lake-id=\"u107265a3\" id=\"u107265a3\"><span data-lake-id=\"u95634166\" id=\"u95634166\">加载插件</span></li><li fid=\"ube0cbb3f\" data-lake-id=\"uc9a28b4c\" id=\"uc9a28b4c\"><span data-lake-id=\"ud52c5ebe\" id=\"ud52c5ebe\">调用 </span><code data-lake-id=\"u01fbf85d\" id=\"u01fbf85d\"><span data-lake-id=\"u7a19b842\" id=\"u7a19b842\">Parser</span></code><span data-lake-id=\"ucdb5811b\" id=\"ucdb5811b\"> 进行语法解析，生成 </span><code data-lake-id=\"u4a070dc4\" id=\"u4a070dc4\"><span data-lake-id=\"ue94f2809\" id=\"ue94f2809\">ast</span></code></li><li fid=\"ube0cbb3f\" data-lake-id=\"u39bd4b32\" id=\"u39bd4b32\"><span data-lake-id=\"u93e3aa4d\" id=\"u93e3aa4d\">调用 </span><code data-lake-id=\"uabe9545e\" id=\"uabe9545e\"><span data-lake-id=\"uc761e630\" id=\"uc761e630\">Traverser</span></code><span data-lake-id=\"ua4b3229b\" id=\"ua4b3229b\"> 遍历 </span><code data-lake-id=\"u1a952664\" id=\"u1a952664\"><span data-lake-id=\"ub1abea2e\" id=\"ub1abea2e\">ast</span></code><span data-lake-id=\"uf8d0a4f4\" id=\"uf8d0a4f4\">，并使用访问者模式应用’插件’对 </span><code data-lake-id=\"ud78fc6ba\" id=\"ud78fc6ba\"><span data-lake-id=\"u623e39e9\" id=\"u623e39e9\">ast</span></code><span data-lake-id=\"ua9273253\" id=\"ua9273253\"> 进行转换</span></li><li fid=\"ube0cbb3f\" data-lake-id=\"ucd3c4388\" id=\"ucd3c4388\"><span data-lake-id=\"u07a85fa4\" id=\"u07a85fa4\">生成代码，包括 </span><code data-lake-id=\"ua5bc0b75\" id=\"ua5bc0b75\"><span data-lake-id=\"u1f172a42\" id=\"u1f172a42\">source-map</span></code><span data-lake-id=\"u2f122450\" id=\"u2f122450\"> 转换和源代码生成</span></li></ul><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22import%20*%20as%20babel%20from%20%5C%22%40babel%2Fcore%5C%22%5Cn%5Cnbabel.transform(code%2C%20options%2C%20function%20(err%2C%20result)%20%7B%5Cn%20%20console.log(result)%20%2F%2F%20%7B%20code%2C%20map%2C%20ast%20%7D%5Cn%7D)%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22wq0gE%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h3 data-lake-id=\"QGsG4\" id=\"QGsG4\"><span data-lake-id=\"u9e752191\" id=\"u9e752191\">2. 核心周边支撑</span></h3><ul list=\"uee5d1c24\"><li fid=\"u130f6d1d\" data-lake-id=\"u7ec75771\" id=\"u7ec75771\"><code data-lake-id=\"ucd4605b2\" id=\"ucd4605b2\"><span data-lake-id=\"u0a994e12\" id=\"u0a994e12\">Parser</span></code><span data-lake-id=\"u0b677322\" id=\"u0b677322\">(</span><code data-lake-id=\"u0da8b0f9\" id=\"u0da8b0f9\"><span data-lake-id=\"u3965ee6d\" id=\"u3965ee6d\">@babel/parser</span></code><span data-lake-id=\"u0a9c2072\" id=\"u0a9c2072\">)： 将源代码解析为 </span><code data-lake-id=\"u1da07cf7\" id=\"u1da07cf7\"><span data-lake-id=\"u562ae4d6\" id=\"u562ae4d6\">ast</span></code><span data-lake-id=\"ud8be4a68\" id=\"ud8be4a68\"> 。 它已经内置支持很多语法. 例如 </span><code data-lake-id=\"u7c1f3ed5\" id=\"u7c1f3ed5\"><span data-lake-id=\"u83a0f3d4\" id=\"u83a0f3d4\">JSX</span></code><span data-lake-id=\"uee28de82\" id=\"uee28de82\">、</span><code data-lake-id=\"ub82c1a3e\" id=\"ub82c1a3e\"><span data-lake-id=\"uebb28be3\" id=\"uebb28be3\">TypeScript</span></code><span data-lake-id=\"ue2917689\" id=\"ue2917689\">、</span><code data-lake-id=\"u8e1e5122\" id=\"u8e1e5122\"><span data-lake-id=\"uefb83f67\" id=\"uefb83f67\">flow</span></code><span data-lake-id=\"u5ca65ff1\" id=\"u5ca65ff1\">、以及最新的 </span><code data-lake-id=\"u8b6a6ccd\" id=\"u8b6a6ccd\"><span data-lake-id=\"ub9b4b4bf\" id=\"ub9b4b4bf\">ECMAScript</span></code><span data-lake-id=\"u757525bb\" id=\"u757525bb\"> 规范。目前为了执行效率，</span><code data-lake-id=\"ud73b5fae\" id=\"ud73b5fae\"><span data-lake-id=\"ua20a38df\" id=\"ua20a38df\">Parser</span></code><span data-lake-id=\"ucd162537\" id=\"ucd162537\"> 是</span><a href=\"https://babeljs.io/docs/en/babel-parser#faq\" target=\"_blank\" data-lake-id=\"udfc44dba\" id=\"udfc44dba\"><span data-lake-id=\"u8cc7483b\" id=\"u8cc7483b\">不支持扩展的</span></a><span data-lake-id=\"u1c0007ea\" id=\"u1c0007ea\">，由官方进行维护。如果你要支持自定义语法，可以 </span><code data-lake-id=\"ua735324b\" id=\"ua735324b\"><span data-lake-id=\"u509e3c8e\" id=\"u509e3c8e\">fork</span></code><span data-lake-id=\"uf237d32d\" id=\"uf237d32d\"> 它，不过这种场景非常少。</span></li><li fid=\"u130f6d1d\" data-lake-id=\"u351953cd\" id=\"u351953cd\"><code data-lake-id=\"u5aab943b\" id=\"u5aab943b\"><span data-lake-id=\"ue4dffcc5\" id=\"ue4dffcc5\">Traverser</span></code><span data-lake-id=\"u246f2eaa\" id=\"u246f2eaa\">(</span><code data-lake-id=\"u511a6d64\" id=\"u511a6d64\"><span data-lake-id=\"ud733388a\" id=\"ud733388a\">@babel/traverse</span></code><span data-lake-id=\"uc82e276b\" id=\"uc82e276b\">)： 实现了</span><strong><span data-lake-id=\"u7d02e21b\" id=\"u7d02e21b\">访问者模式</span></strong><span data-lake-id=\"u593ac33c\" id=\"u593ac33c\">，对 </span><code data-lake-id=\"u75e2ad0f\" id=\"u75e2ad0f\"><span data-lake-id=\"uc472df21\" id=\"uc472df21\">ast</span></code><span data-lake-id=\"u325d3d10\" id=\"u325d3d10\"> 进行遍历，转换插件会通过它获取感兴趣的 </span><code data-lake-id=\"u8e828421\" id=\"u8e828421\"><span data-lake-id=\"u19560149\" id=\"u19560149\">ast</span></code><span data-lake-id=\"u8166512f\" id=\"u8166512f\"> 节点，对节点继续操作，下文会详细介绍</span><strong><span data-lake-id=\"u704166fc\" id=\"u704166fc\">访问器模式</span></strong><span data-lake-id=\"u46de4309\" id=\"u46de4309\">。</span></li></ul><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%20%E4%BD%BF%E7%94%A8%20%40babel%2Fparser%20%40babel%2Ftraverse%20%E4%B8%80%E8%B5%B7%E9%81%8D%E5%8E%86%E5%92%8C%E6%9B%B4%E6%96%B0%E8%8A%82%E7%82%B9%3A%5Cnimport%20*%20as%20parser%20from%20%5C%22%40babel%2Fparser%5C%22%5Cnimport%20traverse%20from%20%5C%22%40babel%2Ftraverse%5C%22%5Cn%5Cnconst%20code%20%3D%20%60function%20square(n)%20%7B%5Cn%20%20return%20n%20*%20n%5Cn%7D%60%5Cn%5Cnconst%20ast%20%3D%20parser.parse(code)%5Cn%5Cntraverse(ast%2C%20%7B%5Cn%20%20enter(path)%20%7B%5Cn%20%20%20%20if%20(path.isIdentifier(%7B%20name%3A%20%5C%22n%5C%22%20%7D))%20%7B%5Cn%20%20%20%20%20%20path.node.name%20%3D%20%5C%22x%5C%22%5Cn%20%20%20%20%7D%5Cn%20%20%7D%2C%5Cn%20%20%2F%2F%20%E6%AD%A4%E5%A4%96%EF%BC%8C%E6%88%91%E4%BB%AC%E5%8F%AF%E4%BB%A5%E9%92%88%E5%AF%B9%E8%AF%AD%E6%B3%95%E6%A0%91%E4%B8%AD%E7%9A%84%E7%89%B9%E5%AE%9A%E8%8A%82%E7%82%B9%E7%B1%BB%E5%9E%8B%5Cn%20%20FunctionDeclaration%3A%20function(path)%20%7B%5Cn%20%20%20%20path.node.id.name%20%3D%20%5C%22x%5C%22%5Cn%20%20%7D%5Cn%7D)%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22YFWvH%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><ul list=\"uee5d1c24\" start=\"3\"><li fid=\"u130f6d1d\" data-lake-id=\"u8aef0ee5\" id=\"u8aef0ee5\"><code data-lake-id=\"u756cfe36\" id=\"u756cfe36\"><span data-lake-id=\"u2bfd1be2\" id=\"u2bfd1be2\">generator</span></code><span data-lake-id=\"u2ed57cc9\" id=\"u2ed57cc9\">(</span><code data-lake-id=\"ude5a8edd\" id=\"ude5a8edd\"><span data-lake-id=\"u9bfe30d9\" id=\"u9bfe30d9\">@babel/generator</span></code><span data-lake-id=\"u85d50db6\" id=\"u85d50db6\">)： 将 </span><code data-lake-id=\"u001b0e34\" id=\"u001b0e34\"><span data-lake-id=\"u68e7b095\" id=\"u68e7b095\">ast</span></code><span data-lake-id=\"u7a53f793\" id=\"u7a53f793\"> 转换为源代码，支持 </span><code data-lake-id=\"u510d468b\" id=\"u510d468b\"><span data-lake-id=\"ucf140da1\" id=\"ucf140da1\">source-map</span></code></li></ul><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%20%40babel%2Fgenerator%20%E6%98%AF%20Babel%20%E7%9A%84%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%E5%99%A8%EF%BC%8C%E5%AE%83%E5%B0%86%E8%BD%AC%E6%8D%A2%E6%88%90%E6%BA%90%E4%BB%A3%E7%A0%81%5Cnimport%20parser%20from%20%5C%22%40babel%2Fparser%5C%22%5Cnimport%20generate%20from%20%5C%22%40babel%2Fgenerator%5C%22%5Cn%5Cnconst%20code%20%3D%20%60function%20square(n)%20%7B%5Cn%20%20return%20n%20*%20n%5Cn%7D%60%5Cn%5Cnconst%20ast%20%3D%20parser.parse(code)%5Cn%5Cngenerate(ast%2C%20%7B%7D%2C%20code)%5Cn%2F%2F%20%7B%5Cn%2F%2F%20%20%20code%3A%20%5C%22...%5C%22%2C%5Cn%2F%2F%20%20%20map%3A%20%5C%22...%5C%22%2C%5Cn%2F%2F%20%7D%5Cn%5Cn%2F%2F%20%E6%88%96%E8%80%85%E4%BC%A0%E9%80%92%E5%8F%82%E6%95%B0%5Cngenerate(ast%2C%20%7B%5Cn%20%20retainLines%3A%20false%2C%5Cn%20%20compact%3A%20%5C%22auto%5C%22%2C%5Cn%20%20concise%3A%20false%2C%5Cn%20%20quotes%3A%20%5C%22double%5C%22%2C%5Cn%20%20%2F%2F%20...%5Cn%7D%2C%20code)%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22lWPe2%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h3 data-lake-id=\"MKkFE\" id=\"MKkFE\"><span data-lake-id=\"ufc9227a8\" id=\"ufc9227a8\">3. 插件</span></h3><p data-lake-id=\"uc08f6ee6\" id=\"uc08f6ee6\"><span data-lake-id=\"u47fe0781\" id=\"u47fe0781\">打开 </span><code data-lake-id=\"ucc06abd5\" id=\"ucc06abd5\"><span data-lake-id=\"u39aeba22\" id=\"u39aeba22\">babel</span></code><span data-lake-id=\"ube5c5921\" id=\"ube5c5921\"> 的源代码，会发现有好几种类型的 </span><strong><span data-lake-id=\"ue2a6b47c\" id=\"ue2a6b47c\">&quot;插件&quot;</span></strong><span data-lake-id=\"uac8ed6de\" id=\"uac8ed6de\">。</span></p><ul list=\"u292c3cfd\"><li fid=\"ua0cbce27\" data-lake-id=\"u4022ad8b\" id=\"u4022ad8b\"><strong><span data-lake-id=\"u1cc122df\" id=\"u1cc122df\">语法插件</span></strong><span data-lake-id=\"u19b2a9db\" id=\"u19b2a9db\">(</span><code data-lake-id=\"u68aad2dd\" id=\"u68aad2dd\"><span data-lake-id=\"ubf932a46\" id=\"ubf932a46\">@babel/plugin-syntax-*</span></code><span data-lake-id=\"u8cc7b9b9\" id=\"u8cc7b9b9\">)：上面说了 </span><code data-lake-id=\"u992fb32d\" id=\"u992fb32d\"><span data-lake-id=\"ud1685336\" id=\"ud1685336\">@babel/parser</span></code><span data-lake-id=\"u02143fe8\" id=\"u02143fe8\"> 已经支持了很多 </span><code data-lake-id=\"u3007f708\" id=\"u3007f708\"><span data-lake-id=\"u5fc3d156\" id=\"u5fc3d156\">JavaScript</span></code><span data-lake-id=\"u369644a9\" id=\"u369644a9\"> 语法特性，</span><code data-lake-id=\"u54cc1870\" id=\"u54cc1870\"><span data-lake-id=\"u819bb035\" id=\"u819bb035\">Parser</span></code><span data-lake-id=\"u62d58929\" id=\"u62d58929\"> 也不支持扩展。因此 </span><code data-lake-id=\"u5e367090\" id=\"u5e367090\"><span data-lake-id=\"uaeae9a99\" id=\"uaeae9a99\">plugin-syntax-*</span></code><span data-lake-id=\"u459624d0\" id=\"u459624d0\"> 实际上只是用于开启或者配置 </span><code data-lake-id=\"ua21197e2\" id=\"ua21197e2\"><span data-lake-id=\"uf686d7a9\" id=\"uf686d7a9\">parser</span></code><span data-lake-id=\"u43e3d670\" id=\"u43e3d670\"> 的某个功能特性。一般用户不需要关心这个，</span><code data-lake-id=\"u47228c36\" id=\"u47228c36\"><span data-lake-id=\"u4c73a7e7\" id=\"u4c73a7e7\">transform</span></code><span data-lake-id=\"u43451d26\" id=\"u43451d26\"> 插件里面已经包含了相关的 </span><code data-lake-id=\"u6bd53c24\" id=\"u6bd53c24\"><span data-lake-id=\"u86361991\" id=\"u86361991\">plugin-syntax-*</span></code><span data-lake-id=\"u8b137f6a\" id=\"u8b137f6a\"> 插件了。用户也可以通过 </span><a href=\"https://babeljs.io/docs/en/options#parseropts\" target=\"_blank\" data-lake-id=\"uaba53288\" id=\"uaba53288\"><span data-lake-id=\"uc11e00e8\" id=\"uc11e00e8\">parserOpts</span></a><span data-lake-id=\"u5ebfa25a\" id=\"u5ebfa25a\"> 配置项来直接配置 </span><code data-lake-id=\"ub776c29a\" id=\"ub776c29a\"><span data-lake-id=\"u84f26061\" id=\"u84f26061\">Parser</span></code></li><li fid=\"ua0cbce27\" data-lake-id=\"u0c2fdca4\" id=\"u0c2fdca4\"><strong><span data-lake-id=\"ud2573ed5\" id=\"ud2573ed5\">转换插件</span></strong><span data-lake-id=\"u857933a1\" id=\"u857933a1\">： 用于对  </span><code data-lake-id=\"uec09693a\" id=\"uec09693a\"><span data-lake-id=\"ue2868f76\" id=\"ue2868f76\">ast</span></code><span data-lake-id=\"u4c6a8f2e\" id=\"u4c6a8f2e\"> 进行转换, 实现转换为 </span><code data-lake-id=\"uf6d188bc\" id=\"uf6d188bc\"><span data-lake-id=\"u53df22ff\" id=\"u53df22ff\">es5</span></code><span data-lake-id=\"u6c2bfaa1\" id=\"u6c2bfaa1\"> 代码、压缩、功能增强等目的。</span><code data-lake-id=\"u981954bf\" id=\"u981954bf\"><span data-lake-id=\"u04508e14\" id=\"u04508e14\">babel</span></code><span data-lake-id=\"u63203320\" id=\"u63203320\"> 仓库将转换插件划分为两种(只是命名上的区别)：</span></li></ul><ul list=\"u292c3cfd\" data-lake-indent=\"1\"><li fid=\"uef8e9317\" data-lake-id=\"u3efbe038\" id=\"u3efbe038\"><code data-lake-id=\"ubeb2853c\" id=\"ubeb2853c\"><span data-lake-id=\"u3b8ac417\" id=\"u3b8ac417\">@babel/plugin-transform-*</span></code><span data-lake-id=\"ua1df011b\" id=\"ua1df011b\">： 普通的转换插件</span></li><li fid=\"uef8e9317\" data-lake-id=\"ud1a1cdcb\" id=\"ud1a1cdcb\"><code data-lake-id=\"uf1332e41\" id=\"uf1332e41\"><span data-lake-id=\"u24bec9eb\" id=\"u24bec9eb\">@babel/plugin-proposal-*</span></code><span data-lake-id=\"u6f0f0113\" id=\"u6f0f0113\">： 还在 </span><strong><span data-lake-id=\"u195ba97f\" id=\"u195ba97f\">&quot;提议阶段&quot;</span></strong><span data-lake-id=\"uc6cb7077\" id=\"uc6cb7077\">(非正式)的语言特性, 目前有</span><a href=\"https://babeljs.io/docs/en/next/plugins#experimental\" target=\"_blank\" data-lake-id=\"u6cee06b8\" id=\"u6cee06b8\"><span data-lake-id=\"u6ef31300\" id=\"u6ef31300\">这些</span></a></li></ul><ul list=\"u292c3cfd\" start=\"3\"><li fid=\"ua0cbce27\" data-lake-id=\"u45761153\" id=\"u45761153\"><strong><span data-lake-id=\"u2afc3bfe\" id=\"u2afc3bfe\">预定义集合(</span></strong><code data-lake-id=\"u95ceed63\" id=\"u95ceed63\"><strong><span data-lake-id=\"u2e922e0e\" id=\"u2e922e0e\">@babel/preset-*</span></strong></code><strong><span data-lake-id=\"uf8a39d8b\" id=\"uf8a39d8b\">)</span></strong><span data-lake-id=\"u1bb04159\" id=\"u1bb04159\">： 插件集合或者分组，主要方便用户对插件进行管理和使用。</span></li></ul><ul list=\"u292c3cfd\" data-lake-indent=\"1\"><li fid=\"ua0cbce27\" data-lake-id=\"ue20e5afb\" id=\"ue20e5afb\"><span data-lake-id=\"uce2b5a5e\" id=\"uce2b5a5e\">比如 </span><code data-lake-id=\"u5efa9dcf\" id=\"u5efa9dcf\"><span data-lake-id=\"ubde15a8c\" id=\"ubde15a8c\">@babel/preset-env</span></code><span data-lake-id=\"ud479d1d7\" id=\"ud479d1d7\"> 含括所有的标准的最新特性</span></li><li fid=\"ua0cbce27\" data-lake-id=\"u9518dd1d\" id=\"u9518dd1d\"><span data-lake-id=\"u9a04a82a\" id=\"u9a04a82a\">比如 </span><code data-lake-id=\"ua7806a93\" id=\"ua7806a93\"><span data-lake-id=\"ue6ddd748\" id=\"ue6ddd748\">@babel/preset-react</span></code><span data-lake-id=\"u004789ea\" id=\"u004789ea\"> 含括所有 </span><code data-lake-id=\"u1a7ccbff\" id=\"u1a7ccbff\"><span data-lake-id=\"u4836b786\" id=\"u4836b786\">react</span></code><span data-lake-id=\"ue8b8a309\" id=\"ue8b8a309\"> 相关的插件</span></li><li fid=\"ua0cbce27\" data-lake-id=\"u86deba16\" id=\"u86deba16\"><span data-lake-id=\"u23606669\" id=\"u23606669\">比如 </span><code data-lake-id=\"u63a2590e\" id=\"u63a2590e\"><span data-lake-id=\"ua584d72b\" id=\"ua584d72b\">@babel/typescript</span></code><span data-lake-id=\"u20a35a2c\" id=\"u20a35a2c\">包含所有 </span><code data-lake-id=\"uf5d93a24\" id=\"uf5d93a24\"><span data-lake-id=\"u6e968ee1\" id=\"u6e968ee1\">typescript</span></code><span data-lake-id=\"u9fa5b5c9\" id=\"u9fa5b5c9\"> 相关的插件</span></li></ul><h3 data-lake-id=\"Kxctu\" id=\"Kxctu\"><span data-lake-id=\"u4c0f40db\" id=\"u4c0f40db\">4. 插件开发辅助</span></h3><ul list=\"u7751faa3\"><li fid=\"u32dda399\" data-lake-id=\"u10635e05\" id=\"u10635e05\"><code data-lake-id=\"ub24ce8ea\" id=\"ub24ce8ea\"><span data-lake-id=\"u2270f37c\" id=\"u2270f37c\">@babel/template</span></code><span data-lake-id=\"u31bf7096\" id=\"u31bf7096\">： 某些场景直接操作 </span><code data-lake-id=\"u2e044999\" id=\"u2e044999\"><span data-lake-id=\"u4dea71ae\" id=\"u4dea71ae\">ast</span></code><span data-lake-id=\"uafdcb171\" id=\"uafdcb171\"> 太麻烦，就比如我们直接操作 </span><code data-lake-id=\"ubf600885\" id=\"ubf600885\"><span data-lake-id=\"u51e619fb\" id=\"u51e619fb\">dom</span></code><span data-lake-id=\"u359f8165\" id=\"u359f8165\"> 一样，所以 </span><code data-lake-id=\"u5a91b2ef\" id=\"u5a91b2ef\"><span data-lake-id=\"ucf14eea2\" id=\"ucf14eea2\">babel</span></code><span data-lake-id=\"u3c7766f5\" id=\"u3c7766f5\"> 实现了这么一个简单的模板引擎，可以将字符串代码转换为 </span><code data-lake-id=\"uf1d45c09\" id=\"uf1d45c09\"><span data-lake-id=\"ua94be999\" id=\"ua94be999\">ast</span></code><span data-lake-id=\"ucd71c01d\" id=\"ucd71c01d\">。比如在生成一些辅助代码(</span><code data-lake-id=\"u6c6de3fb\" id=\"u6c6de3fb\"><span data-lake-id=\"u5c4b0a65\" id=\"u5c4b0a65\">helper</span></code><span data-lake-id=\"u21a2d843\" id=\"u21a2d843\">)时会用到这个库</span></li><li fid=\"u32dda399\" data-lake-id=\"uab94861e\" id=\"uab94861e\"><code data-lake-id=\"uac9f82f8\" id=\"uac9f82f8\"><span data-lake-id=\"uc6a3308e\" id=\"uc6a3308e\">@babel/types</span></code><span data-lake-id=\"u13eb82c0\" id=\"u13eb82c0\">： </span><code data-lake-id=\"u0adb6fb7\" id=\"u0adb6fb7\"><span data-lake-id=\"ud51dc6ec\" id=\"ud51dc6ec\">ast</span></code><span data-lake-id=\"uc3dd3620\" id=\"uc3dd3620\"> 节点构造器和断言，插件开发时使用很频繁</span></li><li fid=\"u32dda399\" data-lake-id=\"u7147d6e8\" id=\"u7147d6e8\"><code data-lake-id=\"uf5ef8eb5\" id=\"uf5ef8eb5\"><span data-lake-id=\"ub0b49c8c\" id=\"ub0b49c8c\">@babel/helper-*</span></code><span data-lake-id=\"u88ffbb0b\" id=\"u88ffbb0b\">： 一些辅助器，用于辅助插件开发，例如：简化 </span><code data-lake-id=\"ua3561726\" id=\"ua3561726\"><span data-lake-id=\"u82622251\" id=\"u82622251\">ast</span></code><span data-lake-id=\"u3aa44fbd\" id=\"u3aa44fbd\"> 操作</span></li><li fid=\"u32dda399\" data-lake-id=\"u9b490c7e\" id=\"u9b490c7e\"><code data-lake-id=\"uffd05f19\" id=\"uffd05f19\"><span data-lake-id=\"u51802edd\" id=\"u51802edd\">@babel/helper</span></code><span data-lake-id=\"u787fb8ac\" id=\"u787fb8ac\">： 辅助代码，单纯的语法转换可能无法让代码运行起来，比如低版本浏览器无法识别 </span><code data-lake-id=\"u49843d8a\" id=\"u49843d8a\"><span data-lake-id=\"ua09dd205\" id=\"ua09dd205\">class</span></code><span data-lake-id=\"u0ba19f64\" id=\"u0ba19f64\">关键字，这时候需要添加辅助代码，对 </span><code data-lake-id=\"ua884921d\" id=\"ua884921d\"><span data-lake-id=\"ufa74ef70\" id=\"ufa74ef70\">class</span></code><span data-lake-id=\"u6f13b654\" id=\"u6f13b654\"> 进行模拟。</span></li></ul><h3 data-lake-id=\"RQWjE\" id=\"RQWjE\"><span data-lake-id=\"u87b490e4\" id=\"u87b490e4\">5. 工具</span></h3><ul list=\"u008b10f3\"><li fid=\"u561def6a\" data-lake-id=\"uda17538f\" id=\"uda17538f\"><code data-lake-id=\"udf469390\" id=\"udf469390\"><span data-lake-id=\"ua229f975\" id=\"ua229f975\">@babel/node</span></code><span data-lake-id=\"u75020794\" id=\"u75020794\">： </span><code data-lake-id=\"u39fd413f\" id=\"u39fd413f\"><span data-lake-id=\"ucd0100b7\" id=\"ucd0100b7\">Node.js CLI</span></code><span data-lake-id=\"ud084d2e0\" id=\"ud084d2e0\">，通过它直接运行需要 </span><code data-lake-id=\"uc77f6af8\" id=\"uc77f6af8\"><span data-lake-id=\"ub8903e51\" id=\"ub8903e51\">babel</span></code><span data-lake-id=\"u531e6793\" id=\"u531e6793\"> 处理的 </span><code data-lake-id=\"u7973b29a\" id=\"u7973b29a\"><span data-lake-id=\"u038a4919\" id=\"u038a4919\">javaScript</span></code><span data-lake-id=\"uaca4a858\" id=\"uaca4a858\"> 文件</span></li><li fid=\"u561def6a\" data-lake-id=\"u899b42a2\" id=\"u899b42a2\"><code data-lake-id=\"u45d4851e\" id=\"u45d4851e\"><span data-lake-id=\"ud9ff8724\" id=\"ud9ff8724\">@babel/register</span></code><span data-lake-id=\"uebebfe07\" id=\"uebebfe07\">： </span><code data-lake-id=\"u9a8c50e2\" id=\"u9a8c50e2\"><span data-lake-id=\"uaa740c10\" id=\"uaa740c10\">Patch NodeJs</span></code><span data-lake-id=\"ufea150cf\" id=\"ufea150cf\">  的 </span><code data-lake-id=\"ua6c4350a\" id=\"ua6c4350a\"><span data-lake-id=\"u2b95e202\" id=\"u2b95e202\">require</span></code><span data-lake-id=\"u4e2a9a82\" id=\"u4e2a9a82\"> 方法，支持导入需要 </span><code data-lake-id=\"u908397a4\" id=\"u908397a4\"><span data-lake-id=\"u003366b7\" id=\"u003366b7\">babel</span></code><span data-lake-id=\"u585bba1a\" id=\"u585bba1a\"> 处理的 </span><code data-lake-id=\"ud16512ce\" id=\"ud16512ce\"><span data-lake-id=\"u73cbe41b\" id=\"u73cbe41b\">javaScript</span></code><span data-lake-id=\"u48442f97\" id=\"u48442f97\"> 模块</span></li><li fid=\"u561def6a\" data-lake-id=\"u8dfa2654\" id=\"u8dfa2654\"><code data-lake-id=\"u33f74692\" id=\"u33f74692\"><span data-lake-id=\"ufca68a56\" id=\"ufca68a56\">@babel/cli</span></code><span data-lake-id=\"u7dbe1d64\" id=\"u7dbe1d64\">： </span><code data-lake-id=\"u7013ba23\" id=\"u7013ba23\"><span data-lake-id=\"u3a7041f8\" id=\"u3a7041f8\">CLI</span></code><span data-lake-id=\"u66a433b5\" id=\"u66a433b5\"> 工具</span></li></ul><h2 data-lake-id=\"xdUAd\" id=\"xdUAd\"><span data-lake-id=\"u431ac62d\" id=\"u431ac62d\">编写 Babel 插件</span></h2><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%20%E6%BA%90%E4%BB%A3%E7%A0%81%5Cnfoo%20%3D%3D%3D%20bar%3B%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22o55Ti%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"udecb12cd\" id=\"udecb12cd\"><span data-lake-id=\"u55e1e80a\" id=\"u55e1e80a\">其 </span><code data-lake-id=\"uf080fb36\" id=\"uf080fb36\"><span data-lake-id=\"u6ee5358d\" id=\"u6ee5358d\">AST</span></code><span data-lake-id=\"u4e9318c7\" id=\"u4e9318c7\"> 形式如下：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%7B%5Cn%20%20type%3A%20%5C%22BinaryExpression%5C%22%2C%5Cn%20%20operator%3A%20%5C%22%3D%3D%3D%5C%22%2C%5Cn%20%20left%3A%20%7B%5Cn%20%20%20%20type%3A%20%5C%22Identifier%5C%22%2C%5Cn%20%20%20%20name%3A%20%5C%22foo%5C%22%5Cn%20%20%7D%2C%5Cn%20%20right%3A%20%7B%5Cn%20%20%20%20type%3A%20%5C%22Identifier%5C%22%2C%5Cn%20%20%20%20name%3A%20%5C%22bar%5C%22%5Cn%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22cT4Ei%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"ub45fa182\" id=\"ub45fa182\"><span data-lake-id=\"u1e84bdd6\" id=\"u1e84bdd6\">添加 </span><code data-lake-id=\"u22b8eb46\" id=\"u22b8eb46\"><span data-lake-id=\"udd3143ac\" id=\"udd3143ac\">BinaryExpression</span></code><span data-lake-id=\"uee829b06\" id=\"uee829b06\">访问者(</span><code data-lake-id=\"u571db17c\" id=\"u571db17c\"><span data-lake-id=\"u6ea4d290\" id=\"u6ea4d290\">visitor</span></code><span data-lake-id=\"u15013520\" id=\"u15013520\">)方法开始：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22export%20default%20function(babel)%20%7B%5Cn%20%20const%20%7B%20types%3A%20t%20%7D%20%3D%20babel%5Cn%20%20%5Cn%20%20return%20%7B%5Cn%20%20%20%20visitor%3A%20%7B%5Cn%20%20%20%20%20%20BinaryExpression(path)%20%7B%5Cn%20%20%20%20%20%20%20%20if%20(path.node.operator%20!%3D%3D%20%5C%22%3D%3D%3D%5C%22)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20return%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20path.node.left%20%3D%20t.identifier(%5C%22sebmck%5C%22)%5Cn%20%20%20%20%20%20%7D%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22GQE5Z%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u9e501a85\" id=\"u9e501a85\"><span data-lake-id=\"u181464c2\" id=\"u181464c2\">运行插件后可以得到：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22sebmck%20%3D%3D%3D%20bar%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22YQsFY%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u3ea441a2\" id=\"u3ea441a2\"><span data-lake-id=\"udab4aebb\" id=\"udab4aebb\">接下来需要替换 </span><code data-lake-id=\"ua2814a75\" id=\"ua2814a75\"><span data-lake-id=\"ua40ffdd0\" id=\"ua40ffdd0\">right</span></code><span data-lake-id=\"ub77b440b\" id=\"ub77b440b\"> 属性</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22export%20default%20function(babel)%20%7B%5Cn%20%20const%20%7B%20types%3A%20t%20%7D%20%3D%20babel%5Cn%20%20%5Cn%20%20return%20%7B%5Cn%20%20%20%20visitor%3A%20%7B%5Cn%20%20%20%20%20%20BinaryExpression(path)%20%7B%5Cn%20%20%20%20%20%20%20%20if%20(path.node.operator%20!%3D%3D%20%5C%22%3D%3D%3D%5C%22)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20return%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20path.node.left%20%3D%20t.identifier(%5C%22sebmck%5C%22)%5Cn%20%20%20%20%20%20%20%20path.node.right%20%3D%20t.identifier(%5C%22dork%5C%22)%5Cn%20%20%20%20%20%20%7D%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22OkJdw%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u7a0191fa\" id=\"u7a0191fa\"><span data-lake-id=\"u84f99a1e\" id=\"u84f99a1e\">最终结果：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22sebmck%20%3D%3D%3D%20dork%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22RgsLF%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card>",
  "body_draft_lake": "",
  "public": 0,
  "status": 1,
  "view_status": 0,
  "read_status": 1,
  "likes_count": 0,
  "comments_count": 0,
  "content_updated_at": "2022-04-26T15:34:58.000Z",
  "deleted_at": null,
  "created_at": "2022-04-04T11:33:25.000Z",
  "updated_at": "2022-04-26T15:35:12.000Z",
  "published_at": "2022-04-26T15:35:12.000Z",
  "first_published_at": "2022-04-04T11:33:25.145Z",
  "word_count": 1642,
  "cover": "https://cdn.nlark.com/yuque/0/2022/png/732231/1647834450045-c103406c-5882-49c4-8610-f3dcea673daf.png",
  "description": "Babel 处理步骤babel 大概分为三个部分：解析 parse、转换 transform、生成 generate解析 parse将代码转换为 ast 抽象语法树词法分析将字符串形式的代码转换为令牌 token 流，即语法片段组成的数组n * n  [   { type: { ... }, ...",
  "custom_description": null,
  "hits": 0,
  "_serializer": "v2.doc_detail"
}