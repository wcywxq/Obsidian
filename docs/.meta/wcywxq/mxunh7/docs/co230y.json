{
  "id": 72212048,
  "slug": "co230y",
  "title": "Vuex",
  "book_id": 26225124,
  "book": {
    "id": 26225124,
    "type": "Book",
    "slug": "mxunh7",
    "name": "八股文 eight-part essay writing",
    "user_id": 732231,
    "description": "前端八股文",
    "creator_id": 732231,
    "public": 0,
    "items_count": 239,
    "likes_count": 0,
    "watches_count": 1,
    "content_updated_at": "2023-11-11T18:15:57.023Z",
    "updated_at": "2023-11-11T18:15:57.000Z",
    "created_at": "2022-04-04T11:31:45.000Z",
    "namespace": "wcywxq/mxunh7",
    "user": {
      "id": 732231,
      "type": "User",
      "login": "wcywxq",
      "name": "magic",
      "description": null,
      "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/732231/1606968271774-avatar/886ad88b-d2cc-4c9e-a674-f70eb51a679c.png",
      "books_count": 18,
      "public_books_count": 0,
      "followers_count": 0,
      "following_count": 0,
      "created_at": "2020-01-08T14:21:31.000Z",
      "updated_at": "2023-11-13T09:32:35.000Z",
      "_serializer": "v2.user"
    },
    "_serializer": "v2.book"
  },
  "user_id": 732231,
  "creator": {
    "id": 732231,
    "type": "User",
    "login": "wcywxq",
    "name": "magic",
    "description": null,
    "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/732231/1606968271774-avatar/886ad88b-d2cc-4c9e-a674-f70eb51a679c.png",
    "books_count": 18,
    "public_books_count": 0,
    "followers_count": 0,
    "following_count": 0,
    "created_at": "2020-01-08T14:21:31.000Z",
    "updated_at": "2023-11-13T09:32:35.000Z",
    "_serializer": "v2.user"
  },
  "format": "lake",
  "body": "Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。每一个 Vuex 应用的核心就是 store（仓库）。store 基本上就是一个容器，它包含应用中大部分的状态 ( state )。\n\n1. Vuex 的状态存储是响应式的。当 Vue 组件从 store 中读取状态的时候，若 store 中的状态发生变化，那么相应的组件也会相应地得到高效更新。\n2. 改变 store 中的状态的唯一途径就是显式地提交 (commit) mutation。这样使得我们可以方便地跟踪每一个状态的变化。\n\n主要包括以下几个模块：\n\n- State：定义了应用状态的数据结构，可以在这里设置默认的初始状态\n- Getter：允许组件从 Store 中获取数据，mapGetters 辅助函数仅仅是将 store 中的 getter 映射到局部计算属性\n- Mutation：是唯一更改 store 中状态的方法，且必须是同步函数\n- Action：用于提交 mutation，而不是直接变更状态，可以包含任意异步操作\n- Module：允许将单一的 Store 拆分为多个 store 且同时保存在单一的状态树中\n\n<a name=\"tZl8m\"></a>\n### Redux 和 Vuex 有什么区别，它们的共同思想\n<a name=\"n2K66\"></a>\n### Redux 和 Vuex 区别\n\n- Vuex 改进了 Redux 中的 Action 和 Reducer 函数，以 mutations 变化函数取代 Reducer，无需 switch，只需在对应的  mutation 函数里改变 state 值即可\n- Vuex 由于 Vue 自动重新渲染的特性，无需订阅重新渲染函数，只要生成新的 State 即可\n- Vuex 数据流的顺序是：View 调用 store.commit 提交对应的请求到 Store 中对应的 mutation 函数-> store 改变（vue 检测到数据变化自动渲染）\n\n通俗点理解就是，vuex 弱化 dispatch，通过 commit 进行 store 状态的一次更变；取消了 action 概念，不必传入特定的 action 形式进行指定变更;弱化 reducer，基于 commit 参数直接对数据进行转变，使得框架更加简易;\n<a name=\"pKtvY\"></a>\n### 共同思想\n\n- 单—的数据源\n- 变化可以预测\n\n本质上：redux与vuex都是对mvvm思想的服务，将数据从视图中抽离的一种方案; 形式上：vuex借鉴了redux，将store作为全局的数据中心，进行mode管理;\n",
  "body_draft": "",
  "body_html": "<!doctype html><p data-lake-id=\"u8344556a\"><span>Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。每一个 Vuex 应用的核心就是 store（仓库）。store 基本上就是一个容器，它包含应用中大部分的状态 ( state )。</span></p><ol><li><span>Vuex 的状态存储是响应式的。当 Vue 组件从 store 中读取状态的时候，若 store 中的状态发生变化，那么相应的组件也会相应地得到高效更新。</span></li><li><span>改变 store 中的状态的唯一途径就是显式地提交 (commit) mutation。这样使得我们可以方便地跟踪每一个状态的变化。</span></li></ol><p data-lake-id=\"uc9e7d83a\"><span>主要包括以下几个模块：</span></p><ul><li><span>State：定义了应用状态的数据结构，可以在这里设置默认的初始状态</span></li><li><span>Getter：允许组件从 Store 中获取数据，mapGetters 辅助函数仅仅是将 store 中的 getter 映射到局部计算属性</span></li><li><span>Mutation：是唯一更改 store 中状态的方法，且必须是同步函数</span></li><li><span>Action：用于提交 mutation，而不是直接变更状态，可以包含任意异步操作</span></li><li><span>Module：允许将单一的 Store 拆分为多个 store 且同时保存在单一的状态树中</span></li></ul><p data-lake-id=\"u3169b111\"><span>​</span><br /></p><h3 id=\"tZl8m\"><span>Redux 和 Vuex 有什么区别，它们的共同思想</span></h3><h3 id=\"n2K66\"><span>Redux 和 Vuex 区别</span></h3><ul><li><span>Vuex 改进了 Redux 中的 Action 和 Reducer 函数，以 mutations 变化函数取代 Reducer，无需 switch，只需在对应的  mutation 函数里改变 state 值即可</span></li><li><span>Vuex 由于 Vue 自动重新渲染的特性，无需订阅重新渲染函数，只要生成新的 State 即可</span></li><li><span>Vuex 数据流的顺序是：View 调用 store.commit 提交对应的请求到 Store 中对应的 mutation 函数-&gt; store 改变（vue 检测到数据变化自动渲染）</span></li></ul><p data-lake-id=\"u962d8e5b\"><span>通俗点理解就是，vuex 弱化 dispatch，通过 commit 进行 store 状态的一次更变；取消了 action 概念，不必传入特定的 action 形式进行指定变更;弱化 reducer，基于 commit 参数直接对数据进行转变，使得框架更加简易;</span></p><h3 id=\"pKtvY\"><span>共同思想</span></h3><ul><li><span>单—的数据源</span></li><li><span>变化可以预测</span></li></ul><p data-lake-id=\"u573b9117\"><span>本质上：redux与vuex都是对mvvm思想的服务，将数据从视图中抽离的一种方案; 形式上：vuex借鉴了redux，将store作为全局的数据中心，进行mode管理;</span></p>",
  "body_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"viewport\" content=\"adapt\" /><p data-lake-id=\"u8344556a\" id=\"u8344556a\"><span data-lake-id=\"ud10d897c\" id=\"ud10d897c\">Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。每一个 Vuex 应用的核心就是 store（仓库）。store 基本上就是一个容器，它包含应用中大部分的状态 ( state )。</span></p><ol list=\"u33af164f\"><li fid=\"ub70d7bea\" data-lake-id=\"u26b93c0f\" id=\"u26b93c0f\"><span data-lake-id=\"ud9ca3726\" id=\"ud9ca3726\">Vuex 的状态存储是响应式的。当 Vue 组件从 store 中读取状态的时候，若 store 中的状态发生变化，那么相应的组件也会相应地得到高效更新。</span></li><li fid=\"ub70d7bea\" data-lake-id=\"ue4ad7e3a\" id=\"ue4ad7e3a\"><span data-lake-id=\"uce6d2738\" id=\"uce6d2738\">改变 store 中的状态的唯一途径就是显式地提交 (commit) mutation。这样使得我们可以方便地跟踪每一个状态的变化。</span></li></ol><p data-lake-id=\"uc9e7d83a\" id=\"uc9e7d83a\"><span data-lake-id=\"u0fd309dd\" id=\"u0fd309dd\">主要包括以下几个模块：</span></p><ul list=\"u11efabba\"><li fid=\"u85f111ae\" data-lake-id=\"uecf44626\" id=\"uecf44626\"><span data-lake-id=\"ue135798a\" id=\"ue135798a\">State：定义了应用状态的数据结构，可以在这里设置默认的初始状态</span></li><li fid=\"u85f111ae\" data-lake-id=\"u86e3ecd7\" id=\"u86e3ecd7\"><span data-lake-id=\"u540a72e2\" id=\"u540a72e2\">Getter：允许组件从 Store 中获取数据，mapGetters 辅助函数仅仅是将 store 中的 getter 映射到局部计算属性</span></li><li fid=\"u85f111ae\" data-lake-id=\"u532396cb\" id=\"u532396cb\"><span data-lake-id=\"ud628cd46\" id=\"ud628cd46\">Mutation：是唯一更改 store 中状态的方法，且必须是同步函数</span></li><li fid=\"u85f111ae\" data-lake-id=\"u81096cb4\" id=\"u81096cb4\"><span data-lake-id=\"ud1857fb6\" id=\"ud1857fb6\">Action：用于提交 mutation，而不是直接变更状态，可以包含任意异步操作</span></li><li fid=\"u85f111ae\" data-lake-id=\"u8db338c2\" id=\"u8db338c2\"><span data-lake-id=\"u82e5aa0b\" id=\"u82e5aa0b\">Module：允许将单一的 Store 拆分为多个 store 且同时保存在单一的状态树中</span></li></ul><p data-lake-id=\"u3169b111\" id=\"u3169b111\"><span data-lake-id=\"u91ec6c4c\" id=\"u91ec6c4c\">​</span><br></p><h3 data-lake-id=\"tZl8m\" id=\"tZl8m\"><span data-lake-id=\"u38f319a5\" id=\"u38f319a5\">Redux 和 Vuex 有什么区别，它们的共同思想</span></h3><h3 data-lake-id=\"n2K66\" id=\"n2K66\"><span data-lake-id=\"ua0f6b7b5\" id=\"ua0f6b7b5\">Redux 和 Vuex 区别</span></h3><ul list=\"u6dd7c710\"><li fid=\"u220249c8\" data-lake-id=\"ub857fe93\" id=\"ub857fe93\"><span data-lake-id=\"u3d3e67c9\" id=\"u3d3e67c9\">Vuex 改进了 Redux 中的 Action 和 Reducer 函数，以 mutations 变化函数取代 Reducer，无需 switch，只需在对应的  mutation 函数里改变 state 值即可</span></li><li fid=\"u220249c8\" data-lake-id=\"u7bf8149d\" id=\"u7bf8149d\"><span data-lake-id=\"u6032cde3\" id=\"u6032cde3\">Vuex 由于 Vue 自动重新渲染的特性，无需订阅重新渲染函数，只要生成新的 State 即可</span></li><li fid=\"u220249c8\" data-lake-id=\"u31649bfa\" id=\"u31649bfa\"><span data-lake-id=\"uf7f655d7\" id=\"uf7f655d7\">Vuex 数据流的顺序是：View 调用 store.commit 提交对应的请求到 Store 中对应的 mutation 函数-&gt; store 改变（vue 检测到数据变化自动渲染）</span></li></ul><p data-lake-id=\"u962d8e5b\" id=\"u962d8e5b\"><span data-lake-id=\"ucabc8e33\" id=\"ucabc8e33\">通俗点理解就是，vuex 弱化 dispatch，通过 commit 进行 store 状态的一次更变；取消了 action 概念，不必传入特定的 action 形式进行指定变更;弱化 reducer，基于 commit 参数直接对数据进行转变，使得框架更加简易;</span></p><h3 data-lake-id=\"pKtvY\" id=\"pKtvY\"><span data-lake-id=\"u3bc86188\" id=\"u3bc86188\">共同思想</span></h3><ul list=\"u83a22f40\"><li fid=\"ue4e1de9e\" data-lake-id=\"u4c270002\" id=\"u4c270002\"><span data-lake-id=\"u36642b6d\" id=\"u36642b6d\">单—的数据源</span></li><li fid=\"ue4e1de9e\" data-lake-id=\"u6aa1e5f4\" id=\"u6aa1e5f4\"><span data-lake-id=\"u7cbced34\" id=\"u7cbced34\">变化可以预测</span></li></ul><p data-lake-id=\"u573b9117\" id=\"u573b9117\"><span data-lake-id=\"ude207b92\" id=\"ude207b92\">本质上：redux与vuex都是对mvvm思想的服务，将数据从视图中抽离的一种方案; 形式上：vuex借鉴了redux，将store作为全局的数据中心，进行mode管理;</span></p>",
  "body_draft_lake": "",
  "public": 0,
  "status": 1,
  "view_status": 0,
  "read_status": 1,
  "likes_count": 0,
  "comments_count": 0,
  "content_updated_at": "2022-04-04T11:32:43.000Z",
  "deleted_at": null,
  "created_at": "2022-04-04T11:32:43.000Z",
  "updated_at": "2022-05-10T15:12:43.000Z",
  "published_at": "2022-04-04T11:32:43.000Z",
  "first_published_at": "2022-04-04T11:32:42.935Z",
  "word_count": 621,
  "cover": null,
  "description": "Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。每一个 Vuex 应用的核心就是 store（仓库）。store 基本上就是一个容器，它包含应用中大部分的状态 ( state )。Vuex 的状态存储是响应式的。当 Vue 组件从 store 中读取状态的时候，若 store ...",
  "custom_description": null,
  "hits": 0,
  "_serializer": "v2.doc_detail"
}