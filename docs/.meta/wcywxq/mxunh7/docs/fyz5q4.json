{
  "id": 72212041,
  "slug": "fyz5q4",
  "title": "模版编译原理",
  "book_id": 26225124,
  "book": {
    "id": 26225124,
    "type": "Book",
    "slug": "mxunh7",
    "name": "八股文 eight-part essay writing",
    "user_id": 732231,
    "description": "前端八股文",
    "creator_id": 732231,
    "public": 0,
    "items_count": 239,
    "likes_count": 0,
    "watches_count": 1,
    "content_updated_at": "2023-11-11T18:15:57.023Z",
    "updated_at": "2023-11-11T18:15:57.000Z",
    "created_at": "2022-04-04T11:31:45.000Z",
    "namespace": "wcywxq/mxunh7",
    "user": {
      "id": 732231,
      "type": "User",
      "login": "wcywxq",
      "name": "magic",
      "description": null,
      "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/732231/1606968271774-avatar/886ad88b-d2cc-4c9e-a674-f70eb51a679c.png",
      "books_count": 18,
      "public_books_count": 0,
      "followers_count": 0,
      "following_count": 0,
      "created_at": "2020-01-08T14:21:31.000Z",
      "updated_at": "2023-11-13T09:32:35.000Z",
      "_serializer": "v2.user"
    },
    "_serializer": "v2.book"
  },
  "user_id": 732231,
  "creator": {
    "id": 732231,
    "type": "User",
    "login": "wcywxq",
    "name": "magic",
    "description": null,
    "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/732231/1606968271774-avatar/886ad88b-d2cc-4c9e-a674-f70eb51a679c.png",
    "books_count": 18,
    "public_books_count": 0,
    "followers_count": 0,
    "following_count": 0,
    "created_at": "2020-01-08T14:21:31.000Z",
    "updated_at": "2023-11-13T09:32:35.000Z",
    "_serializer": "v2.user"
  },
  "format": "lake",
  "body": "`Vue` 的编译过程就是将 `template` 转化 为 `render` 函数的过程。会经历以下阶段\n\n1. 首先解析模版，生成 `AST` 语法树(一种用 `JavaScript` 对象的形式来描述整个模板)\n2. 使用**大量的正则表达式**对模板进行解析，遇到标签、文本的时候都会执行对应的钩子进行相关处理\n3. `Vue` 的数据是响应式的，但其实模板中并不是所有的数据都是响应式的。有一些数据首次渲染后就不会再变化，对应的 `DOM` 也不会变化。那么优化过程就是深度遍历 `AST` 树，按照相关条件对树节点进行标记。这些被标记的节点(**静态节点**)我们就可以跳过对它们的比对，对运行时的模板起到很大的优化作用。\n",
  "body_draft": "",
  "body_html": "<!doctype html><div class=\"lake-content\" typography=\"classic\"><p id=\"u498e61fa\" class=\"ne-p\" style=\"text-align: justify\"><code class=\"ne-code\"><span class=\"ne-text\" style=\"color: rgb(68, 68, 68); font-size: 16px\">Vue</span></code><span class=\"ne-text\" style=\"color: rgb(68, 68, 68); font-size: 16px\"> 的编译过程就是将 </span><code class=\"ne-code\"><span class=\"ne-text\" style=\"color: rgb(68, 68, 68); font-size: 16px\">template</span></code><span class=\"ne-text\" style=\"color: rgb(68, 68, 68); font-size: 16px\"> 转化 为 </span><code class=\"ne-code\"><span class=\"ne-text\" style=\"color: rgb(68, 68, 68); font-size: 16px\">render</span></code><span class=\"ne-text\" style=\"color: rgb(68, 68, 68); font-size: 16px\"> 函数的过程。会经历以下阶段</span></p><ol class=\"ne-ol\"><li id=\"ua5798ded\"><span class=\"ne-text\" style=\"color: rgb(68, 68, 68)\">首先解析模版，生成 </span><code class=\"ne-code\"><span class=\"ne-text\" style=\"color: rgb(68, 68, 68)\">AST</span></code><span class=\"ne-text\" style=\"color: rgb(68, 68, 68)\"> 语法树(一种用 </span><code class=\"ne-code\"><span class=\"ne-text\" style=\"color: rgb(68, 68, 68)\">JavaScript</span></code><span class=\"ne-text\" style=\"color: rgb(68, 68, 68)\"> 对象的形式来描述整个模板)</span></li><li id=\"u126120ea\"><span class=\"ne-text\" style=\"color: rgb(68, 68, 68)\">使用</span><strong><span class=\"ne-text\" style=\"color: rgb(68, 68, 68)\">大量的正则表达式</span></strong><span class=\"ne-text\" style=\"color: rgb(68, 68, 68)\">对模板进行解析，遇到标签、文本的时候都会执行对应的钩子进行相关处理</span></li><li id=\"ue95b6518\"><code class=\"ne-code\"><span class=\"ne-text\" style=\"color: rgb(68, 68, 68)\">Vue</span></code><span class=\"ne-text\" style=\"color: rgb(68, 68, 68)\"> 的数据是响应式的，但其实模板中并不是所有的数据都是响应式的。有一些数据首次渲染后就不会再变化，对应的 </span><code class=\"ne-code\"><span class=\"ne-text\" style=\"color: rgb(68, 68, 68)\">DOM</span></code><span class=\"ne-text\" style=\"color: rgb(68, 68, 68)\"> 也不会变化。那么优化过程就是深度遍历 </span><code class=\"ne-code\"><span class=\"ne-text\" style=\"color: rgb(68, 68, 68)\">AST</span></code><span class=\"ne-text\" style=\"color: rgb(68, 68, 68)\"> 树，按照相关条件对树节点进行标记。这些被标记的节点(</span><strong><span class=\"ne-text\" style=\"color: rgb(68, 68, 68)\">静态节点</span></strong><span class=\"ne-text\" style=\"color: rgb(68, 68, 68)\">)我们就可以跳过对它们的比对，对运行时的模板起到很大的优化作用。</span></li></ol></div>",
  "body_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"viewport\" content=\"adapt\" /><p data-lake-id=\"u498e61fa\" id=\"u498e61fa\" style=\"text-align: justify\"><code data-lake-id=\"ua00a3cc5\" id=\"ua00a3cc5\"><span data-lake-id=\"u3a541418\" id=\"u3a541418\" class=\"lake-fontsize-12\" style=\"color: rgb(68, 68, 68)\">Vue</span></code><span data-lake-id=\"u7417bd90\" id=\"u7417bd90\" class=\"lake-fontsize-12\" style=\"color: rgb(68, 68, 68)\"> 的编译过程就是将 </span><code data-lake-id=\"ue6d1ba2f\" id=\"ue6d1ba2f\"><span data-lake-id=\"u5de94e2c\" id=\"u5de94e2c\" class=\"lake-fontsize-12\" style=\"color: rgb(68, 68, 68)\">template</span></code><span data-lake-id=\"uebd20d59\" id=\"uebd20d59\" class=\"lake-fontsize-12\" style=\"color: rgb(68, 68, 68)\"> 转化 为 </span><code data-lake-id=\"uf18df86b\" id=\"uf18df86b\"><span data-lake-id=\"u48f1cbcf\" id=\"u48f1cbcf\" class=\"lake-fontsize-12\" style=\"color: rgb(68, 68, 68)\">render</span></code><span data-lake-id=\"ua2096858\" id=\"ua2096858\" class=\"lake-fontsize-12\" style=\"color: rgb(68, 68, 68)\"> 函数的过程。会经历以下阶段</span></p><ol list=\"u39d6d7dd\"><li fid=\"u7f90660f\" data-lake-id=\"ua5798ded\" id=\"ua5798ded\"><span data-lake-id=\"u92a3d328\" id=\"u92a3d328\" style=\"color: rgb(68, 68, 68)\">首先解析模版，生成 </span><code data-lake-id=\"ue4e1b3c1\" id=\"ue4e1b3c1\"><span data-lake-id=\"u160255af\" id=\"u160255af\" style=\"color: rgb(68, 68, 68)\">AST</span></code><span data-lake-id=\"u75930940\" id=\"u75930940\" style=\"color: rgb(68, 68, 68)\"> 语法树(一种用 </span><code data-lake-id=\"ucf7816ef\" id=\"ucf7816ef\"><span data-lake-id=\"u1d3ca188\" id=\"u1d3ca188\" style=\"color: rgb(68, 68, 68)\">JavaScript</span></code><span data-lake-id=\"ua88694c9\" id=\"ua88694c9\" style=\"color: rgb(68, 68, 68)\"> 对象的形式来描述整个模板)</span></li><li fid=\"u7f90660f\" data-lake-id=\"u126120ea\" id=\"u126120ea\"><span data-lake-id=\"uac66e0c8\" id=\"uac66e0c8\" style=\"color: rgb(68, 68, 68)\">使用</span><strong><span data-lake-id=\"ufa4042cf\" id=\"ufa4042cf\" style=\"color: rgb(68, 68, 68)\">大量的正则表达式</span></strong><span data-lake-id=\"u27f32cce\" id=\"u27f32cce\" style=\"color: rgb(68, 68, 68)\">对模板进行解析，遇到标签、文本的时候都会执行对应的钩子进行相关处理</span></li><li fid=\"u7f90660f\" data-lake-id=\"ue95b6518\" id=\"ue95b6518\"><code data-lake-id=\"uc7b0c91b\" id=\"uc7b0c91b\"><span data-lake-id=\"ue7a93946\" id=\"ue7a93946\" style=\"color: rgb(68, 68, 68)\">Vue</span></code><span data-lake-id=\"uc30d8380\" id=\"uc30d8380\" style=\"color: rgb(68, 68, 68)\"> 的数据是响应式的，但其实模板中并不是所有的数据都是响应式的。有一些数据首次渲染后就不会再变化，对应的 </span><code data-lake-id=\"u5a954178\" id=\"u5a954178\"><span data-lake-id=\"u47ca08e5\" id=\"u47ca08e5\" style=\"color: rgb(68, 68, 68)\">DOM</span></code><span data-lake-id=\"ufa887097\" id=\"ufa887097\" style=\"color: rgb(68, 68, 68)\"> 也不会变化。那么优化过程就是深度遍历 </span><code data-lake-id=\"u8046bc23\" id=\"u8046bc23\"><span data-lake-id=\"u7f0bda8c\" id=\"u7f0bda8c\" style=\"color: rgb(68, 68, 68)\">AST</span></code><span data-lake-id=\"u2b8a57af\" id=\"u2b8a57af\" style=\"color: rgb(68, 68, 68)\"> 树，按照相关条件对树节点进行标记。这些被标记的节点(</span><strong><span data-lake-id=\"u74e6d5d8\" id=\"u74e6d5d8\" style=\"color: rgb(68, 68, 68)\">静态节点</span></strong><span data-lake-id=\"ua05093ac\" id=\"ua05093ac\" style=\"color: rgb(68, 68, 68)\">)我们就可以跳过对它们的比对，对运行时的模板起到很大的优化作用。</span></li></ol>",
  "body_draft_lake": "",
  "public": 0,
  "status": 1,
  "view_status": 0,
  "read_status": 1,
  "likes_count": 0,
  "comments_count": 0,
  "content_updated_at": "2022-04-28T16:51:20.000Z",
  "deleted_at": null,
  "created_at": "2022-04-04T11:32:40.000Z",
  "updated_at": "2022-04-28T16:51:20.000Z",
  "published_at": "2022-04-28T16:51:20.000Z",
  "first_published_at": "2022-04-04T11:32:40.472Z",
  "word_count": 234,
  "cover": null,
  "description": "Vue 的编译过程就是将 template 转化 为 render 函数的过程。会经历以下阶段首先解析模版，生成 AST 语法树(一种用 JavaScript 对象的形式来描述整个模板)使用大量的正则表达式对模板进行解析，遇到标签、文本的时候都会执行对应的钩子进行相关处理Vue 的数据是响应式...",
  "custom_description": null,
  "hits": 0,
  "_serializer": "v2.doc_detail"
}