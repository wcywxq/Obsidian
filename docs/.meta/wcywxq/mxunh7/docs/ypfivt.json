{
  "id": 72212207,
  "slug": "ypfivt",
  "title": "Component 和 PureComponent 的区别",
  "book_id": 26225124,
  "book": {
    "id": 26225124,
    "type": "Book",
    "slug": "mxunh7",
    "name": "八股文 eight-part essay writing",
    "user_id": 732231,
    "description": "前端八股文",
    "creator_id": 732231,
    "public": 0,
    "items_count": 239,
    "likes_count": 0,
    "watches_count": 1,
    "content_updated_at": "2023-11-11T18:15:57.023Z",
    "updated_at": "2023-11-11T18:15:57.000Z",
    "created_at": "2022-04-04T11:31:45.000Z",
    "namespace": "wcywxq/mxunh7",
    "user": {
      "id": 732231,
      "type": "User",
      "login": "wcywxq",
      "name": "magic",
      "description": null,
      "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/732231/1606968271774-avatar/886ad88b-d2cc-4c9e-a674-f70eb51a679c.png",
      "books_count": 18,
      "public_books_count": 0,
      "followers_count": 0,
      "following_count": 0,
      "created_at": "2020-01-08T14:21:31.000Z",
      "updated_at": "2023-11-13T09:32:35.000Z",
      "_serializer": "v2.user"
    },
    "_serializer": "v2.book"
  },
  "user_id": 732231,
  "creator": {
    "id": 732231,
    "type": "User",
    "login": "wcywxq",
    "name": "magic",
    "description": null,
    "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/732231/1606968271774-avatar/886ad88b-d2cc-4c9e-a674-f70eb51a679c.png",
    "books_count": 18,
    "public_books_count": 0,
    "followers_count": 0,
    "following_count": 0,
    "created_at": "2020-01-08T14:21:31.000Z",
    "updated_at": "2023-11-13T09:32:35.000Z",
    "_serializer": "v2.user"
  },
  "format": "lake",
  "body": "PureComponent 表示一个纯组件，可以用来优化 React 程序，减少 render 函数执行的次数，从而提高组件的性能。\n\n在 React 中，当 prop 或者 state 发生变化时，可以通过在 shouldComponentUpdate 生命周期函数中执行 return false 来阻止页面的更新，从而减少不必要的 render 执行。React.PureComponent 会自动执行 shouldComponentUpdate\n\n不过，pureComponent 中的 shouldComponentUpdate() 进行的是**浅比较**，也就是说如果是引用数据类型的数据，只会比较不是同一个地址，而不会比较这个地址里面的数据是否一直。浅比较会忽略属性和或状态突变的情况，其实也就是数据引用指针没有变化，而数据发生变化的时候 render 是不会执行的。如果需要重新渲染，那么久需要重新开辟空间引用数据。PureComponent 一般会用在一些纯展示组件上。\n\n<a name=\"OQQnQ\"></a>\n### 使用 pureComponent 的好处\n当组件更新时，如果组件的 props 或者 state 都没有改变，render 函数就不会触发。省去虚拟 DOM 的生成和对比过程，达到提升性能的目的。这是因为 react 自动做了一层浅比较。\n",
  "body_draft": "",
  "body_html": "<!doctype html><p data-lake-id=\"u3a5ca75f\"><span>PureComponent 表示一个纯组件，可以用来优化 React 程序，减少 render 函数执行的次数，从而提高组件的性能。</span></p><p data-lake-id=\"ue520f55c\"><span>​</span><br /></p><p data-lake-id=\"u8ddd62af\"><span>在 React 中，当 prop 或者 state 发生变化时，可以通过在 shouldComponentUpdate 生命周期函数中执行 return false 来阻止页面的更新，从而减少不必要的 render 执行。React.PureComponent 会自动执行 shouldComponentUpdate</span></p><p data-lake-id=\"u9c201834\"><span>​</span><br /></p><p data-lake-id=\"u5dd81f58\"><span>不过，pureComponent 中的 shouldComponentUpdate() 进行的是</span><strong><span>浅比较</span></strong><span>，也就是说如果是引用数据类型的数据，只会比较不是同一个地址，而不会比较这个地址里面的数据是否一直。浅比较会忽略属性和或状态突变的情况，其实也就是数据引用指针没有变化，而数据发生变化的时候 render 是不会执行的。如果需要重新渲染，那么久需要重新开辟空间引用数据。PureComponent 一般会用在一些纯展示组件上。</span></p><p data-lake-id=\"u4bf910ea\"><span>​</span><br /></p><h3 id=\"OQQnQ\"><span>使用 pureComponent 的好处</span></h3><p data-lake-id=\"u73550847\"><span>当组件更新时，如果组件的 props 或者 state 都没有改变，render 函数就不会触发。省去虚拟 DOM 的生成和对比过程，达到提升性能的目的。这是因为 react 自动做了一层浅比较。</span></p>",
  "body_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"viewport\" content=\"adapt\" /><p data-lake-id=\"u3a5ca75f\" id=\"u3a5ca75f\"><span data-lake-id=\"u7e5b0c53\" id=\"u7e5b0c53\">PureComponent 表示一个纯组件，可以用来优化 React 程序，减少 render 函数执行的次数，从而提高组件的性能。</span></p><p data-lake-id=\"ue520f55c\" id=\"ue520f55c\"><span data-lake-id=\"u75659a47\" id=\"u75659a47\">​</span><br></p><p data-lake-id=\"u8ddd62af\" id=\"u8ddd62af\"><span data-lake-id=\"u60ce7015\" id=\"u60ce7015\">在 React 中，当 prop 或者 state 发生变化时，可以通过在 shouldComponentUpdate 生命周期函数中执行 return false 来阻止页面的更新，从而减少不必要的 render 执行。React.PureComponent 会自动执行 shouldComponentUpdate</span></p><p data-lake-id=\"u9c201834\" id=\"u9c201834\"><span data-lake-id=\"u88f996a8\" id=\"u88f996a8\">​</span><br></p><p data-lake-id=\"u5dd81f58\" id=\"u5dd81f58\"><span data-lake-id=\"u5392d1ca\" id=\"u5392d1ca\">不过，pureComponent 中的 shouldComponentUpdate() 进行的是</span><strong><span data-lake-id=\"uf736363b\" id=\"uf736363b\">浅比较</span></strong><span data-lake-id=\"uaa24c727\" id=\"uaa24c727\">，也就是说如果是引用数据类型的数据，只会比较不是同一个地址，而不会比较这个地址里面的数据是否一直。浅比较会忽略属性和或状态突变的情况，其实也就是数据引用指针没有变化，而数据发生变化的时候 render 是不会执行的。如果需要重新渲染，那么久需要重新开辟空间引用数据。PureComponent 一般会用在一些纯展示组件上。</span></p><p data-lake-id=\"u4bf910ea\" id=\"u4bf910ea\"><span data-lake-id=\"u3b61df65\" id=\"u3b61df65\">​</span><br></p><h3 data-lake-id=\"OQQnQ\" id=\"OQQnQ\"><span data-lake-id=\"u56ef6a84\" id=\"u56ef6a84\">使用 pureComponent 的好处</span></h3><p data-lake-id=\"u73550847\" id=\"u73550847\"><span data-lake-id=\"u485afbdc\" id=\"u485afbdc\">当组件更新时，如果组件的 props 或者 state 都没有改变，render 函数就不会触发。省去虚拟 DOM 的生成和对比过程，达到提升性能的目的。这是因为 react 自动做了一层浅比较。</span></p>",
  "body_draft_lake": "",
  "public": 0,
  "status": 1,
  "view_status": 0,
  "read_status": 1,
  "likes_count": 0,
  "comments_count": 0,
  "content_updated_at": "2022-04-04T11:33:37.000Z",
  "deleted_at": null,
  "created_at": "2022-04-04T11:33:37.000Z",
  "updated_at": "2022-05-10T15:12:35.000Z",
  "published_at": "2022-04-04T11:33:37.000Z",
  "first_published_at": "2022-04-04T11:33:37.125Z",
  "word_count": 331,
  "cover": null,
  "description": "PureComponent 表示一个纯组件，可以用来优化 React 程序，减少 render 函数执行的次数，从而提高组件的性能。在 React 中，当 prop 或者 state 发生变化时，可以通过在 shouldComponentUpdate 生命周期函数中执行 return fals...",
  "custom_description": null,
  "hits": 0,
  "_serializer": "v2.doc_detail"
}