{
  "id": 72212227,
  "slug": "iz1yst",
  "title": "常见的位运算符有哪些, 其计算规则是什么",
  "book_id": 26225124,
  "book": {
    "id": 26225124,
    "type": "Book",
    "slug": "mxunh7",
    "name": "八股文 eight-part essay writing",
    "user_id": 732231,
    "description": "前端八股文",
    "creator_id": 732231,
    "public": 0,
    "items_count": 239,
    "likes_count": 0,
    "watches_count": 1,
    "content_updated_at": "2023-11-11T18:15:57.023Z",
    "updated_at": "2023-11-11T18:15:57.000Z",
    "created_at": "2022-04-04T11:31:45.000Z",
    "namespace": "wcywxq/mxunh7",
    "user": {
      "id": 732231,
      "type": "User",
      "login": "wcywxq",
      "name": "magic",
      "description": null,
      "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/732231/1606968271774-avatar/886ad88b-d2cc-4c9e-a674-f70eb51a679c.png",
      "books_count": 18,
      "public_books_count": 0,
      "followers_count": 0,
      "following_count": 0,
      "created_at": "2020-01-08T14:21:31.000Z",
      "updated_at": "2023-11-13T09:32:35.000Z",
      "_serializer": "v2.user"
    },
    "_serializer": "v2.book"
  },
  "user_id": 732231,
  "creator": {
    "id": 732231,
    "type": "User",
    "login": "wcywxq",
    "name": "magic",
    "description": null,
    "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/732231/1606968271774-avatar/886ad88b-d2cc-4c9e-a674-f70eb51a679c.png",
    "books_count": 18,
    "public_books_count": 0,
    "followers_count": 0,
    "following_count": 0,
    "created_at": "2020-01-08T14:21:31.000Z",
    "updated_at": "2023-11-13T09:32:35.000Z",
    "_serializer": "v2.user"
  },
  "format": "lake",
  "body": "现代计算机中数据都是以二进制的形式存储的，即 0、1 两种状态，计算机对二进制数据进行的运算加减乘除等都是叫位运算，即将符号位共同参与运算的运算。\n\n常见的位运算有以下几种：\n\n| **运算符** | **描述** | **运算规则** |\n| --- | --- | --- |\n| `&` | 与 | 两个位都为 1 时，结果才为 1 |\n| `&#124;` | 或 |  |\n| `^` | 异或 | 两个位相同为 0，相异为 1 |\n| `~` | 取反 | 0 变 1，1 变 0 |\n| `<<` | 左移 | 各二进制位全部左移若干位，高位丢弃，低位补 0 |\n| `>>` | 右移 | 各二进制位全部右移若干位，正数左补 0，负数左补 1，右边丢弃 |\n\n\n<a name=\"56f2c73f\"></a>\n#### 1. 按位与运算符（&）\n\n**定义：** 参加运算的两个数据**按二进制位**进行“与”运算。 **运算规则：**\n\n```javascript\n0 & 0 = 0\n0 & 1 = 0\n1 & 0 = 0\n1 & 1 = 1\n```\n\n总结：两位同时为 1，结果才为 1，否则结果为 0。 例如：3&5 即：\n\n```javascript\n0000 0011\n   0000 0101\n = 0000 0001\n```\n\n因此 3&5 的值为 1。 注意：负数按补码形式参加按位与运算。<br />**用途：**<br />**（1）判断奇偶**<br />只要根据最未位是 0 还是 1 来决定，为 0 就是偶数，为 1 就是奇数。因此可以用 if ((i & 1) == 0)代替 if (i % 2 == 0)来判断 a 是不是偶数。<br />**（2）清零**<br />如果想将一个单元清零，即使其全部二进制位为 0，只要与一个各位都为零的数值相与，结果为零。\n\n<a name=\"e55e6276\"></a>\n#### 2. 按位或运算符（|）\n\n**定义：** 参加运算的两个对象按二进制位进行“或”运算。<br />**运算规则：**\n\n```javascript\n0 | 0 = 0\n0 | 1 = 1\n1 | 0 = 1\n1 | 1 = 1\n```\n\n总结：参加运算的两个对象只要有一个为 1，其值为 1。 例如：3|5 即：\n\n```javascript\n0000 0011\n  0000 0101\n= 0000 0111\n```\n\n因此，3|5 的值为 7。 注意：负数按补码形式参加按位或运算。\n\n<a name=\"214fb947\"></a>\n#### 3. 异或运算符（^）\n\n**定义：** 参加运算的两个数据按二进制位进行“异或”运算。<br />**运算规则：**\n\n```javascript\n0 ^ 0 = 0\n0 ^ 1 = 1\n1 ^ 0 = 1\n1 ^ 1 = 0\n```\n\n总结：参加运算的两个对象，如果两个相应位相同为 0，相异为 1。 例如：3|5 即：\n\n```javascript\n0000 0011\n  0000 0101\n= 0000 0110\n```\n\n因此，3^5 的值为 6。 异或运算的性质:\n\n- 交换律：(ab)c == a(bc)\n- 结合律：(a + b)^c == a^b + b^c\n- 对于任何数 x，都有 xx=0，x0=x\n- 自反性: abb=a^0=a;\n\n<a name=\"e01d3705\"></a>\n#### 4. 取反运算符 (~)\n\n**定义：** 参加运算的一个数据按二进制进行“取反”运算。<br />**运算规则：**\n\n```javascript\n~ 1 = 0~ 0 = 1\n```\n\n总结：对一个二进制数按位取反，即将 0 变 1，1 变 0。 例如：~6 即：\n\n```javascript\n0000 0110= 1111 1001\n```\n\n在计算机中，正数用原码表示，负数使用补码存储，首先看最高位，最高位 1 表示负数，0 表示正数。此计算机二进制码为负数，最高位为符号位。 当发现按位取反为负数时，就**直接取其补码**，变为十进制：\n\n```javascript\n0000 0110   = 1111 1001反码：1000 0110补码：1000 0111\n```\n\n因此，~6 的值为-7。\n\n<a name=\"e3e7c6ff\"></a>\n#### 5. 左移运算符（<<）\n\n**定义：** 将一个运算对象的各二进制位全部左移若干位，左边的二进制位丢弃，右边补 0。 设 a=1010 1110，a = a<< 2 将 a 的二进制位左移 2 位、右补 0，即得 a=1011 1000。 若左移时舍弃的高位不包含 1，则每左移一位，相当于该数乘以 2。\n\n<a name=\"ae87ecf3\"></a>\n#### 6. 右移运算符（>>）\n\n**定义：** 将一个数的各二进制位全部右移若干位，正数左补 0，负数左补 1，右边丢弃。 例如：a=a>>2 将 a 的二进制位右移 2 位，左补 0 或者 左补 1 得看被移数是正还是负。 操作数每右移一位，相当于该数除以 2。\n\n<a name=\"22978721\"></a>\n#### 7. 原码、补码、反码\n\n上面提到了补码、反码等知识，这里就补充一下。 计算机中的**有符号数**有三种表示方法，即原码、反码和补码。三种表示方法均有符号位和数值位两部分，符号位都是用 0 表示“正”，用 1 表示“负”，而数值位，三种表示方法各不相同。<br />**（1）原码**<br />原码就是一个数的二进制数。例如：10 的原码为 0000 1010<br />**（2）反码**\n\n- 正数的反码与原码相同，如：10 反码为 0000 1010\n- 负数的反码为除符号位，按位取反，即 0 变 1，1 变 0。\n\n例如：-10\n\n```javascript\n原码：1000 1010\n反码：1111 0101\n```\n\n**（3）补码**\n\n- 正数的补码与原码相同，如：10 补码为 0000 1010\n- 负数的补码是原码除符号位外的所有位取反即 0 变 1，1 变 0，然后加 1，也就是反码加 1。\n\n例如：-10\n\n```javascript\n原码：1000 1010\n反码：1111 0101\n补码：1111 0110\n```\n",
  "body_draft": "",
  "body_html": "<!doctype html><p data-lake-id=\"u8f05327a\"><span>现代计算机中数据都是以二进制的形式存储的，即 0、1 两种状态，计算机对二进制数据进行的运算加减乘除等都是叫位运算，即将符号位共同参与运算的运算。</span></p><p data-lake-id=\"u16c29e68\"><br /></p><p data-lake-id=\"u65f46103\"><span>常见的位运算有以下几种：</span></p><table class=\"lake-table\" style=\"width: 750px;\"><colgroup><col width=\"250\"></col><col width=\"250\"></col><col width=\"250\"></col></colgroup><tbody><tr><td><p data-lake-id=\"u4972246f\"><strong><span>运算符</span></strong></p></td><td><p data-lake-id=\"u561ce73d\"><strong><span>描述</span></strong></p></td><td><p data-lake-id=\"u84a45dd9\"><strong><span>运算规则</span></strong></p></td></tr><tr><td><p data-lake-id=\"ueab04aaf\"><code><span>&amp;</span></code></p></td><td><p data-lake-id=\"u16fdfca7\"><span>与</span></p></td><td><p data-lake-id=\"u593a35bc\"><span>两个位都为 1 时，结果才为 1</span></p></td></tr><tr><td><p data-lake-id=\"uda7bf53c\"><code><span>|</span></code></p></td><td><p data-lake-id=\"u6d5b7072\"><span>或</span></p></td><td></td></tr><tr><td><p data-lake-id=\"u7faaa4cc\"><code><span>^</span></code></p></td><td><p data-lake-id=\"ud46b5b12\"><span>异或</span></p></td><td><p data-lake-id=\"ua593b937\"><span>两个位相同为 0，相异为 1</span></p></td></tr><tr><td><p data-lake-id=\"u35bdbcb9\"><code><span>~</span></code></p></td><td><p data-lake-id=\"u40052100\"><span>取反</span></p></td><td><p data-lake-id=\"u0a48cc19\"><span>0 变 1，1 变 0</span></p></td></tr><tr><td><p data-lake-id=\"uf2ab853c\"><code><span>&lt;&lt;</span></code></p></td><td><p data-lake-id=\"uf2de6d85\"><span>左移</span></p></td><td><p data-lake-id=\"uaec0f0e9\"><span>各二进制位全部左移若干位，高位丢弃，低位补 0</span></p></td></tr><tr><td><p data-lake-id=\"u12dbb78e\"><code><span>&gt;&gt;</span></code></p></td><td><p data-lake-id=\"u17c89a4c\"><span>右移</span></p></td><td><p data-lake-id=\"uab672e4d\"><span>各二进制位全部右移若干位，正数左补 0，负数左补 1，右边丢弃</span></p></td></tr></tbody></table><p data-lake-id=\"u1de1874d\"><br /></p><h4 id=\"56f2c73f\"><span>1. 按位与运算符（&amp;）</span></h4><p data-lake-id=\"u67ca811c\"><br /></p><p data-lake-id=\"u93a9abf3\"><strong><span>定义：</span></strong><span> 参加运算的两个数据</span><strong><span>按二进制位</span></strong><span>进行“与”运算。 </span><strong><span>运算规则：</span></strong></p><p data-lake-id=\"ua4d0e1e1\"><br /></p><pre data-lang=\"javascript\"><code>0 &amp; 0 = 0\n0 &amp; 1 = 0\n1 &amp; 0 = 0\n1 &amp; 1 = 1</code></pre><p data-lake-id=\"u6c88b8b2\"><br /></p><p data-lake-id=\"uf80e8596\"><span>总结：两位同时为 1，结果才为 1，否则结果为 0。 例如：3&amp;5 即：</span></p><p data-lake-id=\"uc1fbaa91\"><br /></p><pre data-lang=\"javascript\"><code>0000 0011\n   0000 0101\n = 0000 0001</code></pre><p data-lake-id=\"ucdad3332\"><br /></p><p data-lake-id=\"u8b79a6d6\"><span>因此 3&amp;5 的值为 1。 注意：负数按补码形式参加按位与运算。<br /></span><strong><span>用途：</span></strong><span><br /></span><strong><span>（1）判断奇偶</span></strong><span><br /></span><span>只要根据最未位是 0 还是 1 来决定，为 0 就是偶数，为 1 就是奇数。因此可以用 if ((i &amp; 1) == 0)代替 if (i % 2 == 0)来判断 a 是不是偶数。<br /></span><strong><span>（2）清零</span></strong><span><br /></span><span>如果想将一个单元清零，即使其全部二进制位为 0，只要与一个各位都为零的数值相与，结果为零。</span></p><p data-lake-id=\"u353fe63a\"><br /></p><h4 id=\"e55e6276\"><span>2. 按位或运算符（|）</span></h4><p data-lake-id=\"u796a5f62\"><br /></p><p data-lake-id=\"u5086af43\"><strong><span>定义：</span></strong><span> 参加运算的两个对象按二进制位进行“或”运算。<br /></span><strong><span>运算规则：</span></strong></p><p data-lake-id=\"ubde3d1c0\"><br /></p><pre data-lang=\"javascript\"><code>0 | 0 = 0\n0 | 1 = 1\n1 | 0 = 1\n1 | 1 = 1</code></pre><p data-lake-id=\"uc2787255\"><br /></p><p data-lake-id=\"u8633363e\"><span>总结：参加运算的两个对象只要有一个为 1，其值为 1。 例如：3|5 即：</span></p><p data-lake-id=\"u425678de\"><br /></p><pre data-lang=\"javascript\"><code>0000 0011\n  0000 0101\n= 0000 0111</code></pre><p data-lake-id=\"ube81db9a\"><br /></p><p data-lake-id=\"ua8dccdde\"><span>因此，3|5 的值为 7。 注意：负数按补码形式参加按位或运算。</span></p><p data-lake-id=\"ud3a6940d\"><br /></p><h4 id=\"214fb947\"><span>3. 异或运算符（^）</span></h4><p data-lake-id=\"u50291530\"><br /></p><p data-lake-id=\"u8aa57a1b\"><strong><span>定义：</span></strong><span> 参加运算的两个数据按二进制位进行“异或”运算。<br /></span><strong><span>运算规则：</span></strong></p><p data-lake-id=\"u9d0f20dc\"><br /></p><pre data-lang=\"javascript\"><code>0 ^ 0 = 0\n0 ^ 1 = 1\n1 ^ 0 = 1\n1 ^ 1 = 0</code></pre><p data-lake-id=\"uea1d8393\"><br /></p><p data-lake-id=\"ue09edb50\"><span>总结：参加运算的两个对象，如果两个相应位相同为 0，相异为 1。 例如：3|5 即：</span></p><p data-lake-id=\"u39016089\"><br /></p><pre data-lang=\"javascript\"><code>0000 0011\n  0000 0101\n= 0000 0110</code></pre><p data-lake-id=\"ufbb44f20\"><br /></p><p data-lake-id=\"u8428adfa\"><span>因此，3^5 的值为 6。 异或运算的性质:</span></p><p data-lake-id=\"ua665f122\"><br /></p><ul><li><span>交换律：(a</span><sup><span>b)</span></sup><span>c == a</span><sup><span>(b</span></sup><span>c)</span></li><li><span>结合律：(a + b)^c == a^b + b^c</span></li><li><span>对于任何数 x，都有 x</span><sup><span>x=0，x</span></sup><span>0=x</span></li><li><span>自反性: a</span><sup><span>b</span></sup><span>b=a^0=a;</span></li></ul><p data-lake-id=\"ubc098fda\"><br /></p><h4 id=\"e01d3705\"><span>4. 取反运算符 (~)</span></h4><p data-lake-id=\"u713aa7bc\"><br /></p><p data-lake-id=\"u77a20502\"><strong><span>定义：</span></strong><span> 参加运算的一个数据按二进制进行“取反”运算。<br /></span><strong><span>运算规则：</span></strong></p><p data-lake-id=\"u1dbcb8a5\"><br /></p><pre data-lang=\"javascript\"><code>~ 1 = 0~ 0 = 1</code></pre><p data-lake-id=\"u0a246e6b\"><br /></p><p data-lake-id=\"u82a49987\"><span>总结：对一个二进制数按位取反，即将 0 变 1，1 变 0。 例如：~6 即：</span></p><p data-lake-id=\"u03bfd24a\"><br /></p><pre data-lang=\"javascript\"><code>0000 0110= 1111 1001</code></pre><p data-lake-id=\"ud174f954\"><br /></p><p data-lake-id=\"u56520264\"><span>在计算机中，正数用原码表示，负数使用补码存储，首先看最高位，最高位 1 表示负数，0 表示正数。此计算机二进制码为负数，最高位为符号位。 当发现按位取反为负数时，就</span><strong><span>直接取其补码</span></strong><span>，变为十进制：</span></p><p data-lake-id=\"u49863f24\"><br /></p><pre data-lang=\"javascript\"><code>0000 0110   = 1111 1001反码：1000 0110补码：1000 0111</code></pre><p data-lake-id=\"ubf631e9d\"><br /></p><p data-lake-id=\"ub9fbea54\"><span>因此，~6 的值为-7。</span></p><p data-lake-id=\"u0e85f0c3\"><br /></p><h4 id=\"e3e7c6ff\"><span>5. 左移运算符（&lt;&lt;）</span></h4><p data-lake-id=\"u0c96ed33\"><br /></p><p data-lake-id=\"u8fb602d5\"><strong><span>定义：</span></strong><span> 将一个运算对象的各二进制位全部左移若干位，左边的二进制位丢弃，右边补 0。 设 a=1010 1110，a = a&lt;&lt; 2 将 a 的二进制位左移 2 位、右补 0，即得 a=1011 1000。 若左移时舍弃的高位不包含 1，则每左移一位，相当于该数乘以 2。</span></p><p data-lake-id=\"uf39bf9e0\"><br /></p><h4 id=\"ae87ecf3\"><span>6. 右移运算符（&gt;&gt;）</span></h4><p data-lake-id=\"uae183963\"><br /></p><p data-lake-id=\"u75ddb38e\"><strong><span>定义：</span></strong><span> 将一个数的各二进制位全部右移若干位，正数左补 0，负数左补 1，右边丢弃。 例如：a=a&gt;&gt;2 将 a 的二进制位右移 2 位，左补 0 或者 左补 1 得看被移数是正还是负。 操作数每右移一位，相当于该数除以 2。</span></p><p data-lake-id=\"u5afd3487\"><br /></p><h4 id=\"22978721\"><span>7. 原码、补码、反码</span></h4><p data-lake-id=\"u1b655ddd\"><br /></p><p data-lake-id=\"ua9bcc1c3\"><span>上面提到了补码、反码等知识，这里就补充一下。 计算机中的</span><strong><span>有符号数</span></strong><span>有三种表示方法，即原码、反码和补码。三种表示方法均有符号位和数值位两部分，符号位都是用 0 表示“正”，用 1 表示“负”，而数值位，三种表示方法各不相同。<br /></span><strong><span>（1）原码</span></strong><span><br /></span><span>原码就是一个数的二进制数。例如：10 的原码为 0000 1010<br /></span><strong><span>（2）反码</span></strong></p><p data-lake-id=\"u62327f5e\"><br /></p><ul><li><span>正数的反码与原码相同，如：10 反码为 0000 1010</span></li><li><span>负数的反码为除符号位，按位取反，即 0 变 1，1 变 0。</span></li></ul><p data-lake-id=\"uab54194c\"><br /></p><p data-lake-id=\"u29e032a0\"><span>例如：-10</span></p><p data-lake-id=\"u91993e5c\"><br /></p><pre data-lang=\"javascript\"><code>原码：1000 1010\n反码：1111 0101</code></pre><p data-lake-id=\"u8849737b\"><br /></p><p data-lake-id=\"ucd00ff04\"><strong><span>（3）补码</span></strong></p><p data-lake-id=\"u26d6a157\"><br /></p><ul><li><span>正数的补码与原码相同，如：10 补码为 0000 1010</span></li><li><span>负数的补码是原码除符号位外的所有位取反即 0 变 1，1 变 0，然后加 1，也就是反码加 1。</span></li></ul><p data-lake-id=\"uc1f4aab8\"><br /></p><p data-lake-id=\"u349ea78a\"><span>例如：-10</span></p><p data-lake-id=\"ud8faddd1\"><br /></p><pre data-lang=\"javascript\"><code>原码：1000 1010\n反码：1111 0101\n补码：1111 0110</code></pre>",
  "body_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"viewport\" content=\"adapt\" /><p data-lake-id=\"u8f05327a\" id=\"u8f05327a\"><span data-lake-id=\"u8007f3b8\" id=\"u8007f3b8\">现代计算机中数据都是以二进制的形式存储的，即 0、1 两种状态，计算机对二进制数据进行的运算加减乘除等都是叫位运算，即将符号位共同参与运算的运算。</span></p><p data-lake-id=\"u16c29e68\" id=\"u16c29e68\"><br></p><p data-lake-id=\"u65f46103\" id=\"u65f46103\"><span data-lake-id=\"u7a794509\" id=\"u7a794509\">常见的位运算有以下几种：</span></p><card type=\"block\" name=\"table\" value=\"data:%7B%22id%22%3A%229c838c5c%22%2C%22rows%22%3A7%2C%22cols%22%3A3%2C%22html%22%3A%22%3Ctable%20data-lake-id%3D%5C%229c838c5c%5C%22%20id%3D%5C%229c838c5c%5C%22%20class%3D%5C%22lake-table%5C%22%20style%3D%5C%22width%3A%20750px%5C%22%3E%3Ccolgroup%3E%3Ccol%20width%3D%5C%22250%5C%22%3E%3Ccol%20width%3D%5C%22250%5C%22%3E%3Ccol%20width%3D%5C%22250%5C%22%3E%3C%2Fcolgroup%3E%3Ctbody%3E%3Ctr%20data-lake-id%3D%5C%22uc1c9da72%5C%22%20id%3D%5C%22uc1c9da72%5C%22%3E%3Ctd%20data-lake-id%3D%5C%22u99ca1e67%5C%22%20id%3D%5C%22u99ca1e67%5C%22%3E%3Cp%20data-lake-id%3D%5C%22u4972246f%5C%22%20id%3D%5C%22u4972246f%5C%22%3E%3Cstrong%3E%3Cspan%20data-lake-id%3D%5C%22uf8dadafc%5C%22%20id%3D%5C%22uf8dadafc%5C%22%3E%E8%BF%90%E7%AE%97%E7%AC%A6%3C%2Fspan%3E%3C%2Fstrong%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20data-lake-id%3D%5C%22u9c3c2545%5C%22%20id%3D%5C%22u9c3c2545%5C%22%3E%3Cp%20data-lake-id%3D%5C%22u561ce73d%5C%22%20id%3D%5C%22u561ce73d%5C%22%3E%3Cstrong%3E%3Cspan%20data-lake-id%3D%5C%22ue4b62b68%5C%22%20id%3D%5C%22ue4b62b68%5C%22%3E%E6%8F%8F%E8%BF%B0%3C%2Fspan%3E%3C%2Fstrong%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20data-lake-id%3D%5C%22u94e4be5a%5C%22%20id%3D%5C%22u94e4be5a%5C%22%3E%3Cp%20data-lake-id%3D%5C%22u84a45dd9%5C%22%20id%3D%5C%22u84a45dd9%5C%22%3E%3Cstrong%3E%3Cspan%20data-lake-id%3D%5C%22u3056eba4%5C%22%20id%3D%5C%22u3056eba4%5C%22%3E%E8%BF%90%E7%AE%97%E8%A7%84%E5%88%99%3C%2Fspan%3E%3C%2Fstrong%3E%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%20data-lake-id%3D%5C%22u069935db%5C%22%20id%3D%5C%22u069935db%5C%22%3E%3Ctd%20data-lake-id%3D%5C%22u64125ca2%5C%22%20id%3D%5C%22u64125ca2%5C%22%3E%3Cp%20data-lake-id%3D%5C%22ueab04aaf%5C%22%20id%3D%5C%22ueab04aaf%5C%22%3E%3Ccode%20data-lake-id%3D%5C%22u2c802d4d%5C%22%20id%3D%5C%22u2c802d4d%5C%22%3E%3Cspan%20data-lake-id%3D%5C%22u69d3150c%5C%22%20id%3D%5C%22u69d3150c%5C%22%3E%26amp%3B%3C%2Fspan%3E%3C%2Fcode%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20data-lake-id%3D%5C%22u77606107%5C%22%20id%3D%5C%22u77606107%5C%22%3E%3Cp%20data-lake-id%3D%5C%22u16fdfca7%5C%22%20id%3D%5C%22u16fdfca7%5C%22%3E%3Cspan%20data-lake-id%3D%5C%22ua0fdf811%5C%22%20id%3D%5C%22ua0fdf811%5C%22%3E%E4%B8%8E%3C%2Fspan%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20data-lake-id%3D%5C%22u5b71effb%5C%22%20id%3D%5C%22u5b71effb%5C%22%3E%3Cp%20data-lake-id%3D%5C%22u593a35bc%5C%22%20id%3D%5C%22u593a35bc%5C%22%3E%3Cspan%20data-lake-id%3D%5C%22udaaaf6f2%5C%22%20id%3D%5C%22udaaaf6f2%5C%22%3E%E4%B8%A4%E4%B8%AA%E4%BD%8D%E9%83%BD%E4%B8%BA%201%20%E6%97%B6%EF%BC%8C%E7%BB%93%E6%9E%9C%E6%89%8D%E4%B8%BA%201%3C%2Fspan%3E%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%20data-lake-id%3D%5C%22u334c66e5%5C%22%20id%3D%5C%22u334c66e5%5C%22%3E%3Ctd%20data-lake-id%3D%5C%22u92e052d4%5C%22%20id%3D%5C%22u92e052d4%5C%22%3E%3Cp%20data-lake-id%3D%5C%22uda7bf53c%5C%22%20id%3D%5C%22uda7bf53c%5C%22%3E%3Ccode%20data-lake-id%3D%5C%22ub3d16165%5C%22%20id%3D%5C%22ub3d16165%5C%22%3E%3Cspan%20data-lake-id%3D%5C%22ub789163b%5C%22%20id%3D%5C%22ub789163b%5C%22%3E%7C%3C%2Fspan%3E%3C%2Fcode%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20data-lake-id%3D%5C%22u9932fe4f%5C%22%20id%3D%5C%22u9932fe4f%5C%22%3E%3Cp%20data-lake-id%3D%5C%22u6d5b7072%5C%22%20id%3D%5C%22u6d5b7072%5C%22%3E%3Cspan%20data-lake-id%3D%5C%22uebf51387%5C%22%20id%3D%5C%22uebf51387%5C%22%3E%E6%88%96%3C%2Fspan%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20data-lake-id%3D%5C%22ua5357277%5C%22%20id%3D%5C%22ua5357277%5C%22%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%20data-lake-id%3D%5C%22u3d89f3ca%5C%22%20id%3D%5C%22u3d89f3ca%5C%22%3E%3Ctd%20data-lake-id%3D%5C%22u13051cda%5C%22%20id%3D%5C%22u13051cda%5C%22%3E%3Cp%20data-lake-id%3D%5C%22u7faaa4cc%5C%22%20id%3D%5C%22u7faaa4cc%5C%22%3E%3Ccode%20data-lake-id%3D%5C%22ud8d9deef%5C%22%20id%3D%5C%22ud8d9deef%5C%22%3E%3Cspan%20data-lake-id%3D%5C%22u4328bf9d%5C%22%20id%3D%5C%22u4328bf9d%5C%22%3E%5E%3C%2Fspan%3E%3C%2Fcode%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20data-lake-id%3D%5C%22u8a6b7eff%5C%22%20id%3D%5C%22u8a6b7eff%5C%22%3E%3Cp%20data-lake-id%3D%5C%22ud46b5b12%5C%22%20id%3D%5C%22ud46b5b12%5C%22%3E%3Cspan%20data-lake-id%3D%5C%22u3a8524b1%5C%22%20id%3D%5C%22u3a8524b1%5C%22%3E%E5%BC%82%E6%88%96%3C%2Fspan%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20data-lake-id%3D%5C%22u5cd8eee5%5C%22%20id%3D%5C%22u5cd8eee5%5C%22%3E%3Cp%20data-lake-id%3D%5C%22ua593b937%5C%22%20id%3D%5C%22ua593b937%5C%22%3E%3Cspan%20data-lake-id%3D%5C%22u2a494e47%5C%22%20id%3D%5C%22u2a494e47%5C%22%3E%E4%B8%A4%E4%B8%AA%E4%BD%8D%E7%9B%B8%E5%90%8C%E4%B8%BA%200%EF%BC%8C%E7%9B%B8%E5%BC%82%E4%B8%BA%201%3C%2Fspan%3E%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%20data-lake-id%3D%5C%22u0eab9a1f%5C%22%20id%3D%5C%22u0eab9a1f%5C%22%3E%3Ctd%20data-lake-id%3D%5C%22u885b37e0%5C%22%20id%3D%5C%22u885b37e0%5C%22%3E%3Cp%20data-lake-id%3D%5C%22u35bdbcb9%5C%22%20id%3D%5C%22u35bdbcb9%5C%22%3E%3Ccode%20data-lake-id%3D%5C%22u101f0b63%5C%22%20id%3D%5C%22u101f0b63%5C%22%3E%3Cspan%20data-lake-id%3D%5C%22uef9f39d0%5C%22%20id%3D%5C%22uef9f39d0%5C%22%3E~%3C%2Fspan%3E%3C%2Fcode%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20data-lake-id%3D%5C%22u6aba59ca%5C%22%20id%3D%5C%22u6aba59ca%5C%22%3E%3Cp%20data-lake-id%3D%5C%22u40052100%5C%22%20id%3D%5C%22u40052100%5C%22%3E%3Cspan%20data-lake-id%3D%5C%22uef69f6cf%5C%22%20id%3D%5C%22uef69f6cf%5C%22%3E%E5%8F%96%E5%8F%8D%3C%2Fspan%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20data-lake-id%3D%5C%22ua2a5c067%5C%22%20id%3D%5C%22ua2a5c067%5C%22%3E%3Cp%20data-lake-id%3D%5C%22u0a48cc19%5C%22%20id%3D%5C%22u0a48cc19%5C%22%3E%3Cspan%20data-lake-id%3D%5C%22u12da35c7%5C%22%20id%3D%5C%22u12da35c7%5C%22%3E0%20%E5%8F%98%201%EF%BC%8C1%20%E5%8F%98%200%3C%2Fspan%3E%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%20data-lake-id%3D%5C%22ue7246f0d%5C%22%20id%3D%5C%22ue7246f0d%5C%22%3E%3Ctd%20data-lake-id%3D%5C%22u96a5caaf%5C%22%20id%3D%5C%22u96a5caaf%5C%22%3E%3Cp%20data-lake-id%3D%5C%22uf2ab853c%5C%22%20id%3D%5C%22uf2ab853c%5C%22%3E%3Ccode%20data-lake-id%3D%5C%22uad7b1cc6%5C%22%20id%3D%5C%22uad7b1cc6%5C%22%3E%3Cspan%20data-lake-id%3D%5C%22u6057ca2a%5C%22%20id%3D%5C%22u6057ca2a%5C%22%3E%26lt%3B%26lt%3B%3C%2Fspan%3E%3C%2Fcode%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20data-lake-id%3D%5C%22u22499de9%5C%22%20id%3D%5C%22u22499de9%5C%22%3E%3Cp%20data-lake-id%3D%5C%22uf2de6d85%5C%22%20id%3D%5C%22uf2de6d85%5C%22%3E%3Cspan%20data-lake-id%3D%5C%22ufd0e4660%5C%22%20id%3D%5C%22ufd0e4660%5C%22%3E%E5%B7%A6%E7%A7%BB%3C%2Fspan%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20data-lake-id%3D%5C%22u8bd7c0cb%5C%22%20id%3D%5C%22u8bd7c0cb%5C%22%3E%3Cp%20data-lake-id%3D%5C%22uaec0f0e9%5C%22%20id%3D%5C%22uaec0f0e9%5C%22%3E%3Cspan%20data-lake-id%3D%5C%22ud58ea714%5C%22%20id%3D%5C%22ud58ea714%5C%22%3E%E5%90%84%E4%BA%8C%E8%BF%9B%E5%88%B6%E4%BD%8D%E5%85%A8%E9%83%A8%E5%B7%A6%E7%A7%BB%E8%8B%A5%E5%B9%B2%E4%BD%8D%EF%BC%8C%E9%AB%98%E4%BD%8D%E4%B8%A2%E5%BC%83%EF%BC%8C%E4%BD%8E%E4%BD%8D%E8%A1%A5%200%3C%2Fspan%3E%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%20data-lake-id%3D%5C%22u56da196f%5C%22%20id%3D%5C%22u56da196f%5C%22%3E%3Ctd%20data-lake-id%3D%5C%22u5aa8307a%5C%22%20id%3D%5C%22u5aa8307a%5C%22%3E%3Cp%20data-lake-id%3D%5C%22u12dbb78e%5C%22%20id%3D%5C%22u12dbb78e%5C%22%3E%3Ccode%20data-lake-id%3D%5C%22u367cbae1%5C%22%20id%3D%5C%22u367cbae1%5C%22%3E%3Cspan%20data-lake-id%3D%5C%22u5c17f921%5C%22%20id%3D%5C%22u5c17f921%5C%22%3E%26gt%3B%26gt%3B%3C%2Fspan%3E%3C%2Fcode%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20data-lake-id%3D%5C%22u53a12138%5C%22%20id%3D%5C%22u53a12138%5C%22%3E%3Cp%20data-lake-id%3D%5C%22u17c89a4c%5C%22%20id%3D%5C%22u17c89a4c%5C%22%3E%3Cspan%20data-lake-id%3D%5C%22u4a320c64%5C%22%20id%3D%5C%22u4a320c64%5C%22%3E%E5%8F%B3%E7%A7%BB%3C%2Fspan%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20data-lake-id%3D%5C%22u353516e8%5C%22%20id%3D%5C%22u353516e8%5C%22%3E%3Cp%20data-lake-id%3D%5C%22uab672e4d%5C%22%20id%3D%5C%22uab672e4d%5C%22%3E%3Cspan%20data-lake-id%3D%5C%22u5d94cd61%5C%22%20id%3D%5C%22u5d94cd61%5C%22%3E%E5%90%84%E4%BA%8C%E8%BF%9B%E5%88%B6%E4%BD%8D%E5%85%A8%E9%83%A8%E5%8F%B3%E7%A7%BB%E8%8B%A5%E5%B9%B2%E4%BD%8D%EF%BC%8C%E6%AD%A3%E6%95%B0%E5%B7%A6%E8%A1%A5%200%EF%BC%8C%E8%B4%9F%E6%95%B0%E5%B7%A6%E8%A1%A5%201%EF%BC%8C%E5%8F%B3%E8%BE%B9%E4%B8%A2%E5%BC%83%3C%2Fspan%3E%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3C%2Ftbody%3E%3C%2Ftable%3E%22%2C%22margin%22%3Atrue%7D\"></card><p data-lake-id=\"u1de1874d\" id=\"u1de1874d\"><br></p><h4 data-lake-id=\"56f2c73f\" id=\"56f2c73f\"><span data-lake-id=\"uf155c960\" id=\"uf155c960\">1. 按位与运算符（&amp;）</span></h4><p data-lake-id=\"u67ca811c\" id=\"u67ca811c\"><br></p><p data-lake-id=\"u93a9abf3\" id=\"u93a9abf3\"><strong><span data-lake-id=\"u9c65ddbc\" id=\"u9c65ddbc\">定义：</span></strong><span data-lake-id=\"u5998a4c2\" id=\"u5998a4c2\"> 参加运算的两个数据</span><strong><span data-lake-id=\"u933d3b64\" id=\"u933d3b64\">按二进制位</span></strong><span data-lake-id=\"ud2f0f18b\" id=\"ud2f0f18b\">进行“与”运算。 </span><strong><span data-lake-id=\"u7a168686\" id=\"u7a168686\">运算规则：</span></strong></p><p data-lake-id=\"ua4d0e1e1\" id=\"ua4d0e1e1\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%220%20%26%200%20%3D%200%5Cn0%20%26%201%20%3D%200%5Cn1%20%26%200%20%3D%200%5Cn1%20%26%201%20%3D%201%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%224319d6cf%22%7D\"></card><p data-lake-id=\"u6c88b8b2\" id=\"u6c88b8b2\"><br></p><p data-lake-id=\"uf80e8596\" id=\"uf80e8596\"><span data-lake-id=\"u7ed32e96\" id=\"u7ed32e96\">总结：两位同时为 1，结果才为 1，否则结果为 0。 例如：3&amp;5 即：</span></p><p data-lake-id=\"uc1fbaa91\" id=\"uc1fbaa91\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%220000%200011%5Cn%20%20%200000%200101%5Cn%20%3D%200000%200001%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%2261c795d1%22%7D\"></card><p data-lake-id=\"ucdad3332\" id=\"ucdad3332\"><br></p><p data-lake-id=\"u8b79a6d6\" id=\"u8b79a6d6\"><span data-lake-id=\"u12762d45\" id=\"u12762d45\">因此 3&amp;5 的值为 1。 注意：负数按补码形式参加按位与运算。<br /></span><strong><span data-lake-id=\"ubf130e39\" id=\"ubf130e39\">用途：</span></strong><span data-lake-id=\"ue737a1e8\" id=\"ue737a1e8\"><br /></span><strong><span data-lake-id=\"ucd21e5ca\" id=\"ucd21e5ca\">（1）判断奇偶</span></strong><span data-lake-id=\"u301323e7\" id=\"u301323e7\"><br /></span><span data-lake-id=\"u6c1983da\" id=\"u6c1983da\">只要根据最未位是 0 还是 1 来决定，为 0 就是偶数，为 1 就是奇数。因此可以用 if ((i &amp; 1) == 0)代替 if (i % 2 == 0)来判断 a 是不是偶数。<br /></span><strong><span data-lake-id=\"uae9c4df0\" id=\"uae9c4df0\">（2）清零</span></strong><span data-lake-id=\"ufa5d5fe4\" id=\"ufa5d5fe4\"><br /></span><span data-lake-id=\"u58ff3bd3\" id=\"u58ff3bd3\">如果想将一个单元清零，即使其全部二进制位为 0，只要与一个各位都为零的数值相与，结果为零。</span></p><p data-lake-id=\"u353fe63a\" id=\"u353fe63a\"><br></p><h4 data-lake-id=\"e55e6276\" id=\"e55e6276\"><span data-lake-id=\"uc35b65d5\" id=\"uc35b65d5\">2. 按位或运算符（|）</span></h4><p data-lake-id=\"u796a5f62\" id=\"u796a5f62\"><br></p><p data-lake-id=\"u5086af43\" id=\"u5086af43\"><strong><span data-lake-id=\"u59a309c5\" id=\"u59a309c5\">定义：</span></strong><span data-lake-id=\"ud651d13d\" id=\"ud651d13d\"> 参加运算的两个对象按二进制位进行“或”运算。<br /></span><strong><span data-lake-id=\"ue54860be\" id=\"ue54860be\">运算规则：</span></strong></p><p data-lake-id=\"ubde3d1c0\" id=\"ubde3d1c0\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%220%20%7C%200%20%3D%200%5Cn0%20%7C%201%20%3D%201%5Cn1%20%7C%200%20%3D%201%5Cn1%20%7C%201%20%3D%201%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22bfc8d51c%22%7D\"></card><p data-lake-id=\"uc2787255\" id=\"uc2787255\"><br></p><p data-lake-id=\"u8633363e\" id=\"u8633363e\"><span data-lake-id=\"u3d1f56e2\" id=\"u3d1f56e2\">总结：参加运算的两个对象只要有一个为 1，其值为 1。 例如：3|5 即：</span></p><p data-lake-id=\"u425678de\" id=\"u425678de\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%220000%200011%5Cn%20%200000%200101%5Cn%3D%200000%200111%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%2271d102cb%22%7D\"></card><p data-lake-id=\"ube81db9a\" id=\"ube81db9a\"><br></p><p data-lake-id=\"ua8dccdde\" id=\"ua8dccdde\"><span data-lake-id=\"u5c29ea22\" id=\"u5c29ea22\">因此，3|5 的值为 7。 注意：负数按补码形式参加按位或运算。</span></p><p data-lake-id=\"ud3a6940d\" id=\"ud3a6940d\"><br></p><h4 data-lake-id=\"214fb947\" id=\"214fb947\"><span data-lake-id=\"u8493315f\" id=\"u8493315f\">3. 异或运算符（^）</span></h4><p data-lake-id=\"u50291530\" id=\"u50291530\"><br></p><p data-lake-id=\"u8aa57a1b\" id=\"u8aa57a1b\"><strong><span data-lake-id=\"u10207254\" id=\"u10207254\">定义：</span></strong><span data-lake-id=\"u750f4e4d\" id=\"u750f4e4d\"> 参加运算的两个数据按二进制位进行“异或”运算。<br /></span><strong><span data-lake-id=\"ue4104af7\" id=\"ue4104af7\">运算规则：</span></strong></p><p data-lake-id=\"u9d0f20dc\" id=\"u9d0f20dc\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%220%20%5E%200%20%3D%200%5Cn0%20%5E%201%20%3D%201%5Cn1%20%5E%200%20%3D%201%5Cn1%20%5E%201%20%3D%200%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22e00c5720%22%7D\"></card><p data-lake-id=\"uea1d8393\" id=\"uea1d8393\"><br></p><p data-lake-id=\"ue09edb50\" id=\"ue09edb50\"><span data-lake-id=\"u861043f4\" id=\"u861043f4\">总结：参加运算的两个对象，如果两个相应位相同为 0，相异为 1。 例如：3|5 即：</span></p><p data-lake-id=\"u39016089\" id=\"u39016089\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%220000%200011%5Cn%20%200000%200101%5Cn%3D%200000%200110%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%2250f39870%22%7D\"></card><p data-lake-id=\"ufbb44f20\" id=\"ufbb44f20\"><br></p><p data-lake-id=\"u8428adfa\" id=\"u8428adfa\"><span data-lake-id=\"ua0dab5df\" id=\"ua0dab5df\">因此，3^5 的值为 6。 异或运算的性质:</span></p><p data-lake-id=\"ua665f122\" id=\"ua665f122\"><br></p><ul list=\"uba433ff4\"><li fid=\"uae5ee87d\" data-lake-id=\"uba51b9b1\" id=\"uba51b9b1\"><span data-lake-id=\"u1f571038\" id=\"u1f571038\">交换律：(a</span><sup><span data-lake-id=\"ud36bfa06\" id=\"ud36bfa06\">b)</span></sup><span data-lake-id=\"u250a955e\" id=\"u250a955e\">c == a</span><sup><span data-lake-id=\"u8f0f3521\" id=\"u8f0f3521\">(b</span></sup><span data-lake-id=\"ub91cbcf1\" id=\"ub91cbcf1\">c)</span></li><li fid=\"uae5ee87d\" data-lake-id=\"uc91c9b32\" id=\"uc91c9b32\"><span data-lake-id=\"u3344cbee\" id=\"u3344cbee\">结合律：(a + b)^c == a^b + b^c</span></li><li fid=\"uae5ee87d\" data-lake-id=\"ub8d6343b\" id=\"ub8d6343b\"><span data-lake-id=\"u2199d20e\" id=\"u2199d20e\">对于任何数 x，都有 x</span><sup><span data-lake-id=\"uc82e2a35\" id=\"uc82e2a35\">x=0，x</span></sup><span data-lake-id=\"uf8912a80\" id=\"uf8912a80\">0=x</span></li><li fid=\"uae5ee87d\" data-lake-id=\"u7bc1e87f\" id=\"u7bc1e87f\"><span data-lake-id=\"ue6d1df48\" id=\"ue6d1df48\">自反性: a</span><sup><span data-lake-id=\"uef6c1586\" id=\"uef6c1586\">b</span></sup><span data-lake-id=\"ufbf3b5e2\" id=\"ufbf3b5e2\">b=a^0=a;</span></li></ul><p data-lake-id=\"ubc098fda\" id=\"ubc098fda\"><br></p><h4 data-lake-id=\"e01d3705\" id=\"e01d3705\"><span data-lake-id=\"ud45fa294\" id=\"ud45fa294\">4. 取反运算符 (~)</span></h4><p data-lake-id=\"u713aa7bc\" id=\"u713aa7bc\"><br></p><p data-lake-id=\"u77a20502\" id=\"u77a20502\"><strong><span data-lake-id=\"u166066b9\" id=\"u166066b9\">定义：</span></strong><span data-lake-id=\"u5a2d8f56\" id=\"u5a2d8f56\"> 参加运算的一个数据按二进制进行“取反”运算。<br /></span><strong><span data-lake-id=\"ue55326a5\" id=\"ue55326a5\">运算规则：</span></strong></p><p data-lake-id=\"u1dbcb8a5\" id=\"u1dbcb8a5\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22~%201%20%3D%200~%200%20%3D%201%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%2237ed784c%22%7D\"></card><p data-lake-id=\"u0a246e6b\" id=\"u0a246e6b\"><br></p><p data-lake-id=\"u82a49987\" id=\"u82a49987\"><span data-lake-id=\"u3d907849\" id=\"u3d907849\">总结：对一个二进制数按位取反，即将 0 变 1，1 变 0。 例如：~6 即：</span></p><p data-lake-id=\"u03bfd24a\" id=\"u03bfd24a\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%220000%200110%3D%201111%201001%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22c624702e%22%7D\"></card><p data-lake-id=\"ud174f954\" id=\"ud174f954\"><br></p><p data-lake-id=\"u56520264\" id=\"u56520264\"><span data-lake-id=\"u5938fd8b\" id=\"u5938fd8b\">在计算机中，正数用原码表示，负数使用补码存储，首先看最高位，最高位 1 表示负数，0 表示正数。此计算机二进制码为负数，最高位为符号位。 当发现按位取反为负数时，就</span><strong><span data-lake-id=\"u3021d7ef\" id=\"u3021d7ef\">直接取其补码</span></strong><span data-lake-id=\"u87bfd9f1\" id=\"u87bfd9f1\">，变为十进制：</span></p><p data-lake-id=\"u49863f24\" id=\"u49863f24\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%220000%200110%20%20%20%3D%201111%201001%E5%8F%8D%E7%A0%81%EF%BC%9A1000%200110%E8%A1%A5%E7%A0%81%EF%BC%9A1000%200111%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%2217a2a060%22%7D\"></card><p data-lake-id=\"ubf631e9d\" id=\"ubf631e9d\"><br></p><p data-lake-id=\"ub9fbea54\" id=\"ub9fbea54\"><span data-lake-id=\"u88dec0b5\" id=\"u88dec0b5\">因此，~6 的值为-7。</span></p><p data-lake-id=\"u0e85f0c3\" id=\"u0e85f0c3\"><br></p><h4 data-lake-id=\"e3e7c6ff\" id=\"e3e7c6ff\"><span data-lake-id=\"ucb71555b\" id=\"ucb71555b\">5. 左移运算符（&lt;&lt;）</span></h4><p data-lake-id=\"u0c96ed33\" id=\"u0c96ed33\"><br></p><p data-lake-id=\"u8fb602d5\" id=\"u8fb602d5\"><strong><span data-lake-id=\"u957fa9cb\" id=\"u957fa9cb\">定义：</span></strong><span data-lake-id=\"ud3f4c2a7\" id=\"ud3f4c2a7\"> 将一个运算对象的各二进制位全部左移若干位，左边的二进制位丢弃，右边补 0。 设 a=1010 1110，a = a&lt;&lt; 2 将 a 的二进制位左移 2 位、右补 0，即得 a=1011 1000。 若左移时舍弃的高位不包含 1，则每左移一位，相当于该数乘以 2。</span></p><p data-lake-id=\"uf39bf9e0\" id=\"uf39bf9e0\"><br></p><h4 data-lake-id=\"ae87ecf3\" id=\"ae87ecf3\"><span data-lake-id=\"u6fb2cb33\" id=\"u6fb2cb33\">6. 右移运算符（&gt;&gt;）</span></h4><p data-lake-id=\"uae183963\" id=\"uae183963\"><br></p><p data-lake-id=\"u75ddb38e\" id=\"u75ddb38e\"><strong><span data-lake-id=\"u80acc5e9\" id=\"u80acc5e9\">定义：</span></strong><span data-lake-id=\"u92805199\" id=\"u92805199\"> 将一个数的各二进制位全部右移若干位，正数左补 0，负数左补 1，右边丢弃。 例如：a=a&gt;&gt;2 将 a 的二进制位右移 2 位，左补 0 或者 左补 1 得看被移数是正还是负。 操作数每右移一位，相当于该数除以 2。</span></p><p data-lake-id=\"u5afd3487\" id=\"u5afd3487\"><br></p><h4 data-lake-id=\"22978721\" id=\"22978721\"><span data-lake-id=\"u9039b95e\" id=\"u9039b95e\">7. 原码、补码、反码</span></h4><p data-lake-id=\"u1b655ddd\" id=\"u1b655ddd\"><br></p><p data-lake-id=\"ua9bcc1c3\" id=\"ua9bcc1c3\"><span data-lake-id=\"ua2020abf\" id=\"ua2020abf\">上面提到了补码、反码等知识，这里就补充一下。 计算机中的</span><strong><span data-lake-id=\"u5bf84bfd\" id=\"u5bf84bfd\">有符号数</span></strong><span data-lake-id=\"u348adc02\" id=\"u348adc02\">有三种表示方法，即原码、反码和补码。三种表示方法均有符号位和数值位两部分，符号位都是用 0 表示“正”，用 1 表示“负”，而数值位，三种表示方法各不相同。<br /></span><strong><span data-lake-id=\"u9800e785\" id=\"u9800e785\">（1）原码</span></strong><span data-lake-id=\"u0afde69f\" id=\"u0afde69f\"><br /></span><span data-lake-id=\"u527d2d26\" id=\"u527d2d26\">原码就是一个数的二进制数。例如：10 的原码为 0000 1010<br /></span><strong><span data-lake-id=\"ued82e20c\" id=\"ued82e20c\">（2）反码</span></strong></p><p data-lake-id=\"u62327f5e\" id=\"u62327f5e\"><br></p><ul list=\"u2b364f28\"><li fid=\"ube4e3153\" data-lake-id=\"u9b80182f\" id=\"u9b80182f\"><span data-lake-id=\"u6be02946\" id=\"u6be02946\">正数的反码与原码相同，如：10 反码为 0000 1010</span></li><li fid=\"ube4e3153\" data-lake-id=\"u59e2b77f\" id=\"u59e2b77f\"><span data-lake-id=\"ucc8aaa25\" id=\"ucc8aaa25\">负数的反码为除符号位，按位取反，即 0 变 1，1 变 0。</span></li></ul><p data-lake-id=\"uab54194c\" id=\"uab54194c\"><br></p><p data-lake-id=\"u29e032a0\" id=\"u29e032a0\"><span data-lake-id=\"ua413cb77\" id=\"ua413cb77\">例如：-10</span></p><p data-lake-id=\"u91993e5c\" id=\"u91993e5c\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%E5%8E%9F%E7%A0%81%EF%BC%9A1000%201010%5Cn%E5%8F%8D%E7%A0%81%EF%BC%9A1111%200101%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22a4b9db63%22%7D\"></card><p data-lake-id=\"u8849737b\" id=\"u8849737b\"><br></p><p data-lake-id=\"ucd00ff04\" id=\"ucd00ff04\"><strong><span data-lake-id=\"u88787c65\" id=\"u88787c65\">（3）补码</span></strong></p><p data-lake-id=\"u26d6a157\" id=\"u26d6a157\"><br></p><ul list=\"ub4c3f28f\"><li fid=\"u56a20c47\" data-lake-id=\"u84ed906d\" id=\"u84ed906d\"><span data-lake-id=\"u54d96470\" id=\"u54d96470\">正数的补码与原码相同，如：10 补码为 0000 1010</span></li><li fid=\"u56a20c47\" data-lake-id=\"u15a1743f\" id=\"u15a1743f\"><span data-lake-id=\"ua204a6e3\" id=\"ua204a6e3\">负数的补码是原码除符号位外的所有位取反即 0 变 1，1 变 0，然后加 1，也就是反码加 1。</span></li></ul><p data-lake-id=\"uc1f4aab8\" id=\"uc1f4aab8\"><br></p><p data-lake-id=\"u349ea78a\" id=\"u349ea78a\"><span data-lake-id=\"u70996c8b\" id=\"u70996c8b\">例如：-10</span></p><p data-lake-id=\"ud8faddd1\" id=\"ud8faddd1\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%E5%8E%9F%E7%A0%81%EF%BC%9A1000%201010%5Cn%E5%8F%8D%E7%A0%81%EF%BC%9A1111%200101%5Cn%E8%A1%A5%E7%A0%81%EF%BC%9A1111%200110%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22f210beae%22%7D\"></card>",
  "body_draft_lake": "",
  "public": 0,
  "status": 1,
  "view_status": 0,
  "read_status": 1,
  "likes_count": 0,
  "comments_count": 0,
  "content_updated_at": "2022-04-04T11:33:44.000Z",
  "deleted_at": null,
  "created_at": "2022-04-04T11:33:45.000Z",
  "updated_at": "2022-05-10T15:12:34.000Z",
  "published_at": "2022-04-04T11:33:44.000Z",
  "first_published_at": "2022-04-04T11:33:44.485Z",
  "word_count": 1409,
  "cover": null,
  "description": "现代计算机中数据都是以二进制的形式存储的，即 0、1 两种状态，计算机对二进制数据进行的运算加减乘除等都是叫位运算，即将符号位共同参与运算的运算。常见的位运算有以下几种：运算符描述运算规则&与两个位都为 1 时，结果才为 1|或^异或两个位相同为 0，相异为 1~取反0 变 1，1 变 0<<...",
  "custom_description": null,
  "hits": 0,
  "_serializer": "v2.doc_detail"
}