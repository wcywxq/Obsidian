{
  "id": 72212175,
  "slug": "vg2cmd",
  "title": "创建组件的几种方式",
  "book_id": 26225124,
  "book": {
    "id": 26225124,
    "type": "Book",
    "slug": "mxunh7",
    "name": "八股文 eight-part essay writing",
    "user_id": 732231,
    "description": "前端八股文",
    "creator_id": 732231,
    "public": 0,
    "items_count": 239,
    "likes_count": 0,
    "watches_count": 1,
    "content_updated_at": "2023-11-11T18:15:57.023Z",
    "updated_at": "2023-11-11T18:15:57.000Z",
    "created_at": "2022-04-04T11:31:45.000Z",
    "namespace": "wcywxq/mxunh7",
    "user": {
      "id": 732231,
      "type": "User",
      "login": "wcywxq",
      "name": "magic",
      "description": null,
      "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/732231/1606968271774-avatar/886ad88b-d2cc-4c9e-a674-f70eb51a679c.png",
      "books_count": 18,
      "public_books_count": 0,
      "followers_count": 0,
      "following_count": 0,
      "created_at": "2020-01-08T14:21:31.000Z",
      "updated_at": "2023-11-13T09:32:35.000Z",
      "_serializer": "v2.user"
    },
    "_serializer": "v2.book"
  },
  "user_id": 732231,
  "creator": {
    "id": 732231,
    "type": "User",
    "login": "wcywxq",
    "name": "magic",
    "description": null,
    "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/732231/1606968271774-avatar/886ad88b-d2cc-4c9e-a674-f70eb51a679c.png",
    "books_count": 18,
    "public_books_count": 0,
    "followers_count": 0,
    "following_count": 0,
    "created_at": "2020-01-08T14:21:31.000Z",
    "updated_at": "2023-11-13T09:32:35.000Z",
    "_serializer": "v2.user"
  },
  "format": "lake",
  "body": "<a name=\"P1PfC\"></a>\n## React.createClass\nReact.createClass 是 react 最传统、兼容性最好的方法。该方法构建一个组件对象，当组件被调用时，就会创建几个组件实例\n<a name=\"TZhdR\"></a>\n## ES6 class 关键字\n与 createClass 类似，只是从调用内部方法变成了使用类的方式来实现\n<a name=\"v4uK5\"></a>\n## 无状态函数\n创建时始终保持一个实例，避免了不必要的检查和内存分配\n",
  "body_draft": "",
  "body_html": "<!doctype html><h2 id=\"P1PfC\"><span>React.createClass</span></h2><p data-lake-id=\"u9e9e2a66\"><span>React.createClass 是 react 最传统、兼容性最好的方法。该方法构建一个组件对象，当组件被调用时，就会创建几个组件实例</span></p><h2 id=\"TZhdR\"><span>ES6 class 关键字</span></h2><p data-lake-id=\"ufa8c78ba\"><span>与 createClass 类似，只是从调用内部方法变成了使用类的方式来实现</span></p><h2 id=\"v4uK5\"><span>无状态函数</span></h2><p data-lake-id=\"u70fbaead\"><span>创建时始终保持一个实例，避免了不必要的检查和内存分配</span></p>",
  "body_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"viewport\" content=\"adapt\" /><h2 data-lake-id=\"P1PfC\" id=\"P1PfC\"><span data-lake-id=\"uedba5131\" id=\"uedba5131\">React.createClass</span></h2><p data-lake-id=\"u9e9e2a66\" id=\"u9e9e2a66\"><span data-lake-id=\"u38688f8b\" id=\"u38688f8b\">React.createClass 是 react 最传统、兼容性最好的方法。该方法构建一个组件对象，当组件被调用时，就会创建几个组件实例</span></p><h2 data-lake-id=\"TZhdR\" id=\"TZhdR\"><span data-lake-id=\"uc2aebbf0\" id=\"uc2aebbf0\">ES6 class 关键字</span></h2><p data-lake-id=\"ufa8c78ba\" id=\"ufa8c78ba\"><span data-lake-id=\"u8aedfc9b\" id=\"u8aedfc9b\">与 createClass 类似，只是从调用内部方法变成了使用类的方式来实现</span></p><h2 data-lake-id=\"v4uK5\" id=\"v4uK5\"><span data-lake-id=\"u1e8224bb\" id=\"u1e8224bb\">无状态函数</span></h2><p data-lake-id=\"u70fbaead\" id=\"u70fbaead\"><span data-lake-id=\"u1a3e3dd9\" id=\"u1a3e3dd9\">创建时始终保持一个实例，避免了不必要的检查和内存分配</span></p>",
  "body_draft_lake": "",
  "public": 0,
  "status": 1,
  "view_status": 0,
  "read_status": 1,
  "likes_count": 0,
  "comments_count": 0,
  "content_updated_at": "2022-04-04T11:33:27.000Z",
  "deleted_at": null,
  "created_at": "2022-04-04T11:33:27.000Z",
  "updated_at": "2022-05-10T15:12:37.000Z",
  "published_at": "2022-04-04T11:33:27.000Z",
  "first_published_at": "2022-04-04T11:33:26.685Z",
  "word_count": 109,
  "cover": null,
  "description": "React.createClassReact.createClass 是 react 最传统、兼容性最好的方法。该方法构建一个组件对象，当组件被调用时，就会创建几个组件实例ES6 class 关键字与 createClass 类似，只是从调用内部方法变成了使用类的方式来实现无状态函数创建时始终...",
  "custom_description": null,
  "hits": 0,
  "_serializer": "v2.doc_detail"
}