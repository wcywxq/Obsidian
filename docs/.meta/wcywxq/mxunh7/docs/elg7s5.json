{
  "id": 72212127,
  "slug": "elg7s5",
  "title": "redux 和 mobx 对比",
  "book_id": 26225124,
  "book": {
    "id": 26225124,
    "type": "Book",
    "slug": "mxunh7",
    "name": "八股文 eight-part essay writing",
    "user_id": 732231,
    "description": "前端八股文",
    "creator_id": 732231,
    "public": 0,
    "items_count": 239,
    "likes_count": 0,
    "watches_count": 1,
    "content_updated_at": "2023-11-11T18:15:57.023Z",
    "updated_at": "2023-11-11T18:15:57.000Z",
    "created_at": "2022-04-04T11:31:45.000Z",
    "namespace": "wcywxq/mxunh7",
    "user": {
      "id": 732231,
      "type": "User",
      "login": "wcywxq",
      "name": "magic",
      "description": null,
      "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/732231/1606968271774-avatar/886ad88b-d2cc-4c9e-a674-f70eb51a679c.png",
      "books_count": 18,
      "public_books_count": 0,
      "followers_count": 0,
      "following_count": 0,
      "created_at": "2020-01-08T14:21:31.000Z",
      "updated_at": "2023-11-13T09:32:35.000Z",
      "_serializer": "v2.user"
    },
    "_serializer": "v2.book"
  },
  "user_id": 732231,
  "creator": {
    "id": 732231,
    "type": "User",
    "login": "wcywxq",
    "name": "magic",
    "description": null,
    "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/732231/1606968271774-avatar/886ad88b-d2cc-4c9e-a674-f70eb51a679c.png",
    "books_count": 18,
    "public_books_count": 0,
    "followers_count": 0,
    "following_count": 0,
    "created_at": "2020-01-08T14:21:31.000Z",
    "updated_at": "2023-11-13T09:32:35.000Z",
    "_serializer": "v2.user"
  },
  "format": "lake",
  "body": "1. Redux 要解决的问题是统一数据流，数据流完全可控并可追踪，要实现该目标，便需要进行相关的约束\n2. Redux 由此引出 dispatch action reducer 等概念，对 state 的概念进行强约束，然而对于一些项目来说，太过强，便失去了灵活性。mobx 便是填补此空缺的\n3. Redux 将数据保存在**单一的 store** 中，mobx 将数据保存在**分散的多个 store** 中\n4. Redux 使用 plain object 保存数据，需要手动处理变化后的操作；mobx 使用 observable 保存数据，数据变化后自动处理响应的操作\n5. Redux 使用不可变状态，这意味着状态是只读的，不能直接去修改它，而是应该返回一个新的状态，同时使用纯函数；mobx 中的状态是可变的，可以直接对其进行修改\n6. Mobx 相对来说比较简单，在其中有很多抽象，mobx 更多的使用面向对象编程的思维；redux 会比较复杂，因为其中的函数式编程思想掌握起来不是那么容易，同时需要借助一系列的中间件来处理异步和副作用\n7. Mobx 中有更多的抽象和封装，调试会比较困难，同时结束也难以预测；而 redux 提供能够进行时间回溯的开发工具，同时其纯函数以及更少的抽象，让调试变得更加容易\n8. 使用 mobx 的 react 比较类似 vue\n\n\n",
  "body_draft": "",
  "body_html": "<!doctype html><ol><li><span>Redux 要解决的问题是统一数据流，数据流完全可控并可追踪，要实现该目标，便需要进行相关的约束</span></li></ol><ol start=\"2\"><li><span>Redux 由此引出 dispatch action reducer 等概念，对 state 的概念进行强约束，然而对于一些项目来说，太过强，便失去了灵活性。mobx 便是填补此空缺的</span></li><li><span>Redux 将数据保存在</span><strong><span>单一的 store</span></strong><span> 中，mobx 将数据保存在</span><strong><span>分散的多个 store</span></strong><span> 中</span></li><li><span>Redux 使用 plain object 保存数据，需要手动处理变化后的操作；mobx 使用 observable 保存数据，数据变化后自动处理响应的操作</span></li><li><span>Redux 使用不可变状态，这意味着状态是只读的，不能直接去修改它，而是应该返回一个新的状态，同时使用纯函数；mobx 中的状态是可变的，可以直接对其进行修改</span></li><li><span>Mobx 相对来说比较简单，在其中有很多抽象，mobx 更多的使用面向对象编程的思维；redux 会比较复杂，因为其中的函数式编程思想掌握起来不是那么容易，同时需要借助一系列的中间件来处理异步和副作用</span></li><li><span>Mobx 中有更多的抽象和封装，调试会比较困难，同时结束也难以预测；而 redux 提供能够进行时间回溯的开发工具，同时其纯函数以及更少的抽象，让调试变得更加容易</span></li><li><span>使用 mobx 的 react 比较类似 vue</span></li></ol><p data-lake-id=\"u7a382220\"><span>​</span><br /></p><p data-lake-id=\"u51c8a9af\"><span>​</span><br /></p>",
  "body_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"viewport\" content=\"adapt\" /><ol list=\"u5d43ba43\"><li fid=\"u600260be\" data-lake-id=\"u1b4163b5\" id=\"u1b4163b5\"><span data-lake-id=\"u2a069fb4\" id=\"u2a069fb4\">Redux 要解决的问题是统一数据流，数据流完全可控并可追踪，要实现该目标，便需要进行相关的约束</span></li></ol><ol list=\"u2011ee09\" start=\"2\"><li fid=\"uafe79de3\" data-lake-id=\"ue8eca5d8\" id=\"ue8eca5d8\"><span data-lake-id=\"ua5154288\" id=\"ua5154288\">Redux 由此引出 dispatch action reducer 等概念，对 state 的概念进行强约束，然而对于一些项目来说，太过强，便失去了灵活性。mobx 便是填补此空缺的</span></li><li fid=\"uafe79de3\" data-lake-id=\"u3b08e595\" id=\"u3b08e595\"><span data-lake-id=\"u1ca61708\" id=\"u1ca61708\">Redux 将数据保存在</span><strong><span data-lake-id=\"u94aae891\" id=\"u94aae891\">单一的 store</span></strong><span data-lake-id=\"ue8a4bbea\" id=\"ue8a4bbea\"> 中，mobx 将数据保存在</span><strong><span data-lake-id=\"ueac3deb7\" id=\"ueac3deb7\">分散的多个 store</span></strong><span data-lake-id=\"u184ff19f\" id=\"u184ff19f\"> 中</span></li><li fid=\"uafe79de3\" data-lake-id=\"u0a7556e0\" id=\"u0a7556e0\"><span data-lake-id=\"ubbb09c7e\" id=\"ubbb09c7e\">Redux 使用 plain object 保存数据，需要手动处理变化后的操作；mobx 使用 observable 保存数据，数据变化后自动处理响应的操作</span></li><li fid=\"uafe79de3\" data-lake-id=\"u968e366d\" id=\"u968e366d\"><span data-lake-id=\"uede2c962\" id=\"uede2c962\">Redux 使用不可变状态，这意味着状态是只读的，不能直接去修改它，而是应该返回一个新的状态，同时使用纯函数；mobx 中的状态是可变的，可以直接对其进行修改</span></li><li fid=\"uafe79de3\" data-lake-id=\"udbeab5e7\" id=\"udbeab5e7\"><span data-lake-id=\"u09ab7944\" id=\"u09ab7944\">Mobx 相对来说比较简单，在其中有很多抽象，mobx 更多的使用面向对象编程的思维；redux 会比较复杂，因为其中的函数式编程思想掌握起来不是那么容易，同时需要借助一系列的中间件来处理异步和副作用</span></li><li fid=\"uafe79de3\" data-lake-id=\"u1b62a160\" id=\"u1b62a160\"><span data-lake-id=\"u9a1e46af\" id=\"u9a1e46af\">Mobx 中有更多的抽象和封装，调试会比较困难，同时结束也难以预测；而 redux 提供能够进行时间回溯的开发工具，同时其纯函数以及更少的抽象，让调试变得更加容易</span></li><li fid=\"uafe79de3\" data-lake-id=\"u33a687e6\" id=\"u33a687e6\"><span data-lake-id=\"u7969b269\" id=\"u7969b269\">使用 mobx 的 react 比较类似 vue</span></li></ol><p data-lake-id=\"u7a382220\" id=\"u7a382220\"><span data-lake-id=\"ub2ba97d7\" id=\"ub2ba97d7\">​</span><br></p><p data-lake-id=\"u51c8a9af\" id=\"u51c8a9af\"><span data-lake-id=\"ub8d5feb0\" id=\"ub8d5feb0\">​</span><br></p>",
  "body_draft_lake": "",
  "public": 0,
  "status": 1,
  "view_status": 0,
  "read_status": 1,
  "likes_count": 0,
  "comments_count": 0,
  "content_updated_at": "2022-04-04T11:33:10.000Z",
  "deleted_at": null,
  "created_at": "2022-04-04T11:33:10.000Z",
  "updated_at": "2022-05-10T15:12:39.000Z",
  "published_at": "2022-04-04T11:33:10.000Z",
  "first_published_at": "2022-04-04T11:33:10.378Z",
  "word_count": 409,
  "cover": null,
  "description": "Redux 要解决的问题是统一数据流，数据流完全可控并可追踪，要实现该目标，便需要进行相关的约束Redux 由此引出 dispatch action reducer 等概念，对 state 的概念进行强约束，然而对于一些项目来说，太过强，便失去了灵活性。mobx 便是填补此空缺的Redux 将...",
  "custom_description": null,
  "hits": 0,
  "_serializer": "v2.doc_detail"
}