{
  "id": 72212245,
  "slug": "bcw1ix",
  "title": "udp 协议",
  "book_id": 26225124,
  "book": {
    "id": 26225124,
    "type": "Book",
    "slug": "mxunh7",
    "name": "八股文 eight-part essay writing",
    "user_id": 732231,
    "description": "前端八股文",
    "creator_id": 732231,
    "public": 0,
    "items_count": 239,
    "likes_count": 0,
    "watches_count": 1,
    "content_updated_at": "2023-11-11T18:15:57.023Z",
    "updated_at": "2023-11-11T18:15:57.000Z",
    "created_at": "2022-04-04T11:31:45.000Z",
    "namespace": "wcywxq/mxunh7",
    "user": {
      "id": 732231,
      "type": "User",
      "login": "wcywxq",
      "name": "magic",
      "description": null,
      "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/732231/1606968271774-avatar/886ad88b-d2cc-4c9e-a674-f70eb51a679c.png",
      "books_count": 18,
      "public_books_count": 0,
      "followers_count": 0,
      "following_count": 0,
      "created_at": "2020-01-08T14:21:31.000Z",
      "updated_at": "2023-11-13T09:32:35.000Z",
      "_serializer": "v2.user"
    },
    "_serializer": "v2.book"
  },
  "user_id": 732231,
  "creator": {
    "id": 732231,
    "type": "User",
    "login": "wcywxq",
    "name": "magic",
    "description": null,
    "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/732231/1606968271774-avatar/886ad88b-d2cc-4c9e-a674-f70eb51a679c.png",
    "books_count": 18,
    "public_books_count": 0,
    "followers_count": 0,
    "following_count": 0,
    "created_at": "2020-01-08T14:21:31.000Z",
    "updated_at": "2023-11-13T09:32:35.000Z",
    "_serializer": "v2.user"
  },
  "format": "lake",
  "body": "UDP是传输层的协议，功能即为在IP的数据报服务之上增加了最基本的服务：复用和分用以及差错检测。<br />UDP提供不可靠服务，具有 TCP 所没有的优势：\n\n- UDP无连接，时间上不存在建立连接需要的时延。空间上，TCP需要在端系统中维护连接状态，需要一定的开销。此连接装入包括接收和发送缓存，拥塞控制参数和序号与确认号的参数。UCP不维护连接状态，也不跟踪这些参数，开销小。空间和时间上都具有优势。\n:::info\n举个例子：<br />\tDNS如果运行在TCP之上而不是UDP，那么DNS的速度将会慢很多。<br />HTTP使用TCP而不是UDP，是因为对于基于文本数据的Web网页来说，可靠性很重要。<br />同一种专用应用服务器在支持UDP时，一定能支持更多的活动客户机。\n:::\n\n- 分组首部开销小，TCP首部20字节，UDP首部8字节。\n- UDP没有拥塞控制，应用层能够更好的控制要发送的数据和发送时间，网络中的拥塞控制也不会影响主机的发送速率。某些实时应用要求以稳定的速度发送，能容 忍一些数据的丢失，但是不能允许有较大的时延（比如实时视频，直播等）\n- UDP提供尽最大努力的交付，不保证可靠交付。所有维护传输可靠性的工作需要用户在应用层来完成。没有TCP的确认机制、重传机制。如果因为网络原因没有传送到对端，UDP也不会给应用层返回错误信息\n- UDP是面向报文的，对应用层交下来的报文，添加首部后直接乡下交付为IP层，既不合并，也不拆分，保留这些报文的边界。对IP层交上来UDP用户数据报，在去除首部后就原封不动地交付给上层应用进程，报文不可分割，是UDP数据报处理的最小单位。<br />正是因为这样，UDP显得不够灵活，不能控制读写数据的次数和数量。比如我们要发送100个字节的报文，我们调用一次sendto函数就会发送100字节，对端也需要用recvfrom函数一次性接收100字节，不能使用循环每次获取10个字节，获取十次这样的做法。\n- UDP常用一次性传输比较少量数据的网络应用，如DNS,SNMP等，因为对于这些应用，若是采用TCP，为连接的创建，维护和拆除带来不小的开销。UDP也常用于多媒体应用（如IP电话，实时视频会议，流媒体等）数据的可靠传输对他们而言并不重要，TCP的拥塞控制会使他们有较大的延迟，也是不可容忍的\n",
  "body_draft": "",
  "body_html": "<!doctype html><p data-lake-id=\"u6e65432f\" style=\"text-indent: 2em;\"><span>UDP是传输层的协议，功能即为在IP的数据报服务之上增加了最基本的服务：复用和分用以及差错检测。<br />UDP提供不可靠服务，具有 TCP 所没有的优势：<br /><br /></span></p><ul><li><span>UDP无连接，时间上不存在建立连接需要的时延。空间上，TCP需要在端系统中维护连接状态，需要一定的开销。此连接装入包括接收和发送缓存，拥塞控制参数和序号与确认号的参数。UCP不维护连接状态，也不跟踪这些参数，开销小。空间和时间上都具有优势。</span></li></ul><blockquote class=\"lake-alert lake-alert-info\"><p data-lake-id=\"u54da7a27\"><span>举个例子：<br />\tDNS如果运行在TCP之上而不是UDP，那么DNS的速度将会慢很多。<br />HTTP使用TCP而不是UDP，是因为对于基于文本数据的Web网页来说，可靠性很重要。<br />同一种专用应用服务器在支持UDP时，一定能支持更多的活动客户机。</span></p></blockquote><ul><li><span>分组首部开销小，TCP首部20字节，UDP首部8字节。</span></li><li><span>UDP没有拥塞控制</span><span>，应用层能够更好的控制要发送的数据和发送时间，网络中的拥塞控制也不会影响主机的发送速率。某些实时应用要求以稳定的速度发送，</span><span>能容 忍一些数据的丢失，但是不能允许有较大的时延</span><span>（比如实时视频，直播等）</span></li><li><span>UDP</span><span>提供尽最大努力的交付</span><span>，不保证可靠交付。所有维护传输可靠性的工作需要用户在</span><span>应用层</span><span>来完成。没有TCP的确认机制、重传机制。如果因为网络原因没有传送到对端，UDP也不会给应用层返回错误信息</span></li><li><span>UDP是</span><span>面向报文</span><span>的，对应用层交下来的报文，添加首部后直接乡下交付为IP层，既不合并，也不拆分，保留这些报文的边界。对IP层交上来UDP用户数据报，在去除首部后就原封不动地交付给上层应用进程，报文不可分割，是UDP数据报处理的最小单位。<br />正是因为这样，UDP显得不够灵活，不能控制读写数据的次数和数量。比如我们要发送100个字节的报文，我们调用一次sendto函数就会发送100字节，对端也需要用recvfrom函数一次性接收100字节，不能使用循环每次获取10个字节，获取十次这样的做法。</span></li><li><span>UDP常用一次性传输比较少量数据的网络应用，如DNS,SNMP等，因为对于这些应用，若是采用TCP，为连接的创建，维护和拆除带来不小的开销。UDP也常用于多媒体应用（如IP电话，实时视频会议，流媒体等）数据的可靠传输对他们而言并不重要，TCP的拥塞控制会使他们有较大的延迟，也是不可容忍的</span></li></ul>",
  "body_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"viewport\" content=\"adapt\" /><p data-lake-id=\"u6e65432f\" id=\"u6e65432f\" style=\"text-indent: 2em\"><span data-lake-id=\"ud0891447\" id=\"ud0891447\">UDP是传输层的协议，功能即为在IP的数据报服务之上增加了最基本的服务：复用和分用以及差错检测。<br />UDP提供不可靠服务，具有 TCP 所没有的优势：<br /><br /></span></p><ul list=\"ucad45701\"><li fid=\"u1aba47ec\" data-lake-id=\"u2daa9336\" id=\"u2daa9336\"><span data-lake-id=\"u7c617822\" id=\"u7c617822\">UDP无连接，时间上不存在建立连接需要的时延。空间上，TCP需要在端系统中维护连接状态，需要一定的开销。此连接装入包括接收和发送缓存，拥塞控制参数和序号与确认号的参数。UCP不维护连接状态，也不跟踪这些参数，开销小。空间和时间上都具有优势。</span></li></ul><blockquote data-lake-id=\"u23b7291d\" id=\"u23b7291d\" class=\"lake-alert lake-alert-info\"><p data-lake-id=\"u54da7a27\" id=\"u54da7a27\"><span data-lake-id=\"u0b7c54d8\" id=\"u0b7c54d8\">举个例子：<br />\tDNS如果运行在TCP之上而不是UDP，那么DNS的速度将会慢很多。<br />HTTP使用TCP而不是UDP，是因为对于基于文本数据的Web网页来说，可靠性很重要。<br />同一种专用应用服务器在支持UDP时，一定能支持更多的活动客户机。</span></p></blockquote><ul list=\"ucad45701\" start=\"2\"><li fid=\"u1aba47ec\" data-lake-id=\"u4109440a\" id=\"u4109440a\"><span data-lake-id=\"u17b571b7\" id=\"u17b571b7\">分组首部开销小，TCP首部20字节，UDP首部8字节。</span></li><li fid=\"u1aba47ec\" data-lake-id=\"u9a69f22b\" id=\"u9a69f22b\"><span data-lake-id=\"uca13eba1\" id=\"uca13eba1\">UDP没有拥塞控制</span><span data-lake-id=\"u3393feb3\" id=\"u3393feb3\">，应用层能够更好的控制要发送的数据和发送时间，网络中的拥塞控制也不会影响主机的发送速率。某些实时应用要求以稳定的速度发送，</span><span data-lake-id=\"uc90f6703\" id=\"uc90f6703\">能容 忍一些数据的丢失，但是不能允许有较大的时延</span><span data-lake-id=\"uc519e2c6\" id=\"uc519e2c6\">（比如实时视频，直播等）</span></li><li fid=\"u1aba47ec\" data-lake-id=\"u18ebfb39\" id=\"u18ebfb39\"><span data-lake-id=\"u6dcc44fe\" id=\"u6dcc44fe\">UDP</span><span data-lake-id=\"u07672ade\" id=\"u07672ade\">提供尽最大努力的交付</span><span data-lake-id=\"uc0b70ef2\" id=\"uc0b70ef2\">，不保证可靠交付。所有维护传输可靠性的工作需要用户在</span><span data-lake-id=\"ufcb86408\" id=\"ufcb86408\">应用层</span><span data-lake-id=\"udf08eaf7\" id=\"udf08eaf7\">来完成。没有TCP的确认机制、重传机制。如果因为网络原因没有传送到对端，UDP也不会给应用层返回错误信息</span></li><li fid=\"u1aba47ec\" data-lake-id=\"u34cd7f3f\" id=\"u34cd7f3f\"><span data-lake-id=\"u226138ea\" id=\"u226138ea\">UDP是</span><span data-lake-id=\"uad1eb10d\" id=\"uad1eb10d\">面向报文</span><span data-lake-id=\"u4d90b6f1\" id=\"u4d90b6f1\">的，对应用层交下来的报文，添加首部后直接乡下交付为IP层，既不合并，也不拆分，保留这些报文的边界。对IP层交上来UDP用户数据报，在去除首部后就原封不动地交付给上层应用进程，报文不可分割，是UDP数据报处理的最小单位。<br />正是因为这样，UDP显得不够灵活，不能控制读写数据的次数和数量。比如我们要发送100个字节的报文，我们调用一次sendto函数就会发送100字节，对端也需要用recvfrom函数一次性接收100字节，不能使用循环每次获取10个字节，获取十次这样的做法。</span></li><li fid=\"u1aba47ec\" data-lake-id=\"u51da77d9\" id=\"u51da77d9\"><span data-lake-id=\"u6aa44cde\" id=\"u6aa44cde\">UDP常用一次性传输比较少量数据的网络应用，如DNS,SNMP等，因为对于这些应用，若是采用TCP，为连接的创建，维护和拆除带来不小的开销。UDP也常用于多媒体应用（如IP电话，实时视频会议，流媒体等）数据的可靠传输对他们而言并不重要，TCP的拥塞控制会使他们有较大的延迟，也是不可容忍的</span></li></ul>",
  "body_draft_lake": "",
  "public": 0,
  "status": 1,
  "view_status": 0,
  "read_status": 1,
  "likes_count": 0,
  "comments_count": 0,
  "content_updated_at": "2022-04-04T11:33:50.000Z",
  "deleted_at": null,
  "created_at": "2022-04-04T11:33:50.000Z",
  "updated_at": "2022-05-10T15:12:33.000Z",
  "published_at": "2022-04-04T11:33:50.000Z",
  "first_published_at": "2022-04-04T11:33:49.523Z",
  "word_count": 828,
  "cover": null,
  "description": "UDP是传输层的协议，功能即为在IP的数据报服务之上增加了最基本的服务：复用和分用以及差错检测。UDP提供不可靠服务，具有 TCP 所没有的优势：UDP无连接，时间上不存在建立连接需要的时延。空间上，TCP需要在端系统中维护连接状态，需要一定的开销。此连接装入包括接收和发送缓存，拥塞控制参数和...",
  "custom_description": null,
  "hits": 0,
  "_serializer": "v2.doc_detail"
}