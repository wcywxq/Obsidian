{
  "id": 72212304,
  "slug": "hct7os",
  "title": "ts 是基于结构类型兼容的",
  "book_id": 26225124,
  "book": {
    "id": 26225124,
    "type": "Book",
    "slug": "mxunh7",
    "name": "八股文 eight-part essay writing",
    "user_id": 732231,
    "description": "前端八股文",
    "creator_id": 732231,
    "public": 0,
    "items_count": 239,
    "likes_count": 0,
    "watches_count": 1,
    "content_updated_at": "2023-11-11T18:15:57.023Z",
    "updated_at": "2023-11-11T18:15:57.000Z",
    "created_at": "2022-04-04T11:31:45.000Z",
    "namespace": "wcywxq/mxunh7",
    "user": {
      "id": 732231,
      "type": "User",
      "login": "wcywxq",
      "name": "magic",
      "description": null,
      "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/732231/1606968271774-avatar/886ad88b-d2cc-4c9e-a674-f70eb51a679c.png",
      "books_count": 18,
      "public_books_count": 0,
      "followers_count": 0,
      "following_count": 0,
      "created_at": "2020-01-08T14:21:31.000Z",
      "updated_at": "2023-11-13T09:32:35.000Z",
      "_serializer": "v2.user"
    },
    "_serializer": "v2.book"
  },
  "user_id": 732231,
  "creator": {
    "id": 732231,
    "type": "User",
    "login": "wcywxq",
    "name": "magic",
    "description": null,
    "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/732231/1606968271774-avatar/886ad88b-d2cc-4c9e-a674-f70eb51a679c.png",
    "books_count": 18,
    "public_books_count": 0,
    "followers_count": 0,
    "following_count": 0,
    "created_at": "2020-01-08T14:21:31.000Z",
    "updated_at": "2023-11-13T09:32:35.000Z",
    "_serializer": "v2.user"
  },
  "format": "lake",
  "body": "`typeScript`的类型兼容是基于结构的，不是基于名义的。下面的代码在 `ts`中是完全可行的，同样的代码在 `jav`等基于名义的语言则会抛错。\n```typescript\ninterface Named {\n  name: string\n}\n\nclass Person {\n  name: string\n}\n\nlet p: Named\n// ok\np = new Person()\n```\n",
  "body_draft": "",
  "body_html": "<!doctype html><p data-lake-id=\"uf2a0e805\"><code><span>typeScript</span></code><span>的类型兼容是基于结构的，不是基于名义的。下面的代码在 </span><code><span>ts</span></code><span>中是完全可行的，同样的代码在 </span><code><span>jav</span></code><span>等基于名义的语言则会抛错。</span></p><pre data-lang=\"typescript\"><code>interface Named {\n  name: string\n}\n\nclass Person {\n  name: string\n}\n\nlet p: Named\n// ok\np = new Person()</code></pre>",
  "body_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"viewport\" content=\"adapt\" /><p data-lake-id=\"uf2a0e805\" id=\"uf2a0e805\"><code data-lake-id=\"u34bf490f\" id=\"u34bf490f\"><span data-lake-id=\"ueb0f3833\" id=\"ueb0f3833\">typeScript</span></code><span data-lake-id=\"u66402835\" id=\"u66402835\">的类型兼容是基于结构的，不是基于名义的。下面的代码在 </span><code data-lake-id=\"u917b15c5\" id=\"u917b15c5\"><span data-lake-id=\"u46c9f637\" id=\"u46c9f637\">ts</span></code><span data-lake-id=\"u03b1a1f7\" id=\"u03b1a1f7\">中是完全可行的，同样的代码在 </span><code data-lake-id=\"u778cbe7d\" id=\"u778cbe7d\"><span data-lake-id=\"uc4e19297\" id=\"uc4e19297\">jav</span></code><span data-lake-id=\"ua0289873\" id=\"ua0289873\">等基于名义的语言则会抛错。</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22typescript%22%2C%22code%22%3A%22interface%20Named%20%7B%5Cn%20%20name%3A%20string%5Cn%7D%5Cn%5Cnclass%20Person%20%7B%5Cn%20%20name%3A%20string%5Cn%7D%5Cn%5Cnlet%20p%3A%20Named%5Cn%2F%2F%20ok%5Cnp%20%3D%20new%20Person()%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22gQwGG%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card>",
  "body_draft_lake": "",
  "public": 0,
  "status": 1,
  "view_status": 0,
  "read_status": 1,
  "likes_count": 0,
  "comments_count": 0,
  "content_updated_at": "2022-04-04T11:34:08.000Z",
  "deleted_at": null,
  "created_at": "2022-04-04T11:34:08.000Z",
  "updated_at": "2022-05-10T15:12:30.000Z",
  "published_at": "2022-04-04T11:34:08.000Z",
  "first_published_at": "2022-04-04T11:34:07.656Z",
  "word_count": 77,
  "cover": null,
  "description": "typeScript的类型兼容是基于结构的，不是基于名义的。下面的代码在 ts中是完全可行的，同样的代码在 jav等基于名义的语言则会抛错。interface Named {   name: string }  class Person {   name: string }  let p: N...",
  "custom_description": null,
  "hits": 0,
  "_serializer": "v2.doc_detail"
}