{
  "id": 72212083,
  "slug": "xq8v88",
  "title": "从 url 输入到页面渲染整个过程",
  "book_id": 26225124,
  "book": {
    "id": 26225124,
    "type": "Book",
    "slug": "mxunh7",
    "name": "八股文 eight-part essay writing",
    "user_id": 732231,
    "description": "前端八股文",
    "creator_id": 732231,
    "public": 0,
    "items_count": 239,
    "likes_count": 0,
    "watches_count": 1,
    "content_updated_at": "2023-11-11T18:15:57.023Z",
    "updated_at": "2023-11-11T18:15:57.000Z",
    "created_at": "2022-04-04T11:31:45.000Z",
    "namespace": "wcywxq/mxunh7",
    "user": {
      "id": 732231,
      "type": "User",
      "login": "wcywxq",
      "name": "magic",
      "description": null,
      "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/732231/1606968271774-avatar/886ad88b-d2cc-4c9e-a674-f70eb51a679c.png",
      "books_count": 18,
      "public_books_count": 0,
      "followers_count": 0,
      "following_count": 0,
      "created_at": "2020-01-08T14:21:31.000Z",
      "updated_at": "2023-11-13T09:32:35.000Z",
      "_serializer": "v2.user"
    },
    "_serializer": "v2.book"
  },
  "user_id": 732231,
  "creator": {
    "id": 732231,
    "type": "User",
    "login": "wcywxq",
    "name": "magic",
    "description": null,
    "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/732231/1606968271774-avatar/886ad88b-d2cc-4c9e-a674-f70eb51a679c.png",
    "books_count": 18,
    "public_books_count": 0,
    "followers_count": 0,
    "following_count": 0,
    "created_at": "2020-01-08T14:21:31.000Z",
    "updated_at": "2023-11-13T09:32:35.000Z",
    "_serializer": "v2.user"
  },
  "format": "lake",
  "body": "![image.png](https://cdn.nlark.com/yuque/0/2022/png/732231/1647677110106-e8854865-aae0-4afe-8f6c-6e910df409cb.png#clientId=uac84d713-c6df-4&from=paste&height=423&id=u37ce1501&originHeight=423&originWidth=1142&originalType=binary&ratio=1&size=231703&status=done&style=none&taskId=u484522f2-85bf-483d-ac1d-1f0f1b5eb1f&width=1142)\n\n1. 解析 host\n2. dns 查询，通过域名查找 ip\n3. tcp 握手\n4. 解析文件如何进行解码\n5. 渲染流程，根据 html 代码生成 dom 树，根据 css 代码生成 cssom(css 对象模型) 树，将 dom 树与 cssom 树合并形成渲染树，最终使用渲染树将像素渲染到屏幕上\n6. 遇到 script 标签则暂停渲染，优先加载执行 js 代码，完成后继续\n\n---\n\n1. 首先会对 URL 进行解析，分析所需要使用的传输协议和请求的资源的路径。如果输入的 URL 中的协议或者主机名不合法，将会把地址栏中输入的内容传递给搜索引擎。如果没有问题，浏览器会检查 URL 中是否出现了非法字符，如果存在非法字符，则对非法字符进行转义后再进行下一过程。\n2. 浏览器会判断所请求的资源是否在缓存里，如果请求的资源在缓存里并且没有失效，那么就直接使用，否则向服务器发起新的请求。\n3. 下一步我们首先需要获取的是输入的 URL 中的域名的 IP 地址，首先会判断本地是否有该域名的 IP 地址的缓存，如果有则使用，如果没有则向本地 DNS 服务器发起请求。本地 DNS 服务器也会先检查是否存在缓存，如果没有就会先向根域名服务器发起请求，获得负责的顶级域名服务器的地址后，再向顶级域名服务器请求，然后获得负责的权威域名服务器的地址后，再向权威域名服务器发起请求，最终获得域名的 IP 地址后，本地 DNS 服务器再将这个 IP 地址返回给请求的用户。用户向本地 DNS 服务器发起请求属于递归请求，本地 DNS 服务器向各级域名服务器发起请求属于迭代请求。\n4. 当浏览器得到 IP 地址后，数据传输还需要知道目的主机 MAC 地址，因为应用层下发数据给传输层，TCP 协议会指定源端口号和目的端口号，然后下发给网络层。网络层会将本机地址作为源地址，获取的 IP 地址作为目的地址。然后将下发给数据链路层，数据链路层的发送需要加入通信双方的 MAC 地址，我们本机的 MAC 地址作为源 MAC 地址，目的 MAC 地址需要分情况处理，通过将 IP 地址与我们本机的子网掩码相与，我们可以判断我们是否与请求主机在同一个子网里，如果在同一个子网里，我们可以使用 APR 协议获取到目的主机的 MAC 地址，如果我们不在一个子网里，那么我们的请求应该转发给我们的网关，由它代为转发，此时同样可以通过 ARP 协议来获取网关的 MAC 地址，此时目的主机的 MAC 地址应该为网关的地址。\n5. 下面是 TCP 建立连接的三次握手的过程，首先客户端向服务器发送一个 SYN 连接请求报文段和一个随机序号，服务端接收到请求后向服务器端发送一个 SYN ACK 报文段，确认连接请求，并且也向客户端发送一个随机序号。客户端接收服务器的确认应答后，进入连接建立的状态，同时向服务器也发送一个 ACK 确认报文段，服务器端接收到确认后，也进入连接建立状态，此时双方的连接就建立起来了。\n6. 如果使用的是 HTTPS 协议，在通信前还存在 TLS 的一个四次握手的过程。首先由客户端向服务器端发送使用的协议的版本号、一个随机数和可以使用的加密方法。服务器端收到后，确认加密的方法，也向客户端发送一个随机数和自己的数字证书。客户端收到后，首先检查数字证书是否有效，如果有效，则再生成一个随机数，并使用证书中的公钥对随机数加密，然后发送给服务器端，并且还会提供一个前面所有内容的 hash 值供服务器端检验。服务器端接收后，使用自己的私钥对数据解密，同时向客户端发送一个前面所有内容的 hash 值供客户端检验。这个时候双方都有了三个随机数，按照之前所约定的加密方法，使用这三个随机数生成一把秘钥，以后双方通信前，就使用这个秘钥对数据进行加密后再传输。\n7. 当页面请求发送到服务器端后，服务器端会返回一个 html 文件作为响应，浏览器接收到响应后，开始对 html 文件进行解析，开始页面的渲染过程。\n8. 浏览器首先会根据 html 文件构建 DOM 树，根据解析到的 css 文件构建 CSSOM 树，如果遇到 script 标签，则判端是否含有 defer 或者 async 属性，要不然 script 的加载和执行会造成页面的渲染的阻塞。当 DOM 树和 CSSOM 树建立好后，根据它们来构建渲染树。渲染树构建好后，会根据渲染树来进行布局。布局完成后，最后使用浏览器的 UI 接口对页面进行绘制。这个时候整个页面就显示出来了。\n9. 最后一步是 TCP 断开连接的四次挥手过程。\n",
  "body_draft": "",
  "body_html": "<!doctype html><p data-lake-id=\"u1802a293\"><img alt=\"image.png\" src=\"https://cdn.nlark.com/yuque/0/2022/png/732231/1647677110106-e8854865-aae0-4afe-8f6c-6e910df409cb.png#clientId=uac84d713-c6df-4&amp;from=paste&amp;height=423&amp;id=u37ce1501&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=423&amp;originWidth=1142&amp;originalType=binary&amp;ratio=1&amp;size=231703&amp;status=done&amp;style=none&amp;taskId=u484522f2-85bf-483d-ac1d-1f0f1b5eb1f&amp;width=1142\" style=\"max-width: 600px; width: 1142px;\" /></p><ol><li><span>解析 host</span></li><li><span>dns 查询，通过域名查找 ip</span></li><li><span>tcp 握手</span></li><li><span>解析文件如何进行解码</span></li><li><span>渲染流程，根据 html 代码生成 dom 树，根据 css 代码生成 cssom(css 对象模型) 树，将 dom 树与 cssom 树合并形成渲染树，最终使用渲染树将像素渲染到屏幕上</span></li><li><span>遇到 script 标签则暂停渲染，优先加载执行 js 代码，完成后继续</span></li></ol><p data-lake-id=\"u1f06e5bb\"><span>​</span><br /></p><hr /><ol><li><span>首先会对 URL 进行解析，分析所需要使用的传输协议和请求的资源的路径。如果输入的 URL 中的协议或者主机名不合法，将会把地址栏中输入的内容传递给搜索引擎。如果没有问题，浏览器会检查 URL 中是否出现了非法字符，如果存在非法字符，则对非法字符进行转义后再进行下一过程。</span></li><li><span>浏览器会判断所请求的资源是否在缓存里，如果请求的资源在缓存里并且没有失效，那么就直接使用，否则向服务器发起新的请求。</span></li><li><span>下一步我们首先需要获取的是输入的 URL 中的域名的 IP 地址，首先会判断本地是否有该域名的 IP 地址的缓存，如果有则使用，如果没有则向本地 DNS 服务器发起请求。本地 DNS 服务器也会先检查是否存在缓存，如果没有就会先向根域名服务器发起请求，获得负责的顶级域名服务器的地址后，再向顶级域名服务器请求，然后获得负责的权威域名服务器的地址后，再向权威域名服务器发起请求，最终获得域名的 IP 地址后，本地 DNS 服务器再将这个 IP 地址返回给请求的用户。用户向本地 DNS 服务器发起请求属于递归请求，本地 DNS 服务器向各级域名服务器发起请求属于迭代请求。</span></li><li><span>当浏览器得到 IP 地址后，数据传输还需要知道目的主机 MAC 地址，因为应用层下发数据给传输层，TCP 协议会指定源端口号和目的端口号，然后下发给网络层。网络层会将本机地址作为源地址，获取的 IP 地址作为目的地址。然后将下发给数据链路层，数据链路层的发送需要加入通信双方的 MAC 地址，我们本机的 MAC 地址作为源 MAC 地址，目的 MAC 地址需要分情况处理，通过将 IP 地址与我们本机的子网掩码相与，我们可以判断我们是否与请求主机在同一个子网里，如果在同一个子网里，我们可以使用 APR 协议获取到目的主机的 MAC 地址，如果我们不在一个子网里，那么我们的请求应该转发给我们的网关，由它代为转发，此时同样可以通过 ARP 协议来获取网关的 MAC 地址，此时目的主机的 MAC 地址应该为网关的地址。</span></li><li><span>下面是 TCP 建立连接的三次握手的过程，首先客户端向服务器发送一个 SYN 连接请求报文段和一个随机序号，服务端接收到请求后向服务器端发送一个 SYN ACK 报文段，确认连接请求，并且也向客户端发送一个随机序号。客户端接收服务器的确认应答后，进入连接建立的状态，同时向服务器也发送一个 ACK 确认报文段，服务器端接收到确认后，也进入连接建立状态，此时双方的连接就建立起来了。</span></li><li><span>如果使用的是 HTTPS 协议，在通信前还存在 TLS 的一个四次握手的过程。首先由客户端向服务器端发送使用的协议的版本号、一个随机数和可以使用的加密方法。服务器端收到后，确认加密的方法，也向客户端发送一个随机数和自己的数字证书。客户端收到后，首先检查数字证书是否有效，如果有效，则再生成一个随机数，并使用证书中的公钥对随机数加密，然后发送给服务器端，并且还会提供一个前面所有内容的 hash 值供服务器端检验。服务器端接收后，使用自己的私钥对数据解密，同时向客户端发送一个前面所有内容的 hash 值供客户端检验。这个时候双方都有了三个随机数，按照之前所约定的加密方法，使用这三个随机数生成一把秘钥，以后双方通信前，就使用这个秘钥对数据进行加密后再传输。</span></li><li><span>当页面请求发送到服务器端后，服务器端会返回一个 html 文件作为响应，浏览器接收到响应后，开始对 html 文件进行解析，开始页面的渲染过程。</span></li><li><span>浏览器首先会根据 html 文件构建 DOM 树，根据解析到的 css 文件构建 CSSOM 树，如果遇到 script 标签，则判端是否含有 defer 或者 async 属性，要不然 script 的加载和执行会造成页面的渲染的阻塞。当 DOM 树和 CSSOM 树建立好后，根据它们来构建渲染树。渲染树构建好后，会根据渲染树来进行布局。布局完成后，最后使用浏览器的 UI 接口对页面进行绘制。这个时候整个页面就显示出来了。</span></li></ol><ol start=\"9\"><li><span>最后一步是 TCP 断开连接的四次挥手过程。</span></li></ol>",
  "body_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"viewport\" content=\"adapt\" /><p data-lake-id=\"u1802a293\" id=\"u1802a293\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2022%2Fpng%2F732231%2F1647677110106-e8854865-aae0-4afe-8f6c-6e910df409cb.png%22%2C%22taskId%22%3A%22u484522f2-85bf-483d-ac1d-1f0f1b5eb1f%22%2C%22clientId%22%3A%22uac84d713-c6df-4%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A1142%2C%22height%22%3A423%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A231703%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A1142%2C%22originHeight%22%3A423%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%E4%BC%A0%E8%BE%93%E6%95%B0%E6%8D%AE%E9%98%B6%E6%AE%B5%20%E6%9C%8D%E5%8A%A1%E5%99%A8%20DNS%20%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%9C%86%E5%A4%8D%E5%93%8D%E5%BA%94%E5%A4%B4%20%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%9B%9B%E5%A4%8D%E5%93%8D%E5%BA%94%E8%A1%8C%20%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%9B%9E%E5%A4%8D%E6%AD%A3%E6%96%87%20%E5%8F%91%E9%80%81%E8%AF%B7%E6%B1%82%E8%A1%8C%20%E5%8F%91%E9%80%81%E8%AF%B7%E6%B1%82%E5%A4%B4%20%E5%8F%91%E8%B5%B7HTTP%20%E6%9E%84%E5%BB%BA%20%E5%BB%BA%E7%AB%8BTCP%20%E6%9F%A5%E6%89%BE%20%E6%9C%8D%E5%8A%A1%E5%99%A8%20%E7%AD%89%E5%BE%85TCP%20%E6%9C%8D%E5%8A%A1%E5%99%A8%20%E5%87%86%E5%A4%87IP%E5%9C%B0%20%E6%96%AD%E5%BC%80TCP%20%E8%AF%B7%E6%B1%82%20%E5%A4%84%E7%90%86%E8%AF%B7%E6%B1%82%20%E8%BF%9E%E6%8E%A5%20%E9%98%9F%E5%88%97%20%E8%AF%B7%E6%B1%82%20%E8%BF%9E%E6%8E%A5%20%E7%BC%93%E5%AD%98%20%E5%93%8D%E5%BA%94%E8%AF%B7%E6%B1%82%20%E5%9D%80%E5%92%8C%E7%AB%AF%E5%8F%A3%20%40%E7%A8%80%E4%B8%8A%E6%8E%98%E9%87%91%E6%8A%80%E6%9C%AF%E7%A4%BE%E5%8C%BA%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A682.6927%2C%22y%22%3A32.926292%2C%22width%22%3A108.91120000000001%2C%22height%22%3A21.050446%2C%22text%22%3A%22%E4%BC%A0%E8%BE%93%E6%95%B0%E6%8D%AE%E9%98%B6%E6%AE%B5%22%7D%2C%7B%22x%22%3A345.07364%2C%22y%22%3A87.26765%2C%22width%22%3A54.540959999999984%2C%22height%22%3A19.187473999999995%2C%22text%22%3A%22%E6%9C%8D%E5%8A%A1%E5%99%A8%22%7D%2C%7B%22x%22%3A196.90709%2C%22y%22%3A87.49414%2C%22width%22%3A34.41777999999999%2C%22height%22%3A15.039479999999998%2C%22text%22%3A%22DNS%22%7D%2C%7B%22x%22%3A819.96606%2C%22y%22%3A128.80125%2C%22width%22%3A18.832740000000058%2C%22height%22%3A159.61634999999998%2C%22text%22%3A%22%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%9C%86%E5%A4%8D%E5%93%8D%E5%BA%94%E5%A4%B4%22%7D%2C%7B%22x%22%3A755.5274%2C%22y%22%3A130.90773%2C%22width%22%3A20.378850000000057%2C%22height%22%3A156.60161000000002%2C%22text%22%3A%22%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%9B%9B%E5%A4%8D%E5%93%8D%E5%BA%94%E8%A1%8C%22%7D%2C%7B%22x%22%3A885.08594%2C%22y%22%3A148.25461%2C%22width%22%3A23.03905999999995%2C%22height%22%3A136.54541%2C%22text%22%3A%22%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%9B%9E%E5%A4%8D%E6%AD%A3%E6%96%87%22%7D%2C%7B%22x%22%3A525.8325%2C%22y%22%3A162.5266%2C%22width%22%3A20.075950000000034%2C%22height%22%3A98.35466%2C%22text%22%3A%22%E5%8F%91%E9%80%81%E8%AF%B7%E6%B1%82%E8%A1%8C%22%7D%2C%7B%22x%22%3A616.1388%2C%22y%22%3A168.37842%2C%22width%22%3A19.824500000000057%2C%22height%22%3A98.44033999999999%2C%22text%22%3A%22%E5%8F%91%E9%80%81%E8%AF%B7%E6%B1%82%E5%A4%B4%22%7D%2C%7B%22x%22%3A503.9953%2C%22y%22%3A339.92703%2C%22width%22%3A83.59989999999999%2C%22height%22%3A18.49020999999999%2C%22text%22%3A%22%E5%8F%91%E8%B5%B7HTTP%22%7D%2C%7B%22x%22%3A52.84216%2C%22y%22%3A342.06912%2C%22width%22%3A34.622133999999996%2C%22height%22%3A18.588840000000005%2C%22text%22%3A%22%E6%9E%84%E5%BB%BA%22%7D%2C%7B%22x%22%3A372.17767%2C%22y%22%3A342.30222%2C%22width%22%3A71.62573000000003%2C%22height%22%3A17.30355000000003%2C%22text%22%3A%22%E5%BB%BA%E7%AB%8BTCP%22%7D%2C%7B%22x%22%3A120.36371%2C%22y%22%3A342.47235%2C%22width%22%3A34.887010000000004%2C%22height%22%3A19.11574999999999%2C%22text%22%3A%22%E6%9F%A5%E6%89%BE%22%7D%2C%7B%22x%22%3A682.3194%2C%22y%22%3A342.54578%2C%22width%22%3A55.46320000000003%2C%22height%22%3A20.20514000000003%2C%22text%22%3A%22%E6%9C%8D%E5%8A%A1%E5%99%A8%22%7D%2C%7B%22x%22%3A268.60507%2C%22y%22%3A343.23483%2C%22width%22%3A68.74043%2C%22height%22%3A17.79427000000004%2C%22text%22%3A%22%E7%AD%89%E5%BE%85TCP%22%7D%2C%7B%22x%22%3A852.61383%2C%22y%22%3A343.86774%2C%22width%22%3A55.235540000000015%2C%22height%22%3A19.28353999999996%2C%22text%22%3A%22%E6%9C%8D%E5%8A%A1%E5%99%A8%22%7D%2C%7B%22x%22%3A177.8147%2C%22y%22%3A344.67346%2C%22width%22%3A68.35913000000002%2C%22height%22%3A17.467900000000043%2C%22text%22%3A%22%E5%87%86%E5%A4%87IP%E5%9C%B0%22%7D%2C%7B%22x%22%3A991.7215%2C%22y%22%3A345.4661%2C%22width%22%3A70.00490000000002%2C%22height%22%3A16.45974000000001%2C%22text%22%3A%22%E6%96%AD%E5%BC%80TCP%22%7D%2C%7B%22x%22%3A526.8966%2C%22y%22%3A365.6436%2C%22width%22%3A36.740299999999934%2C%22height%22%3A19.69477999999998%2C%22text%22%3A%22%E8%AF%B7%E6%B1%82%22%7D%2C%7B%22x%22%3A673.6163%2C%22y%22%3A367.18512%2C%22width%22%3A73.63284999999996%2C%22height%22%3A20.060910000000035%2C%22text%22%3A%22%E5%A4%84%E7%90%86%E8%AF%B7%E6%B1%82%22%7D%2C%7B%22x%22%3A389.72754%2C%22y%22%3A367.68857%2C%22width%22%3A37.35980000000001%2C%22height%22%3A19.11089999999996%2C%22text%22%3A%22%E8%BF%9E%E6%8E%A5%22%7D%2C%7B%22x%22%3A283.46613%2C%22y%22%3A367.67468%2C%22width%22%3A38.377970000000005%2C%22height%22%3A19.903779999999983%2C%22text%22%3A%22%E9%98%9F%E5%88%97%22%7D%2C%7B%22x%22%3A52.79851%2C%22y%22%3A367.7746%2C%22width%22%3A34.668150000000004%2C%22height%22%3A19.272369999999967%2C%22text%22%3A%22%E8%AF%B7%E6%B1%82%22%7D%2C%7B%22x%22%3A1003.98895%2C%22y%22%3A368.46048%2C%22width%22%3A41.54965000000004%2C%22height%22%3A19.965089999999975%2C%22text%22%3A%22%E8%BF%9E%E6%8E%A5%22%7D%2C%7B%22x%22%3A119.799675%2C%22y%22%3A368.6757%2C%22width%22%3A36.329795000000004%2C%22height%22%3A19.069079999999985%2C%22text%22%3A%22%E7%BC%93%E5%AD%98%22%7D%2C%7B%22x%22%3A845.3332%2C%22y%22%3A369.15955%2C%22width%22%3A71.60613000000001%2C%22height%22%3A18.034019999999998%2C%22text%22%3A%22%E5%93%8D%E5%BA%94%E8%AF%B7%E6%B1%82%22%7D%2C%7B%22x%22%3A176.37404%2C%22y%22%3A369.59464%2C%22width%22%3A70.45426999999998%2C%22height%22%3A18.334859999999992%2C%22text%22%3A%22%E5%9D%80%E5%92%8C%E7%AB%AF%E5%8F%A3%22%7D%2C%7B%22x%22%3A970.08484%2C%22y%22%3A388.08035%2C%22width%22%3A159.32495999999992%2C%22height%22%3A20.21026999999998%2C%22text%22%3A%22%40%E7%A8%80%E4%B8%8A%E6%8E%98%E9%87%91%E6%8A%80%E6%9C%AF%E7%A4%BE%E5%8C%BA%22%7D%5D%2C%22id%22%3A%22u37ce1501%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><ol list=\"udf628a14\"><li fid=\"u2d53f5b4\" data-lake-id=\"u6ae7be10\" id=\"u6ae7be10\"><span data-lake-id=\"u881b32b4\" id=\"u881b32b4\">解析 host</span></li><li fid=\"u2d53f5b4\" data-lake-id=\"uc67b354b\" id=\"uc67b354b\"><span data-lake-id=\"u69d43eda\" id=\"u69d43eda\">dns 查询，通过域名查找 ip</span></li><li fid=\"u2d53f5b4\" data-lake-id=\"uaf20853c\" id=\"uaf20853c\"><span data-lake-id=\"uda04776b\" id=\"uda04776b\">tcp 握手</span></li><li fid=\"u2d53f5b4\" data-lake-id=\"u24922fd7\" id=\"u24922fd7\"><span data-lake-id=\"u78846ad5\" id=\"u78846ad5\">解析文件如何进行解码</span></li><li fid=\"u2d53f5b4\" data-lake-id=\"u9402ec81\" id=\"u9402ec81\"><span data-lake-id=\"uc4d5da45\" id=\"uc4d5da45\">渲染流程，根据 html 代码生成 dom 树，根据 css 代码生成 cssom(css 对象模型) 树，将 dom 树与 cssom 树合并形成渲染树，最终使用渲染树将像素渲染到屏幕上</span></li><li fid=\"u2d53f5b4\" data-lake-id=\"ufb220875\" id=\"ufb220875\"><span data-lake-id=\"u6cecb444\" id=\"u6cecb444\">遇到 script 标签则暂停渲染，优先加载执行 js 代码，完成后继续</span></li></ol><p data-lake-id=\"u1f06e5bb\" id=\"u1f06e5bb\"><span data-lake-id=\"u853ac6e9\" id=\"u853ac6e9\">​</span><br></p><card type=\"block\" name=\"hr\" value=\"data:%7B%22id%22%3A%22mQAkg%22%7D\"></card><ol list=\"u3f600461\"><li fid=\"u08958dcc\" data-lake-id=\"u78230a20\" id=\"u78230a20\"><span data-lake-id=\"u8ac6383c\" id=\"u8ac6383c\">首先会对 URL 进行解析，分析所需要使用的传输协议和请求的资源的路径。如果输入的 URL 中的协议或者主机名不合法，将会把地址栏中输入的内容传递给搜索引擎。如果没有问题，浏览器会检查 URL 中是否出现了非法字符，如果存在非法字符，则对非法字符进行转义后再进行下一过程。</span></li><li fid=\"u08958dcc\" data-lake-id=\"u1c8b0297\" id=\"u1c8b0297\"><span data-lake-id=\"uf9c2912e\" id=\"uf9c2912e\">浏览器会判断所请求的资源是否在缓存里，如果请求的资源在缓存里并且没有失效，那么就直接使用，否则向服务器发起新的请求。</span></li><li fid=\"u08958dcc\" data-lake-id=\"u118aa631\" id=\"u118aa631\"><span data-lake-id=\"u7dac994f\" id=\"u7dac994f\">下一步我们首先需要获取的是输入的 URL 中的域名的 IP 地址，首先会判断本地是否有该域名的 IP 地址的缓存，如果有则使用，如果没有则向本地 DNS 服务器发起请求。本地 DNS 服务器也会先检查是否存在缓存，如果没有就会先向根域名服务器发起请求，获得负责的顶级域名服务器的地址后，再向顶级域名服务器请求，然后获得负责的权威域名服务器的地址后，再向权威域名服务器发起请求，最终获得域名的 IP 地址后，本地 DNS 服务器再将这个 IP 地址返回给请求的用户。用户向本地 DNS 服务器发起请求属于递归请求，本地 DNS 服务器向各级域名服务器发起请求属于迭代请求。</span></li><li fid=\"u08958dcc\" data-lake-id=\"u33a687e4\" id=\"u33a687e4\"><span data-lake-id=\"ud75da173\" id=\"ud75da173\">当浏览器得到 IP 地址后，数据传输还需要知道目的主机 MAC 地址，因为应用层下发数据给传输层，TCP 协议会指定源端口号和目的端口号，然后下发给网络层。网络层会将本机地址作为源地址，获取的 IP 地址作为目的地址。然后将下发给数据链路层，数据链路层的发送需要加入通信双方的 MAC 地址，我们本机的 MAC 地址作为源 MAC 地址，目的 MAC 地址需要分情况处理，通过将 IP 地址与我们本机的子网掩码相与，我们可以判断我们是否与请求主机在同一个子网里，如果在同一个子网里，我们可以使用 APR 协议获取到目的主机的 MAC 地址，如果我们不在一个子网里，那么我们的请求应该转发给我们的网关，由它代为转发，此时同样可以通过 ARP 协议来获取网关的 MAC 地址，此时目的主机的 MAC 地址应该为网关的地址。</span></li><li fid=\"u08958dcc\" data-lake-id=\"ua5c9f7d2\" id=\"ua5c9f7d2\"><span data-lake-id=\"ud50fe7d0\" id=\"ud50fe7d0\">下面是 TCP 建立连接的三次握手的过程，首先客户端向服务器发送一个 SYN 连接请求报文段和一个随机序号，服务端接收到请求后向服务器端发送一个 SYN ACK 报文段，确认连接请求，并且也向客户端发送一个随机序号。客户端接收服务器的确认应答后，进入连接建立的状态，同时向服务器也发送一个 ACK 确认报文段，服务器端接收到确认后，也进入连接建立状态，此时双方的连接就建立起来了。</span></li><li fid=\"u08958dcc\" data-lake-id=\"u22b821f4\" id=\"u22b821f4\"><span data-lake-id=\"uf2b447ec\" id=\"uf2b447ec\">如果使用的是 HTTPS 协议，在通信前还存在 TLS 的一个四次握手的过程。首先由客户端向服务器端发送使用的协议的版本号、一个随机数和可以使用的加密方法。服务器端收到后，确认加密的方法，也向客户端发送一个随机数和自己的数字证书。客户端收到后，首先检查数字证书是否有效，如果有效，则再生成一个随机数，并使用证书中的公钥对随机数加密，然后发送给服务器端，并且还会提供一个前面所有内容的 hash 值供服务器端检验。服务器端接收后，使用自己的私钥对数据解密，同时向客户端发送一个前面所有内容的 hash 值供客户端检验。这个时候双方都有了三个随机数，按照之前所约定的加密方法，使用这三个随机数生成一把秘钥，以后双方通信前，就使用这个秘钥对数据进行加密后再传输。</span></li><li fid=\"u08958dcc\" data-lake-id=\"u31567c0f\" id=\"u31567c0f\"><span data-lake-id=\"u38ab5f1b\" id=\"u38ab5f1b\">当页面请求发送到服务器端后，服务器端会返回一个 html 文件作为响应，浏览器接收到响应后，开始对 html 文件进行解析，开始页面的渲染过程。</span></li><li fid=\"u08958dcc\" data-lake-id=\"ud666a8cd\" id=\"ud666a8cd\"><span data-lake-id=\"u7524804a\" id=\"u7524804a\">浏览器首先会根据 html 文件构建 DOM 树，根据解析到的 css 文件构建 CSSOM 树，如果遇到 script 标签，则判端是否含有 defer 或者 async 属性，要不然 script 的加载和执行会造成页面的渲染的阻塞。当 DOM 树和 CSSOM 树建立好后，根据它们来构建渲染树。渲染树构建好后，会根据渲染树来进行布局。布局完成后，最后使用浏览器的 UI 接口对页面进行绘制。这个时候整个页面就显示出来了。</span></li></ol><ol list=\"u81c72b29\" start=\"9\"><li fid=\"ub59a990f\" data-lake-id=\"u446d6f0e\" id=\"u446d6f0e\"><span data-lake-id=\"u7d0c7a9e\" id=\"u7d0c7a9e\">最后一步是 TCP 断开连接的四次挥手过程。</span></li></ol>",
  "body_draft_lake": "",
  "public": 0,
  "status": 1,
  "view_status": 0,
  "read_status": 1,
  "likes_count": 0,
  "comments_count": 0,
  "content_updated_at": "2022-04-04T11:32:56.000Z",
  "deleted_at": null,
  "created_at": "2022-04-04T11:32:56.000Z",
  "updated_at": "2022-05-10T15:12:41.000Z",
  "published_at": "2022-04-04T11:32:56.000Z",
  "first_published_at": "2022-04-04T11:32:56.002Z",
  "word_count": 1566,
  "cover": "https://cdn.nlark.com/yuque/0/2022/png/732231/1647677110106-e8854865-aae0-4afe-8f6c-6e910df409cb.png",
  "description": "解析 hostdns 查询，通过域名查找 iptcp 握手解析文件如何进行解码渲染流程，根据 html 代码生成 dom 树，根据 css 代码生成 cssom(css 对象模型) 树，将 dom 树与 cssom 树合并形成渲染树，最终使用渲染树将像素渲染到屏幕上遇到 script 标签则暂...",
  "custom_description": null,
  "hits": 0,
  "_serializer": "v2.doc_detail"
}