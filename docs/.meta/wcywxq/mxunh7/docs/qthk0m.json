{
  "id": 72212318,
  "slug": "qthk0m",
  "title": "AMD、CMD、UMD、CJS、ESM",
  "book_id": 26225124,
  "book": {
    "id": 26225124,
    "type": "Book",
    "slug": "mxunh7",
    "name": "八股文 eight-part essay writing",
    "user_id": 732231,
    "description": "前端八股文",
    "creator_id": 732231,
    "public": 0,
    "items_count": 239,
    "likes_count": 0,
    "watches_count": 1,
    "content_updated_at": "2023-11-11T18:15:57.023Z",
    "updated_at": "2023-11-11T18:15:57.000Z",
    "created_at": "2022-04-04T11:31:45.000Z",
    "namespace": "wcywxq/mxunh7",
    "user": {
      "id": 732231,
      "type": "User",
      "login": "wcywxq",
      "name": "magic",
      "description": null,
      "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/732231/1606968271774-avatar/886ad88b-d2cc-4c9e-a674-f70eb51a679c.png",
      "books_count": 18,
      "public_books_count": 0,
      "followers_count": 0,
      "following_count": 0,
      "created_at": "2020-01-08T14:21:31.000Z",
      "updated_at": "2023-11-13T09:32:35.000Z",
      "_serializer": "v2.user"
    },
    "_serializer": "v2.book"
  },
  "user_id": 732231,
  "creator": {
    "id": 732231,
    "type": "User",
    "login": "wcywxq",
    "name": "magic",
    "description": null,
    "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/732231/1606968271774-avatar/886ad88b-d2cc-4c9e-a674-f70eb51a679c.png",
    "books_count": 18,
    "public_books_count": 0,
    "followers_count": 0,
    "following_count": 0,
    "created_at": "2020-01-08T14:21:31.000Z",
    "updated_at": "2023-11-13T09:32:35.000Z",
    "_serializer": "v2.user"
  },
  "format": "lake",
  "body": "<a name=\"BuavH\"></a>\n## AMD\n这种方案采用异步加载的方式来加载模块，模块的加载不加载后面语句的执行，所有依赖这个模块的语句都定义在一个回调函数里，等到加载完成后再执行回调函数。`require.js`实现了`AMD`规范\n```javascript\n// AMD 推崇依赖前置\ndefine(\"alpha\", [\"require\", \"exports\", \"beta\"], function (require, exports, beta) {\n  exports.verb = function() {\n    return beta.verb()\n    // Or\n    return require(\"beta\").verb\n  }\n})\n```\n`require.js`是通过动态创建`script`脚本来异步引入模块，然后对每个脚本的`load`事件进行舰艇，如果每个脚本都加载完成了，再调用回调函数\n<a name=\"IkzDg\"></a>\n### 特点\n\n1. 所有代码都运行在模块作用域中，不会污染全局变量\n2. 模块会被异步加载\n3. 依赖模块加载完成后，会立即执行其回调函数(即`factory`函数)\n4. 主模块会等所有的依赖模块加载完成后，再调用其对应的回调函数(依赖前置)\n<a name=\"z2JF5\"></a>\n## CMD\n此方案和`AMD`方案都是为了解决异步模块加载的问题，`sea.js`实现了`CMD`规范，它和`require.js`的区别在于模块定义时对依赖的处理不同和对依赖模块的执行时机的处理不同\n```javascript\n// CMD 推崇依赖就近\ndefine(function (require, exports, module) {\n  var a = require(\"./a\")\n  a.doSomething()\n  // ...\n  var b = require(\"./b\")\n  b.doSomething()\n})\n```\n<a name=\"xyIpv\"></a>\n### 特点\n\n1. 所有代码都运行在模块作用域中，不会污染全局变量\n2. 模块会被异步加载\n3. 模块加载完成后，不会执行其回调函数，而是等到主函数运行且需要的执行依赖的时候才运行依赖函数(依赖后置、按需加载)\n<a name=\"RQywW\"></a>\n## UMD\n`UMD`提供了支持多种风格的\"通用\"模式，在兼容`CommonJS`和`AMD`规范的同时，还兼容全局引用的方式\n```javascript\n(function(root, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    // AMD\n    define([\"jquery\", \"lodash\"], factory)\n  } else if (typeof exports === \"object\") {\n    // CommonJS\n    module.exports = factory(require(\"jquery\"), require(\"lodash\"))\n  } else {\n    // 浏览器全局变量(root 和 window)\n    root.returnExports = factory(root.jQuery, root._)\n  }\n})(this,  function ($, _) {\n  // 方法\n  function a() {} // 私有方法，因为它没有被返回\n  function b() {} // 公共方法，因为被返回了\n  function c() {} // 公共方法，因为被返回了\n  // 暴露公共方法\n  return {\n    b: b,\n    c: c\n  }\n})\n```\n<a name=\"eFAjU\"></a>\n### 原理\n\n1. 判断是否支持`AMD`，若存在则使用`AMD`方式加载模块，否则继续步骤`2`\n2. 判断是否支持`CommonJS`，若存在则使用`Node.js`的模块格式，否则继续步骤`3`\n3. 将模块公开到全局(`window`或`global`)\n<a name=\"zKQIw\"></a>\n## CJS\n`CJS`是`CommonJS`的简称，它是通过`require`来引入模块，通过`module.exports`定义模块的输出接口。`CommonJS`模块是运行时加载，模块输出是一个值的拷贝，`CommonJS`模块就是对象，即在输入时先加载整个模块，生成一个对象，然后再从这个对象上面读取方法，这种加载称为 \"运行时加载\"。\n```javascript\nmodule.exports = class Square {\n  constructor(width) {\n    this.width = width\n  } \n  area() {\n    return this.width ** 2\n  }\n}\n```\n```javascript\nconst Square = require(\"./square.js\")\n\nconst square = new Square(2)\n\nmodule.exports = square.area()\n```\n<a name=\"DnURj\"></a>\n### 特点\n\n1. 所有代码都运行在模块作用域中，不会污染全局变量\n2. 模块按照在代码中的顺序，一次同步加载\n3. 模块会在运行时加载并执行，执行得到对象`A`，后续通过`require`获取的都是对对象`A`值的拷贝(换句话说，模块可以多次加载，在第一次加载时执行并缓存其结果，后续加载会直接返回该结果)，要想模块再次运行，必须清楚缓存\n<a name=\"vTHV0\"></a>\n## ESM\n`ESM`是`ES6 Modules or JavaScript Modules`的简称，使用`import`和`export`的形式来导入导出模块。`ESM`是编译时输出接口，它不是对象，它的对外接口只是一种静态定义，在代码静态解析阶段就会生成。\n```javascript\nconst obj = {\n  sayHello() {\n    console.log(\"Hello Ray\")\n  },\n  myName: \"Ray\",\n  obj: {\n    myName: \"Ray\"\n  },\n  arr: [1, 2, 3]\n}\n\nexport default obj\n```\n```html\n<script type=\"module\">\n  import * as app from \"./app.js\"\n  console.log(app.myName) // \"Hello Ray\"\n  app.sayHi() // \"Hello Ray\"\n  console.log(app.obj.myName) // \"Ray\"\n  console.log(app.arr) // [1, 2, 3]\n</script>\n```\n<a name=\"I2pJs\"></a>\n### 特点\n\n1. 所有代码都运行在模块作用域中，不会污染全局变量\n2. 在编译时输出模块\n3. 输出的模块内容为只读，不可修改\n4. 不会缓存模块结果，每次都会动态执行模块内容\n<a name=\"q14BS\"></a>\n### import & export\n\n- `import`语句会被提升\n- `import`的变量都是只读的\n- `import`是静态执行，因此无法使用表达式\n- `import`语句支持`singleton`模式(如果多次重复执行同一句`import`语句，那么只会执行一次，而不会执行多次)\n- `export`需要输出一个对象或变量声明语句\n- `export default`相当于输出一个名叫`default`的变量/对象\n- `export`与`import`连用\n```javascript\nexport { foo, bar } from \"my_module\"\n\n// 相当于\nimport { foo, bar } from \"my_module\"\nexport { foo, bar }\n```\n",
  "body_draft": "",
  "body_html": "<!doctype html><h2 id=\"BuavH\"><span>AMD</span></h2><p data-lake-id=\"ub3e297b9\"><span>这种方案采用异步加载的方式来加载模块，模块的加载不加载后面语句的执行，所有依赖这个模块的语句都定义在一个回调函数里，等到加载完成后再执行回调函数。</span><code><span>require.js</span></code><span>实现了</span><code><span>AMD</span></code><span>规范</span></p><pre data-lang=\"javascript\"><code>// AMD 推崇依赖前置\ndefine(&quot;alpha&quot;, [&quot;require&quot;, &quot;exports&quot;, &quot;beta&quot;], function (require, exports, beta) {\n  exports.verb = function() {\n    return beta.verb()\n    // Or\n    return require(&quot;beta&quot;).verb\n  }\n})</code></pre><p data-lake-id=\"ua3320da3\"><code><span>require.js</span></code><span>是通过动态创建</span><code><span>script</span></code><span>脚本来异步引入模块，然后对每个脚本的</span><code><span>load</span></code><span>事件进行舰艇，如果每个脚本都加载完成了，再调用回调函数</span></p><h3 id=\"IkzDg\"><span>特点</span></h3><ol><li><span>所有代码都运行在模块作用域中，不会污染全局变量</span></li><li><span>模块会被异步加载</span></li><li><span>依赖模块加载完成后，会立即执行其回调函数(即</span><code><span>factory</span></code><span>函数)</span></li><li><span>主模块会等所有的依赖模块加载完成后，再调用其对应的回调函数(依赖前置)</span></li></ol><h2 id=\"z2JF5\"><span>CMD</span></h2><p data-lake-id=\"uc1185dea\"><span>此方案和</span><code><span>AMD</span></code><span>方案都是为了解决异步模块加载的问题，</span><code><span>sea.js</span></code><span>实现了</span><code><span>CMD</span></code><span>规范，它和</span><code><span>require.js</span></code><span>的区别在于模块定义时对依赖的处理不同和对依赖模块的执行时机的处理不同</span></p><pre data-lang=\"javascript\"><code>// CMD 推崇依赖就近\ndefine(function (require, exports, module) {\n  var a = require(&quot;./a&quot;)\n  a.doSomething()\n  // ...\n  var b = require(&quot;./b&quot;)\n  b.doSomething()\n})</code></pre><h3 id=\"xyIpv\"><span>特点</span></h3><ol><li><span>所有代码都运行在模块作用域中，不会污染全局变量</span></li><li><span>模块会被异步加载</span></li><li><span>模块加载完成后，不会执行其回调函数，而是等到主函数运行且需要的执行依赖的时候才运行依赖函数(依赖后置、按需加载)</span></li></ol><h2 id=\"RQywW\"><span>UMD</span></h2><p data-lake-id=\"u5cd4a4f8\"><code><span>UMD</span></code><span>提供了支持多种风格的&quot;通用&quot;模式，在兼容</span><code><span>CommonJS</span></code><span>和</span><code><span>AMD</span></code><span>规范的同时，还兼容全局引用的方式</span></p><pre data-lang=\"javascript\"><code>(function(root, factory) {\n  if (typeof define === &quot;function&quot; &amp;&amp; define.amd) {\n    // AMD\n    define([&quot;jquery&quot;, &quot;lodash&quot;], factory)\n  } else if (typeof exports === &quot;object&quot;) {\n    // CommonJS\n    module.exports = factory(require(&quot;jquery&quot;), require(&quot;lodash&quot;))\n  } else {\n    // 浏览器全局变量(root 和 window)\n    root.returnExports = factory(root.jQuery, root._)\n  }\n})(this,  function ($, _) {\n  // 方法\n  function a() {} // 私有方法，因为它没有被返回\n  function b() {} // 公共方法，因为被返回了\n  function c() {} // 公共方法，因为被返回了\n  // 暴露公共方法\n  return {\n    b: b,\n    c: c\n  }\n})</code></pre><h3 id=\"eFAjU\"><span>原理</span></h3><ol><li><span>判断是否支持</span><code><span>AMD</span></code><span>，若存在则使用</span><code><span>AMD</span></code><span>方式加载模块，否则继续步骤</span><code><span>2</span></code></li><li><span>判断是否支持</span><code><span>CommonJS</span></code><span>，若存在则使用</span><code><span>Node.js</span></code><span>的模块格式，否则继续步骤</span><code><span>3</span></code></li><li><span>将模块公开到全局(</span><code><span>window</span></code><span>或</span><code><span>global</span></code><span>)</span></li></ol><h2 id=\"zKQIw\"><span>CJS</span></h2><p data-lake-id=\"uf0dd7ade\"><code><span>CJS</span></code><span>是</span><code><span>CommonJS</span></code><span>的简称，它是通过</span><code><span>require</span></code><span>来引入模块，通过</span><code><span>module.exports</span></code><span>定义模块的输出接口。</span><code><span>CommonJS</span></code><span>模块是运行时加载，模块输出是一个值的拷贝，</span><code><span>CommonJS</span></code><span>模块就是对象，即在输入时先加载整个模块，生成一个对象，然后再从这个对象上面读取方法，这种加载称为 &quot;运行时加载&quot;。</span></p><pre data-lang=\"javascript\"><code>module.exports = class Square {\n  constructor(width) {\n    this.width = width\n  } \n  area() {\n    return this.width ** 2\n  }\n}</code></pre><pre data-lang=\"javascript\"><code>const Square = require(&quot;./square.js&quot;)\n\nconst square = new Square(2)\n\nmodule.exports = square.area()</code></pre><h3 id=\"DnURj\"><span>特点</span></h3><ol><li><span>所有代码都运行在模块作用域中，不会污染全局变量</span></li><li><span>模块按照在代码中的顺序，一次同步加载</span></li><li><span>模块会在运行时加载并执行，执行得到对象</span><code><span>A</span></code><span>，后续通过</span><code><span>require</span></code><span>获取的都是对对象</span><code><span>A</span></code><span>值的拷贝(换句话说，模块可以多次加载，在第一次加载时执行并缓存其结果，后续加载会直接返回该结果)，要想模块再次运行，必须清楚缓存</span></li></ol><h2 id=\"vTHV0\"><span>ESM</span></h2><p data-lake-id=\"udf10ab81\"><code><span>ESM</span></code><span>是</span><code><span>ES6 Modules or JavaScript Modules</span></code><span>的简称，使用</span><code><span>import</span></code><span>和</span><code><span>export</span></code><span>的形式来导入导出模块。</span><code><span>ESM</span></code><span>是编译时输出接口，它不是对象，它的对外接口只是一种静态定义，在代码静态解析阶段就会生成。</span></p><pre data-lang=\"javascript\"><code>const obj = {\n  sayHello() {\n    console.log(&quot;Hello Ray&quot;)\n  },\n  myName: &quot;Ray&quot;,\n  obj: {\n    myName: &quot;Ray&quot;\n  },\n  arr: [1, 2, 3]\n}\n\nexport default obj</code></pre><pre data-lang=\"html\"><code>&lt;script type=&quot;module&quot;&gt;\n  import * as app from &quot;./app.js&quot;\n  console.log(app.myName) // &quot;Hello Ray&quot;\n  app.sayHi() // &quot;Hello Ray&quot;\n  console.log(app.obj.myName) // &quot;Ray&quot;\n  console.log(app.arr) // [1, 2, 3]\n&lt;/script&gt;</code></pre><h3 id=\"I2pJs\"><span>特点</span></h3><ol><li><span>所有代码都运行在模块作用域中，不会污染全局变量</span></li><li><span>在编译时输出模块</span></li><li><span>输出的模块内容为只读，不可修改</span></li><li><span>不会缓存模块结果，每次都会动态执行模块内容</span></li></ol><h3 id=\"q14BS\"><span>import &amp; export</span></h3><ul><li><code><span>import</span></code><span>语句会被提升</span></li><li><code><span>import</span></code><span>的变量都是只读的</span></li><li><code><span>import</span></code><span>是静态执行，因此无法使用表达式</span></li><li><code><span>import</span></code><span>语句支持</span><code><span>singleton</span></code><span>模式(如果多次重复执行同一句</span><code><span>import</span></code><span>语句，那么只会执行一次，而不会执行多次)</span></li><li><code><span>export</span></code><span>需要输出一个对象或变量声明语句</span></li><li><code><span>export default</span></code><span>相当于输出一个名叫</span><code><span>default</span></code><span>的变量/对象</span></li><li><code><span>export</span></code><span>与</span><code><span>import</span></code><span>连用</span></li></ul><pre data-lang=\"javascript\"><code>export { foo, bar } from &quot;my_module&quot;\n\n// 相当于\nimport { foo, bar } from &quot;my_module&quot;\nexport { foo, bar }</code></pre>",
  "body_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"viewport\" content=\"adapt\" /><h2 data-lake-id=\"BuavH\" id=\"BuavH\"><span data-lake-id=\"ub1a6b66d\" id=\"ub1a6b66d\">AMD</span></h2><p data-lake-id=\"ub3e297b9\" id=\"ub3e297b9\"><span data-lake-id=\"u4a589b72\" id=\"u4a589b72\">这种方案采用异步加载的方式来加载模块，模块的加载不加载后面语句的执行，所有依赖这个模块的语句都定义在一个回调函数里，等到加载完成后再执行回调函数。</span><code data-lake-id=\"u83e423ec\" id=\"u83e423ec\"><span data-lake-id=\"u776f40c2\" id=\"u776f40c2\">require.js</span></code><span data-lake-id=\"u48cb0dd5\" id=\"u48cb0dd5\">实现了</span><code data-lake-id=\"uc378da07\" id=\"uc378da07\"><span data-lake-id=\"ubbd5feb2\" id=\"ubbd5feb2\">AMD</span></code><span data-lake-id=\"u6f3f8f4e\" id=\"u6f3f8f4e\">规范</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%20AMD%20%E6%8E%A8%E5%B4%87%E4%BE%9D%E8%B5%96%E5%89%8D%E7%BD%AE%5Cndefine(%5C%22alpha%5C%22%2C%20%5B%5C%22require%5C%22%2C%20%5C%22exports%5C%22%2C%20%5C%22beta%5C%22%5D%2C%20function%20(require%2C%20exports%2C%20beta)%20%7B%5Cn%20%20exports.verb%20%3D%20function()%20%7B%5Cn%20%20%20%20return%20beta.verb()%5Cn%20%20%20%20%2F%2F%20Or%5Cn%20%20%20%20return%20require(%5C%22beta%5C%22).verb%5Cn%20%20%7D%5Cn%7D)%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22VRQK9%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"ua3320da3\" id=\"ua3320da3\"><code data-lake-id=\"u8108ba07\" id=\"u8108ba07\"><span data-lake-id=\"u7eccc807\" id=\"u7eccc807\">require.js</span></code><span data-lake-id=\"u723a9d19\" id=\"u723a9d19\">是通过动态创建</span><code data-lake-id=\"ub185254c\" id=\"ub185254c\"><span data-lake-id=\"ua7219b92\" id=\"ua7219b92\">script</span></code><span data-lake-id=\"u80f2d554\" id=\"u80f2d554\">脚本来异步引入模块，然后对每个脚本的</span><code data-lake-id=\"u9cdc3228\" id=\"u9cdc3228\"><span data-lake-id=\"uf3c3c24a\" id=\"uf3c3c24a\">load</span></code><span data-lake-id=\"uc78450a3\" id=\"uc78450a3\">事件进行舰艇，如果每个脚本都加载完成了，再调用回调函数</span></p><h3 data-lake-id=\"IkzDg\" id=\"IkzDg\"><span data-lake-id=\"uaafd6301\" id=\"uaafd6301\">特点</span></h3><ol list=\"u7b7cdbf6\"><li fid=\"u42592eb8\" data-lake-id=\"u389de77c\" id=\"u389de77c\"><span data-lake-id=\"u39c1a674\" id=\"u39c1a674\">所有代码都运行在模块作用域中，不会污染全局变量</span></li><li fid=\"u42592eb8\" data-lake-id=\"u64eda6a2\" id=\"u64eda6a2\"><span data-lake-id=\"u20382616\" id=\"u20382616\">模块会被异步加载</span></li><li fid=\"u42592eb8\" data-lake-id=\"u639f2dc3\" id=\"u639f2dc3\"><span data-lake-id=\"ua270684a\" id=\"ua270684a\">依赖模块加载完成后，会立即执行其回调函数(即</span><code data-lake-id=\"u8c18be5b\" id=\"u8c18be5b\"><span data-lake-id=\"uef4fc55a\" id=\"uef4fc55a\">factory</span></code><span data-lake-id=\"u5b9d09ac\" id=\"u5b9d09ac\">函数)</span></li><li fid=\"u42592eb8\" data-lake-id=\"u610d0881\" id=\"u610d0881\"><span data-lake-id=\"u6cffee51\" id=\"u6cffee51\">主模块会等所有的依赖模块加载完成后，再调用其对应的回调函数(依赖前置)</span></li></ol><h2 data-lake-id=\"z2JF5\" id=\"z2JF5\"><span data-lake-id=\"u8bb2789f\" id=\"u8bb2789f\">CMD</span></h2><p data-lake-id=\"uc1185dea\" id=\"uc1185dea\"><span data-lake-id=\"ua8aab9c2\" id=\"ua8aab9c2\">此方案和</span><code data-lake-id=\"ub6f82ea4\" id=\"ub6f82ea4\"><span data-lake-id=\"uf5d45bd1\" id=\"uf5d45bd1\">AMD</span></code><span data-lake-id=\"uf3e4b265\" id=\"uf3e4b265\">方案都是为了解决异步模块加载的问题，</span><code data-lake-id=\"u3a7abec1\" id=\"u3a7abec1\"><span data-lake-id=\"udfea44e9\" id=\"udfea44e9\">sea.js</span></code><span data-lake-id=\"u2907af40\" id=\"u2907af40\">实现了</span><code data-lake-id=\"u840132f0\" id=\"u840132f0\"><span data-lake-id=\"u18fb61c1\" id=\"u18fb61c1\">CMD</span></code><span data-lake-id=\"u1e62dff9\" id=\"u1e62dff9\">规范，它和</span><code data-lake-id=\"u5aabb42a\" id=\"u5aabb42a\"><span data-lake-id=\"ucf228e3a\" id=\"ucf228e3a\">require.js</span></code><span data-lake-id=\"u3bd79290\" id=\"u3bd79290\">的区别在于模块定义时对依赖的处理不同和对依赖模块的执行时机的处理不同</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%20CMD%20%E6%8E%A8%E5%B4%87%E4%BE%9D%E8%B5%96%E5%B0%B1%E8%BF%91%5Cndefine(function%20(require%2C%20exports%2C%20module)%20%7B%5Cn%20%20var%20a%20%3D%20require(%5C%22.%2Fa%5C%22)%5Cn%20%20a.doSomething()%5Cn%20%20%2F%2F%20...%5Cn%20%20var%20b%20%3D%20require(%5C%22.%2Fb%5C%22)%5Cn%20%20b.doSomething()%5Cn%7D)%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22CqlJN%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h3 data-lake-id=\"xyIpv\" id=\"xyIpv\"><span data-lake-id=\"uda7a5f19\" id=\"uda7a5f19\">特点</span></h3><ol list=\"u92c78896\"><li fid=\"ua6541be4\" data-lake-id=\"u5fb248ef\" id=\"u5fb248ef\"><span data-lake-id=\"uff8dae31\" id=\"uff8dae31\">所有代码都运行在模块作用域中，不会污染全局变量</span></li><li fid=\"ua6541be4\" data-lake-id=\"u65cbdec9\" id=\"u65cbdec9\"><span data-lake-id=\"uf2a10e48\" id=\"uf2a10e48\">模块会被异步加载</span></li><li fid=\"ua6541be4\" data-lake-id=\"ucede56fc\" id=\"ucede56fc\"><span data-lake-id=\"u8f48a574\" id=\"u8f48a574\">模块加载完成后，不会执行其回调函数，而是等到主函数运行且需要的执行依赖的时候才运行依赖函数(依赖后置、按需加载)</span></li></ol><h2 data-lake-id=\"RQywW\" id=\"RQywW\"><span data-lake-id=\"ub9dc76f5\" id=\"ub9dc76f5\">UMD</span></h2><p data-lake-id=\"u5cd4a4f8\" id=\"u5cd4a4f8\"><code data-lake-id=\"ua46a4477\" id=\"ua46a4477\"><span data-lake-id=\"ucadaf876\" id=\"ucadaf876\">UMD</span></code><span data-lake-id=\"u68f8f3d2\" id=\"u68f8f3d2\">提供了支持多种风格的&quot;通用&quot;模式，在兼容</span><code data-lake-id=\"u363439b0\" id=\"u363439b0\"><span data-lake-id=\"u7c3a9741\" id=\"u7c3a9741\">CommonJS</span></code><span data-lake-id=\"uf72402b7\" id=\"uf72402b7\">和</span><code data-lake-id=\"ue233f94f\" id=\"ue233f94f\"><span data-lake-id=\"uad64d1a0\" id=\"uad64d1a0\">AMD</span></code><span data-lake-id=\"u84fc129d\" id=\"u84fc129d\">规范的同时，还兼容全局引用的方式</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22(function(root%2C%20factory)%20%7B%5Cn%20%20if%20(typeof%20define%20%3D%3D%3D%20%5C%22function%5C%22%20%26%26%20define.amd)%20%7B%5Cn%20%20%20%20%2F%2F%20AMD%5Cn%20%20%20%20define(%5B%5C%22jquery%5C%22%2C%20%5C%22lodash%5C%22%5D%2C%20factory)%5Cn%20%20%7D%20else%20if%20(typeof%20exports%20%3D%3D%3D%20%5C%22object%5C%22)%20%7B%5Cn%20%20%20%20%2F%2F%20CommonJS%5Cn%20%20%20%20module.exports%20%3D%20factory(require(%5C%22jquery%5C%22)%2C%20require(%5C%22lodash%5C%22))%5Cn%20%20%7D%20else%20%7B%5Cn%20%20%20%20%2F%2F%20%E6%B5%8F%E8%A7%88%E5%99%A8%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F(root%20%E5%92%8C%20window)%5Cn%20%20%20%20root.returnExports%20%3D%20factory(root.jQuery%2C%20root._)%5Cn%20%20%7D%5Cn%7D)(this%2C%20%20function%20(%24%2C%20_)%20%7B%5Cn%20%20%2F%2F%20%E6%96%B9%E6%B3%95%5Cn%20%20function%20a()%20%7B%7D%20%2F%2F%20%E7%A7%81%E6%9C%89%E6%96%B9%E6%B3%95%EF%BC%8C%E5%9B%A0%E4%B8%BA%E5%AE%83%E6%B2%A1%E6%9C%89%E8%A2%AB%E8%BF%94%E5%9B%9E%5Cn%20%20function%20b()%20%7B%7D%20%2F%2F%20%E5%85%AC%E5%85%B1%E6%96%B9%E6%B3%95%EF%BC%8C%E5%9B%A0%E4%B8%BA%E8%A2%AB%E8%BF%94%E5%9B%9E%E4%BA%86%5Cn%20%20function%20c()%20%7B%7D%20%2F%2F%20%E5%85%AC%E5%85%B1%E6%96%B9%E6%B3%95%EF%BC%8C%E5%9B%A0%E4%B8%BA%E8%A2%AB%E8%BF%94%E5%9B%9E%E4%BA%86%5Cn%20%20%2F%2F%20%E6%9A%B4%E9%9C%B2%E5%85%AC%E5%85%B1%E6%96%B9%E6%B3%95%5Cn%20%20return%20%7B%5Cn%20%20%20%20b%3A%20b%2C%5Cn%20%20%20%20c%3A%20c%5Cn%20%20%7D%5Cn%7D)%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22Y3OZu%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h3 data-lake-id=\"eFAjU\" id=\"eFAjU\"><span data-lake-id=\"ud11f2802\" id=\"ud11f2802\">原理</span></h3><ol list=\"ue895991c\"><li fid=\"u2cc588f5\" data-lake-id=\"u9d50097d\" id=\"u9d50097d\"><span data-lake-id=\"u781bcd0c\" id=\"u781bcd0c\">判断是否支持</span><code data-lake-id=\"ubbeb3f30\" id=\"ubbeb3f30\"><span data-lake-id=\"u90826d2f\" id=\"u90826d2f\">AMD</span></code><span data-lake-id=\"u0f1f1dfe\" id=\"u0f1f1dfe\">，若存在则使用</span><code data-lake-id=\"u83630f72\" id=\"u83630f72\"><span data-lake-id=\"ubd78dbc0\" id=\"ubd78dbc0\">AMD</span></code><span data-lake-id=\"ucf48695f\" id=\"ucf48695f\">方式加载模块，否则继续步骤</span><code data-lake-id=\"u529f8026\" id=\"u529f8026\"><span data-lake-id=\"u5123157a\" id=\"u5123157a\">2</span></code></li><li fid=\"u2cc588f5\" data-lake-id=\"u574bb4dc\" id=\"u574bb4dc\"><span data-lake-id=\"u7b79d18d\" id=\"u7b79d18d\">判断是否支持</span><code data-lake-id=\"u3edc4d51\" id=\"u3edc4d51\"><span data-lake-id=\"u2c5b2628\" id=\"u2c5b2628\">CommonJS</span></code><span data-lake-id=\"u61604797\" id=\"u61604797\">，若存在则使用</span><code data-lake-id=\"u843805f8\" id=\"u843805f8\"><span data-lake-id=\"ua155caad\" id=\"ua155caad\">Node.js</span></code><span data-lake-id=\"u28c40ab9\" id=\"u28c40ab9\">的模块格式，否则继续步骤</span><code data-lake-id=\"u87a449a3\" id=\"u87a449a3\"><span data-lake-id=\"u747dd6b4\" id=\"u747dd6b4\">3</span></code></li><li fid=\"u2cc588f5\" data-lake-id=\"u5ddc86ed\" id=\"u5ddc86ed\"><span data-lake-id=\"u430aa518\" id=\"u430aa518\">将模块公开到全局(</span><code data-lake-id=\"u4729b37b\" id=\"u4729b37b\"><span data-lake-id=\"uc8b77402\" id=\"uc8b77402\">window</span></code><span data-lake-id=\"u5992fffc\" id=\"u5992fffc\">或</span><code data-lake-id=\"ub0d7374b\" id=\"ub0d7374b\"><span data-lake-id=\"ua6d8092f\" id=\"ua6d8092f\">global</span></code><span data-lake-id=\"u1f06e3b6\" id=\"u1f06e3b6\">)</span></li></ol><h2 data-lake-id=\"zKQIw\" id=\"zKQIw\"><span data-lake-id=\"ua079bd43\" id=\"ua079bd43\">CJS</span></h2><p data-lake-id=\"uf0dd7ade\" id=\"uf0dd7ade\"><code data-lake-id=\"u8bc2486f\" id=\"u8bc2486f\"><span data-lake-id=\"ub34c1f9e\" id=\"ub34c1f9e\">CJS</span></code><span data-lake-id=\"u0d092a4a\" id=\"u0d092a4a\">是</span><code data-lake-id=\"ue74cdabc\" id=\"ue74cdabc\"><span data-lake-id=\"ub3351311\" id=\"ub3351311\">CommonJS</span></code><span data-lake-id=\"u791c951b\" id=\"u791c951b\">的简称，它是通过</span><code data-lake-id=\"udc7ae142\" id=\"udc7ae142\"><span data-lake-id=\"uc510af9f\" id=\"uc510af9f\">require</span></code><span data-lake-id=\"ufe1e14c6\" id=\"ufe1e14c6\">来引入模块，通过</span><code data-lake-id=\"uaaf67e96\" id=\"uaaf67e96\"><span data-lake-id=\"u30194e28\" id=\"u30194e28\">module.exports</span></code><span data-lake-id=\"ufdfd93c5\" id=\"ufdfd93c5\">定义模块的输出接口。</span><code data-lake-id=\"uf0712d30\" id=\"uf0712d30\"><span data-lake-id=\"u1a097b27\" id=\"u1a097b27\">CommonJS</span></code><span data-lake-id=\"u4283510e\" id=\"u4283510e\">模块是运行时加载，模块输出是一个值的拷贝，</span><code data-lake-id=\"ub1023429\" id=\"ub1023429\"><span data-lake-id=\"u68549f27\" id=\"u68549f27\">CommonJS</span></code><span data-lake-id=\"ua5adc88e\" id=\"ua5adc88e\">模块就是对象，即在输入时先加载整个模块，生成一个对象，然后再从这个对象上面读取方法，这种加载称为 &quot;运行时加载&quot;。</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22module.exports%20%3D%20class%20Square%20%7B%5Cn%20%20constructor(width)%20%7B%5Cn%20%20%20%20this.width%20%3D%20width%5Cn%20%20%7D%20%5Cn%20%20area()%20%7B%5Cn%20%20%20%20return%20this.width%20**%202%5Cn%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22T71fz%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22const%20Square%20%3D%20require(%5C%22.%2Fsquare.js%5C%22)%5Cn%5Cnconst%20square%20%3D%20new%20Square(2)%5Cn%5Cnmodule.exports%20%3D%20square.area()%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22sKOMQ%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h3 data-lake-id=\"DnURj\" id=\"DnURj\"><span data-lake-id=\"uc5725fe6\" id=\"uc5725fe6\">特点</span></h3><ol list=\"ubd485071\"><li fid=\"u1799fe8f\" data-lake-id=\"u17ab1269\" id=\"u17ab1269\"><span data-lake-id=\"u8d753f8f\" id=\"u8d753f8f\">所有代码都运行在模块作用域中，不会污染全局变量</span></li><li fid=\"u1799fe8f\" data-lake-id=\"u67b03df6\" id=\"u67b03df6\"><span data-lake-id=\"uf7731511\" id=\"uf7731511\">模块按照在代码中的顺序，一次同步加载</span></li><li fid=\"u1799fe8f\" data-lake-id=\"uabe1cf7f\" id=\"uabe1cf7f\"><span data-lake-id=\"ube19c66c\" id=\"ube19c66c\">模块会在运行时加载并执行，执行得到对象</span><code data-lake-id=\"uef4e028d\" id=\"uef4e028d\"><span data-lake-id=\"u3b48a1f2\" id=\"u3b48a1f2\">A</span></code><span data-lake-id=\"uc2119f32\" id=\"uc2119f32\">，后续通过</span><code data-lake-id=\"ub9e70b1e\" id=\"ub9e70b1e\"><span data-lake-id=\"ub027725b\" id=\"ub027725b\">require</span></code><span data-lake-id=\"ud68aaf7c\" id=\"ud68aaf7c\">获取的都是对对象</span><code data-lake-id=\"u51ffb755\" id=\"u51ffb755\"><span data-lake-id=\"u7e609cee\" id=\"u7e609cee\">A</span></code><span data-lake-id=\"ua66ec592\" id=\"ua66ec592\">值的拷贝(换句话说，模块可以多次加载，在第一次加载时执行并缓存其结果，后续加载会直接返回该结果)，要想模块再次运行，必须清楚缓存</span></li></ol><h2 data-lake-id=\"vTHV0\" id=\"vTHV0\"><span data-lake-id=\"u1493cda7\" id=\"u1493cda7\">ESM</span></h2><p data-lake-id=\"udf10ab81\" id=\"udf10ab81\"><code data-lake-id=\"ub3a17048\" id=\"ub3a17048\"><span data-lake-id=\"u9b955d31\" id=\"u9b955d31\">ESM</span></code><span data-lake-id=\"ua35cbcb5\" id=\"ua35cbcb5\">是</span><code data-lake-id=\"u3795e7fa\" id=\"u3795e7fa\"><span data-lake-id=\"u6433d400\" id=\"u6433d400\">ES6 Modules or JavaScript Modules</span></code><span data-lake-id=\"ua8fea05b\" id=\"ua8fea05b\">的简称，使用</span><code data-lake-id=\"u9cb7b920\" id=\"u9cb7b920\"><span data-lake-id=\"u801f13e5\" id=\"u801f13e5\">import</span></code><span data-lake-id=\"u4d74c436\" id=\"u4d74c436\">和</span><code data-lake-id=\"u462be08a\" id=\"u462be08a\"><span data-lake-id=\"u4d6ea52d\" id=\"u4d6ea52d\">export</span></code><span data-lake-id=\"uc8414c6e\" id=\"uc8414c6e\">的形式来导入导出模块。</span><code data-lake-id=\"u8a7fb8a5\" id=\"u8a7fb8a5\"><span data-lake-id=\"u7a3ad52f\" id=\"u7a3ad52f\">ESM</span></code><span data-lake-id=\"u4758b149\" id=\"u4758b149\">是编译时输出接口，它不是对象，它的对外接口只是一种静态定义，在代码静态解析阶段就会生成。</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22const%20obj%20%3D%20%7B%5Cn%20%20sayHello()%20%7B%5Cn%20%20%20%20console.log(%5C%22Hello%20Ray%5C%22)%5Cn%20%20%7D%2C%5Cn%20%20myName%3A%20%5C%22Ray%5C%22%2C%5Cn%20%20obj%3A%20%7B%5Cn%20%20%20%20myName%3A%20%5C%22Ray%5C%22%5Cn%20%20%7D%2C%5Cn%20%20arr%3A%20%5B1%2C%202%2C%203%5D%5Cn%7D%5Cn%5Cnexport%20default%20obj%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22OusHT%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22html%22%2C%22code%22%3A%22%3Cscript%20type%3D%5C%22module%5C%22%3E%5Cn%20%20import%20*%20as%20app%20from%20%5C%22.%2Fapp.js%5C%22%5Cn%20%20console.log(app.myName)%20%2F%2F%20%5C%22Hello%20Ray%5C%22%5Cn%20%20app.sayHi()%20%2F%2F%20%5C%22Hello%20Ray%5C%22%5Cn%20%20console.log(app.obj.myName)%20%2F%2F%20%5C%22Ray%5C%22%5Cn%20%20console.log(app.arr)%20%2F%2F%20%5B1%2C%202%2C%203%5D%5Cn%3C%2Fscript%3E%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22sgFEs%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h3 data-lake-id=\"I2pJs\" id=\"I2pJs\"><span data-lake-id=\"u6d04a912\" id=\"u6d04a912\">特点</span></h3><ol list=\"u499fc3a0\"><li fid=\"u66e6d1e8\" data-lake-id=\"u7b7b7217\" id=\"u7b7b7217\"><span data-lake-id=\"u7d9deacd\" id=\"u7d9deacd\">所有代码都运行在模块作用域中，不会污染全局变量</span></li><li fid=\"u66e6d1e8\" data-lake-id=\"uec03c835\" id=\"uec03c835\"><span data-lake-id=\"ue657dc0b\" id=\"ue657dc0b\">在编译时输出模块</span></li><li fid=\"u66e6d1e8\" data-lake-id=\"uebe07743\" id=\"uebe07743\"><span data-lake-id=\"u79babdfd\" id=\"u79babdfd\">输出的模块内容为只读，不可修改</span></li><li fid=\"u66e6d1e8\" data-lake-id=\"udc63537d\" id=\"udc63537d\"><span data-lake-id=\"u2b9498d0\" id=\"u2b9498d0\">不会缓存模块结果，每次都会动态执行模块内容</span></li></ol><h3 data-lake-id=\"q14BS\" id=\"q14BS\"><span data-lake-id=\"u69bd9207\" id=\"u69bd9207\">import &amp; export</span></h3><ul list=\"u0ff7fff6\"><li fid=\"ufad42301\" data-lake-id=\"udc286f74\" id=\"udc286f74\"><code data-lake-id=\"u3065101d\" id=\"u3065101d\"><span data-lake-id=\"u44c003df\" id=\"u44c003df\">import</span></code><span data-lake-id=\"u887035b1\" id=\"u887035b1\">语句会被提升</span></li><li fid=\"ufad42301\" data-lake-id=\"u067d621b\" id=\"u067d621b\"><code data-lake-id=\"u942e3532\" id=\"u942e3532\"><span data-lake-id=\"u52069fa6\" id=\"u52069fa6\">import</span></code><span data-lake-id=\"u7e07ae3d\" id=\"u7e07ae3d\">的变量都是只读的</span></li><li fid=\"ufad42301\" data-lake-id=\"ua69e84a0\" id=\"ua69e84a0\"><code data-lake-id=\"u9be8c60d\" id=\"u9be8c60d\"><span data-lake-id=\"u152038d2\" id=\"u152038d2\">import</span></code><span data-lake-id=\"u471b20f2\" id=\"u471b20f2\">是静态执行，因此无法使用表达式</span></li><li fid=\"ufad42301\" data-lake-id=\"u3be08113\" id=\"u3be08113\"><code data-lake-id=\"u17bd6311\" id=\"u17bd6311\"><span data-lake-id=\"u68503798\" id=\"u68503798\">import</span></code><span data-lake-id=\"u2a4052f3\" id=\"u2a4052f3\">语句支持</span><code data-lake-id=\"udbe1c427\" id=\"udbe1c427\"><span data-lake-id=\"u63d10726\" id=\"u63d10726\">singleton</span></code><span data-lake-id=\"ufd4d582a\" id=\"ufd4d582a\">模式(如果多次重复执行同一句</span><code data-lake-id=\"ua26dc297\" id=\"ua26dc297\"><span data-lake-id=\"ucf202ee0\" id=\"ucf202ee0\">import</span></code><span data-lake-id=\"ua2aa3e91\" id=\"ua2aa3e91\">语句，那么只会执行一次，而不会执行多次)</span></li><li fid=\"ufad42301\" data-lake-id=\"u9d034bc3\" id=\"u9d034bc3\"><code data-lake-id=\"u74da2764\" id=\"u74da2764\"><span data-lake-id=\"uacd18dfa\" id=\"uacd18dfa\">export</span></code><span data-lake-id=\"u86d08d17\" id=\"u86d08d17\">需要输出一个对象或变量声明语句</span></li><li fid=\"ufad42301\" data-lake-id=\"ud1958484\" id=\"ud1958484\"><code data-lake-id=\"u6fa06184\" id=\"u6fa06184\"><span data-lake-id=\"u39aca66e\" id=\"u39aca66e\">export default</span></code><span data-lake-id=\"u0f75536c\" id=\"u0f75536c\">相当于输出一个名叫</span><code data-lake-id=\"u017bdeda\" id=\"u017bdeda\"><span data-lake-id=\"ud03907ef\" id=\"ud03907ef\">default</span></code><span data-lake-id=\"ua52969a9\" id=\"ua52969a9\">的变量/对象</span></li><li fid=\"ufad42301\" data-lake-id=\"u3a9e511b\" id=\"u3a9e511b\"><code data-lake-id=\"u67e3a0e9\" id=\"u67e3a0e9\"><span data-lake-id=\"ue118f784\" id=\"ue118f784\">export</span></code><span data-lake-id=\"u5f2f09e7\" id=\"u5f2f09e7\">与</span><code data-lake-id=\"ufc0f4f82\" id=\"ufc0f4f82\"><span data-lake-id=\"u7e94b278\" id=\"u7e94b278\">import</span></code><span data-lake-id=\"ub8c8bf19\" id=\"ub8c8bf19\">连用</span></li></ul><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22export%20%7B%20foo%2C%20bar%20%7D%20from%20%5C%22my_module%5C%22%5Cn%5Cn%2F%2F%20%E7%9B%B8%E5%BD%93%E4%BA%8E%5Cnimport%20%7B%20foo%2C%20bar%20%7D%20from%20%5C%22my_module%5C%22%5Cnexport%20%7B%20foo%2C%20bar%20%7D%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22yFSM7%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card>",
  "body_draft_lake": "",
  "public": 0,
  "status": 1,
  "view_status": 0,
  "read_status": 1,
  "likes_count": 0,
  "comments_count": 0,
  "content_updated_at": "2022-04-04T11:34:13.000Z",
  "deleted_at": null,
  "created_at": "2022-04-04T11:34:13.000Z",
  "updated_at": "2022-05-10T15:12:30.000Z",
  "published_at": "2022-04-04T11:34:13.000Z",
  "first_published_at": "2022-04-04T11:34:12.805Z",
  "word_count": 1288,
  "cover": null,
  "description": "AMD这种方案采用异步加载的方式来加载模块，模块的加载不加载后面语句的执行，所有依赖这个模块的语句都定义在一个回调函数里，等到加载完成后再执行回调函数。require.js实现了AMD规范// AMD 推崇依赖前置 define(\"alpha\", [\"require\", \"exports\", ...",
  "custom_description": null,
  "hits": 0,
  "_serializer": "v2.doc_detail"
}