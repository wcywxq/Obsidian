{
  "id": 88490090,
  "slug": "fpmvpg",
  "title": "http 请求的 method",
  "book_id": 26225124,
  "book": {
    "id": 26225124,
    "type": "Book",
    "slug": "mxunh7",
    "name": "八股文 eight-part essay writing",
    "user_id": 732231,
    "description": "前端八股文",
    "creator_id": 732231,
    "public": 0,
    "items_count": 239,
    "likes_count": 0,
    "watches_count": 1,
    "content_updated_at": "2023-11-11T18:15:57.023Z",
    "updated_at": "2023-11-11T18:15:57.000Z",
    "created_at": "2022-04-04T11:31:45.000Z",
    "namespace": "wcywxq/mxunh7",
    "user": {
      "id": 732231,
      "type": "User",
      "login": "wcywxq",
      "name": "magic",
      "description": null,
      "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/732231/1606968271774-avatar/886ad88b-d2cc-4c9e-a674-f70eb51a679c.png",
      "books_count": 18,
      "public_books_count": 0,
      "followers_count": 0,
      "following_count": 0,
      "created_at": "2020-01-08T14:21:31.000Z",
      "updated_at": "2023-11-13T09:32:35.000Z",
      "_serializer": "v2.user"
    },
    "_serializer": "v2.book"
  },
  "user_id": 732231,
  "creator": {
    "id": 732231,
    "type": "User",
    "login": "wcywxq",
    "name": "magic",
    "description": null,
    "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/732231/1606968271774-avatar/886ad88b-d2cc-4c9e-a674-f70eb51a679c.png",
    "books_count": 18,
    "public_books_count": 0,
    "followers_count": 0,
    "following_count": 0,
    "created_at": "2020-01-08T14:21:31.000Z",
    "updated_at": "2023-11-13T09:32:35.000Z",
    "_serializer": "v2.user"
  },
  "format": "lake",
  "body": "<a name=\"Bo66Q\"></a>\n## 各个 http 版本所支持的 method\n| <br /> | [GET](#SCoN1) | [POST](#fpM3o) | [HEAD](#GKUxY) | [PUT](#QX6KZ) | [DELETE](#QonXS) | [PATCH](#pRanL) | [OPTIONS](#Wby7B) | [CONNECT](#XzBQK) | [TRACE](#qDU4y) |\n| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- |\n| http/1.0 | ✅ | ✅ | ✅ | ❌ | ❌ | ❌ | ❌ | ❌ | ❌ |\n| http/1.1 | ✅ | ✅ | ✅ | ✅ | ✅ | ✅ | ✅ | ✅ | ✅ |\n\n<a name=\"cKrGY\"></a>\n## http 各个 method 介绍\n<a name=\"SCoN1\"></a>\n### GET\nHTTP GET 方法请求指定的资源。使用 GET 的请求应该只用于获取数据。\n<a name=\"fpM3o\"></a>\n### POST\nHTTP POST 方法 发送数据给服务器。请求主体的类型由 [Content-Type](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Content-Type) 首部指定。<br />PUT 和[POST](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/POST)方法的区别是，PUT 方法是幂等的：连续调用一次或者多次的效果相同（无副作用）。连续调用同一个 POST 可能会带来额外的影响，比如多次提交订单。<br />一个 POST 请求通常是通过 [HTML 表单](https://developer.mozilla.org/en-US/docs/Learn/Forms)发送，并返回服务器的修改结果。在这种情况下，content type 是通过在 [<form>](https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/form) 元素中设置正确的 [enctype](https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/form#attr-enctype) 属性，或是在 [<input>](https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/Input) 和 [<button>](https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/button) 元素中设置 [formenctype](https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/Input#attr-formenctype) 属性来选择的:\n\n- application/x-www-form-urlencoded: 数据被编码成以 '&' 分隔的键 - 值对，同时以 '=' 分隔键和值。非字母或数字的字符会被 [percent-encoding](https://developer.mozilla.org/zh-CN/docs/Glossary/percent-encoding): 这也就是为什么这种类型不支持二进制数据 (应使用 multipart/form-data 代替).\n- multipart/form-data\n- text/plain\n\n当 POST 请求是通过除 HTML 表单之外的方式发送时，例如使用 [XMLHttpRequest](https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest), 那么请求主体可以是任何类型。按 HTTP 1.1 规范中描述，POST 为了以统一的方法来涵盖以下功能：\n\n- 注释已有的资源\n- 在公告板，新闻组，邮件列表或类似的文章组中发布消息;\n- 通过注册新增用户;\n- 向数据处理程序提供一批数据，例如提交一个表单;\n- 通过追加操作，扩展数据库数据。\n<a name=\"To9Mk\"></a>\n#### 例子\n使用默认的 application/x-www-form-urlencoded 做为 content type 的简单表单：\n```latex\nPOST / HTTP/1.1\nHost: foo.com\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 13\n\nsay=Hi&to=Mom\n```\n使用 multipart/form-data 作为 content type 的表单：\n```\nPOST /test.html HTTP/1.1\nHost: example.org\nContent-Type: multipart/form-data;boundary=\"boundary\"\n\n--boundary\nContent-Disposition: form-data; name=\"field1\"\n\nvalue1\n--boundary\nContent-Disposition: form-data; name=\"field2\"; filename=\"example.txt\"\n\nvalue2\n```\n<a name=\"GKUxY\"></a>\n### HEAD\nHEAD 几乎与 GET 相同，但没有响应正文。<br />换句话说，如果 GET /users 返回用户列表，那么 HEAD /users 将发出相同的请求，但不会返回用户列表。<br />HEAD 请求对于在实际发出 GET 请求之前检查 GET 请求将返回的内容很有用——比如在下载大文件或响应正文之前。\n:::tips\nHTTP HEAD 方法请求资源的头部信息，并且这些头部与 HTTP [GET](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/GET) 方法请求时返回的一致。该请求方法的一个使用场景是在下载一个大文件前先获取其大小再决定是否要下载，以此可以节约带宽资源。<br />HEAD 方法的响应不应包含响应正文。即使包含了正文也必须忽略掉. 虽然描述正文信息的 [entity headers](https://developer.mozilla.org/zh-CN/docs/Glossary/Entity_header), 例如 [Content-Length](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Content-Length) 可能会包含在响应中，但它们并不是用来描述 HEAD 响应本身的，而是用来描述同样情况下的 [GET](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/GET) 请求应该返回的响应。<br />如果 HEAD 请求的结果显示在上一次 [GET](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/GET) 请求后缓存的资源已经过期了，即使没有发出[GET](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/GET)请求，缓存也会失效\n:::\n<a name=\"fmoX9\"></a>\n#### 例子\n```latex\nHEAD /index.html\n```\n<a name=\"QX6KZ\"></a>\n### PUT\nHTTP PUT 请求方法使用请求中的负载创建或者替换目标资源。<br />PUT 与 [POST](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/POST) 方法的区别在于，PUT 方法是幂等的：调用一次与连续调用多次是等价的（即没有副作用），而连续调用多次 POST 方法可能会有副作用，比如将一个订单重复提交多次。\n<a name=\"FFmPo\"></a>\n#### 例子\n<a name=\"XNFtl\"></a>\n##### 请求\n```latex\nPUT /new.html HTTP/1.1\nHost: example.com\nContent-type: text/html\nContent-length: 16\n\n<p>New File</p>\n```\n<a name=\"DT2jH\"></a>\n##### 响应\n如果目标资源不存在，并且 PUT 方法成功创建了一份，那么源头服务器必须返回[201](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/201) (Created) 来通知客户端资源已创建。\n```latex\nHTTP/1.1 201 Created\nContent-Location: /new.html\n```\n如果目标资源已经存在，并且依照请求中封装的表现形式成功进行了更新，那么，源头服务器必须返回[200](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/200) (OK) 或者[204](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/204) (No Content) 来表示请求的成功完成。\n```latex\nHTTP/1.1 204 No Content\nContent-Location: /existing.html\n```\n<a name=\"QonXS\"></a>\n### DELETE\nDELETE 方法删除指定的资源。\n<a name=\"aye5L\"></a>\n#### 例子\n<a name=\"doXt2\"></a>\n##### 请求\n```\nDELETE /file.html HTTP/1.1\n```\n<a name=\"EnXAy\"></a>\n##### 响应\n\n- 如果 DELETE 方法成功执行，那么可能会有以下几种状态码：\n   - 状态码 [202](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/202) (Accepted) 表示请求的操作可能会成功执行，但是尚未开始执行。\n   - 状态码 [204](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/204) (No Content) 表示操作已执行，但是无进一步的相关信息。\n   - 状态码 [200](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/200) (OK) 表示操作已执行，并且响应中提供了相关状态的描述信息。\n```html\nHTTP/1.1 200 OK\nDate: Wed, 21 Oct 2015 07:28:00 GMT\n\n<html>\n  <body>\n    <h1>File deleted.</h1>\n  </body>\n</html>\n```\n<a name=\"pRanL\"></a>\n### PATCH\nPATCH 方法用于对资源应用部分修改。\n:::tips\n在 HTTP 协议中，请求方法 PATCH 用于对资源进行部分修改。<br />在 HTTP 协议中， [PUT](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/PUT) 方法已经被用来表示对资源进行整体覆盖， 而 [POST](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/POST) 方法则没有对标准的补丁格式的提供支持。不同于 PUT 方法，而与 POST 方法类似，PATCH 方法是非幂等的，这就意味着连续多个的相同请求会产生不同的效果。<br />要判断一台服务器是否支持 PATCH 方法，那么就看它是否将其添加到了响应首部 [Allow](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Allow) 或者 [Access-Control-Allow-Methods](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Access-Control-Allow-Methods)（在跨域访问的场合，CORS）的方法列表中 。<br />另外一个支持 PATCH 方法的隐含迹象是 [Accept-Patch](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Accept-Patch) 首部的出现，这个首部明确了服务器端可以接受的补丁文件的格式。\n:::\n<a name=\"fzDyJ\"></a>\n#### 例子\n<a name=\"XUjMx\"></a>\n##### 请求\n```latex\nPATCH /file.txt HTTP/1.1\nHost: www.example.com\nContent-Type: application/example\nIf-Match: \"e0023aa4e\"\nContent-Length: 100\n\n[description of changes]\n```\n<a name=\"e4z7T\"></a>\n##### 响应\n[204](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/204) 状态码表示这是一个操作成功的响应，因为响应中不带有消息主体。\n```latex\nHTTP/1.1 204 No Content\nContent-Location: /file.txt\nETag: \"e0023aa4f\"\n```\n<a name=\"Wby7B\"></a>\n### OPTIONS\nOPTIONS 方法描述了目标资源的通信选项。\n:::tips\nHTTP 的 OPTIONS 方法用于获取目的资源所支持的通信选项。客户端可以对特定的 URL 使用 OPTIONS 方法，也可以对整站（通过将 URL 设置为“*”）使用该方法。\n:::\n<a name=\"i4K2g\"></a>\n#### 例子\n<a name=\"z4voM\"></a>\n##### 检测服务器所支持的请求方法\n可以使用 OPTIONS 方法对服务器发起请求，以检测服务器支持哪些 HTTP 方法：\n```latex\ncurl -X OPTIONS http://example.org -i\n```\n响应报文包含一个 [Allow](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Allow) 首部字段，该字段的值表明了服务器支持的所有 HTTP 方法：\n```latex\nHTTP/1.1 200 OK\nAllow: OPTIONS, GET, HEAD, POST\nCache-Control: max-age=604800\nDate: Thu, 13 Oct 2016 11:45:00 GMT\nExpires: Thu, 20 Oct 2016 11:45:00 GMT\nServer: EOS (lax004/2813)\nx-ec-custom-error: 1\nContent-Length: 0\n```\n<a name=\"xmG9T\"></a>\n##### CORS 中的预检请求\n在 [CORS](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CORS) 中，可以使用 OPTIONS 方法发起一个预检请求，以检测实际请求是否可以被服务器所接受。预检请求报文中的 [Access-Control-Request-Method](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Access-Control-Request-Method) 首部字段告知服务器实际请求所使用的 HTTP 方法；[Access-Control-Request-Headers](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Access-Control-Request-Headers) 首部字段告知服务器实际请求所携带的自定义首部字段。服务器基于从预检请求获得的信息来判断，是否接受接下来的实际请求。\n```latex\nOPTIONS /resources/post-here/ HTTP/1.1\nHost: bar.other\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\nAccept-Language: en-us,en;q=0.5\nAccept-Encoding: gzip,deflate\nAccept-Charset: ISO-8859-1,utf-8;q=0.7,*;q=0.7\nConnection: keep-alive\nOrigin: http://foo.example\nAccess-Control-Request-Method: POST\nAccess-Control-Request-Headers: X-PINGOTHER, Content-Type\n```\n服务器所返回的 [Access-Control-Allow-Methods](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Access-Control-Allow-Methods) 首部字段将所有允许的请求方法告知客户端。该首部字段与 [Allow](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Allow) 类似，但只能用于涉及到 CORS 的场景中。\n```latex\nHTTP/1.1 200 OK\nDate: Mon, 01 Dec 2008 01:15:39 GMT\nServer: Apache/2.0.61 (Unix)\nAccess-Control-Allow-Origin: http://foo.example\nAccess-Control-Allow-Methods: POST, GET, OPTIONS\nAccess-Control-Allow-Headers: X-PINGOTHER, Content-Type\nAccess-Control-Max-Age: 86400\nVary: Accept-Encoding, Origin\nContent-Encoding: gzip\nContent-Length: 0\nKeep-Alive: timeout=2, max=100\nConnection: Keep-Alive\nContent-Type: text/plain\n```\n<a name=\"XzBQK\"></a>\n### CONNECT\nCONNECT 方法用于启动与请求资源的双向通信（隧道）。\n:::tips\n在 HTTP 协议中，CONNECT 方法可以开启一个客户端与所请求资源之间的双向沟通的通道。它可以用来创建隧道（tunnel）。<br />例如，CONNECT 可以用来访问采用了 [SSL](https://developer.mozilla.org/zh-CN/docs/Glossary/SSL) ([HTTPS](https://developer.mozilla.org/zh-CN/docs/Glossary/https)) 协议的站点。客户端要求代理服务器将 TCP 连接作为通往目的主机隧道。之后该服务器会代替客户端与目的主机建立连接。连接建立好之后，代理服务器会面向客户端发送或接收 TCP 消息流。<br />CONNECT 是一个应用范围为点到点的方法。\n:::\n<a name=\"tdJZp\"></a>\n#### 例子\n```\nCONNECT server.example.com:80 HTTP/1.1\nHost: server.example.com:80\nProxy-Authorization: basic aGVsbG86d29ybGQ=\n```\n<a name=\"qDU4y\"></a>\n### TRACE\nHTTP TRACE 方法 实现沿通向目标资源的路径的消息环回（loop-back）测试 ，提供了一种实用的 debug 机制。<br />请求的最终接收者应当原样反射（reflect）它接收到的消息，除了以下字段部分，作为一个[Content-Type](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Content-Type) 为 message/http 的 200（OK）响应的消息的主体（body）返回给客户端 。<br />最终接收者是指初始（origin）服务器，或者第一个接收到 [Max-Forwards](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Max-Forwards) 值为 0 的请求的服务器。\n",
  "body_draft": "",
  "body_html": "<!doctype html><div class=\"lake-content\" typography=\"classic\"><h2 id=\"Bo66Q\"><span class=\"ne-text\">各个 http 版本所支持的 method</span></h2><table id=\"JwLz3\" class=\"ne-table\" style=\"width: 938px\"><tbody><tr style=\"height: 63px\"><td width=\"93\"><p id=\"ue72c6bcc\" class=\"ne-p\"><span class=\"ne-text\"></span></p></td><td width=\"93\"><p id=\"u7b50cfcc\" class=\"ne-p\"><a href=\"#SCoN1\" data-href=\"#SCoN1\" class=\"ne-link\"><span class=\"ne-text\">GET</span></a></p></td><td width=\"93\"><p id=\"ua4f4466e\" class=\"ne-p\"><a href=\"#fpM3o\" data-href=\"#fpM3o\" class=\"ne-link\"><span class=\"ne-text\">POST</span></a></p></td><td width=\"93\"><p id=\"u83408db3\" class=\"ne-p\"><a href=\"#GKUxY\" data-href=\"#GKUxY\" class=\"ne-link\"><span class=\"ne-text\">HEAD</span></a></p></td><td width=\"93\"><p id=\"u6c212fa1\" class=\"ne-p\"><a href=\"#QX6KZ\" data-href=\"#QX6KZ\" class=\"ne-link\"><span class=\"ne-text\">PUT</span></a></p></td><td width=\"93\"><p id=\"u087d3ef7\" class=\"ne-p\"><a href=\"#QonXS\" data-href=\"#QonXS\" class=\"ne-link\"><span class=\"ne-text\">DELETE</span></a></p></td><td width=\"93\"><p id=\"u4410132d\" class=\"ne-p\"><a href=\"#pRanL\" data-href=\"#pRanL\" class=\"ne-link\"><span class=\"ne-text\">PATCH</span></a></p></td><td width=\"93\"><p id=\"udb688636\" class=\"ne-p\"><a href=\"#Wby7B\" data-href=\"#Wby7B\" class=\"ne-link\"><span class=\"ne-text\">OPTIONS</span></a></p></td><td width=\"93\"><p id=\"ubd8a93be\" class=\"ne-p\"><a href=\"#XzBQK\" data-href=\"#XzBQK\" class=\"ne-link\"><span class=\"ne-text\">CONNECT</span></a></p></td><td width=\"101\"><p id=\"u9270fc20\" class=\"ne-p\"><a href=\"#qDU4y\" data-href=\"#qDU4y\" class=\"ne-link\"><span class=\"ne-text\">TRACE</span></a></p></td></tr><tr style=\"height: 33px\"><td width=\"93\"><p id=\"uc8baa09a\" class=\"ne-p\"><span class=\"ne-text\">http/1.0</span></p></td><td width=\"93\"><p id=\"ubf6d2c46\" class=\"ne-p\"><span class=\"ne-text\">✅</span></p></td><td width=\"93\"><p id=\"ueb231fb8\" class=\"ne-p\"><span class=\"ne-text\">✅</span></p></td><td width=\"93\"><p id=\"u3300aa7e\" class=\"ne-p\"><span class=\"ne-text\">✅</span></p></td><td width=\"93\"><p id=\"uc121befd\" class=\"ne-p\"><span class=\"ne-text\">❌</span></p></td><td width=\"93\"><p id=\"u568b0cdc\" class=\"ne-p\"><span class=\"ne-text\">❌</span></p></td><td width=\"93\"><p id=\"uf7552758\" class=\"ne-p\"><span class=\"ne-text\">❌</span></p></td><td width=\"93\"><p id=\"u06bdb1f6\" class=\"ne-p\"><span class=\"ne-text\">❌</span></p></td><td width=\"93\"><p id=\"u9e550d59\" class=\"ne-p\"><span class=\"ne-text\">❌</span></p></td><td width=\"101\"><p id=\"u8bba0d0d\" class=\"ne-p\"><span class=\"ne-text\">❌</span></p></td></tr><tr style=\"height: 33px\"><td width=\"93\"><p id=\"u242f64d7\" class=\"ne-p\"><span class=\"ne-text\">http/1.1</span></p></td><td width=\"93\"><p id=\"u7d3e2b62\" class=\"ne-p\"><span class=\"ne-text\">✅</span></p></td><td width=\"93\"><p id=\"uae12f5f3\" class=\"ne-p\"><span class=\"ne-text\">✅</span></p></td><td width=\"93\"><p id=\"u37c75949\" class=\"ne-p\"><span class=\"ne-text\">✅</span></p></td><td width=\"93\"><p id=\"u613189ef\" class=\"ne-p\"><span class=\"ne-text\">✅</span></p></td><td width=\"93\"><p id=\"uaaa3fb56\" class=\"ne-p\"><span class=\"ne-text\">✅</span></p></td><td width=\"93\"><p id=\"u20d834f2\" class=\"ne-p\"><span class=\"ne-text\">✅</span></p></td><td width=\"93\"><p id=\"udece13f9\" class=\"ne-p\"><span class=\"ne-text\">✅</span></p></td><td width=\"93\"><p id=\"ue75fcea3\" class=\"ne-p\"><span class=\"ne-text\">✅</span></p></td><td width=\"101\"><p id=\"ubdc24fea\" class=\"ne-p\"><span class=\"ne-text\">✅</span></p></td></tr></tbody></table><h2 id=\"cKrGY\"><span class=\"ne-text\">http 各个 method 介绍</span></h2><h3 id=\"SCoN1\"><span class=\"ne-text\">GET</span></h3><p id=\"u144ecc2a\" class=\"ne-p\"><span class=\"ne-text\">HTTP GET 方法请求指定的资源。使用 GET 的请求应该只用于获取数据。</span></p><h3 id=\"fpM3o\"><span class=\"ne-text\">POST</span></h3><p id=\"u94667901\" class=\"ne-p\"><span class=\"ne-text\">HTTP POST 方法 发送数据给服务器。请求主体的类型由 </span><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Content-Type\" data-href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Content-Type\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">Content-Type</span></a><span class=\"ne-text\"> 首部指定。</span></p><p id=\"u98e5bd61\" class=\"ne-p\"><span class=\"ne-text\">PUT 和</span><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/POST\" data-href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/POST\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">POST</span></a><span class=\"ne-text\">方法的区别是，PUT 方法是幂等的：连续调用一次或者多次的效果相同（无副作用）。连续调用同一个 POST 可能会带来额外的影响，比如多次提交订单。</span></p><p id=\"u7fe1dbe0\" class=\"ne-p\"><span class=\"ne-text\">一个</span><span class=\"ne-text\"> </span><span class=\"ne-text\">POST</span><span class=\"ne-text\"> </span><span class=\"ne-text\">请求通常是通过</span><span class=\"ne-text\"> </span><a href=\"https://developer.mozilla.org/en-US/docs/Learn/Forms\" data-href=\"https://developer.mozilla.org/en-US/docs/Learn/Forms\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">HTML 表单</span></a><span class=\"ne-text\">发送，并返回服务器的修改结果。在这种情况下，content type 是通过在</span><span class=\"ne-text\"> </span><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/form\" data-href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/form\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">&lt;form&gt;</span></a><span class=\"ne-text\"> </span><span class=\"ne-text\">元素中设置正确的</span><span class=\"ne-text\"> </span><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/form#attr-enctype\" data-href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/form#attr-enctype\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">enctype</span></a><span class=\"ne-text\"> </span><span class=\"ne-text\">属性，或是在</span><span class=\"ne-text\"> </span><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/Input\" data-href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/Input\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">&lt;input&gt;</span></a><span class=\"ne-text\"> </span><span class=\"ne-text\">和</span><span class=\"ne-text\"> </span><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/button\" data-href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/button\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">&lt;button&gt;</span></a><span class=\"ne-text\"> </span><span class=\"ne-text\">元素中设置</span><span class=\"ne-text\"> </span><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/Input#attr-formenctype\" data-href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/Input#attr-formenctype\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">formenctype</span></a><span class=\"ne-text\"> </span><span class=\"ne-text\">属性来选择的</span><span class=\"ne-text\">:</span></p><ul class=\"ne-ul\"><li id=\"u416a2982\"><span class=\"ne-text\">application/</span><span class=\"ne-text\">x-www-form-urlencoded</span><span class=\"ne-text\">: 数据被编码成以</span><span class=\"ne-text\"> </span><span class=\"ne-text\">'&amp;'</span><span class=\"ne-text\"> </span><span class=\"ne-text\">分隔的键 - 值对，同时以</span><span class=\"ne-text\"> </span><span class=\"ne-text\">'='</span><span class=\"ne-text\"> </span><span class=\"ne-text\">分隔键和值。非字母或数字的字符会被</span><span class=\"ne-text\"> </span><a href=\"https://developer.mozilla.org/zh-CN/docs/Glossary/percent-encoding\" data-href=\"https://developer.mozilla.org/zh-CN/docs/Glossary/percent-encoding\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">percent-encoding</span></a><span class=\"ne-text\">: 这也就是为什么这种类型不支持二进制数据 (应使用</span><span class=\"ne-text\"> </span><span class=\"ne-text\">multipart/form-data</span><span class=\"ne-text\"> </span><span class=\"ne-text\">代替).</span></li><li id=\"uf54c493b\"><span class=\"ne-text\">multipart/form-data</span></li><li id=\"ue88b1990\"><span class=\"ne-text\">text/plain</span></li></ul><p id=\"u2bb4546d\" class=\"ne-p\"><span class=\"ne-text\">当 POST 请求是通过除 HTML 表单之外的方式发送时，例如使用</span><span class=\"ne-text\"> </span><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest\" data-href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">XMLHttpRequest</span></a><span class=\"ne-text\">, 那么请求主体可以是任何类型。按 HTTP 1.1 规范中描述，POST 为了以统一的方法来涵盖以下功能：</span></p><ul class=\"ne-ul\"><li id=\"u55611163\"><span class=\"ne-text\">注释已有的资源</span></li><li id=\"u72045431\"><span class=\"ne-text\">在公告板，新闻组，邮件列表或类似的文章组中发布消息;</span></li><li id=\"u236e2ea2\"><span class=\"ne-text\">通过注册新增用户;</span></li><li id=\"u9f296a87\"><span class=\"ne-text\">向数据处理程序提供一批数据，例如提交一个表单;</span></li><li id=\"u589fc215\"><span class=\"ne-text\">通过追加操作，扩展数据库数据。</span></li></ul><h4 id=\"To9Mk\"><span class=\"ne-text\">例子</span></h4><p id=\"ud013dc25\" class=\"ne-p\"><span class=\"ne-text\">使用默认的 application/x-www-form-urlencoded 做为 content type 的简单表单：</span></p><pre data-language=\"latex\" id=\"ELc1w\" class=\"ne-codeblock language-latex\">POST / HTTP/1.1\nHost: foo.com\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 13\n\nsay=Hi&amp;to=Mom</pre><p id=\"u559c1f18\" class=\"ne-p\"><span class=\"ne-text\">使用 multipart/form-data 作为 content type 的表单：</span></p><pre data-language=\"plain\" id=\"Bsq4W\" class=\"ne-codeblock language-plain\">POST /test.html HTTP/1.1\nHost: example.org\nContent-Type: multipart/form-data;boundary=&quot;boundary&quot;\n\n--boundary\nContent-Disposition: form-data; name=&quot;field1&quot;\n\nvalue1\n--boundary\nContent-Disposition: form-data; name=&quot;field2&quot;; filename=&quot;example.txt&quot;\n\nvalue2</pre><h3 id=\"GKUxY\"><span class=\"ne-text\">HEAD</span></h3><p id=\"udbb501b3\" class=\"ne-p\"><span class=\"ne-text\">HEAD 几乎与 GET 相同，但没有响应正文。</span></p><p id=\"ua3f3a213\" class=\"ne-p\"><span class=\"ne-text\">换句话说，如果 GET /users 返回用户列表，那么 HEAD /users 将发出相同的请求，但不会返回用户列表。</span></p><p id=\"ue904f69d\" class=\"ne-p\"><span class=\"ne-text\">HEAD 请求对于在实际发出 GET 请求之前检查 GET 请求将返回的内容很有用——比如在下载大文件或响应正文之前。</span></p><div data-type=\"tips\" class=\"ne-alert\"><p id=\"ub2c60042\" class=\"ne-p\"><span class=\"ne-text\">HTTP HEAD 方法请求资源的头部信息，并且这些头部与 HTTP </span><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/GET\" data-href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/GET\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">GET</span></a><span class=\"ne-text\"> 方法请求时返回的一致。该请求方法的一个使用场景是在下载一个大文件前先获取其大小再决定是否要下载，以此可以节约带宽资源。</span></p><p id=\"u6552048d\" class=\"ne-p\"><span class=\"ne-text\">HEAD</span><span class=\"ne-text\"> </span><span class=\"ne-text\">方法的响应不应包含响应正文。即使包含了正文也必须忽略掉. 虽然描述正文信息的</span><span class=\"ne-text\"> </span><a href=\"https://developer.mozilla.org/zh-CN/docs/Glossary/Entity_header\" data-href=\"https://developer.mozilla.org/zh-CN/docs/Glossary/Entity_header\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">entity headers</span></a><span class=\"ne-text\">, 例如</span><span class=\"ne-text\"> </span><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Content-Length\" data-href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Content-Length\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">Content-Length</span></a><span class=\"ne-text\"> </span><span class=\"ne-text\">可能会包含在响应中，但它们并不是用来描述</span><span class=\"ne-text\"> </span><span class=\"ne-text\">HEAD</span><span class=\"ne-text\"> </span><span class=\"ne-text\">响应本身的，而是用来描述同样情况下的</span><span class=\"ne-text\"> </span><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/GET\" data-href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/GET\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">GET</span></a><span class=\"ne-text\"> </span><span class=\"ne-text\">请求应该返回的响应。</span></p><p id=\"u5e08ad31\" class=\"ne-p\"><span class=\"ne-text\">如果 HEAD 请求的结果显示在上一次 </span><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/GET\" data-href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/GET\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">GET</span></a><span class=\"ne-text\"> 请求后缓存的资源已经过期了，即使没有发出</span><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/GET\" data-href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/GET\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">GET</span></a><span class=\"ne-text\">请求，缓存也会失效</span></p></div><h4 id=\"fmoX9\"><span class=\"ne-text\">例子</span></h4><pre data-language=\"latex\" id=\"ImIjE\" class=\"ne-codeblock language-latex\">HEAD /index.html</pre><h3 id=\"QX6KZ\"><span class=\"ne-text\">PUT</span></h3><p id=\"u557b41d6\" class=\"ne-p\"><span class=\"ne-text\">HTTP PUT 请求方法使用请求中的负载创建或者替换目标资源。</span></p><p id=\"u5afdf114\" class=\"ne-p\"><span class=\"ne-text\">PUT 与 </span><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/POST\" data-href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/POST\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">POST</span></a><span class=\"ne-text\"> 方法的区别在于，PUT 方法是幂等的：调用一次与连续调用多次是等价的（即没有副作用），而连续调用多次 POST 方法可能会有副作用，比如将一个订单重复提交多次。</span></p><h4 id=\"FFmPo\"><span class=\"ne-text\">例子</span></h4><h5 id=\"XNFtl\"><span class=\"ne-text\">请求</span></h5><pre data-language=\"latex\" id=\"ulG0Z\" class=\"ne-codeblock language-latex\">PUT /new.html HTTP/1.1\nHost: example.com\nContent-type: text/html\nContent-length: 16\n\n&lt;p&gt;New File&lt;/p&gt;</pre><h5 id=\"DT2jH\"><span class=\"ne-text\">响应</span></h5><p id=\"u0e22b343\" class=\"ne-p\"><span class=\"ne-text\">如果目标资源不存在，并且 PUT 方法成功创建了一份，那么源头服务器必须返回</span><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/201\" data-href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/201\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">201</span></a><span class=\"ne-text\"> (Created) 来通知客户端资源已创建。</span></p><pre data-language=\"latex\" id=\"HGgMr\" class=\"ne-codeblock language-latex\">HTTP/1.1 201 Created\nContent-Location: /new.html</pre><p id=\"ue6662e5e\" class=\"ne-p\"><span class=\"ne-text\">如果目标资源已经存在，并且依照请求中封装的表现形式成功进行了更新，那么，源头服务器必须返回</span><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/200\" data-href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/200\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">200</span></a><span class=\"ne-text\"> (OK) 或者</span><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/204\" data-href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/204\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">204</span></a><span class=\"ne-text\"> (No Content) 来表示请求的成功完成。</span></p><pre data-language=\"latex\" id=\"jDNJl\" class=\"ne-codeblock language-latex\">HTTP/1.1 204 No Content\nContent-Location: /existing.html</pre><h3 id=\"QonXS\"><span class=\"ne-text\">DELETE</span></h3><p id=\"u8e4cbbac\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(0, 0, 0)\">DELETE 方法删除指定的资源。</span></p><h4 id=\"aye5L\"><span class=\"ne-text\" style=\"color: rgb(0, 0, 0)\">例子</span></h4><h5 id=\"doXt2\"><span class=\"ne-text\">请求</span></h5><pre data-language=\"plain\" id=\"flxOZ\" class=\"ne-codeblock language-plain\">DELETE /file.html HTTP/1.1</pre><h5 id=\"EnXAy\"><span class=\"ne-text\">响应</span></h5><ul class=\"ne-ul\"><li id=\"u28f79892\"><span class=\"ne-text\">如果 DELETE 方法成功执行，那么可能会有以下几种状态码：</span></li></ul><ul class=\"ne-list-wrap\"><ul ne-level=\"1\" class=\"ne-ul\"><li id=\"uac78191a\"><span class=\"ne-text\">状态码</span><span class=\"ne-text\"> </span><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/202\" data-href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/202\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">202</span></a><span class=\"ne-text\"> </span><span class=\"ne-text\">(</span><span class=\"ne-text\">Accepted</span><span class=\"ne-text\">) 表示请求的操作可能会成功执行，但是尚未开始执行。</span></li><li id=\"uda20b3cf\"><span class=\"ne-text\">状态码</span><span class=\"ne-text\"> </span><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/204\" data-href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/204\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">204</span></a><span class=\"ne-text\"> </span><span class=\"ne-text\">(</span><span class=\"ne-text\">No Content</span><span class=\"ne-text\">) 表示操作已执行，但是无进一步的相关信息。</span></li><li id=\"u4e2a95b8\"><span class=\"ne-text\">状态码 </span><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/200\" data-href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/200\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">200</span></a><span class=\"ne-text\"> (OK) 表示操作已执行，并且响应中提供了相关状态的描述信息。</span></li></ul></ul><pre data-language=\"html\" id=\"D62Lz\" class=\"ne-codeblock language-html\">HTTP/1.1 200 OK\nDate: Wed, 21 Oct 2015 07:28:00 GMT\n\n&lt;html&gt;\n  &lt;body&gt;\n    &lt;h1&gt;File deleted.&lt;/h1&gt;\n  &lt;/body&gt;\n&lt;/html&gt;</pre><h3 id=\"pRanL\"><span class=\"ne-text\" style=\"color: rgb(0, 0, 0)\">PATCH</span></h3><p id=\"u1ff76231\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(0, 0, 0)\">PATCH 方法用于对资源应用部分修改。</span></p><div data-type=\"tips\" class=\"ne-alert\"><p id=\"ubd162fb4\" class=\"ne-p\"><span class=\"ne-text\">在 HTTP 协议中，请求方法 PATCH 用于对资源进行部分修改。</span></p><p id=\"u1bd451f4\" class=\"ne-p\"><span class=\"ne-text\">在 HTTP 协议中，</span><span class=\"ne-text\"> </span><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/PUT\" data-href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/PUT\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">PUT</span></a><span class=\"ne-text\"> </span><span class=\"ne-text\">方法已经被用来表示对资源进行整体覆盖， 而</span><span class=\"ne-text\"> </span><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/POST\" data-href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/POST\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">POST</span></a><span class=\"ne-text\"> </span><span class=\"ne-text\">方法则没有对标准的补丁格式的提供支持。不同于</span><span class=\"ne-text\"> </span><span class=\"ne-text\">PUT</span><span class=\"ne-text\"> </span><span class=\"ne-text\">方法，而与</span><span class=\"ne-text\"> </span><span class=\"ne-text\">POST</span><span class=\"ne-text\"> </span><span class=\"ne-text\">方法类似，</span><span class=\"ne-text\">PATCH</span><span class=\"ne-text\"> </span><span class=\"ne-text\">方法是非幂等的，这就意味着连续多个的相同请求会产生不同的效果。</span></p><p id=\"ub77cc28d\" class=\"ne-p\"><span class=\"ne-text\">要判断一台服务器是否支持</span><span class=\"ne-text\"> </span><span class=\"ne-text\">PATCH</span><span class=\"ne-text\"> </span><span class=\"ne-text\">方法，那么就看它是否将其添加到了响应首部</span><span class=\"ne-text\"> </span><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Allow\" data-href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Allow\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">Allow</span></a><span class=\"ne-text\"> </span><span class=\"ne-text\">或者</span><span class=\"ne-text\"> </span><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Access-Control-Allow-Methods\" data-href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Access-Control-Allow-Methods\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">Access-Control-Allow-Methods</span></a><span class=\"ne-text\">（在跨域访问的场合，CORS）的方法列表中 。</span></p><p id=\"u808b1cf1\" class=\"ne-p\"><span class=\"ne-text\">另外一个支持 PATCH 方法的隐含迹象是 </span><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Accept-Patch\" data-href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Accept-Patch\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">Accept-Patch</span></a><span class=\"ne-text\"> 首部的出现，这个首部明确了服务器端可以接受的补丁文件的格式。</span></p></div><h4 id=\"fzDyJ\"><span class=\"ne-text\" style=\"color: rgb(0, 0, 0)\">例子</span></h4><h5 id=\"XUjMx\"><span class=\"ne-text\">请求</span></h5><pre data-language=\"latex\" id=\"Y33il\" class=\"ne-codeblock language-latex\">PATCH /file.txt HTTP/1.1\nHost: www.example.com\nContent-Type: application/example\nIf-Match: &quot;e0023aa4e&quot;\nContent-Length: 100\n\n[description of changes]</pre><h5 id=\"e4z7T\"><span class=\"ne-text\" style=\"color: rgb(0, 0, 0)\">响应</span></h5><p id=\"ue5734f26\" class=\"ne-p\"><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/204\" data-href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/204\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">204</span></a><span class=\"ne-text\"> 状态码表示这是一个操作成功的响应，因为响应中不带有消息主体。</span></p><pre data-language=\"latex\" id=\"kYZf8\" class=\"ne-codeblock language-latex\">HTTP/1.1 204 No Content\nContent-Location: /file.txt\nETag: &quot;e0023aa4f&quot;</pre><h3 id=\"Wby7B\"><span class=\"ne-text\">OPTIONS</span></h3><p id=\"uc861e355\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(0, 0, 0)\">OPTIONS 方法描述了目标资源的通信选项。</span></p><div data-type=\"tips\" class=\"ne-alert\"><p id=\"ufbd5d9d6\" class=\"ne-p\"><span class=\"ne-text\">HTTP 的 OPTIONS 方法用于获取目的资源所支持的通信选项。客户端可以对特定的 URL 使用 OPTIONS 方法，也可以对整站（通过将 URL 设置为“*”）使用该方法。</span></p></div><h4 id=\"i4K2g\"><span class=\"ne-text\" style=\"color: rgb(0, 0, 0)\">例子</span></h4><h5 id=\"z4voM\"><span class=\"ne-text\">检测服务器所支持的请求方法</span></h5><p id=\"ud1fa5957\" class=\"ne-p\"><span class=\"ne-text\">可以使用 OPTIONS 方法对服务器发起请求，以检测服务器支持哪些 HTTP 方法：</span></p><pre data-language=\"latex\" id=\"BwiWX\" class=\"ne-codeblock language-latex\">curl -X OPTIONS http://example.org -i</pre><p id=\"ube6656f0\" class=\"ne-p\"><span class=\"ne-text\">响应报文包含一个 </span><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Allow\" data-href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Allow\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">Allow</span></a><span class=\"ne-text\"> 首部字段，该字段的值表明了服务器支持的所有 HTTP 方法：</span></p><pre data-language=\"latex\" id=\"BA5jT\" class=\"ne-codeblock language-latex\">HTTP/1.1 200 OK\nAllow: OPTIONS, GET, HEAD, POST\nCache-Control: max-age=604800\nDate: Thu, 13 Oct 2016 11:45:00 GMT\nExpires: Thu, 20 Oct 2016 11:45:00 GMT\nServer: EOS (lax004/2813)\nx-ec-custom-error: 1\nContent-Length: 0</pre><h5 id=\"xmG9T\"><span class=\"ne-text\" style=\"color: rgb(0, 0, 0)\">CORS 中的预检请求</span></h5><p id=\"ufa27b92b\" class=\"ne-p\"><span class=\"ne-text\">在 </span><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CORS\" data-href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CORS\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">CORS</span></a><span class=\"ne-text\"> 中，可以使用 OPTIONS 方法发起一个预检请求，以检测实际请求是否可以被服务器所接受。预检请求报文中的 </span><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Access-Control-Request-Method\" data-href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Access-Control-Request-Method\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">Access-Control-Request-Method</span></a><span class=\"ne-text\"> 首部字段告知服务器实际请求所使用的 HTTP 方法；</span><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Access-Control-Request-Headers\" data-href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Access-Control-Request-Headers\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">Access-Control-Request-Headers</span></a><span class=\"ne-text\"> 首部字段告知服务器实际请求所携带的自定义首部字段。服务器基于从预检请求获得的信息来判断，是否接受接下来的实际请求。</span></p><pre data-language=\"latex\" id=\"ZOigD\" class=\"ne-codeblock language-latex\">OPTIONS /resources/post-here/ HTTP/1.1\nHost: bar.other\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\nAccept-Language: en-us,en;q=0.5\nAccept-Encoding: gzip,deflate\nAccept-Charset: ISO-8859-1,utf-8;q=0.7,*;q=0.7\nConnection: keep-alive\nOrigin: http://foo.example\nAccess-Control-Request-Method: POST\nAccess-Control-Request-Headers: X-PINGOTHER, Content-Type</pre><p id=\"ue1a4bdd2\" class=\"ne-p\"><span class=\"ne-text\">服务器所返回的 </span><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Access-Control-Allow-Methods\" data-href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Access-Control-Allow-Methods\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">Access-Control-Allow-Methods</span></a><span class=\"ne-text\"> 首部字段将所有允许的请求方法告知客户端。该首部字段与 </span><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Allow\" data-href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Allow\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">Allow</span></a><span class=\"ne-text\"> 类似，但只能用于涉及到 CORS 的场景中。</span></p><pre data-language=\"latex\" id=\"ZCBtf\" class=\"ne-codeblock language-latex\">HTTP/1.1 200 OK\nDate: Mon, 01 Dec 2008 01:15:39 GMT\nServer: Apache/2.0.61 (Unix)\nAccess-Control-Allow-Origin: http://foo.example\nAccess-Control-Allow-Methods: POST, GET, OPTIONS\nAccess-Control-Allow-Headers: X-PINGOTHER, Content-Type\nAccess-Control-Max-Age: 86400\nVary: Accept-Encoding, Origin\nContent-Encoding: gzip\nContent-Length: 0\nKeep-Alive: timeout=2, max=100\nConnection: Keep-Alive\nContent-Type: text/plain</pre><h3 id=\"XzBQK\"><span class=\"ne-text\" style=\"color: rgb(0, 0, 0)\">CONNECT</span></h3><p id=\"u5d51cc36\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(0, 0, 0)\">CONNECT 方法用于启动与请求资源的双向通信（隧道）。</span></p><div data-type=\"tips\" class=\"ne-alert\"><p id=\"u2310b6a9\" class=\"ne-p\"><span class=\"ne-text\">在 HTTP 协议中，CONNECT 方法可以开启一个客户端与所请求资源之间的双向沟通的通道。它可以用来创建隧道（tunnel）。</span></p><p id=\"u021b9c81\" class=\"ne-p\"><span class=\"ne-text\">例如，CONNECT 可以用来访问采用了 </span><a href=\"https://developer.mozilla.org/zh-CN/docs/Glossary/SSL\" data-href=\"https://developer.mozilla.org/zh-CN/docs/Glossary/SSL\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">SSL</span></a><span class=\"ne-text\"> (</span><a href=\"https://developer.mozilla.org/zh-CN/docs/Glossary/https\" data-href=\"https://developer.mozilla.org/zh-CN/docs/Glossary/https\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">HTTPS</span></a><span class=\"ne-text\">) 协议的站点。客户端要求代理服务器将 TCP 连接作为通往目的主机隧道。之后该服务器会代替客户端与目的主机建立连接。连接建立好之后，代理服务器会面向客户端发送或接收 TCP 消息流。</span></p><p id=\"udebddbc5\" class=\"ne-p\"><span class=\"ne-text\">CONNECT 是一个应用范围为点到点的方法。</span></p></div><h4 id=\"tdJZp\"><span class=\"ne-text\">例子</span></h4><pre data-language=\"plain\" id=\"bRI7x\" class=\"ne-codeblock language-plain\">CONNECT server.example.com:80 HTTP/1.1\nHost: server.example.com:80\nProxy-Authorization: basic aGVsbG86d29ybGQ=</pre><h3 id=\"qDU4y\"><span class=\"ne-text\">TRACE</span></h3><p id=\"u1f9a6945\" class=\"ne-p\"><span class=\"ne-text\">HTTP TRACE 方法 实现沿通向目标资源的路径的消息环回（loop-back）测试 ，提供了一种实用的 debug 机制。</span></p><p id=\"ua2736b8b\" class=\"ne-p\"><span class=\"ne-text\">请求的最终接收者应当原样反射（reflect）它接收到的消息，除了以下字段部分，作为一个</span><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Content-Type\" data-href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Content-Type\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">Content-Type</span></a><span class=\"ne-text\"> </span><span class=\"ne-text\">为</span><span class=\"ne-text\"> </span><span class=\"ne-text\">message/http</span><span class=\"ne-text\"> </span><span class=\"ne-text\">的 200（OK）响应的消息的主体（body）返回给客户端 。</span></p><p id=\"ua5c0b8e2\" class=\"ne-p\"><span class=\"ne-text\">最终接收者是指初始（origin）服务器，或者第一个接收到 </span><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Max-Forwards\" data-href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Max-Forwards\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">Max-Forwards</span></a><span class=\"ne-text\"> 值为 0 的请求的服务器。</span></p></div>",
  "body_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"viewport\" content=\"adapt\" /><meta name=\"paragraphSpacing\" content=\"relax\" /><h2 data-lake-id=\"Bo66Q\" id=\"Bo66Q\"><span data-lake-id=\"udd8c3ad8\" id=\"udd8c3ad8\">各个 http 版本所支持的 method</span></h2><table data-lake-id=\"JwLz3\" id=\"JwLz3\" margin=\"true\" width-mode=\"contain\" class=\"lake-table\" style=\"width: 938px\"><colgroup><col width=\"93\"><col width=\"93\"><col width=\"93\"><col width=\"93\"><col width=\"93\"><col width=\"93\"><col width=\"93\"><col width=\"93\"><col width=\"93\"><col width=\"101\"></colgroup><tbody><tr data-lake-id=\"u82422ca0\" id=\"u82422ca0\" style=\"height: 63px\"><td data-lake-id=\"u1f3906e9\" id=\"u1f3906e9\"><p data-lake-id=\"ue72c6bcc\" id=\"ue72c6bcc\"><span data-lake-id=\"uf73ad207\" id=\"uf73ad207\">​</span><br></p></td><td data-lake-id=\"uf16fe04d\" id=\"uf16fe04d\"><p data-lake-id=\"u7b50cfcc\" id=\"u7b50cfcc\"><a href=\"#SCoN1\" data-lake-id=\"u93566947\" id=\"u93566947\"><span data-lake-id=\"ub4d48df9\" id=\"ub4d48df9\">GET</span></a></p></td><td data-lake-id=\"uec0452ce\" id=\"uec0452ce\"><p data-lake-id=\"ua4f4466e\" id=\"ua4f4466e\"><a href=\"#fpM3o\" data-lake-id=\"u156e19b7\" id=\"u156e19b7\"><span data-lake-id=\"ud3112a78\" id=\"ud3112a78\">POST</span></a></p></td><td data-lake-id=\"ued130928\" id=\"ued130928\"><p data-lake-id=\"u83408db3\" id=\"u83408db3\"><a href=\"#GKUxY\" data-lake-id=\"ue4063b98\" id=\"ue4063b98\"><span data-lake-id=\"u38de469f\" id=\"u38de469f\">HEAD</span></a></p></td><td data-lake-id=\"u664516aa\" id=\"u664516aa\"><p data-lake-id=\"u6c212fa1\" id=\"u6c212fa1\"><a href=\"#QX6KZ\" data-lake-id=\"u33f6dac0\" id=\"u33f6dac0\"><span data-lake-id=\"u8b716ad4\" id=\"u8b716ad4\">PUT</span></a></p></td><td data-lake-id=\"ucba9aa4d\" id=\"ucba9aa4d\"><p data-lake-id=\"u087d3ef7\" id=\"u087d3ef7\"><a href=\"#QonXS\" data-lake-id=\"ud04e0b6f\" id=\"ud04e0b6f\"><span data-lake-id=\"uccdfa072\" id=\"uccdfa072\">DELETE</span></a></p></td><td data-lake-id=\"u27a92dd8\" id=\"u27a92dd8\"><p data-lake-id=\"u4410132d\" id=\"u4410132d\"><a href=\"#pRanL\" data-lake-id=\"u67abd3ee\" id=\"u67abd3ee\"><span data-lake-id=\"u35f47234\" id=\"u35f47234\">PATCH</span></a></p></td><td data-lake-id=\"u7a7dc115\" id=\"u7a7dc115\"><p data-lake-id=\"udb688636\" id=\"udb688636\"><a href=\"#Wby7B\" data-lake-id=\"u9b5b6eeb\" id=\"u9b5b6eeb\"><span data-lake-id=\"u75951508\" id=\"u75951508\">OPTIONS</span></a></p></td><td data-lake-id=\"u9aa3824d\" id=\"u9aa3824d\"><p data-lake-id=\"ubd8a93be\" id=\"ubd8a93be\"><a href=\"#XzBQK\" data-lake-id=\"uea0afd76\" id=\"uea0afd76\"><span data-lake-id=\"u3b336121\" id=\"u3b336121\">CONNECT</span></a></p></td><td data-lake-id=\"u0cc80dac\" id=\"u0cc80dac\"><p data-lake-id=\"u9270fc20\" id=\"u9270fc20\"><a href=\"#qDU4y\" data-lake-id=\"u2e844486\" id=\"u2e844486\"><span data-lake-id=\"u3b16322d\" id=\"u3b16322d\">TRACE</span></a></p></td></tr><tr data-lake-id=\"u797a3292\" id=\"u797a3292\"><td data-lake-id=\"u3284b6ec\" id=\"u3284b6ec\"><p data-lake-id=\"uc8baa09a\" id=\"uc8baa09a\"><span data-lake-id=\"ue91b6556\" id=\"ue91b6556\">http/1.0</span></p></td><td data-lake-id=\"uafe20209\" id=\"uafe20209\"><p data-lake-id=\"ubf6d2c46\" id=\"ubf6d2c46\"><span data-lake-id=\"u2ae4c360\" id=\"u2ae4c360\">✅</span></p></td><td data-lake-id=\"ud5763b61\" id=\"ud5763b61\"><p data-lake-id=\"ueb231fb8\" id=\"ueb231fb8\"><span data-lake-id=\"u68651bc3\" id=\"u68651bc3\">✅</span></p></td><td data-lake-id=\"u9e2d3a85\" id=\"u9e2d3a85\"><p data-lake-id=\"u3300aa7e\" id=\"u3300aa7e\"><span data-lake-id=\"u40824fdb\" id=\"u40824fdb\">✅</span></p></td><td data-lake-id=\"u559e2fe9\" id=\"u559e2fe9\"><p data-lake-id=\"uc121befd\" id=\"uc121befd\"><span data-lake-id=\"ube6696e4\" id=\"ube6696e4\">❌</span></p></td><td data-lake-id=\"ufd357a36\" id=\"ufd357a36\"><p data-lake-id=\"u568b0cdc\" id=\"u568b0cdc\"><span data-lake-id=\"u76beb84f\" id=\"u76beb84f\">❌</span></p></td><td data-lake-id=\"u492940cc\" id=\"u492940cc\"><p data-lake-id=\"uf7552758\" id=\"uf7552758\"><span data-lake-id=\"ue1e0b86e\" id=\"ue1e0b86e\">❌</span></p></td><td data-lake-id=\"u05cb10c2\" id=\"u05cb10c2\"><p data-lake-id=\"u06bdb1f6\" id=\"u06bdb1f6\"><span data-lake-id=\"u40c63269\" id=\"u40c63269\">❌</span></p></td><td data-lake-id=\"ubf93328b\" id=\"ubf93328b\"><p data-lake-id=\"u9e550d59\" id=\"u9e550d59\"><span data-lake-id=\"ua19b0ead\" id=\"ua19b0ead\">❌</span></p></td><td data-lake-id=\"ucf624adf\" id=\"ucf624adf\"><p data-lake-id=\"u8bba0d0d\" id=\"u8bba0d0d\"><span data-lake-id=\"u45bdf870\" id=\"u45bdf870\">❌</span></p></td></tr><tr data-lake-id=\"u367a7bb1\" id=\"u367a7bb1\"><td data-lake-id=\"u91c57957\" id=\"u91c57957\"><p data-lake-id=\"u242f64d7\" id=\"u242f64d7\"><span data-lake-id=\"u7a11fda2\" id=\"u7a11fda2\">http/1.1</span></p></td><td data-lake-id=\"uab8d1311\" id=\"uab8d1311\"><p data-lake-id=\"u7d3e2b62\" id=\"u7d3e2b62\"><span data-lake-id=\"u087707bd\" id=\"u087707bd\">✅</span></p></td><td data-lake-id=\"u29f0bab4\" id=\"u29f0bab4\"><p data-lake-id=\"uae12f5f3\" id=\"uae12f5f3\"><span data-lake-id=\"u615f916d\" id=\"u615f916d\">✅</span></p></td><td data-lake-id=\"ub9fe977d\" id=\"ub9fe977d\"><p data-lake-id=\"u37c75949\" id=\"u37c75949\"><span data-lake-id=\"ufe2a9233\" id=\"ufe2a9233\">✅</span></p></td><td data-lake-id=\"u3aac7146\" id=\"u3aac7146\"><p data-lake-id=\"u613189ef\" id=\"u613189ef\"><span data-lake-id=\"u338ea017\" id=\"u338ea017\">✅</span></p></td><td data-lake-id=\"uf61f355e\" id=\"uf61f355e\"><p data-lake-id=\"uaaa3fb56\" id=\"uaaa3fb56\"><span data-lake-id=\"uacc2042a\" id=\"uacc2042a\">✅</span></p></td><td data-lake-id=\"u39e75c99\" id=\"u39e75c99\"><p data-lake-id=\"u20d834f2\" id=\"u20d834f2\"><span data-lake-id=\"u91b6c8d3\" id=\"u91b6c8d3\">✅</span></p></td><td data-lake-id=\"u87a12d40\" id=\"u87a12d40\"><p data-lake-id=\"udece13f9\" id=\"udece13f9\"><span data-lake-id=\"u8d3f4cb5\" id=\"u8d3f4cb5\">✅</span></p></td><td data-lake-id=\"u9f5b6880\" id=\"u9f5b6880\"><p data-lake-id=\"ue75fcea3\" id=\"ue75fcea3\"><span data-lake-id=\"uc8fd1e8e\" id=\"uc8fd1e8e\">✅</span></p></td><td data-lake-id=\"u7bcd894e\" id=\"u7bcd894e\"><p data-lake-id=\"ubdc24fea\" id=\"ubdc24fea\"><span data-lake-id=\"u412cc9da\" id=\"u412cc9da\">✅</span></p></td></tr></tbody></table><h2 data-lake-id=\"cKrGY\" id=\"cKrGY\"><span data-lake-id=\"u3e469f73\" id=\"u3e469f73\">http 各个 method 介绍</span></h2><h3 data-lake-id=\"SCoN1\" id=\"SCoN1\" collapsed=\"true\"><span data-lake-id=\"ucb364a68\" id=\"ucb364a68\">GET</span></h3><p data-lake-id=\"u144ecc2a\" id=\"u144ecc2a\"><span data-lake-id=\"u27b64f19\" id=\"u27b64f19\">HTTP GET 方法请求指定的资源。使用 GET 的请求应该只用于获取数据。</span></p><h3 data-lake-id=\"fpM3o\" id=\"fpM3o\" collapsed=\"true\"><span data-lake-id=\"u5a0088f8\" id=\"u5a0088f8\">POST</span></h3><p data-lake-id=\"u94667901\" id=\"u94667901\"><span data-lake-id=\"uffb0a44d\" id=\"uffb0a44d\">HTTP POST 方法 发送数据给服务器。请求主体的类型由 </span><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Content-Type\" target=\"_blank\" data-lake-id=\"u3aec351b\" id=\"u3aec351b\"><span data-lake-id=\"u473f6924\" id=\"u473f6924\">Content-Type</span></a><span data-lake-id=\"ua479aaa6\" id=\"ua479aaa6\"> 首部指定。</span></p><p data-lake-id=\"u98e5bd61\" id=\"u98e5bd61\"><span data-lake-id=\"u84dc2798\" id=\"u84dc2798\">PUT 和</span><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/POST\" target=\"_blank\" data-lake-id=\"u92ea794e\" id=\"u92ea794e\"><span data-lake-id=\"ub2d4ded6\" id=\"ub2d4ded6\">POST</span></a><span data-lake-id=\"uf87077c1\" id=\"uf87077c1\">方法的区别是，PUT 方法是幂等的：连续调用一次或者多次的效果相同（无副作用）。连续调用同一个 POST 可能会带来额外的影响，比如多次提交订单。</span></p><p data-lake-id=\"u7fe1dbe0\" id=\"u7fe1dbe0\"><span data-lake-id=\"u7dff0dc3\" id=\"u7dff0dc3\">一个</span><span data-lake-id=\"u7cceff0b\" id=\"u7cceff0b\"> </span><span data-lake-id=\"u7221ee93\" id=\"u7221ee93\">POST</span><span data-lake-id=\"u91bfc3a2\" id=\"u91bfc3a2\"> </span><span data-lake-id=\"u8421ada0\" id=\"u8421ada0\">请求通常是通过</span><span data-lake-id=\"ub76748e6\" id=\"ub76748e6\"> </span><a href=\"https://developer.mozilla.org/en-US/docs/Learn/Forms\" target=\"_blank\" data-lake-id=\"ue7704ed2\" id=\"ue7704ed2\"><span data-lake-id=\"u3a318b86\" id=\"u3a318b86\">HTML 表单</span></a><span data-lake-id=\"ua3b873bb\" id=\"ua3b873bb\">发送，并返回服务器的修改结果。在这种情况下，content type 是通过在</span><span data-lake-id=\"ubf2fe6af\" id=\"ubf2fe6af\"> </span><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/form\" target=\"_blank\" data-lake-id=\"u57bf7817\" id=\"u57bf7817\"><span data-lake-id=\"uab6e5c4a\" id=\"uab6e5c4a\">&lt;form&gt;</span></a><span data-lake-id=\"u60f6d713\" id=\"u60f6d713\"> </span><span data-lake-id=\"ua605ba98\" id=\"ua605ba98\">元素中设置正确的</span><span data-lake-id=\"u7393832c\" id=\"u7393832c\"> </span><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/form#attr-enctype\" target=\"_blank\" data-lake-id=\"u76aa1e21\" id=\"u76aa1e21\"><span data-lake-id=\"u53cb009c\" id=\"u53cb009c\">enctype</span></a><span data-lake-id=\"u791a17a0\" id=\"u791a17a0\"> </span><span data-lake-id=\"u3ed69741\" id=\"u3ed69741\">属性，或是在</span><span data-lake-id=\"u14463410\" id=\"u14463410\"> </span><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/Input\" target=\"_blank\" data-lake-id=\"u53bfaf5b\" id=\"u53bfaf5b\"><span data-lake-id=\"ue3aa74fb\" id=\"ue3aa74fb\">&lt;input&gt;</span></a><span data-lake-id=\"u9e78efd8\" id=\"u9e78efd8\"> </span><span data-lake-id=\"u6e835b1a\" id=\"u6e835b1a\">和</span><span data-lake-id=\"u5744663f\" id=\"u5744663f\"> </span><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/button\" target=\"_blank\" data-lake-id=\"uc7efb2d8\" id=\"uc7efb2d8\"><span data-lake-id=\"u08a0d165\" id=\"u08a0d165\">&lt;button&gt;</span></a><span data-lake-id=\"ue573c4f0\" id=\"ue573c4f0\"> </span><span data-lake-id=\"u9c7534f7\" id=\"u9c7534f7\">元素中设置</span><span data-lake-id=\"ubf30feed\" id=\"ubf30feed\"> </span><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/Input#attr-formenctype\" target=\"_blank\" data-lake-id=\"ud5caf538\" id=\"ud5caf538\"><span data-lake-id=\"u81af3fb6\" id=\"u81af3fb6\">formenctype</span></a><span data-lake-id=\"uafc8610e\" id=\"uafc8610e\"> </span><span data-lake-id=\"ud39d29f4\" id=\"ud39d29f4\">属性来选择的</span><span data-lake-id=\"u642024e0\" id=\"u642024e0\">:</span></p><ul list=\"u3d2f9709\"><li fid=\"u358b373f\" data-lake-id=\"u416a2982\" id=\"u416a2982\"><span data-lake-id=\"u961e8646\" id=\"u961e8646\">application/</span><span data-lake-id=\"u614f9143\" id=\"u614f9143\">x-www-form-urlencoded</span><span data-lake-id=\"u94761629\" id=\"u94761629\">: 数据被编码成以</span><span data-lake-id=\"u733a5769\" id=\"u733a5769\"> </span><span data-lake-id=\"u47ae9450\" id=\"u47ae9450\">'&amp;'</span><span data-lake-id=\"ucee359f8\" id=\"ucee359f8\"> </span><span data-lake-id=\"ucc92c917\" id=\"ucc92c917\">分隔的键 - 值对，同时以</span><span data-lake-id=\"ue730e3fb\" id=\"ue730e3fb\"> </span><span data-lake-id=\"u05f898b9\" id=\"u05f898b9\">'='</span><span data-lake-id=\"ub347f7f9\" id=\"ub347f7f9\"> </span><span data-lake-id=\"u0e1f280d\" id=\"u0e1f280d\">分隔键和值。非字母或数字的字符会被</span><span data-lake-id=\"u808372b2\" id=\"u808372b2\"> </span><a href=\"https://developer.mozilla.org/zh-CN/docs/Glossary/percent-encoding\" target=\"_blank\" data-lake-id=\"u21d46ba3\" id=\"u21d46ba3\"><span data-lake-id=\"u4d848a08\" id=\"u4d848a08\">percent-encoding</span></a><span data-lake-id=\"ue2407819\" id=\"ue2407819\">: 这也就是为什么这种类型不支持二进制数据 (应使用</span><span data-lake-id=\"u817c8e16\" id=\"u817c8e16\"> </span><span data-lake-id=\"u18460520\" id=\"u18460520\">multipart/form-data</span><span data-lake-id=\"u79f9030c\" id=\"u79f9030c\"> </span><span data-lake-id=\"u0c5d1ae5\" id=\"u0c5d1ae5\">代替).</span></li><li fid=\"u358b373f\" data-lake-id=\"uf54c493b\" id=\"uf54c493b\"><span data-lake-id=\"uc84ca810\" id=\"uc84ca810\">multipart/form-data</span></li><li fid=\"u358b373f\" data-lake-id=\"ue88b1990\" id=\"ue88b1990\"><span data-lake-id=\"u4ccceaec\" id=\"u4ccceaec\">text/plain</span></li></ul><p data-lake-id=\"u2bb4546d\" id=\"u2bb4546d\"><span data-lake-id=\"u1510f03a\" id=\"u1510f03a\">当 POST 请求是通过除 HTML 表单之外的方式发送时，例如使用</span><span data-lake-id=\"u759fe59c\" id=\"u759fe59c\"> </span><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest\" target=\"_blank\" data-lake-id=\"u252be445\" id=\"u252be445\"><span data-lake-id=\"u8f9d1064\" id=\"u8f9d1064\">XMLHttpRequest</span></a><span data-lake-id=\"udb641f2e\" id=\"udb641f2e\">, 那么请求主体可以是任何类型。按 HTTP 1.1 规范中描述，POST 为了以统一的方法来涵盖以下功能：</span></p><ul list=\"uab8b256d\"><li fid=\"u1fab67fd\" data-lake-id=\"u55611163\" id=\"u55611163\"><span data-lake-id=\"u86150d7c\" id=\"u86150d7c\">注释已有的资源</span></li><li fid=\"u1fab67fd\" data-lake-id=\"u72045431\" id=\"u72045431\"><span data-lake-id=\"u6a268c43\" id=\"u6a268c43\">在公告板，新闻组，邮件列表或类似的文章组中发布消息;</span></li><li fid=\"u1fab67fd\" data-lake-id=\"u236e2ea2\" id=\"u236e2ea2\"><span data-lake-id=\"uad1df87e\" id=\"uad1df87e\">通过注册新增用户;</span></li><li fid=\"u1fab67fd\" data-lake-id=\"u9f296a87\" id=\"u9f296a87\"><span data-lake-id=\"uc6acb615\" id=\"uc6acb615\">向数据处理程序提供一批数据，例如提交一个表单;</span></li><li fid=\"u1fab67fd\" data-lake-id=\"u589fc215\" id=\"u589fc215\"><span data-lake-id=\"u2c5399c8\" id=\"u2c5399c8\">通过追加操作，扩展数据库数据。</span></li></ul><h4 data-lake-id=\"To9Mk\" id=\"To9Mk\"><span data-lake-id=\"u07e3a37a\" id=\"u07e3a37a\">例子</span></h4><p data-lake-id=\"ud013dc25\" id=\"ud013dc25\"><span data-lake-id=\"u13815d50\" id=\"u13815d50\">使用默认的 application/x-www-form-urlencoded 做为 content type 的简单表单：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22latex%22%2C%22code%22%3A%22POST%20%2F%20HTTP%2F1.1%5CnHost%3A%20foo.com%5CnContent-Type%3A%20application%2Fx-www-form-urlencoded%5CnContent-Length%3A%2013%5Cn%5Cnsay%3DHi%26to%3DMom%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22ELc1w%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u559c1f18\" id=\"u559c1f18\"><span data-lake-id=\"u1f89d782\" id=\"u1f89d782\">使用 multipart/form-data 作为 content type 的表单：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22plain%22%2C%22code%22%3A%22POST%20%2Ftest.html%20HTTP%2F1.1%5CnHost%3A%20example.org%5CnContent-Type%3A%20multipart%2Fform-data%3Bboundary%3D%5C%22boundary%5C%22%5Cn%5Cn--boundary%5CnContent-Disposition%3A%20form-data%3B%20name%3D%5C%22field1%5C%22%5Cn%5Cnvalue1%5Cn--boundary%5CnContent-Disposition%3A%20form-data%3B%20name%3D%5C%22field2%5C%22%3B%20filename%3D%5C%22example.txt%5C%22%5Cn%5Cnvalue2%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22Bsq4W%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h3 data-lake-id=\"GKUxY\" id=\"GKUxY\" collapsed=\"true\"><span data-lake-id=\"uce456857\" id=\"uce456857\">HEAD</span></h3><p data-lake-id=\"udbb501b3\" id=\"udbb501b3\"><span data-lake-id=\"u19ed4974\" id=\"u19ed4974\">HEAD 几乎与 GET 相同，但没有响应正文。</span></p><p data-lake-id=\"ua3f3a213\" id=\"ua3f3a213\"><span data-lake-id=\"uf2f29390\" id=\"uf2f29390\">换句话说，如果 GET /users 返回用户列表，那么 HEAD /users 将发出相同的请求，但不会返回用户列表。</span></p><p data-lake-id=\"ue904f69d\" id=\"ue904f69d\"><span data-lake-id=\"u0cda03e0\" id=\"u0cda03e0\">HEAD 请求对于在实际发出 GET 请求之前检查 GET 请求将返回的内容很有用——比如在下载大文件或响应正文之前。</span></p><blockquote data-lake-id=\"u1dd34b68\" id=\"u1dd34b68\" class=\"lake-alert lake-alert-tips\"><p data-lake-id=\"ub2c60042\" id=\"ub2c60042\"><span data-lake-id=\"u90833b16\" id=\"u90833b16\">HTTP HEAD 方法请求资源的头部信息，并且这些头部与 HTTP </span><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/GET\" target=\"_blank\" data-lake-id=\"u0bcc95f8\" id=\"u0bcc95f8\"><span data-lake-id=\"ucadd02ad\" id=\"ucadd02ad\">GET</span></a><span data-lake-id=\"u061f39a4\" id=\"u061f39a4\"> 方法请求时返回的一致。该请求方法的一个使用场景是在下载一个大文件前先获取其大小再决定是否要下载，以此可以节约带宽资源。</span></p><p data-lake-id=\"u6552048d\" id=\"u6552048d\"><span data-lake-id=\"ud77d79fb\" id=\"ud77d79fb\">HEAD</span><span data-lake-id=\"uf3679d2a\" id=\"uf3679d2a\"> </span><span data-lake-id=\"u53f7397a\" id=\"u53f7397a\">方法的响应不应包含响应正文。即使包含了正文也必须忽略掉. 虽然描述正文信息的</span><span data-lake-id=\"u4ff354f3\" id=\"u4ff354f3\"> </span><a href=\"https://developer.mozilla.org/zh-CN/docs/Glossary/Entity_header\" target=\"_blank\" data-lake-id=\"u6976a604\" id=\"u6976a604\"><span data-lake-id=\"uce72cfb8\" id=\"uce72cfb8\">entity headers</span></a><span data-lake-id=\"uc932c74e\" id=\"uc932c74e\">, 例如</span><span data-lake-id=\"u75ec75dd\" id=\"u75ec75dd\"> </span><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Content-Length\" target=\"_blank\" data-lake-id=\"u7b083bec\" id=\"u7b083bec\"><span data-lake-id=\"u74a4d0e7\" id=\"u74a4d0e7\">Content-Length</span></a><span data-lake-id=\"u307f430f\" id=\"u307f430f\"> </span><span data-lake-id=\"u6b4156b7\" id=\"u6b4156b7\">可能会包含在响应中，但它们并不是用来描述</span><span data-lake-id=\"uced74e6e\" id=\"uced74e6e\"> </span><span data-lake-id=\"u6e8e00d0\" id=\"u6e8e00d0\">HEAD</span><span data-lake-id=\"u0c0a68bf\" id=\"u0c0a68bf\"> </span><span data-lake-id=\"uf69bc855\" id=\"uf69bc855\">响应本身的，而是用来描述同样情况下的</span><span data-lake-id=\"u5dd99c0f\" id=\"u5dd99c0f\"> </span><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/GET\" target=\"_blank\" data-lake-id=\"u851a1830\" id=\"u851a1830\"><span data-lake-id=\"uccb3d593\" id=\"uccb3d593\">GET</span></a><span data-lake-id=\"u579b9f0f\" id=\"u579b9f0f\"> </span><span data-lake-id=\"u89d64f1f\" id=\"u89d64f1f\">请求应该返回的响应。</span></p><p data-lake-id=\"u5e08ad31\" id=\"u5e08ad31\"><span data-lake-id=\"u8da92ce2\" id=\"u8da92ce2\">如果 HEAD 请求的结果显示在上一次 </span><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/GET\" target=\"_blank\" data-lake-id=\"u43c01d41\" id=\"u43c01d41\"><span data-lake-id=\"u5eda9a88\" id=\"u5eda9a88\">GET</span></a><span data-lake-id=\"u9d9f6852\" id=\"u9d9f6852\"> 请求后缓存的资源已经过期了，即使没有发出</span><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/GET\" target=\"_blank\" data-lake-id=\"u3639aea6\" id=\"u3639aea6\"><span data-lake-id=\"uafe3031d\" id=\"uafe3031d\">GET</span></a><span data-lake-id=\"u193791da\" id=\"u193791da\">请求，缓存也会失效</span></p></blockquote><h4 data-lake-id=\"fmoX9\" id=\"fmoX9\"><span data-lake-id=\"uc9cf7d91\" id=\"uc9cf7d91\">例子</span></h4><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22latex%22%2C%22code%22%3A%22HEAD%20%2Findex.html%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22ImIjE%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h3 data-lake-id=\"QX6KZ\" id=\"QX6KZ\" collapsed=\"true\"><span data-lake-id=\"u9d86ad74\" id=\"u9d86ad74\">PUT</span></h3><p data-lake-id=\"u557b41d6\" id=\"u557b41d6\"><span data-lake-id=\"ub86bfb4d\" id=\"ub86bfb4d\">HTTP PUT 请求方法使用请求中的负载创建或者替换目标资源。</span></p><p data-lake-id=\"u5afdf114\" id=\"u5afdf114\"><span data-lake-id=\"u7980e489\" id=\"u7980e489\">PUT 与 </span><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/POST\" target=\"_blank\" data-lake-id=\"u9f1e3ad7\" id=\"u9f1e3ad7\"><span data-lake-id=\"u7fdfc1bf\" id=\"u7fdfc1bf\">POST</span></a><span data-lake-id=\"ua69af8c4\" id=\"ua69af8c4\"> 方法的区别在于，PUT 方法是幂等的：调用一次与连续调用多次是等价的（即没有副作用），而连续调用多次 POST 方法可能会有副作用，比如将一个订单重复提交多次。</span></p><h4 data-lake-id=\"FFmPo\" id=\"FFmPo\"><span data-lake-id=\"u18512b50\" id=\"u18512b50\">例子</span></h4><h5 data-lake-id=\"XNFtl\" id=\"XNFtl\"><span data-lake-id=\"u77d212c0\" id=\"u77d212c0\">请求</span></h5><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22latex%22%2C%22code%22%3A%22PUT%20%2Fnew.html%20HTTP%2F1.1%5CnHost%3A%20example.com%5CnContent-type%3A%20text%2Fhtml%5CnContent-length%3A%2016%5Cn%5Cn%3Cp%3ENew%20File%3C%2Fp%3E%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22ulG0Z%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h5 data-lake-id=\"DT2jH\" id=\"DT2jH\"><span data-lake-id=\"u34a729ae\" id=\"u34a729ae\">响应</span></h5><p data-lake-id=\"u0e22b343\" id=\"u0e22b343\"><span data-lake-id=\"u389d66c2\" id=\"u389d66c2\">如果目标资源不存在，并且 PUT 方法成功创建了一份，那么源头服务器必须返回</span><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/201\" target=\"_blank\" data-lake-id=\"u422384fa\" id=\"u422384fa\"><span data-lake-id=\"u4ae0df69\" id=\"u4ae0df69\">201</span></a><span data-lake-id=\"u1f5745f5\" id=\"u1f5745f5\"> (Created) 来通知客户端资源已创建。</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22latex%22%2C%22code%22%3A%22HTTP%2F1.1%20201%20Created%5CnContent-Location%3A%20%2Fnew.html%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22HGgMr%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"ue6662e5e\" id=\"ue6662e5e\"><span data-lake-id=\"ua6b31ef2\" id=\"ua6b31ef2\">如果目标资源已经存在，并且依照请求中封装的表现形式成功进行了更新，那么，源头服务器必须返回</span><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/200\" target=\"_blank\" data-lake-id=\"uea529d72\" id=\"uea529d72\"><span data-lake-id=\"ub603edb3\" id=\"ub603edb3\">200</span></a><span data-lake-id=\"u59eb7518\" id=\"u59eb7518\"> (OK) 或者</span><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/204\" target=\"_blank\" data-lake-id=\"u38d6928d\" id=\"u38d6928d\"><span data-lake-id=\"u961609c7\" id=\"u961609c7\">204</span></a><span data-lake-id=\"u54d70499\" id=\"u54d70499\"> (No Content) 来表示请求的成功完成。</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22latex%22%2C%22code%22%3A%22HTTP%2F1.1%20204%20No%20Content%5CnContent-Location%3A%20%2Fexisting.html%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22jDNJl%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h3 data-lake-id=\"QonXS\" id=\"QonXS\" collapsed=\"true\"><span data-lake-id=\"u727fed5d\" id=\"u727fed5d\">DELETE</span></h3><p data-lake-id=\"u8e4cbbac\" id=\"u8e4cbbac\"><span data-lake-id=\"u3e6e8b44\" id=\"u3e6e8b44\" style=\"color: rgb(0, 0, 0)\">DELETE 方法删除指定的资源。</span></p><h4 data-lake-id=\"aye5L\" id=\"aye5L\"><span data-lake-id=\"uaf2420b2\" id=\"uaf2420b2\" style=\"color: rgb(0, 0, 0)\">例子</span></h4><h5 data-lake-id=\"doXt2\" id=\"doXt2\"><span data-lake-id=\"u3292f572\" id=\"u3292f572\">请求</span></h5><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22plain%22%2C%22code%22%3A%22DELETE%20%2Ffile.html%20HTTP%2F1.1%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22flxOZ%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h5 data-lake-id=\"EnXAy\" id=\"EnXAy\"><span data-lake-id=\"ua78766bc\" id=\"ua78766bc\">响应</span></h5><ul list=\"u48bb7d65\"><li fid=\"u76912524\" data-lake-id=\"u28f79892\" id=\"u28f79892\"><span data-lake-id=\"udbc9f77c\" id=\"udbc9f77c\">如果 DELETE 方法成功执行，那么可能会有以下几种状态码：</span></li></ul><ul list=\"u48bb7d65\" data-lake-indent=\"1\"><li fid=\"u76912524\" data-lake-id=\"uac78191a\" id=\"uac78191a\"><span data-lake-id=\"ub4883c54\" id=\"ub4883c54\">状态码</span><span data-lake-id=\"u14848f7a\" id=\"u14848f7a\"> </span><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/202\" target=\"_blank\" data-lake-id=\"ueb1d1bb2\" id=\"ueb1d1bb2\"><span data-lake-id=\"udb01cec2\" id=\"udb01cec2\">202</span></a><span data-lake-id=\"ub218acf0\" id=\"ub218acf0\"> </span><span data-lake-id=\"uda64316f\" id=\"uda64316f\">(</span><span data-lake-id=\"u9d3aa82d\" id=\"u9d3aa82d\">Accepted</span><span data-lake-id=\"ua8402a54\" id=\"ua8402a54\">) 表示请求的操作可能会成功执行，但是尚未开始执行。</span></li><li fid=\"u76912524\" data-lake-id=\"uda20b3cf\" id=\"uda20b3cf\"><span data-lake-id=\"u51117200\" id=\"u51117200\">状态码</span><span data-lake-id=\"u4f9b55d2\" id=\"u4f9b55d2\"> </span><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/204\" target=\"_blank\" data-lake-id=\"u43765900\" id=\"u43765900\"><span data-lake-id=\"uac534900\" id=\"uac534900\">204</span></a><span data-lake-id=\"uf094964a\" id=\"uf094964a\"> </span><span data-lake-id=\"uc7182ac4\" id=\"uc7182ac4\">(</span><span data-lake-id=\"u64124eb4\" id=\"u64124eb4\">No Content</span><span data-lake-id=\"ue5dfc7a8\" id=\"ue5dfc7a8\">) 表示操作已执行，但是无进一步的相关信息。</span></li><li fid=\"u76912524\" data-lake-id=\"u4e2a95b8\" id=\"u4e2a95b8\"><span data-lake-id=\"uc380dfa7\" id=\"uc380dfa7\">状态码 </span><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/200\" target=\"_blank\" data-lake-id=\"u8f30819c\" id=\"u8f30819c\"><span data-lake-id=\"uf06e4374\" id=\"uf06e4374\">200</span></a><span data-lake-id=\"u76c175ee\" id=\"u76c175ee\"> (OK) 表示操作已执行，并且响应中提供了相关状态的描述信息。</span></li></ul><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22html%22%2C%22code%22%3A%22HTTP%2F1.1%20200%20OK%5CnDate%3A%20Wed%2C%2021%20Oct%202015%2007%3A28%3A00%20GMT%5Cn%5Cn%3Chtml%3E%5Cn%20%20%3Cbody%3E%5Cn%20%20%20%20%3Ch1%3EFile%20deleted.%3C%2Fh1%3E%5Cn%20%20%3C%2Fbody%3E%5Cn%3C%2Fhtml%3E%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22D62Lz%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h3 data-lake-id=\"pRanL\" id=\"pRanL\" collapsed=\"true\"><span data-lake-id=\"ud7648b7e\" id=\"ud7648b7e\" style=\"color: rgb(0, 0, 0)\">PATCH</span></h3><p data-lake-id=\"u1ff76231\" id=\"u1ff76231\"><span data-lake-id=\"ua8a8dd1b\" id=\"ua8a8dd1b\" style=\"color: rgb(0, 0, 0)\">PATCH 方法用于对资源应用部分修改。</span></p><blockquote data-lake-id=\"u4da5e472\" id=\"u4da5e472\" class=\"lake-alert lake-alert-tips\"><p data-lake-id=\"ubd162fb4\" id=\"ubd162fb4\"><span data-lake-id=\"ucde3283a\" id=\"ucde3283a\">在 HTTP 协议中，请求方法 PATCH 用于对资源进行部分修改。</span></p><p data-lake-id=\"u1bd451f4\" id=\"u1bd451f4\"><span data-lake-id=\"ua1ef9073\" id=\"ua1ef9073\">在 HTTP 协议中，</span><span data-lake-id=\"u9a37b203\" id=\"u9a37b203\"> </span><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/PUT\" target=\"_blank\" data-lake-id=\"u276ce964\" id=\"u276ce964\"><span data-lake-id=\"u2959dc71\" id=\"u2959dc71\">PUT</span></a><span data-lake-id=\"u7d4b6a46\" id=\"u7d4b6a46\"> </span><span data-lake-id=\"ua8d5a499\" id=\"ua8d5a499\">方法已经被用来表示对资源进行整体覆盖， 而</span><span data-lake-id=\"u84558c1d\" id=\"u84558c1d\"> </span><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/POST\" target=\"_blank\" data-lake-id=\"u1b07dac3\" id=\"u1b07dac3\"><span data-lake-id=\"ue52ae77c\" id=\"ue52ae77c\">POST</span></a><span data-lake-id=\"u210968b3\" id=\"u210968b3\"> </span><span data-lake-id=\"u4db5ed6d\" id=\"u4db5ed6d\">方法则没有对标准的补丁格式的提供支持。不同于</span><span data-lake-id=\"ub5447133\" id=\"ub5447133\"> </span><span data-lake-id=\"u73560702\" id=\"u73560702\">PUT</span><span data-lake-id=\"u08e690e6\" id=\"u08e690e6\"> </span><span data-lake-id=\"u3b2267bd\" id=\"u3b2267bd\">方法，而与</span><span data-lake-id=\"uadfda3a5\" id=\"uadfda3a5\"> </span><span data-lake-id=\"udaa107e6\" id=\"udaa107e6\">POST</span><span data-lake-id=\"uf62dae0e\" id=\"uf62dae0e\"> </span><span data-lake-id=\"u71112424\" id=\"u71112424\">方法类似，</span><span data-lake-id=\"u04df9318\" id=\"u04df9318\">PATCH</span><span data-lake-id=\"u3dcd8a9c\" id=\"u3dcd8a9c\"> </span><span data-lake-id=\"u57522d0e\" id=\"u57522d0e\">方法是非幂等的，这就意味着连续多个的相同请求会产生不同的效果。</span></p><p data-lake-id=\"ub77cc28d\" id=\"ub77cc28d\"><span data-lake-id=\"u5034fcda\" id=\"u5034fcda\">要判断一台服务器是否支持</span><span data-lake-id=\"ub8255067\" id=\"ub8255067\"> </span><span data-lake-id=\"u5a385c05\" id=\"u5a385c05\">PATCH</span><span data-lake-id=\"u7ae7eb5d\" id=\"u7ae7eb5d\"> </span><span data-lake-id=\"u170f559e\" id=\"u170f559e\">方法，那么就看它是否将其添加到了响应首部</span><span data-lake-id=\"u18503190\" id=\"u18503190\"> </span><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Allow\" target=\"_blank\" data-lake-id=\"u11018e24\" id=\"u11018e24\"><span data-lake-id=\"u2e177e12\" id=\"u2e177e12\">Allow</span></a><span data-lake-id=\"u6bef3ab7\" id=\"u6bef3ab7\"> </span><span data-lake-id=\"ua9a2e9c8\" id=\"ua9a2e9c8\">或者</span><span data-lake-id=\"u7102c8e9\" id=\"u7102c8e9\"> </span><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Access-Control-Allow-Methods\" target=\"_blank\" data-lake-id=\"u49326fc1\" id=\"u49326fc1\"><span data-lake-id=\"u85a69b6b\" id=\"u85a69b6b\">Access-Control-Allow-Methods</span></a><span data-lake-id=\"u8e7aa117\" id=\"u8e7aa117\">（在跨域访问的场合，CORS）的方法列表中 。</span></p><p data-lake-id=\"u808b1cf1\" id=\"u808b1cf1\"><span data-lake-id=\"ud62fcb94\" id=\"ud62fcb94\">另外一个支持 PATCH 方法的隐含迹象是 </span><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Accept-Patch\" target=\"_blank\" data-lake-id=\"ua6e389fc\" id=\"ua6e389fc\"><span data-lake-id=\"uf47cf521\" id=\"uf47cf521\">Accept-Patch</span></a><span data-lake-id=\"u3ba09e40\" id=\"u3ba09e40\"> 首部的出现，这个首部明确了服务器端可以接受的补丁文件的格式。</span></p></blockquote><h4 data-lake-id=\"fzDyJ\" id=\"fzDyJ\"><span data-lake-id=\"uadbefcc5\" id=\"uadbefcc5\" style=\"color: rgb(0, 0, 0)\">例子</span></h4><h5 data-lake-id=\"XUjMx\" id=\"XUjMx\"><span data-lake-id=\"ue05f3d7c\" id=\"ue05f3d7c\">请求</span></h5><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22latex%22%2C%22code%22%3A%22PATCH%20%2Ffile.txt%20HTTP%2F1.1%5CnHost%3A%20www.example.com%5CnContent-Type%3A%20application%2Fexample%5CnIf-Match%3A%20%5C%22e0023aa4e%5C%22%5CnContent-Length%3A%20100%5Cn%5Cn%5Bdescription%20of%20changes%5D%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22Y33il%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h5 data-lake-id=\"e4z7T\" id=\"e4z7T\"><span data-lake-id=\"u29b188d7\" id=\"u29b188d7\" style=\"color: rgb(0, 0, 0)\">响应</span></h5><p data-lake-id=\"ue5734f26\" id=\"ue5734f26\"><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/204\" target=\"_blank\" data-lake-id=\"u4981fb9b\" id=\"u4981fb9b\"><span data-lake-id=\"u2fc0e8b3\" id=\"u2fc0e8b3\">204</span></a><span data-lake-id=\"ue6a53ee8\" id=\"ue6a53ee8\"> 状态码表示这是一个操作成功的响应，因为响应中不带有消息主体。</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22latex%22%2C%22code%22%3A%22HTTP%2F1.1%20204%20No%20Content%5CnContent-Location%3A%20%2Ffile.txt%5CnETag%3A%20%5C%22e0023aa4f%5C%22%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22kYZf8%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h3 data-lake-id=\"Wby7B\" id=\"Wby7B\" collapsed=\"true\"><span data-lake-id=\"u76fe6977\" id=\"u76fe6977\">OPTIONS</span></h3><p data-lake-id=\"uc861e355\" id=\"uc861e355\"><span data-lake-id=\"uf2704afd\" id=\"uf2704afd\" style=\"color: rgb(0, 0, 0)\">OPTIONS 方法描述了目标资源的通信选项。</span></p><blockquote data-lake-id=\"u23ca83a1\" id=\"u23ca83a1\" class=\"lake-alert lake-alert-tips\"><p data-lake-id=\"ufbd5d9d6\" id=\"ufbd5d9d6\"><span data-lake-id=\"ubcc25679\" id=\"ubcc25679\">HTTP 的 OPTIONS 方法用于获取目的资源所支持的通信选项。客户端可以对特定的 URL 使用 OPTIONS 方法，也可以对整站（通过将 URL 设置为“*”）使用该方法。</span></p></blockquote><h4 data-lake-id=\"i4K2g\" id=\"i4K2g\"><span data-lake-id=\"u8693b10e\" id=\"u8693b10e\" style=\"color: rgb(0, 0, 0)\">例子</span></h4><h5 data-lake-id=\"z4voM\" id=\"z4voM\"><span data-lake-id=\"u54ac8084\" id=\"u54ac8084\">检测服务器所支持的请求方法</span></h5><p data-lake-id=\"ud1fa5957\" id=\"ud1fa5957\"><span data-lake-id=\"u1ddc4edf\" id=\"u1ddc4edf\">可以使用 OPTIONS 方法对服务器发起请求，以检测服务器支持哪些 HTTP 方法：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22latex%22%2C%22code%22%3A%22curl%20-X%20OPTIONS%20http%3A%2F%2Fexample.org%20-i%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22BwiWX%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"ube6656f0\" id=\"ube6656f0\"><span data-lake-id=\"u6dc36c72\" id=\"u6dc36c72\">响应报文包含一个 </span><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Allow\" target=\"_blank\" data-lake-id=\"u66d7ee85\" id=\"u66d7ee85\"><span data-lake-id=\"ua9f49f4a\" id=\"ua9f49f4a\">Allow</span></a><span data-lake-id=\"u5cb9c912\" id=\"u5cb9c912\"> 首部字段，该字段的值表明了服务器支持的所有 HTTP 方法：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22latex%22%2C%22code%22%3A%22HTTP%2F1.1%20200%20OK%5CnAllow%3A%20OPTIONS%2C%20GET%2C%20HEAD%2C%20POST%5CnCache-Control%3A%20max-age%3D604800%5CnDate%3A%20Thu%2C%2013%20Oct%202016%2011%3A45%3A00%20GMT%5CnExpires%3A%20Thu%2C%2020%20Oct%202016%2011%3A45%3A00%20GMT%5CnServer%3A%20EOS%20(lax004%2F2813)%5Cnx-ec-custom-error%3A%201%5CnContent-Length%3A%200%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22BA5jT%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h5 data-lake-id=\"xmG9T\" id=\"xmG9T\"><span data-lake-id=\"u3cad7974\" id=\"u3cad7974\" style=\"color: rgb(0, 0, 0)\">CORS 中的预检请求</span></h5><p data-lake-id=\"ufa27b92b\" id=\"ufa27b92b\"><span data-lake-id=\"u02fb7bc1\" id=\"u02fb7bc1\">在 </span><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CORS\" target=\"_blank\" data-lake-id=\"u4e250536\" id=\"u4e250536\"><span data-lake-id=\"ue37bcd3b\" id=\"ue37bcd3b\">CORS</span></a><span data-lake-id=\"u7b9a931c\" id=\"u7b9a931c\"> 中，可以使用 OPTIONS 方法发起一个预检请求，以检测实际请求是否可以被服务器所接受。预检请求报文中的 </span><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Access-Control-Request-Method\" target=\"_blank\" data-lake-id=\"ud4df5891\" id=\"ud4df5891\"><span data-lake-id=\"u6272273c\" id=\"u6272273c\">Access-Control-Request-Method</span></a><span data-lake-id=\"uea8e4451\" id=\"uea8e4451\"> 首部字段告知服务器实际请求所使用的 HTTP 方法；</span><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Access-Control-Request-Headers\" target=\"_blank\" data-lake-id=\"u9f6336b6\" id=\"u9f6336b6\"><span data-lake-id=\"u03cf93d3\" id=\"u03cf93d3\">Access-Control-Request-Headers</span></a><span data-lake-id=\"uc6f9c84f\" id=\"uc6f9c84f\"> 首部字段告知服务器实际请求所携带的自定义首部字段。服务器基于从预检请求获得的信息来判断，是否接受接下来的实际请求。</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22latex%22%2C%22code%22%3A%22OPTIONS%20%2Fresources%2Fpost-here%2F%20HTTP%2F1.1%5CnHost%3A%20bar.other%5CnAccept%3A%20text%2Fhtml%2Capplication%2Fxhtml%2Bxml%2Capplication%2Fxml%3Bq%3D0.9%2C*%2F*%3Bq%3D0.8%5CnAccept-Language%3A%20en-us%2Cen%3Bq%3D0.5%5CnAccept-Encoding%3A%20gzip%2Cdeflate%5CnAccept-Charset%3A%20ISO-8859-1%2Cutf-8%3Bq%3D0.7%2C*%3Bq%3D0.7%5CnConnection%3A%20keep-alive%5CnOrigin%3A%20http%3A%2F%2Ffoo.example%5CnAccess-Control-Request-Method%3A%20POST%5CnAccess-Control-Request-Headers%3A%20X-PINGOTHER%2C%20Content-Type%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22ZOigD%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"ue1a4bdd2\" id=\"ue1a4bdd2\"><span data-lake-id=\"u4216a7f0\" id=\"u4216a7f0\">服务器所返回的 </span><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Access-Control-Allow-Methods\" target=\"_blank\" data-lake-id=\"u38d921e1\" id=\"u38d921e1\"><span data-lake-id=\"uaff9045d\" id=\"uaff9045d\">Access-Control-Allow-Methods</span></a><span data-lake-id=\"u0ebfd58d\" id=\"u0ebfd58d\"> 首部字段将所有允许的请求方法告知客户端。该首部字段与 </span><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Allow\" target=\"_blank\" data-lake-id=\"ue7632671\" id=\"ue7632671\"><span data-lake-id=\"u1566a70a\" id=\"u1566a70a\">Allow</span></a><span data-lake-id=\"ucc213eea\" id=\"ucc213eea\"> 类似，但只能用于涉及到 CORS 的场景中。</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22latex%22%2C%22code%22%3A%22HTTP%2F1.1%20200%20OK%5CnDate%3A%20Mon%2C%2001%20Dec%202008%2001%3A15%3A39%20GMT%5CnServer%3A%20Apache%2F2.0.61%20(Unix)%5CnAccess-Control-Allow-Origin%3A%20http%3A%2F%2Ffoo.example%5CnAccess-Control-Allow-Methods%3A%20POST%2C%20GET%2C%20OPTIONS%5CnAccess-Control-Allow-Headers%3A%20X-PINGOTHER%2C%20Content-Type%5CnAccess-Control-Max-Age%3A%2086400%5CnVary%3A%20Accept-Encoding%2C%20Origin%5CnContent-Encoding%3A%20gzip%5CnContent-Length%3A%200%5CnKeep-Alive%3A%20timeout%3D2%2C%20max%3D100%5CnConnection%3A%20Keep-Alive%5CnContent-Type%3A%20text%2Fplain%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22ZCBtf%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h3 data-lake-id=\"XzBQK\" id=\"XzBQK\" collapsed=\"true\"><span data-lake-id=\"u03946dd8\" id=\"u03946dd8\" style=\"color: rgb(0, 0, 0)\">CONNECT</span></h3><p data-lake-id=\"u5d51cc36\" id=\"u5d51cc36\"><span data-lake-id=\"u5fa43ba3\" id=\"u5fa43ba3\" style=\"color: rgb(0, 0, 0)\">CONNECT 方法用于启动与请求资源的双向通信（隧道）。</span></p><blockquote data-lake-id=\"ufb8da5fb\" id=\"ufb8da5fb\" class=\"lake-alert lake-alert-tips\"><p data-lake-id=\"u2310b6a9\" id=\"u2310b6a9\"><span data-lake-id=\"ub33c8fa1\" id=\"ub33c8fa1\">在 HTTP 协议中，CONNECT 方法可以开启一个客户端与所请求资源之间的双向沟通的通道。它可以用来创建隧道（tunnel）。</span></p><p data-lake-id=\"u021b9c81\" id=\"u021b9c81\"><span data-lake-id=\"u46613c5f\" id=\"u46613c5f\">例如，CONNECT 可以用来访问采用了 </span><a href=\"https://developer.mozilla.org/zh-CN/docs/Glossary/SSL\" target=\"_blank\" data-lake-id=\"ua853083a\" id=\"ua853083a\"><span data-lake-id=\"uaa9b8845\" id=\"uaa9b8845\">SSL</span></a><span data-lake-id=\"u425d5444\" id=\"u425d5444\"> (</span><a href=\"https://developer.mozilla.org/zh-CN/docs/Glossary/https\" target=\"_blank\" data-lake-id=\"u9bb2b8e2\" id=\"u9bb2b8e2\"><span data-lake-id=\"u1731f37c\" id=\"u1731f37c\">HTTPS</span></a><span data-lake-id=\"u663da462\" id=\"u663da462\">) 协议的站点。客户端要求代理服务器将 TCP 连接作为通往目的主机隧道。之后该服务器会代替客户端与目的主机建立连接。连接建立好之后，代理服务器会面向客户端发送或接收 TCP 消息流。</span></p><p data-lake-id=\"udebddbc5\" id=\"udebddbc5\"><span data-lake-id=\"u6bcf34dd\" id=\"u6bcf34dd\">CONNECT 是一个应用范围为点到点的方法。</span></p></blockquote><h4 data-lake-id=\"tdJZp\" id=\"tdJZp\"><span data-lake-id=\"uef91eb5e\" id=\"uef91eb5e\">例子</span></h4><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22plain%22%2C%22code%22%3A%22CONNECT%20server.example.com%3A80%20HTTP%2F1.1%5CnHost%3A%20server.example.com%3A80%5CnProxy-Authorization%3A%20basic%20aGVsbG86d29ybGQ%3D%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22bRI7x%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h3 data-lake-id=\"qDU4y\" id=\"qDU4y\" collapsed=\"true\"><span data-lake-id=\"ua37be89e\" id=\"ua37be89e\">TRACE</span></h3><p data-lake-id=\"u1f9a6945\" id=\"u1f9a6945\"><span data-lake-id=\"ufd7ca68f\" id=\"ufd7ca68f\">HTTP TRACE 方法 实现沿通向目标资源的路径的消息环回（loop-back）测试 ，提供了一种实用的 debug 机制。</span></p><p data-lake-id=\"ua2736b8b\" id=\"ua2736b8b\"><span data-lake-id=\"u64d025f2\" id=\"u64d025f2\">请求的最终接收者应当原样反射（reflect）它接收到的消息，除了以下字段部分，作为一个</span><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Content-Type\" target=\"_blank\" data-lake-id=\"u2076416b\" id=\"u2076416b\"><span data-lake-id=\"ua4f9b8d6\" id=\"ua4f9b8d6\">Content-Type</span></a><span data-lake-id=\"u462c1fa3\" id=\"u462c1fa3\"> </span><span data-lake-id=\"ue6d3f5a3\" id=\"ue6d3f5a3\">为</span><span data-lake-id=\"uf6cb0679\" id=\"uf6cb0679\"> </span><span data-lake-id=\"u2c3562b7\" id=\"u2c3562b7\">message/http</span><span data-lake-id=\"u2caf3a48\" id=\"u2caf3a48\"> </span><span data-lake-id=\"u888839f9\" id=\"u888839f9\">的 200（OK）响应的消息的主体（body）返回给客户端 。</span></p><p data-lake-id=\"ua5c0b8e2\" id=\"ua5c0b8e2\"><span data-lake-id=\"u45d6c2c4\" id=\"u45d6c2c4\">最终接收者是指初始（origin）服务器，或者第一个接收到 </span><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Max-Forwards\" target=\"_blank\" data-lake-id=\"u06e6a544\" id=\"u06e6a544\"><span data-lake-id=\"u3114ed29\" id=\"u3114ed29\">Max-Forwards</span></a><span data-lake-id=\"u0d88d585\" id=\"u0d88d585\"> 值为 0 的请求的服务器。</span></p>",
  "body_draft_lake": "",
  "public": 0,
  "status": 1,
  "view_status": 0,
  "read_status": 1,
  "likes_count": 0,
  "comments_count": 0,
  "content_updated_at": "2022-08-04T03:42:16.000Z",
  "deleted_at": null,
  "created_at": "2022-08-04T03:06:54.000Z",
  "updated_at": "2022-08-04T03:42:16.000Z",
  "published_at": "2022-08-04T03:42:16.000Z",
  "first_published_at": "2022-08-04T03:11:39.850Z",
  "word_count": 2308,
  "cover": null,
  "description": "各个 http 版本所支持的 methodGETPOSTHEADPUTDELETEPATCHOPTIONSCONNECTTRACEhttp/1.0✅✅✅❌❌❌❌❌❌http/1.1✅✅✅✅✅✅✅✅✅http 各个 method 介绍GETHTTP GET 方法请求指定的资源。使用 GET 的请...",
  "custom_description": null,
  "hits": 0,
  "_serializer": "v2.doc_detail"
}