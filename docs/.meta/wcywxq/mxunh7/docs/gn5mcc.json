{
  "id": 81944011,
  "slug": "gn5mcc",
  "title": "lru 缓存机制",
  "book_id": 26225124,
  "book": {
    "id": 26225124,
    "type": "Book",
    "slug": "mxunh7",
    "name": "八股文 eight-part essay writing",
    "user_id": 732231,
    "description": "前端八股文",
    "creator_id": 732231,
    "public": 0,
    "items_count": 239,
    "likes_count": 0,
    "watches_count": 1,
    "content_updated_at": "2023-11-11T18:15:57.023Z",
    "updated_at": "2023-11-11T18:15:57.000Z",
    "created_at": "2022-04-04T11:31:45.000Z",
    "namespace": "wcywxq/mxunh7",
    "user": {
      "id": 732231,
      "type": "User",
      "login": "wcywxq",
      "name": "magic",
      "description": null,
      "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/732231/1606968271774-avatar/886ad88b-d2cc-4c9e-a674-f70eb51a679c.png",
      "books_count": 18,
      "public_books_count": 0,
      "followers_count": 0,
      "following_count": 0,
      "created_at": "2020-01-08T14:21:31.000Z",
      "updated_at": "2023-11-13T09:32:35.000Z",
      "_serializer": "v2.user"
    },
    "_serializer": "v2.book"
  },
  "user_id": 732231,
  "creator": {
    "id": 732231,
    "type": "User",
    "login": "wcywxq",
    "name": "magic",
    "description": null,
    "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/732231/1606968271774-avatar/886ad88b-d2cc-4c9e-a674-f70eb51a679c.png",
    "books_count": 18,
    "public_books_count": 0,
    "followers_count": 0,
    "following_count": 0,
    "created_at": "2020-01-08T14:21:31.000Z",
    "updated_at": "2023-11-13T09:32:35.000Z",
    "_serializer": "v2.user"
  },
  "format": "lake",
  "body": "`LRU` 缓存机制，即采用最近最少使用的缓存策略。它的原则是，如果一个数据最近没有被访问到，那么它将来被访问的几率也很小，也就是说当限定的内存空间已没有其他空间可用时，应该把最久没有访问到的数据去除掉。\n",
  "body_draft": "",
  "body_html": "<!doctype html><div class=\"lake-content\" typography=\"classic\"><p id=\"uf4ca51fd\" class=\"ne-p\"><code class=\"ne-code\"><span class=\"ne-text\" style=\"color: rgb(51, 51, 51); font-size: 16px\">LRU</span></code><span class=\"ne-text\" style=\"color: rgb(51, 51, 51); font-size: 16px\"> 缓存机制，即采用最近最少使用的缓存策略。它的原则是，如果一个数据最近没有被访问到，那么它将来被访问的几率也很小，也就是说当限定的内存空间已没有其他空间可用时，应该把最久没有访问到的数据去除掉。</span></p></div>",
  "body_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"viewport\" content=\"adapt\" /><meta name=\"paragraphSpacing\" content=\"relax\" /><p data-lake-id=\"uf4ca51fd\" id=\"uf4ca51fd\"><code data-lake-id=\"u101ef6da\" id=\"u101ef6da\"><span data-lake-id=\"ue97e70d7\" id=\"ue97e70d7\" class=\"lake-fontsize-12\" style=\"color: rgb(51, 51, 51)\">LRU</span></code><span data-lake-id=\"u1e6ab8d2\" id=\"u1e6ab8d2\" class=\"lake-fontsize-12\" style=\"color: rgb(51, 51, 51)\"> 缓存机制，即采用最近最少使用的缓存策略。它的原则是，如果一个数据最近没有被访问到，那么它将来被访问的几率也很小，也就是说当限定的内存空间已没有其他空间可用时，应该把最久没有访问到的数据去除掉。</span></p>",
  "body_draft_lake": "",
  "public": 0,
  "status": 1,
  "view_status": 0,
  "read_status": 1,
  "likes_count": 0,
  "comments_count": 0,
  "content_updated_at": "2022-06-30T07:21:20.000Z",
  "deleted_at": null,
  "created_at": "2022-06-30T07:21:04.000Z",
  "updated_at": "2022-06-30T07:21:20.000Z",
  "published_at": "2022-06-30T07:21:20.000Z",
  "first_published_at": "2022-06-30T07:21:20.184Z",
  "word_count": 97,
  "cover": null,
  "description": "LRU 缓存机制，即采用最近最少使用的缓存策略。它的原则是，如果一个数据最近没有被访问到，那么它将来被访问的几率也很小，也就是说当限定的内存空间已没有其他空间可用时，应该把最久没有访问到的数据去除掉。",
  "custom_description": null,
  "hits": 0,
  "_serializer": "v2.doc_detail"
}