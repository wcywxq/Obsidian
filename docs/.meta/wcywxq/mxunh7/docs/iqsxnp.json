{
  "id": 72212080,
  "slug": "iqsxnp",
  "title": "跨域相关问题",
  "book_id": 26225124,
  "book": {
    "id": 26225124,
    "type": "Book",
    "slug": "mxunh7",
    "name": "八股文 eight-part essay writing",
    "user_id": 732231,
    "description": "前端八股文",
    "creator_id": 732231,
    "public": 0,
    "items_count": 239,
    "likes_count": 0,
    "watches_count": 1,
    "content_updated_at": "2023-11-11T18:15:57.023Z",
    "updated_at": "2023-11-11T18:15:57.000Z",
    "created_at": "2022-04-04T11:31:45.000Z",
    "namespace": "wcywxq/mxunh7",
    "user": {
      "id": 732231,
      "type": "User",
      "login": "wcywxq",
      "name": "magic",
      "description": null,
      "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/732231/1606968271774-avatar/886ad88b-d2cc-4c9e-a674-f70eb51a679c.png",
      "books_count": 18,
      "public_books_count": 0,
      "followers_count": 0,
      "following_count": 0,
      "created_at": "2020-01-08T14:21:31.000Z",
      "updated_at": "2023-11-13T09:32:35.000Z",
      "_serializer": "v2.user"
    },
    "_serializer": "v2.book"
  },
  "user_id": 732231,
  "creator": {
    "id": 732231,
    "type": "User",
    "login": "wcywxq",
    "name": "magic",
    "description": null,
    "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/732231/1606968271774-avatar/886ad88b-d2cc-4c9e-a674-f70eb51a679c.png",
    "books_count": 18,
    "public_books_count": 0,
    "followers_count": 0,
    "following_count": 0,
    "created_at": "2020-01-08T14:21:31.000Z",
    "updated_at": "2023-11-13T09:32:35.000Z",
    "_serializer": "v2.user"
  },
  "format": "lake",
  "body": "<a name=\"BSrhW\"></a>\n## 同源策略\n是一种安全策略。所谓的同源，指的是**协议**，**域名**，**端口**相同。浏览器处于安全方面的考虑，只允许本域名下的接口交互，不同源的客户端脚本，**在没有明确授权**的情况下，不能读写对方的资源\n\n<a name=\"wj9qu\"></a>\n## 跨域解决方案\n<a name=\"YZ9Ls\"></a>\n### cors\n跨域资源共享 CORS 是一种机制，它使用额外的 HTTP 头来告诉浏览器，让运行在一个 origin(domain) 上的 Web 应用被准许访问来自不同源服务器上的指定的资源。当一个资源从与该资源本身所在的服务器**「不同的域、协议或端口」**请求一个资源时，资源会发起一个 **「跨域 HTTP 请求」**\n\n- 服务端 node.js 设置\n```javascript\nconst Koa = require('koa')\nconst app = new Koa()\n\napp.use(async (ctx, next) => {\n\tctx.set('Access-Control-Allow-Origin', ctx.headers.origin)\n  ctx.set('Access-Control-Allow-Credentials', true)\n  ctx.set('Access-Control-Request-Method', 'PUT,POST,GET,DELETE,OPTIONS')\n  ctx.set('Access-Control-Headers', 'Origin, X-Requested-With, Content-Type, Accept, cc')\n  if (ctx.method === 'OPTIONS') {\n  \tctx.status = 204\n    return\n  }\n  await next()\n})\n```\n<a name=\"OQ5Wh\"></a>\n### node 中间件代理\nnode 中间件实现跨域代理，原理大致与 nginx 相同，都是通过启动一个代理服务器，从而实现数据的转发\n\n- 前端代码\n```html\n<script>\n  getlist.onClick = () => {\n  \tfetch('http://localhost:8080/api/corslist', { credentials: 'include' })\n      .then(res => res.json())\n      .then(data => console.log(data))\n      .catch(err => console.log(err))\n  }\n  login.click = () => {\n  \tfetch('http://localhost:8080/api/login', { credentials: 'include' })\n      .then(res => res.json())\n      .then(data => console.log(data))\n      .catch(err => console.log(err))\n  }\n</script>\n```\n\n- 中间件服务器\n```javascript\nconst Koa = require('koa')\nconst proxy = require('http-proxy-middleware')\nconst app = new Koa()\n\napp.use('/', (ctx, next) => {\n\tproxy({\n  \t// 代理跨域目标接口\n    target: 'http://www.domain2.com:8080',\n    changeOrigin: true,\n    // 修改响应头信息，实现跨域并允许带 cookie\n    onProxyRes() {\n    \tctx.header('Access-Control-Allow-Origin', 'http://www.domain1.com')\n      ctx.header('Access-Control-Allow-Credentials', true)\n    },\n    // 修改响应信息中的 cookie 域名\n    cookieDomainRewrite: 'www.domain1.com' // 可以为 false，表示不修改\n  })\n})\n\napp.listen(3000)\n```\n<a name=\"L6fcF\"></a>\n### nginx 反向代理\n思路：通过 nginx 配置一个代理服务器做跳板机，反向代理访问目标域接口，实现跨域登陆\n```nginx\nserver {\n  listen 80;\n  server_name 127.0.0.1;\n  location /api {\n    proxy_pass http://localhost:8080; # 反向代理\n  }\n}\n```\n\n- 前端代码\n```html\n<script>\n\taxios.defaults.withCredentials = true\n  getList.onclick = () => {\n  \taxios.get('/api/corslist').then(res => {\n    \tconsole.log(res.data)\n    })\n  }\n</script>\n```\n\n- 服务端 node.js 代码\n```javascript\nconst Koa = require('koa')\nconst router = require('@koa/router')\nconst app = new Koa()\n\nrouter.get('/api/corslist', async ctx => {\n\tctx.body = {\n  \tdata: [{ name: 'cors list' }]\n  }\n})\n\nrouter.post('/api/login', async ctx => {\n\tctx.cookies.set('token', token, {\n  \texpires: new Date(Date.now() + 1000 * 60 * 60 * 24 * 7)\n  })\n  ctx.body = {\n    msg: 'success',\n    code: 0\n  }\n})\n\napp.use(router.routes())\napp.use(router.allowMethods())\n\napp.listen('http://localhost:8080')\n```\n<a name=\"sS5ZM\"></a>\n### jsonp\n\n- 服务端 node.js 实现\n```javascript\nconst Koa = require('koa')\nconst app = new Koa()\n\napp.use(async (ctx, next) => {\n\tif (ctx.path === '/api/jsonp') {\n    const { jsonpCallback: fn, ...params } = ctx.query\n  \tctx.body = `${fn}(${JSON.stringify(params)})`\n  }\n})\n\napp.listen(3000)\n```\n\n- 前端实现\n```html\n<script>\n\tvar script = document.createElement('script')\n  script.type = 'text/javascript'\n  \n  // 传递参数并指定回调执行函数 callback\n  script.src = 'http://localhost:3000/api/jsonp?id=1&type=2&cb=jsonpCallback'\n  // 回调执行函数\n  function jsonpCallback(res) {\n  \tconsole.log(JSON.stringify(res))\n  }\n</script>\n```\n<a name=\"ASzaJ\"></a>\n### websocket\n\n- 服务端实现\n```javascript\nconst Koa = require('koa')\nconst ws = require('ws')\n\nconst server = new ws.Server({\n    port: 3000\n})\n\nserver.on('connection', socket => {\n    socket.on('message', data => {\n        socket.send(data)\n    })\n})\n```\n\n- 前端实现\n```html\n<script>\nconst socket = new WebSocket('ws://localhost:3000')\nsocket.onopen = () => {\n\tsocket.send('信息')\n}\nsocket.onmessage = event => {\n\tconsole.log(event.data)\n}\n</script>\n```\n<a name=\"ms2S2\"></a>\n### window.postMessage\npostMessage 是 HTML5 XMLHttpRequest Level 2 中的 API，且是为数不多可以跨域操作的 window 属性之一，它可用于解决一下方面的问题：\n\n- 页面和其打开的新窗口的数据传递\n- 多窗口之间消息传递\n- 页面与嵌套的 iframe 消息传递\n- 上面三个场景的跨域数据传递\n\n用法：postMessage(data, origin) 方法接受两个参数\n\n- a.html\n```html\n<iframe\n  src=\"http://localhost:8080\"\n  frameborder=\"0\"\n  id=\"iframe\"\n  onload=\"load()\"\n></iframe>\n<script>  \n  function load() {    \n    iframe.contentWindow.postMessage(\"秋风的笔记\", \"http://localhost:8080\");    \n    window.onmessage = e => {      \n      console.log(e.data);    \n    };  \n  }\n</script>\n```\n\n- b.html\n```html\n<div>hello</div>\n<script>  \n  window.onmessage = e => {    \n    console.log(e.data); // 秋风的笔记    \n    e.source.postMessage(e.data, e.origin); \n  };\n</script>\n```\n<a name=\"Lab8V\"></a>\n### document.domain + iframe\n实现原理：两个页面都通过 javaScript 强制设置 document.domain 为基础主域，这样就实现了同域\n:::info\n此方案仅限主域相同，子域不同的跨域应用场景\n:::\n\n- 主窗口\n```html\n<iframe id='iframe' src='http://child.domain.com/b.html'></iframe>\n<script>\n\tdocument.domain = 'domain.com'\n  var user = 'admin'\n</script>\n```\n\n- 子窗口\n```html\n<script>\n\tdocument.domain = 'domain.com'\n  // 获取父窗口中变量\n  console.log(window.parent.user)\n</script>\n```\n<a name=\"e9zoq\"></a>\n### window.location.hash + iframe\n实现原理：通过 url 带 hash ，通过一个非跨域的中间页面来传递数据\n\n- a,html\n```html\n<iframe src=\"http://localhost:8080/hash/c.html#name1\"></iframe>\n<script>\n  console.log(location.hash);\n  window.onhashchange = function() {\n    console.log(location.hash);\n  };\n</script>\n```\n\n- b.html\n```html\n<script>\n  window.parent.parent.location.hash = location.hash;\n</script>\n```\n\n- c.html\n```html\n<script>\n\tconsole.log(location.hash);  \n  const iframe = document.createElement(\"iframe\");  \n  iframe.src = \"http://localhost:8000/hash/b.html#name2\";  \n  document.body.appendChild(iframe);\n</script>\n```\n<a name=\"GRRUT\"></a>\n### window.name + iframe\nwindow 对象的 name 属性是一个很特别的属性，当该 window 的 location 变化，然后重新加载，它的 name 属性可以依然保持不变\n\n其中 a.html 和 b.html 是同域的，都是 http://localhost:8000，而 c.html 是 http://localhost:8080\n\n- a.html\n```html\n<iframe\n  src=\"http://localhost:8080/name/c.html\"\n  frameborder=\"0\"\n  onload=\"load()\"\n  id=\"iframe\"\n></iframe>\n<script>\n\tlet first = true\n  // onload 事件会触发 2 次，第 1 次加载跨域页，并留存数据于 window.name\n  function load() {\n  \tif (first) {\n    \t// 第 1 次 onload(跨域页)成功后，切换到同域代理页面\n      iframe.src = 'http://localhost:8000/name/b.html'\n    } else {\n    \t// 第 2 次 onload(同域 b.html 页)成功后，读取同域 window.name 中数据\n      console.log(iframe.contentWindow.name)\n    }\n  }\n</script>\n```\n\n- b.html 中间代理页，与 a.html 同域，内容为空\n```html\n<div></div>\n```\n\n- c.html\n```html\n<script>\n\twindow.name = '发送内容'\n</script>\n```\n:::info\n通过 iframe 的 src 属性由外域转向本地域，跨域数据即由 iframe 的 window.name 从外域传递到本地域。这个就巧妙地绕过了浏览器的跨域访问限制，但同时它又是安全操作\n:::\n<a name=\"LEr2B\"></a>\n### 借助 charles/fiddler 接口代理\n<a name=\"B66rV\"></a>\n### 浏览器开启跨域\n可以通过修改浏览器的配置来关闭默认的跨域方案<br /> \t\t<br /> \t \n",
  "body_draft": "",
  "body_html": "<!doctype html><h2 id=\"BSrhW\"><span>同源策略</span></h2><p data-lake-id=\"u5f8187f7\"><span>是一种安全策略。所谓的同源，指的是</span><strong><span style=\"color: #13C2C2;\">协议</span></strong><span style=\"color: #13C2C2;\">，</span><strong><span style=\"color: #13C2C2;\">域名</span></strong><span style=\"color: #13C2C2;\">，</span><strong><span style=\"color: #13C2C2;\">端口</span></strong><span>相同。浏览器处于安全方面的考虑，只允许本域名下的接口交互，不同源的客户端脚本，</span><strong><span>在没有明确授权</span></strong><span>的情况下，不能读写对方的资源</span></p><p data-lake-id=\"u56baaeb2\"><span>​</span><br /></p><h2 id=\"wj9qu\"><span>跨域解决方案</span></h2><h3 id=\"YZ9Ls\"><span>cors</span></h3><p data-lake-id=\"u71e35f0c\"><span>跨域资源共享 CORS 是一种机制，它使用额外的 HTTP 头来告诉浏览器，让运行在一个 origin(domain) 上的 Web 应用被准许访问来自不同源服务器上的指定的资源。当一个资源从与该资源本身所在的服务器</span><strong><span class=\"lake-fontsize-12\" style=\"color: #333333;\">「不同的域、协议或端口」</span></strong><span class=\"lake-fontsize-12\" style=\"color: #333333;\">请求一个资源时，资源会发起一个 </span><strong><span class=\"lake-fontsize-12\" style=\"color: #333333;\">「跨域 HTTP 请求」</span></strong></p><p data-lake-id=\"ue7c78c74\"><strong><span class=\"lake-fontsize-12\" style=\"color: #333333;\">​</span></strong><br /></p><ul><li><span>服务端 node.js 设置</span></li></ul><pre data-lang=\"javascript\"><code>const Koa = require('koa')\nconst app = new Koa()\n\napp.use(async (ctx, next) =&gt; {\n\tctx.set('Access-Control-Allow-Origin', ctx.headers.origin)\n  ctx.set('Access-Control-Allow-Credentials', true)\n  ctx.set('Access-Control-Request-Method', 'PUT,POST,GET,DELETE,OPTIONS')\n  ctx.set('Access-Control-Headers', 'Origin, X-Requested-With, Content-Type, Accept, cc')\n  if (ctx.method === 'OPTIONS') {\n  \tctx.status = 204\n    return\n  }\n  await next()\n})</code></pre><h3 id=\"OQ5Wh\"><span>node 中间件代理</span></h3><p data-lake-id=\"uee42224c\"><span>node 中间件实现跨域代理，原理大致与 nginx 相同，都是通过启动一个代理服务器，从而实现数据的转发</span></p><ul><li><span>前端代码</span></li></ul><pre data-lang=\"html\"><code>&lt;script&gt;\n  getlist.onClick = () =&gt; {\n  \tfetch('http://localhost:8080/api/corslist', { credentials: 'include' })\n      .then(res =&gt; res.json())\n      .then(data =&gt; console.log(data))\n      .catch(err =&gt; console.log(err))\n  }\n  login.click = () =&gt; {\n  \tfetch('http://localhost:8080/api/login', { credentials: 'include' })\n      .then(res =&gt; res.json())\n      .then(data =&gt; console.log(data))\n      .catch(err =&gt; console.log(err))\n  }\n&lt;/script&gt;</code></pre><ul><li><span>中间件服务器</span></li></ul><pre data-lang=\"javascript\"><code>const Koa = require('koa')\nconst proxy = require('http-proxy-middleware')\nconst app = new Koa()\n\napp.use('/', (ctx, next) =&gt; {\n\tproxy({\n  \t// 代理跨域目标接口\n    target: 'http://www.domain2.com:8080',\n    changeOrigin: true,\n    // 修改响应头信息，实现跨域并允许带 cookie\n    onProxyRes() {\n    \tctx.header('Access-Control-Allow-Origin', 'http://www.domain1.com')\n      ctx.header('Access-Control-Allow-Credentials', true)\n    },\n    // 修改响应信息中的 cookie 域名\n    cookieDomainRewrite: 'www.domain1.com' // 可以为 false，表示不修改\n  })\n})\n\napp.listen(3000)</code></pre><h3 id=\"L6fcF\"><span>nginx 反向代理</span></h3><p data-lake-id=\"ue07e8db1\"><span>思路：通过 nginx 配置一个代理服务器做跳板机，反向代理访问目标域接口，实现跨域登陆</span></p><pre data-lang=\"nginx\"><code>server {\n  listen 80;\n  server_name 127.0.0.1;\n  location /api {\n    proxy_pass http://localhost:8080; # 反向代理\n  }\n}</code></pre><ul><li><span>前端代码</span></li></ul><pre data-lang=\"html\"><code>&lt;script&gt;\n\taxios.defaults.withCredentials = true\n  getList.onclick = () =&gt; {\n  \taxios.get('/api/corslist').then(res =&gt; {\n    \tconsole.log(res.data)\n    })\n  }\n&lt;/script&gt;</code></pre><ul><li><span>服务端 node.js 代码</span></li></ul><pre data-lang=\"javascript\"><code>const Koa = require('koa')\nconst router = require('@koa/router')\nconst app = new Koa()\n\nrouter.get('/api/corslist', async ctx =&gt; {\n\tctx.body = {\n  \tdata: [{ name: 'cors list' }]\n  }\n})\n\nrouter.post('/api/login', async ctx =&gt; {\n\tctx.cookies.set('token', token, {\n  \texpires: new Date(Date.now() + 1000 * 60 * 60 * 24 * 7)\n  })\n  ctx.body = {\n    msg: 'success',\n    code: 0\n  }\n})\n\napp.use(router.routes())\napp.use(router.allowMethods())\n\napp.listen('http://localhost:8080')</code></pre><h3 id=\"sS5ZM\"><span>jsonp</span></h3><ul><li><span>服务端 node.js 实现</span></li></ul><pre data-lang=\"javascript\"><code>const Koa = require('koa')\nconst app = new Koa()\n\napp.use(async (ctx, next) =&gt; {\n\tif (ctx.path === '/api/jsonp') {\n    const { jsonpCallback: fn, ...params } = ctx.query\n  \tctx.body = `${fn}(${JSON.stringify(params)})`\n  }\n})\n\napp.listen(3000)</code></pre><ul><li><span>前端实现</span></li></ul><pre data-lang=\"html\"><code>&lt;script&gt;\n\tvar script = document.createElement('script')\n  script.type = 'text/javascript'\n  \n  // 传递参数并指定回调执行函数 callback\n  script.src = 'http://localhost:3000/api/jsonp?id=1&amp;type=2&amp;cb=jsonpCallback'\n  // 回调执行函数\n  function jsonpCallback(res) {\n  \tconsole.log(JSON.stringify(res))\n  }\n&lt;/script&gt;</code></pre><h3 id=\"ASzaJ\"><span>websocket</span></h3><ul><li><span>服务端实现</span></li></ul><pre data-lang=\"javascript\"><code>const Koa = require('koa')\nconst ws = require('ws')\n\nconst server = new ws.Server({\n    port: 3000\n})\n\nserver.on('connection', socket =&gt; {\n    socket.on('message', data =&gt; {\n        socket.send(data)\n    })\n})</code></pre><ul><li><span>前端实现</span></li></ul><pre data-lang=\"html\"><code>&lt;script&gt;\nconst socket = new WebSocket('ws://localhost:3000')\nsocket.onopen = () =&gt; {\n\tsocket.send('信息')\n}\nsocket.onmessage = event =&gt; {\n\tconsole.log(event.data)\n}\n&lt;/script&gt;</code></pre><h3 id=\"ms2S2\"><span>window.postMessage</span></h3><p data-lake-id=\"u02237112\"><span>postMessage 是 HTML5 XMLHttpRequest Level 2 中的 API，且是为数不多可以跨域操作的 window 属性之一，它可用于解决一下方面的问题：</span></p><ul><li><span>页面和其打开的新窗口的数据传递</span></li><li><span>多窗口之间消息传递</span></li><li><span>页面与嵌套的 iframe 消息传递</span></li><li><span>上面三个场景的跨域数据传递</span></li></ul><p data-lake-id=\"u75d79fd4\"><span>用法：postMessage(data, origin) 方法接受两个参数</span></p><ul><li><span>a.html</span></li></ul><pre data-lang=\"html\"><code>&lt;iframe\n  src=&quot;http://localhost:8080&quot;\n  frameborder=&quot;0&quot;\n  id=&quot;iframe&quot;\n  onload=&quot;load()&quot;\n&gt;&lt;/iframe&gt;\n&lt;script&gt;  \n  function load() {    \n    iframe.contentWindow.postMessage(&quot;秋风的笔记&quot;, &quot;http://localhost:8080&quot;);    \n    window.onmessage = e =&gt; {      \n      console.log(e.data);    \n    };  \n  }\n&lt;/script&gt;</code></pre><ul><li><span>b.html</span></li></ul><pre data-lang=\"html\"><code>&lt;div&gt;hello&lt;/div&gt;\n&lt;script&gt;  \n  window.onmessage = e =&gt; {    \n    console.log(e.data); // 秋风的笔记    \n    e.source.postMessage(e.data, e.origin); \n  };\n&lt;/script&gt;</code></pre><h3 id=\"Lab8V\"><span>document.domain + iframe</span></h3><p data-lake-id=\"ubd1d809a\"><span>实现原理：两个页面都通过 javaScript 强制设置 document.domain 为基础主域，这样就实现了同域</span></p><blockquote class=\"lake-alert lake-alert-info\"><p data-lake-id=\"u34f7b4ec\"><span>此方案仅限主域相同，子域不同的跨域应用场景</span></p></blockquote><ul><li><span>主窗口</span></li></ul><pre data-lang=\"html\"><code>&lt;iframe id='iframe' src='http://child.domain.com/b.html'&gt;&lt;/iframe&gt;\n&lt;script&gt;\n\tdocument.domain = 'domain.com'\n  var user = 'admin'\n&lt;/script&gt;</code></pre><ul><li><span>子窗口</span></li></ul><pre data-lang=\"html\"><code>&lt;script&gt;\n\tdocument.domain = 'domain.com'\n  // 获取父窗口中变量\n  console.log(window.parent.user)\n&lt;/script&gt;</code></pre><h3 id=\"e9zoq\"><span>window.location.hash + iframe</span></h3><p data-lake-id=\"u6232b5ab\"><span>实现原理：</span><span class=\"lake-fontsize-12\" style=\"color: #333333;\">通过 url 带 hash ，通过一个非跨域的中间页面来传递数据</span></p><ul><li><span>a,html</span></li></ul><pre data-lang=\"html\"><code>&lt;iframe src=&quot;http://localhost:8080/hash/c.html#name1&quot;&gt;&lt;/iframe&gt;\n&lt;script&gt;\n  console.log(location.hash);\n  window.onhashchange = function() {\n    console.log(location.hash);\n  };\n&lt;/script&gt;</code></pre><ul><li><span>b.html</span></li></ul><pre data-lang=\"html\"><code>&lt;script&gt;\n  window.parent.parent.location.hash = location.hash;\n&lt;/script&gt;</code></pre><ul><li><span>c.html</span></li></ul><pre data-lang=\"html\"><code>&lt;script&gt;\n\tconsole.log(location.hash);  \n  const iframe = document.createElement(&quot;iframe&quot;);  \n  iframe.src = &quot;http://localhost:8000/hash/b.html#name2&quot;;  \n  document.body.appendChild(iframe);\n&lt;/script&gt;</code></pre><h3 id=\"GRRUT\"><span>window.name + iframe</span></h3><p data-lake-id=\"u1a4dd23e\"><span>window 对象的 name 属性是一个很特别的属性，当该 window 的 location 变化，然后重新加载，它的 name 属性可以依然保持不变</span></p><p data-lake-id=\"ua2a6d257\"><span>​</span><br /></p><p data-lake-id=\"uf95b96b7\"><span>其中 a.html 和 b.html 是同域的，都是 http://localhost:8000，而 c.html 是 http://localhost:8080</span></p><ul><li><span>a.html</span></li></ul><pre data-lang=\"html\"><code>&lt;iframe\n  src=&quot;http://localhost:8080/name/c.html&quot;\n  frameborder=&quot;0&quot;\n  onload=&quot;load()&quot;\n  id=&quot;iframe&quot;\n&gt;&lt;/iframe&gt;\n&lt;script&gt;\n\tlet first = true\n  // onload 事件会触发 2 次，第 1 次加载跨域页，并留存数据于 window.name\n  function load() {\n  \tif (first) {\n    \t// 第 1 次 onload(跨域页)成功后，切换到同域代理页面\n      iframe.src = 'http://localhost:8000/name/b.html'\n    } else {\n    \t// 第 2 次 onload(同域 b.html 页)成功后，读取同域 window.name 中数据\n      console.log(iframe.contentWindow.name)\n    }\n  }\n&lt;/script&gt;</code></pre><ul><li><span>b.html 中间代理页，与 a.html 同域，内容为空</span></li></ul><pre data-lang=\"html\"><code>&lt;div&gt;&lt;/div&gt;</code></pre><ul><li><span>c.html</span></li></ul><pre data-lang=\"html\"><code>&lt;script&gt;\n\twindow.name = '发送内容'\n&lt;/script&gt;</code></pre><blockquote class=\"lake-alert lake-alert-info\"><p data-lake-id=\"uc08c057c\"><span>通过 iframe 的 src 属性由外域转向本地域，跨域数据即由 iframe 的 window.name 从外域传递到本地域。这个就巧妙地绕过了浏览器的跨域访问限制，但同时它又是安全操作</span></p></blockquote><h3 id=\"LEr2B\"><span>借助 charles/fiddler 接口代理</span></h3><h3 id=\"B66rV\"><span>浏览器开启跨域</span></h3><p data-lake-id=\"uc448af43\"><span>可以通过修改浏览器的配置来关闭默认的跨域方案</span></p><p data-lake-id=\"u57e647b5\"><span> \t\t</span></p><p data-lake-id=\"u974086d2\"><span> \t </span></p>",
  "body_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"viewport\" content=\"adapt\" /><h2 data-lake-id=\"BSrhW\" id=\"BSrhW\"><span data-lake-id=\"u62ca1944\" id=\"u62ca1944\">同源策略</span></h2><p data-lake-id=\"u5f8187f7\" id=\"u5f8187f7\"><span data-lake-id=\"u090b3449\" id=\"u090b3449\">是一种安全策略。所谓的同源，指的是</span><strong><span data-lake-id=\"u108e5a40\" id=\"u108e5a40\" style=\"color: #13C2C2\">协议</span></strong><span data-lake-id=\"u99e43a0e\" id=\"u99e43a0e\" style=\"color: #13C2C2\">，</span><strong><span data-lake-id=\"ud998ca0d\" id=\"ud998ca0d\" style=\"color: #13C2C2\">域名</span></strong><span data-lake-id=\"u4a76ea1e\" id=\"u4a76ea1e\" style=\"color: #13C2C2\">，</span><strong><span data-lake-id=\"u69d5d8f2\" id=\"u69d5d8f2\" style=\"color: #13C2C2\">端口</span></strong><span data-lake-id=\"u65c9a317\" id=\"u65c9a317\">相同。浏览器处于安全方面的考虑，只允许本域名下的接口交互，不同源的客户端脚本，</span><strong><span data-lake-id=\"u48527100\" id=\"u48527100\">在没有明确授权</span></strong><span data-lake-id=\"u24395204\" id=\"u24395204\">的情况下，不能读写对方的资源</span></p><p data-lake-id=\"u56baaeb2\" id=\"u56baaeb2\"><span data-lake-id=\"uafd7e4b3\" id=\"uafd7e4b3\">​</span><br></p><h2 data-lake-id=\"wj9qu\" id=\"wj9qu\"><span data-lake-id=\"ue2e55cca\" id=\"ue2e55cca\">跨域解决方案</span></h2><h3 data-lake-id=\"YZ9Ls\" id=\"YZ9Ls\"><span data-lake-id=\"u983339a5\" id=\"u983339a5\">cors</span></h3><p data-lake-id=\"u71e35f0c\" id=\"u71e35f0c\"><span data-lake-id=\"u9d3ce7f1\" id=\"u9d3ce7f1\">跨域资源共享 CORS 是一种机制，它使用额外的 HTTP 头来告诉浏览器，让运行在一个 origin(domain) 上的 Web 应用被准许访问来自不同源服务器上的指定的资源。当一个资源从与该资源本身所在的服务器</span><strong><span data-lake-id=\"ua1487292\" id=\"ua1487292\" class=\"lake-fontsize-12\" style=\"color: rgb(51, 51, 51)\">「不同的域、协议或端口」</span></strong><span data-lake-id=\"u7b40de68\" id=\"u7b40de68\" class=\"lake-fontsize-12\" style=\"color: rgb(51, 51, 51)\">请求一个资源时，资源会发起一个 </span><strong><span data-lake-id=\"ufd35b3a0\" id=\"ufd35b3a0\" class=\"lake-fontsize-12\" style=\"color: rgb(51, 51, 51)\">「跨域 HTTP 请求」</span></strong></p><p data-lake-id=\"ue7c78c74\" id=\"ue7c78c74\"><strong><span data-lake-id=\"ud501c864\" id=\"ud501c864\" class=\"lake-fontsize-12\" style=\"color: rgb(51, 51, 51)\">​</span></strong><br></p><ul list=\"u53d253c2\"><li fid=\"ubf67aadc\" data-lake-id=\"u863db1f7\" id=\"u863db1f7\"><span data-lake-id=\"uad50efd8\" id=\"uad50efd8\">服务端 node.js 设置</span></li></ul><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22const%20Koa%20%3D%20require('koa')%5Cnconst%20app%20%3D%20new%20Koa()%5Cn%5Cnapp.use(async%20(ctx%2C%20next)%20%3D%3E%20%7B%5Cn%5Ctctx.set('Access-Control-Allow-Origin'%2C%20ctx.headers.origin)%5Cn%20%20ctx.set('Access-Control-Allow-Credentials'%2C%20true)%5Cn%20%20ctx.set('Access-Control-Request-Method'%2C%20'PUT%2CPOST%2CGET%2CDELETE%2COPTIONS')%5Cn%20%20ctx.set('Access-Control-Headers'%2C%20'Origin%2C%20X-Requested-With%2C%20Content-Type%2C%20Accept%2C%20cc')%5Cn%20%20if%20(ctx.method%20%3D%3D%3D%20'OPTIONS')%20%7B%5Cn%20%20%5Ctctx.status%20%3D%20204%5Cn%20%20%20%20return%5Cn%20%20%7D%5Cn%20%20await%20next()%5Cn%7D)%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22Z5PlG%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h3 data-lake-id=\"OQ5Wh\" id=\"OQ5Wh\"><span data-lake-id=\"u7bc43c12\" id=\"u7bc43c12\">node 中间件代理</span></h3><p data-lake-id=\"uee42224c\" id=\"uee42224c\"><span data-lake-id=\"u9861e88b\" id=\"u9861e88b\">node 中间件实现跨域代理，原理大致与 nginx 相同，都是通过启动一个代理服务器，从而实现数据的转发</span></p><ul list=\"u8b7d78c0\"><li fid=\"ufab96220\" data-lake-id=\"uef00f4a5\" id=\"uef00f4a5\"><span data-lake-id=\"u1ea8078e\" id=\"u1ea8078e\">前端代码</span></li></ul><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22html%22%2C%22code%22%3A%22%3Cscript%3E%5Cn%20%20getlist.onClick%20%3D%20()%20%3D%3E%20%7B%5Cn%20%20%5Ctfetch('http%3A%2F%2Flocalhost%3A8080%2Fapi%2Fcorslist'%2C%20%7B%20credentials%3A%20'include'%20%7D)%5Cn%20%20%20%20%20%20.then(res%20%3D%3E%20res.json())%5Cn%20%20%20%20%20%20.then(data%20%3D%3E%20console.log(data))%5Cn%20%20%20%20%20%20.catch(err%20%3D%3E%20console.log(err))%5Cn%20%20%7D%5Cn%20%20login.click%20%3D%20()%20%3D%3E%20%7B%5Cn%20%20%5Ctfetch('http%3A%2F%2Flocalhost%3A8080%2Fapi%2Flogin'%2C%20%7B%20credentials%3A%20'include'%20%7D)%5Cn%20%20%20%20%20%20.then(res%20%3D%3E%20res.json())%5Cn%20%20%20%20%20%20.then(data%20%3D%3E%20console.log(data))%5Cn%20%20%20%20%20%20.catch(err%20%3D%3E%20console.log(err))%5Cn%20%20%7D%5Cn%3C%2Fscript%3E%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22EMGNT%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><ul list=\"u2ceefcec\"><li fid=\"u993f577c\" data-lake-id=\"u590914eb\" id=\"u590914eb\"><span data-lake-id=\"ucd36d5b3\" id=\"ucd36d5b3\">中间件服务器</span></li></ul><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22const%20Koa%20%3D%20require('koa')%5Cnconst%20proxy%20%3D%20require('http-proxy-middleware')%5Cnconst%20app%20%3D%20new%20Koa()%5Cn%5Cnapp.use('%2F'%2C%20(ctx%2C%20next)%20%3D%3E%20%7B%5Cn%5Ctproxy(%7B%5Cn%20%20%5Ct%2F%2F%20%E4%BB%A3%E7%90%86%E8%B7%A8%E5%9F%9F%E7%9B%AE%E6%A0%87%E6%8E%A5%E5%8F%A3%5Cn%20%20%20%20target%3A%20'http%3A%2F%2Fwww.domain2.com%3A8080'%2C%5Cn%20%20%20%20changeOrigin%3A%20true%2C%5Cn%20%20%20%20%2F%2F%20%E4%BF%AE%E6%94%B9%E5%93%8D%E5%BA%94%E5%A4%B4%E4%BF%A1%E6%81%AF%EF%BC%8C%E5%AE%9E%E7%8E%B0%E8%B7%A8%E5%9F%9F%E5%B9%B6%E5%85%81%E8%AE%B8%E5%B8%A6%20cookie%5Cn%20%20%20%20onProxyRes()%20%7B%5Cn%20%20%20%20%5Ctctx.header('Access-Control-Allow-Origin'%2C%20'http%3A%2F%2Fwww.domain1.com')%5Cn%20%20%20%20%20%20ctx.header('Access-Control-Allow-Credentials'%2C%20true)%5Cn%20%20%20%20%7D%2C%5Cn%20%20%20%20%2F%2F%20%E4%BF%AE%E6%94%B9%E5%93%8D%E5%BA%94%E4%BF%A1%E6%81%AF%E4%B8%AD%E7%9A%84%20cookie%20%E5%9F%9F%E5%90%8D%5Cn%20%20%20%20cookieDomainRewrite%3A%20'www.domain1.com'%20%2F%2F%20%E5%8F%AF%E4%BB%A5%E4%B8%BA%20false%EF%BC%8C%E8%A1%A8%E7%A4%BA%E4%B8%8D%E4%BF%AE%E6%94%B9%5Cn%20%20%7D)%5Cn%7D)%5Cn%5Cnapp.listen(3000)%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22FLgah%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h3 data-lake-id=\"L6fcF\" id=\"L6fcF\"><span data-lake-id=\"u256912d7\" id=\"u256912d7\">nginx 反向代理</span></h3><p data-lake-id=\"ue07e8db1\" id=\"ue07e8db1\"><span data-lake-id=\"u34e959a9\" id=\"u34e959a9\">思路：通过 nginx 配置一个代理服务器做跳板机，反向代理访问目标域接口，实现跨域登陆</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22nginx%22%2C%22code%22%3A%22server%20%7B%5Cn%20%20listen%2080%3B%5Cn%20%20server_name%20127.0.0.1%3B%5Cn%20%20location%20%2Fapi%20%7B%5Cn%20%20%20%20proxy_pass%20http%3A%2F%2Flocalhost%3A8080%3B%20%23%20%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%5Cn%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22YlAmV%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><ul list=\"u6f9021b7\"><li fid=\"ue663ab0b\" data-lake-id=\"u33813a2f\" id=\"u33813a2f\"><span data-lake-id=\"ub60922b4\" id=\"ub60922b4\">前端代码</span></li></ul><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22html%22%2C%22code%22%3A%22%3Cscript%3E%5Cn%5Ctaxios.defaults.withCredentials%20%3D%20true%5Cn%20%20getList.onclick%20%3D%20()%20%3D%3E%20%7B%5Cn%20%20%5Ctaxios.get('%2Fapi%2Fcorslist').then(res%20%3D%3E%20%7B%5Cn%20%20%20%20%5Ctconsole.log(res.data)%5Cn%20%20%20%20%7D)%5Cn%20%20%7D%5Cn%3C%2Fscript%3E%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22EHBXl%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><ul list=\"u6f9021b7\" start=\"2\"><li fid=\"ue663ab0b\" data-lake-id=\"uc2c86ace\" id=\"uc2c86ace\"><span data-lake-id=\"ufc35820d\" id=\"ufc35820d\">服务端 node.js 代码</span></li></ul><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22const%20Koa%20%3D%20require('koa')%5Cnconst%20router%20%3D%20require('%40koa%2Frouter')%5Cnconst%20app%20%3D%20new%20Koa()%5Cn%5Cnrouter.get('%2Fapi%2Fcorslist'%2C%20async%20ctx%20%3D%3E%20%7B%5Cn%5Ctctx.body%20%3D%20%7B%5Cn%20%20%5Ctdata%3A%20%5B%7B%20name%3A%20'cors%20list'%20%7D%5D%5Cn%20%20%7D%5Cn%7D)%5Cn%5Cnrouter.post('%2Fapi%2Flogin'%2C%20async%20ctx%20%3D%3E%20%7B%5Cn%5Ctctx.cookies.set('token'%2C%20token%2C%20%7B%5Cn%20%20%5Ctexpires%3A%20new%20Date(Date.now()%20%2B%201000%20*%2060%20*%2060%20*%2024%20*%207)%5Cn%20%20%7D)%5Cn%20%20ctx.body%20%3D%20%7B%5Cn%20%20%20%20msg%3A%20'success'%2C%5Cn%20%20%20%20code%3A%200%5Cn%20%20%7D%5Cn%7D)%5Cn%5Cnapp.use(router.routes())%5Cnapp.use(router.allowMethods())%5Cn%5Cnapp.listen('http%3A%2F%2Flocalhost%3A8080')%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22tV4CZ%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h3 data-lake-id=\"sS5ZM\" id=\"sS5ZM\"><span data-lake-id=\"u7ad7c327\" id=\"u7ad7c327\">jsonp</span></h3><ul list=\"u86fb59f7\"><li fid=\"u391cc589\" data-lake-id=\"u8daef83e\" id=\"u8daef83e\"><span data-lake-id=\"u40e11b32\" id=\"u40e11b32\">服务端 node.js 实现</span></li></ul><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22const%20Koa%20%3D%20require('koa')%5Cnconst%20app%20%3D%20new%20Koa()%5Cn%5Cnapp.use(async%20(ctx%2C%20next)%20%3D%3E%20%7B%5Cn%5Ctif%20(ctx.path%20%3D%3D%3D%20'%2Fapi%2Fjsonp')%20%7B%5Cn%20%20%20%20const%20%7B%20jsonpCallback%3A%20fn%2C%20...params%20%7D%20%3D%20ctx.query%5Cn%20%20%5Ctctx.body%20%3D%20%60%24%7Bfn%7D(%24%7BJSON.stringify(params)%7D)%60%5Cn%20%20%7D%5Cn%7D)%5Cn%5Cnapp.listen(3000)%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22tnVVn%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><ul list=\"ud46dea40\"><li fid=\"u554460c7\" data-lake-id=\"ue55fd509\" id=\"ue55fd509\"><span data-lake-id=\"udac397b0\" id=\"udac397b0\">前端实现</span></li></ul><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22html%22%2C%22code%22%3A%22%3Cscript%3E%5Cn%5Ctvar%20script%20%3D%20document.createElement('script')%5Cn%20%20script.type%20%3D%20'text%2Fjavascript'%5Cn%20%20%5Cn%20%20%2F%2F%20%E4%BC%A0%E9%80%92%E5%8F%82%E6%95%B0%E5%B9%B6%E6%8C%87%E5%AE%9A%E5%9B%9E%E8%B0%83%E6%89%A7%E8%A1%8C%E5%87%BD%E6%95%B0%20callback%5Cn%20%20script.src%20%3D%20'http%3A%2F%2Flocalhost%3A3000%2Fapi%2Fjsonp%3Fid%3D1%26type%3D2%26cb%3DjsonpCallback'%5Cn%20%20%2F%2F%20%E5%9B%9E%E8%B0%83%E6%89%A7%E8%A1%8C%E5%87%BD%E6%95%B0%5Cn%20%20function%20jsonpCallback(res)%20%7B%5Cn%20%20%5Ctconsole.log(JSON.stringify(res))%5Cn%20%20%7D%5Cn%3C%2Fscript%3E%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22PaiAE%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h3 data-lake-id=\"ASzaJ\" id=\"ASzaJ\"><span data-lake-id=\"ufaefb48e\" id=\"ufaefb48e\">websocket</span></h3><ul list=\"u2a9cfd12\"><li fid=\"udf501071\" data-lake-id=\"u79406728\" id=\"u79406728\"><span data-lake-id=\"u9ad8933b\" id=\"u9ad8933b\">服务端实现</span></li></ul><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22const%20Koa%20%3D%20require('koa')%5Cnconst%20ws%20%3D%20require('ws')%5Cn%5Cnconst%20server%20%3D%20new%20ws.Server(%7B%5Cn%20%20%20%20port%3A%203000%5Cn%7D)%5Cn%5Cnserver.on('connection'%2C%20socket%20%3D%3E%20%7B%5Cn%20%20%20%20socket.on('message'%2C%20data%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20%20%20socket.send(data)%5Cn%20%20%20%20%7D)%5Cn%7D)%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22OQ9wX%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><ul list=\"u6da751d2\"><li fid=\"u94e48fd7\" data-lake-id=\"u4daf1b85\" id=\"u4daf1b85\"><span data-lake-id=\"u9e73cd4b\" id=\"u9e73cd4b\">前端实现</span></li></ul><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22html%22%2C%22code%22%3A%22%3Cscript%3E%5Cnconst%20socket%20%3D%20new%20WebSocket('ws%3A%2F%2Flocalhost%3A3000')%5Cnsocket.onopen%20%3D%20()%20%3D%3E%20%7B%5Cn%5Ctsocket.send('%E4%BF%A1%E6%81%AF')%5Cn%7D%5Cnsocket.onmessage%20%3D%20event%20%3D%3E%20%7B%5Cn%5Ctconsole.log(event.data)%5Cn%7D%5Cn%3C%2Fscript%3E%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22fw14r%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h3 data-lake-id=\"ms2S2\" id=\"ms2S2\"><span data-lake-id=\"uc6422dd5\" id=\"uc6422dd5\">window.postMessage</span></h3><p data-lake-id=\"u02237112\" id=\"u02237112\"><span data-lake-id=\"uc03737f2\" id=\"uc03737f2\">postMessage 是 HTML5 XMLHttpRequest Level 2 中的 API，且是为数不多可以跨域操作的 window 属性之一，它可用于解决一下方面的问题：</span></p><ul list=\"u1521d7b5\"><li fid=\"u8ccd9b04\" data-lake-id=\"ue5c7fce4\" id=\"ue5c7fce4\"><span data-lake-id=\"u47194f8d\" id=\"u47194f8d\">页面和其打开的新窗口的数据传递</span></li><li fid=\"u8ccd9b04\" data-lake-id=\"u44f3ea72\" id=\"u44f3ea72\"><span data-lake-id=\"u1e764dd2\" id=\"u1e764dd2\">多窗口之间消息传递</span></li><li fid=\"u8ccd9b04\" data-lake-id=\"ud6b34022\" id=\"ud6b34022\"><span data-lake-id=\"u7b96c6bd\" id=\"u7b96c6bd\">页面与嵌套的 iframe 消息传递</span></li><li fid=\"u8ccd9b04\" data-lake-id=\"u6695515a\" id=\"u6695515a\"><span data-lake-id=\"u64ea7690\" id=\"u64ea7690\">上面三个场景的跨域数据传递</span></li></ul><p data-lake-id=\"u75d79fd4\" id=\"u75d79fd4\"><span data-lake-id=\"u6b8fbf79\" id=\"u6b8fbf79\">用法：postMessage(data, origin) 方法接受两个参数</span></p><ul list=\"u3cd45157\"><li fid=\"uddc738d5\" data-lake-id=\"ud7de2d6e\" id=\"ud7de2d6e\"><span data-lake-id=\"u8baabaf8\" id=\"u8baabaf8\">a.html</span></li></ul><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22html%22%2C%22code%22%3A%22%3Ciframe%5Cn%20%20src%3D%5C%22http%3A%2F%2Flocalhost%3A8080%5C%22%5Cn%20%20frameborder%3D%5C%220%5C%22%5Cn%20%20id%3D%5C%22iframe%5C%22%5Cn%20%20onload%3D%5C%22load()%5C%22%5Cn%3E%3C%2Fiframe%3E%5Cn%3Cscript%3E%C2%A0%C2%A0%5Cn%20%20function%C2%A0load()%C2%A0%7B%C2%A0%C2%A0%C2%A0%C2%A0%5Cn%20%20%20%20iframe.contentWindow.postMessage(%5C%22%E7%A7%8B%E9%A3%8E%E7%9A%84%E7%AC%94%E8%AE%B0%5C%22%2C%C2%A0%5C%22http%3A%2F%2Flocalhost%3A8080%5C%22)%3B%C2%A0%C2%A0%C2%A0%C2%A0%5Cn%20%20%20%20window.onmessage%C2%A0%3D%C2%A0e%C2%A0%3D%3E%C2%A0%7B%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%5Cn%20%20%20%20%20%20console.log(e.data)%3B%C2%A0%C2%A0%C2%A0%C2%A0%5Cn%20%20%20%20%7D%3B%C2%A0%C2%A0%5Cn%20%20%7D%5Cn%3C%2Fscript%3E%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22NmSVw%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><ul list=\"u3cd45157\" start=\"2\"><li fid=\"uddc738d5\" data-lake-id=\"u4237156b\" id=\"u4237156b\"><span data-lake-id=\"u986adb73\" id=\"u986adb73\">b.html</span></li></ul><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22html%22%2C%22code%22%3A%22%3Cdiv%3Ehello%3C%2Fdiv%3E%5Cn%3Cscript%3E%C2%A0%C2%A0%5Cn%20%20window.onmessage%C2%A0%3D%C2%A0e%C2%A0%3D%3E%C2%A0%7B%C2%A0%C2%A0%C2%A0%C2%A0%5Cn%20%20%20%20console.log(e.data)%3B%C2%A0%2F%2F%C2%A0%E7%A7%8B%E9%A3%8E%E7%9A%84%E7%AC%94%E8%AE%B0%C2%A0%C2%A0%C2%A0%C2%A0%5Cn%20%20%20%20e.source.postMessage(e.data%2C%C2%A0e.origin)%3B%C2%A0%5Cn%20%20%7D%3B%5Cn%3C%2Fscript%3E%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22rxUa4%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h3 data-lake-id=\"Lab8V\" id=\"Lab8V\"><span data-lake-id=\"u27608348\" id=\"u27608348\">document.domain + iframe</span></h3><p data-lake-id=\"ubd1d809a\" id=\"ubd1d809a\"><span data-lake-id=\"u057a9545\" id=\"u057a9545\">实现原理：两个页面都通过 javaScript 强制设置 document.domain 为基础主域，这样就实现了同域</span></p><blockquote data-lake-id=\"u4f81be31\" id=\"u4f81be31\" class=\"lake-alert lake-alert-info\"><p data-lake-id=\"u34f7b4ec\" id=\"u34f7b4ec\"><span data-lake-id=\"ua63599b1\" id=\"ua63599b1\">此方案仅限主域相同，子域不同的跨域应用场景</span></p></blockquote><ul list=\"uf53c27c7\"><li fid=\"ufcc74891\" data-lake-id=\"u0da09a37\" id=\"u0da09a37\"><span data-lake-id=\"uc2394baa\" id=\"uc2394baa\">主窗口</span></li></ul><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22html%22%2C%22code%22%3A%22%3Ciframe%20id%3D'iframe'%20src%3D'http%3A%2F%2Fchild.domain.com%2Fb.html'%3E%3C%2Fiframe%3E%5Cn%3Cscript%3E%5Cn%5Ctdocument.domain%20%3D%20'domain.com'%5Cn%20%20var%20user%20%3D%20'admin'%5Cn%3C%2Fscript%3E%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22kZvAb%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><ul list=\"uf53c27c7\" start=\"2\"><li fid=\"ufcc74891\" data-lake-id=\"uc250efbb\" id=\"uc250efbb\"><span data-lake-id=\"u8ba2bd3a\" id=\"u8ba2bd3a\">子窗口</span></li></ul><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22html%22%2C%22code%22%3A%22%3Cscript%3E%5Cn%5Ctdocument.domain%20%3D%20'domain.com'%5Cn%20%20%2F%2F%20%E8%8E%B7%E5%8F%96%E7%88%B6%E7%AA%97%E5%8F%A3%E4%B8%AD%E5%8F%98%E9%87%8F%5Cn%20%20console.log(window.parent.user)%5Cn%3C%2Fscript%3E%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22xS7oM%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h3 data-lake-id=\"e9zoq\" id=\"e9zoq\"><span data-lake-id=\"u7850ac8a\" id=\"u7850ac8a\">window.location.hash + iframe</span></h3><p data-lake-id=\"u6232b5ab\" id=\"u6232b5ab\"><span data-lake-id=\"u8673e339\" id=\"u8673e339\">实现原理：</span><span data-lake-id=\"ufd69665d\" id=\"ufd69665d\" class=\"lake-fontsize-12\" style=\"color: rgb(51, 51, 51)\">通过 url 带 hash ，通过一个非跨域的中间页面来传递数据</span></p><ul list=\"u0a6dee58\"><li fid=\"u1e7ebd48\" data-lake-id=\"u72c56e99\" id=\"u72c56e99\"><span data-lake-id=\"u195d323b\" id=\"u195d323b\">a,html</span></li></ul><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22html%22%2C%22code%22%3A%22%3Ciframe%20src%3D%5C%22http%3A%2F%2Flocalhost%3A8080%2Fhash%2Fc.html%23name1%5C%22%3E%3C%2Fiframe%3E%5Cn%3Cscript%3E%5Cn%20%20console.log(location.hash)%3B%5Cn%20%20window.onhashchange%20%3D%20function()%20%7B%5Cn%20%20%20%20console.log(location.hash)%3B%5Cn%20%20%7D%3B%5Cn%3C%2Fscript%3E%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22gsMJw%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><ul list=\"u0a6dee58\" start=\"2\"><li fid=\"u1e7ebd48\" data-lake-id=\"ue5b4e5d5\" id=\"ue5b4e5d5\"><span data-lake-id=\"u22a85ca5\" id=\"u22a85ca5\">b.html</span></li></ul><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22html%22%2C%22code%22%3A%22%3Cscript%3E%5Cn%20%20window.parent.parent.location.hash%20%3D%20location.hash%3B%5Cn%3C%2Fscript%3E%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22rFA1M%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><ul list=\"u0a6dee58\" start=\"3\"><li fid=\"u1e7ebd48\" data-lake-id=\"ufc9cc5ba\" id=\"ufc9cc5ba\"><span data-lake-id=\"u7c4bfa3d\" id=\"u7c4bfa3d\">c.html</span></li></ul><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22html%22%2C%22code%22%3A%22%3Cscript%3E%5Cn%5Ctconsole.log(location.hash)%3B%C2%A0%C2%A0%5Cn%20%20const%C2%A0iframe%C2%A0%3D%C2%A0document.createElement(%5C%22iframe%5C%22)%3B%C2%A0%C2%A0%5Cn%20%20iframe.src%C2%A0%3D%C2%A0%5C%22http%3A%2F%2Flocalhost%3A8000%2Fhash%2Fb.html%23name2%5C%22%3B%C2%A0%C2%A0%5Cn%20%20document.body.appendChild(iframe)%3B%5Cn%3C%2Fscript%3E%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22BGhhn%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h3 data-lake-id=\"GRRUT\" id=\"GRRUT\"><span data-lake-id=\"u2e3e311b\" id=\"u2e3e311b\">window.name + iframe</span></h3><p data-lake-id=\"u1a4dd23e\" id=\"u1a4dd23e\"><span data-lake-id=\"u8fced595\" id=\"u8fced595\">window 对象的 name 属性是一个很特别的属性，当该 window 的 location 变化，然后重新加载，它的 name 属性可以依然保持不变</span></p><p data-lake-id=\"ua2a6d257\" id=\"ua2a6d257\"><span data-lake-id=\"u2fe34e63\" id=\"u2fe34e63\">​</span><br></p><p data-lake-id=\"uf95b96b7\" id=\"uf95b96b7\"><span data-lake-id=\"uf0da57b2\" id=\"uf0da57b2\">其中 a.html 和 b.html 是同域的，都是 http://localhost:8000，而 c.html 是 http://localhost:8080</span></p><ul list=\"u63fd18ab\"><li fid=\"uabb7893f\" data-lake-id=\"u19d0a4be\" id=\"u19d0a4be\"><span data-lake-id=\"ubb5e7f05\" id=\"ubb5e7f05\">a.html</span></li></ul><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22html%22%2C%22code%22%3A%22%3Ciframe%5Cn%20%20src%3D%5C%22http%3A%2F%2Flocalhost%3A8080%2Fname%2Fc.html%5C%22%5Cn%20%20frameborder%3D%5C%220%5C%22%5Cn%20%20onload%3D%5C%22load()%5C%22%5Cn%20%20id%3D%5C%22iframe%5C%22%5Cn%3E%3C%2Fiframe%3E%5Cn%3Cscript%3E%5Cn%5Ctlet%20first%20%3D%20true%5Cn%20%20%2F%2F%20onload%20%E4%BA%8B%E4%BB%B6%E4%BC%9A%E8%A7%A6%E5%8F%91%202%20%E6%AC%A1%EF%BC%8C%E7%AC%AC%201%20%E6%AC%A1%E5%8A%A0%E8%BD%BD%E8%B7%A8%E5%9F%9F%E9%A1%B5%EF%BC%8C%E5%B9%B6%E7%95%99%E5%AD%98%E6%95%B0%E6%8D%AE%E4%BA%8E%20window.name%5Cn%20%20function%20load()%20%7B%5Cn%20%20%5Ctif%20(first)%20%7B%5Cn%20%20%20%20%5Ct%2F%2F%20%E7%AC%AC%201%20%E6%AC%A1%20onload(%E8%B7%A8%E5%9F%9F%E9%A1%B5)%E6%88%90%E5%8A%9F%E5%90%8E%EF%BC%8C%E5%88%87%E6%8D%A2%E5%88%B0%E5%90%8C%E5%9F%9F%E4%BB%A3%E7%90%86%E9%A1%B5%E9%9D%A2%5Cn%20%20%20%20%20%20iframe.src%20%3D%20'http%3A%2F%2Flocalhost%3A8000%2Fname%2Fb.html'%5Cn%20%20%20%20%7D%20else%20%7B%5Cn%20%20%20%20%5Ct%2F%2F%20%E7%AC%AC%202%20%E6%AC%A1%20onload(%E5%90%8C%E5%9F%9F%20b.html%20%E9%A1%B5)%E6%88%90%E5%8A%9F%E5%90%8E%EF%BC%8C%E8%AF%BB%E5%8F%96%E5%90%8C%E5%9F%9F%20window.name%20%E4%B8%AD%E6%95%B0%E6%8D%AE%5Cn%20%20%20%20%20%20console.log(iframe.contentWindow.name)%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%3C%2Fscript%3E%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22T0uyz%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><ul list=\"u68a44a79\"><li fid=\"u468ebc02\" data-lake-id=\"udbe340aa\" id=\"udbe340aa\"><span data-lake-id=\"ue3407699\" id=\"ue3407699\">b.html 中间代理页，与 a.html 同域，内容为空</span></li></ul><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22html%22%2C%22code%22%3A%22%3Cdiv%3E%3C%2Fdiv%3E%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22EETZJ%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><ul list=\"u68a44a79\" start=\"2\"><li fid=\"u468ebc02\" data-lake-id=\"u81eafcd7\" id=\"u81eafcd7\"><span data-lake-id=\"u7a87818d\" id=\"u7a87818d\">c.html</span></li></ul><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22html%22%2C%22code%22%3A%22%3Cscript%3E%5Cn%5Ctwindow.name%20%3D%20'%E5%8F%91%E9%80%81%E5%86%85%E5%AE%B9'%5Cn%3C%2Fscript%3E%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22xt3RU%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><blockquote data-lake-id=\"u76c9855d\" id=\"u76c9855d\" class=\"lake-alert lake-alert-info\"><p data-lake-id=\"uc08c057c\" id=\"uc08c057c\"><span data-lake-id=\"uc52d5d47\" id=\"uc52d5d47\">通过 iframe 的 src 属性由外域转向本地域，跨域数据即由 iframe 的 window.name 从外域传递到本地域。这个就巧妙地绕过了浏览器的跨域访问限制，但同时它又是安全操作</span></p></blockquote><h3 data-lake-id=\"LEr2B\" id=\"LEr2B\"><span data-lake-id=\"u18425f11\" id=\"u18425f11\">借助 charles/fiddler 接口代理</span></h3><h3 data-lake-id=\"B66rV\" id=\"B66rV\"><span data-lake-id=\"u402f73f1\" id=\"u402f73f1\">浏览器开启跨域</span></h3><p data-lake-id=\"uc448af43\" id=\"uc448af43\"><span data-lake-id=\"u6cf04c32\" id=\"u6cf04c32\">可以通过修改浏览器的配置来关闭默认的跨域方案</span></p><p data-lake-id=\"u57e647b5\" id=\"u57e647b5\"><span data-lake-id=\"u28bda4cc\" id=\"u28bda4cc\"> \t\t</span></p><p data-lake-id=\"u974086d2\" id=\"u974086d2\"><span data-lake-id=\"u05d892df\" id=\"u05d892df\"> \t </span></p>",
  "body_draft_lake": "",
  "public": 0,
  "status": 1,
  "view_status": 0,
  "read_status": 1,
  "likes_count": 0,
  "comments_count": 0,
  "content_updated_at": "2022-04-04T11:32:54.000Z",
  "deleted_at": null,
  "created_at": "2022-04-04T11:32:54.000Z",
  "updated_at": "2022-05-10T15:12:41.000Z",
  "published_at": "2022-04-04T11:32:54.000Z",
  "first_published_at": "2022-04-04T11:32:54.435Z",
  "word_count": 1329,
  "cover": null,
  "description": "同源策略是一种安全策略。所谓的同源，指的是协议，域名，端口相同。浏览器处于安全方面的考虑，只允许本域名下的接口交互，不同源的客户端脚本，在没有明确授权的情况下，不能读写对方的资源跨域解决方案cors跨域资源共享 CORS 是一种机制，它使用额外的 HTTP 头来告诉浏览器，让运行在一个 ori...",
  "custom_description": null,
  "hits": 0,
  "_serializer": "v2.doc_detail"
}