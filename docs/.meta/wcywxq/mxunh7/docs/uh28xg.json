{
  "id": 72212115,
  "slug": "uh28xg",
  "title": "vue2 数据响应式原理",
  "book_id": 26225124,
  "book": {
    "id": 26225124,
    "type": "Book",
    "slug": "mxunh7",
    "name": "八股文 eight-part essay writing",
    "user_id": 732231,
    "description": "前端八股文",
    "creator_id": 732231,
    "public": 0,
    "items_count": 239,
    "likes_count": 0,
    "watches_count": 1,
    "content_updated_at": "2023-11-11T18:15:57.023Z",
    "updated_at": "2023-11-11T18:15:57.000Z",
    "created_at": "2022-04-04T11:31:45.000Z",
    "namespace": "wcywxq/mxunh7",
    "user": {
      "id": 732231,
      "type": "User",
      "login": "wcywxq",
      "name": "magic",
      "description": null,
      "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/732231/1606968271774-avatar/886ad88b-d2cc-4c9e-a674-f70eb51a679c.png",
      "books_count": 18,
      "public_books_count": 0,
      "followers_count": 0,
      "following_count": 0,
      "created_at": "2020-01-08T14:21:31.000Z",
      "updated_at": "2023-11-13T09:32:35.000Z",
      "_serializer": "v2.user"
    },
    "_serializer": "v2.book"
  },
  "user_id": 732231,
  "creator": {
    "id": 732231,
    "type": "User",
    "login": "wcywxq",
    "name": "magic",
    "description": null,
    "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/732231/1606968271774-avatar/886ad88b-d2cc-4c9e-a674-f70eb51a679c.png",
    "books_count": 18,
    "public_books_count": 0,
    "followers_count": 0,
    "following_count": 0,
    "created_at": "2020-01-08T14:21:31.000Z",
    "updated_at": "2023-11-13T09:32:35.000Z",
    "_serializer": "v2.user"
  },
  "format": "lake",
  "body": "![image.png](https://cdn.nlark.com/yuque/0/2022/png/732231/1648097561264-8c56f955-19f3-4a9b-9879-29fec37fd5f0.png#clientId=u6fb1c7ff-e9e8-4&from=paste&height=390&id=u123ab0de&originHeight=390&originWidth=730&originalType=binary&ratio=1&rotation=0&showTitle=false&size=145227&status=done&style=none&taskId=uac58e419-85ff-4093-a6d4-81830f7c2f0&title=&width=730)\n<a name=\"KIdSB\"></a>\n### 概述\n通过数据劫持结合发布-订阅者模式，通过 Object.defineProperty 来拦截各个属性的 getter 和 setter，当数据发生变化时，发布消息给订阅者，触发相应的监听回调\n:::info\n在 vue2 中，响应式处理默认是递归的，一旦数据层级太深内存消耗会高，因此数据要尽量扁平化。\n:::\n<a name=\"JRAeb\"></a>\n### 核心实现\n\n- 四个核心类\n   - Observer：负责将对象、数组转换为响应式的，即数据劫持的工作\n   - Compile：编译模版，只要模版内引用了 data 内的属性，就创建一个 Watcher，通过 Watcher 与更新函数、渲染函数之间建立一个关系\n   - Watcher：属于中间人的角色，负责依赖收集，收到的依赖是一个个 Dep 类的实例化对象\n   - Dep：用于收集当前响应式对象的依赖关系，每个响应式对象都有一个 dep 实例，dep.subs = watcher[]，当数据发生变更的时候，会通过 dep.notify() 通知各个 watcher\n- 三种 watcher\n   - initState 和计算属性初始化时，会触发 computed watcher 进行依赖收集\n   - initState 和监听属性初始化时，会触发 user watcher 进行依赖收集\n   - render 渲染时，会触发 render watcher 进行依赖收集\n- 触发更新的流程\n   - 组件中对响应式数据进行修改，触发 setter\n   - 数据发生变更时，通过 dep.notify 通知各个 watcher\n   - 遍历所有 subs，调用每个 watcher 的 update 方法\n:::info\n总结：<br />vue2 源码中 src/core 有一个 observer 模块，它就是 vue2 中处理响应式的地方了，在这个模块下，observer 负责将对象、数组转换为响应式的，处理 data 中的 getter 和 setter。当 data 中的选项被访问时，会触发 getter，此时 observer 目录下的 watcher.js 模块就会开始工作，它的任务是进行依赖收集，我们收到的依赖是一个个 Dep 类的实例化对象。而 data 中的选项发生变更时，会触发 setter 的调用，在 setter 的过程中，会触发 dep.notify 函数，派发更新时间，由此实现数据的响应监听\n:::\n",
  "body_draft": "",
  "body_html": "<!doctype html><p data-lake-id=\"u42250972\"><img alt=\"image.png\" src=\"https://cdn.nlark.com/yuque/0/2022/png/732231/1648097561264-8c56f955-19f3-4a9b-9879-29fec37fd5f0.png#clientId=u6fb1c7ff-e9e8-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=390&amp;id=u123ab0de&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=390&amp;originWidth=730&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=145227&amp;status=done&amp;style=none&amp;taskId=uac58e419-85ff-4093-a6d4-81830f7c2f0&amp;title=&amp;width=730\" style=\"max-width: 600px; width: 730px;\" /></p><h3 id=\"KIdSB\"><span>概述</span></h3><p data-lake-id=\"u3ba2f2f8\"><span>通过数据劫持结合发布-订阅者模式，通过 Object.defineProperty 来拦截各个属性的 getter 和 setter，当数据发生变化时，发布消息给订阅者，触发相应的监听回调</span></p><blockquote class=\"lake-alert lake-alert-info\"><p data-lake-id=\"u705362c7\"><span>在 vue2 中，响应式处理默认是递归的，一旦数据层级太深内存消耗会高，因此数据要尽量扁平化。</span></p></blockquote><h3 id=\"JRAeb\"><span>核心实现</span></h3><ul><li><span>四个核心类</span></li></ul><ul data-lake-indent=\"1\"><li><span>Observer：负责将对象、数组转换为响应式的，即数据劫持的工作</span></li><li><span>Compile：编译模版，只要模版内引用了 data 内的属性，就创建一个 Watcher，通过 Watcher 与更新函数、渲染函数之间建立一个关系</span></li><li><span>Watcher：属于中间人的角色，负责依赖收集，收到的依赖是一个个 Dep 类的实例化对象</span></li><li><span>Dep：用于收集当前响应式对象的依赖关系，每个响应式对象都有一个 dep 实例，dep.subs = watcher[]，当数据发生变更的时候，会通过 dep.notify() 通知各个 watcher</span></li></ul><ul><li><span>三种 watcher</span></li></ul><ul data-lake-indent=\"1\"><li><span>initState 和计算属性初始化时，会触发 computed watcher 进行依赖收集</span></li><li><span>initState 和监听属性初始化时，会触发 user watcher 进行依赖收集</span></li><li><span>render 渲染时，会触发 render watcher 进行依赖收集</span></li></ul><ul><li><span>触发更新的流程</span></li></ul><ul data-lake-indent=\"1\"><li><span>组件中对响应式数据进行修改，触发 setter</span></li><li><span>数据发生变更时，通过 dep.notify 通知各个 watcher</span></li><li><span>遍历所有 subs，调用每个 watcher 的 update 方法</span></li></ul><blockquote class=\"lake-alert lake-alert-info\"><p data-lake-id=\"u505fe616\"><span>总结：</span></p><p data-lake-id=\"ud8c9758d\"><span>vue2 源码中 src/core 有一个 observer 模块，它就是 vue2 中处理响应式的地方了，在这个模块下，observer 负责将对象、数组转换为响应式的，处理 data 中的 getter 和 setter。当 data 中的选项被访问时，会触发 getter，此时 observer 目录下的 watcher.js 模块就会开始工作，它的任务是进行依赖收集，我们收到的依赖是一个个 Dep 类的实例化对象。而 data 中的选项发生变更时，会触发 setter 的调用，在 setter 的过程中，会触发 dep.notify 函数，派发更新时间，由此实现数据的响应监听</span></p></blockquote>",
  "body_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"viewport\" content=\"adapt\" /><p data-lake-id=\"u42250972\" id=\"u42250972\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2022%2Fpng%2F732231%2F1648097561264-8c56f955-19f3-4a9b-9879-29fec37fd5f0.png%22%2C%22taskId%22%3A%22uac58e419-85ff-4093-a6d4-81830f7c2f0%22%2C%22clientId%22%3A%22u6fb1c7ff-e9e8-4%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A730%2C%22height%22%3A390%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A145227%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A730%2C%22originHeight%22%3A390%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%E5%8A%AB%E6%8C%81%E7%9B%91%E5%90%AC%E6%89%80%E6%9C%89%E5%B1%9E%E6%80%A7%20DEP%20%E9%80%9A%E7%9F%A5%E5%8F%98%E5%8C%96%20%E9%80%9A%E7%9F%A5%E5%8F%98%E5%8C%96%20OBSERVER%20%E6%B7%BB%E5%8A%A0%E8%AE%A2%E9%98%85%E8%80%85%20NEW%20MWM()%20%E8%AE%A2%E9%98%85%E6%95%B0%E6%8D%AE%E5%8F%98%E5%8C%96%2C%E7%BB%91%E5%AE%9A%E6%9B%B4%E6%96%B0%E5%87%BD%E6%95%B0%20COMPILE%20WATCHER%20%E8%A7%A3%E6%9E%90%E6%8C%87%E4%BB%A4%20%E5%88%9D%E5%A7%8B%E5%8C%96%E8%A7%86%E5%9B%BE%20%E6%9B%B4%E6%96%B0%E8%A7%86%E5%9B%BE%20UPDATER%20%E7%A8%80%E5%9C%9F%E6%8E%98%E9%87%91%E6%8A%80%E6%9C%AF%E7%A4%BE%E5%8C%BA%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A228.26135%2C%22y%22%3A39.971466%2C%22width%22%3A112.24887000000001%2C%22height%22%3A16.486431000000003%2C%22text%22%3A%22%E5%8A%AB%E6%8C%81%E7%9B%91%E5%90%AC%E6%89%80%E6%9C%89%E5%B1%9E%E6%80%A7%22%7D%2C%7B%22x%22%3A477.27255%2C%22y%22%3A46.02916%2C%22width%22%3A30.16396999999995%2C%22height%22%3A14.685638000000004%2C%22text%22%3A%22DEP%22%7D%2C%7B%22x%22%3A359.7385%2C%22y%22%3A65.10204%2C%22width%22%3A58.18887000000001%2C%22height%22%3A16.965040000000002%2C%22text%22%3A%22%E9%80%9A%E7%9F%A5%E5%8F%98%E5%8C%96%22%7D%2C%7B%22x%22%3A600.2682%2C%22y%22%3A83.37328%2C%22width%22%3A58.327600000000075%2C%22height%22%3A18.151740000000004%2C%22text%22%3A%22%E9%80%9A%E7%9F%A5%E5%8F%98%E5%8C%96%22%7D%2C%7B%22x%22%3A252.0283%2C%22y%22%3A85.32459%2C%22width%22%3A66.12484%2C%22height%22%3A13.841369999999998%2C%22text%22%3A%22OBSERVER%22%7D%2C%7B%22x%22%3A534.93085%2C%22y%22%3A145.0355%2C%22width%22%3A66.59350000000006%2C%22height%22%3A14.030619999999999%2C%22text%22%3A%22%E6%B7%BB%E5%8A%A0%E8%AE%A2%E9%98%85%E8%80%85%22%7D%2C%7B%22x%22%3A31.570251%2C%22y%22%3A149.82188%2C%22width%22%3A94.851419%2C%22height%22%3A15.99851000000001%2C%22text%22%3A%22NEW%20MWM()%22%7D%2C%7B%22x%22%3A379.54434%2C%22y%22%3A200.01625%2C%22width%22%3A185.36115999999998%2C%22height%22%3A17.051559999999995%2C%22text%22%3A%22%E8%AE%A2%E9%98%85%E6%95%B0%E6%8D%AE%E5%8F%98%E5%8C%96%2C%E7%BB%91%E5%AE%9A%E6%9B%B4%E6%96%B0%E5%87%BD%E6%95%B0%22%7D%2C%7B%22x%22%3A254.76277%2C%22y%22%3A204.4199%2C%22width%22%3A59.56623000000002%2C%22height%22%3A14.985359999999986%2C%22text%22%3A%22COMPILE%22%7D%2C%7B%22x%22%3A630.15015%2C%22y%22%3A212.70958%2C%22width%22%3A60.96330999999998%2C%22height%22%3A13.966430000000003%2C%22text%22%3A%22WATCHER%22%7D%2C%7B%22x%22%3A255.44185%2C%22y%22%3A258.79208%2C%22width%22%3A57.37135000000001%2C%22height%22%3A17.603400000000022%2C%22text%22%3A%22%E8%A7%A3%E6%9E%90%E6%8C%87%E4%BB%A4%22%7D%2C%7B%22x%22%3A350.7495%2C%22y%22%3A271.18982%2C%22width%22%3A72.42676999999998%2C%22height%22%3A15.47678000000002%2C%22text%22%3A%22%E5%88%9D%E5%A7%8B%E5%8C%96%E8%A7%86%E5%9B%BE%22%7D%2C%7B%22x%22%3A539.8857%2C%22y%22%3A280.60504%2C%22width%22%3A57.65199999999993%2C%22height%22%3A16.18082000000004%2C%22text%22%3A%22%E6%9B%B4%E6%96%B0%E8%A7%86%E5%9B%BE%22%7D%2C%7B%22x%22%3A456.1088%2C%22y%22%3A334.26535%2C%22width%22%3A55.47753%2C%22height%22%3A14.580150000000003%2C%22text%22%3A%22UPDATER%22%7D%2C%7B%22x%22%3A573.16626%2C%22y%22%3A356.11365%2C%22width%22%3A143.50049%2C%22height%22%3A18.695949999999982%2C%22text%22%3A%22%E7%A8%80%E5%9C%9F%E6%8E%98%E9%87%91%E6%8A%80%E6%9C%AF%E7%A4%BE%E5%8C%BA%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22id%22%3A%22u123ab0de%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><h3 data-lake-id=\"KIdSB\" id=\"KIdSB\"><span data-lake-id=\"u986e3fd2\" id=\"u986e3fd2\">概述</span></h3><p data-lake-id=\"u3ba2f2f8\" id=\"u3ba2f2f8\"><span data-lake-id=\"u8fba41bd\" id=\"u8fba41bd\">通过数据劫持结合发布-订阅者模式，通过 Object.defineProperty 来拦截各个属性的 getter 和 setter，当数据发生变化时，发布消息给订阅者，触发相应的监听回调</span></p><blockquote data-lake-id=\"u0e6b3c60\" id=\"u0e6b3c60\" class=\"lake-alert lake-alert-info\"><p data-lake-id=\"u705362c7\" id=\"u705362c7\"><span data-lake-id=\"u9b571599\" id=\"u9b571599\">在 vue2 中，响应式处理默认是递归的，一旦数据层级太深内存消耗会高，因此数据要尽量扁平化。</span></p></blockquote><h3 data-lake-id=\"JRAeb\" id=\"JRAeb\"><span data-lake-id=\"uba5b6523\" id=\"uba5b6523\">核心实现</span></h3><ul list=\"u0c235081\"><li fid=\"ua19bdfdb\" data-lake-id=\"uaffa9a1a\" id=\"uaffa9a1a\"><span data-lake-id=\"uf238cf80\" id=\"uf238cf80\">四个核心类</span></li></ul><ul list=\"u0c235081\" data-lake-indent=\"1\"><li fid=\"ua19bdfdb\" data-lake-id=\"u4e2deced\" id=\"u4e2deced\"><span data-lake-id=\"u80712f2e\" id=\"u80712f2e\">Observer：负责将对象、数组转换为响应式的，即数据劫持的工作</span></li><li fid=\"ua19bdfdb\" data-lake-id=\"u6198d514\" id=\"u6198d514\"><span data-lake-id=\"ub3c2a8fe\" id=\"ub3c2a8fe\">Compile：编译模版，只要模版内引用了 data 内的属性，就创建一个 Watcher，通过 Watcher 与更新函数、渲染函数之间建立一个关系</span></li><li fid=\"ua19bdfdb\" data-lake-id=\"u4d7e299b\" id=\"u4d7e299b\"><span data-lake-id=\"u0caf4319\" id=\"u0caf4319\">Watcher：属于中间人的角色，负责依赖收集，收到的依赖是一个个 Dep 类的实例化对象</span></li><li fid=\"ua19bdfdb\" data-lake-id=\"u01adcdc2\" id=\"u01adcdc2\"><span data-lake-id=\"u5986946c\" id=\"u5986946c\">Dep：用于收集当前响应式对象的依赖关系，每个响应式对象都有一个 dep 实例，dep.subs = watcher[]，当数据发生变更的时候，会通过 dep.notify() 通知各个 watcher</span></li></ul><ul list=\"u0c235081\" start=\"2\"><li fid=\"ua19bdfdb\" data-lake-id=\"ud75668f2\" id=\"ud75668f2\"><span data-lake-id=\"u4048526a\" id=\"u4048526a\">三种 watcher</span></li></ul><ul list=\"u0c235081\" data-lake-indent=\"1\"><li fid=\"ua19bdfdb\" data-lake-id=\"u0152ab0f\" id=\"u0152ab0f\"><span data-lake-id=\"u79d21f9e\" id=\"u79d21f9e\">initState 和计算属性初始化时，会触发 computed watcher 进行依赖收集</span></li><li fid=\"ua19bdfdb\" data-lake-id=\"ubb9e0bb1\" id=\"ubb9e0bb1\"><span data-lake-id=\"u76dc9046\" id=\"u76dc9046\">initState 和监听属性初始化时，会触发 user watcher 进行依赖收集</span></li><li fid=\"ua19bdfdb\" data-lake-id=\"u017e59ec\" id=\"u017e59ec\"><span data-lake-id=\"ufdf9617e\" id=\"ufdf9617e\">render 渲染时，会触发 render watcher 进行依赖收集</span></li></ul><ul list=\"u0c235081\" start=\"3\"><li fid=\"ua19bdfdb\" data-lake-id=\"u549039ff\" id=\"u549039ff\"><span data-lake-id=\"u5ecbf9cb\" id=\"u5ecbf9cb\">触发更新的流程</span></li></ul><ul list=\"u0c235081\" data-lake-indent=\"1\"><li fid=\"ua19bdfdb\" data-lake-id=\"ud1c701a3\" id=\"ud1c701a3\"><span data-lake-id=\"u54ce3275\" id=\"u54ce3275\">组件中对响应式数据进行修改，触发 setter</span></li><li fid=\"ua19bdfdb\" data-lake-id=\"u3e85e6e6\" id=\"u3e85e6e6\"><span data-lake-id=\"u5fb98784\" id=\"u5fb98784\">数据发生变更时，通过 dep.notify 通知各个 watcher</span></li><li fid=\"ua19bdfdb\" data-lake-id=\"u3ea3a235\" id=\"u3ea3a235\"><span data-lake-id=\"u8ad3e697\" id=\"u8ad3e697\">遍历所有 subs，调用每个 watcher 的 update 方法</span></li></ul><blockquote data-lake-id=\"uf9514565\" id=\"uf9514565\" class=\"lake-alert lake-alert-info\"><p data-lake-id=\"u505fe616\" id=\"u505fe616\"><span data-lake-id=\"u7a12038e\" id=\"u7a12038e\">总结：</span></p><p data-lake-id=\"ud8c9758d\" id=\"ud8c9758d\"><span data-lake-id=\"ufc5e3c65\" id=\"ufc5e3c65\">vue2 源码中 src/core 有一个 observer 模块，它就是 vue2 中处理响应式的地方了，在这个模块下，observer 负责将对象、数组转换为响应式的，处理 data 中的 getter 和 setter。当 data 中的选项被访问时，会触发 getter，此时 observer 目录下的 watcher.js 模块就会开始工作，它的任务是进行依赖收集，我们收到的依赖是一个个 Dep 类的实例化对象。而 data 中的选项发生变更时，会触发 setter 的调用，在 setter 的过程中，会触发 dep.notify 函数，派发更新时间，由此实现数据的响应监听</span></p></blockquote>",
  "body_draft_lake": "",
  "public": 0,
  "status": 1,
  "view_status": 0,
  "read_status": 1,
  "likes_count": 0,
  "comments_count": 0,
  "content_updated_at": "2022-04-04T11:33:06.000Z",
  "deleted_at": null,
  "created_at": "2022-04-04T11:33:06.000Z",
  "updated_at": "2022-05-10T15:12:40.000Z",
  "published_at": "2022-04-04T11:33:06.000Z",
  "first_published_at": "2022-04-04T11:33:06.323Z",
  "word_count": 578,
  "cover": "https://cdn.nlark.com/yuque/0/2022/png/732231/1648097561264-8c56f955-19f3-4a9b-9879-29fec37fd5f0.png",
  "description": "概述通过数据劫持结合发布-订阅者模式，通过 Object.defineProperty 来拦截各个属性的 getter 和 setter，当数据发生变化时，发布消息给订阅者，触发相应的监听回调在 vue2 中，响应式处理默认是递归的，一旦数据层级太深内存消耗会高，因此数据要尽量扁平化。核心实现...",
  "custom_description": null,
  "hits": 0,
  "_serializer": "v2.doc_detail"
}