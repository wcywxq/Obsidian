{
  "id": 72212221,
  "slug": "glhczw",
  "title": "props.children 和 React.Children 的区别",
  "book_id": 26225124,
  "book": {
    "id": 26225124,
    "type": "Book",
    "slug": "mxunh7",
    "name": "八股文 eight-part essay writing",
    "user_id": 732231,
    "description": "前端八股文",
    "creator_id": 732231,
    "public": 0,
    "items_count": 239,
    "likes_count": 0,
    "watches_count": 1,
    "content_updated_at": "2023-11-11T18:15:57.023Z",
    "updated_at": "2023-11-11T18:15:57.000Z",
    "created_at": "2022-04-04T11:31:45.000Z",
    "namespace": "wcywxq/mxunh7",
    "user": {
      "id": 732231,
      "type": "User",
      "login": "wcywxq",
      "name": "magic",
      "description": null,
      "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/732231/1606968271774-avatar/886ad88b-d2cc-4c9e-a674-f70eb51a679c.png",
      "books_count": 18,
      "public_books_count": 0,
      "followers_count": 0,
      "following_count": 0,
      "created_at": "2020-01-08T14:21:31.000Z",
      "updated_at": "2023-11-13T09:32:35.000Z",
      "_serializer": "v2.user"
    },
    "_serializer": "v2.book"
  },
  "user_id": 732231,
  "creator": {
    "id": 732231,
    "type": "User",
    "login": "wcywxq",
    "name": "magic",
    "description": null,
    "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/732231/1606968271774-avatar/886ad88b-d2cc-4c9e-a674-f70eb51a679c.png",
    "books_count": 18,
    "public_books_count": 0,
    "followers_count": 0,
    "following_count": 0,
    "created_at": "2020-01-08T14:21:31.000Z",
    "updated_at": "2023-11-13T09:32:35.000Z",
    "_serializer": "v2.user"
  },
  "format": "lake",
  "body": "在 `React` 中，当涉及组件嵌套，在父组件中使用 `props.children` 把所有子组件显示出来。如下：\n```jsx\nfunction ParentComponent(props){\n\treturn (\n\t\t<div>\n\t\t\t{props.children}\n\t\t</div>\n\t)\n}\n```\n如果想把父组件中的属性传给所有的子组件，需要使用 `React.Children` 方法。\n\n比如，把几个 `Radio` 组合起来，合成一个 `RadioGroup`，这就要求所有的 `Radio` 具有同样的 `name` 属性值。可以这样：把 `Radio` 看做子组件，`RadioGroup` 看做父组件，`name` 的属性值在 `RadioGroup` 这个父组件中设置。\n\n首先是子组件：\n```jsx\n//子组件\nfunction RadioOption(props) {\n  return (\n    <label>\n      <input type=\"radio\" value={props.value} name={props.name} />\n      {props.label}\n    </label>\n  )\n}\n```\n然后是父组件，不仅需要把它所有的子组件显示出来，还需要为每个子组件赋上 `name` 属性和值：\n```jsx\n//父组件用,props是指父组件的props\nfunction renderChildren(props) {\n  //遍历所有子组件\n  return React.Children.map(props.children, child => {\n    if (child.type === RadioOption)\n      return React.cloneElement(child, {\n        //把父组件的props.name赋值给每个子组件\n        name: props.name\n      })\n    else\n      return child\n  })\n}\n//父组件\nfunction RadioGroup(props) {\n  return (\n    <div>\n      {renderChildren(props)}\n    </div>\n  )\n}\nfunction App() {\n  return (\n    <RadioGroup name=\"hello\">\n      <RadioOption label=\"选项一\" value=\"1\" />\n      <RadioOption label=\"选项二\" value=\"2\" />\n      <RadioOption label=\"选项三\" value=\"3\" />\n    </RadioGroup>\n  )\n}\nexport default App;\n```\n以上，`React.Children.map` 让我们对父组件的所有子组件又更灵活的控制。\n\n<a name=\"k864S\"></a>\n### React.Children.map 和 js 的 map 有什么区别\n\n- `JavaScript` 中的 `map` 不会对为 `null` 或者 `undefined` 的数据进行处理\n- `React.Children.map` 中的 `map` 可以处理 `React.Children` 为 `null` 或者 `undefined` 的情况。如果 `children` 是数组则此方法返回一个数组，如果是 `null` 或 `undefined` 则返回 `null` 或 `undefined`\n- `React.Children.forEach` 一样的原理\n",
  "body_draft": "",
  "body_html": "<!doctype html><div class=\"lake-content\" typography=\"classic\"><p id=\"ue4cf5b3a\" class=\"ne-p\"><span class=\"ne-text\">在 </span><code class=\"ne-code\"><span class=\"ne-text\">React</span></code><span class=\"ne-text\"> 中，当涉及组件嵌套，在父组件中使用 </span><code class=\"ne-code\"><span class=\"ne-text\">props.children</span></code><span class=\"ne-text\"> 把所有子组件显示出来。如下：</span></p><pre data-language=\"jsx\" id=\"VWNGM\" class=\"ne-codeblock language-jsx\">function ParentComponent(props){\n\treturn (\n\t\t&lt;div&gt;\n\t\t\t{props.children}\n\t\t&lt;/div&gt;\n\t)\n}</pre><p id=\"u93edc140\" class=\"ne-p\"><span class=\"ne-text\">如果想把父组件中的属性传给所有的子组件，需要使用 </span><code class=\"ne-code\"><span class=\"ne-text\">React.Children</span></code><span class=\"ne-text\"> 方法。</span></p><p id=\"ud196dd33\" class=\"ne-p\"><span class=\"ne-text\"></span></p><p id=\"uf1a6bb6e\" class=\"ne-p\"><span class=\"ne-text\">比如，把几个 </span><code class=\"ne-code\"><span class=\"ne-text\">Radio</span></code><span class=\"ne-text\"> 组合起来，合成一个 </span><code class=\"ne-code\"><span class=\"ne-text\">RadioGroup</span></code><span class=\"ne-text\">，这就要求所有的 </span><code class=\"ne-code\"><span class=\"ne-text\">Radio</span></code><span class=\"ne-text\"> 具有同样的 </span><code class=\"ne-code\"><span class=\"ne-text\">name</span></code><span class=\"ne-text\"> 属性值。可以这样：把 </span><code class=\"ne-code\"><span class=\"ne-text\">Radio</span></code><span class=\"ne-text\"> 看做子组件，</span><code class=\"ne-code\"><span class=\"ne-text\">RadioGroup</span></code><span class=\"ne-text\"> 看做父组件，</span><code class=\"ne-code\"><span class=\"ne-text\">name</span></code><span class=\"ne-text\"> 的属性值在 </span><code class=\"ne-code\"><span class=\"ne-text\">RadioGroup</span></code><span class=\"ne-text\"> 这个父组件中设置。</span></p><p id=\"u8c56863e\" class=\"ne-p\"><span class=\"ne-text\"></span></p><p id=\"u55c7f0cc\" class=\"ne-p\"><span class=\"ne-text\">首先是子组件：</span></p><pre data-language=\"jsx\" id=\"jtZ6r\" class=\"ne-codeblock language-jsx\">//子组件\nfunction RadioOption(props) {\n  return (\n    &lt;label&gt;\n      &lt;input type=&quot;radio&quot; value={props.value} name={props.name} /&gt;\n      {props.label}\n    &lt;/label&gt;\n  )\n}</pre><p id=\"u681e3c87\" class=\"ne-p\"><span class=\"ne-text\">然后是父组件，不仅需要把它所有的子组件显示出来，还需要为每个子组件赋上 </span><code class=\"ne-code\"><span class=\"ne-text\">name</span></code><span class=\"ne-text\"> 属性和值：</span></p><pre data-language=\"jsx\" id=\"RYwit\" class=\"ne-codeblock language-jsx\">//父组件用,props是指父组件的props\nfunction renderChildren(props) {\n  //遍历所有子组件\n  return React.Children.map(props.children, child =&gt; {\n    if (child.type === RadioOption)\n      return React.cloneElement(child, {\n        //把父组件的props.name赋值给每个子组件\n        name: props.name\n      })\n    else\n      return child\n  })\n}\n//父组件\nfunction RadioGroup(props) {\n  return (\n    &lt;div&gt;\n      {renderChildren(props)}\n    &lt;/div&gt;\n  )\n}\nfunction App() {\n  return (\n    &lt;RadioGroup name=&quot;hello&quot;&gt;\n      &lt;RadioOption label=&quot;选项一&quot; value=&quot;1&quot; /&gt;\n      &lt;RadioOption label=&quot;选项二&quot; value=&quot;2&quot; /&gt;\n      &lt;RadioOption label=&quot;选项三&quot; value=&quot;3&quot; /&gt;\n    &lt;/RadioGroup&gt;\n  )\n}\nexport default App;</pre><p id=\"u5ee9d5b2\" class=\"ne-p\"><span class=\"ne-text\">以上，</span><code class=\"ne-code\"><span class=\"ne-text\">React.Children.map</span></code><span class=\"ne-text\"> 让我们对父组件的所有子组件又更灵活的控制。</span></p><p id=\"ud625a898\" class=\"ne-p\"><span class=\"ne-text\"></span></p><h3 id=\"k864S\"><span class=\"ne-text\">React.Children.map 和 js 的 map 有什么区别</span></h3><ul class=\"ne-ul\"><li id=\"u218e2e13\"><code class=\"ne-code\"><span class=\"ne-text\" style=\"color: rgb(56, 56, 56); font-size: 15px\">JavaScript</span></code><span class=\"ne-text\" style=\"color: rgb(56, 56, 56); font-size: 15px\"> 中的 </span><code class=\"ne-code\"><span class=\"ne-text\" style=\"color: rgb(56, 56, 56); font-size: 15px\">map</span></code><span class=\"ne-text\" style=\"color: rgb(56, 56, 56); font-size: 15px\"> 不会对为 </span><code class=\"ne-code\"><span class=\"ne-text\" style=\"color: rgb(56, 56, 56); font-size: 15px\">null</span></code><span class=\"ne-text\" style=\"color: rgb(56, 56, 56); font-size: 15px\"> 或者 </span><code class=\"ne-code\"><span class=\"ne-text\" style=\"color: rgb(56, 56, 56); font-size: 15px\">undefined</span></code><span class=\"ne-text\" style=\"color: rgb(56, 56, 56); font-size: 15px\"> 的数据进行处理</span></li><li id=\"u46c23a17\"><span class=\"ne-text\" style=\"color: rgb(56, 56, 56); font-size: 15px\"></span><code class=\"ne-code\"><span class=\"ne-text\" style=\"color: rgb(56, 56, 56); font-size: 15px\">React.Children.map</span></code><span class=\"ne-text\" style=\"color: rgb(56, 56, 56); font-size: 15px\"> 中的 </span><code class=\"ne-code\"><span class=\"ne-text\" style=\"color: rgb(56, 56, 56); font-size: 15px\">map</span></code><span class=\"ne-text\" style=\"color: rgb(56, 56, 56); font-size: 15px\"> 可以处理 </span><code class=\"ne-code\"><span class=\"ne-text\" style=\"color: rgb(56, 56, 56); font-size: 15px\">React.Children</span></code><span class=\"ne-text\" style=\"color: rgb(56, 56, 56); font-size: 15px\"> 为 </span><code class=\"ne-code\"><span class=\"ne-text\" style=\"color: rgb(56, 56, 56); font-size: 15px\">null</span></code><span class=\"ne-text\" style=\"color: rgb(56, 56, 56); font-size: 15px\"> 或者 </span><code class=\"ne-code\"><span class=\"ne-text\" style=\"color: rgb(56, 56, 56); font-size: 15px\">undefined</span></code><span class=\"ne-text\" style=\"color: rgb(56, 56, 56); font-size: 15px\"> 的情况。如果 </span><code class=\"ne-code\"><span class=\"ne-text\" style=\"color: rgb(56, 56, 56); font-size: 15px\">children</span></code><span class=\"ne-text\" style=\"color: rgb(56, 56, 56); font-size: 15px\"> 是数组则此方法返回一个数组，如果是 </span><code class=\"ne-code\"><span class=\"ne-text\" style=\"color: rgb(56, 56, 56); font-size: 15px\">null</span></code><span class=\"ne-text\" style=\"color: rgb(56, 56, 56); font-size: 15px\"> 或 </span><code class=\"ne-code\"><span class=\"ne-text\" style=\"color: rgb(56, 56, 56); font-size: 15px\">undefined</span></code><span class=\"ne-text\" style=\"color: rgb(56, 56, 56); font-size: 15px\"> 则返回 </span><code class=\"ne-code\"><span class=\"ne-text\" style=\"color: rgb(56, 56, 56); font-size: 15px\">null</span></code><span class=\"ne-text\" style=\"color: rgb(56, 56, 56); font-size: 15px\"> 或 </span><code class=\"ne-code\"><span class=\"ne-text\" style=\"color: rgb(56, 56, 56); font-size: 15px\">undefined</span></code></li></ul><ul class=\"ne-ul\"><li id=\"u699e7665\"><span class=\"ne-text\" style=\"color: rgb(56, 56, 56); font-size: 15px\"></span><code class=\"ne-code\"><span class=\"ne-text\" style=\"color: rgb(56, 56, 56); font-size: 15px\">React.Children.forEach</span></code><span class=\"ne-text\" style=\"color: rgb(56, 56, 56); font-size: 15px\"> 一样的原理</span></li></ul></div>",
  "body_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"viewport\" content=\"adapt\" /><p data-lake-id=\"ue4cf5b3a\" id=\"ue4cf5b3a\"><span data-lake-id=\"ude383746\" id=\"ude383746\">在 </span><code data-lake-id=\"uaf76d62c\" id=\"uaf76d62c\"><span data-lake-id=\"u9d39a357\" id=\"u9d39a357\">React</span></code><span data-lake-id=\"u523d3424\" id=\"u523d3424\"> 中，当涉及组件嵌套，在父组件中使用 </span><code data-lake-id=\"u7e10b351\" id=\"u7e10b351\"><span data-lake-id=\"u8c46c567\" id=\"u8c46c567\">props.children</span></code><span data-lake-id=\"u89d1d3c2\" id=\"u89d1d3c2\"> 把所有子组件显示出来。如下：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22jsx%22%2C%22code%22%3A%22function%20ParentComponent(props)%7B%5Cn%5Ctreturn%20(%5Cn%5Ct%5Ct%3Cdiv%3E%5Cn%5Ct%5Ct%5Ct%7Bprops.children%7D%5Cn%5Ct%5Ct%3C%2Fdiv%3E%5Cn%5Ct)%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22VWNGM%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u93edc140\" id=\"u93edc140\"><span data-lake-id=\"u38641939\" id=\"u38641939\">如果想把父组件中的属性传给所有的子组件，需要使用 </span><code data-lake-id=\"u0a75a3e9\" id=\"u0a75a3e9\"><span data-lake-id=\"u16cd0143\" id=\"u16cd0143\">React.Children</span></code><span data-lake-id=\"ud96b1188\" id=\"ud96b1188\"> 方法。</span></p><p data-lake-id=\"ud196dd33\" id=\"ud196dd33\"><span data-lake-id=\"ua3c7cdb5\" id=\"ua3c7cdb5\">​</span><br></p><p data-lake-id=\"uf1a6bb6e\" id=\"uf1a6bb6e\"><span data-lake-id=\"u057c1e12\" id=\"u057c1e12\">比如，把几个 </span><code data-lake-id=\"u47a46781\" id=\"u47a46781\"><span data-lake-id=\"u326564e4\" id=\"u326564e4\">Radio</span></code><span data-lake-id=\"uf263a019\" id=\"uf263a019\"> 组合起来，合成一个 </span><code data-lake-id=\"u8a90ce18\" id=\"u8a90ce18\"><span data-lake-id=\"u89adc782\" id=\"u89adc782\">RadioGroup</span></code><span data-lake-id=\"ue0ad1188\" id=\"ue0ad1188\">，这就要求所有的 </span><code data-lake-id=\"ucda43f5e\" id=\"ucda43f5e\"><span data-lake-id=\"u095a6afc\" id=\"u095a6afc\">Radio</span></code><span data-lake-id=\"uda122585\" id=\"uda122585\"> 具有同样的 </span><code data-lake-id=\"ub896da24\" id=\"ub896da24\"><span data-lake-id=\"u4f2c38ae\" id=\"u4f2c38ae\">name</span></code><span data-lake-id=\"u37f3d43b\" id=\"u37f3d43b\"> 属性值。可以这样：把 </span><code data-lake-id=\"u38a774b1\" id=\"u38a774b1\"><span data-lake-id=\"u29fbaec8\" id=\"u29fbaec8\">Radio</span></code><span data-lake-id=\"u787b098d\" id=\"u787b098d\"> 看做子组件，</span><code data-lake-id=\"uace46776\" id=\"uace46776\"><span data-lake-id=\"u4b570932\" id=\"u4b570932\">RadioGroup</span></code><span data-lake-id=\"u05ff3258\" id=\"u05ff3258\"> 看做父组件，</span><code data-lake-id=\"ue1fecf66\" id=\"ue1fecf66\"><span data-lake-id=\"u42559b73\" id=\"u42559b73\">name</span></code><span data-lake-id=\"u81136cad\" id=\"u81136cad\"> 的属性值在 </span><code data-lake-id=\"u8b6c4e5d\" id=\"u8b6c4e5d\"><span data-lake-id=\"uf34618d7\" id=\"uf34618d7\">RadioGroup</span></code><span data-lake-id=\"u272e4a5a\" id=\"u272e4a5a\"> 这个父组件中设置。</span></p><p data-lake-id=\"u8c56863e\" id=\"u8c56863e\"><span data-lake-id=\"u7a48c6c1\" id=\"u7a48c6c1\">​</span><br></p><p data-lake-id=\"u55c7f0cc\" id=\"u55c7f0cc\"><span data-lake-id=\"u6ad01f2b\" id=\"u6ad01f2b\">首先是子组件：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22jsx%22%2C%22code%22%3A%22%2F%2F%E5%AD%90%E7%BB%84%E4%BB%B6%5Cnfunction%20RadioOption(props)%20%7B%5Cn%20%20return%20(%5Cn%20%20%20%20%3Clabel%3E%5Cn%20%20%20%20%20%20%3Cinput%20type%3D%5C%22radio%5C%22%20value%3D%7Bprops.value%7D%20name%3D%7Bprops.name%7D%20%2F%3E%5Cn%20%20%20%20%20%20%7Bprops.label%7D%5Cn%20%20%20%20%3C%2Flabel%3E%5Cn%20%20)%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22jtZ6r%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u681e3c87\" id=\"u681e3c87\"><span data-lake-id=\"ud155716b\" id=\"ud155716b\">然后是父组件，不仅需要把它所有的子组件显示出来，还需要为每个子组件赋上 </span><code data-lake-id=\"ub8944f0c\" id=\"ub8944f0c\"><span data-lake-id=\"u46ec12dc\" id=\"u46ec12dc\">name</span></code><span data-lake-id=\"u284770e4\" id=\"u284770e4\"> 属性和值：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22jsx%22%2C%22code%22%3A%22%2F%2F%E7%88%B6%E7%BB%84%E4%BB%B6%E7%94%A8%2Cprops%E6%98%AF%E6%8C%87%E7%88%B6%E7%BB%84%E4%BB%B6%E7%9A%84props%5Cnfunction%20renderChildren(props)%20%7B%5Cn%20%20%2F%2F%E9%81%8D%E5%8E%86%E6%89%80%E6%9C%89%E5%AD%90%E7%BB%84%E4%BB%B6%5Cn%20%20return%20React.Children.map(props.children%2C%20child%20%3D%3E%20%7B%5Cn%20%20%20%20if%20(child.type%20%3D%3D%3D%20RadioOption)%5Cn%20%20%20%20%20%20return%20React.cloneElement(child%2C%20%7B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E6%8A%8A%E7%88%B6%E7%BB%84%E4%BB%B6%E7%9A%84props.name%E8%B5%8B%E5%80%BC%E7%BB%99%E6%AF%8F%E4%B8%AA%E5%AD%90%E7%BB%84%E4%BB%B6%5Cn%20%20%20%20%20%20%20%20name%3A%20props.name%5Cn%20%20%20%20%20%20%7D)%5Cn%20%20%20%20else%5Cn%20%20%20%20%20%20return%20child%5Cn%20%20%7D)%5Cn%7D%5Cn%2F%2F%E7%88%B6%E7%BB%84%E4%BB%B6%5Cnfunction%20RadioGroup(props)%20%7B%5Cn%20%20return%20(%5Cn%20%20%20%20%3Cdiv%3E%5Cn%20%20%20%20%20%20%7BrenderChildren(props)%7D%5Cn%20%20%20%20%3C%2Fdiv%3E%5Cn%20%20)%5Cn%7D%5Cnfunction%20App()%20%7B%5Cn%20%20return%20(%5Cn%20%20%20%20%3CRadioGroup%20name%3D%5C%22hello%5C%22%3E%5Cn%20%20%20%20%20%20%3CRadioOption%20label%3D%5C%22%E9%80%89%E9%A1%B9%E4%B8%80%5C%22%20value%3D%5C%221%5C%22%20%2F%3E%5Cn%20%20%20%20%20%20%3CRadioOption%20label%3D%5C%22%E9%80%89%E9%A1%B9%E4%BA%8C%5C%22%20value%3D%5C%222%5C%22%20%2F%3E%5Cn%20%20%20%20%20%20%3CRadioOption%20label%3D%5C%22%E9%80%89%E9%A1%B9%E4%B8%89%5C%22%20value%3D%5C%223%5C%22%20%2F%3E%5Cn%20%20%20%20%3C%2FRadioGroup%3E%5Cn%20%20)%5Cn%7D%5Cnexport%20default%20App%3B%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22RYwit%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u5ee9d5b2\" id=\"u5ee9d5b2\"><span data-lake-id=\"u6f417544\" id=\"u6f417544\">以上，</span><code data-lake-id=\"ub5499965\" id=\"ub5499965\"><span data-lake-id=\"ucc0dee62\" id=\"ucc0dee62\">React.Children.map</span></code><span data-lake-id=\"u07657428\" id=\"u07657428\"> 让我们对父组件的所有子组件又更灵活的控制。</span></p><p data-lake-id=\"ud625a898\" id=\"ud625a898\"><span data-lake-id=\"u47054303\" id=\"u47054303\">​</span><br></p><h3 data-lake-id=\"k864S\" id=\"k864S\"><span data-lake-id=\"u4ceb42c9\" id=\"u4ceb42c9\">React.Children.map 和 js 的 map 有什么区别</span></h3><ul list=\"u1244a4fd\"><li fid=\"uc089dee8\" data-lake-id=\"u218e2e13\" id=\"u218e2e13\"><code data-lake-id=\"u64719609\" id=\"u64719609\"><span data-lake-id=\"ub9e54964\" id=\"ub9e54964\" class=\"lake-fontsize-1515\" style=\"color: rgb(56, 56, 56)\">JavaScript</span></code><span data-lake-id=\"u77f0cbb8\" id=\"u77f0cbb8\" class=\"lake-fontsize-1515\" style=\"color: rgb(56, 56, 56)\"> 中的 </span><code data-lake-id=\"u1f90f1a5\" id=\"u1f90f1a5\"><span data-lake-id=\"ud9b546e0\" id=\"ud9b546e0\" class=\"lake-fontsize-1515\" style=\"color: rgb(56, 56, 56)\">map</span></code><span data-lake-id=\"u55afa7cc\" id=\"u55afa7cc\" class=\"lake-fontsize-1515\" style=\"color: rgb(56, 56, 56)\"> 不会对为 </span><code data-lake-id=\"u7e927c46\" id=\"u7e927c46\"><span data-lake-id=\"u0dd6e21c\" id=\"u0dd6e21c\" class=\"lake-fontsize-1515\" style=\"color: rgb(56, 56, 56)\">null</span></code><span data-lake-id=\"ud696e3c1\" id=\"ud696e3c1\" class=\"lake-fontsize-1515\" style=\"color: rgb(56, 56, 56)\"> 或者 </span><code data-lake-id=\"ufb4bc4b3\" id=\"ufb4bc4b3\"><span data-lake-id=\"u1d4cf05b\" id=\"u1d4cf05b\" class=\"lake-fontsize-1515\" style=\"color: rgb(56, 56, 56)\">undefined</span></code><span data-lake-id=\"u4a91f627\" id=\"u4a91f627\" class=\"lake-fontsize-1515\" style=\"color: rgb(56, 56, 56)\"> 的数据进行处理</span></li><li fid=\"uc089dee8\" data-lake-id=\"u46c23a17\" id=\"u46c23a17\"><span data-lake-id=\"u21233a7d\" id=\"u21233a7d\" class=\"lake-fontsize-1515\" style=\"color: rgb(56, 56, 56)\">​</span><code data-lake-id=\"u4b7d41a6\" id=\"u4b7d41a6\"><span data-lake-id=\"ue09cc261\" id=\"ue09cc261\" class=\"lake-fontsize-1515\" style=\"color: rgb(56, 56, 56)\">React.Children.map</span></code><span data-lake-id=\"uc98efc22\" id=\"uc98efc22\" class=\"lake-fontsize-1515\" style=\"color: rgb(56, 56, 56)\"> 中的 </span><code data-lake-id=\"u07a552fe\" id=\"u07a552fe\"><span data-lake-id=\"u132c86df\" id=\"u132c86df\" class=\"lake-fontsize-1515\" style=\"color: rgb(56, 56, 56)\">map</span></code><span data-lake-id=\"uee8f658e\" id=\"uee8f658e\" class=\"lake-fontsize-1515\" style=\"color: rgb(56, 56, 56)\"> 可以处理 </span><code data-lake-id=\"uc28aae3d\" id=\"uc28aae3d\"><span data-lake-id=\"u29e712da\" id=\"u29e712da\" class=\"lake-fontsize-1515\" style=\"color: rgb(56, 56, 56)\">React.Children</span></code><span data-lake-id=\"u3fbefbdb\" id=\"u3fbefbdb\" class=\"lake-fontsize-1515\" style=\"color: rgb(56, 56, 56)\"> 为 </span><code data-lake-id=\"u886433af\" id=\"u886433af\"><span data-lake-id=\"u2db400b7\" id=\"u2db400b7\" class=\"lake-fontsize-1515\" style=\"color: rgb(56, 56, 56)\">null</span></code><span data-lake-id=\"u55aee6e7\" id=\"u55aee6e7\" class=\"lake-fontsize-1515\" style=\"color: rgb(56, 56, 56)\"> 或者 </span><code data-lake-id=\"u369e1894\" id=\"u369e1894\"><span data-lake-id=\"u3e984c01\" id=\"u3e984c01\" class=\"lake-fontsize-1515\" style=\"color: rgb(56, 56, 56)\">undefined</span></code><span data-lake-id=\"u2d0df44c\" id=\"u2d0df44c\" class=\"lake-fontsize-1515\" style=\"color: rgb(56, 56, 56)\"> 的情况。如果 </span><code data-lake-id=\"u0aa05a0a\" id=\"u0aa05a0a\"><span data-lake-id=\"u4363df89\" id=\"u4363df89\" class=\"lake-fontsize-1515\" style=\"color: rgb(56, 56, 56)\">children</span></code><span data-lake-id=\"ucdbfb966\" id=\"ucdbfb966\" class=\"lake-fontsize-1515\" style=\"color: rgb(56, 56, 56)\"> 是数组则此方法返回一个数组，如果是 </span><code data-lake-id=\"u8d1d00a6\" id=\"u8d1d00a6\"><span data-lake-id=\"u3bc04089\" id=\"u3bc04089\" class=\"lake-fontsize-1515\" style=\"color: rgb(56, 56, 56)\">null</span></code><span data-lake-id=\"u34596973\" id=\"u34596973\" class=\"lake-fontsize-1515\" style=\"color: rgb(56, 56, 56)\"> 或 </span><code data-lake-id=\"ufc2a214d\" id=\"ufc2a214d\"><span data-lake-id=\"u3294e135\" id=\"u3294e135\" class=\"lake-fontsize-1515\" style=\"color: rgb(56, 56, 56)\">undefined</span></code><span data-lake-id=\"u701cb5b2\" id=\"u701cb5b2\" class=\"lake-fontsize-1515\" style=\"color: rgb(56, 56, 56)\"> 则返回 </span><code data-lake-id=\"u95f6528a\" id=\"u95f6528a\"><span data-lake-id=\"ua93c8abc\" id=\"ua93c8abc\" class=\"lake-fontsize-1515\" style=\"color: rgb(56, 56, 56)\">null</span></code><span data-lake-id=\"u35ccf5e4\" id=\"u35ccf5e4\" class=\"lake-fontsize-1515\" style=\"color: rgb(56, 56, 56)\"> 或 </span><code data-lake-id=\"u7bcadb17\" id=\"u7bcadb17\"><span data-lake-id=\"uc1085824\" id=\"uc1085824\" class=\"lake-fontsize-1515\" style=\"color: rgb(56, 56, 56)\">undefined</span></code></li></ul><ul list=\"u5bcccf7a\"><li fid=\"ub17f3580\" data-lake-id=\"u699e7665\" id=\"u699e7665\"><span data-lake-id=\"u3e8d15fc\" id=\"u3e8d15fc\" class=\"lake-fontsize-1515\" style=\"color: rgb(56, 56, 56)\">​</span><code data-lake-id=\"u24f0c2be\" id=\"u24f0c2be\"><span data-lake-id=\"u3a690ba6\" id=\"u3a690ba6\" class=\"lake-fontsize-1515\" style=\"color: rgb(56, 56, 56)\">React.Children.forEach</span></code><span data-lake-id=\"u333aa4e2\" id=\"u333aa4e2\" class=\"lake-fontsize-1515\" style=\"color: rgb(56, 56, 56)\"> 一样的原理</span></li></ul>",
  "body_draft_lake": "",
  "public": 0,
  "status": 1,
  "view_status": 0,
  "read_status": 1,
  "likes_count": 0,
  "comments_count": 0,
  "content_updated_at": "2022-05-29T20:43:42.000Z",
  "deleted_at": null,
  "created_at": "2022-04-04T11:33:41.000Z",
  "updated_at": "2022-05-29T20:43:42.000Z",
  "published_at": "2022-05-29T20:43:42.000Z",
  "first_published_at": "2022-04-04T11:33:41.420Z",
  "word_count": 427,
  "cover": null,
  "description": "在 React 中，当涉及组件嵌套，在父组件中使用 props.children 把所有子组件显示出来。如下：function ParentComponent(props){ \treturn ( \t\t<div> \t\t\t{props.children} \t\t</div> \t) }如果想把父组件中...",
  "custom_description": null,
  "hits": 0,
  "_serializer": "v2.doc_detail"
}