{
  "id": 72212098,
  "slug": "ia89dn",
  "title": "Vue3.2 更新内容",
  "book_id": 26225124,
  "book": {
    "id": 26225124,
    "type": "Book",
    "slug": "mxunh7",
    "name": "八股文 eight-part essay writing",
    "user_id": 732231,
    "description": "前端八股文",
    "creator_id": 732231,
    "public": 0,
    "items_count": 239,
    "likes_count": 0,
    "watches_count": 1,
    "content_updated_at": "2023-11-11T18:15:57.023Z",
    "updated_at": "2023-11-11T18:15:57.000Z",
    "created_at": "2022-04-04T11:31:45.000Z",
    "namespace": "wcywxq/mxunh7",
    "user": {
      "id": 732231,
      "type": "User",
      "login": "wcywxq",
      "name": "magic",
      "description": null,
      "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/732231/1606968271774-avatar/886ad88b-d2cc-4c9e-a674-f70eb51a679c.png",
      "books_count": 18,
      "public_books_count": 0,
      "followers_count": 0,
      "following_count": 0,
      "created_at": "2020-01-08T14:21:31.000Z",
      "updated_at": "2023-11-13T09:32:35.000Z",
      "_serializer": "v2.user"
    },
    "_serializer": "v2.book"
  },
  "user_id": 732231,
  "creator": {
    "id": 732231,
    "type": "User",
    "login": "wcywxq",
    "name": "magic",
    "description": null,
    "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/732231/1606968271774-avatar/886ad88b-d2cc-4c9e-a674-f70eb51a679c.png",
    "books_count": 18,
    "public_books_count": 0,
    "followers_count": 0,
    "following_count": 0,
    "created_at": "2020-01-08T14:21:31.000Z",
    "updated_at": "2023-11-13T09:32:35.000Z",
    "_serializer": "v2.user"
  },
  "format": "lake",
  "body": "- SSR：服务端渲染优化。@vue/server-renderer 包加了一个ES模块创建，与 Node.js 解耦，使在非 Node 环境用 @vue/serve-render做服务端渲染成为可能，比如(Workers、Service Workers)\n- New SFC Features：新的单文件组件特性\n- Web Components：自定义 web 组件。这个我们平时很少用到，但是应该知道\n- Effect Scope API： effect 作用域，用来直接控制响应式副作用的释放时间(computed 和 watchers)。这是底层库的更新，开发不用关心，但是应该知道\n- Performance Improvements：性能提升。这是内部的提升，跟开发无关\n<a name=\"yTINw\"></a>\n## 新特性和 api\n\n<a name=\"RTMSh\"></a>\n### 新的 sfc 单文件组件的特性\n可以在 style 标签里使用 v-bind，如下：\n```vue\n<template>\n\t<div>{{ color }}</div>\n\t<button @click='color = color === \"red\" ? \"green\" : \"red\"'>按钮</button>\n</template>\n<script setup>\n\timport { ref } from 'vue'\n  const color = ref('ref')\n</script>\n<style scoped>\n  div {\n  \tcolor: v-bind(color)\n  }\n</style>\n```\n<a name=\"pzSNV\"></a>\n### 部分 api 改变\n<a name=\"ZsUCP\"></a>\n### 废弃 useContext\n```javascript\nimport { useContext } from 'vue'\nconst { expose, slots, emit, attrs } = useContext()\n```\n<a name=\"H2Rjg\"></a>\n### 新增 useAttrs、useSlots、defineExpose、defineEmits\n```javascript\nimport { useAttrs, useSlots } from 'vue'\nconst attrs = useAttrs()\nconst slots = useSlots()\n\ndefineExpose({\n\tname: 'zhangsan',\n  someMethod() {\n  \tconsole.log('这是子组件的方法')\n  }\n})\n\ndefineEmits(['getName', 'myClick'])\n```\n<a name=\"AreWG\"></a>\n### defineProps 变更\n```javascript\ndefineProps(['name'])\n// 或者\ndefineProps({\n\tname: String\n})\n// 或者\ndefineProps({\n\tname: {\n  \ttype: String,\n    default: ''\n  }\n})\n// 或者\nconst props = defineProps({\n\t... // 和上面相同\n})\nconsole.log(props.name)\n```\n<a name=\"CwX4K\"></a>\n### 顶级 await\n不需要再用 async 就可以直接使用 await，这样默认会把组件的 setup 变成 async setup，像下面这样\n```vue\n<script setup lang='ts'>\n\tconst post = await fetch('/api/post/xxx')\n  \t.then(res => res.json())\n</script>\n```\n最终会转换为下面这样\n```vue\n<script lang='ts'>\n\timport { defineComponent, withAsyncContext } from 'vue'\n  export default defineComponent({\n  \tasync setup() {\n    \tconst post = await withAsyncContext(\n      \tfetch('/api/post/xxx').then(res => res.json())\n      )\n      return { post } \n    }\n  })\n</script>\n```\n<a name=\"Sz9Bm\"></a>\n### 新增 withDefaults\n在 ts 中，像下面这样定义 props 是不能设置默认值的\n```typescript\ninterface Props {\n\tname: string\n  age: number\n}\ndefineProps<Props>()\n```\n加入 withDefaults 之后就可以指定默认值，像下面这样\n```typescript\nimport { withDefaults } from 'vue'\ninterface Props {\n\tname: string\n  age: number\n}\nconst props = withDefaults(defineProps<Props>(), {\n\tname: 'zhangsan',\n  age: 20\n})\n```\n<a name=\"J1mLi\"></a>\n### 自定义 web 组件\n通过 defineCustomElement 方法创建原生自定义组件。也可以通过这种方式发布组件出去供第三方使用\n```javascript\n// main.js\nimport { defineCustomElement } from 'vue'\nconst MyCustomElement = defineCustomElement({\n\t// 通过 vue 组件选项\n  props: ['foo'],\n  render() {\n  \treturn h('div', `my-custom-element: ${this.foo}`)\n  },\n  // 仅适用于 defineCustomElement，css 将被注入到 shadow root\n  style: [`div { border: 1px solid red }`]\n})\n\ncustomElements.define('my-custom-element', MyCustomElement)\n\n// vite.config.js\nexport default defineConfig({\n\tplugins: [\n  \tvue({\n    \ttemplate: {\n      \tcompilerOptions: {\n        \t// vue 将跳过 my-custom-element 解析\n          isCustomElement: tag => tag === 'my-custom-element'\n        }\n      }\n    })\n  ]\n})\n\n// 使用\n<my-custom-element foo='foo' />\n```\n<a name=\"ERYkH\"></a>\n## 新增指令 v-memo\n该指令可以缓存模版中的一部分，从而提升速度。例如：大量 v-for 的列表，只创建一次，就不会再更新了，直接用缓存，就是用内存换时间。\n\n下面这样组件重新渲染时，如果 valueA 和 valueB 没有变化，div 将跳过此组件和其子组件的所有更新\n```vue\n<div v-memo='[valueA, valueB]'>\n\t...\n</div>\n```\n还有像下面这样，部分缓存。需要注意的是：在 v-memo 里面不能用 v-for\n```vue\n<div v-for='item in list' :key='item.id' v-memo='[item.id === selected]'>\n\t...\n</div>\n```\n<a name=\"TUZAr\"></a>\n## 性能提升\n响应式的优化\n\n- 更高效的 ref 实现，读取提升约 260%，写入提升约 50%\n- 依赖收集速度提升约 4%\n- 减少内存消耗约 17%\n\n模版编译优化\n\n- 创建元素 vnodes 速度提升约 200%\n",
  "body_draft": "",
  "body_html": "<!doctype html><ul><li><span>SSR：服务端渲染优化。@vue/server-renderer 包加了一个ES模块创建，与 Node.js 解耦，使在非 Node 环境用 @vue/serve-render做服务端渲染成为可能，比如(Workers、Service Workers)</span></li><li><span>New SFC Features</span><span>：新的单文件组件特性</span></li><li><span>Web Components</span><span>：自定义 web 组件。这个我们平时很少用到，但是应该知道</span></li><li><span>Effect Scope API</span><span>： effect 作用域，用来直接控制响应式副作用的释放时间(computed 和 watchers)。这是底层库的更新，开发不用关心，但是应该知道</span></li><li><span>Performance Improvements</span><span>：性能提升。这是内部的提升，跟开发无关</span></li></ul><h2 id=\"yTINw\"><span>新特性和 api</span></h2><p data-lake-id=\"uf01eb1a9\"><br /></p><h3 id=\"RTMSh\"><span>新的 sfc 单文件组件的特性</span></h3><p data-lake-id=\"u16e369c9\"><span>可以在 style 标签里使用 v-bind，如下：</span></p><pre data-lang=\"vue\"><code>&lt;template&gt;\n\t&lt;div&gt;{{ color }}&lt;/div&gt;\n\t&lt;button @click='color = color === &quot;red&quot; ? &quot;green&quot; : &quot;red&quot;'&gt;按钮&lt;/button&gt;\n&lt;/template&gt;\n&lt;script setup&gt;\n\timport { ref } from 'vue'\n  const color = ref('ref')\n&lt;/script&gt;\n&lt;style scoped&gt;\n  div {\n  \tcolor: v-bind(color)\n  }\n&lt;/style&gt;</code></pre><h3 id=\"pzSNV\"><span>部分 api 改变</span></h3><h3 id=\"ZsUCP\"><span>废弃 useContext</span></h3><pre data-lang=\"javascript\"><code>import { useContext } from 'vue'\nconst { expose, slots, emit, attrs } = useContext()</code></pre><h3 id=\"H2Rjg\"><span>新增 useAttrs、useSlots、defineExpose、defineEmits</span></h3><pre data-lang=\"javascript\"><code>import { useAttrs, useSlots } from 'vue'\nconst attrs = useAttrs()\nconst slots = useSlots()\n\ndefineExpose({\n\tname: 'zhangsan',\n  someMethod() {\n  \tconsole.log('这是子组件的方法')\n  }\n})\n\ndefineEmits(['getName', 'myClick'])</code></pre><h3 id=\"AreWG\"><span>defineProps 变更</span></h3><pre data-lang=\"javascript\"><code>defineProps(['name'])\n// 或者\ndefineProps({\n\tname: String\n})\n// 或者\ndefineProps({\n\tname: {\n  \ttype: String,\n    default: ''\n  }\n})\n// 或者\nconst props = defineProps({\n\t... // 和上面相同\n})\nconsole.log(props.name)</code></pre><h3 id=\"CwX4K\"><span>顶级 await</span></h3><p data-lake-id=\"uc1fe1525\"><span>不需要再用 async 就可以直接使用 await，这样默认会把组件的 setup 变成 async setup，像下面这样</span></p><pre data-lang=\"vue\"><code>&lt;script setup lang='ts'&gt;\n\tconst post = await fetch('/api/post/xxx')\n  \t.then(res =&gt; res.json())\n&lt;/script&gt;</code></pre><p data-lake-id=\"ue317cdcd\"><span>最终会转换为下面这样</span></p><pre data-lang=\"vue\"><code>&lt;script lang='ts'&gt;\n\timport { defineComponent, withAsyncContext } from 'vue'\n  export default defineComponent({\n  \tasync setup() {\n    \tconst post = await withAsyncContext(\n      \tfetch('/api/post/xxx').then(res =&gt; res.json())\n      )\n      return { post } \n    }\n  })\n&lt;/script&gt;</code></pre><h3 id=\"Sz9Bm\"><span>新增 withDefaults</span></h3><p data-lake-id=\"ud3fec208\"><span>在 ts 中，像下面这样定义 props 是不能设置默认值的</span></p><pre data-lang=\"typescript\"><code>interface Props {\n\tname: string\n  age: number\n}\ndefineProps&lt;Props&gt;()</code></pre><p data-lake-id=\"u36208457\"><span>加入 withDefaults 之后就可以指定默认值，像下面这样</span></p><pre data-lang=\"typescript\"><code>import { withDefaults } from 'vue'\ninterface Props {\n\tname: string\n  age: number\n}\nconst props = withDefaults(defineProps&lt;Props&gt;(), {\n\tname: 'zhangsan',\n  age: 20\n})</code></pre><h3 id=\"J1mLi\"><span>自定义 web 组件</span></h3><p data-lake-id=\"ubf18e467\"><span>通过 defineCustomElement 方法创建原生自定义组件。也可以通过这种方式发布组件出去供第三方使用</span></p><pre data-lang=\"javascript\"><code>// main.js\nimport { defineCustomElement } from 'vue'\nconst MyCustomElement = defineCustomElement({\n\t// 通过 vue 组件选项\n  props: ['foo'],\n  render() {\n  \treturn h('div', `my-custom-element: ${this.foo}`)\n  },\n  // 仅适用于 defineCustomElement，css 将被注入到 shadow root\n  style: [`div { border: 1px solid red }`]\n})\n\ncustomElements.define('my-custom-element', MyCustomElement)\n\n// vite.config.js\nexport default defineConfig({\n\tplugins: [\n  \tvue({\n    \ttemplate: {\n      \tcompilerOptions: {\n        \t// vue 将跳过 my-custom-element 解析\n          isCustomElement: tag =&gt; tag === 'my-custom-element'\n        }\n      }\n    })\n  ]\n})\n\n// 使用\n&lt;my-custom-element foo='foo' /&gt;</code></pre><h2 id=\"ERYkH\"><span>新增指令 v-memo</span></h2><p data-lake-id=\"ua6ac1e58\"><span>该指令可以缓存模版中的一部分，从而提升速度。例如：大量 v-for 的列表，只创建一次，就不会再更新了，直接用缓存，就是用内存换时间。</span></p><p data-lake-id=\"u60edeed5\"><span>​</span><br /></p><p data-lake-id=\"ub596abea\"><span>下面这样组件重新渲染时，如果 valueA 和 valueB 没有变化，div 将跳过此组件和其子组件的所有更新</span></p><pre data-lang=\"vue\"><code>&lt;div v-memo='[valueA, valueB]'&gt;\n\t...\n&lt;/div&gt;</code></pre><p data-lake-id=\"ue6e9c96b\"><span>还有像下面这样，部分缓存。需要注意的是：在 v-memo 里面不能用 v-for</span></p><pre data-lang=\"vue\"><code>&lt;div v-for='item in list' :key='item.id' v-memo='[item.id === selected]'&gt;\n\t...\n&lt;/div&gt;</code></pre><h2 id=\"TUZAr\"><span>性能提升</span></h2><p data-lake-id=\"ufeab6cfe\"><span>响应式的优化</span></p><ul><li><span>更高效的 ref 实现，读取提升约 260%，写入提升约 50%</span></li><li><span>依赖收集速度提升约 4%</span></li><li><span>减少内存消耗约 17%</span></li></ul><p data-lake-id=\"u6568aa10\"><span>模版编译优化</span></p><ul><li><span>创建元素 vnodes 速度提升约 200%</span></li></ul>",
  "body_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"viewport\" content=\"adapt\" /><ul list=\"ude9bb674\"><li fid=\"u20c95371\" data-lake-id=\"u914a1f38\" id=\"u914a1f38\"><span data-lake-id=\"u933bffa3\" id=\"u933bffa3\">SSR：服务端渲染优化。@vue/server-renderer 包加了一个ES模块创建，与 Node.js 解耦，使在非 Node 环境用 @vue/serve-render做服务端渲染成为可能，比如(Workers、Service Workers)</span></li><li fid=\"u20c95371\" data-lake-id=\"u1c92ff92\" id=\"u1c92ff92\"><span data-lake-id=\"u2651d95c\" id=\"u2651d95c\">New SFC Features</span><span data-lake-id=\"u8d469848\" id=\"u8d469848\">：新的单文件组件特性</span></li><li fid=\"u20c95371\" data-lake-id=\"u3fcee159\" id=\"u3fcee159\"><span data-lake-id=\"u5c1c72c9\" id=\"u5c1c72c9\">Web Components</span><span data-lake-id=\"uca134790\" id=\"uca134790\">：自定义 web 组件。这个我们平时很少用到，但是应该知道</span></li><li fid=\"u20c95371\" data-lake-id=\"uf818e59f\" id=\"uf818e59f\"><span data-lake-id=\"ud5d28636\" id=\"ud5d28636\">Effect Scope API</span><span data-lake-id=\"u2c96fd73\" id=\"u2c96fd73\">： effect 作用域，用来直接控制响应式副作用的释放时间(computed 和 watchers)。这是底层库的更新，开发不用关心，但是应该知道</span></li><li fid=\"u20c95371\" data-lake-id=\"ufa4150a5\" id=\"ufa4150a5\"><span data-lake-id=\"u832ad52c\" id=\"u832ad52c\">Performance Improvements</span><span data-lake-id=\"u35a4365d\" id=\"u35a4365d\">：性能提升。这是内部的提升，跟开发无关</span></li></ul><h2 data-lake-id=\"yTINw\" id=\"yTINw\"><span data-lake-id=\"u974b7875\" id=\"u974b7875\">新特性和 api</span></h2><p data-lake-id=\"uf01eb1a9\" id=\"uf01eb1a9\"><br></p><h3 data-lake-id=\"RTMSh\" id=\"RTMSh\"><span data-lake-id=\"ueddfa4c7\" id=\"ueddfa4c7\">新的 sfc 单文件组件的特性</span></h3><p data-lake-id=\"u16e369c9\" id=\"u16e369c9\"><span data-lake-id=\"ufbeccb6f\" id=\"ufbeccb6f\">可以在 style 标签里使用 v-bind，如下：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22vue%22%2C%22code%22%3A%22%3Ctemplate%3E%5Cn%5Ct%3Cdiv%3E%7B%7B%20color%20%7D%7D%3C%2Fdiv%3E%5Cn%5Ct%3Cbutton%20%40click%3D'color%20%3D%20color%20%3D%3D%3D%20%5C%22red%5C%22%20%3F%20%5C%22green%5C%22%20%3A%20%5C%22red%5C%22'%3E%E6%8C%89%E9%92%AE%3C%2Fbutton%3E%5Cn%3C%2Ftemplate%3E%5Cn%3Cscript%20setup%3E%5Cn%5Ctimport%20%7B%20ref%20%7D%20from%20'vue'%5Cn%20%20const%20color%20%3D%20ref('ref')%5Cn%3C%2Fscript%3E%5Cn%3Cstyle%20scoped%3E%5Cn%20%20div%20%7B%5Cn%20%20%5Ctcolor%3A%20v-bind(color)%5Cn%20%20%7D%5Cn%3C%2Fstyle%3E%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22bA3rX%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h3 data-lake-id=\"pzSNV\" id=\"pzSNV\"><span data-lake-id=\"u5b8f8d3b\" id=\"u5b8f8d3b\">部分 api 改变</span></h3><h3 data-lake-id=\"ZsUCP\" id=\"ZsUCP\"><span data-lake-id=\"ua25e290d\" id=\"ua25e290d\">废弃 useContext</span></h3><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22import%20%7B%20useContext%20%7D%20from%20'vue'%5Cnconst%20%7B%20expose%2C%20slots%2C%20emit%2C%20attrs%20%7D%20%3D%20useContext()%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22Rh2ir%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h3 data-lake-id=\"H2Rjg\" id=\"H2Rjg\"><span data-lake-id=\"uddda3660\" id=\"uddda3660\">新增 useAttrs、useSlots、defineExpose、defineEmits</span></h3><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22import%20%7B%20useAttrs%2C%20useSlots%20%7D%20from%20'vue'%5Cnconst%20attrs%20%3D%20useAttrs()%5Cnconst%20slots%20%3D%20useSlots()%5Cn%5CndefineExpose(%7B%5Cn%5Ctname%3A%20'zhangsan'%2C%5Cn%20%20someMethod()%20%7B%5Cn%20%20%5Ctconsole.log('%E8%BF%99%E6%98%AF%E5%AD%90%E7%BB%84%E4%BB%B6%E7%9A%84%E6%96%B9%E6%B3%95')%5Cn%20%20%7D%5Cn%7D)%5Cn%5CndefineEmits(%5B'getName'%2C%20'myClick'%5D)%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22ZhUOx%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h3 data-lake-id=\"AreWG\" id=\"AreWG\"><span data-lake-id=\"u938c1eb8\" id=\"u938c1eb8\">defineProps 变更</span></h3><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22defineProps(%5B'name'%5D)%5Cn%2F%2F%20%E6%88%96%E8%80%85%5CndefineProps(%7B%5Cn%5Ctname%3A%20String%5Cn%7D)%5Cn%2F%2F%20%E6%88%96%E8%80%85%5CndefineProps(%7B%5Cn%5Ctname%3A%20%7B%5Cn%20%20%5Cttype%3A%20String%2C%5Cn%20%20%20%20default%3A%20''%5Cn%20%20%7D%5Cn%7D)%5Cn%2F%2F%20%E6%88%96%E8%80%85%5Cnconst%20props%20%3D%20defineProps(%7B%5Cn%5Ct...%20%2F%2F%20%E5%92%8C%E4%B8%8A%E9%9D%A2%E7%9B%B8%E5%90%8C%5Cn%7D)%5Cnconsole.log(props.name)%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22GBJ0e%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h3 data-lake-id=\"CwX4K\" id=\"CwX4K\"><span data-lake-id=\"uce6ffdad\" id=\"uce6ffdad\">顶级 await</span></h3><p data-lake-id=\"uc1fe1525\" id=\"uc1fe1525\"><span data-lake-id=\"ub1e67f68\" id=\"ub1e67f68\">不需要再用 async 就可以直接使用 await，这样默认会把组件的 setup 变成 async setup，像下面这样</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22vue%22%2C%22code%22%3A%22%3Cscript%20setup%20lang%3D'ts'%3E%5Cn%5Ctconst%20post%20%3D%20await%20fetch('%2Fapi%2Fpost%2Fxxx')%5Cn%20%20%5Ct.then(res%20%3D%3E%20res.json())%5Cn%3C%2Fscript%3E%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22ulCPn%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"ue317cdcd\" id=\"ue317cdcd\"><span data-lake-id=\"ubfe07eb6\" id=\"ubfe07eb6\">最终会转换为下面这样</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22vue%22%2C%22code%22%3A%22%3Cscript%20lang%3D'ts'%3E%5Cn%5Ctimport%20%7B%20defineComponent%2C%20withAsyncContext%20%7D%20from%20'vue'%5Cn%20%20export%20default%20defineComponent(%7B%5Cn%20%20%5Ctasync%20setup()%20%7B%5Cn%20%20%20%20%5Ctconst%20post%20%3D%20await%20withAsyncContext(%5Cn%20%20%20%20%20%20%5Ctfetch('%2Fapi%2Fpost%2Fxxx').then(res%20%3D%3E%20res.json())%5Cn%20%20%20%20%20%20)%5Cn%20%20%20%20%20%20return%20%7B%20post%20%7D%20%5Cn%20%20%20%20%7D%5Cn%20%20%7D)%5Cn%3C%2Fscript%3E%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22ctmIR%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h3 data-lake-id=\"Sz9Bm\" id=\"Sz9Bm\"><span data-lake-id=\"u1b268a64\" id=\"u1b268a64\">新增 withDefaults</span></h3><p data-lake-id=\"ud3fec208\" id=\"ud3fec208\"><span data-lake-id=\"ua71d73e6\" id=\"ua71d73e6\">在 ts 中，像下面这样定义 props 是不能设置默认值的</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22typescript%22%2C%22code%22%3A%22interface%20Props%20%7B%5Cn%5Ctname%3A%20string%5Cn%20%20age%3A%20number%5Cn%7D%5CndefineProps%3CProps%3E()%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22LIWek%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u36208457\" id=\"u36208457\"><span data-lake-id=\"u48a3f6e4\" id=\"u48a3f6e4\">加入 withDefaults 之后就可以指定默认值，像下面这样</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22typescript%22%2C%22code%22%3A%22import%20%7B%20withDefaults%20%7D%20from%20'vue'%5Cninterface%20Props%20%7B%5Cn%5Ctname%3A%20string%5Cn%20%20age%3A%20number%5Cn%7D%5Cnconst%20props%20%3D%20withDefaults(defineProps%3CProps%3E()%2C%20%7B%5Cn%5Ctname%3A%20'zhangsan'%2C%5Cn%20%20age%3A%2020%5Cn%7D)%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22jhwcH%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h3 data-lake-id=\"J1mLi\" id=\"J1mLi\"><span data-lake-id=\"ufebe0dde\" id=\"ufebe0dde\">自定义 web 组件</span></h3><p data-lake-id=\"ubf18e467\" id=\"ubf18e467\"><span data-lake-id=\"u5f7c282c\" id=\"u5f7c282c\">通过 defineCustomElement 方法创建原生自定义组件。也可以通过这种方式发布组件出去供第三方使用</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%20main.js%5Cnimport%20%7B%20defineCustomElement%20%7D%20from%20'vue'%5Cnconst%20MyCustomElement%20%3D%20defineCustomElement(%7B%5Cn%5Ct%2F%2F%20%E9%80%9A%E8%BF%87%20vue%20%E7%BB%84%E4%BB%B6%E9%80%89%E9%A1%B9%5Cn%20%20props%3A%20%5B'foo'%5D%2C%5Cn%20%20render()%20%7B%5Cn%20%20%5Ctreturn%20h('div'%2C%20%60my-custom-element%3A%20%24%7Bthis.foo%7D%60)%5Cn%20%20%7D%2C%5Cn%20%20%2F%2F%20%E4%BB%85%E9%80%82%E7%94%A8%E4%BA%8E%20defineCustomElement%EF%BC%8Ccss%20%E5%B0%86%E8%A2%AB%E6%B3%A8%E5%85%A5%E5%88%B0%20shadow%20root%5Cn%20%20style%3A%20%5B%60div%20%7B%20border%3A%201px%20solid%20red%20%7D%60%5D%5Cn%7D)%5Cn%5CncustomElements.define('my-custom-element'%2C%20MyCustomElement)%5Cn%5Cn%2F%2F%20vite.config.js%5Cnexport%20default%20defineConfig(%7B%5Cn%5Ctplugins%3A%20%5B%5Cn%20%20%5Ctvue(%7B%5Cn%20%20%20%20%5Cttemplate%3A%20%7B%5Cn%20%20%20%20%20%20%5CtcompilerOptions%3A%20%7B%5Cn%20%20%20%20%20%20%20%20%5Ct%2F%2F%20vue%20%E5%B0%86%E8%B7%B3%E8%BF%87%20my-custom-element%20%E8%A7%A3%E6%9E%90%5Cn%20%20%20%20%20%20%20%20%20%20isCustomElement%3A%20tag%20%3D%3E%20tag%20%3D%3D%3D%20'my-custom-element'%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%7D%5Cn%20%20%20%20%7D)%5Cn%20%20%5D%5Cn%7D)%5Cn%5Cn%2F%2F%20%E4%BD%BF%E7%94%A8%5Cn%3Cmy-custom-element%20foo%3D'foo'%20%2F%3E%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22TVOfE%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h2 data-lake-id=\"ERYkH\" id=\"ERYkH\"><span data-lake-id=\"u8257d9f6\" id=\"u8257d9f6\">新增指令 v-memo</span></h2><p data-lake-id=\"ua6ac1e58\" id=\"ua6ac1e58\"><span data-lake-id=\"u8ba70991\" id=\"u8ba70991\">该指令可以缓存模版中的一部分，从而提升速度。例如：大量 v-for 的列表，只创建一次，就不会再更新了，直接用缓存，就是用内存换时间。</span></p><p data-lake-id=\"u60edeed5\" id=\"u60edeed5\"><span data-lake-id=\"u010ffe5e\" id=\"u010ffe5e\">​</span><br></p><p data-lake-id=\"ub596abea\" id=\"ub596abea\"><span data-lake-id=\"u33dd8fea\" id=\"u33dd8fea\">下面这样组件重新渲染时，如果 valueA 和 valueB 没有变化，div 将跳过此组件和其子组件的所有更新</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22vue%22%2C%22code%22%3A%22%3Cdiv%20v-memo%3D'%5BvalueA%2C%20valueB%5D'%3E%5Cn%5Ct...%5Cn%3C%2Fdiv%3E%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22h7u2j%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"ue6e9c96b\" id=\"ue6e9c96b\"><span data-lake-id=\"ub5e76cd0\" id=\"ub5e76cd0\">还有像下面这样，部分缓存。需要注意的是：在 v-memo 里面不能用 v-for</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22vue%22%2C%22code%22%3A%22%3Cdiv%20v-for%3D'item%20in%20list'%20%3Akey%3D'item.id'%20v-memo%3D'%5Bitem.id%20%3D%3D%3D%20selected%5D'%3E%5Cn%5Ct...%5Cn%3C%2Fdiv%3E%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22KdbIA%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h2 data-lake-id=\"TUZAr\" id=\"TUZAr\"><span data-lake-id=\"ucc73fc90\" id=\"ucc73fc90\">性能提升</span></h2><p data-lake-id=\"ufeab6cfe\" id=\"ufeab6cfe\"><span data-lake-id=\"u099988cc\" id=\"u099988cc\">响应式的优化</span></p><ul list=\"u4fe0453b\"><li fid=\"u49e99a47\" data-lake-id=\"u6ca7378d\" id=\"u6ca7378d\"><span data-lake-id=\"ue3a2fbda\" id=\"ue3a2fbda\">更高效的 ref 实现，读取提升约 260%，写入提升约 50%</span></li><li fid=\"u49e99a47\" data-lake-id=\"u85627377\" id=\"u85627377\"><span data-lake-id=\"uef8e1a64\" id=\"uef8e1a64\">依赖收集速度提升约 4%</span></li><li fid=\"u49e99a47\" data-lake-id=\"ua222662b\" id=\"ua222662b\"><span data-lake-id=\"u656b005b\" id=\"u656b005b\">减少内存消耗约 17%</span></li></ul><p data-lake-id=\"u6568aa10\" id=\"u6568aa10\"><span data-lake-id=\"u2cc13660\" id=\"u2cc13660\">模版编译优化</span></p><ul list=\"u14119717\"><li fid=\"u6ef9d9e1\" data-lake-id=\"ua4a46070\" id=\"ua4a46070\"><span data-lake-id=\"u6313bae6\" id=\"u6313bae6\">创建元素 vnodes 速度提升约 200%</span></li></ul>",
  "body_draft_lake": "",
  "public": 0,
  "status": 1,
  "view_status": 0,
  "read_status": 1,
  "likes_count": 0,
  "comments_count": 0,
  "content_updated_at": "2022-04-04T11:33:01.000Z",
  "deleted_at": null,
  "created_at": "2022-04-04T11:33:01.000Z",
  "updated_at": "2022-05-10T15:12:40.000Z",
  "published_at": "2022-04-04T11:33:01.000Z",
  "first_published_at": "2022-04-04T11:33:01.064Z",
  "word_count": 854,
  "cover": null,
  "description": "SSR：服务端渲染优化。@vue/server-renderer 包加了一个ES模块创建，与 Node.js 解耦，使在非 Node 环境用 @vue/serve-render做服务端渲染成为可能，比如(Workers、Service Workers)New SFC Features：新的单文...",
  "custom_description": null,
  "hits": 0,
  "_serializer": "v2.doc_detail"
}