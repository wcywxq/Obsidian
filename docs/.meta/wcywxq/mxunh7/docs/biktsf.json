{
  "id": 72212210,
  "slug": "biktsf",
  "title": "context 相关问题",
  "book_id": 26225124,
  "book": {
    "id": 26225124,
    "type": "Book",
    "slug": "mxunh7",
    "name": "八股文 eight-part essay writing",
    "user_id": 732231,
    "description": "前端八股文",
    "creator_id": 732231,
    "public": 0,
    "items_count": 239,
    "likes_count": 0,
    "watches_count": 1,
    "content_updated_at": "2023-11-11T18:15:57.023Z",
    "updated_at": "2023-11-11T18:15:57.000Z",
    "created_at": "2022-04-04T11:31:45.000Z",
    "namespace": "wcywxq/mxunh7",
    "user": {
      "id": 732231,
      "type": "User",
      "login": "wcywxq",
      "name": "magic",
      "description": null,
      "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/732231/1606968271774-avatar/886ad88b-d2cc-4c9e-a674-f70eb51a679c.png",
      "books_count": 18,
      "public_books_count": 0,
      "followers_count": 0,
      "following_count": 0,
      "created_at": "2020-01-08T14:21:31.000Z",
      "updated_at": "2023-11-13T09:32:35.000Z",
      "_serializer": "v2.user"
    },
    "_serializer": "v2.book"
  },
  "user_id": 732231,
  "creator": {
    "id": 732231,
    "type": "User",
    "login": "wcywxq",
    "name": "magic",
    "description": null,
    "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/732231/1606968271774-avatar/886ad88b-d2cc-4c9e-a674-f70eb51a679c.png",
    "books_count": 18,
    "public_books_count": 0,
    "followers_count": 0,
    "following_count": 0,
    "created_at": "2020-01-08T14:21:31.000Z",
    "updated_at": "2023-11-13T09:32:35.000Z",
    "_serializer": "v2.user"
  },
  "format": "lake",
  "body": "<a name=\"KtZXy\"></a>\n## 对 React context 的理解\n在React中，数据传递一般使用props传递数据，维持单向数据流，这样可以让组件之间的关系变得简单且可预测，但是单项数据流在某些场景中并不适用。单纯一对的父子组件传递并无问题，但要是组件之间层层依赖深入，props就需要层层传递显然，这样做太繁琐了。\n\nContext 提供了一种在组件之间共享此类值的方式，而不必显式地通过组件树的逐层传递 props。\n\n可以把context当做是特定一个组件树内共享的store，用来做数据传递。**简单说就是，当你不想在组件树中通过逐层传递props或者state的方式来传递数据时，可以使用Context来实现跨层级的组件数据传递。**\n\nJS的代码块在执行期间，会创建一个相应的作用域链，这个作用域链记录着运行时JS代码块执行期间所能访问的活动对象，包括变量和函数，JS程序通过作用域链访问到代码块内部或者外部的变量和函数。\n\n假如以JS的作用域链作为类比，React组件提供的Context对象其实就好比一个提供给子组件访问的作用域，而 Context对象的属性可以看成作用域上的活动对象。由于组件 的 Context 由其父节点链上所有组件通 过 getChildContext（）返回的Context对象组合而成，所以，组件通过Context是可以访问到其父组件链上所有节点组件提供的Context的属性。\n<a name=\"imLKJ\"></a>\n## 为什么 React 并不推荐优先考虑使用 Context\n\n- Context目前还处于实验阶段，可能会在后面的发行版本中有很大的变化，事实上这种情况已经发生了，所以为了避免给今后升级带来大的影响和麻烦，不建议在app中使用context。\n- 尽管不建议在app中使用context，但是独有组件而言，由于影响范围小于app，如果可以做到高内聚，不破坏组件树之间的依赖关系，可以考虑使用context\n- 对于组件之间的数据通信或者状态管理，有效使用props或者state解决，然后再考虑使用第三方的成熟库进行解决，以上的方法都不是最佳的方案的时候，在考虑context。\n- context的更新需要通过setState()触发，但是这并不是很可靠的，Context支持跨组件的访问，但是如果中间的子组件通过一些方法不影响更新，比如 shouldComponentUpdate() 返回false 那么不能保证Context的更新一定可以使用Context的子组件，因此，Context的可靠性需要关注\n",
  "body_draft": "",
  "body_html": "<!doctype html><h2 id=\"KtZXy\"><span>对 React context 的理解</span></h2><p data-lake-id=\"u062a3b39\" style=\"text-indent: 2em;\"><span>在React中，数据传递一般使用props传递数据，维持单向数据流，这样可以让组件之间的关系变得简单且可预测，但是单项数据流在某些场景中并不适用。单纯一对的父子组件传递并无问题，但要是组件之间层层依赖深入，props就需要层层传递显然，这样做太繁琐了。</span></p><p data-lake-id=\"u876c8352\"><span>​</span><br /></p><p data-lake-id=\"ud13faa0e\" style=\"text-indent: 2em;\"><span>Context 提供了一种在组件之间共享此类值的方式，而不必显式地通过组件树的逐层传递 props。</span></p><p data-lake-id=\"uf11914f8\"><span>​</span><br /></p><p data-lake-id=\"ua9247fc0\" style=\"text-indent: 2em;\"><span>可以把context当做是特定一个组件树内共享的store，用来做数据传递。</span><strong><span>简单说就是，当你不想在组件树中通过逐层传递props或者state的方式来传递数据时，可以使用Context来实现跨层级的组件数据传递。</span></strong></p><p data-lake-id=\"uc37dc364\"><span>​</span><br /></p><p data-lake-id=\"uda01e4ff\" style=\"text-indent: 2em;\"><span>JS的代码块在执行期间，会创建一个相应的作用域链，这个作用域链记录着运行时JS代码块执行期间所能访问的活动对象，包括变量和函数，JS程序通过作用域链访问到代码块内部或者外部的变量和函数。</span></p><p data-lake-id=\"u54d0db50\"><span>​</span><br /></p><p data-lake-id=\"u34accf0f\" style=\"text-indent: 2em;\"><span>假如以JS的作用域链作为类比，React组件提供的Context对象其实就好比一个提供给子组件访问的作用域，而 Context对象的属性可以看成作用域上的活动对象。由于组件 的 Context 由其父节点链上所有组件通 过 getChildContext（）返回的Context对象组合而成，所以，组件通过Context是可以访问到其父组件链上所有节点组件提供的Context的属性。</span></p><h2 id=\"imLKJ\"><span>为什么 React 并不推荐优先考虑使用 Context</span></h2><ul><li><span>Context目前还处于实验阶段，可能会在后面的发行版本中有很大的变化，事实上这种情况已经发生了，所以为了避免给今后升级带来大的影响和麻烦，不建议在app中使用context。</span></li><li><span>尽管不建议在app中使用context，但是独有组件而言，由于影响范围小于app，如果可以做到高内聚，不破坏组件树之间的依赖关系，可以考虑使用context</span></li><li><span>对于组件之间的数据通信或者状态管理，有效使用props或者state解决，然后再考虑使用第三方的成熟库进行解决，以上的方法都不是最佳的方案的时候，在考虑context。</span></li><li><span>context的更新需要通过setState()触发，但是这并不是很可靠的，Context支持跨组件的访问，但是如果中间的子组件通过一些方法不影响更新，比如 shouldComponentUpdate() 返回false 那么不能保证Context的更新一定可以使用Context的子组件，因此，Context的可靠性需要关注</span></li></ul>",
  "body_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"viewport\" content=\"adapt\" /><h2 data-lake-id=\"KtZXy\" id=\"KtZXy\"><span data-lake-id=\"ua71f7b00\" id=\"ua71f7b00\">对 React context 的理解</span></h2><p data-lake-id=\"u062a3b39\" id=\"u062a3b39\" style=\"text-indent: 2em\"><span data-lake-id=\"u4e4113bc\" id=\"u4e4113bc\">在React中，数据传递一般使用props传递数据，维持单向数据流，这样可以让组件之间的关系变得简单且可预测，但是单项数据流在某些场景中并不适用。单纯一对的父子组件传递并无问题，但要是组件之间层层依赖深入，props就需要层层传递显然，这样做太繁琐了。</span></p><p data-lake-id=\"u876c8352\" id=\"u876c8352\"><span data-lake-id=\"uc4298800\" id=\"uc4298800\">​</span><br></p><p data-lake-id=\"ud13faa0e\" id=\"ud13faa0e\" style=\"text-indent: 2em\"><span data-lake-id=\"ua236e3d7\" id=\"ua236e3d7\">Context 提供了一种在组件之间共享此类值的方式，而不必显式地通过组件树的逐层传递 props。</span></p><p data-lake-id=\"uf11914f8\" id=\"uf11914f8\"><span data-lake-id=\"udf5934e8\" id=\"udf5934e8\">​</span><br></p><p data-lake-id=\"ua9247fc0\" id=\"ua9247fc0\" style=\"text-indent: 2em\"><span data-lake-id=\"u5e62a84d\" id=\"u5e62a84d\">可以把context当做是特定一个组件树内共享的store，用来做数据传递。</span><strong><span data-lake-id=\"ub4cdddde\" id=\"ub4cdddde\">简单说就是，当你不想在组件树中通过逐层传递props或者state的方式来传递数据时，可以使用Context来实现跨层级的组件数据传递。</span></strong></p><p data-lake-id=\"uc37dc364\" id=\"uc37dc364\"><span data-lake-id=\"ub1727100\" id=\"ub1727100\">​</span><br></p><p data-lake-id=\"uda01e4ff\" id=\"uda01e4ff\" style=\"text-indent: 2em\"><span data-lake-id=\"ucad5afb4\" id=\"ucad5afb4\">JS的代码块在执行期间，会创建一个相应的作用域链，这个作用域链记录着运行时JS代码块执行期间所能访问的活动对象，包括变量和函数，JS程序通过作用域链访问到代码块内部或者外部的变量和函数。</span></p><p data-lake-id=\"u54d0db50\" id=\"u54d0db50\"><span data-lake-id=\"u034ddfd5\" id=\"u034ddfd5\">​</span><br></p><p data-lake-id=\"u34accf0f\" id=\"u34accf0f\" style=\"text-indent: 2em\"><span data-lake-id=\"uedea0bc2\" id=\"uedea0bc2\">假如以JS的作用域链作为类比，React组件提供的Context对象其实就好比一个提供给子组件访问的作用域，而 Context对象的属性可以看成作用域上的活动对象。由于组件 的 Context 由其父节点链上所有组件通 过 getChildContext（）返回的Context对象组合而成，所以，组件通过Context是可以访问到其父组件链上所有节点组件提供的Context的属性。</span></p><h2 data-lake-id=\"imLKJ\" id=\"imLKJ\"><span data-lake-id=\"u5d614b91\" id=\"u5d614b91\">为什么 React 并不推荐优先考虑使用 Context</span></h2><ul list=\"uda494e00\"><li fid=\"uf8de2080\" data-lake-id=\"u6847aa92\" id=\"u6847aa92\"><span data-lake-id=\"uef0db415\" id=\"uef0db415\">Context目前还处于实验阶段，可能会在后面的发行版本中有很大的变化，事实上这种情况已经发生了，所以为了避免给今后升级带来大的影响和麻烦，不建议在app中使用context。</span></li><li fid=\"uf8de2080\" data-lake-id=\"u95a6afd9\" id=\"u95a6afd9\"><span data-lake-id=\"u78debf2a\" id=\"u78debf2a\">尽管不建议在app中使用context，但是独有组件而言，由于影响范围小于app，如果可以做到高内聚，不破坏组件树之间的依赖关系，可以考虑使用context</span></li><li fid=\"uf8de2080\" data-lake-id=\"ud22e2ff3\" id=\"ud22e2ff3\"><span data-lake-id=\"u6b7ca5cc\" id=\"u6b7ca5cc\">对于组件之间的数据通信或者状态管理，有效使用props或者state解决，然后再考虑使用第三方的成熟库进行解决，以上的方法都不是最佳的方案的时候，在考虑context。</span></li><li fid=\"uf8de2080\" data-lake-id=\"u9d62cb85\" id=\"u9d62cb85\"><span data-lake-id=\"u993c3fb7\" id=\"u993c3fb7\">context的更新需要通过setState()触发，但是这并不是很可靠的，Context支持跨组件的访问，但是如果中间的子组件通过一些方法不影响更新，比如 shouldComponentUpdate() 返回false 那么不能保证Context的更新一定可以使用Context的子组件，因此，Context的可靠性需要关注</span></li></ul>",
  "body_draft_lake": "",
  "public": 0,
  "status": 1,
  "view_status": 0,
  "read_status": 1,
  "likes_count": 0,
  "comments_count": 0,
  "content_updated_at": "2022-04-04T11:33:38.000Z",
  "deleted_at": null,
  "created_at": "2022-04-04T11:33:38.000Z",
  "updated_at": "2022-05-10T15:12:35.000Z",
  "published_at": "2022-04-04T11:33:38.000Z",
  "first_published_at": "2022-04-04T11:33:38.260Z",
  "word_count": 777,
  "cover": null,
  "description": "对 React context 的理解在React中，数据传递一般使用props传递数据，维持单向数据流，这样可以让组件之间的关系变得简单且可预测，但是单项数据流在某些场景中并不适用。单纯一对的父子组件传递并无问题，但要是组件之间层层依赖深入，props就需要层层传递显然，这样做太繁琐了。Co...",
  "custom_description": null,
  "hits": 0,
  "_serializer": "v2.doc_detail"
}