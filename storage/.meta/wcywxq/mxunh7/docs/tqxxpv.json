{
  "id": 72212270,
  "slug": "tqxxpv",
  "title": "操作系统精选",
  "description": "第一章 引论1. 操作系统定义操作系统是运行在内核态的软件，它执行两个基本上独立的任务。隐藏计算机底层硬件的实现，为用户及应用程序提供一个资源集的清晰抽象。管理计算机硬件资源。任何操作系统的核心是它可处理的系统调用集。这些系统带欧阳真实地说明了操作系统做的工作。2. 计算机运行模式多数计算机有...",
  "cover": "https://cdn.nlark.com/yuque/0/2022/png/732231/1647358712354-28baa2f7-a6d8-40cb-8ed0-62b316515dd7.png",
  "user_id": 732231,
  "book_id": 26225124,
  "last_editor_id": 732231,
  "format": "lake",
  "body_draft": "<!doctype html><div class=\"lake-content\" typography=\"classic\"><h2 id=\"hjZxy\"><span class=\"ne-text\">第一章 引论</span></h2><h3 id=\"nbNx0\"><span class=\"ne-text\">1. 操作系统定义</span></h3><p id=\"uc821eef4\" class=\"ne-p\"><span class=\"ne-text\">操作系统是运行在内核态的软件，它执行两个基本上独立的任务。</span></p><ul class=\"ne-ul\"><li id=\"udc600a42\" data-lake-index-type=\"0\"><span class=\"ne-text\">隐藏计算机底层硬件的实现，为用户及应用程序提供一个资源集的清晰抽象。</span></li><li id=\"uec38dc83\" data-lake-index-type=\"0\"><span class=\"ne-text\">管理计算机硬件资源。</span></li></ul><p id=\"ua6d65ec6\" class=\"ne-p\"><span class=\"ne-text\">任何操作系统的核心是它可处理的系统调用集。这些系统带欧阳真实地说明了操作系统做的工作。</span></p><h3 id=\"OcrYU\"><span class=\"ne-text\">2. 计算机运行模式</span></h3><p id=\"u0568c26c\" class=\"ne-p\"><span class=\"ne-text\">多数计算机有两种运行模式：内核态和用户态。</span></p><p id=\"u5317e4a6\" class=\"ne-p\"><span class=\"ne-text\">软件中最基础的部分是操作系统，它运行在内核态。这内核态模式下，操作系统具有对所有硬件的完全访问权，可以执行机器能够运行的任何指令。软件的其余部分运行在用户态下，在用户态下，只能使用机器指令中的一个子集。</span></p><p id=\"u9d88bdef\" class=\"ne-p\"><img src=\"https://cdn.nlark.com/yuque/0/2022/png/732231/1647358712354-28baa2f7-a6d8-40cb-8ed0-62b316515dd7.png\" width=\"709\" id=\"u1ad25170\" class=\"ne-image\"></p><h3 id=\"bC8En\"><span class=\"ne-text\">3. shell 与 GUI</span></h3><p id=\"u3333aaa4\" class=\"ne-p\"><span class=\"ne-text\">用户与之交互的程序，基于文本的通常称为 shell，而基于图标的则称为图形用户界面（GUI）。</span></p><p id=\"u15abfa52\" class=\"ne-p\"><span class=\"ne-text\">它们并不是操作系统的一部分，它们是运行在用户态最低层次的用户接口程序</span></p><h3 id=\"Xzbui\"><span class=\"ne-text\">4. 对于抽象的理解</span></h3><p id=\"u12a2fb28\" class=\"ne-p\"><span class=\"ne-text\">现代计算机系统中，大量使用了抽象这一概念。抽象是管理复杂性的一个关键。好的抽象可以把一个几乎不可能管理的任务划分为两个可管理的部分。其中第一部分是有关抽象的定义和实现，第二部分是随时用这些抽象解决问题。</span></p><p id=\"u35449fee\" class=\"ne-p\"><span class=\"ne-text\">以抽象的角度看操作系统，它的任务就是创建好的抽象，并实现和管理它所创建的抽象。</span></p><h3 id=\"POCrf\"><span class=\"ne-text\">5. 多路复用资源方式</span></h3><p id=\"uce462b1f\" class=\"ne-p\"><span class=\"ne-text\">在时间上复用：当一种资源在时间上复用时，不同的程序或用户轮流使用它。</span></p><p id=\"ucb9b6f42\" class=\"ne-p\"><span class=\"ne-text\">在空间上复用：每个客户得到资源的一部分。</span></p><h3 id=\"Avbah\"><span class=\"ne-text\">6. I/O 设备的结构</span></h3><p id=\"ued5c5aed\" class=\"ne-p\"><span class=\"ne-text\">I/O 设备一般包括两个部分：设备控制器和设备本身。控制器插在电路板上的一块芯片或一组芯片，这块电路板物理地控制芯片，它从操作系统接收命令。</span></p><p id=\"u917b766c\" class=\"ne-p\"><span class=\"ne-text\">控制器的任务是为操作系统提供一个简单的接口。每类设备控制器是不同的，所以需要不同的软件进行控制。专门与控制器对话，发出命令并接收响应的软件，称为设备驱动程序。为了使用设备驱动程序，必须要把设备驱动程序装入到操作系统中，这样它可在核心态中运行。</span></p><p id=\"u369bad52\" class=\"ne-p\"><span class=\"ne-text\">每个设备控制器都有少量的用于通信的寄存器，所有的寄存器的集合构成了 I/O 空间。</span></p><h3 id=\"qfYAJ\"><span class=\"ne-text\">7. IDE 概念</span></h3><p id=\"ud6b039dd\" class=\"ne-p\"><span class=\"ne-text\">IDE 表示集成驱动电子设备，是许多计算机的磁盘标准。</span></p><h3 id=\"eig5K\"><span class=\"ne-text\">8. 实现输入输出的三种方式</span></h3><p id=\"u1c681dea\" class=\"ne-p\"><span class=\"ne-text\">第一种方式，用户程序发出一个系统调用，内核将其翻译成一个对应设备驱动程序的过程调用。然后设备驱动程序启动 I/O 并在一个连续不断的循环中检查该设备，看该设备是否完成了工作。当 I/O 结束后，设备驱动程序把数据送到指定的地方（若有此需要），并返回。然后操作系统将控制返回给调用者。这种方式称为忙等待（busy waiting），其缺点是要占据 CPU ，CPU 一直轮询设备直到对应的 I/O 操作完成。</span></p><p id=\"ufc1e6b0d\" class=\"ne-p\"><span class=\"ne-text\">第二种方式，设备驱动程序启动设备并且让该设备在操作完成时发出一个中断。设备驱动程序在这个时刻返回。操作系统接着在需要时阻塞调用者并安排其他工作进行。当设备驱动程序检测到该设备的操作完毕时，它发出一个中断通知操作完成。</span></p><p id=\"u646a5848\" class=\"ne-p\"><img src=\"https://cdn.nlark.com/yuque/0/2022/png/732231/1647358712346-e6029738-9673-4172-8024-98b729bd359b.png\" width=\"716\" id=\"udd91cfa8\" class=\"ne-image\"></p><p id=\"ua01c0bfa\" class=\"ne-p\"><span class=\"ne-text\">第三种方式，为 I/O 使用一种特殊的直接存储器访问（Direct Memory Access，DMA）芯片，它可以控制在内存和某些控制器之间的位流，而无须持续的 CPU 干预。</span></p><h3 id=\"bPrE6\"><span class=\"ne-text\">9. CMOS 存储器</span></h3><p id=\"u9b14994f\" class=\"ne-p\"><span class=\"ne-text\">CMOS 存储器是易失性的。许多计算机利用 CMOS 存储器保持当前时间和日期。 CMOS 存储器和递增时间的时钟电路有一块小电池驱动，所以，即使计算机没有上电，时间也可以正确地更新。</span></p><h3 id=\"I1ZY8\"><span class=\"ne-text\">10. USB 概念</span></h3><p id=\"u0012cbc7\" class=\"ne-p\"><span class=\"ne-text\">USB 是通用串行总线，是用来将所有的慢速 I/O 设备，诸如键盘和鼠标，与计算机相连。USB 是一种集中式总线，其根设备每 1ms 轮询一次 I/O 设备，看是否有消息收发。所有的 USB 设备共享一个 USB 设备驱动器，于是就不需要为新的 USB 设备安装新的设备驱动器了。</span></p><h3 id=\"cTnqv\"><span class=\"ne-text\">11. 即插即用概念</span></h3><p id=\"u6439fe6c\" class=\"ne-p\"><span class=\"ne-text\">在一般的计算机工作环境下，操作系统必须了解有些什么外部设备连接到计算机上，并对它们进行配置。这种需求导致了 Intel 和微软设计了一种名为即插即用的 I/O 系统。</span></p><p id=\"ueda04b19\" class=\"ne-p\"><span class=\"ne-text\">在即插即用之前，每块 I/O 卡有一个固定的中断请求级别和用于其 I/O 寄存器的固定地址。即插即用所做的工作是，系统自动地收集有关 I/O 设备的信息，集中赋予 I/O 地址，然后通知每块卡所用的数值。</span></p><h3 id=\"RSv1n\"><span class=\"ne-text\">12. 计算机的启动</span></h3><p id=\"u7c6ea25f\" class=\"ne-p\"><span class=\"ne-text\">Pentium 的简要启动过程如下。在每个 Pentium 上有一块母板。在母板上有一个称为基本输入输出系统（Basic Input Output System，BIOS）的程序。在 BIOS 内有底层 I/O 软件，包括读键盘、写屏幕、进行磁盘 I/O 以及其他过程。现在这个程序存放在一块闪速 RAM 中，它是非可易失性的，但是在发现 BIOS 中有错时可以通过操作系统对它进行更新。</span></p><p id=\"u22f491ba\" class=\"ne-p\"><span class=\"ne-text\">简要过程如下：</span></p><ol class=\"ne-ol\"><li id=\"ub7e1220d\" data-lake-index-type=\"0\"><span class=\"ne-text\">BIOS 开始运行。它首先检查计算机设备的状态信息是否正常。</span></li><li id=\"u9dfce996\" data-lake-index-type=\"0\"><span class=\"ne-text\">扫描并记录总线所连设备。</span></li><li id=\"ufa0e22fc\" data-lake-index-type=\"0\"><span class=\"ne-text\">依次搜索启动设备，导入操作系统。</span></li><li id=\"u044bda79\" data-lake-index-type=\"0\"><span class=\"ne-text\">操作系统询问 BIOS ，获得配置信息，获取所有设备的驱动程序并调入内核。</span></li><li id=\"u5dec9f9e\" data-lake-index-type=\"0\"><span class=\"ne-text\">初始化有关表格，创建需要的任何背景进程，并在每个终端上启动登录程序或 GUI。</span></li></ol><h3 id=\"pOrMf\"><span class=\"ne-text\">13. 操作系统分类</span></h3><p id=\"uab5c6e66\" class=\"ne-p\"><span class=\"ne-text\">大型机操作系统、服务器操作系统、多处理器操作系统、个人计算机操作系统、掌上计算机操作系统、嵌入式操作系统、传感器节点操作系统、实时操作系统、智能卡操作系统</span></p><h3 id=\"xbXo8\"><span class=\"ne-text\">14. 实时操作系统的基本概念</span></h3><p id=\"u49c2c4fa\" class=\"ne-p\"><span class=\"ne-text\">实时操作系统的特征是将时间作为关键参数。通常分为硬实时操作系统和软实时操作系统。</span></p><p id=\"u3f5e50ec\" class=\"ne-p\"><span class=\"ne-text\">在硬实时操作系统中，某个规定的动作必须绝对地在规定的时刻（或规定的时间范围）发生。</span></p><p id=\"u32b5603a\" class=\"ne-p\"><span class=\"ne-text\">在软实时操作系统中，偶尔违反最终时限是不希望的，但可以接受，并且不会引起任何实时性的损害。</span></p><h3 id=\"I4rpo\"><span class=\"ne-text\">15. UID</span></h3><p id=\"u857f39a3\" class=\"ne-p\"><span class=\"ne-text\">系统管理器授权每个进程使用一个给定的 UID 标识。每个被启动的进程都有一个启动该进程的用户 UID 。子进程与父进程拥有一样 UID。用户可以是某个组的成员，每个组也有一个 GID 标识。</span></p><h3 id=\"etZ58\"><span class=\"ne-text\">16. 文件路径</span></h3><p id=\"u9db2989f\" class=\"ne-p\"><span class=\"ne-text\">在 UNIX 中，绝对路径名包含了从根目录到该文件的所有目录清单，它们之间用正斜线</span><span class=\"ne-text\"> </span><span class=\"ne-text\">/</span><span class=\"ne-text\"> </span><span class=\"ne-text\">隔开。最开始的正斜线标识这是从根目录开始的绝对路径。</span></p><p id=\"uc5ea976f\" class=\"ne-p\"><span class=\"ne-text\">在 MS-DOS 和 Windows 中，用反斜线</span><span class=\"ne-text\"> </span><span class=\"ne-text\">\\</span><span class=\"ne-text\"> </span><span class=\"ne-text\">作为分隔符。</span></p><h3 id=\"CSfMs\"><span class=\"ne-text\">17. 文件系统安装</span></h3><p id=\"uf5a46f15\" class=\"ne-p\"><span class=\"ne-text\">UNIX 一个重要概念是安装文件系统。几乎所有的个人计算机都有一个或多个光盘驱动器，可以插入 CD-ROM 和 DV D。它们几乎都有 USB 接口，可以插入 USB 存储棒（实际是固态磁盘驱动器）。为了提供一个出色的方式处理可移动介质，UNIX 允许把在 CD-ROM 或 DVD 上的文件系统接入到主文件树上。 mount 系统调用允许把在 CD-ROM 上的文件系统连接到程序所希望的根文件系统上。</span></p><h3 id=\"SXZLl\"><span class=\"ne-text\">18. 特殊文件</span></h3><p id=\"u9f239d06\" class=\"ne-p\"><span class=\"ne-text\">提供特殊文件是为了使 I/O 设备看起来像文件一般。这样，就像使用系统调用读写文件一样，I/O 设备也可通过同样的系统调用进行读写。</span></p><p id=\"u30b8402f\" class=\"ne-p\"><span class=\"ne-text\">有两类特殊文件：块特殊文件和字符特殊文件。</span></p><p id=\"u04612afd\" class=\"ne-p\"><span class=\"ne-text\">块特殊文件指那些由可随机存取的块组成的设备，如磁盘等。比如打开一个块特殊文件，然后读第 4 块，程序可以直接访问设备的第 4 块而不必考虑存放该文件的文件系统结构。</span></p><p id=\"u3b272359\" class=\"ne-p\"><span class=\"ne-text\">字符特殊文件用于打印机、调制解调器和其他接收或输出字符流的设备。按照惯例，特殊文件保存在 /dev 目录中。例如，/dev/lp 是打印机。</span></p><h3 id=\"GSolW\"><span class=\"ne-text\">19. 文件保护</span></h3><p id=\"uc108b47f\" class=\"ne-p\"><span class=\"ne-text\">UNIX 操作系统通过对每个文件赋予一个 9 位的二进制保护代码，对 UNIX 中的文件实现保护。该保护代码有三个 3 位字段，一个用于所有者，一个用于所有者同组（用户被系统管理员划分成组）中的其他成员，而另一个用于其他人。每个字段中有一位用于读访问，一位用于写访问，一位用于执行访问。这些位就是知名的 rwx 位。</span></p><h3 id=\"BHcuq\"><span class=\"ne-text\">20. 系统调用概念</span></h3><p id=\"uef144862\" class=\"ne-p\"><span class=\"ne-text\">如果一个进程正在用户态中运行一个用户程序，并且需要一个系统服务，比如从一个文件读数据，那么它就必须执行一个陷阱或系统调用指令，将控制转移到操作系统。操作系统接着通过参数检查，找出所需要的调用进程。然后，它执行系统调用，并把控制返回给在系统调用后面跟随着的指令。在某种意义上，进行系统调用就像进行一个特殊的过程调用，但是只有系统调用可以进入内核，而过程调用则不能。</span></p><h3 id=\"EKe74\"><span class=\"ne-text\">21. POSIX</span></h3><p id=\"u944b3535\" class=\"ne-p\"><span class=\"ne-text\">UNIX 有很多不兼容的版本，从而导致了混乱。为了能使编写的程序能够在任何版本的 UNIX 系统运行，IEEE 提出了一个 UNIX 标准，称为 POSIX，目前大多数 UNIX 版本都支持他。 POSIX 标准定义了凡是 UNIX 必须支持的小型系统调用接口。</span></p><h3 id=\"ft0Oa\"><span class=\"ne-text\">22. Windows Win32 API</span></h3><p id=\"u803fa6f1\" class=\"ne-p\"><span class=\"ne-text\">Windows 和 UNIX 的主要差别在于编程方式。一个 UNIX 程序包括做各种处理的代码以及从事完成特定服务的系统调用。相反，一个 Windows 程序通常是一个事件驱动程序。其中主程序等待某些事件发生，然后调用一个过程处理该事件。</span></p><p id=\"u2c020a0f\" class=\"ne-p\"><span class=\"ne-text\">在 UNIX 中，系统调用（如 read）和系统调用所使用的库过程（如 read）之间几乎是一一对应的关系。换句话说，对于每个系统调用，差不多就涉及一个被调用的库过程。</span></p><p id=\"ub01980e6\" class=\"ne-p\"><span class=\"ne-text\">在 Windows 中，情况就大不相同了。首先，库调用和实际的系统调用是几乎不对应的。微软定义了一套过程，称为应用编程接口（Application Program Interface，Win32 API），程序员用这套过程获得操作系统的服务。</span></p><p id=\"uc536ce8b\" class=\"ne-p\"><span class=\"ne-text\">Win32 并不是非常统一的或有一致的接口。其主要原因是由于 Win32 需要与早期的在 Windows 3.x 中使用的 16 位接口向后兼容。</span></p><p id=\"uc140590b\" class=\"ne-p\"><span class=\"ne-text\">Windows 中没有类似 UNIX 中的进程层次，所以不存在父进程和子进程的概念。在进程创建之后，创建者和被创建者是平等的。</span></p><h3 id=\"InlC7\"><span class=\"ne-text\">23. 操作系统结构</span></h3><p id=\"ub35dfb39\" class=\"ne-p\"><span class=\"ne-text\">单体结构、层次式结构、微内核、客户机-服务器模式、虚拟机、外核、</span></p><h3 id=\"ehAj7\"><span class=\"ne-text\">24. 微内核的概念</span></h3><p id=\"ucb4d29cb\" class=\"ne-p\"><span class=\"ne-text\">在微内核设计背后的思想是，为了实现高可靠性，将操作系统划分成小的、良好定义的模块，只有其中一个模块——微内核——运行在内核态上，其余的模块，由于功能相对弱些，则作为普通用户进程运行。特别地，由于把每个设备驱动和文件系统分别作为普通用户进程，这些模块中的错误虽然会使这些模块崩溃，但是不会使得整个系统死机。</span></p><h3 id=\"WdGLK\"><span class=\"ne-text\">25. 机制与策略分离原则</span></h3><p id=\"ucbd7d320\" class=\"ne-p\"><span class=\"ne-text\">策略指的是做什么，机制指的是怎么做。例如一个比较简单的调度算法是，对每个进程赋予一个优先级，并让内核执行在具有最高优先级进程中可以运行的某个进程。这里，机制（在内核中）就是寻找最高优先级的进程并运行之。而策略（赋予进程以优先级）可以由用户态中的进程完成。在这个方式中，机制和策略是分离的，从而使系统内核变得更小。</span></p><h3 id=\"nDEZJ\"><span class=\"ne-text\">26. make 程序</span></h3><p id=\"u604eac97\" class=\"ne-p\"><span class=\"ne-text\">在 UNIX 系统中，有个名为 make 的程序（其大量的变体如 gmake、pmake 等），它读入 Makefile ，该 Makefile 说明哪个文件与哪个文件相关。make 的作用是，在构建操作系统二进制码时，检查此刻需要哪个目标文件，而且对于每个文件，检查自从上次目标文件创建之后，是否有任何它依赖（代码和头文件）的文件已经被修改了。如果有，目标文件需要重新编译。在大型项目中，创建 Makefile 是一件容易出错的工作，所以出现了一些工具使该工作能够自动完成。</span></p><h2 id=\"j7xfA\"><span class=\"ne-text\">第二章 进程与线程</span></h2><div data-type=\"info\" class=\"ne-alert\"><p id=\"u48594c64\" class=\"ne-p\"><span class=\"ne-text\">进程和线程的区别：</span></p><ol class=\"ne-ol\"><li id=\"u8eafb43e\" data-lake-index-type=\"0\"><span class=\"ne-text\">定义不同，进程是执行中的一段程序，而一个进程中执行中的每个任务即为一个线程</span></li><li id=\"u4a80d62b\" data-lake-index-type=\"0\"><span class=\"ne-text\">一个线程只可以属于一个进程，但一个进程能包含多个线程</span></li><li id=\"ubdc2e41f\" data-lake-index-type=\"0\"><span class=\"ne-text\">线程无地址空间，它包括在进程的地址空间里</span></li><li id=\"u33b2d2d3\" data-lake-index-type=\"0\"><span class=\"ne-text\">线程的开销或代价比进程的小</span></li></ol></div><h3 id=\"Lvgru\"><span class=\"ne-text\">一、进程</span></h3><h4 id=\"PG5g1\"><span class=\"ne-text\">1. 进程模型</span></h4><p id=\"u7d63c3d4\" class=\"ne-p\"><span class=\"ne-text\">在进程模型中，计算机上所有可运行的软件，通常也包括操作系统，被组织成若干顺序进程，简称进程。一个进程就是一个正在执行程序的实例，包括程序计数器、寄存器和变量的当前值。</span></p><p id=\"u1bc60a09\" class=\"ne-p\"><span class=\"ne-text\">由于 CPU 在各进程之间来回快速切换，所以每个进程执行其运算的速度是不确定的。而且当同一进程再次运行时，其运算速度通常也不可再现。所以，在对进程编程时决不能对时序做任何确定的假设。</span></p><h4 id=\"p1JHi\"><span class=\"ne-text\">2. 进程的创建</span></h4><p id=\"uf31bac97\" class=\"ne-p\"><span class=\"ne-text\">有 4 种主要事件导致进程的创建：</span></p><ul class=\"ne-ul\"><li id=\"u69362fb8\" data-lake-index-type=\"0\"><span class=\"ne-text\">系统初始化</span><span class=\"ne-text\">启动操作系统时，通常会创建若干个进程。其中有些是前台进程，也就是同用户（人类）交互并且替他们完成工作的那些进程。其他的是后台进程，这些进程与特定的用户没有关系，相反，却具有某些专门的功能。停留在后台处理诸如电子邮件、Web 页面、新闻、打印之类活动的进程称为守护进程</span></li><li id=\"ud4edf117\" data-lake-index-type=\"0\"><span class=\"ne-text\">执行了正在运行的进程所调用的进程创建系统调用</span><span class=\"ne-text\">一个正在运行的进程经常发出系统调用，以便创建一个或多个新进程协助其工作。在所要从事的工作可以容易地划分成若干相关的但没有相互作用的进程时，创建新的进程就特别有效果。</span></li><li id=\"udeec84c3\" data-lake-index-type=\"0\"><span class=\"ne-text\">用户请求创建一个新进程</span><span class=\"ne-text\">在交互式系统中，键入一个命令或者点（双）击一个图标就可以启动一个程序。这两个动作中的任何一个都会开始一个新的进程，并在其中运行所选择的程序。</span></li><li id=\"ue0d7ef13\" data-lake-index-type=\"0\"><span class=\"ne-text\">一个批处理作业的初始化</span><span class=\"ne-text\">最后一种创建进程的情形仅在大型机的批处理系统中应用。用户在这种系统中（可能是远程地）提交批处理作业。在操作系统认为有资源可运行另一个作业时，它创建一个新的进程，并运行其输入队列中的下一个作业。</span></li></ul><p id=\"u2d0b1f08\" class=\"ne-p\"><span class=\"ne-text\">在 UNIX 系统中，只有一个系统调用可以用来创建新进程：fork。在调用了 fork 后，这两个进程（父进程和子进程）拥有相同的存储映像、同样的环境字符串和同样的打开文件。</span></p><p id=\"u7e872729\" class=\"ne-p\"><span class=\"ne-text\">在 Windows 中，一个 Win32 函数调用 CreateProcess 既处理进程的创建，也负责把正确的程序装入新的进程。</span></p><p id=\"uc20d2a43\" class=\"ne-p\"><span class=\"ne-text\">在 UNIX 和 Windows 中，进程创建之后，父进程和子进程有各自不同的地址空间。如果其中某个进程在其地址空间中修改了一个字，这个修改对其他进程而言是不可见的。</span></p><h4 id=\"fT5KH\"><span class=\"ne-text\">3. 进程的终止</span></h4><p id=\"uba7933cb\" class=\"ne-p\"><span class=\"ne-text\">进程在创建之后，它开始运行，完成其工作。但永恒是不存在的，进程也一样。迟早这个新的进程会终止，通常由下列条件引起：</span></p><ul class=\"ne-ul\"><li id=\"u58a3f73d\" data-lake-index-type=\"0\"><span class=\"ne-text\">正常退出（自愿的）</span><span class=\"ne-text\">多数进程是由于完成了它们的工作而终止。在 UNIX 中该调用是 exit，而在 Windows 中，相关的调用是 ExitProcess 。</span></li><li id=\"u6e2d9745\" data-lake-index-type=\"0\"><span class=\"ne-text\">出错退出（自愿的）</span><span class=\"ne-text\">进程终止的第二个原因是进程发现了严重错误。</span></li><li id=\"u0ab95555\" data-lake-index-type=\"0\"><span class=\"ne-text\">严重错误（非自愿）</span><span class=\"ne-text\">进程终止的第三个原因是由进程引起的错误，通常是由于程序中的错误所致。</span></li><li id=\"uad362f32\" data-lake-index-type=\"0\"><span class=\"ne-text\">被其他进程杀死（非自愿）</span><span class=\"ne-text\">第四种终止进程的原因是，某个进程执行一个系统调用通知操作系统杀死某个其他进程。在 UNIX 中，这个系统调用是 kill 。在 Win32 中对应的函数是 TerminateProcess 。</span></li></ul><h4 id=\"uSyGq\"><span class=\"ne-text\">4. 进程的层次结构</span></h4><p id=\"u93a6c81a\" class=\"ne-p\"><span class=\"ne-text\">某些系统中，当进程创建了另一个进程后，父进程和子进程就以某种形式继续保持关联。子进程自身可以创建更多的进程，组成一个进程的层次结构。</span></p><p id=\"ub552b8d3\" class=\"ne-p\"><span class=\"ne-text\">在 UNIX 中，进程和它的所有子女以及后裔共同组成一个进程组。</span></p><p id=\"u261f9333\" class=\"ne-p\"><span class=\"ne-text\">在 Windows 中没有进程层次的概念，所有的进程都是地位相同的。惟一类似于进程层次的暗示是在创建进程的时侯，父进程得到一个特别的令牌（称为句柄），该句柄可以用来控制子进程。但是，它有权把这个令牌传送给某个其他进程，这样就不存在进程层次了。</span></p><h4 id=\"oopnq\"><span class=\"ne-text\">5. UNIX 启动时的初始化</span></h4><p id=\"u524ce08f\" class=\"ne-p\"><span class=\"ne-text\">一个称为 init 的特殊进程出现在启动映像中。当它开始运行时，读入一个说明终端数量的文件。接着，为每个终端创建一个新进程。这些进程等待用户登录。如果有一个用户登录成功，该登录进程就执行一个 shell 准备接收命令。所接收的这些命令会启动更多的进程，以此类推。这样，在整个系统中，所有的进程都属于以 init 为根的一棵树。</span></p><h4 id=\"l9M3e\"><span class=\"ne-text\">6. 进程的状态</span></h4><p id=\"ue17dd655\" class=\"ne-p\"><span class=\"ne-text\">进程存在三种状态：</span></p><ul class=\"ne-ul\"><li id=\"uaede1e56\" data-lake-index-type=\"0\"><span class=\"ne-text\">运行态（该时刻进程实际占用 CPU）。</span></li><li id=\"ub63355bc\" data-lake-index-type=\"0\"><span class=\"ne-text\">就绪态（可运行，但因为其他进程正在运行而暂时停止）。</span></li><li id=\"u86e45a20\" data-lake-index-type=\"0\"><span class=\"ne-text\">阻塞态（除非某种外部事件发生，否则进程不能运行）。</span></li></ul><p id=\"u49e1d097\" class=\"ne-p\"><span class=\"ne-text\">状态间的转化关系为</span></p><p id=\"u6bb7d483\" class=\"ne-p\"><img src=\"https://cdn.nlark.com/yuque/0/2022/png/732231/1647358712362-efbdf1ad-4bb6-4949-bb30-49aa99ea601b.png\" width=\"720\" id=\"u18e9b4fa\" class=\"ne-image\"></p><h4 id=\"eAGG7\"><span class=\"ne-text\">7. 进程的实现</span></h4><p id=\"u63c254b4\" class=\"ne-p\"><span class=\"ne-text\">为了实现进程模型，操作系统维护着一张表格（一个结构数组），即进程表。每个进程占用一个进程表项。（也可称为进程控制块。）该表项包含了进程状态的重要信息，包括程序计数器、堆栈指针、内存分配状况、所打开文件的状态、账号和调度信息，以及其他在进程由运行态转换到就绪态或阻塞态时必须保存的信息，从而保证该进程随后能再次启动，就像从未被中断过一样。</span></p><h4 id=\"BkZMX\"><span class=\"ne-text\">8. 多道程序设计模型</span></h4><p id=\"u856a6118\" class=\"ne-p\"><span class=\"ne-text\">采用多道程序设计可以提高 CPU 的利用率。从概率的角度来看 CPU 的利用率。假设一个进程等待 I/O 操作的时间与其停留在内存中时间的比为 。当内存中同时有 n 个进程时，则所有 n 个进程都在等待 I/O（此时 CPU 空转）的概率是 pⁿ 。CPU 的利用率由下面的公式给出：</span></p><p id=\"ud15bb994\" class=\"ne-p\"><span class=\"ne-text\">CPU 利用率 = 1-pⁿ</span></p><h3 id=\"Fp7QL\"><span class=\"ne-text\">二、线程</span></h3><h4 id=\"wBrFZ\"><span class=\"ne-text\">1. 线程的使用原因</span></h4><p id=\"u8f28f0f8\" class=\"ne-p\"><span class=\"ne-text\">人们需要多线程的主要原因是，在许多应用中同时发生着多种活动。其中某些活动随着时间的推移会被阻塞。通过将这些应用程序分解成可以准并行运行的多个顺序线程，程序设计模型会变得更简单。</span></p><p id=\"udb4a6962\" class=\"ne-p\"><span class=\"ne-text\">第二个关于需要多线程的理由是，由于线程比进程更轻量级，所以它们比进程更容易（即更快）创建，也更容易撤销。在许多系统中，创建一个线程较创建一个进程要快 10 ～ 100 倍。</span></p><p id=\"u7bc3e777\" class=\"ne-p\"><span class=\"ne-text\">需要多线程的第三个原因涉及性能方面的讨论。若多个线程都是 CPU 密集型的，那么并不能获得性能上的增强，但是如果存在着大量的计算和大量的 I/O 处理，拥有多个线程允许这些活动彼此重叠进行，从而会加快应用程序执行的速度。</span></p><h4 id=\"jsY1c\"><span class=\"ne-text\">2. 线程模型</span></h4><p id=\"u6bacca0f\" class=\"ne-p\"><span class=\"ne-text\">进程拥有一个执行的线程，通常简写为线程。在线程中有一个程序计数器，用来记录接着要执行哪一条指令。线程拥有寄存器，用来保存线程当前的工作变量。线程还拥有一个堆栈，用来记录执行历史，其中每一帧保存了一个已调用的但是还没有从中返回的过程。尽管线程必须在某个进程中执行，但是线程和它的进程是不同的概念，并且可以分别处理。进程用于把资源集中到一起，而线程则是在 CPU 上被调度执行的实体。</span></p><p id=\"ufd1b8f53\" class=\"ne-p\"><span class=\"ne-text\">线程给进程模型增加了一项内容，即在同一个进程环境中，允许彼此之间有较大独立性的多个线程执行。在同一个进程中并行运行多个线程，是对在同一台计算机上并行运行多个进程的模拟。</span></p><h4 id=\"NZKHl\"><span class=\"ne-text\">3. 在用户空间中实现线程</span></h4><p id=\"u87629d66\" class=\"ne-p\"><span class=\"ne-text\">把整个线程包放在用户空间中，内核对线程包一无所知。从内核角度考虑，就是按正常的方式管理，即单线程进程。线程在一个运行时系统的顶部运行，这个运行时系统是一个管理线程的过程的集合。我们已经见过其中的四个过程：pthread_create ，pthread_exit ，pthread_join 和 pthread_yield 。不过，一般还会有更多的过程。</span></p><p id=\"u0357b8af\" class=\"ne-p\"><img src=\"https://cdn.nlark.com/yuque/0/2022/png/732231/1647358712337-dd2dfcd4-41bf-4232-84f1-5d53b1da4fa3.png\" width=\"427\" id=\"u42c4f22e\" class=\"ne-image\"></p><p id=\"u7f5aff2d\" class=\"ne-p\"><span class=\"ne-text\">在用户空间管理线程时，每个进程需要有其专用的线程表，用来跟踪该进程中的线程。这些表和内核中的进程表类似。该线程表由运行时系统管理。当一个线程转换到就绪状态或阻塞状态时，在该线程表中存放重新启动该线程所需的信息，与内核在进程表中存放进程的信息完全一样。</span></p><p id=\"u15e22a76\" class=\"ne-p\"><span class=\"ne-text\">优点</span></p><ol class=\"ne-ol\"><li id=\"ua0026a63\" data-lake-index-type=\"0\"><span class=\"ne-text\">用户级线程包可以在不支持线程的操作系统上实现。</span></li><li id=\"udda9682b\" data-lake-index-type=\"0\"><span class=\"ne-text\">线程的切换可以在几条指令内完成。进行类似于这样的线程切换至少比陷入内核要快一个数量级（或许更多）。</span></li><li id=\"u5a0043ee\" data-lake-index-type=\"0\"><span class=\"ne-text\">保存线程状态的过程和调度程序都只是本地过程，所以启动它们比进行内核调用效率更高。另一方面，不需要陷阱，不需要上下文切换，也不需要对内存高速缓存进行刷新，这就使得线程调度非常快捷。</span></li><li id=\"u6246b6ba\" data-lake-index-type=\"0\"><span class=\"ne-text\">它允许每个进程有自己定制的调度算法。</span></li></ol><p id=\"u4ab01e0e\" class=\"ne-p\"><span class=\"ne-text\">缺点</span></p><ol class=\"ne-ol\"><li id=\"u8dfa62ee\" data-lake-index-type=\"0\"><span class=\"ne-text\">第一个问题是如何实现阻塞系统调用。假设在还没有任何击键之前，一个线程读取键盘。让该线程实际进行该系统调用是不可接受的，因为这会停止所有的线程。</span></li><li id=\"u7e4ab763\" data-lake-index-type=\"0\"><span class=\"ne-text\">页面故障问题。如果有一个线程引起页面故障，内核由于甚至不知道有线程存在，通常会把整个进程阻塞直到磁盘 I/O 完成为止，尽管其他的线程是可以运行的。</span></li><li id=\"uad30ed64\" data-lake-index-type=\"0\"><span class=\"ne-text\">如果一个线程开始运行，那么在该进程中的其他线程就不能运行，除非第一个线程自动放弃 CPU 。</span></li><li id=\"ua97b1af9\" data-lake-index-type=\"0\"><span class=\"ne-text\">通常在经常发生线程阻塞的应用中才希望使用多个线程。对于那些基本上是 CPU 密集型而且极少有阻塞的应用程序而言，没有很大的意义。</span></li></ol><h4 id=\"fNxP7\"><span class=\"ne-text\">4. 在内核中实现线程</span></h4><p id=\"ua2587c2e\" class=\"ne-p\"><span class=\"ne-text\">在内核中实现线程时，内核中有用来记录系统中所有线程的线程表。当某个线程希望创建一个新线程或撤销一个已有线程时，它进行一个系统调用，这个系统调用通过对线程表的更新完成线程创建或撤销工作。内核的线程表保存了每个线程的寄存器、状态和其他信息。</span></p><p id=\"ube222eef\" class=\"ne-p\"><img src=\"https://cdn.nlark.com/yuque/0/2022/png/732231/1647358712320-eb583e1f-5f24-4fda-b9c9-2aa6d5757e06.png\" width=\"345\" id=\"u2882dbda\" class=\"ne-image\"></p><p id=\"u612e3e83\" class=\"ne-p\"><span class=\"ne-text\">所有能够阻塞线程的调用都以系统调用的形式实现，这与运行时系统过程相比，代价是相当可观的。当一个线程阻塞时，内核根据其选择，可以运行同一个进程中的另一个线程（若有一个就绪线程）或者运行另一个进程中的线程。而在用户级线程中，运行时系统始终运行自己进程中的线程，直到内核剥夺它的 CPU （或者没有可运行的线程存在了）为止。</span></p><h4 id=\"tILlW\"><span class=\"ne-text\">5. 混合实现</span></h4><p id=\"u6421fc2d\" class=\"ne-p\"><span class=\"ne-text\">人们已经研究了各种试图将用户级线程的优点和内核级线程的优点结合起来的方法。一种方法是使用内核级线程，然后将用户级线程与某些或者全部内核线程多路复用起来。</span></p><p id=\"ua8058da1\" class=\"ne-p\"><img src=\"https://cdn.nlark.com/yuque/0/2022/png/732231/1647358713326-82a10807-9e2e-47a7-bc36-e329b6ecd6f1.png\" width=\"623\" id=\"u58aeb2bb\" class=\"ne-image\"></p><p id=\"u1b8685a8\" class=\"ne-p\"><span class=\"ne-text\">采用这种方法，内核只识别内核级线程，并对其进行调度。其中一些内核级线程会被多个用户级线程多路复用。如同在没有多线程能力操作系统中某个进程中的用户级线程一样，可以创建、撤销和调度这些用户级线程。在这种模型中，每个内核级线程有一个可以轮流使用的用户级线程集合。</span></p><h4 id=\"oyCQI\"><span class=\"ne-text\">6. 调度程序激活机制</span></h4><p id=\"ub337e2d5\" class=\"ne-p\"><span class=\"ne-text\">调度程序激活工作的目标是模拟内核线程的功能，但是为线程包提供通常在用户空间中才能实现的更好的性能和更大的灵活性。</span></p><p id=\"uc5592fba\" class=\"ne-p\"><span class=\"ne-text\">使该机制工作的基本思路是，当内核了解到一个线程被阻塞之后，内核通知该进程的运行时系统，。内核通过在一个已知的起始地址启动运行时系统，从而发出了通知，这个机制称为上行调用。一旦如此激活，运行时系统就重新调度其线程。</span></p><p id=\"u51485209\" class=\"ne-p\"><span class=\"ne-text\">调度程序激活机制的一个目标是作为上行调用的信赖基础，这是一种违反分层次系统内在结构的概念。</span></p><h4 id=\"biibT\"><span class=\"ne-text\">7. 弹出式线程</span></h4><p id=\"u68ec4a9e\" class=\"ne-p\"><span class=\"ne-text\">一个消息的到达导致系统创建一个处理该消息的线程，这种线程称为弹出式线程。</span></p><p id=\"u845204f4\" class=\"ne-p\"><span class=\"ne-text\">弹出式线程的关键好处是，由于这种线程相当新，没有历史这样，就有可能快速创建这类线程。对该新线程指定所要处理的消息。使用弹出式线程的结果是，消息到达与处理开始之间的时间非常短。</span></p><h3 id=\"e2CT7\"><span class=\"ne-text\">三、 进程间通信</span></h3><p id=\"uecb6f1ec\" class=\"ne-p\"><span class=\"ne-text\">进程间通信需要关注的三个问题：</span></p><ol class=\"ne-ol\"><li id=\"u6d049fbc\" data-lake-index-type=\"0\"><span class=\"ne-text\">一个进程如何把信息传递给另一个。</span></li><li id=\"u06ad979b\" data-lake-index-type=\"0\"><span class=\"ne-text\">如何确保两个或更多的进程在关键活动中不会出现交叉。</span></li><li id=\"u7f657f22\" data-lake-index-type=\"0\"><span class=\"ne-text\">正确的顺序。</span></li></ol><h4 id=\"JWPWY\"><span class=\"ne-text\">1. 竞争条件</span></h4><p id=\"u4b920511\" class=\"ne-p\"><span class=\"ne-text\">两个或多个进程读写某些共享数据，而最后的结果取决于进程运行的精确时序，称为竞争条件。</span></p><h4 id=\"wRfmm\"><span class=\"ne-text\">2. 临界区</span></h4><p id=\"u00c690b7\" class=\"ne-p\"><span class=\"ne-text\">在某些时候进程可能需要访问共享内存或共享文件，或执行另外一些会导致竞争的操作。我们把对共享内存进行访问的程序片段称作临界区域或临界区。如果我们能够适当地安排，使得两个进程不可能同时处于临界区中，就能够避免竞争条件。</span></p><p id=\"ub61783ae\" class=\"ne-p\"><span class=\"ne-text\">对于保证使用共享数据的并发进程能够正确和高效地进行协作，一个好的解决方案，需要满足以下 4 个条件：</span></p><ul class=\"ne-ul\"><li id=\"u0cc4bb6f\" data-lake-index-type=\"0\"><span class=\"ne-text\">任何两个进程不能同时处于其临界区。</span></li><li id=\"ueadcd025\" data-lake-index-type=\"0\"><span class=\"ne-text\">不应对 CPU 的速度和数量做任何假设。</span></li><li id=\"uc735b457\" data-lake-index-type=\"0\"><span class=\"ne-text\">临界区外运行的进程不得阻塞其他进程。</span></li><li id=\"u38313e8d\" data-lake-index-type=\"0\"><span class=\"ne-text\">不得使进程无限期等待进入临界区。</span></li></ul><h4 id=\"ahFHj\"><span class=\"ne-text\">3. 忙等待的互斥</span></h4><h5 id=\"cxNWI\"><span class=\"ne-text\">（1） 屏蔽中断</span></h5><p id=\"ud09e254e\" class=\"ne-p\"><span class=\"ne-text\">在单处理器系统中，最简单的方法是使每个进程在刚刚进入临界区后立即屏蔽所有中断，并在就要离开之前再打开中断。屏蔽中断后，时钟中断也被屏蔽。CPU 只有发生时钟中断或其他中断时才会进行进程切换，这样，在屏蔽中断之后 CPU 将不会被切换到其他进程。于是，一旦某个进程屏蔽中断之后，它就可以检查和修改共享内存，而不必担心其他进程介入。</span></p><p id=\"u5b0044d4\" class=\"ne-p\"><span class=\"ne-text\">缺点：</span></p><ol class=\"ne-ol\"><li id=\"ucc6ce6b2\" data-lake-index-type=\"0\"><span class=\"ne-text\">若一个进程屏蔽中断后不再打开中断，整个系统可能会因此终止。</span></li><li id=\"u9d76f937\" data-lake-index-type=\"0\"><span class=\"ne-text\">如果系统是多处理器（有两个或可能更多的处理器），则屏蔽中断仅仅对执行 disable 指令的那个 CPU 有效。其他 CPU 仍将继续运行，并可以访问共享内存。</span></li></ol><p id=\"ue1d51a97\" class=\"ne-p\"><span class=\"ne-text\">但是对内核来说，当它在更新变量或列表的几条指令期间将中断屏蔽是很方便的。</span></p><p id=\"ufceb5b13\" class=\"ne-p\"><span class=\"ne-text\">所以结论是：屏蔽中断对于操作系统本身而言是一项很有用的技术，但对于用户进程则不是一种合适的通用互斥机制。</span></p><h5 id=\"EHbgm\"><span class=\"ne-text\">（2） 锁变量</span></h5><p id=\"u4b16d252\" class=\"ne-p\"><span class=\"ne-text\">设想有一个共享（锁）变量，其初始值为 0。当一个进程想进入其临界区时，它首先测试这把锁。如果该锁的值为 0，则该进程将其设置为 1 并进入临界区。若这把锁的值已经为 1，则该进程将等待直到其值变为 0。于是，0 就表示临界区内没有进程，1 表示已经有某个进程进入临界区。</span></p><p id=\"ufe769e23\" class=\"ne-p\"><span class=\"ne-text\">缺点：锁变量的读写不是原子操作，可能被其他进程中断</span></p><p id=\"uf059431b\" class=\"ne-p\"><span class=\"ne-text\">假设一个进程读出锁变量的值并发现它为 0，而恰好在它将其值设置为 1 之前，另一个进程被调度运行，将该锁变量设置为 1。当第一个进程再次能运行时，它同样也将该锁设置为 1，则此时同时有两个进程进入临界区中。</span></p><h5 id=\"yp4wE\"><span class=\"ne-text\">（3）严格轮换法</span></h5><p id=\"ud07af71a\" class=\"ne-p\"><span class=\"ne-text\">定义一个整型变量 turn ，初始值为 0，用于记录轮到哪个进程进入临界区，并检查或更新共享内存。开始时，进程 0 检查 turn ，发现其值为 0，于是进入临界区。进程 1 也发现其值为 0，所以在一个等待循环中不停地测试 turn ，看其值何时变为 1。连续测试一个变量直到某个值出现为止，称为忙等待。</span></p><p id=\"ub821eca7\" class=\"ne-p\"><img src=\"https://cdn.nlark.com/yuque/0/2022/png/732231/1647358713260-965dfe7d-4bdd-468f-aef4-fd0bd6ef651b.png\" width=\"739\" id=\"ua427d614\" class=\"ne-image\"></p><p id=\"ub07fd46e\" class=\"ne-p\"><span class=\"ne-text\">只有在有理由认为等待时间是非常短的情形下，才使用忙等待。用于忙等待的锁，称为自旋锁（spin lock）。</span></p><p id=\"ua8d7f963\" class=\"ne-p\"><span class=\"ne-text\">缺点：</span></p><ol class=\"ne-ol\"><li id=\"u80c2c6bd\" data-lake-index-type=\"0\"><span class=\"ne-text\">采用忙等待的方式，会浪费 CPU 时间。</span></li><li id=\"u125f36e6\" data-lake-index-type=\"0\"><span class=\"ne-text\">该方案要求两个进程严格地轮流进入它们的临界区，会造成一个临界区外运行的进程阻塞其他进程的情况。</span></li></ol><h5 id=\"LDwBz\"><span class=\"ne-text\">（4）Peterson 解法</span></h5><p id=\"u97ddeb3f\" class=\"ne-p\"><span class=\"ne-text\">在使用共享变量（即进入其临界区）之前，各个进程使用其进程号 0 或 1 作为参数来调用 enter_region 。该调用在需要时将使进程等待，直到能安全地进入临界区。在完成对共享变量的操作之后，进程将调用 leave_region ，表示操作已完成，若其他的进程希望进入临界区，则现在就可以进入。</span></p><p id=\"u1231b170\" class=\"ne-p\"><img src=\"https://cdn.nlark.com/yuque/0/2022/png/732231/1647358713398-b5c57590-5982-4930-aa15-09d028a9432a.png\" width=\"984\" id=\"ua675d282\" class=\"ne-image\"></p><h5 id=\"MLBRa\"><span class=\"ne-text\">（5）TSL 指令</span></h5><p id=\"ue4646917\" class=\"ne-p\"><span class=\"ne-text\">TSL 指令是硬件支持的一种方案，称为测试并加锁，它将一个内存字 lock 读到寄存器 RX 中，然后在该内存地址上存一个非零值。</span></p><p id=\"ucaa0379a\" class=\"ne-p\"><span class=\"ne-text\">读字和写字操作保证是不可分割的，即该指令结束之前其他处理器均不允许访问该内存字。执行 TSL 指令的 CPU 将锁住内存总线，以禁止其他 CPU 在本指令结束之前访问内存。因此不会出现前面第二种方法锁变量的问题。</span></p><p id=\"u50b68964\" class=\"ne-p\"><img src=\"https://cdn.nlark.com/yuque/0/2022/png/732231/1647358713372-fd6d92e1-8855-433f-aef1-9d139c5d39e7.png\" width=\"944\" id=\"ua30a8d45\" class=\"ne-image\"></p><p id=\"u6f2233d3\" class=\"ne-p\"><span class=\"ne-text\">为了使用 TSL 指令，要使用一个共享变量 lock 来协调对共享内存的访问。当 lock 为 0 时，任何进程都可以使用 TSL 指令将其设置为 1，并读写共享内存。当操作结束时，进程用一条普通的 move 指令将 lock 的值重新设置为 0。</span></p><p id=\"u55a28230\" class=\"ne-p\"><span class=\"ne-text\">一个可替代 TSL 的指令是 XCHG ，它原子性地交换了两个位置的内容，它本质上与 TSL 的解决办法一样。所有的 Intel x86 CPU 在低层同步中使用 XCHG 指令。</span></p><p id=\"u415fc756\" class=\"ne-p\"><img src=\"https://cdn.nlark.com/yuque/0/2022/png/732231/1647358713387-44f5c1ea-b8bf-487d-b85d-574701da82a4.png\" width=\"948\" id=\"ub64677ba\" class=\"ne-image\"></p><p id=\"ubf018010\" class=\"ne-p\"><span class=\"ne-text\">缺点：</span></p><ol class=\"ne-ol\"><li id=\"u39d50835\" data-lake-index-type=\"0\"><span class=\"ne-text\">采用忙等待的方式，会浪费 CPU 时间。</span></li></ol><h4 id=\"V2UCy\"><span class=\"ne-text\">4. 睡眠与唤醒</span></h4><p id=\"uf063b2ad\" class=\"ne-p\"><span class=\"ne-text\">Peterson 解法和 TSL 或 XCHG 解法都是正确的，但它们都有忙等待的缺点。这种方法不仅浪费了 CPU 时间，而且还可能引起预想不到的结果。</span></p><p id=\"u3f511202\" class=\"ne-p\"><span class=\"ne-text\">我们可以使用睡眠与唤醒的机制，使它们在无法进入临界区时将阻塞，而不是忙等待。</span></p><p id=\"u1b0b34cc\" class=\"ne-p\"><span class=\"ne-text\">最简单的是 sleep 和 wakeup 。 sleep 是一个将引起调用进程阻塞的系统调用，即被挂起，直到另外一个进程将其唤醒。wakeup 调用有一个参数，即要被唤醒的进程。</span></p><p id=\"u84b35c4a\" class=\"ne-p\"><span class=\"ne-text\">缺点：</span></p><p id=\"uebaca453\" class=\"ne-p\"><span class=\"ne-text\">参考生产者-消费者问题，发给一个（尚）未睡眠进程的 wakeup 信号会出现丢失，从而出现生产者和消费者同时睡眠的情况。</span></p><p id=\"ue7c0fbee\" class=\"ne-p\"><span class=\"ne-text\">一种快速的弥补方法是修改规则，加上一个唤醒等待位。当一个 wakeup 信号发送给一个清醒的进程信号时，将该位置 1。随后，当该进程要睡眠时，如果唤醒等待位为 1，则将该位清除，而该进程仍然保持清醒。但原则上讲，这并没有从根本上解决问题。</span></p><h4 id=\"sXXIz\"><span class=\"ne-text\">5. 信号量</span></h4><p id=\"uac6b263b\" class=\"ne-p\"><span class=\"ne-text\">信号量是一个整型变量用来累计唤醒次数，供以后使用。一个信号量的取值可以为 0（表示没有保存下来的唤醒操作）或者为正值（表示有一个或多个唤醒操作）。</span></p><p id=\"u33afcbe9\" class=\"ne-p\"><span class=\"ne-text\">对信号量一共有两种操作：down 和 up （分别为一般化后的 sleep 和 wakeup ）。</span></p><p id=\"u3849d7f6\" class=\"ne-p\"><span class=\"ne-text\">对一信号量执行 down 操作，则是检查其值是否大于 0。若该值大于 0，则将其值减 1（即用掉一个保存的唤醒信号）并继续；若该值为 0，则进程将睡眠，而且此时 down 操作并未结束。</span></p><p id=\"ub5519bec\" class=\"ne-p\"><span class=\"ne-text\">对一信号量执行 up 操作，会对信号量的值增 1。如果一个或多个进程在该信号量上睡眠，信号量的值仍旧是 0，但在其上睡眠的进程会被唤醒一个。</span></p><p id=\"ud4a06746\" class=\"ne-p\"><span class=\"ne-text\">检查数值、修改变量值以及可能发生的睡眠和唤醒操作均作为一个单一的、不可分割的原子操作完成。所谓原子操作，是指一组相关联的操作要么都不间断地执行，要么都不执行。</span></p><h4 id=\"qZRGc\"><span class=\"ne-text\">6. 互斥量</span></h4><p id=\"uf911a753\" class=\"ne-p\"><span class=\"ne-text\">如果不需要信号量的计数能力，有时可以使用信号量的一个简化版本，称为互斥量（mutex）。互斥量仅仅适用于管理共享资源或一小段代码。由于互斥量在实现时既容易又有效，这使得互斥量在实现用户空间线程包时非常有用。</span></p><p id=\"ub462ad61\" class=\"ne-p\"><span class=\"ne-text\">互斥量是一个可以处于两态之一的变量：解锁和加锁。当一个线程（或进程）需要访问临界区时，它调用 mutex_lock 。如果该互斥量当前是解锁的（即临界区可用），此调用成功，调用线程可以自由进入该临界区。另一方面，如果该互斥量已经加锁，调用线程被阻塞，直到在临界区中的线程完成并调用 mutex_unlock 。如果多个线程被阻塞在该互斥量上，将随机选择一个线程并允许它获得锁。</span></p><p id=\"u88f42e74\" class=\"ne-p\"><img src=\"https://cdn.nlark.com/yuque/0/2022/png/732231/1647358714079-f7f766ed-12c2-4b10-a323-12b9f1b37558.png\" width=\"1049\" id=\"u0c28150e\" class=\"ne-image\"></p><p id=\"u7db26f4a\" class=\"ne-p\"><span class=\"ne-text\">enter_region 和 mutex_lock 的代码很相似，但有一个关键的区别。</span></p><p id=\"ub0a5f022\" class=\"ne-p\"><span class=\"ne-text\">当 enter_region 进入临界区失败时，它始终重复测试锁（忙等待）。实际上，由于时钟超时的作用，会调度其他进程运行。这样迟早拥有锁的进程会进入运行并释放锁。</span></p><p id=\"ufc805e4c\" class=\"ne-p\"><span class=\"ne-text\">在（用户）线程中，情形有所不同，因为没有时钟停止运行时间过长的线程。结果是通过忙等待的方式来试图获得锁的线程将永远循环下去，决不会得到锁，因为这个运行的线程不会让其他线程运行从而释放锁。因此当 mutex_lock 取锁失败时，它调用 thread_yield 将 CPU 放弃给另一个线程。这样，就没有忙等待。在该线程下次运行时，它再一次对锁进行测试。</span></p><h4 id=\"cklet\"><span class=\"ne-text\">7. 条件变量</span></h4><p id=\"u1ca8ce42\" class=\"ne-p\"><span class=\"ne-text\">条件变量允许线程由于一些未达到的条件而阻塞。</span></p><p id=\"u38f3c613\" class=\"ne-p\"><span class=\"ne-text\">与条件变量相关的最重要的两个操作是 pthread_cond_wait 和 pthread_cond_signal 。前者阻塞调用线程直到另一其他线程向它发信号（使用后一个调用）。</span></p><p id=\"u15437e27\" class=\"ne-p\"><span class=\"ne-text\">条件变量（不像信号量）不会存在内存中。如果将一个信号量传递给一个没有线程在等待的条件变量，那么这个信号就会丢失。</span></p><h4 id=\"CiDOP\"><span class=\"ne-text\">8. 管程</span></h4><p id=\"u3d92473f\" class=\"ne-p\"><span class=\"ne-text\">管程是一种高级同步原语，管程有一个很重要的特性，即任一时刻管程中只能有一个活跃进程，这一特性使管程能有效地完成互斥。</span></p><p id=\"u773574a7\" class=\"ne-p\"><span class=\"ne-text\">当一个进程调用管程过程时，该过程中的前几条指令将检查在管程中是否有其他的活跃进程。如果当一个进程调用管程过程时，该过程中的前几条指令将检查在管程中是否有其他的活跃进程。如果</span></p><p id=\"ucec01bc1\" class=\"ne-p\"><span class=\"ne-text\">管程提供了一种实现互斥的简便途径，通过临界区互斥的自动化，管程比信号量更容易保证并行编程的正确性。</span></p><h4 id=\"l2Lvn\"><span class=\"ne-text\">9. 消息传递</span></h4><p id=\"u8e783819\" class=\"ne-p\"><span class=\"ne-text\">这种进程间通信的方法使用两条原语 send 和 receive ，它们像信号量而不像管程，是系统调用而不是语言成分。</span></p><p id=\"uf5bfc33f\" class=\"ne-p\"><span class=\"ne-text\">前一个调用向一个给定的目标发送一条消息，后一个调用从一个给定的源（或者是任意源，如果接收者不介意的话）接收一条消息。如果没有消息可用，则接收者可能被阻塞，直到一条消息到达，或者，带着一个错误码立即返回。</span></p><h4 id=\"Bhyhu\"><span class=\"ne-text\">10. 屏障</span></h4><p id=\"u9544ea6f\" class=\"ne-p\"><span class=\"ne-text\">在有些应用中划分了若干阶段，并且规定，除非所有的进程都就绪准备着手下一个阶段，否则任何进程都不能进入下一个阶段。可以通过在每个阶段的结尾安置屏障来实现这种行为。当一个进程到达屏障时，它就被屏障阻拦，直到所有进程都到达该屏障为止。</span></p><h3 id=\"TtiiE\"><span class=\"ne-text\">四、调度</span></h3><p id=\"ubdcf2395\" class=\"ne-p\"><span class=\"ne-text\">当计算机系统是多道程序设计系统时，通常就会有多个进程或线程同时竞争 CPU。只要有两个或更多的进程处于就绪状态，这种情形就会发生。如果只有一个 CPU 可用，那么就必须选择下一个要运行的进程。在操作系统中，完成选择工作的这一部分称为调度程序，该程序使用的算法称为调度算法。</span></p><h4 id=\"h3NfM\"><span class=\"ne-text\">1. 何时调度</span></h4><ol class=\"ne-ol\"><li id=\"ufb3bfa20\" data-lake-index-type=\"0\"><span class=\"ne-text\">在创建一个新进程之后，需要决定是运行父进程还是运行子进程。</span></li><li id=\"u82d9306e\" data-lake-index-type=\"0\"><span class=\"ne-text\">在一个进程退出时必须做出调度决策。</span></li><li id=\"u3450d398\" data-lake-index-type=\"0\"><span class=\"ne-text\">当一个进程阻塞在 I/O 和信号量上或由于其他原因阻塞时，必须选择另一个进程运行。</span></li><li id=\"ue1ea8a6b\" data-lake-index-type=\"0\"><span class=\"ne-text\">第四，在一个 I/O 中断发生时，必须做出调度决策。</span></li></ol><h4 id=\"V6UHW\"><span class=\"ne-text\">2. 调度算法分类</span></h4><ol class=\"ne-ol\"><li id=\"u718738a6\" data-lake-index-type=\"0\"><span class=\"ne-text\">批处理。</span></li><li id=\"u74517b81\" data-lake-index-type=\"0\"><span class=\"ne-text\">交互式。</span></li><li id=\"u425722d3\" data-lake-index-type=\"0\"><span class=\"ne-text\">实时。</span></li></ol><h4 id=\"HWQSD\"><span class=\"ne-text\">3. 调度算法的目标</span></h4><p id=\"uf49f4cef\" class=\"ne-p\"><span class=\"ne-text\">为了设计调度算法，有必要考虑什么是一个好的调度算法。某些目标取决于环境（批处理、交互式或实时），但是还有一些目标是适用于所有情形的。</span></p><p id=\"u173ec000\" class=\"ne-p\"><img src=\"https://cdn.nlark.com/yuque/0/2022/png/732231/1647358714216-66143694-5546-460a-bbbb-cce489e6e022.png\" width=\"542\" id=\"u817dcf3b\" class=\"ne-image\"></p><h4 id=\"cmgPH\"><span class=\"ne-text\">4. 批处理系统中的调度</span></h4><h5 id=\"nOhIk\"><span class=\"ne-text\">（1）先来先服务</span></h5><p id=\"u2a377bdb\" class=\"ne-p\"><span class=\"ne-text\">在所有调度算法中，最简单的是非抢占式的先来先服务算法。使用该算法，进程按照它们请求 CPU 的顺序使用 CPU 。</span></p><p id=\"u35644aaa\" class=\"ne-p\"><span class=\"ne-text\">优点：</span></p><p id=\"uf4becf5d\" class=\"ne-p\"><span class=\"ne-text\">这个算法的主要优点是易于理解并且便于在程序中运用。</span></p><p id=\"uf6c2cffa\" class=\"ne-p\"><span class=\"ne-text\">缺点：</span></p><p id=\"ub433b3d1\" class=\"ne-p\"><span class=\"ne-text\">平均等待时间过长。</span></p><h5 id=\"EMKdp\"><span class=\"ne-text\">（2）最短作业优先</span></h5><p id=\"ubc3a5f31\" class=\"ne-p\"><span class=\"ne-text\">当输入队列中有若干个同等重要的作业被启动时，调度程序应使用最短作业优先算法。</span></p><p id=\"ufe32b149\" class=\"ne-p\"><span class=\"ne-text\">只有在所有的作业都可同时运行的情形下，最短作业优先算法才是最优化的。</span></p><h5 id=\"JJnqV\"><span class=\"ne-text\">（3）最短剩余时间优先</span></h5><p id=\"u3010b7f8\" class=\"ne-p\"><span class=\"ne-text\">最短作业优先的抢占式版本是最短剩余时间优先算法。使用这个算法，调度程序总是选择剩余运行时间最短的那个进程运行。</span></p><h4 id=\"dwQCf\"><span class=\"ne-text\">5. 交互式系统中的调度</span></h4><h4 id=\"fO2OV\"><span class=\"ne-text\">（1）轮转调度</span></h4><p id=\"u1e559454\" class=\"ne-p\"><span class=\"ne-text\">一种最古老、最简单、最公平且使用最广的算法是轮转调度。每个进程被分配一个时间段，称为时间片，即允许该进程在该时间段中运行。如果在时间片结束时该进程还在运行，则将剥夺 CPU 并分配给另一个进程。如果该进程在时间片结束前阻塞或结束，则 CPU 立即进行切换。</span></p><p id=\"u224f9d71\" class=\"ne-p\"><span class=\"ne-text\">需要注意的是，时间片设得太短会导致过多的进程切换，降低了 CPU 效率；而设得太长又可能引起对短的交互请求的响应时间变长。将时间片设为 20ms ～ 50 ms 通常是一个比较合理的折中。</span></p><h4 id=\"Ba7T2\"><span class=\"ne-text\">（2）优先级调度</span></h4><p id=\"u09976307\" class=\"ne-p\"><span class=\"ne-text\">每个进程被赋予一个优先级，允许优先级最高的可运行进程先运行。为了防止高优先级进程无休止地运行下去，调度程序可以在每个时钟滴答（即每个时钟中断）降低当前进程的优先级。如果这个动作导致该进程的优先级低于次高优先级的进程，则进行进程切换。</span></p><h4 id=\"IlGFC\"><span class=\"ne-text\">（3）多级队列</span></h4><p id=\"ua32667cd\" class=\"ne-p\"><span class=\"ne-text\">将一组进程按优先级分成若干类，并且在各类之间采用优先级调度，而在各类进程的内部采用其他调度方式。</span></p><h4 id=\"M5koO\"><span class=\"ne-text\">（4）最短进程优先</span></h4><p id=\"ua78aa1f4\" class=\"ne-p\"><span class=\"ne-text\">对于批处理系统而言，由于最短作业优先常常伴随着最短响应时间，所以如果能够把它用于交互进程，那将是非常好的。</span></p><h4 id=\"WvdTq\"><span class=\"ne-text\">（5）保证调度</span></h4><p id=\"udd72c108\" class=\"ne-p\"><span class=\"ne-text\">向用户作出明确的性能保证，然后去实现它。</span></p><p id=\"ua46e3f5a\" class=\"ne-p\"><span class=\"ne-text\">一种很实际并很容易实现的保证是：若用户工作时有 n 个用户登录，则用户将获得 CPU 处理能力的 1/n 。类似地，在一个有 n 个进程运行的单用户系统中，若所有的进程都等价，则每个进程将获得 1/n 的 CPU 时间。看上去足够公平了。</span></p><h4 id=\"Tiqaa\"><span class=\"ne-text\">（6）彩票调度</span></h4><p id=\"u3fbc1674\" class=\"ne-p\"><span class=\"ne-text\">向进程提供各种系统资源（如 CPU 时间）的彩票。一旦需要做出一项调度决策时，就随机抽出一张彩票，拥有该彩票的进程获得该资源。在应用到 CPU 调度时，系统可以掌握每秒钟 50 次的一种彩票，作为奖励每个获奖者可以得到 20 ms 的 CPU 时间。</span></p><h4 id=\"NnMcu\"><span class=\"ne-text\">（7）公平分享调度</span></h4><p id=\"ubd1fe371\" class=\"ne-p\"><span class=\"ne-text\">到现在为止，我们假设被调度的都是各个进程自身，并不关注其所有者是谁。</span></p><p id=\"u4b154840\" class=\"ne-p\"><span class=\"ne-text\">为了避免这种情形，某些系统在调度处理之前考虑谁拥有进程这一因素。在这种模式中，每个用户分配到 CPU 时间的一部分，而调度程序以一种强制的方式选择进程。这样，如果两个用户都得到获得 50% CPU 时间的保证，那么无论一个用户有多少进程存在，每个用户都会得到应有的 CPU 份额。</span></p><h4 id=\"QdPKK\"><span class=\"ne-text\">6. 策略和机制</span></h4><p id=\"ua4939001\" class=\"ne-p\"><span class=\"ne-text\">我们讨论的调度算法中没有一个算法从用户进程接收有关的调度决策信息，这就导致了调度程序很少能够做出最优的选择。</span></p><p id=\"u99c11fa4\" class=\"ne-p\"><span class=\"ne-text\">解决问题的方法是将调度机制与调度策略分离，也就是将调度算法以某种形式参数化，而参数可以由用户进程填写。</span></p><p id=\"ub0498032\" class=\"ne-p\"><span class=\"ne-text\">在这里，调度机制位于内核，而调度策略则由用户进程决定。</span></p></div>",
  "body": "<a name=\"hjZxy\"></a>\n## 第一章 引论\n<a name=\"nbNx0\"></a>\n### 1. 操作系统定义\n操作系统是运行在内核态的软件，它执行两个基本上独立的任务。\n\n- 隐藏计算机底层硬件的实现，为用户及应用程序提供一个资源集的清晰抽象。\n- 管理计算机硬件资源。\n\n任何操作系统的核心是它可处理的系统调用集。这些系统带欧阳真实地说明了操作系统做的工作。\n<a name=\"OcrYU\"></a>\n### 2. 计算机运行模式\n多数计算机有两种运行模式：内核态和用户态。<br />软件中最基础的部分是操作系统，它运行在内核态。这内核态模式下，操作系统具有对所有硬件的完全访问权，可以执行机器能够运行的任何指令。软件的其余部分运行在用户态下，在用户态下，只能使用机器指令中的一个子集。<br />![image.png](https://cdn.nlark.com/yuque/0/2022/png/732231/1647358712354-28baa2f7-a6d8-40cb-8ed0-62b316515dd7.png#averageHue=%23f4f4f4&clientId=u5297893b-ed7c-4&from=paste&id=u1ad25170&originHeight=435&originWidth=709&originalType=url&ratio=1&rotation=0&showTitle=false&size=109293&status=done&style=none&taskId=u58382055-7db3-4d23-a6a8-b39151294a8&title=)\n<a name=\"bC8En\"></a>\n### 3. shell 与 GUI\n用户与之交互的程序，基于文本的通常称为 shell，而基于图标的则称为图形用户界面（GUI）。<br />它们并不是操作系统的一部分，它们是运行在用户态最低层次的用户接口程序\n<a name=\"Xzbui\"></a>\n### 4. 对于抽象的理解\n现代计算机系统中，大量使用了抽象这一概念。抽象是管理复杂性的一个关键。好的抽象可以把一个几乎不可能管理的任务划分为两个可管理的部分。其中第一部分是有关抽象的定义和实现，第二部分是随时用这些抽象解决问题。<br />以抽象的角度看操作系统，它的任务就是创建好的抽象，并实现和管理它所创建的抽象。\n<a name=\"POCrf\"></a>\n### 5. 多路复用资源方式\n在时间上复用：当一种资源在时间上复用时，不同的程序或用户轮流使用它。<br />在空间上复用：每个客户得到资源的一部分。\n<a name=\"Avbah\"></a>\n### 6. I/O 设备的结构\nI/O 设备一般包括两个部分：设备控制器和设备本身。控制器插在电路板上的一块芯片或一组芯片，这块电路板物理地控制芯片，它从操作系统接收命令。<br />控制器的任务是为操作系统提供一个简单的接口。每类设备控制器是不同的，所以需要不同的软件进行控制。专门与控制器对话，发出命令并接收响应的软件，称为设备驱动程序。为了使用设备驱动程序，必须要把设备驱动程序装入到操作系统中，这样它可在核心态中运行。<br />每个设备控制器都有少量的用于通信的寄存器，所有的寄存器的集合构成了 I/O 空间。\n<a name=\"qfYAJ\"></a>\n### 7. IDE 概念\nIDE 表示集成驱动电子设备，是许多计算机的磁盘标准。\n<a name=\"eig5K\"></a>\n### 8. 实现输入输出的三种方式\n第一种方式，用户程序发出一个系统调用，内核将其翻译成一个对应设备驱动程序的过程调用。然后设备驱动程序启动 I/O 并在一个连续不断的循环中检查该设备，看该设备是否完成了工作。当 I/O 结束后，设备驱动程序把数据送到指定的地方（若有此需要），并返回。然后操作系统将控制返回给调用者。这种方式称为忙等待（busy waiting），其缺点是要占据 CPU ，CPU 一直轮询设备直到对应的 I/O 操作完成。<br />第二种方式，设备驱动程序启动设备并且让该设备在操作完成时发出一个中断。设备驱动程序在这个时刻返回。操作系统接着在需要时阻塞调用者并安排其他工作进行。当设备驱动程序检测到该设备的操作完毕时，它发出一个中断通知操作完成。<br />![image.png](https://cdn.nlark.com/yuque/0/2022/png/732231/1647358712346-e6029738-9673-4172-8024-98b729bd359b.png#averageHue=%23f6f6f6&clientId=u5297893b-ed7c-4&from=paste&id=udd91cfa8&originHeight=340&originWidth=716&originalType=url&ratio=1&rotation=0&showTitle=false&size=69907&status=done&style=none&taskId=u5ebb4048-e312-454c-b31a-a5b7ce85dd6&title=)<br />第三种方式，为 I/O 使用一种特殊的直接存储器访问（Direct Memory Access，DMA）芯片，它可以控制在内存和某些控制器之间的位流，而无须持续的 CPU 干预。\n<a name=\"bPrE6\"></a>\n### 9. CMOS 存储器\nCMOS 存储器是易失性的。许多计算机利用 CMOS 存储器保持当前时间和日期。 CMOS 存储器和递增时间的时钟电路有一块小电池驱动，所以，即使计算机没有上电，时间也可以正确地更新。\n<a name=\"I1ZY8\"></a>\n### 10. USB 概念\nUSB 是通用串行总线，是用来将所有的慢速 I/O 设备，诸如键盘和鼠标，与计算机相连。USB 是一种集中式总线，其根设备每 1ms 轮询一次 I/O 设备，看是否有消息收发。所有的 USB 设备共享一个 USB 设备驱动器，于是就不需要为新的 USB 设备安装新的设备驱动器了。\n<a name=\"cTnqv\"></a>\n### 11. 即插即用概念\n在一般的计算机工作环境下，操作系统必须了解有些什么外部设备连接到计算机上，并对它们进行配置。这种需求导致了 Intel 和微软设计了一种名为即插即用的 I/O 系统。<br />在即插即用之前，每块 I/O 卡有一个固定的中断请求级别和用于其 I/O 寄存器的固定地址。即插即用所做的工作是，系统自动地收集有关 I/O 设备的信息，集中赋予 I/O 地址，然后通知每块卡所用的数值。\n<a name=\"RSv1n\"></a>\n### 12. 计算机的启动\nPentium 的简要启动过程如下。在每个 Pentium 上有一块母板。在母板上有一个称为基本输入输出系统（Basic Input Output System，BIOS）的程序。在 BIOS 内有底层 I/O 软件，包括读键盘、写屏幕、进行磁盘 I/O 以及其他过程。现在这个程序存放在一块闪速 RAM 中，它是非可易失性的，但是在发现 BIOS 中有错时可以通过操作系统对它进行更新。<br />简要过程如下：\n\n1. BIOS 开始运行。它首先检查计算机设备的状态信息是否正常。\n2. 扫描并记录总线所连设备。\n3. 依次搜索启动设备，导入操作系统。\n4. 操作系统询问 BIOS ，获得配置信息，获取所有设备的驱动程序并调入内核。\n5. 初始化有关表格，创建需要的任何背景进程，并在每个终端上启动登录程序或 GUI。\n<a name=\"pOrMf\"></a>\n### 13. 操作系统分类\n大型机操作系统、服务器操作系统、多处理器操作系统、个人计算机操作系统、掌上计算机操作系统、嵌入式操作系统、传感器节点操作系统、实时操作系统、智能卡操作系统\n<a name=\"xbXo8\"></a>\n### 14. 实时操作系统的基本概念\n实时操作系统的特征是将时间作为关键参数。通常分为硬实时操作系统和软实时操作系统。<br />在硬实时操作系统中，某个规定的动作必须绝对地在规定的时刻（或规定的时间范围）发生。<br />在软实时操作系统中，偶尔违反最终时限是不希望的，但可以接受，并且不会引起任何实时性的损害。\n<a name=\"I4rpo\"></a>\n### 15. UID\n系统管理器授权每个进程使用一个给定的 UID 标识。每个被启动的进程都有一个启动该进程的用户 UID 。子进程与父进程拥有一样 UID。用户可以是某个组的成员，每个组也有一个 GID 标识。\n<a name=\"etZ58\"></a>\n### 16. 文件路径\n在 UNIX 中，绝对路径名包含了从根目录到该文件的所有目录清单，它们之间用正斜线 / 隔开。最开始的正斜线标识这是从根目录开始的绝对路径。<br />在 MS-DOS 和 Windows 中，用反斜线 \\ 作为分隔符。\n<a name=\"CSfMs\"></a>\n### 17. 文件系统安装\nUNIX 一个重要概念是安装文件系统。几乎所有的个人计算机都有一个或多个光盘驱动器，可以插入 CD-ROM 和 DV D。它们几乎都有 USB 接口，可以插入 USB 存储棒（实际是固态磁盘驱动器）。为了提供一个出色的方式处理可移动介质，UNIX 允许把在 CD-ROM 或 DVD 上的文件系统接入到主文件树上。 mount 系统调用允许把在 CD-ROM 上的文件系统连接到程序所希望的根文件系统上。\n<a name=\"SXZLl\"></a>\n### 18. 特殊文件\n提供特殊文件是为了使 I/O 设备看起来像文件一般。这样，就像使用系统调用读写文件一样，I/O 设备也可通过同样的系统调用进行读写。<br />有两类特殊文件：块特殊文件和字符特殊文件。<br />块特殊文件指那些由可随机存取的块组成的设备，如磁盘等。比如打开一个块特殊文件，然后读第 4 块，程序可以直接访问设备的第 4 块而不必考虑存放该文件的文件系统结构。<br />字符特殊文件用于打印机、调制解调器和其他接收或输出字符流的设备。按照惯例，特殊文件保存在 /dev 目录中。例如，/dev/lp 是打印机。\n<a name=\"GSolW\"></a>\n### 19. 文件保护\nUNIX 操作系统通过对每个文件赋予一个 9 位的二进制保护代码，对 UNIX 中的文件实现保护。该保护代码有三个 3 位字段，一个用于所有者，一个用于所有者同组（用户被系统管理员划分成组）中的其他成员，而另一个用于其他人。每个字段中有一位用于读访问，一位用于写访问，一位用于执行访问。这些位就是知名的 rwx 位。\n<a name=\"BHcuq\"></a>\n### 20. 系统调用概念\n如果一个进程正在用户态中运行一个用户程序，并且需要一个系统服务，比如从一个文件读数据，那么它就必须执行一个陷阱或系统调用指令，将控制转移到操作系统。操作系统接着通过参数检查，找出所需要的调用进程。然后，它执行系统调用，并把控制返回给在系统调用后面跟随着的指令。在某种意义上，进行系统调用就像进行一个特殊的过程调用，但是只有系统调用可以进入内核，而过程调用则不能。\n<a name=\"EKe74\"></a>\n### 21. POSIX\nUNIX 有很多不兼容的版本，从而导致了混乱。为了能使编写的程序能够在任何版本的 UNIX 系统运行，IEEE 提出了一个 UNIX 标准，称为 POSIX，目前大多数 UNIX 版本都支持他。 POSIX 标准定义了凡是 UNIX 必须支持的小型系统调用接口。\n<a name=\"ft0Oa\"></a>\n### 22. Windows Win32 API\nWindows 和 UNIX 的主要差别在于编程方式。一个 UNIX 程序包括做各种处理的代码以及从事完成特定服务的系统调用。相反，一个 Windows 程序通常是一个事件驱动程序。其中主程序等待某些事件发生，然后调用一个过程处理该事件。<br />在 UNIX 中，系统调用（如 read）和系统调用所使用的库过程（如 read）之间几乎是一一对应的关系。换句话说，对于每个系统调用，差不多就涉及一个被调用的库过程。<br />在 Windows 中，情况就大不相同了。首先，库调用和实际的系统调用是几乎不对应的。微软定义了一套过程，称为应用编程接口（Application Program Interface，Win32 API），程序员用这套过程获得操作系统的服务。<br />Win32 并不是非常统一的或有一致的接口。其主要原因是由于 Win32 需要与早期的在 Windows 3.x 中使用的 16 位接口向后兼容。<br />Windows 中没有类似 UNIX 中的进程层次，所以不存在父进程和子进程的概念。在进程创建之后，创建者和被创建者是平等的。\n<a name=\"InlC7\"></a>\n### 23. 操作系统结构\n单体结构、层次式结构、微内核、客户机-服务器模式、虚拟机、外核、\n<a name=\"ehAj7\"></a>\n### 24. 微内核的概念\n在微内核设计背后的思想是，为了实现高可靠性，将操作系统划分成小的、良好定义的模块，只有其中一个模块——微内核——运行在内核态上，其余的模块，由于功能相对弱些，则作为普通用户进程运行。特别地，由于把每个设备驱动和文件系统分别作为普通用户进程，这些模块中的错误虽然会使这些模块崩溃，但是不会使得整个系统死机。\n<a name=\"WdGLK\"></a>\n### 25. 机制与策略分离原则\n策略指的是做什么，机制指的是怎么做。例如一个比较简单的调度算法是，对每个进程赋予一个优先级，并让内核执行在具有最高优先级进程中可以运行的某个进程。这里，机制（在内核中）就是寻找最高优先级的进程并运行之。而策略（赋予进程以优先级）可以由用户态中的进程完成。在这个方式中，机制和策略是分离的，从而使系统内核变得更小。\n<a name=\"nDEZJ\"></a>\n### 26. make 程序\n在 UNIX 系统中，有个名为 make 的程序（其大量的变体如 gmake、pmake 等），它读入 Makefile ，该 Makefile 说明哪个文件与哪个文件相关。make 的作用是，在构建操作系统二进制码时，检查此刻需要哪个目标文件，而且对于每个文件，检查自从上次目标文件创建之后，是否有任何它依赖（代码和头文件）的文件已经被修改了。如果有，目标文件需要重新编译。在大型项目中，创建 Makefile 是一件容易出错的工作，所以出现了一些工具使该工作能够自动完成。\n<a name=\"j7xfA\"></a>\n## 第二章 进程与线程\n:::info\n进程和线程的区别：\n\n1. 定义不同，进程是执行中的一段程序，而一个进程中执行中的每个任务即为一个线程\n2. 一个线程只可以属于一个进程，但一个进程能包含多个线程\n3. 线程无地址空间，它包括在进程的地址空间里\n4. 线程的开销或代价比进程的小\n:::\n<a name=\"Lvgru\"></a>\n### 一、进程\n<a name=\"PG5g1\"></a>\n#### 1. 进程模型\n在进程模型中，计算机上所有可运行的软件，通常也包括操作系统，被组织成若干顺序进程，简称进程。一个进程就是一个正在执行程序的实例，包括程序计数器、寄存器和变量的当前值。<br />由于 CPU 在各进程之间来回快速切换，所以每个进程执行其运算的速度是不确定的。而且当同一进程再次运行时，其运算速度通常也不可再现。所以，在对进程编程时决不能对时序做任何确定的假设。\n<a name=\"p1JHi\"></a>\n#### 2. 进程的创建\n有 4 种主要事件导致进程的创建：\n\n- 系统初始化启动操作系统时，通常会创建若干个进程。其中有些是前台进程，也就是同用户（人类）交互并且替他们完成工作的那些进程。其他的是后台进程，这些进程与特定的用户没有关系，相反，却具有某些专门的功能。停留在后台处理诸如电子邮件、Web 页面、新闻、打印之类活动的进程称为守护进程\n- 执行了正在运行的进程所调用的进程创建系统调用一个正在运行的进程经常发出系统调用，以便创建一个或多个新进程协助其工作。在所要从事的工作可以容易地划分成若干相关的但没有相互作用的进程时，创建新的进程就特别有效果。\n- 用户请求创建一个新进程在交互式系统中，键入一个命令或者点（双）击一个图标就可以启动一个程序。这两个动作中的任何一个都会开始一个新的进程，并在其中运行所选择的程序。\n- 一个批处理作业的初始化最后一种创建进程的情形仅在大型机的批处理系统中应用。用户在这种系统中（可能是远程地）提交批处理作业。在操作系统认为有资源可运行另一个作业时，它创建一个新的进程，并运行其输入队列中的下一个作业。\n\n在 UNIX 系统中，只有一个系统调用可以用来创建新进程：fork。在调用了 fork 后，这两个进程（父进程和子进程）拥有相同的存储映像、同样的环境字符串和同样的打开文件。<br />在 Windows 中，一个 Win32 函数调用 CreateProcess 既处理进程的创建，也负责把正确的程序装入新的进程。<br />在 UNIX 和 Windows 中，进程创建之后，父进程和子进程有各自不同的地址空间。如果其中某个进程在其地址空间中修改了一个字，这个修改对其他进程而言是不可见的。\n<a name=\"fT5KH\"></a>\n#### 3. 进程的终止\n进程在创建之后，它开始运行，完成其工作。但永恒是不存在的，进程也一样。迟早这个新的进程会终止，通常由下列条件引起：\n\n- 正常退出（自愿的）多数进程是由于完成了它们的工作而终止。在 UNIX 中该调用是 exit，而在 Windows 中，相关的调用是 ExitProcess 。\n- 出错退出（自愿的）进程终止的第二个原因是进程发现了严重错误。\n- 严重错误（非自愿）进程终止的第三个原因是由进程引起的错误，通常是由于程序中的错误所致。\n- 被其他进程杀死（非自愿）第四种终止进程的原因是，某个进程执行一个系统调用通知操作系统杀死某个其他进程。在 UNIX 中，这个系统调用是 kill 。在 Win32 中对应的函数是 TerminateProcess 。\n<a name=\"uSyGq\"></a>\n#### 4. 进程的层次结构\n某些系统中，当进程创建了另一个进程后，父进程和子进程就以某种形式继续保持关联。子进程自身可以创建更多的进程，组成一个进程的层次结构。<br />在 UNIX 中，进程和它的所有子女以及后裔共同组成一个进程组。<br />在 Windows 中没有进程层次的概念，所有的进程都是地位相同的。惟一类似于进程层次的暗示是在创建进程的时侯，父进程得到一个特别的令牌（称为句柄），该句柄可以用来控制子进程。但是，它有权把这个令牌传送给某个其他进程，这样就不存在进程层次了。\n<a name=\"oopnq\"></a>\n#### 5. UNIX 启动时的初始化\n一个称为 init 的特殊进程出现在启动映像中。当它开始运行时，读入一个说明终端数量的文件。接着，为每个终端创建一个新进程。这些进程等待用户登录。如果有一个用户登录成功，该登录进程就执行一个 shell 准备接收命令。所接收的这些命令会启动更多的进程，以此类推。这样，在整个系统中，所有的进程都属于以 init 为根的一棵树。\n<a name=\"l9M3e\"></a>\n#### 6. 进程的状态\n进程存在三种状态：\n\n- 运行态（该时刻进程实际占用 CPU）。\n- 就绪态（可运行，但因为其他进程正在运行而暂时停止）。\n- 阻塞态（除非某种外部事件发生，否则进程不能运行）。\n\n状态间的转化关系为<br />![image.png](https://cdn.nlark.com/yuque/0/2022/png/732231/1647358712362-efbdf1ad-4bb6-4949-bb30-49aa99ea601b.png#averageHue=%23f4f4f4&clientId=u5297893b-ed7c-4&from=paste&id=u18e9b4fa&originHeight=242&originWidth=720&originalType=url&ratio=1&rotation=0&showTitle=false&size=72838&status=done&style=none&taskId=u28adba4d-0f2b-4fdc-b11b-46974d56566&title=)\n<a name=\"eAGG7\"></a>\n#### 7. 进程的实现\n为了实现进程模型，操作系统维护着一张表格（一个结构数组），即进程表。每个进程占用一个进程表项。（也可称为进程控制块。）该表项包含了进程状态的重要信息，包括程序计数器、堆栈指针、内存分配状况、所打开文件的状态、账号和调度信息，以及其他在进程由运行态转换到就绪态或阻塞态时必须保存的信息，从而保证该进程随后能再次启动，就像从未被中断过一样。\n<a name=\"BkZMX\"></a>\n#### 8. 多道程序设计模型\n采用多道程序设计可以提高 CPU 的利用率。从概率的角度来看 CPU 的利用率。假设一个进程等待 I/O 操作的时间与其停留在内存中时间的比为 。当内存中同时有 n 个进程时，则所有 n 个进程都在等待 I/O（此时 CPU 空转）的概率是 pⁿ 。CPU 的利用率由下面的公式给出：<br />CPU 利用率 = 1-pⁿ\n<a name=\"Fp7QL\"></a>\n### 二、线程\n<a name=\"wBrFZ\"></a>\n#### 1. 线程的使用原因\n人们需要多线程的主要原因是，在许多应用中同时发生着多种活动。其中某些活动随着时间的推移会被阻塞。通过将这些应用程序分解成可以准并行运行的多个顺序线程，程序设计模型会变得更简单。<br />第二个关于需要多线程的理由是，由于线程比进程更轻量级，所以它们比进程更容易（即更快）创建，也更容易撤销。在许多系统中，创建一个线程较创建一个进程要快 10 ～ 100 倍。<br />需要多线程的第三个原因涉及性能方面的讨论。若多个线程都是 CPU 密集型的，那么并不能获得性能上的增强，但是如果存在着大量的计算和大量的 I/O 处理，拥有多个线程允许这些活动彼此重叠进行，从而会加快应用程序执行的速度。\n<a name=\"jsY1c\"></a>\n#### 2. 线程模型\n进程拥有一个执行的线程，通常简写为线程。在线程中有一个程序计数器，用来记录接着要执行哪一条指令。线程拥有寄存器，用来保存线程当前的工作变量。线程还拥有一个堆栈，用来记录执行历史，其中每一帧保存了一个已调用的但是还没有从中返回的过程。尽管线程必须在某个进程中执行，但是线程和它的进程是不同的概念，并且可以分别处理。进程用于把资源集中到一起，而线程则是在 CPU 上被调度执行的实体。<br />线程给进程模型增加了一项内容，即在同一个进程环境中，允许彼此之间有较大独立性的多个线程执行。在同一个进程中并行运行多个线程，是对在同一台计算机上并行运行多个进程的模拟。\n<a name=\"NZKHl\"></a>\n#### 3. 在用户空间中实现线程\n把整个线程包放在用户空间中，内核对线程包一无所知。从内核角度考虑，就是按正常的方式管理，即单线程进程。线程在一个运行时系统的顶部运行，这个运行时系统是一个管理线程的过程的集合。我们已经见过其中的四个过程：pthread_create ，pthread_exit ，pthread_join 和 pthread_yield 。不过，一般还会有更多的过程。<br />![image.png](https://cdn.nlark.com/yuque/0/2022/png/732231/1647358712337-dd2dfcd4-41bf-4232-84f1-5d53b1da4fa3.png#averageHue=%23f3f3f3&clientId=u5297893b-ed7c-4&from=paste&id=u42c4f22e&originHeight=324&originWidth=427&originalType=url&ratio=1&rotation=0&showTitle=false&size=54612&status=done&style=none&taskId=u6bf840ab-28c7-455f-8f3b-ed23fa4f816&title=)<br />在用户空间管理线程时，每个进程需要有其专用的线程表，用来跟踪该进程中的线程。这些表和内核中的进程表类似。该线程表由运行时系统管理。当一个线程转换到就绪状态或阻塞状态时，在该线程表中存放重新启动该线程所需的信息，与内核在进程表中存放进程的信息完全一样。<br />优点\n\n1. 用户级线程包可以在不支持线程的操作系统上实现。\n2. 线程的切换可以在几条指令内完成。进行类似于这样的线程切换至少比陷入内核要快一个数量级（或许更多）。\n3. 保存线程状态的过程和调度程序都只是本地过程，所以启动它们比进行内核调用效率更高。另一方面，不需要陷阱，不需要上下文切换，也不需要对内存高速缓存进行刷新，这就使得线程调度非常快捷。\n4. 它允许每个进程有自己定制的调度算法。\n\n缺点\n\n1. 第一个问题是如何实现阻塞系统调用。假设在还没有任何击键之前，一个线程读取键盘。让该线程实际进行该系统调用是不可接受的，因为这会停止所有的线程。\n2. 页面故障问题。如果有一个线程引起页面故障，内核由于甚至不知道有线程存在，通常会把整个进程阻塞直到磁盘 I/O 完成为止，尽管其他的线程是可以运行的。\n3. 如果一个线程开始运行，那么在该进程中的其他线程就不能运行，除非第一个线程自动放弃 CPU 。\n4. 通常在经常发生线程阻塞的应用中才希望使用多个线程。对于那些基本上是 CPU 密集型而且极少有阻塞的应用程序而言，没有很大的意义。\n<a name=\"fNxP7\"></a>\n#### 4. 在内核中实现线程\n在内核中实现线程时，内核中有用来记录系统中所有线程的线程表。当某个线程希望创建一个新线程或撤销一个已有线程时，它进行一个系统调用，这个系统调用通过对线程表的更新完成线程创建或撤销工作。内核的线程表保存了每个线程的寄存器、状态和其他信息。<br />![image.png](https://cdn.nlark.com/yuque/0/2022/png/732231/1647358712320-eb583e1f-5f24-4fda-b9c9-2aa6d5757e06.png#averageHue=%23f5f5f5&clientId=u5297893b-ed7c-4&from=paste&id=u2882dbda&originHeight=331&originWidth=345&originalType=url&ratio=1&rotation=0&showTitle=false&size=41561&status=done&style=none&taskId=u7f984090-3392-4a28-9556-996cccd21be&title=)<br />所有能够阻塞线程的调用都以系统调用的形式实现，这与运行时系统过程相比，代价是相当可观的。当一个线程阻塞时，内核根据其选择，可以运行同一个进程中的另一个线程（若有一个就绪线程）或者运行另一个进程中的线程。而在用户级线程中，运行时系统始终运行自己进程中的线程，直到内核剥夺它的 CPU （或者没有可运行的线程存在了）为止。\n<a name=\"tILlW\"></a>\n#### 5. 混合实现\n人们已经研究了各种试图将用户级线程的优点和内核级线程的优点结合起来的方法。一种方法是使用内核级线程，然后将用户级线程与某些或者全部内核线程多路复用起来。<br />![image.png](https://cdn.nlark.com/yuque/0/2022/png/732231/1647358713326-82a10807-9e2e-47a7-bc36-e329b6ecd6f1.png#averageHue=%23f7f7f7&clientId=u5297893b-ed7c-4&from=paste&id=u58aeb2bb&originHeight=405&originWidth=623&originalType=url&ratio=1&rotation=0&showTitle=false&size=68960&status=done&style=none&taskId=uc23b55bc-ae5f-4001-82b4-fabe1bb7b5b&title=)<br />采用这种方法，内核只识别内核级线程，并对其进行调度。其中一些内核级线程会被多个用户级线程多路复用。如同在没有多线程能力操作系统中某个进程中的用户级线程一样，可以创建、撤销和调度这些用户级线程。在这种模型中，每个内核级线程有一个可以轮流使用的用户级线程集合。\n<a name=\"oyCQI\"></a>\n#### 6. 调度程序激活机制\n调度程序激活工作的目标是模拟内核线程的功能，但是为线程包提供通常在用户空间中才能实现的更好的性能和更大的灵活性。<br />使该机制工作的基本思路是，当内核了解到一个线程被阻塞之后，内核通知该进程的运行时系统，。内核通过在一个已知的起始地址启动运行时系统，从而发出了通知，这个机制称为上行调用。一旦如此激活，运行时系统就重新调度其线程。<br />调度程序激活机制的一个目标是作为上行调用的信赖基础，这是一种违反分层次系统内在结构的概念。\n<a name=\"biibT\"></a>\n#### 7. 弹出式线程\n一个消息的到达导致系统创建一个处理该消息的线程，这种线程称为弹出式线程。<br />弹出式线程的关键好处是，由于这种线程相当新，没有历史这样，就有可能快速创建这类线程。对该新线程指定所要处理的消息。使用弹出式线程的结果是，消息到达与处理开始之间的时间非常短。\n<a name=\"e2CT7\"></a>\n### 三、 进程间通信\n进程间通信需要关注的三个问题：\n\n1. 一个进程如何把信息传递给另一个。\n2. 如何确保两个或更多的进程在关键活动中不会出现交叉。\n3. 正确的顺序。\n<a name=\"JWPWY\"></a>\n#### 1. 竞争条件\n两个或多个进程读写某些共享数据，而最后的结果取决于进程运行的精确时序，称为竞争条件。\n<a name=\"wRfmm\"></a>\n#### 2. 临界区\n在某些时候进程可能需要访问共享内存或共享文件，或执行另外一些会导致竞争的操作。我们把对共享内存进行访问的程序片段称作临界区域或临界区。如果我们能够适当地安排，使得两个进程不可能同时处于临界区中，就能够避免竞争条件。<br />对于保证使用共享数据的并发进程能够正确和高效地进行协作，一个好的解决方案，需要满足以下 4 个条件：\n\n- 任何两个进程不能同时处于其临界区。\n- 不应对 CPU 的速度和数量做任何假设。\n- 临界区外运行的进程不得阻塞其他进程。\n- 不得使进程无限期等待进入临界区。\n<a name=\"ahFHj\"></a>\n#### 3. 忙等待的互斥\n<a name=\"cxNWI\"></a>\n##### （1） 屏蔽中断\n在单处理器系统中，最简单的方法是使每个进程在刚刚进入临界区后立即屏蔽所有中断，并在就要离开之前再打开中断。屏蔽中断后，时钟中断也被屏蔽。CPU 只有发生时钟中断或其他中断时才会进行进程切换，这样，在屏蔽中断之后 CPU 将不会被切换到其他进程。于是，一旦某个进程屏蔽中断之后，它就可以检查和修改共享内存，而不必担心其他进程介入。<br />缺点：\n\n1. 若一个进程屏蔽中断后不再打开中断，整个系统可能会因此终止。\n2. 如果系统是多处理器（有两个或可能更多的处理器），则屏蔽中断仅仅对执行 disable 指令的那个 CPU 有效。其他 CPU 仍将继续运行，并可以访问共享内存。\n\n但是对内核来说，当它在更新变量或列表的几条指令期间将中断屏蔽是很方便的。<br />所以结论是：屏蔽中断对于操作系统本身而言是一项很有用的技术，但对于用户进程则不是一种合适的通用互斥机制。\n<a name=\"EHbgm\"></a>\n##### （2） 锁变量\n设想有一个共享（锁）变量，其初始值为 0。当一个进程想进入其临界区时，它首先测试这把锁。如果该锁的值为 0，则该进程将其设置为 1 并进入临界区。若这把锁的值已经为 1，则该进程将等待直到其值变为 0。于是，0 就表示临界区内没有进程，1 表示已经有某个进程进入临界区。<br />缺点：锁变量的读写不是原子操作，可能被其他进程中断<br />假设一个进程读出锁变量的值并发现它为 0，而恰好在它将其值设置为 1 之前，另一个进程被调度运行，将该锁变量设置为 1。当第一个进程再次能运行时，它同样也将该锁设置为 1，则此时同时有两个进程进入临界区中。\n<a name=\"yp4wE\"></a>\n##### （3）严格轮换法\n定义一个整型变量 turn ，初始值为 0，用于记录轮到哪个进程进入临界区，并检查或更新共享内存。开始时，进程 0 检查 turn ，发现其值为 0，于是进入临界区。进程 1 也发现其值为 0，所以在一个等待循环中不停地测试 turn ，看其值何时变为 1。连续测试一个变量直到某个值出现为止，称为忙等待。<br />![image.png](https://cdn.nlark.com/yuque/0/2022/png/732231/1647358713260-965dfe7d-4bdd-468f-aef4-fd0bd6ef651b.png#averageHue=%23f4f4f4&clientId=u5297893b-ed7c-4&from=paste&id=ua427d614&originHeight=350&originWidth=739&originalType=url&ratio=1&rotation=0&showTitle=false&size=61161&status=done&style=none&taskId=u7f37aabb-320f-4aeb-9b3e-b1929e90192&title=)<br />只有在有理由认为等待时间是非常短的情形下，才使用忙等待。用于忙等待的锁，称为自旋锁（spin lock）。<br />缺点：\n\n1. 采用忙等待的方式，会浪费 CPU 时间。\n2. 该方案要求两个进程严格地轮流进入它们的临界区，会造成一个临界区外运行的进程阻塞其他进程的情况。\n<a name=\"LDwBz\"></a>\n##### （4）Peterson 解法\n在使用共享变量（即进入其临界区）之前，各个进程使用其进程号 0 或 1 作为参数来调用 enter_region 。该调用在需要时将使进程等待，直到能安全地进入临界区。在完成对共享变量的操作之后，进程将调用 leave_region ，表示操作已完成，若其他的进程希望进入临界区，则现在就可以进入。<br />![image.png](https://cdn.nlark.com/yuque/0/2022/png/732231/1647358713398-b5c57590-5982-4930-aa15-09d028a9432a.png#averageHue=%23f3f3f3&clientId=u5297893b-ed7c-4&from=paste&id=ua675d282&originHeight=603&originWidth=984&originalType=url&ratio=1&rotation=0&showTitle=false&size=188850&status=done&style=none&taskId=u60b7fcd6-150e-496e-9659-c0495dd551e&title=)\n<a name=\"MLBRa\"></a>\n##### （5）TSL 指令\nTSL 指令是硬件支持的一种方案，称为测试并加锁，它将一个内存字 lock 读到寄存器 RX 中，然后在该内存地址上存一个非零值。<br />读字和写字操作保证是不可分割的，即该指令结束之前其他处理器均不允许访问该内存字。执行 TSL 指令的 CPU 将锁住内存总线，以禁止其他 CPU 在本指令结束之前访问内存。因此不会出现前面第二种方法锁变量的问题。<br />![image.png](https://cdn.nlark.com/yuque/0/2022/png/732231/1647358713372-fd6d92e1-8855-433f-aef1-9d139c5d39e7.png#averageHue=%23f2f2f2&clientId=u5297893b-ed7c-4&from=paste&id=ua30a8d45&originHeight=325&originWidth=944&originalType=url&ratio=1&rotation=0&showTitle=false&size=94936&status=done&style=none&taskId=u3598648e-f9e6-4dad-b542-4e842166471&title=)<br />为了使用 TSL 指令，要使用一个共享变量 lock 来协调对共享内存的访问。当 lock 为 0 时，任何进程都可以使用 TSL 指令将其设置为 1，并读写共享内存。当操作结束时，进程用一条普通的 move 指令将 lock 的值重新设置为 0。<br />一个可替代 TSL 的指令是 XCHG ，它原子性地交换了两个位置的内容，它本质上与 TSL 的解决办法一样。所有的 Intel x86 CPU 在低层同步中使用 XCHG 指令。<br />![image.png](https://cdn.nlark.com/yuque/0/2022/png/732231/1647358713387-44f5c1ea-b8bf-487d-b85d-574701da82a4.png#averageHue=%23f1f1f1&clientId=u5297893b-ed7c-4&from=paste&id=ub64677ba&originHeight=353&originWidth=948&originalType=url&ratio=1&rotation=0&showTitle=false&size=119099&status=done&style=none&taskId=u90344cea-036f-446c-ac3f-bdbf4ed3752&title=)<br />缺点：\n\n1. 采用忙等待的方式，会浪费 CPU 时间。\n<a name=\"V2UCy\"></a>\n#### 4. 睡眠与唤醒\nPeterson 解法和 TSL 或 XCHG 解法都是正确的，但它们都有忙等待的缺点。这种方法不仅浪费了 CPU 时间，而且还可能引起预想不到的结果。<br />我们可以使用睡眠与唤醒的机制，使它们在无法进入临界区时将阻塞，而不是忙等待。<br />最简单的是 sleep 和 wakeup 。 sleep 是一个将引起调用进程阻塞的系统调用，即被挂起，直到另外一个进程将其唤醒。wakeup 调用有一个参数，即要被唤醒的进程。<br />缺点：<br />参考生产者-消费者问题，发给一个（尚）未睡眠进程的 wakeup 信号会出现丢失，从而出现生产者和消费者同时睡眠的情况。<br />一种快速的弥补方法是修改规则，加上一个唤醒等待位。当一个 wakeup 信号发送给一个清醒的进程信号时，将该位置 1。随后，当该进程要睡眠时，如果唤醒等待位为 1，则将该位清除，而该进程仍然保持清醒。但原则上讲，这并没有从根本上解决问题。\n<a name=\"sXXIz\"></a>\n#### 5. 信号量\n信号量是一个整型变量用来累计唤醒次数，供以后使用。一个信号量的取值可以为 0（表示没有保存下来的唤醒操作）或者为正值（表示有一个或多个唤醒操作）。<br />对信号量一共有两种操作：down 和 up （分别为一般化后的 sleep 和 wakeup ）。<br />对一信号量执行 down 操作，则是检查其值是否大于 0。若该值大于 0，则将其值减 1（即用掉一个保存的唤醒信号）并继续；若该值为 0，则进程将睡眠，而且此时 down 操作并未结束。<br />对一信号量执行 up 操作，会对信号量的值增 1。如果一个或多个进程在该信号量上睡眠，信号量的值仍旧是 0，但在其上睡眠的进程会被唤醒一个。<br />检查数值、修改变量值以及可能发生的睡眠和唤醒操作均作为一个单一的、不可分割的原子操作完成。所谓原子操作，是指一组相关联的操作要么都不间断地执行，要么都不执行。\n<a name=\"qZRGc\"></a>\n#### 6. 互斥量\n如果不需要信号量的计数能力，有时可以使用信号量的一个简化版本，称为互斥量（mutex）。互斥量仅仅适用于管理共享资源或一小段代码。由于互斥量在实现时既容易又有效，这使得互斥量在实现用户空间线程包时非常有用。<br />互斥量是一个可以处于两态之一的变量：解锁和加锁。当一个线程（或进程）需要访问临界区时，它调用 mutex_lock 。如果该互斥量当前是解锁的（即临界区可用），此调用成功，调用线程可以自由进入该临界区。另一方面，如果该互斥量已经加锁，调用线程被阻塞，直到在临界区中的线程完成并调用 mutex_unlock 。如果多个线程被阻塞在该互斥量上，将随机选择一个线程并允许它获得锁。<br />![image.png](https://cdn.nlark.com/yuque/0/2022/png/732231/1647358714079-f7f766ed-12c2-4b10-a323-12b9f1b37558.png#averageHue=%23f1f1f1&clientId=u5297893b-ed7c-4&from=paste&id=u0c28150e&originHeight=358&originWidth=1049&originalType=url&ratio=1&rotation=0&showTitle=false&size=128913&status=done&style=none&taskId=u4591fa98-fe52-493d-a89c-cf5b8947714&title=)<br />enter_region 和 mutex_lock 的代码很相似，但有一个关键的区别。<br />当 enter_region 进入临界区失败时，它始终重复测试锁（忙等待）。实际上，由于时钟超时的作用，会调度其他进程运行。这样迟早拥有锁的进程会进入运行并释放锁。<br />在（用户）线程中，情形有所不同，因为没有时钟停止运行时间过长的线程。结果是通过忙等待的方式来试图获得锁的线程将永远循环下去，决不会得到锁，因为这个运行的线程不会让其他线程运行从而释放锁。因此当 mutex_lock 取锁失败时，它调用 thread_yield 将 CPU 放弃给另一个线程。这样，就没有忙等待。在该线程下次运行时，它再一次对锁进行测试。\n<a name=\"cklet\"></a>\n#### 7. 条件变量\n条件变量允许线程由于一些未达到的条件而阻塞。<br />与条件变量相关的最重要的两个操作是 pthread_cond_wait 和 pthread_cond_signal 。前者阻塞调用线程直到另一其他线程向它发信号（使用后一个调用）。<br />条件变量（不像信号量）不会存在内存中。如果将一个信号量传递给一个没有线程在等待的条件变量，那么这个信号就会丢失。\n<a name=\"CiDOP\"></a>\n#### 8. 管程\n管程是一种高级同步原语，管程有一个很重要的特性，即任一时刻管程中只能有一个活跃进程，这一特性使管程能有效地完成互斥。<br />当一个进程调用管程过程时，该过程中的前几条指令将检查在管程中是否有其他的活跃进程。如果当一个进程调用管程过程时，该过程中的前几条指令将检查在管程中是否有其他的活跃进程。如果<br />管程提供了一种实现互斥的简便途径，通过临界区互斥的自动化，管程比信号量更容易保证并行编程的正确性。\n<a name=\"l2Lvn\"></a>\n#### 9. 消息传递\n这种进程间通信的方法使用两条原语 send 和 receive ，它们像信号量而不像管程，是系统调用而不是语言成分。<br />前一个调用向一个给定的目标发送一条消息，后一个调用从一个给定的源（或者是任意源，如果接收者不介意的话）接收一条消息。如果没有消息可用，则接收者可能被阻塞，直到一条消息到达，或者，带着一个错误码立即返回。\n<a name=\"Bhyhu\"></a>\n#### 10. 屏障\n在有些应用中划分了若干阶段，并且规定，除非所有的进程都就绪准备着手下一个阶段，否则任何进程都不能进入下一个阶段。可以通过在每个阶段的结尾安置屏障来实现这种行为。当一个进程到达屏障时，它就被屏障阻拦，直到所有进程都到达该屏障为止。\n<a name=\"TtiiE\"></a>\n### 四、调度\n当计算机系统是多道程序设计系统时，通常就会有多个进程或线程同时竞争 CPU。只要有两个或更多的进程处于就绪状态，这种情形就会发生。如果只有一个 CPU 可用，那么就必须选择下一个要运行的进程。在操作系统中，完成选择工作的这一部分称为调度程序，该程序使用的算法称为调度算法。\n<a name=\"h3NfM\"></a>\n#### 1. 何时调度\n\n1. 在创建一个新进程之后，需要决定是运行父进程还是运行子进程。\n2. 在一个进程退出时必须做出调度决策。\n3. 当一个进程阻塞在 I/O 和信号量上或由于其他原因阻塞时，必须选择另一个进程运行。\n4. 第四，在一个 I/O 中断发生时，必须做出调度决策。\n<a name=\"V6UHW\"></a>\n#### 2. 调度算法分类\n\n1. 批处理。\n2. 交互式。\n3. 实时。\n<a name=\"HWQSD\"></a>\n#### 3. 调度算法的目标\n为了设计调度算法，有必要考虑什么是一个好的调度算法。某些目标取决于环境（批处理、交互式或实时），但是还有一些目标是适用于所有情形的。<br />![image.png](https://cdn.nlark.com/yuque/0/2022/png/732231/1647358714216-66143694-5546-460a-bbbb-cce489e6e022.png#averageHue=%23eeeeee&clientId=u5297893b-ed7c-4&from=paste&id=u817dcf3b&originHeight=492&originWidth=542&originalType=url&ratio=1&rotation=0&showTitle=false&size=144551&status=done&style=none&taskId=u1631c61c-ed9a-44e1-88a7-154e1a8d87f&title=)\n<a name=\"cmgPH\"></a>\n#### 4. 批处理系统中的调度\n<a name=\"nOhIk\"></a>\n##### （1）先来先服务\n在所有调度算法中，最简单的是非抢占式的先来先服务算法。使用该算法，进程按照它们请求 CPU 的顺序使用 CPU 。<br />优点：<br />这个算法的主要优点是易于理解并且便于在程序中运用。<br />缺点：<br />平均等待时间过长。\n<a name=\"EMKdp\"></a>\n##### （2）最短作业优先\n当输入队列中有若干个同等重要的作业被启动时，调度程序应使用最短作业优先算法。<br />只有在所有的作业都可同时运行的情形下，最短作业优先算法才是最优化的。\n<a name=\"JJnqV\"></a>\n##### （3）最短剩余时间优先\n最短作业优先的抢占式版本是最短剩余时间优先算法。使用这个算法，调度程序总是选择剩余运行时间最短的那个进程运行。\n<a name=\"dwQCf\"></a>\n#### 5. 交互式系统中的调度\n<a name=\"fO2OV\"></a>\n#### （1）轮转调度\n一种最古老、最简单、最公平且使用最广的算法是轮转调度。每个进程被分配一个时间段，称为时间片，即允许该进程在该时间段中运行。如果在时间片结束时该进程还在运行，则将剥夺 CPU 并分配给另一个进程。如果该进程在时间片结束前阻塞或结束，则 CPU 立即进行切换。<br />需要注意的是，时间片设得太短会导致过多的进程切换，降低了 CPU 效率；而设得太长又可能引起对短的交互请求的响应时间变长。将时间片设为 20ms ～ 50 ms 通常是一个比较合理的折中。\n<a name=\"Ba7T2\"></a>\n#### （2）优先级调度\n每个进程被赋予一个优先级，允许优先级最高的可运行进程先运行。为了防止高优先级进程无休止地运行下去，调度程序可以在每个时钟滴答（即每个时钟中断）降低当前进程的优先级。如果这个动作导致该进程的优先级低于次高优先级的进程，则进行进程切换。\n<a name=\"IlGFC\"></a>\n#### （3）多级队列\n将一组进程按优先级分成若干类，并且在各类之间采用优先级调度，而在各类进程的内部采用其他调度方式。\n<a name=\"M5koO\"></a>\n#### （4）最短进程优先\n对于批处理系统而言，由于最短作业优先常常伴随着最短响应时间，所以如果能够把它用于交互进程，那将是非常好的。\n<a name=\"WvdTq\"></a>\n#### （5）保证调度\n向用户作出明确的性能保证，然后去实现它。<br />一种很实际并很容易实现的保证是：若用户工作时有 n 个用户登录，则用户将获得 CPU 处理能力的 1/n 。类似地，在一个有 n 个进程运行的单用户系统中，若所有的进程都等价，则每个进程将获得 1/n 的 CPU 时间。看上去足够公平了。\n<a name=\"Tiqaa\"></a>\n#### （6）彩票调度\n向进程提供各种系统资源（如 CPU 时间）的彩票。一旦需要做出一项调度决策时，就随机抽出一张彩票，拥有该彩票的进程获得该资源。在应用到 CPU 调度时，系统可以掌握每秒钟 50 次的一种彩票，作为奖励每个获奖者可以得到 20 ms 的 CPU 时间。\n<a name=\"NnMcu\"></a>\n#### （7）公平分享调度\n到现在为止，我们假设被调度的都是各个进程自身，并不关注其所有者是谁。<br />为了避免这种情形，某些系统在调度处理之前考虑谁拥有进程这一因素。在这种模式中，每个用户分配到 CPU 时间的一部分，而调度程序以一种强制的方式选择进程。这样，如果两个用户都得到获得 50% CPU 时间的保证，那么无论一个用户有多少进程存在，每个用户都会得到应有的 CPU 份额。\n<a name=\"QdPKK\"></a>\n#### 6. 策略和机制\n我们讨论的调度算法中没有一个算法从用户进程接收有关的调度决策信息，这就导致了调度程序很少能够做出最优的选择。<br />解决问题的方法是将调度机制与调度策略分离，也就是将调度算法以某种形式参数化，而参数可以由用户进程填写。<br />在这里，调度机制位于内核，而调度策略则由用户进程决定。\n",
  "body_html": "<!doctype html><div class=\"lake-content\" typography=\"classic\"><h2 id=\"hjZxy\"><span class=\"ne-text\">第一章 引论</span></h2><h3 id=\"nbNx0\"><span class=\"ne-text\">1. 操作系统定义</span></h3><p id=\"uc821eef4\" class=\"ne-p\"><span class=\"ne-text\">操作系统是运行在内核态的软件，它执行两个基本上独立的任务。</span></p><ul class=\"ne-ul\"><li id=\"udc600a42\" data-lake-index-type=\"0\"><span class=\"ne-text\">隐藏计算机底层硬件的实现，为用户及应用程序提供一个资源集的清晰抽象。</span></li><li id=\"uec38dc83\" data-lake-index-type=\"0\"><span class=\"ne-text\">管理计算机硬件资源。</span></li></ul><p id=\"ua6d65ec6\" class=\"ne-p\"><span class=\"ne-text\">任何操作系统的核心是它可处理的系统调用集。这些系统带欧阳真实地说明了操作系统做的工作。</span></p><h3 id=\"OcrYU\"><span class=\"ne-text\">2. 计算机运行模式</span></h3><p id=\"u0568c26c\" class=\"ne-p\"><span class=\"ne-text\">多数计算机有两种运行模式：内核态和用户态。</span></p><p id=\"u5317e4a6\" class=\"ne-p\"><span class=\"ne-text\">软件中最基础的部分是操作系统，它运行在内核态。这内核态模式下，操作系统具有对所有硬件的完全访问权，可以执行机器能够运行的任何指令。软件的其余部分运行在用户态下，在用户态下，只能使用机器指令中的一个子集。</span></p><p id=\"u9d88bdef\" class=\"ne-p\"><img src=\"https://cdn.nlark.com/yuque/0/2022/png/732231/1647358712354-28baa2f7-a6d8-40cb-8ed0-62b316515dd7.png\" width=\"709\" id=\"u1ad25170\" class=\"ne-image\"></p><h3 id=\"bC8En\"><span class=\"ne-text\">3. shell 与 GUI</span></h3><p id=\"u3333aaa4\" class=\"ne-p\"><span class=\"ne-text\">用户与之交互的程序，基于文本的通常称为 shell，而基于图标的则称为图形用户界面（GUI）。</span></p><p id=\"u15abfa52\" class=\"ne-p\"><span class=\"ne-text\">它们并不是操作系统的一部分，它们是运行在用户态最低层次的用户接口程序</span></p><h3 id=\"Xzbui\"><span class=\"ne-text\">4. 对于抽象的理解</span></h3><p id=\"u12a2fb28\" class=\"ne-p\"><span class=\"ne-text\">现代计算机系统中，大量使用了抽象这一概念。抽象是管理复杂性的一个关键。好的抽象可以把一个几乎不可能管理的任务划分为两个可管理的部分。其中第一部分是有关抽象的定义和实现，第二部分是随时用这些抽象解决问题。</span></p><p id=\"u35449fee\" class=\"ne-p\"><span class=\"ne-text\">以抽象的角度看操作系统，它的任务就是创建好的抽象，并实现和管理它所创建的抽象。</span></p><h3 id=\"POCrf\"><span class=\"ne-text\">5. 多路复用资源方式</span></h3><p id=\"uce462b1f\" class=\"ne-p\"><span class=\"ne-text\">在时间上复用：当一种资源在时间上复用时，不同的程序或用户轮流使用它。</span></p><p id=\"ucb9b6f42\" class=\"ne-p\"><span class=\"ne-text\">在空间上复用：每个客户得到资源的一部分。</span></p><h3 id=\"Avbah\"><span class=\"ne-text\">6. I/O 设备的结构</span></h3><p id=\"ued5c5aed\" class=\"ne-p\"><span class=\"ne-text\">I/O 设备一般包括两个部分：设备控制器和设备本身。控制器插在电路板上的一块芯片或一组芯片，这块电路板物理地控制芯片，它从操作系统接收命令。</span></p><p id=\"u917b766c\" class=\"ne-p\"><span class=\"ne-text\">控制器的任务是为操作系统提供一个简单的接口。每类设备控制器是不同的，所以需要不同的软件进行控制。专门与控制器对话，发出命令并接收响应的软件，称为设备驱动程序。为了使用设备驱动程序，必须要把设备驱动程序装入到操作系统中，这样它可在核心态中运行。</span></p><p id=\"u369bad52\" class=\"ne-p\"><span class=\"ne-text\">每个设备控制器都有少量的用于通信的寄存器，所有的寄存器的集合构成了 I/O 空间。</span></p><h3 id=\"qfYAJ\"><span class=\"ne-text\">7. IDE 概念</span></h3><p id=\"ud6b039dd\" class=\"ne-p\"><span class=\"ne-text\">IDE 表示集成驱动电子设备，是许多计算机的磁盘标准。</span></p><h3 id=\"eig5K\"><span class=\"ne-text\">8. 实现输入输出的三种方式</span></h3><p id=\"u1c681dea\" class=\"ne-p\"><span class=\"ne-text\">第一种方式，用户程序发出一个系统调用，内核将其翻译成一个对应设备驱动程序的过程调用。然后设备驱动程序启动 I/O 并在一个连续不断的循环中检查该设备，看该设备是否完成了工作。当 I/O 结束后，设备驱动程序把数据送到指定的地方（若有此需要），并返回。然后操作系统将控制返回给调用者。这种方式称为忙等待（busy waiting），其缺点是要占据 CPU ，CPU 一直轮询设备直到对应的 I/O 操作完成。</span></p><p id=\"ufc1e6b0d\" class=\"ne-p\"><span class=\"ne-text\">第二种方式，设备驱动程序启动设备并且让该设备在操作完成时发出一个中断。设备驱动程序在这个时刻返回。操作系统接着在需要时阻塞调用者并安排其他工作进行。当设备驱动程序检测到该设备的操作完毕时，它发出一个中断通知操作完成。</span></p><p id=\"u646a5848\" class=\"ne-p\"><img src=\"https://cdn.nlark.com/yuque/0/2022/png/732231/1647358712346-e6029738-9673-4172-8024-98b729bd359b.png\" width=\"716\" id=\"udd91cfa8\" class=\"ne-image\"></p><p id=\"ua01c0bfa\" class=\"ne-p\"><span class=\"ne-text\">第三种方式，为 I/O 使用一种特殊的直接存储器访问（Direct Memory Access，DMA）芯片，它可以控制在内存和某些控制器之间的位流，而无须持续的 CPU 干预。</span></p><h3 id=\"bPrE6\"><span class=\"ne-text\">9. CMOS 存储器</span></h3><p id=\"u9b14994f\" class=\"ne-p\"><span class=\"ne-text\">CMOS 存储器是易失性的。许多计算机利用 CMOS 存储器保持当前时间和日期。 CMOS 存储器和递增时间的时钟电路有一块小电池驱动，所以，即使计算机没有上电，时间也可以正确地更新。</span></p><h3 id=\"I1ZY8\"><span class=\"ne-text\">10. USB 概念</span></h3><p id=\"u0012cbc7\" class=\"ne-p\"><span class=\"ne-text\">USB 是通用串行总线，是用来将所有的慢速 I/O 设备，诸如键盘和鼠标，与计算机相连。USB 是一种集中式总线，其根设备每 1ms 轮询一次 I/O 设备，看是否有消息收发。所有的 USB 设备共享一个 USB 设备驱动器，于是就不需要为新的 USB 设备安装新的设备驱动器了。</span></p><h3 id=\"cTnqv\"><span class=\"ne-text\">11. 即插即用概念</span></h3><p id=\"u6439fe6c\" class=\"ne-p\"><span class=\"ne-text\">在一般的计算机工作环境下，操作系统必须了解有些什么外部设备连接到计算机上，并对它们进行配置。这种需求导致了 Intel 和微软设计了一种名为即插即用的 I/O 系统。</span></p><p id=\"ueda04b19\" class=\"ne-p\"><span class=\"ne-text\">在即插即用之前，每块 I/O 卡有一个固定的中断请求级别和用于其 I/O 寄存器的固定地址。即插即用所做的工作是，系统自动地收集有关 I/O 设备的信息，集中赋予 I/O 地址，然后通知每块卡所用的数值。</span></p><h3 id=\"RSv1n\"><span class=\"ne-text\">12. 计算机的启动</span></h3><p id=\"u7c6ea25f\" class=\"ne-p\"><span class=\"ne-text\">Pentium 的简要启动过程如下。在每个 Pentium 上有一块母板。在母板上有一个称为基本输入输出系统（Basic Input Output System，BIOS）的程序。在 BIOS 内有底层 I/O 软件，包括读键盘、写屏幕、进行磁盘 I/O 以及其他过程。现在这个程序存放在一块闪速 RAM 中，它是非可易失性的，但是在发现 BIOS 中有错时可以通过操作系统对它进行更新。</span></p><p id=\"u22f491ba\" class=\"ne-p\"><span class=\"ne-text\">简要过程如下：</span></p><ol class=\"ne-ol\"><li id=\"ub7e1220d\" data-lake-index-type=\"0\"><span class=\"ne-text\">BIOS 开始运行。它首先检查计算机设备的状态信息是否正常。</span></li><li id=\"u9dfce996\" data-lake-index-type=\"0\"><span class=\"ne-text\">扫描并记录总线所连设备。</span></li><li id=\"ufa0e22fc\" data-lake-index-type=\"0\"><span class=\"ne-text\">依次搜索启动设备，导入操作系统。</span></li><li id=\"u044bda79\" data-lake-index-type=\"0\"><span class=\"ne-text\">操作系统询问 BIOS ，获得配置信息，获取所有设备的驱动程序并调入内核。</span></li><li id=\"u5dec9f9e\" data-lake-index-type=\"0\"><span class=\"ne-text\">初始化有关表格，创建需要的任何背景进程，并在每个终端上启动登录程序或 GUI。</span></li></ol><h3 id=\"pOrMf\"><span class=\"ne-text\">13. 操作系统分类</span></h3><p id=\"uab5c6e66\" class=\"ne-p\"><span class=\"ne-text\">大型机操作系统、服务器操作系统、多处理器操作系统、个人计算机操作系统、掌上计算机操作系统、嵌入式操作系统、传感器节点操作系统、实时操作系统、智能卡操作系统</span></p><h3 id=\"xbXo8\"><span class=\"ne-text\">14. 实时操作系统的基本概念</span></h3><p id=\"u49c2c4fa\" class=\"ne-p\"><span class=\"ne-text\">实时操作系统的特征是将时间作为关键参数。通常分为硬实时操作系统和软实时操作系统。</span></p><p id=\"u3f5e50ec\" class=\"ne-p\"><span class=\"ne-text\">在硬实时操作系统中，某个规定的动作必须绝对地在规定的时刻（或规定的时间范围）发生。</span></p><p id=\"u32b5603a\" class=\"ne-p\"><span class=\"ne-text\">在软实时操作系统中，偶尔违反最终时限是不希望的，但可以接受，并且不会引起任何实时性的损害。</span></p><h3 id=\"I4rpo\"><span class=\"ne-text\">15. UID</span></h3><p id=\"u857f39a3\" class=\"ne-p\"><span class=\"ne-text\">系统管理器授权每个进程使用一个给定的 UID 标识。每个被启动的进程都有一个启动该进程的用户 UID 。子进程与父进程拥有一样 UID。用户可以是某个组的成员，每个组也有一个 GID 标识。</span></p><h3 id=\"etZ58\"><span class=\"ne-text\">16. 文件路径</span></h3><p id=\"u9db2989f\" class=\"ne-p\"><span class=\"ne-text\">在 UNIX 中，绝对路径名包含了从根目录到该文件的所有目录清单，它们之间用正斜线</span><span class=\"ne-text\"> </span><span class=\"ne-text\">/</span><span class=\"ne-text\"> </span><span class=\"ne-text\">隔开。最开始的正斜线标识这是从根目录开始的绝对路径。</span></p><p id=\"uc5ea976f\" class=\"ne-p\"><span class=\"ne-text\">在 MS-DOS 和 Windows 中，用反斜线</span><span class=\"ne-text\"> </span><span class=\"ne-text\">\\</span><span class=\"ne-text\"> </span><span class=\"ne-text\">作为分隔符。</span></p><h3 id=\"CSfMs\"><span class=\"ne-text\">17. 文件系统安装</span></h3><p id=\"uf5a46f15\" class=\"ne-p\"><span class=\"ne-text\">UNIX 一个重要概念是安装文件系统。几乎所有的个人计算机都有一个或多个光盘驱动器，可以插入 CD-ROM 和 DV D。它们几乎都有 USB 接口，可以插入 USB 存储棒（实际是固态磁盘驱动器）。为了提供一个出色的方式处理可移动介质，UNIX 允许把在 CD-ROM 或 DVD 上的文件系统接入到主文件树上。 mount 系统调用允许把在 CD-ROM 上的文件系统连接到程序所希望的根文件系统上。</span></p><h3 id=\"SXZLl\"><span class=\"ne-text\">18. 特殊文件</span></h3><p id=\"u9f239d06\" class=\"ne-p\"><span class=\"ne-text\">提供特殊文件是为了使 I/O 设备看起来像文件一般。这样，就像使用系统调用读写文件一样，I/O 设备也可通过同样的系统调用进行读写。</span></p><p id=\"u30b8402f\" class=\"ne-p\"><span class=\"ne-text\">有两类特殊文件：块特殊文件和字符特殊文件。</span></p><p id=\"u04612afd\" class=\"ne-p\"><span class=\"ne-text\">块特殊文件指那些由可随机存取的块组成的设备，如磁盘等。比如打开一个块特殊文件，然后读第 4 块，程序可以直接访问设备的第 4 块而不必考虑存放该文件的文件系统结构。</span></p><p id=\"u3b272359\" class=\"ne-p\"><span class=\"ne-text\">字符特殊文件用于打印机、调制解调器和其他接收或输出字符流的设备。按照惯例，特殊文件保存在 /dev 目录中。例如，/dev/lp 是打印机。</span></p><h3 id=\"GSolW\"><span class=\"ne-text\">19. 文件保护</span></h3><p id=\"uc108b47f\" class=\"ne-p\"><span class=\"ne-text\">UNIX 操作系统通过对每个文件赋予一个 9 位的二进制保护代码，对 UNIX 中的文件实现保护。该保护代码有三个 3 位字段，一个用于所有者，一个用于所有者同组（用户被系统管理员划分成组）中的其他成员，而另一个用于其他人。每个字段中有一位用于读访问，一位用于写访问，一位用于执行访问。这些位就是知名的 rwx 位。</span></p><h3 id=\"BHcuq\"><span class=\"ne-text\">20. 系统调用概念</span></h3><p id=\"uef144862\" class=\"ne-p\"><span class=\"ne-text\">如果一个进程正在用户态中运行一个用户程序，并且需要一个系统服务，比如从一个文件读数据，那么它就必须执行一个陷阱或系统调用指令，将控制转移到操作系统。操作系统接着通过参数检查，找出所需要的调用进程。然后，它执行系统调用，并把控制返回给在系统调用后面跟随着的指令。在某种意义上，进行系统调用就像进行一个特殊的过程调用，但是只有系统调用可以进入内核，而过程调用则不能。</span></p><h3 id=\"EKe74\"><span class=\"ne-text\">21. POSIX</span></h3><p id=\"u944b3535\" class=\"ne-p\"><span class=\"ne-text\">UNIX 有很多不兼容的版本，从而导致了混乱。为了能使编写的程序能够在任何版本的 UNIX 系统运行，IEEE 提出了一个 UNIX 标准，称为 POSIX，目前大多数 UNIX 版本都支持他。 POSIX 标准定义了凡是 UNIX 必须支持的小型系统调用接口。</span></p><h3 id=\"ft0Oa\"><span class=\"ne-text\">22. Windows Win32 API</span></h3><p id=\"u803fa6f1\" class=\"ne-p\"><span class=\"ne-text\">Windows 和 UNIX 的主要差别在于编程方式。一个 UNIX 程序包括做各种处理的代码以及从事完成特定服务的系统调用。相反，一个 Windows 程序通常是一个事件驱动程序。其中主程序等待某些事件发生，然后调用一个过程处理该事件。</span></p><p id=\"u2c020a0f\" class=\"ne-p\"><span class=\"ne-text\">在 UNIX 中，系统调用（如 read）和系统调用所使用的库过程（如 read）之间几乎是一一对应的关系。换句话说，对于每个系统调用，差不多就涉及一个被调用的库过程。</span></p><p id=\"ub01980e6\" class=\"ne-p\"><span class=\"ne-text\">在 Windows 中，情况就大不相同了。首先，库调用和实际的系统调用是几乎不对应的。微软定义了一套过程，称为应用编程接口（Application Program Interface，Win32 API），程序员用这套过程获得操作系统的服务。</span></p><p id=\"uc536ce8b\" class=\"ne-p\"><span class=\"ne-text\">Win32 并不是非常统一的或有一致的接口。其主要原因是由于 Win32 需要与早期的在 Windows 3.x 中使用的 16 位接口向后兼容。</span></p><p id=\"uc140590b\" class=\"ne-p\"><span class=\"ne-text\">Windows 中没有类似 UNIX 中的进程层次，所以不存在父进程和子进程的概念。在进程创建之后，创建者和被创建者是平等的。</span></p><h3 id=\"InlC7\"><span class=\"ne-text\">23. 操作系统结构</span></h3><p id=\"ub35dfb39\" class=\"ne-p\"><span class=\"ne-text\">单体结构、层次式结构、微内核、客户机-服务器模式、虚拟机、外核、</span></p><h3 id=\"ehAj7\"><span class=\"ne-text\">24. 微内核的概念</span></h3><p id=\"ucb4d29cb\" class=\"ne-p\"><span class=\"ne-text\">在微内核设计背后的思想是，为了实现高可靠性，将操作系统划分成小的、良好定义的模块，只有其中一个模块——微内核——运行在内核态上，其余的模块，由于功能相对弱些，则作为普通用户进程运行。特别地，由于把每个设备驱动和文件系统分别作为普通用户进程，这些模块中的错误虽然会使这些模块崩溃，但是不会使得整个系统死机。</span></p><h3 id=\"WdGLK\"><span class=\"ne-text\">25. 机制与策略分离原则</span></h3><p id=\"ucbd7d320\" class=\"ne-p\"><span class=\"ne-text\">策略指的是做什么，机制指的是怎么做。例如一个比较简单的调度算法是，对每个进程赋予一个优先级，并让内核执行在具有最高优先级进程中可以运行的某个进程。这里，机制（在内核中）就是寻找最高优先级的进程并运行之。而策略（赋予进程以优先级）可以由用户态中的进程完成。在这个方式中，机制和策略是分离的，从而使系统内核变得更小。</span></p><h3 id=\"nDEZJ\"><span class=\"ne-text\">26. make 程序</span></h3><p id=\"u604eac97\" class=\"ne-p\"><span class=\"ne-text\">在 UNIX 系统中，有个名为 make 的程序（其大量的变体如 gmake、pmake 等），它读入 Makefile ，该 Makefile 说明哪个文件与哪个文件相关。make 的作用是，在构建操作系统二进制码时，检查此刻需要哪个目标文件，而且对于每个文件，检查自从上次目标文件创建之后，是否有任何它依赖（代码和头文件）的文件已经被修改了。如果有，目标文件需要重新编译。在大型项目中，创建 Makefile 是一件容易出错的工作，所以出现了一些工具使该工作能够自动完成。</span></p><h2 id=\"j7xfA\"><span class=\"ne-text\">第二章 进程与线程</span></h2><div data-type=\"info\" class=\"ne-alert\"><p id=\"u48594c64\" class=\"ne-p\"><span class=\"ne-text\">进程和线程的区别：</span></p><ol class=\"ne-ol\"><li id=\"u8eafb43e\" data-lake-index-type=\"0\"><span class=\"ne-text\">定义不同，进程是执行中的一段程序，而一个进程中执行中的每个任务即为一个线程</span></li><li id=\"u4a80d62b\" data-lake-index-type=\"0\"><span class=\"ne-text\">一个线程只可以属于一个进程，但一个进程能包含多个线程</span></li><li id=\"ubdc2e41f\" data-lake-index-type=\"0\"><span class=\"ne-text\">线程无地址空间，它包括在进程的地址空间里</span></li><li id=\"u33b2d2d3\" data-lake-index-type=\"0\"><span class=\"ne-text\">线程的开销或代价比进程的小</span></li></ol></div><h3 id=\"Lvgru\"><span class=\"ne-text\">一、进程</span></h3><h4 id=\"PG5g1\"><span class=\"ne-text\">1. 进程模型</span></h4><p id=\"u7d63c3d4\" class=\"ne-p\"><span class=\"ne-text\">在进程模型中，计算机上所有可运行的软件，通常也包括操作系统，被组织成若干顺序进程，简称进程。一个进程就是一个正在执行程序的实例，包括程序计数器、寄存器和变量的当前值。</span></p><p id=\"u1bc60a09\" class=\"ne-p\"><span class=\"ne-text\">由于 CPU 在各进程之间来回快速切换，所以每个进程执行其运算的速度是不确定的。而且当同一进程再次运行时，其运算速度通常也不可再现。所以，在对进程编程时决不能对时序做任何确定的假设。</span></p><h4 id=\"p1JHi\"><span class=\"ne-text\">2. 进程的创建</span></h4><p id=\"uf31bac97\" class=\"ne-p\"><span class=\"ne-text\">有 4 种主要事件导致进程的创建：</span></p><ul class=\"ne-ul\"><li id=\"u69362fb8\" data-lake-index-type=\"0\"><span class=\"ne-text\">系统初始化</span><span class=\"ne-text\">启动操作系统时，通常会创建若干个进程。其中有些是前台进程，也就是同用户（人类）交互并且替他们完成工作的那些进程。其他的是后台进程，这些进程与特定的用户没有关系，相反，却具有某些专门的功能。停留在后台处理诸如电子邮件、Web 页面、新闻、打印之类活动的进程称为守护进程</span></li><li id=\"ud4edf117\" data-lake-index-type=\"0\"><span class=\"ne-text\">执行了正在运行的进程所调用的进程创建系统调用</span><span class=\"ne-text\">一个正在运行的进程经常发出系统调用，以便创建一个或多个新进程协助其工作。在所要从事的工作可以容易地划分成若干相关的但没有相互作用的进程时，创建新的进程就特别有效果。</span></li><li id=\"udeec84c3\" data-lake-index-type=\"0\"><span class=\"ne-text\">用户请求创建一个新进程</span><span class=\"ne-text\">在交互式系统中，键入一个命令或者点（双）击一个图标就可以启动一个程序。这两个动作中的任何一个都会开始一个新的进程，并在其中运行所选择的程序。</span></li><li id=\"ue0d7ef13\" data-lake-index-type=\"0\"><span class=\"ne-text\">一个批处理作业的初始化</span><span class=\"ne-text\">最后一种创建进程的情形仅在大型机的批处理系统中应用。用户在这种系统中（可能是远程地）提交批处理作业。在操作系统认为有资源可运行另一个作业时，它创建一个新的进程，并运行其输入队列中的下一个作业。</span></li></ul><p id=\"u2d0b1f08\" class=\"ne-p\"><span class=\"ne-text\">在 UNIX 系统中，只有一个系统调用可以用来创建新进程：fork。在调用了 fork 后，这两个进程（父进程和子进程）拥有相同的存储映像、同样的环境字符串和同样的打开文件。</span></p><p id=\"u7e872729\" class=\"ne-p\"><span class=\"ne-text\">在 Windows 中，一个 Win32 函数调用 CreateProcess 既处理进程的创建，也负责把正确的程序装入新的进程。</span></p><p id=\"uc20d2a43\" class=\"ne-p\"><span class=\"ne-text\">在 UNIX 和 Windows 中，进程创建之后，父进程和子进程有各自不同的地址空间。如果其中某个进程在其地址空间中修改了一个字，这个修改对其他进程而言是不可见的。</span></p><h4 id=\"fT5KH\"><span class=\"ne-text\">3. 进程的终止</span></h4><p id=\"uba7933cb\" class=\"ne-p\"><span class=\"ne-text\">进程在创建之后，它开始运行，完成其工作。但永恒是不存在的，进程也一样。迟早这个新的进程会终止，通常由下列条件引起：</span></p><ul class=\"ne-ul\"><li id=\"u58a3f73d\" data-lake-index-type=\"0\"><span class=\"ne-text\">正常退出（自愿的）</span><span class=\"ne-text\">多数进程是由于完成了它们的工作而终止。在 UNIX 中该调用是 exit，而在 Windows 中，相关的调用是 ExitProcess 。</span></li><li id=\"u6e2d9745\" data-lake-index-type=\"0\"><span class=\"ne-text\">出错退出（自愿的）</span><span class=\"ne-text\">进程终止的第二个原因是进程发现了严重错误。</span></li><li id=\"u0ab95555\" data-lake-index-type=\"0\"><span class=\"ne-text\">严重错误（非自愿）</span><span class=\"ne-text\">进程终止的第三个原因是由进程引起的错误，通常是由于程序中的错误所致。</span></li><li id=\"uad362f32\" data-lake-index-type=\"0\"><span class=\"ne-text\">被其他进程杀死（非自愿）</span><span class=\"ne-text\">第四种终止进程的原因是，某个进程执行一个系统调用通知操作系统杀死某个其他进程。在 UNIX 中，这个系统调用是 kill 。在 Win32 中对应的函数是 TerminateProcess 。</span></li></ul><h4 id=\"uSyGq\"><span class=\"ne-text\">4. 进程的层次结构</span></h4><p id=\"u93a6c81a\" class=\"ne-p\"><span class=\"ne-text\">某些系统中，当进程创建了另一个进程后，父进程和子进程就以某种形式继续保持关联。子进程自身可以创建更多的进程，组成一个进程的层次结构。</span></p><p id=\"ub552b8d3\" class=\"ne-p\"><span class=\"ne-text\">在 UNIX 中，进程和它的所有子女以及后裔共同组成一个进程组。</span></p><p id=\"u261f9333\" class=\"ne-p\"><span class=\"ne-text\">在 Windows 中没有进程层次的概念，所有的进程都是地位相同的。惟一类似于进程层次的暗示是在创建进程的时侯，父进程得到一个特别的令牌（称为句柄），该句柄可以用来控制子进程。但是，它有权把这个令牌传送给某个其他进程，这样就不存在进程层次了。</span></p><h4 id=\"oopnq\"><span class=\"ne-text\">5. UNIX 启动时的初始化</span></h4><p id=\"u524ce08f\" class=\"ne-p\"><span class=\"ne-text\">一个称为 init 的特殊进程出现在启动映像中。当它开始运行时，读入一个说明终端数量的文件。接着，为每个终端创建一个新进程。这些进程等待用户登录。如果有一个用户登录成功，该登录进程就执行一个 shell 准备接收命令。所接收的这些命令会启动更多的进程，以此类推。这样，在整个系统中，所有的进程都属于以 init 为根的一棵树。</span></p><h4 id=\"l9M3e\"><span class=\"ne-text\">6. 进程的状态</span></h4><p id=\"ue17dd655\" class=\"ne-p\"><span class=\"ne-text\">进程存在三种状态：</span></p><ul class=\"ne-ul\"><li id=\"uaede1e56\" data-lake-index-type=\"0\"><span class=\"ne-text\">运行态（该时刻进程实际占用 CPU）。</span></li><li id=\"ub63355bc\" data-lake-index-type=\"0\"><span class=\"ne-text\">就绪态（可运行，但因为其他进程正在运行而暂时停止）。</span></li><li id=\"u86e45a20\" data-lake-index-type=\"0\"><span class=\"ne-text\">阻塞态（除非某种外部事件发生，否则进程不能运行）。</span></li></ul><p id=\"u49e1d097\" class=\"ne-p\"><span class=\"ne-text\">状态间的转化关系为</span></p><p id=\"u6bb7d483\" class=\"ne-p\"><img src=\"https://cdn.nlark.com/yuque/0/2022/png/732231/1647358712362-efbdf1ad-4bb6-4949-bb30-49aa99ea601b.png\" width=\"720\" id=\"u18e9b4fa\" class=\"ne-image\"></p><h4 id=\"eAGG7\"><span class=\"ne-text\">7. 进程的实现</span></h4><p id=\"u63c254b4\" class=\"ne-p\"><span class=\"ne-text\">为了实现进程模型，操作系统维护着一张表格（一个结构数组），即进程表。每个进程占用一个进程表项。（也可称为进程控制块。）该表项包含了进程状态的重要信息，包括程序计数器、堆栈指针、内存分配状况、所打开文件的状态、账号和调度信息，以及其他在进程由运行态转换到就绪态或阻塞态时必须保存的信息，从而保证该进程随后能再次启动，就像从未被中断过一样。</span></p><h4 id=\"BkZMX\"><span class=\"ne-text\">8. 多道程序设计模型</span></h4><p id=\"u856a6118\" class=\"ne-p\"><span class=\"ne-text\">采用多道程序设计可以提高 CPU 的利用率。从概率的角度来看 CPU 的利用率。假设一个进程等待 I/O 操作的时间与其停留在内存中时间的比为 。当内存中同时有 n 个进程时，则所有 n 个进程都在等待 I/O（此时 CPU 空转）的概率是 pⁿ 。CPU 的利用率由下面的公式给出：</span></p><p id=\"ud15bb994\" class=\"ne-p\"><span class=\"ne-text\">CPU 利用率 = 1-pⁿ</span></p><h3 id=\"Fp7QL\"><span class=\"ne-text\">二、线程</span></h3><h4 id=\"wBrFZ\"><span class=\"ne-text\">1. 线程的使用原因</span></h4><p id=\"u8f28f0f8\" class=\"ne-p\"><span class=\"ne-text\">人们需要多线程的主要原因是，在许多应用中同时发生着多种活动。其中某些活动随着时间的推移会被阻塞。通过将这些应用程序分解成可以准并行运行的多个顺序线程，程序设计模型会变得更简单。</span></p><p id=\"udb4a6962\" class=\"ne-p\"><span class=\"ne-text\">第二个关于需要多线程的理由是，由于线程比进程更轻量级，所以它们比进程更容易（即更快）创建，也更容易撤销。在许多系统中，创建一个线程较创建一个进程要快 10 ～ 100 倍。</span></p><p id=\"u7bc3e777\" class=\"ne-p\"><span class=\"ne-text\">需要多线程的第三个原因涉及性能方面的讨论。若多个线程都是 CPU 密集型的，那么并不能获得性能上的增强，但是如果存在着大量的计算和大量的 I/O 处理，拥有多个线程允许这些活动彼此重叠进行，从而会加快应用程序执行的速度。</span></p><h4 id=\"jsY1c\"><span class=\"ne-text\">2. 线程模型</span></h4><p id=\"u6bacca0f\" class=\"ne-p\"><span class=\"ne-text\">进程拥有一个执行的线程，通常简写为线程。在线程中有一个程序计数器，用来记录接着要执行哪一条指令。线程拥有寄存器，用来保存线程当前的工作变量。线程还拥有一个堆栈，用来记录执行历史，其中每一帧保存了一个已调用的但是还没有从中返回的过程。尽管线程必须在某个进程中执行，但是线程和它的进程是不同的概念，并且可以分别处理。进程用于把资源集中到一起，而线程则是在 CPU 上被调度执行的实体。</span></p><p id=\"ufd1b8f53\" class=\"ne-p\"><span class=\"ne-text\">线程给进程模型增加了一项内容，即在同一个进程环境中，允许彼此之间有较大独立性的多个线程执行。在同一个进程中并行运行多个线程，是对在同一台计算机上并行运行多个进程的模拟。</span></p><h4 id=\"NZKHl\"><span class=\"ne-text\">3. 在用户空间中实现线程</span></h4><p id=\"u87629d66\" class=\"ne-p\"><span class=\"ne-text\">把整个线程包放在用户空间中，内核对线程包一无所知。从内核角度考虑，就是按正常的方式管理，即单线程进程。线程在一个运行时系统的顶部运行，这个运行时系统是一个管理线程的过程的集合。我们已经见过其中的四个过程：pthread_create ，pthread_exit ，pthread_join 和 pthread_yield 。不过，一般还会有更多的过程。</span></p><p id=\"u0357b8af\" class=\"ne-p\"><img src=\"https://cdn.nlark.com/yuque/0/2022/png/732231/1647358712337-dd2dfcd4-41bf-4232-84f1-5d53b1da4fa3.png\" width=\"427\" id=\"u42c4f22e\" class=\"ne-image\"></p><p id=\"u7f5aff2d\" class=\"ne-p\"><span class=\"ne-text\">在用户空间管理线程时，每个进程需要有其专用的线程表，用来跟踪该进程中的线程。这些表和内核中的进程表类似。该线程表由运行时系统管理。当一个线程转换到就绪状态或阻塞状态时，在该线程表中存放重新启动该线程所需的信息，与内核在进程表中存放进程的信息完全一样。</span></p><p id=\"u15e22a76\" class=\"ne-p\"><span class=\"ne-text\">优点</span></p><ol class=\"ne-ol\"><li id=\"ua0026a63\" data-lake-index-type=\"0\"><span class=\"ne-text\">用户级线程包可以在不支持线程的操作系统上实现。</span></li><li id=\"udda9682b\" data-lake-index-type=\"0\"><span class=\"ne-text\">线程的切换可以在几条指令内完成。进行类似于这样的线程切换至少比陷入内核要快一个数量级（或许更多）。</span></li><li id=\"u5a0043ee\" data-lake-index-type=\"0\"><span class=\"ne-text\">保存线程状态的过程和调度程序都只是本地过程，所以启动它们比进行内核调用效率更高。另一方面，不需要陷阱，不需要上下文切换，也不需要对内存高速缓存进行刷新，这就使得线程调度非常快捷。</span></li><li id=\"u6246b6ba\" data-lake-index-type=\"0\"><span class=\"ne-text\">它允许每个进程有自己定制的调度算法。</span></li></ol><p id=\"u4ab01e0e\" class=\"ne-p\"><span class=\"ne-text\">缺点</span></p><ol class=\"ne-ol\"><li id=\"u8dfa62ee\" data-lake-index-type=\"0\"><span class=\"ne-text\">第一个问题是如何实现阻塞系统调用。假设在还没有任何击键之前，一个线程读取键盘。让该线程实际进行该系统调用是不可接受的，因为这会停止所有的线程。</span></li><li id=\"u7e4ab763\" data-lake-index-type=\"0\"><span class=\"ne-text\">页面故障问题。如果有一个线程引起页面故障，内核由于甚至不知道有线程存在，通常会把整个进程阻塞直到磁盘 I/O 完成为止，尽管其他的线程是可以运行的。</span></li><li id=\"uad30ed64\" data-lake-index-type=\"0\"><span class=\"ne-text\">如果一个线程开始运行，那么在该进程中的其他线程就不能运行，除非第一个线程自动放弃 CPU 。</span></li><li id=\"ua97b1af9\" data-lake-index-type=\"0\"><span class=\"ne-text\">通常在经常发生线程阻塞的应用中才希望使用多个线程。对于那些基本上是 CPU 密集型而且极少有阻塞的应用程序而言，没有很大的意义。</span></li></ol><h4 id=\"fNxP7\"><span class=\"ne-text\">4. 在内核中实现线程</span></h4><p id=\"ua2587c2e\" class=\"ne-p\"><span class=\"ne-text\">在内核中实现线程时，内核中有用来记录系统中所有线程的线程表。当某个线程希望创建一个新线程或撤销一个已有线程时，它进行一个系统调用，这个系统调用通过对线程表的更新完成线程创建或撤销工作。内核的线程表保存了每个线程的寄存器、状态和其他信息。</span></p><p id=\"ube222eef\" class=\"ne-p\"><img src=\"https://cdn.nlark.com/yuque/0/2022/png/732231/1647358712320-eb583e1f-5f24-4fda-b9c9-2aa6d5757e06.png\" width=\"345\" id=\"u2882dbda\" class=\"ne-image\"></p><p id=\"u612e3e83\" class=\"ne-p\"><span class=\"ne-text\">所有能够阻塞线程的调用都以系统调用的形式实现，这与运行时系统过程相比，代价是相当可观的。当一个线程阻塞时，内核根据其选择，可以运行同一个进程中的另一个线程（若有一个就绪线程）或者运行另一个进程中的线程。而在用户级线程中，运行时系统始终运行自己进程中的线程，直到内核剥夺它的 CPU （或者没有可运行的线程存在了）为止。</span></p><h4 id=\"tILlW\"><span class=\"ne-text\">5. 混合实现</span></h4><p id=\"u6421fc2d\" class=\"ne-p\"><span class=\"ne-text\">人们已经研究了各种试图将用户级线程的优点和内核级线程的优点结合起来的方法。一种方法是使用内核级线程，然后将用户级线程与某些或者全部内核线程多路复用起来。</span></p><p id=\"ua8058da1\" class=\"ne-p\"><img src=\"https://cdn.nlark.com/yuque/0/2022/png/732231/1647358713326-82a10807-9e2e-47a7-bc36-e329b6ecd6f1.png\" width=\"623\" id=\"u58aeb2bb\" class=\"ne-image\"></p><p id=\"u1b8685a8\" class=\"ne-p\"><span class=\"ne-text\">采用这种方法，内核只识别内核级线程，并对其进行调度。其中一些内核级线程会被多个用户级线程多路复用。如同在没有多线程能力操作系统中某个进程中的用户级线程一样，可以创建、撤销和调度这些用户级线程。在这种模型中，每个内核级线程有一个可以轮流使用的用户级线程集合。</span></p><h4 id=\"oyCQI\"><span class=\"ne-text\">6. 调度程序激活机制</span></h4><p id=\"ub337e2d5\" class=\"ne-p\"><span class=\"ne-text\">调度程序激活工作的目标是模拟内核线程的功能，但是为线程包提供通常在用户空间中才能实现的更好的性能和更大的灵活性。</span></p><p id=\"uc5592fba\" class=\"ne-p\"><span class=\"ne-text\">使该机制工作的基本思路是，当内核了解到一个线程被阻塞之后，内核通知该进程的运行时系统，。内核通过在一个已知的起始地址启动运行时系统，从而发出了通知，这个机制称为上行调用。一旦如此激活，运行时系统就重新调度其线程。</span></p><p id=\"u51485209\" class=\"ne-p\"><span class=\"ne-text\">调度程序激活机制的一个目标是作为上行调用的信赖基础，这是一种违反分层次系统内在结构的概念。</span></p><h4 id=\"biibT\"><span class=\"ne-text\">7. 弹出式线程</span></h4><p id=\"u68ec4a9e\" class=\"ne-p\"><span class=\"ne-text\">一个消息的到达导致系统创建一个处理该消息的线程，这种线程称为弹出式线程。</span></p><p id=\"u845204f4\" class=\"ne-p\"><span class=\"ne-text\">弹出式线程的关键好处是，由于这种线程相当新，没有历史这样，就有可能快速创建这类线程。对该新线程指定所要处理的消息。使用弹出式线程的结果是，消息到达与处理开始之间的时间非常短。</span></p><h3 id=\"e2CT7\"><span class=\"ne-text\">三、 进程间通信</span></h3><p id=\"uecb6f1ec\" class=\"ne-p\"><span class=\"ne-text\">进程间通信需要关注的三个问题：</span></p><ol class=\"ne-ol\"><li id=\"u6d049fbc\" data-lake-index-type=\"0\"><span class=\"ne-text\">一个进程如何把信息传递给另一个。</span></li><li id=\"u06ad979b\" data-lake-index-type=\"0\"><span class=\"ne-text\">如何确保两个或更多的进程在关键活动中不会出现交叉。</span></li><li id=\"u7f657f22\" data-lake-index-type=\"0\"><span class=\"ne-text\">正确的顺序。</span></li></ol><h4 id=\"JWPWY\"><span class=\"ne-text\">1. 竞争条件</span></h4><p id=\"u4b920511\" class=\"ne-p\"><span class=\"ne-text\">两个或多个进程读写某些共享数据，而最后的结果取决于进程运行的精确时序，称为竞争条件。</span></p><h4 id=\"wRfmm\"><span class=\"ne-text\">2. 临界区</span></h4><p id=\"u00c690b7\" class=\"ne-p\"><span class=\"ne-text\">在某些时候进程可能需要访问共享内存或共享文件，或执行另外一些会导致竞争的操作。我们把对共享内存进行访问的程序片段称作临界区域或临界区。如果我们能够适当地安排，使得两个进程不可能同时处于临界区中，就能够避免竞争条件。</span></p><p id=\"ub61783ae\" class=\"ne-p\"><span class=\"ne-text\">对于保证使用共享数据的并发进程能够正确和高效地进行协作，一个好的解决方案，需要满足以下 4 个条件：</span></p><ul class=\"ne-ul\"><li id=\"u0cc4bb6f\" data-lake-index-type=\"0\"><span class=\"ne-text\">任何两个进程不能同时处于其临界区。</span></li><li id=\"ueadcd025\" data-lake-index-type=\"0\"><span class=\"ne-text\">不应对 CPU 的速度和数量做任何假设。</span></li><li id=\"uc735b457\" data-lake-index-type=\"0\"><span class=\"ne-text\">临界区外运行的进程不得阻塞其他进程。</span></li><li id=\"u38313e8d\" data-lake-index-type=\"0\"><span class=\"ne-text\">不得使进程无限期等待进入临界区。</span></li></ul><h4 id=\"ahFHj\"><span class=\"ne-text\">3. 忙等待的互斥</span></h4><h5 id=\"cxNWI\"><span class=\"ne-text\">（1） 屏蔽中断</span></h5><p id=\"ud09e254e\" class=\"ne-p\"><span class=\"ne-text\">在单处理器系统中，最简单的方法是使每个进程在刚刚进入临界区后立即屏蔽所有中断，并在就要离开之前再打开中断。屏蔽中断后，时钟中断也被屏蔽。CPU 只有发生时钟中断或其他中断时才会进行进程切换，这样，在屏蔽中断之后 CPU 将不会被切换到其他进程。于是，一旦某个进程屏蔽中断之后，它就可以检查和修改共享内存，而不必担心其他进程介入。</span></p><p id=\"u5b0044d4\" class=\"ne-p\"><span class=\"ne-text\">缺点：</span></p><ol class=\"ne-ol\"><li id=\"ucc6ce6b2\" data-lake-index-type=\"0\"><span class=\"ne-text\">若一个进程屏蔽中断后不再打开中断，整个系统可能会因此终止。</span></li><li id=\"u9d76f937\" data-lake-index-type=\"0\"><span class=\"ne-text\">如果系统是多处理器（有两个或可能更多的处理器），则屏蔽中断仅仅对执行 disable 指令的那个 CPU 有效。其他 CPU 仍将继续运行，并可以访问共享内存。</span></li></ol><p id=\"ue1d51a97\" class=\"ne-p\"><span class=\"ne-text\">但是对内核来说，当它在更新变量或列表的几条指令期间将中断屏蔽是很方便的。</span></p><p id=\"ufceb5b13\" class=\"ne-p\"><span class=\"ne-text\">所以结论是：屏蔽中断对于操作系统本身而言是一项很有用的技术，但对于用户进程则不是一种合适的通用互斥机制。</span></p><h5 id=\"EHbgm\"><span class=\"ne-text\">（2） 锁变量</span></h5><p id=\"u4b16d252\" class=\"ne-p\"><span class=\"ne-text\">设想有一个共享（锁）变量，其初始值为 0。当一个进程想进入其临界区时，它首先测试这把锁。如果该锁的值为 0，则该进程将其设置为 1 并进入临界区。若这把锁的值已经为 1，则该进程将等待直到其值变为 0。于是，0 就表示临界区内没有进程，1 表示已经有某个进程进入临界区。</span></p><p id=\"ufe769e23\" class=\"ne-p\"><span class=\"ne-text\">缺点：锁变量的读写不是原子操作，可能被其他进程中断</span></p><p id=\"uf059431b\" class=\"ne-p\"><span class=\"ne-text\">假设一个进程读出锁变量的值并发现它为 0，而恰好在它将其值设置为 1 之前，另一个进程被调度运行，将该锁变量设置为 1。当第一个进程再次能运行时，它同样也将该锁设置为 1，则此时同时有两个进程进入临界区中。</span></p><h5 id=\"yp4wE\"><span class=\"ne-text\">（3）严格轮换法</span></h5><p id=\"ud07af71a\" class=\"ne-p\"><span class=\"ne-text\">定义一个整型变量 turn ，初始值为 0，用于记录轮到哪个进程进入临界区，并检查或更新共享内存。开始时，进程 0 检查 turn ，发现其值为 0，于是进入临界区。进程 1 也发现其值为 0，所以在一个等待循环中不停地测试 turn ，看其值何时变为 1。连续测试一个变量直到某个值出现为止，称为忙等待。</span></p><p id=\"ub821eca7\" class=\"ne-p\"><img src=\"https://cdn.nlark.com/yuque/0/2022/png/732231/1647358713260-965dfe7d-4bdd-468f-aef4-fd0bd6ef651b.png\" width=\"739\" id=\"ua427d614\" class=\"ne-image\"></p><p id=\"ub07fd46e\" class=\"ne-p\"><span class=\"ne-text\">只有在有理由认为等待时间是非常短的情形下，才使用忙等待。用于忙等待的锁，称为自旋锁（spin lock）。</span></p><p id=\"ua8d7f963\" class=\"ne-p\"><span class=\"ne-text\">缺点：</span></p><ol class=\"ne-ol\"><li id=\"u80c2c6bd\" data-lake-index-type=\"0\"><span class=\"ne-text\">采用忙等待的方式，会浪费 CPU 时间。</span></li><li id=\"u125f36e6\" data-lake-index-type=\"0\"><span class=\"ne-text\">该方案要求两个进程严格地轮流进入它们的临界区，会造成一个临界区外运行的进程阻塞其他进程的情况。</span></li></ol><h5 id=\"LDwBz\"><span class=\"ne-text\">（4）Peterson 解法</span></h5><p id=\"u97ddeb3f\" class=\"ne-p\"><span class=\"ne-text\">在使用共享变量（即进入其临界区）之前，各个进程使用其进程号 0 或 1 作为参数来调用 enter_region 。该调用在需要时将使进程等待，直到能安全地进入临界区。在完成对共享变量的操作之后，进程将调用 leave_region ，表示操作已完成，若其他的进程希望进入临界区，则现在就可以进入。</span></p><p id=\"u1231b170\" class=\"ne-p\"><img src=\"https://cdn.nlark.com/yuque/0/2022/png/732231/1647358713398-b5c57590-5982-4930-aa15-09d028a9432a.png\" width=\"984\" id=\"ua675d282\" class=\"ne-image\"></p><h5 id=\"MLBRa\"><span class=\"ne-text\">（5）TSL 指令</span></h5><p id=\"ue4646917\" class=\"ne-p\"><span class=\"ne-text\">TSL 指令是硬件支持的一种方案，称为测试并加锁，它将一个内存字 lock 读到寄存器 RX 中，然后在该内存地址上存一个非零值。</span></p><p id=\"ucaa0379a\" class=\"ne-p\"><span class=\"ne-text\">读字和写字操作保证是不可分割的，即该指令结束之前其他处理器均不允许访问该内存字。执行 TSL 指令的 CPU 将锁住内存总线，以禁止其他 CPU 在本指令结束之前访问内存。因此不会出现前面第二种方法锁变量的问题。</span></p><p id=\"u50b68964\" class=\"ne-p\"><img src=\"https://cdn.nlark.com/yuque/0/2022/png/732231/1647358713372-fd6d92e1-8855-433f-aef1-9d139c5d39e7.png\" width=\"944\" id=\"ua30a8d45\" class=\"ne-image\"></p><p id=\"u6f2233d3\" class=\"ne-p\"><span class=\"ne-text\">为了使用 TSL 指令，要使用一个共享变量 lock 来协调对共享内存的访问。当 lock 为 0 时，任何进程都可以使用 TSL 指令将其设置为 1，并读写共享内存。当操作结束时，进程用一条普通的 move 指令将 lock 的值重新设置为 0。</span></p><p id=\"u55a28230\" class=\"ne-p\"><span class=\"ne-text\">一个可替代 TSL 的指令是 XCHG ，它原子性地交换了两个位置的内容，它本质上与 TSL 的解决办法一样。所有的 Intel x86 CPU 在低层同步中使用 XCHG 指令。</span></p><p id=\"u415fc756\" class=\"ne-p\"><img src=\"https://cdn.nlark.com/yuque/0/2022/png/732231/1647358713387-44f5c1ea-b8bf-487d-b85d-574701da82a4.png\" width=\"948\" id=\"ub64677ba\" class=\"ne-image\"></p><p id=\"ubf018010\" class=\"ne-p\"><span class=\"ne-text\">缺点：</span></p><ol class=\"ne-ol\"><li id=\"u39d50835\" data-lake-index-type=\"0\"><span class=\"ne-text\">采用忙等待的方式，会浪费 CPU 时间。</span></li></ol><h4 id=\"V2UCy\"><span class=\"ne-text\">4. 睡眠与唤醒</span></h4><p id=\"uf063b2ad\" class=\"ne-p\"><span class=\"ne-text\">Peterson 解法和 TSL 或 XCHG 解法都是正确的，但它们都有忙等待的缺点。这种方法不仅浪费了 CPU 时间，而且还可能引起预想不到的结果。</span></p><p id=\"u3f511202\" class=\"ne-p\"><span class=\"ne-text\">我们可以使用睡眠与唤醒的机制，使它们在无法进入临界区时将阻塞，而不是忙等待。</span></p><p id=\"u1b0b34cc\" class=\"ne-p\"><span class=\"ne-text\">最简单的是 sleep 和 wakeup 。 sleep 是一个将引起调用进程阻塞的系统调用，即被挂起，直到另外一个进程将其唤醒。wakeup 调用有一个参数，即要被唤醒的进程。</span></p><p id=\"u84b35c4a\" class=\"ne-p\"><span class=\"ne-text\">缺点：</span></p><p id=\"uebaca453\" class=\"ne-p\"><span class=\"ne-text\">参考生产者-消费者问题，发给一个（尚）未睡眠进程的 wakeup 信号会出现丢失，从而出现生产者和消费者同时睡眠的情况。</span></p><p id=\"ue7c0fbee\" class=\"ne-p\"><span class=\"ne-text\">一种快速的弥补方法是修改规则，加上一个唤醒等待位。当一个 wakeup 信号发送给一个清醒的进程信号时，将该位置 1。随后，当该进程要睡眠时，如果唤醒等待位为 1，则将该位清除，而该进程仍然保持清醒。但原则上讲，这并没有从根本上解决问题。</span></p><h4 id=\"sXXIz\"><span class=\"ne-text\">5. 信号量</span></h4><p id=\"uac6b263b\" class=\"ne-p\"><span class=\"ne-text\">信号量是一个整型变量用来累计唤醒次数，供以后使用。一个信号量的取值可以为 0（表示没有保存下来的唤醒操作）或者为正值（表示有一个或多个唤醒操作）。</span></p><p id=\"u33afcbe9\" class=\"ne-p\"><span class=\"ne-text\">对信号量一共有两种操作：down 和 up （分别为一般化后的 sleep 和 wakeup ）。</span></p><p id=\"u3849d7f6\" class=\"ne-p\"><span class=\"ne-text\">对一信号量执行 down 操作，则是检查其值是否大于 0。若该值大于 0，则将其值减 1（即用掉一个保存的唤醒信号）并继续；若该值为 0，则进程将睡眠，而且此时 down 操作并未结束。</span></p><p id=\"ub5519bec\" class=\"ne-p\"><span class=\"ne-text\">对一信号量执行 up 操作，会对信号量的值增 1。如果一个或多个进程在该信号量上睡眠，信号量的值仍旧是 0，但在其上睡眠的进程会被唤醒一个。</span></p><p id=\"ud4a06746\" class=\"ne-p\"><span class=\"ne-text\">检查数值、修改变量值以及可能发生的睡眠和唤醒操作均作为一个单一的、不可分割的原子操作完成。所谓原子操作，是指一组相关联的操作要么都不间断地执行，要么都不执行。</span></p><h4 id=\"qZRGc\"><span class=\"ne-text\">6. 互斥量</span></h4><p id=\"uf911a753\" class=\"ne-p\"><span class=\"ne-text\">如果不需要信号量的计数能力，有时可以使用信号量的一个简化版本，称为互斥量（mutex）。互斥量仅仅适用于管理共享资源或一小段代码。由于互斥量在实现时既容易又有效，这使得互斥量在实现用户空间线程包时非常有用。</span></p><p id=\"ub462ad61\" class=\"ne-p\"><span class=\"ne-text\">互斥量是一个可以处于两态之一的变量：解锁和加锁。当一个线程（或进程）需要访问临界区时，它调用 mutex_lock 。如果该互斥量当前是解锁的（即临界区可用），此调用成功，调用线程可以自由进入该临界区。另一方面，如果该互斥量已经加锁，调用线程被阻塞，直到在临界区中的线程完成并调用 mutex_unlock 。如果多个线程被阻塞在该互斥量上，将随机选择一个线程并允许它获得锁。</span></p><p id=\"u88f42e74\" class=\"ne-p\"><img src=\"https://cdn.nlark.com/yuque/0/2022/png/732231/1647358714079-f7f766ed-12c2-4b10-a323-12b9f1b37558.png\" width=\"1049\" id=\"u0c28150e\" class=\"ne-image\"></p><p id=\"u7db26f4a\" class=\"ne-p\"><span class=\"ne-text\">enter_region 和 mutex_lock 的代码很相似，但有一个关键的区别。</span></p><p id=\"ub0a5f022\" class=\"ne-p\"><span class=\"ne-text\">当 enter_region 进入临界区失败时，它始终重复测试锁（忙等待）。实际上，由于时钟超时的作用，会调度其他进程运行。这样迟早拥有锁的进程会进入运行并释放锁。</span></p><p id=\"ufc805e4c\" class=\"ne-p\"><span class=\"ne-text\">在（用户）线程中，情形有所不同，因为没有时钟停止运行时间过长的线程。结果是通过忙等待的方式来试图获得锁的线程将永远循环下去，决不会得到锁，因为这个运行的线程不会让其他线程运行从而释放锁。因此当 mutex_lock 取锁失败时，它调用 thread_yield 将 CPU 放弃给另一个线程。这样，就没有忙等待。在该线程下次运行时，它再一次对锁进行测试。</span></p><h4 id=\"cklet\"><span class=\"ne-text\">7. 条件变量</span></h4><p id=\"u1ca8ce42\" class=\"ne-p\"><span class=\"ne-text\">条件变量允许线程由于一些未达到的条件而阻塞。</span></p><p id=\"u38f3c613\" class=\"ne-p\"><span class=\"ne-text\">与条件变量相关的最重要的两个操作是 pthread_cond_wait 和 pthread_cond_signal 。前者阻塞调用线程直到另一其他线程向它发信号（使用后一个调用）。</span></p><p id=\"u15437e27\" class=\"ne-p\"><span class=\"ne-text\">条件变量（不像信号量）不会存在内存中。如果将一个信号量传递给一个没有线程在等待的条件变量，那么这个信号就会丢失。</span></p><h4 id=\"CiDOP\"><span class=\"ne-text\">8. 管程</span></h4><p id=\"u3d92473f\" class=\"ne-p\"><span class=\"ne-text\">管程是一种高级同步原语，管程有一个很重要的特性，即任一时刻管程中只能有一个活跃进程，这一特性使管程能有效地完成互斥。</span></p><p id=\"u773574a7\" class=\"ne-p\"><span class=\"ne-text\">当一个进程调用管程过程时，该过程中的前几条指令将检查在管程中是否有其他的活跃进程。如果当一个进程调用管程过程时，该过程中的前几条指令将检查在管程中是否有其他的活跃进程。如果</span></p><p id=\"ucec01bc1\" class=\"ne-p\"><span class=\"ne-text\">管程提供了一种实现互斥的简便途径，通过临界区互斥的自动化，管程比信号量更容易保证并行编程的正确性。</span></p><h4 id=\"l2Lvn\"><span class=\"ne-text\">9. 消息传递</span></h4><p id=\"u8e783819\" class=\"ne-p\"><span class=\"ne-text\">这种进程间通信的方法使用两条原语 send 和 receive ，它们像信号量而不像管程，是系统调用而不是语言成分。</span></p><p id=\"uf5bfc33f\" class=\"ne-p\"><span class=\"ne-text\">前一个调用向一个给定的目标发送一条消息，后一个调用从一个给定的源（或者是任意源，如果接收者不介意的话）接收一条消息。如果没有消息可用，则接收者可能被阻塞，直到一条消息到达，或者，带着一个错误码立即返回。</span></p><h4 id=\"Bhyhu\"><span class=\"ne-text\">10. 屏障</span></h4><p id=\"u9544ea6f\" class=\"ne-p\"><span class=\"ne-text\">在有些应用中划分了若干阶段，并且规定，除非所有的进程都就绪准备着手下一个阶段，否则任何进程都不能进入下一个阶段。可以通过在每个阶段的结尾安置屏障来实现这种行为。当一个进程到达屏障时，它就被屏障阻拦，直到所有进程都到达该屏障为止。</span></p><h3 id=\"TtiiE\"><span class=\"ne-text\">四、调度</span></h3><p id=\"ubdcf2395\" class=\"ne-p\"><span class=\"ne-text\">当计算机系统是多道程序设计系统时，通常就会有多个进程或线程同时竞争 CPU。只要有两个或更多的进程处于就绪状态，这种情形就会发生。如果只有一个 CPU 可用，那么就必须选择下一个要运行的进程。在操作系统中，完成选择工作的这一部分称为调度程序，该程序使用的算法称为调度算法。</span></p><h4 id=\"h3NfM\"><span class=\"ne-text\">1. 何时调度</span></h4><ol class=\"ne-ol\"><li id=\"ufb3bfa20\" data-lake-index-type=\"0\"><span class=\"ne-text\">在创建一个新进程之后，需要决定是运行父进程还是运行子进程。</span></li><li id=\"u82d9306e\" data-lake-index-type=\"0\"><span class=\"ne-text\">在一个进程退出时必须做出调度决策。</span></li><li id=\"u3450d398\" data-lake-index-type=\"0\"><span class=\"ne-text\">当一个进程阻塞在 I/O 和信号量上或由于其他原因阻塞时，必须选择另一个进程运行。</span></li><li id=\"ue1ea8a6b\" data-lake-index-type=\"0\"><span class=\"ne-text\">第四，在一个 I/O 中断发生时，必须做出调度决策。</span></li></ol><h4 id=\"V6UHW\"><span class=\"ne-text\">2. 调度算法分类</span></h4><ol class=\"ne-ol\"><li id=\"u718738a6\" data-lake-index-type=\"0\"><span class=\"ne-text\">批处理。</span></li><li id=\"u74517b81\" data-lake-index-type=\"0\"><span class=\"ne-text\">交互式。</span></li><li id=\"u425722d3\" data-lake-index-type=\"0\"><span class=\"ne-text\">实时。</span></li></ol><h4 id=\"HWQSD\"><span class=\"ne-text\">3. 调度算法的目标</span></h4><p id=\"uf49f4cef\" class=\"ne-p\"><span class=\"ne-text\">为了设计调度算法，有必要考虑什么是一个好的调度算法。某些目标取决于环境（批处理、交互式或实时），但是还有一些目标是适用于所有情形的。</span></p><p id=\"u173ec000\" class=\"ne-p\"><img src=\"https://cdn.nlark.com/yuque/0/2022/png/732231/1647358714216-66143694-5546-460a-bbbb-cce489e6e022.png\" width=\"542\" id=\"u817dcf3b\" class=\"ne-image\"></p><h4 id=\"cmgPH\"><span class=\"ne-text\">4. 批处理系统中的调度</span></h4><h5 id=\"nOhIk\"><span class=\"ne-text\">（1）先来先服务</span></h5><p id=\"u2a377bdb\" class=\"ne-p\"><span class=\"ne-text\">在所有调度算法中，最简单的是非抢占式的先来先服务算法。使用该算法，进程按照它们请求 CPU 的顺序使用 CPU 。</span></p><p id=\"u35644aaa\" class=\"ne-p\"><span class=\"ne-text\">优点：</span></p><p id=\"uf4becf5d\" class=\"ne-p\"><span class=\"ne-text\">这个算法的主要优点是易于理解并且便于在程序中运用。</span></p><p id=\"uf6c2cffa\" class=\"ne-p\"><span class=\"ne-text\">缺点：</span></p><p id=\"ub433b3d1\" class=\"ne-p\"><span class=\"ne-text\">平均等待时间过长。</span></p><h5 id=\"EMKdp\"><span class=\"ne-text\">（2）最短作业优先</span></h5><p id=\"ubc3a5f31\" class=\"ne-p\"><span class=\"ne-text\">当输入队列中有若干个同等重要的作业被启动时，调度程序应使用最短作业优先算法。</span></p><p id=\"ufe32b149\" class=\"ne-p\"><span class=\"ne-text\">只有在所有的作业都可同时运行的情形下，最短作业优先算法才是最优化的。</span></p><h5 id=\"JJnqV\"><span class=\"ne-text\">（3）最短剩余时间优先</span></h5><p id=\"u3010b7f8\" class=\"ne-p\"><span class=\"ne-text\">最短作业优先的抢占式版本是最短剩余时间优先算法。使用这个算法，调度程序总是选择剩余运行时间最短的那个进程运行。</span></p><h4 id=\"dwQCf\"><span class=\"ne-text\">5. 交互式系统中的调度</span></h4><h4 id=\"fO2OV\"><span class=\"ne-text\">（1）轮转调度</span></h4><p id=\"u1e559454\" class=\"ne-p\"><span class=\"ne-text\">一种最古老、最简单、最公平且使用最广的算法是轮转调度。每个进程被分配一个时间段，称为时间片，即允许该进程在该时间段中运行。如果在时间片结束时该进程还在运行，则将剥夺 CPU 并分配给另一个进程。如果该进程在时间片结束前阻塞或结束，则 CPU 立即进行切换。</span></p><p id=\"u224f9d71\" class=\"ne-p\"><span class=\"ne-text\">需要注意的是，时间片设得太短会导致过多的进程切换，降低了 CPU 效率；而设得太长又可能引起对短的交互请求的响应时间变长。将时间片设为 20ms ～ 50 ms 通常是一个比较合理的折中。</span></p><h4 id=\"Ba7T2\"><span class=\"ne-text\">（2）优先级调度</span></h4><p id=\"u09976307\" class=\"ne-p\"><span class=\"ne-text\">每个进程被赋予一个优先级，允许优先级最高的可运行进程先运行。为了防止高优先级进程无休止地运行下去，调度程序可以在每个时钟滴答（即每个时钟中断）降低当前进程的优先级。如果这个动作导致该进程的优先级低于次高优先级的进程，则进行进程切换。</span></p><h4 id=\"IlGFC\"><span class=\"ne-text\">（3）多级队列</span></h4><p id=\"ua32667cd\" class=\"ne-p\"><span class=\"ne-text\">将一组进程按优先级分成若干类，并且在各类之间采用优先级调度，而在各类进程的内部采用其他调度方式。</span></p><h4 id=\"M5koO\"><span class=\"ne-text\">（4）最短进程优先</span></h4><p id=\"ua78aa1f4\" class=\"ne-p\"><span class=\"ne-text\">对于批处理系统而言，由于最短作业优先常常伴随着最短响应时间，所以如果能够把它用于交互进程，那将是非常好的。</span></p><h4 id=\"WvdTq\"><span class=\"ne-text\">（5）保证调度</span></h4><p id=\"udd72c108\" class=\"ne-p\"><span class=\"ne-text\">向用户作出明确的性能保证，然后去实现它。</span></p><p id=\"ua46e3f5a\" class=\"ne-p\"><span class=\"ne-text\">一种很实际并很容易实现的保证是：若用户工作时有 n 个用户登录，则用户将获得 CPU 处理能力的 1/n 。类似地，在一个有 n 个进程运行的单用户系统中，若所有的进程都等价，则每个进程将获得 1/n 的 CPU 时间。看上去足够公平了。</span></p><h4 id=\"Tiqaa\"><span class=\"ne-text\">（6）彩票调度</span></h4><p id=\"u3fbc1674\" class=\"ne-p\"><span class=\"ne-text\">向进程提供各种系统资源（如 CPU 时间）的彩票。一旦需要做出一项调度决策时，就随机抽出一张彩票，拥有该彩票的进程获得该资源。在应用到 CPU 调度时，系统可以掌握每秒钟 50 次的一种彩票，作为奖励每个获奖者可以得到 20 ms 的 CPU 时间。</span></p><h4 id=\"NnMcu\"><span class=\"ne-text\">（7）公平分享调度</span></h4><p id=\"ubd1fe371\" class=\"ne-p\"><span class=\"ne-text\">到现在为止，我们假设被调度的都是各个进程自身，并不关注其所有者是谁。</span></p><p id=\"u4b154840\" class=\"ne-p\"><span class=\"ne-text\">为了避免这种情形，某些系统在调度处理之前考虑谁拥有进程这一因素。在这种模式中，每个用户分配到 CPU 时间的一部分，而调度程序以一种强制的方式选择进程。这样，如果两个用户都得到获得 50% CPU 时间的保证，那么无论一个用户有多少进程存在，每个用户都会得到应有的 CPU 份额。</span></p><h4 id=\"QdPKK\"><span class=\"ne-text\">6. 策略和机制</span></h4><p id=\"ua4939001\" class=\"ne-p\"><span class=\"ne-text\">我们讨论的调度算法中没有一个算法从用户进程接收有关的调度决策信息，这就导致了调度程序很少能够做出最优的选择。</span></p><p id=\"u99c11fa4\" class=\"ne-p\"><span class=\"ne-text\">解决问题的方法是将调度机制与调度策略分离，也就是将调度算法以某种形式参数化，而参数可以由用户进程填写。</span></p><p id=\"ub0498032\" class=\"ne-p\"><span class=\"ne-text\">在这里，调度机制位于内核，而调度策略则由用户进程决定。</span></p></div>",
  "body_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"viewport\" content=\"adapt\" /><meta name=\"typography\" content=\"classic\" /><h2 data-lake-id=\"hjZxy\" id=\"hjZxy\"><span data-lake-id=\"ucdcb19cb\" id=\"ucdcb19cb\">第一章 引论</span></h2><h3 data-lake-id=\"nbNx0\" id=\"nbNx0\"><span data-lake-id=\"u5188338d\" id=\"u5188338d\">1. 操作系统定义</span></h3><p data-lake-id=\"uc821eef4\" id=\"uc821eef4\"><span data-lake-id=\"u16a739b5\" id=\"u16a739b5\">操作系统是运行在内核态的软件，它执行两个基本上独立的任务。</span></p><ul list=\"u11671d27\"><li fid=\"u20e9f5d3\" data-lake-id=\"udc600a42\" id=\"udc600a42\"><span data-lake-id=\"ufc935687\" id=\"ufc935687\">隐藏计算机底层硬件的实现，为用户及应用程序提供一个资源集的清晰抽象。</span></li><li fid=\"u20e9f5d3\" data-lake-id=\"uec38dc83\" id=\"uec38dc83\"><span data-lake-id=\"u5c40f1d6\" id=\"u5c40f1d6\">管理计算机硬件资源。</span></li></ul><p data-lake-id=\"ua6d65ec6\" id=\"ua6d65ec6\"><span data-lake-id=\"u043206d5\" id=\"u043206d5\">任何操作系统的核心是它可处理的系统调用集。这些系统带欧阳真实地说明了操作系统做的工作。</span></p><h3 data-lake-id=\"OcrYU\" id=\"OcrYU\"><span data-lake-id=\"ube3c2ba7\" id=\"ube3c2ba7\">2. 计算机运行模式</span></h3><p data-lake-id=\"u0568c26c\" id=\"u0568c26c\"><span data-lake-id=\"uc08b96af\" id=\"uc08b96af\">多数计算机有两种运行模式：内核态和用户态。</span></p><p data-lake-id=\"u5317e4a6\" id=\"u5317e4a6\"><span data-lake-id=\"u65902069\" id=\"u65902069\">软件中最基础的部分是操作系统，它运行在内核态。这内核态模式下，操作系统具有对所有硬件的完全访问权，可以执行机器能够运行的任何指令。软件的其余部分运行在用户态下，在用户态下，只能使用机器指令中的一个子集。</span></p><p data-lake-id=\"u9d88bdef\" id=\"u9d88bdef\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2022%2Fpng%2F732231%2F1647358712354-28baa2f7-a6d8-40cb-8ed0-62b316515dd7.png%22%2C%22taskId%22%3A%22u58382055-7db3-4d23-a6a8-b39151294a8%22%2C%22clientId%22%3A%22u5297893b-ed7c-4%22%2C%22originalType%22%3A%22url%22%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A109293%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A709%2C%22originHeight%22%3A435%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%E7%94%B5%E5%AD%90%E9%82%AE%E4%BB%B6%20%E9%9F%B3%E4%B9%90%20%E6%92%AD%E6%94%BE%E5%99%A8%20%E9%98%85%E8%AF%BB%E5%99%A8%20WEB%E6%B5%8F%E8%A7%88%E5%99%A8%20%E7%94%A8%E6%88%B7%E6%80%81%20%E8%BD%AF%E4%BB%B6%20%E7%94%A8%E6%88%B7%E6%8E%A5%E5%8F%A3%E7%A8%8B%E5%BA%8F%2015%20%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%20%E5%86%85%E6%A0%B8%E6%80%81%20%E7%A1%AC%E4%BB%B6%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A320.02963%2C%22y%22%3A33.59743%2C%22width%22%3A87.61207000000002%2C%22height%22%3A22.146984999999994%2C%22text%22%3A%22%E7%94%B5%E5%AD%90%E9%82%AE%E4%BB%B6%22%7D%2C%7B%22x%22%3A438.66605%2C%22y%22%3A34.35834%2C%22width%22%3A45.71225000000004%2C%22height%22%3A21.706940000000003%2C%22text%22%3A%22%E9%9F%B3%E4%B9%90%22%7D%2C%7B%22x%22%3A429.98254%2C%22y%22%3A66.998344%2C%22width%22%3A65.93833000000001%2C%22height%22%3A22.24223599999999%2C%22text%22%3A%22%E6%92%AD%E6%94%BE%E5%99%A8%22%7D%2C%7B%22x%22%3A330.50485%2C%22y%22%3A66.88398%2C%22width%22%3A64.26041000000004%2C%22height%22%3A21.62176500000001%2C%22text%22%3A%22%E9%98%85%E8%AF%BB%E5%99%A8%22%7D%2C%7B%22x%22%3A158.31212%2C%22y%22%3A84.55206%2C%22width%22%3A106.65806000000003%2C%22height%22%3A21.96275%2C%22text%22%3A%22WEB%E6%B5%8F%E8%A7%88%E5%99%A8%22%7D%2C%7B%22x%22%3A56.936863%2C%22y%22%3A181.72374%2C%22width%22%3A66.780057%2C%22height%22%3A23.061890000000005%2C%22text%22%3A%22%E7%94%A8%E6%88%B7%E6%80%81%22%7D%2C%7B%22x%22%3A565.41144%2C%22y%22%3A203.99123%2C%22width%22%3A42.66539999999998%2C%22height%22%3A22.092449999999985%2C%22text%22%3A%22%E8%BD%AF%E4%BB%B6%22%7D%2C%7B%22x%22%3A274.69864%2C%22y%22%3A211.44946%2C%22width%22%3A132.6701%2C%22height%22%3A24.206230000000005%2C%22text%22%3A%22%E7%94%A8%E6%88%B7%E6%8E%A5%E5%8F%A3%E7%A8%8B%E5%BA%8F%22%7D%2C%7B%22x%22%3A129.55278%2C%22y%22%3A270.43423%2C%22width%22%3A28.242969999999985%2C%22height%22%3A59.36743999999999%2C%22text%22%3A%2215%22%7D%2C%7B%22x%22%3A295.14893%2C%22y%22%3A280.37704%2C%22width%22%3A90.70817%2C%22height%22%3A21.67733999999996%2C%22text%22%3A%22%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%22%7D%2C%7B%22x%22%3A61.22212%2C%22y%22%3A286.30624%2C%22width%22%3A64.36513%2C%22height%22%3A23.499000000000024%2C%22text%22%3A%22%E5%86%85%E6%A0%B8%E6%80%81%22%7D%2C%7B%22x%22%3A561.9484%2C%22y%22%3A347.0138%2C%22width%22%3A47.53369999999995%2C%22height%22%3A21.89639999999997%2C%22text%22%3A%22%E7%A1%AC%E4%BB%B6%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23f4f4f4%22%2C%22id%22%3A%22u1ad25170%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><h3 data-lake-id=\"bC8En\" id=\"bC8En\"><span data-lake-id=\"u134dcbc4\" id=\"u134dcbc4\">3. shell 与 GUI</span></h3><p data-lake-id=\"u3333aaa4\" id=\"u3333aaa4\"><span data-lake-id=\"u59606910\" id=\"u59606910\">用户与之交互的程序，基于文本的通常称为 shell，而基于图标的则称为图形用户界面（GUI）。</span></p><p data-lake-id=\"u15abfa52\" id=\"u15abfa52\"><span data-lake-id=\"u09cf9e1b\" id=\"u09cf9e1b\">它们并不是操作系统的一部分，它们是运行在用户态最低层次的用户接口程序</span></p><h3 data-lake-id=\"Xzbui\" id=\"Xzbui\"><span data-lake-id=\"u3e1f3865\" id=\"u3e1f3865\">4. 对于抽象的理解</span></h3><p data-lake-id=\"u12a2fb28\" id=\"u12a2fb28\"><span data-lake-id=\"ub704c1b5\" id=\"ub704c1b5\">现代计算机系统中，大量使用了抽象这一概念。抽象是管理复杂性的一个关键。好的抽象可以把一个几乎不可能管理的任务划分为两个可管理的部分。其中第一部分是有关抽象的定义和实现，第二部分是随时用这些抽象解决问题。</span></p><p data-lake-id=\"u35449fee\" id=\"u35449fee\"><span data-lake-id=\"ua30c3aff\" id=\"ua30c3aff\">以抽象的角度看操作系统，它的任务就是创建好的抽象，并实现和管理它所创建的抽象。</span></p><h3 data-lake-id=\"POCrf\" id=\"POCrf\"><span data-lake-id=\"ued19df70\" id=\"ued19df70\">5. 多路复用资源方式</span></h3><p data-lake-id=\"uce462b1f\" id=\"uce462b1f\"><span data-lake-id=\"u03a07930\" id=\"u03a07930\">在时间上复用：当一种资源在时间上复用时，不同的程序或用户轮流使用它。</span></p><p data-lake-id=\"ucb9b6f42\" id=\"ucb9b6f42\"><span data-lake-id=\"u4975c907\" id=\"u4975c907\">在空间上复用：每个客户得到资源的一部分。</span></p><h3 data-lake-id=\"Avbah\" id=\"Avbah\"><span data-lake-id=\"u72289496\" id=\"u72289496\">6. I/O 设备的结构</span></h3><p data-lake-id=\"ued5c5aed\" id=\"ued5c5aed\"><span data-lake-id=\"u3fa06af7\" id=\"u3fa06af7\">I/O 设备一般包括两个部分：设备控制器和设备本身。控制器插在电路板上的一块芯片或一组芯片，这块电路板物理地控制芯片，它从操作系统接收命令。</span></p><p data-lake-id=\"u917b766c\" id=\"u917b766c\"><span data-lake-id=\"u498294a3\" id=\"u498294a3\">控制器的任务是为操作系统提供一个简单的接口。每类设备控制器是不同的，所以需要不同的软件进行控制。专门与控制器对话，发出命令并接收响应的软件，称为设备驱动程序。为了使用设备驱动程序，必须要把设备驱动程序装入到操作系统中，这样它可在核心态中运行。</span></p><p data-lake-id=\"u369bad52\" id=\"u369bad52\"><span data-lake-id=\"ue9478088\" id=\"ue9478088\">每个设备控制器都有少量的用于通信的寄存器，所有的寄存器的集合构成了 I/O 空间。</span></p><h3 data-lake-id=\"qfYAJ\" id=\"qfYAJ\"><span data-lake-id=\"u4f12c14e\" id=\"u4f12c14e\">7. IDE 概念</span></h3><p data-lake-id=\"ud6b039dd\" id=\"ud6b039dd\"><span data-lake-id=\"ude2afb7e\" id=\"ude2afb7e\">IDE 表示集成驱动电子设备，是许多计算机的磁盘标准。</span></p><h3 data-lake-id=\"eig5K\" id=\"eig5K\"><span data-lake-id=\"u37bf8361\" id=\"u37bf8361\">8. 实现输入输出的三种方式</span></h3><p data-lake-id=\"u1c681dea\" id=\"u1c681dea\"><span data-lake-id=\"ue9f5bbc3\" id=\"ue9f5bbc3\">第一种方式，用户程序发出一个系统调用，内核将其翻译成一个对应设备驱动程序的过程调用。然后设备驱动程序启动 I/O 并在一个连续不断的循环中检查该设备，看该设备是否完成了工作。当 I/O 结束后，设备驱动程序把数据送到指定的地方（若有此需要），并返回。然后操作系统将控制返回给调用者。这种方式称为忙等待（busy waiting），其缺点是要占据 CPU ，CPU 一直轮询设备直到对应的 I/O 操作完成。</span></p><p data-lake-id=\"ufc1e6b0d\" id=\"ufc1e6b0d\"><span data-lake-id=\"u5779a3eb\" id=\"u5779a3eb\">第二种方式，设备驱动程序启动设备并且让该设备在操作完成时发出一个中断。设备驱动程序在这个时刻返回。操作系统接着在需要时阻塞调用者并安排其他工作进行。当设备驱动程序检测到该设备的操作完毕时，它发出一个中断通知操作完成。</span></p><p data-lake-id=\"u646a5848\" id=\"u646a5848\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2022%2Fpng%2F732231%2F1647358712346-e6029738-9673-4172-8024-98b729bd359b.png%22%2C%22taskId%22%3A%22u5ebb4048-e312-454c-b31a-a5b7ce85dd6%22%2C%22clientId%22%3A%22u5297893b-ed7c-4%22%2C%22originalType%22%3A%22url%22%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A69907%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A716%2C%22originHeight%22%3A340%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%E7%A3%81%E7%9B%98%20%E9%A9%B1%E5%8A%A8%E5%99%A8%20%E5%BD%93%E5%89%8D%E6%8C%87%E4%BB%A4%20%E4%B8%8B%E4%B8%80%E6%9D%A1%E6%8C%87%E4%BB%A4%203.%E8%BF%94%E5%9B%9E%20%E4%B8%AD%E6%96%AD%203%20%E7%A3%81%E7%9B%98%201.%E4%B8%AD%E6%96%AD%20CPU%20%E6%8E%A7%E5%88%B6%E5%99%A8%20%E6%8E%A7%E5%88%B6%E5%99%A8%202.%E5%88%86%E6%B4%BE%E7%BB%99%20%E5%A4%84%E7%90%86%E7%A8%8B%E5%BA%8F%20%E4%B8%AD%E6%96%AD%E5%A4%84%E7%90%86%E7%A8%8B%E5%BA%8F%20B)%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A238.6234%2C%22y%22%3A82.35017%2C%22width%22%3A29.939649999999972%2C%22height%22%3A14.458369999999988%2C%22text%22%3A%22%E7%A3%81%E7%9B%98%22%7D%2C%7B%22x%22%3A231.02077%2C%22y%22%3A105.35079%2C%22width%22%3A45.34169%2C%22height%22%3A14.28376999999999%2C%22text%22%3A%22%E9%A9%B1%E5%8A%A8%E5%99%A8%22%7D%2C%7B%22x%22%3A544.4615%2C%22y%22%3A117.910484%2C%22width%22%3A58.96262999999999%2C%22height%22%3A15.481585999999993%2C%22text%22%3A%22%E5%BD%93%E5%89%8D%E6%8C%87%E4%BB%A4%22%7D%2C%7B%22x%22%3A538.5062%2C%22y%22%3A136.93523%2C%22width%22%3A72.16829999999993%2C%22height%22%3A15.650140000000022%2C%22text%22%3A%22%E4%B8%8B%E4%B8%80%E6%9D%A1%E6%8C%87%E4%BB%A4%22%7D%2C%7B%22x%22%3A590.1529%2C%22y%22%3A167.03429%2C%22width%22%3A45.26109999999994%2C%22height%22%3A14.77185%2C%22text%22%3A%223.%E8%BF%94%E5%9B%9E%22%7D%2C%7B%22x%22%3A141.37549%2C%22y%22%3A183.1994%2C%22width%22%3A29.04799%2C%22height%22%3A15.142750000000007%2C%22text%22%3A%22%E4%B8%AD%E6%96%AD%22%7D%2C%7B%22x%22%3A104.01037%2C%22y%22%3A183.44446%2C%22width%22%3A11.251745%2C%22height%22%3A20.06665000000001%2C%22text%22%3A%223%22%7D%2C%7B%22x%22%3A232.0276%2C%22y%22%3A183.8524%2C%22width%22%3A30.62946999999997%2C%22height%22%3A14.961550000000017%2C%22text%22%3A%22%E7%A3%81%E7%9B%98%22%7D%2C%7B%22x%22%3A513.87274%2C%22y%22%3A185.0028%2C%22width%22%3A45.10992999999996%2C%22height%22%3A14.834890000000001%2C%22text%22%3A%221.%E4%B8%AD%E6%96%AD%22%7D%2C%7B%22x%22%3A45.468616%2C%22y%22%3A195.33336%2C%22width%22%3A30.587254%2C%22height%22%3A12.79056%2C%22text%22%3A%22CPU%22%7D%2C%7B%22x%22%3A132.5424%2C%22y%22%3A205.33577%2C%22width%22%3A43.99704000000003%2C%22height%22%3A15.295379999999994%2C%22text%22%3A%22%E6%8E%A7%E5%88%B6%E5%99%A8%22%7D%2C%7B%22x%22%3A226.1342%2C%22y%22%3A205.98962%2C%22width%22%3A44.32137000000003%2C%22height%22%3A15.019409999999993%2C%22text%22%3A%22%E6%8E%A7%E5%88%B6%E5%99%A8%22%7D%2C%7B%22x%22%3A514.07556%2C%22y%22%3A235.78358%2C%22width%22%3A61.695640000000026%2C%22height%22%3A17.361580000000004%2C%22text%22%3A%222.%E5%88%86%E6%B4%BE%E7%BB%99%22%7D%2C%7B%22x%22%3A530.9984%2C%22y%22%3A256.6741%2C%22width%22%3A59.369150000000104%2C%22height%22%3A14.793459999999982%2C%22text%22%3A%22%E5%A4%84%E7%90%86%E7%A8%8B%E5%BA%8F%22%7D%2C%7B%22x%22%3A507.06137%2C%22y%22%3A283.41714%2C%22width%22%3A87.27993000000004%2C%22height%22%3A15.168759999999963%2C%22text%22%3A%22%E4%B8%AD%E6%96%AD%E5%A4%84%E7%90%86%E7%A8%8B%E5%BA%8F%22%7D%2C%7B%22x%22%3A575.09106%2C%22y%22%3A317.32025%2C%22width%22%3A14.75909999999999%2C%22height%22%3A12.515750000000025%2C%22text%22%3A%22B)%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23f6f6f6%22%2C%22id%22%3A%22udd91cfa8%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><p data-lake-id=\"ua01c0bfa\" id=\"ua01c0bfa\"><span data-lake-id=\"u480fc89f\" id=\"u480fc89f\">第三种方式，为 I/O 使用一种特殊的直接存储器访问（Direct Memory Access，DMA）芯片，它可以控制在内存和某些控制器之间的位流，而无须持续的 CPU 干预。</span></p><h3 data-lake-id=\"bPrE6\" id=\"bPrE6\"><span data-lake-id=\"ud296141b\" id=\"ud296141b\">9. CMOS 存储器</span></h3><p data-lake-id=\"u9b14994f\" id=\"u9b14994f\"><span data-lake-id=\"u05cb5c10\" id=\"u05cb5c10\">CMOS 存储器是易失性的。许多计算机利用 CMOS 存储器保持当前时间和日期。 CMOS 存储器和递增时间的时钟电路有一块小电池驱动，所以，即使计算机没有上电，时间也可以正确地更新。</span></p><h3 data-lake-id=\"I1ZY8\" id=\"I1ZY8\"><span data-lake-id=\"uf09fd317\" id=\"uf09fd317\">10. USB 概念</span></h3><p data-lake-id=\"u0012cbc7\" id=\"u0012cbc7\"><span data-lake-id=\"uf800a709\" id=\"uf800a709\">USB 是通用串行总线，是用来将所有的慢速 I/O 设备，诸如键盘和鼠标，与计算机相连。USB 是一种集中式总线，其根设备每 1ms 轮询一次 I/O 设备，看是否有消息收发。所有的 USB 设备共享一个 USB 设备驱动器，于是就不需要为新的 USB 设备安装新的设备驱动器了。</span></p><h3 data-lake-id=\"cTnqv\" id=\"cTnqv\"><span data-lake-id=\"ua75d65b3\" id=\"ua75d65b3\">11. 即插即用概念</span></h3><p data-lake-id=\"u6439fe6c\" id=\"u6439fe6c\"><span data-lake-id=\"u0f7a37fa\" id=\"u0f7a37fa\">在一般的计算机工作环境下，操作系统必须了解有些什么外部设备连接到计算机上，并对它们进行配置。这种需求导致了 Intel 和微软设计了一种名为即插即用的 I/O 系统。</span></p><p data-lake-id=\"ueda04b19\" id=\"ueda04b19\"><span data-lake-id=\"u6e530902\" id=\"u6e530902\">在即插即用之前，每块 I/O 卡有一个固定的中断请求级别和用于其 I/O 寄存器的固定地址。即插即用所做的工作是，系统自动地收集有关 I/O 设备的信息，集中赋予 I/O 地址，然后通知每块卡所用的数值。</span></p><h3 data-lake-id=\"RSv1n\" id=\"RSv1n\"><span data-lake-id=\"u262f37d3\" id=\"u262f37d3\">12. 计算机的启动</span></h3><p data-lake-id=\"u7c6ea25f\" id=\"u7c6ea25f\"><span data-lake-id=\"u2d4cbfc0\" id=\"u2d4cbfc0\">Pentium 的简要启动过程如下。在每个 Pentium 上有一块母板。在母板上有一个称为基本输入输出系统（Basic Input Output System，BIOS）的程序。在 BIOS 内有底层 I/O 软件，包括读键盘、写屏幕、进行磁盘 I/O 以及其他过程。现在这个程序存放在一块闪速 RAM 中，它是非可易失性的，但是在发现 BIOS 中有错时可以通过操作系统对它进行更新。</span></p><p data-lake-id=\"u22f491ba\" id=\"u22f491ba\"><span data-lake-id=\"ue8735b78\" id=\"ue8735b78\">简要过程如下：</span></p><ol list=\"ua2d3305c\"><li fid=\"u68c46ddf\" data-lake-id=\"ub7e1220d\" id=\"ub7e1220d\"><span data-lake-id=\"ubc8fb986\" id=\"ubc8fb986\">BIOS 开始运行。它首先检查计算机设备的状态信息是否正常。</span></li><li fid=\"u68c46ddf\" data-lake-id=\"u9dfce996\" id=\"u9dfce996\"><span data-lake-id=\"u3dd2e7bb\" id=\"u3dd2e7bb\">扫描并记录总线所连设备。</span></li><li fid=\"u68c46ddf\" data-lake-id=\"ufa0e22fc\" id=\"ufa0e22fc\"><span data-lake-id=\"uee729ae6\" id=\"uee729ae6\">依次搜索启动设备，导入操作系统。</span></li><li fid=\"u68c46ddf\" data-lake-id=\"u044bda79\" id=\"u044bda79\"><span data-lake-id=\"uc52761fd\" id=\"uc52761fd\">操作系统询问 BIOS ，获得配置信息，获取所有设备的驱动程序并调入内核。</span></li><li fid=\"u68c46ddf\" data-lake-id=\"u5dec9f9e\" id=\"u5dec9f9e\"><span data-lake-id=\"u0b562283\" id=\"u0b562283\">初始化有关表格，创建需要的任何背景进程，并在每个终端上启动登录程序或 GUI。</span></li></ol><h3 data-lake-id=\"pOrMf\" id=\"pOrMf\"><span data-lake-id=\"u41de2675\" id=\"u41de2675\">13. 操作系统分类</span></h3><p data-lake-id=\"uab5c6e66\" id=\"uab5c6e66\"><span data-lake-id=\"ud74fd353\" id=\"ud74fd353\">大型机操作系统、服务器操作系统、多处理器操作系统、个人计算机操作系统、掌上计算机操作系统、嵌入式操作系统、传感器节点操作系统、实时操作系统、智能卡操作系统</span></p><h3 data-lake-id=\"xbXo8\" id=\"xbXo8\"><span data-lake-id=\"u959f0098\" id=\"u959f0098\">14. 实时操作系统的基本概念</span></h3><p data-lake-id=\"u49c2c4fa\" id=\"u49c2c4fa\"><span data-lake-id=\"u3cbef8bb\" id=\"u3cbef8bb\">实时操作系统的特征是将时间作为关键参数。通常分为硬实时操作系统和软实时操作系统。</span></p><p data-lake-id=\"u3f5e50ec\" id=\"u3f5e50ec\"><span data-lake-id=\"u9e7673d0\" id=\"u9e7673d0\">在硬实时操作系统中，某个规定的动作必须绝对地在规定的时刻（或规定的时间范围）发生。</span></p><p data-lake-id=\"u32b5603a\" id=\"u32b5603a\"><span data-lake-id=\"u1add20e1\" id=\"u1add20e1\">在软实时操作系统中，偶尔违反最终时限是不希望的，但可以接受，并且不会引起任何实时性的损害。</span></p><h3 data-lake-id=\"I4rpo\" id=\"I4rpo\"><span data-lake-id=\"ucbb518cf\" id=\"ucbb518cf\">15. UID</span></h3><p data-lake-id=\"u857f39a3\" id=\"u857f39a3\"><span data-lake-id=\"u57cfc78a\" id=\"u57cfc78a\">系统管理器授权每个进程使用一个给定的 UID 标识。每个被启动的进程都有一个启动该进程的用户 UID 。子进程与父进程拥有一样 UID。用户可以是某个组的成员，每个组也有一个 GID 标识。</span></p><h3 data-lake-id=\"etZ58\" id=\"etZ58\"><span data-lake-id=\"u968ca9e4\" id=\"u968ca9e4\">16. 文件路径</span></h3><p data-lake-id=\"u9db2989f\" id=\"u9db2989f\"><span data-lake-id=\"u9285200a\" id=\"u9285200a\">在 UNIX 中，绝对路径名包含了从根目录到该文件的所有目录清单，它们之间用正斜线</span><span data-lake-id=\"u8fed938c\" id=\"u8fed938c\"> </span><span data-lake-id=\"u68c04653\" id=\"u68c04653\">/</span><span data-lake-id=\"ueb716aa9\" id=\"ueb716aa9\"> </span><span data-lake-id=\"u3f5bdb1d\" id=\"u3f5bdb1d\">隔开。最开始的正斜线标识这是从根目录开始的绝对路径。</span></p><p data-lake-id=\"uc5ea976f\" id=\"uc5ea976f\"><span data-lake-id=\"u62fd55c3\" id=\"u62fd55c3\">在 MS-DOS 和 Windows 中，用反斜线</span><span data-lake-id=\"u562b0620\" id=\"u562b0620\"> </span><span data-lake-id=\"u9af504b3\" id=\"u9af504b3\">\\</span><span data-lake-id=\"u8f948d3f\" id=\"u8f948d3f\"> </span><span data-lake-id=\"ud2e8152d\" id=\"ud2e8152d\">作为分隔符。</span></p><h3 data-lake-id=\"CSfMs\" id=\"CSfMs\"><span data-lake-id=\"u064cdb87\" id=\"u064cdb87\">17. 文件系统安装</span></h3><p data-lake-id=\"uf5a46f15\" id=\"uf5a46f15\"><span data-lake-id=\"ud19bb37c\" id=\"ud19bb37c\">UNIX 一个重要概念是安装文件系统。几乎所有的个人计算机都有一个或多个光盘驱动器，可以插入 CD-ROM 和 DV D。它们几乎都有 USB 接口，可以插入 USB 存储棒（实际是固态磁盘驱动器）。为了提供一个出色的方式处理可移动介质，UNIX 允许把在 CD-ROM 或 DVD 上的文件系统接入到主文件树上。 mount 系统调用允许把在 CD-ROM 上的文件系统连接到程序所希望的根文件系统上。</span></p><h3 data-lake-id=\"SXZLl\" id=\"SXZLl\"><span data-lake-id=\"u15a3d18f\" id=\"u15a3d18f\">18. 特殊文件</span></h3><p data-lake-id=\"u9f239d06\" id=\"u9f239d06\"><span data-lake-id=\"udc10322a\" id=\"udc10322a\">提供特殊文件是为了使 I/O 设备看起来像文件一般。这样，就像使用系统调用读写文件一样，I/O 设备也可通过同样的系统调用进行读写。</span></p><p data-lake-id=\"u30b8402f\" id=\"u30b8402f\"><span data-lake-id=\"u1567f565\" id=\"u1567f565\">有两类特殊文件：块特殊文件和字符特殊文件。</span></p><p data-lake-id=\"u04612afd\" id=\"u04612afd\"><span data-lake-id=\"u34760a35\" id=\"u34760a35\">块特殊文件指那些由可随机存取的块组成的设备，如磁盘等。比如打开一个块特殊文件，然后读第 4 块，程序可以直接访问设备的第 4 块而不必考虑存放该文件的文件系统结构。</span></p><p data-lake-id=\"u3b272359\" id=\"u3b272359\"><span data-lake-id=\"u758fdeb2\" id=\"u758fdeb2\">字符特殊文件用于打印机、调制解调器和其他接收或输出字符流的设备。按照惯例，特殊文件保存在 /dev 目录中。例如，/dev/lp 是打印机。</span></p><h3 data-lake-id=\"GSolW\" id=\"GSolW\"><span data-lake-id=\"u2248cff6\" id=\"u2248cff6\">19. 文件保护</span></h3><p data-lake-id=\"uc108b47f\" id=\"uc108b47f\"><span data-lake-id=\"u1ceec6c3\" id=\"u1ceec6c3\">UNIX 操作系统通过对每个文件赋予一个 9 位的二进制保护代码，对 UNIX 中的文件实现保护。该保护代码有三个 3 位字段，一个用于所有者，一个用于所有者同组（用户被系统管理员划分成组）中的其他成员，而另一个用于其他人。每个字段中有一位用于读访问，一位用于写访问，一位用于执行访问。这些位就是知名的 rwx 位。</span></p><h3 data-lake-id=\"BHcuq\" id=\"BHcuq\"><span data-lake-id=\"ufba38cb9\" id=\"ufba38cb9\">20. 系统调用概念</span></h3><p data-lake-id=\"uef144862\" id=\"uef144862\"><span data-lake-id=\"u1886fc12\" id=\"u1886fc12\">如果一个进程正在用户态中运行一个用户程序，并且需要一个系统服务，比如从一个文件读数据，那么它就必须执行一个陷阱或系统调用指令，将控制转移到操作系统。操作系统接着通过参数检查，找出所需要的调用进程。然后，它执行系统调用，并把控制返回给在系统调用后面跟随着的指令。在某种意义上，进行系统调用就像进行一个特殊的过程调用，但是只有系统调用可以进入内核，而过程调用则不能。</span></p><h3 data-lake-id=\"EKe74\" id=\"EKe74\"><span data-lake-id=\"u674badbc\" id=\"u674badbc\">21. POSIX</span></h3><p data-lake-id=\"u944b3535\" id=\"u944b3535\"><span data-lake-id=\"ud44b4012\" id=\"ud44b4012\">UNIX 有很多不兼容的版本，从而导致了混乱。为了能使编写的程序能够在任何版本的 UNIX 系统运行，IEEE 提出了一个 UNIX 标准，称为 POSIX，目前大多数 UNIX 版本都支持他。 POSIX 标准定义了凡是 UNIX 必须支持的小型系统调用接口。</span></p><h3 data-lake-id=\"ft0Oa\" id=\"ft0Oa\"><span data-lake-id=\"uaa16a4dd\" id=\"uaa16a4dd\">22. Windows Win32 API</span></h3><p data-lake-id=\"u803fa6f1\" id=\"u803fa6f1\"><span data-lake-id=\"u512220ee\" id=\"u512220ee\">Windows 和 UNIX 的主要差别在于编程方式。一个 UNIX 程序包括做各种处理的代码以及从事完成特定服务的系统调用。相反，一个 Windows 程序通常是一个事件驱动程序。其中主程序等待某些事件发生，然后调用一个过程处理该事件。</span></p><p data-lake-id=\"u2c020a0f\" id=\"u2c020a0f\"><span data-lake-id=\"ue355ce5f\" id=\"ue355ce5f\">在 UNIX 中，系统调用（如 read）和系统调用所使用的库过程（如 read）之间几乎是一一对应的关系。换句话说，对于每个系统调用，差不多就涉及一个被调用的库过程。</span></p><p data-lake-id=\"ub01980e6\" id=\"ub01980e6\"><span data-lake-id=\"u679a0772\" id=\"u679a0772\">在 Windows 中，情况就大不相同了。首先，库调用和实际的系统调用是几乎不对应的。微软定义了一套过程，称为应用编程接口（Application Program Interface，Win32 API），程序员用这套过程获得操作系统的服务。</span></p><p data-lake-id=\"uc536ce8b\" id=\"uc536ce8b\"><span data-lake-id=\"ua862ec59\" id=\"ua862ec59\">Win32 并不是非常统一的或有一致的接口。其主要原因是由于 Win32 需要与早期的在 Windows 3.x 中使用的 16 位接口向后兼容。</span></p><p data-lake-id=\"uc140590b\" id=\"uc140590b\"><span data-lake-id=\"u96ae9c2d\" id=\"u96ae9c2d\">Windows 中没有类似 UNIX 中的进程层次，所以不存在父进程和子进程的概念。在进程创建之后，创建者和被创建者是平等的。</span></p><h3 data-lake-id=\"InlC7\" id=\"InlC7\"><span data-lake-id=\"ude3c4162\" id=\"ude3c4162\">23. 操作系统结构</span></h3><p data-lake-id=\"ub35dfb39\" id=\"ub35dfb39\"><span data-lake-id=\"u35fc933b\" id=\"u35fc933b\">单体结构、层次式结构、微内核、客户机-服务器模式、虚拟机、外核、</span></p><h3 data-lake-id=\"ehAj7\" id=\"ehAj7\"><span data-lake-id=\"u7a3995a5\" id=\"u7a3995a5\">24. 微内核的概念</span></h3><p data-lake-id=\"ucb4d29cb\" id=\"ucb4d29cb\"><span data-lake-id=\"udc3b9699\" id=\"udc3b9699\">在微内核设计背后的思想是，为了实现高可靠性，将操作系统划分成小的、良好定义的模块，只有其中一个模块——微内核——运行在内核态上，其余的模块，由于功能相对弱些，则作为普通用户进程运行。特别地，由于把每个设备驱动和文件系统分别作为普通用户进程，这些模块中的错误虽然会使这些模块崩溃，但是不会使得整个系统死机。</span></p><h3 data-lake-id=\"WdGLK\" id=\"WdGLK\"><span data-lake-id=\"u2a5ea750\" id=\"u2a5ea750\">25. 机制与策略分离原则</span></h3><p data-lake-id=\"ucbd7d320\" id=\"ucbd7d320\"><span data-lake-id=\"ua180d6fd\" id=\"ua180d6fd\">策略指的是做什么，机制指的是怎么做。例如一个比较简单的调度算法是，对每个进程赋予一个优先级，并让内核执行在具有最高优先级进程中可以运行的某个进程。这里，机制（在内核中）就是寻找最高优先级的进程并运行之。而策略（赋予进程以优先级）可以由用户态中的进程完成。在这个方式中，机制和策略是分离的，从而使系统内核变得更小。</span></p><h3 data-lake-id=\"nDEZJ\" id=\"nDEZJ\"><span data-lake-id=\"u9648d6d0\" id=\"u9648d6d0\">26. make 程序</span></h3><p data-lake-id=\"u604eac97\" id=\"u604eac97\"><span data-lake-id=\"u935a6951\" id=\"u935a6951\">在 UNIX 系统中，有个名为 make 的程序（其大量的变体如 gmake、pmake 等），它读入 Makefile ，该 Makefile 说明哪个文件与哪个文件相关。make 的作用是，在构建操作系统二进制码时，检查此刻需要哪个目标文件，而且对于每个文件，检查自从上次目标文件创建之后，是否有任何它依赖（代码和头文件）的文件已经被修改了。如果有，目标文件需要重新编译。在大型项目中，创建 Makefile 是一件容易出错的工作，所以出现了一些工具使该工作能够自动完成。</span></p><h2 data-lake-id=\"j7xfA\" id=\"j7xfA\"><span data-lake-id=\"u1579f9e7\" id=\"u1579f9e7\">第二章 进程与线程</span></h2><blockquote data-lake-id=\"u9452b74f\" id=\"u9452b74f\" class=\"lake-alert lake-alert-info\"><p data-lake-id=\"u48594c64\" id=\"u48594c64\"><span data-lake-id=\"u2b5277ee\" id=\"u2b5277ee\">进程和线程的区别：</span></p><ol list=\"u3f1e4434\"><li fid=\"u41d6f485\" data-lake-id=\"u8eafb43e\" id=\"u8eafb43e\"><span data-lake-id=\"uc2adf263\" id=\"uc2adf263\">定义不同，进程是执行中的一段程序，而一个进程中执行中的每个任务即为一个线程</span></li><li fid=\"u41d6f485\" data-lake-id=\"u4a80d62b\" id=\"u4a80d62b\"><span data-lake-id=\"ufdbc7cbd\" id=\"ufdbc7cbd\">一个线程只可以属于一个进程，但一个进程能包含多个线程</span></li><li fid=\"u41d6f485\" data-lake-id=\"ubdc2e41f\" id=\"ubdc2e41f\"><span data-lake-id=\"u51566033\" id=\"u51566033\">线程无地址空间，它包括在进程的地址空间里</span></li><li fid=\"u41d6f485\" data-lake-id=\"u33b2d2d3\" id=\"u33b2d2d3\"><span data-lake-id=\"u4207f00a\" id=\"u4207f00a\">线程的开销或代价比进程的小</span></li></ol></blockquote><h3 data-lake-id=\"Lvgru\" id=\"Lvgru\"><span data-lake-id=\"udf36fbea\" id=\"udf36fbea\">一、进程</span></h3><h4 data-lake-id=\"PG5g1\" id=\"PG5g1\"><span data-lake-id=\"u48bd5f66\" id=\"u48bd5f66\">1. 进程模型</span></h4><p data-lake-id=\"u7d63c3d4\" id=\"u7d63c3d4\"><span data-lake-id=\"ubd4e007d\" id=\"ubd4e007d\">在进程模型中，计算机上所有可运行的软件，通常也包括操作系统，被组织成若干顺序进程，简称进程。一个进程就是一个正在执行程序的实例，包括程序计数器、寄存器和变量的当前值。</span></p><p data-lake-id=\"u1bc60a09\" id=\"u1bc60a09\"><span data-lake-id=\"u1660a7cf\" id=\"u1660a7cf\">由于 CPU 在各进程之间来回快速切换，所以每个进程执行其运算的速度是不确定的。而且当同一进程再次运行时，其运算速度通常也不可再现。所以，在对进程编程时决不能对时序做任何确定的假设。</span></p><h4 data-lake-id=\"p1JHi\" id=\"p1JHi\"><span data-lake-id=\"u31fb4521\" id=\"u31fb4521\">2. 进程的创建</span></h4><p data-lake-id=\"uf31bac97\" id=\"uf31bac97\"><span data-lake-id=\"u829e205c\" id=\"u829e205c\">有 4 种主要事件导致进程的创建：</span></p><ul list=\"ubbfbb390\"><li fid=\"u00cb868b\" data-lake-id=\"u69362fb8\" id=\"u69362fb8\"><span data-lake-id=\"u62528d8a\" id=\"u62528d8a\">系统初始化</span><span data-lake-id=\"uba5c5fed\" id=\"uba5c5fed\">启动操作系统时，通常会创建若干个进程。其中有些是前台进程，也就是同用户（人类）交互并且替他们完成工作的那些进程。其他的是后台进程，这些进程与特定的用户没有关系，相反，却具有某些专门的功能。停留在后台处理诸如电子邮件、Web 页面、新闻、打印之类活动的进程称为守护进程</span></li><li fid=\"u00cb868b\" data-lake-id=\"ud4edf117\" id=\"ud4edf117\"><span data-lake-id=\"u546a27df\" id=\"u546a27df\">执行了正在运行的进程所调用的进程创建系统调用</span><span data-lake-id=\"ud54fa131\" id=\"ud54fa131\">一个正在运行的进程经常发出系统调用，以便创建一个或多个新进程协助其工作。在所要从事的工作可以容易地划分成若干相关的但没有相互作用的进程时，创建新的进程就特别有效果。</span></li><li fid=\"u00cb868b\" data-lake-id=\"udeec84c3\" id=\"udeec84c3\"><span data-lake-id=\"ud1be50f0\" id=\"ud1be50f0\">用户请求创建一个新进程</span><span data-lake-id=\"ud2ced257\" id=\"ud2ced257\">在交互式系统中，键入一个命令或者点（双）击一个图标就可以启动一个程序。这两个动作中的任何一个都会开始一个新的进程，并在其中运行所选择的程序。</span></li><li fid=\"u00cb868b\" data-lake-id=\"ue0d7ef13\" id=\"ue0d7ef13\"><span data-lake-id=\"u2a574b29\" id=\"u2a574b29\">一个批处理作业的初始化</span><span data-lake-id=\"u83509af9\" id=\"u83509af9\">最后一种创建进程的情形仅在大型机的批处理系统中应用。用户在这种系统中（可能是远程地）提交批处理作业。在操作系统认为有资源可运行另一个作业时，它创建一个新的进程，并运行其输入队列中的下一个作业。</span></li></ul><p data-lake-id=\"u2d0b1f08\" id=\"u2d0b1f08\"><span data-lake-id=\"u869dc41a\" id=\"u869dc41a\">在 UNIX 系统中，只有一个系统调用可以用来创建新进程：fork。在调用了 fork 后，这两个进程（父进程和子进程）拥有相同的存储映像、同样的环境字符串和同样的打开文件。</span></p><p data-lake-id=\"u7e872729\" id=\"u7e872729\"><span data-lake-id=\"u6d9f4b30\" id=\"u6d9f4b30\">在 Windows 中，一个 Win32 函数调用 CreateProcess 既处理进程的创建，也负责把正确的程序装入新的进程。</span></p><p data-lake-id=\"uc20d2a43\" id=\"uc20d2a43\"><span data-lake-id=\"u265130a3\" id=\"u265130a3\">在 UNIX 和 Windows 中，进程创建之后，父进程和子进程有各自不同的地址空间。如果其中某个进程在其地址空间中修改了一个字，这个修改对其他进程而言是不可见的。</span></p><h4 data-lake-id=\"fT5KH\" id=\"fT5KH\"><span data-lake-id=\"uba2453e1\" id=\"uba2453e1\">3. 进程的终止</span></h4><p data-lake-id=\"uba7933cb\" id=\"uba7933cb\"><span data-lake-id=\"ua30aa069\" id=\"ua30aa069\">进程在创建之后，它开始运行，完成其工作。但永恒是不存在的，进程也一样。迟早这个新的进程会终止，通常由下列条件引起：</span></p><ul list=\"u169013db\"><li fid=\"u86f5f4d1\" data-lake-id=\"u58a3f73d\" id=\"u58a3f73d\"><span data-lake-id=\"uddc041cb\" id=\"uddc041cb\">正常退出（自愿的）</span><span data-lake-id=\"ubacb26c3\" id=\"ubacb26c3\">多数进程是由于完成了它们的工作而终止。在 UNIX 中该调用是 exit，而在 Windows 中，相关的调用是 ExitProcess 。</span></li><li fid=\"u86f5f4d1\" data-lake-id=\"u6e2d9745\" id=\"u6e2d9745\"><span data-lake-id=\"u86e8ee9d\" id=\"u86e8ee9d\">出错退出（自愿的）</span><span data-lake-id=\"ub5023d40\" id=\"ub5023d40\">进程终止的第二个原因是进程发现了严重错误。</span></li><li fid=\"u86f5f4d1\" data-lake-id=\"u0ab95555\" id=\"u0ab95555\"><span data-lake-id=\"u7862c529\" id=\"u7862c529\">严重错误（非自愿）</span><span data-lake-id=\"u69386856\" id=\"u69386856\">进程终止的第三个原因是由进程引起的错误，通常是由于程序中的错误所致。</span></li><li fid=\"u86f5f4d1\" data-lake-id=\"uad362f32\" id=\"uad362f32\"><span data-lake-id=\"ud573ea56\" id=\"ud573ea56\">被其他进程杀死（非自愿）</span><span data-lake-id=\"u32a189ab\" id=\"u32a189ab\">第四种终止进程的原因是，某个进程执行一个系统调用通知操作系统杀死某个其他进程。在 UNIX 中，这个系统调用是 kill 。在 Win32 中对应的函数是 TerminateProcess 。</span></li></ul><h4 data-lake-id=\"uSyGq\" id=\"uSyGq\"><span data-lake-id=\"u9258bbbd\" id=\"u9258bbbd\">4. 进程的层次结构</span></h4><p data-lake-id=\"u93a6c81a\" id=\"u93a6c81a\"><span data-lake-id=\"u907fa493\" id=\"u907fa493\">某些系统中，当进程创建了另一个进程后，父进程和子进程就以某种形式继续保持关联。子进程自身可以创建更多的进程，组成一个进程的层次结构。</span></p><p data-lake-id=\"ub552b8d3\" id=\"ub552b8d3\"><span data-lake-id=\"ud3127c47\" id=\"ud3127c47\">在 UNIX 中，进程和它的所有子女以及后裔共同组成一个进程组。</span></p><p data-lake-id=\"u261f9333\" id=\"u261f9333\"><span data-lake-id=\"u9beb188b\" id=\"u9beb188b\">在 Windows 中没有进程层次的概念，所有的进程都是地位相同的。惟一类似于进程层次的暗示是在创建进程的时侯，父进程得到一个特别的令牌（称为句柄），该句柄可以用来控制子进程。但是，它有权把这个令牌传送给某个其他进程，这样就不存在进程层次了。</span></p><h4 data-lake-id=\"oopnq\" id=\"oopnq\"><span data-lake-id=\"ub16b7085\" id=\"ub16b7085\">5. UNIX 启动时的初始化</span></h4><p data-lake-id=\"u524ce08f\" id=\"u524ce08f\"><span data-lake-id=\"u8efc5a73\" id=\"u8efc5a73\">一个称为 init 的特殊进程出现在启动映像中。当它开始运行时，读入一个说明终端数量的文件。接着，为每个终端创建一个新进程。这些进程等待用户登录。如果有一个用户登录成功，该登录进程就执行一个 shell 准备接收命令。所接收的这些命令会启动更多的进程，以此类推。这样，在整个系统中，所有的进程都属于以 init 为根的一棵树。</span></p><h4 data-lake-id=\"l9M3e\" id=\"l9M3e\"><span data-lake-id=\"u230ef83b\" id=\"u230ef83b\">6. 进程的状态</span></h4><p data-lake-id=\"ue17dd655\" id=\"ue17dd655\"><span data-lake-id=\"u42180a49\" id=\"u42180a49\">进程存在三种状态：</span></p><ul list=\"uc6af3320\"><li fid=\"u139822ec\" data-lake-id=\"uaede1e56\" id=\"uaede1e56\"><span data-lake-id=\"ud7e2410f\" id=\"ud7e2410f\">运行态（该时刻进程实际占用 CPU）。</span></li><li fid=\"u139822ec\" data-lake-id=\"ub63355bc\" id=\"ub63355bc\"><span data-lake-id=\"uc18c2736\" id=\"uc18c2736\">就绪态（可运行，但因为其他进程正在运行而暂时停止）。</span></li><li fid=\"u139822ec\" data-lake-id=\"u86e45a20\" id=\"u86e45a20\"><span data-lake-id=\"u8dc56659\" id=\"u8dc56659\">阻塞态（除非某种外部事件发生，否则进程不能运行）。</span></li></ul><p data-lake-id=\"u49e1d097\" id=\"u49e1d097\"><span data-lake-id=\"u6799b706\" id=\"u6799b706\">状态间的转化关系为</span></p><p data-lake-id=\"u6bb7d483\" id=\"u6bb7d483\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2022%2Fpng%2F732231%2F1647358712362-efbdf1ad-4bb6-4949-bb30-49aa99ea601b.png%22%2C%22taskId%22%3A%22u28adba4d-0f2b-4fdc-b11b-46974d56566%22%2C%22clientId%22%3A%22u5297893b-ed7c-4%22%2C%22originalType%22%3A%22url%22%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A72838%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A720%2C%22originHeight%22%3A242%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%221.%E8%BF%9B%E7%A8%8B%E4%B8%BA%E7%AD%89%E5%BE%85%E8%BE%93%E5%85%A5%E8%80%8C%E9%98%BB%E5%A1%9E%20%E8%BF%90%E8%A1%8C%202.%E8%B0%83%E5%BA%A6%E7%A8%8B%E5%BA%8F%E9%80%89%E6%8B%A9%E5%8F%A6%E4%B8%80%E4%B8%AA%E8%BF%9B%E7%A8%8B%203.%E8%B0%83%E5%BA%A6%E7%A8%8B%E5%BA%8F%E9%80%89%E6%8B%A9%E8%BF%99%E4%B8%AA%E8%BF%9B%E7%A8%8B%202%203%204.%E5%87%BA%E7%8E%B0%E6%9C%89%E6%95%88%E8%BE%93%E5%85%A5%20%E5%B0%B1%E7%BB%AA%20%E9%98%BB%E5%A1%9E%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A404.08398%2C%22y%22%3A40.46559%2C%22width%22%3A244.32862%2C%22height%22%3A22.628614%2C%22text%22%3A%221.%E8%BF%9B%E7%A8%8B%E4%B8%BA%E7%AD%89%E5%BE%85%E8%BE%93%E5%85%A5%E8%80%8C%E9%98%BB%E5%A1%9E%22%7D%2C%7B%22x%22%3A191.44124%2C%22y%22%3A59.21738%2C%22width%22%3A45.81259%2C%22height%22%3A23.38353%2C%22text%22%3A%22%E8%BF%90%E8%A1%8C%22%7D%2C%7B%22x%22%3A402.47794%2C%22y%22%3A72.94134%2C%22width%22%3A269.30946000000006%2C%22height%22%3A21.577030000000008%2C%22text%22%3A%222.%E8%B0%83%E5%BA%A6%E7%A8%8B%E5%BA%8F%E9%80%89%E6%8B%A9%E5%8F%A6%E4%B8%80%E4%B8%AA%E8%BF%9B%E7%A8%8B%22%7D%2C%7B%22x%22%3A403.29367%2C%22y%22%3A107.33164%2C%22width%22%3A245.20523000000003%2C%22height%22%3A22.077680000000015%2C%22text%22%3A%223.%E8%B0%83%E5%BA%A6%E7%A8%8B%E5%BA%8F%E9%80%89%E6%8B%A9%E8%BF%99%E4%B8%AA%E8%BF%9B%E7%A8%8B%22%7D%2C%7B%22x%22%3A312.70096%2C%22y%22%3A109.18692%2C%22width%22%3A14.476470000000006%2C%22height%22%3A21.848889999999997%2C%22text%22%3A%222%22%7D%2C%7B%22x%22%3A194.72467%2C%22y%22%3A109.13031%2C%22width%22%3A16.596360000000004%2C%22height%22%3A20.869710000000012%2C%22text%22%3A%223%22%7D%2C%7B%22x%22%3A405.18875%2C%22y%22%3A140.95418%2C%22width%22%3A152.96084999999994%2C%22height%22%3A21.272429999999986%2C%22text%22%3A%224.%E5%87%BA%E7%8E%B0%E6%9C%89%E6%95%88%E8%BE%93%E5%85%A5%22%7D%2C%7B%22x%22%3A303.676%2C%22y%22%3A162.63391%2C%22width%22%3A43.68814000000003%2C%22height%22%3A22.03349%2C%22text%22%3A%22%E5%B0%B1%E7%BB%AA%22%7D%2C%7B%22x%22%3A75.79328%2C%22y%22%3A164.61707%2C%22width%22%3A44.40652%2C%22height%22%3A20.438549999999992%2C%22text%22%3A%22%E9%98%BB%E5%A1%9E%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23f4f4f4%22%2C%22id%22%3A%22u18e9b4fa%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><h4 data-lake-id=\"eAGG7\" id=\"eAGG7\"><span data-lake-id=\"uff23ba98\" id=\"uff23ba98\">7. 进程的实现</span></h4><p data-lake-id=\"u63c254b4\" id=\"u63c254b4\"><span data-lake-id=\"uc5af6fa8\" id=\"uc5af6fa8\">为了实现进程模型，操作系统维护着一张表格（一个结构数组），即进程表。每个进程占用一个进程表项。（也可称为进程控制块。）该表项包含了进程状态的重要信息，包括程序计数器、堆栈指针、内存分配状况、所打开文件的状态、账号和调度信息，以及其他在进程由运行态转换到就绪态或阻塞态时必须保存的信息，从而保证该进程随后能再次启动，就像从未被中断过一样。</span></p><h4 data-lake-id=\"BkZMX\" id=\"BkZMX\"><span data-lake-id=\"u2df38d95\" id=\"u2df38d95\">8. 多道程序设计模型</span></h4><p data-lake-id=\"u856a6118\" id=\"u856a6118\"><span data-lake-id=\"uc2920696\" id=\"uc2920696\">采用多道程序设计可以提高 CPU 的利用率。从概率的角度来看 CPU 的利用率。假设一个进程等待 I/O 操作的时间与其停留在内存中时间的比为 。当内存中同时有 n 个进程时，则所有 n 个进程都在等待 I/O（此时 CPU 空转）的概率是 pⁿ 。CPU 的利用率由下面的公式给出：</span></p><p data-lake-id=\"ud15bb994\" id=\"ud15bb994\"><span data-lake-id=\"u9ca32b32\" id=\"u9ca32b32\">CPU 利用率 = 1-pⁿ</span></p><h3 data-lake-id=\"Fp7QL\" id=\"Fp7QL\"><span data-lake-id=\"u2fb4c25e\" id=\"u2fb4c25e\">二、线程</span></h3><h4 data-lake-id=\"wBrFZ\" id=\"wBrFZ\"><span data-lake-id=\"u22d42d18\" id=\"u22d42d18\">1. 线程的使用原因</span></h4><p data-lake-id=\"u8f28f0f8\" id=\"u8f28f0f8\"><span data-lake-id=\"uf49d621d\" id=\"uf49d621d\">人们需要多线程的主要原因是，在许多应用中同时发生着多种活动。其中某些活动随着时间的推移会被阻塞。通过将这些应用程序分解成可以准并行运行的多个顺序线程，程序设计模型会变得更简单。</span></p><p data-lake-id=\"udb4a6962\" id=\"udb4a6962\"><span data-lake-id=\"u307682ee\" id=\"u307682ee\">第二个关于需要多线程的理由是，由于线程比进程更轻量级，所以它们比进程更容易（即更快）创建，也更容易撤销。在许多系统中，创建一个线程较创建一个进程要快 10 ～ 100 倍。</span></p><p data-lake-id=\"u7bc3e777\" id=\"u7bc3e777\"><span data-lake-id=\"u84ff76b5\" id=\"u84ff76b5\">需要多线程的第三个原因涉及性能方面的讨论。若多个线程都是 CPU 密集型的，那么并不能获得性能上的增强，但是如果存在着大量的计算和大量的 I/O 处理，拥有多个线程允许这些活动彼此重叠进行，从而会加快应用程序执行的速度。</span></p><h4 data-lake-id=\"jsY1c\" id=\"jsY1c\"><span data-lake-id=\"uf8de84bf\" id=\"uf8de84bf\">2. 线程模型</span></h4><p data-lake-id=\"u6bacca0f\" id=\"u6bacca0f\"><span data-lake-id=\"u717c541f\" id=\"u717c541f\">进程拥有一个执行的线程，通常简写为线程。在线程中有一个程序计数器，用来记录接着要执行哪一条指令。线程拥有寄存器，用来保存线程当前的工作变量。线程还拥有一个堆栈，用来记录执行历史，其中每一帧保存了一个已调用的但是还没有从中返回的过程。尽管线程必须在某个进程中执行，但是线程和它的进程是不同的概念，并且可以分别处理。进程用于把资源集中到一起，而线程则是在 CPU 上被调度执行的实体。</span></p><p data-lake-id=\"ufd1b8f53\" id=\"ufd1b8f53\"><span data-lake-id=\"ua2b284bc\" id=\"ua2b284bc\">线程给进程模型增加了一项内容，即在同一个进程环境中，允许彼此之间有较大独立性的多个线程执行。在同一个进程中并行运行多个线程，是对在同一台计算机上并行运行多个进程的模拟。</span></p><h4 data-lake-id=\"NZKHl\" id=\"NZKHl\"><span data-lake-id=\"ubaa446ca\" id=\"ubaa446ca\">3. 在用户空间中实现线程</span></h4><p data-lake-id=\"u87629d66\" id=\"u87629d66\"><span data-lake-id=\"ud78c5da6\" id=\"ud78c5da6\">把整个线程包放在用户空间中，内核对线程包一无所知。从内核角度考虑，就是按正常的方式管理，即单线程进程。线程在一个运行时系统的顶部运行，这个运行时系统是一个管理线程的过程的集合。我们已经见过其中的四个过程：pthread_create ，pthread_exit ，pthread_join 和 pthread_yield 。不过，一般还会有更多的过程。</span></p><p data-lake-id=\"u0357b8af\" id=\"u0357b8af\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2022%2Fpng%2F732231%2F1647358712337-dd2dfcd4-41bf-4232-84f1-5d53b1da4fa3.png%22%2C%22taskId%22%3A%22u6bf840ab-28c7-455f-8f3b-ed23fa4f816%22%2C%22clientId%22%3A%22u5297893b-ed7c-4%22%2C%22originalType%22%3A%22url%22%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A54612%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A427%2C%22originHeight%22%3A324%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%E7%BA%BF%E7%A8%8B%20%E8%BF%9B%E7%A8%8B%20%E7%94%A8%E6%88%B7%E7%A9%BA%E9%97%B4%20%E5%86%85%E6%A0%B8%E7%A9%BA%E9%97%B4%20%E5%86%85%E6%A0%B8%20%E8%BF%90%E8%A1%8C%E6%97%B6%E7%B3%BB%E7%BB%9F%20%E7%BA%BF%E7%A8%8B%E8%A1%A8%20%E8%BF%9B%E7%A8%8B%E8%A1%A8%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A232.18272%2C%22y%22%3A25.275818%2C%22width%22%3A34.93242000000001%2C%22height%22%3A16.216868999999996%2C%22text%22%3A%22%E7%BA%BF%E7%A8%8B%22%7D%2C%7B%22x%22%3A136.9023%2C%22y%22%3A29.63157%2C%22width%22%3A34.567499999999995%2C%22height%22%3A16.239141999999998%2C%22text%22%3A%22%E8%BF%9B%E7%A8%8B%22%7D%2C%7B%22x%22%3A30.184004%2C%22y%22%3A145.63051%2C%22width%22%3A67.504446%2C%22height%22%3A18.303620000000024%2C%22text%22%3A%22%E7%94%A8%E6%88%B7%E7%A9%BA%E9%97%B4%22%7D%2C%7B%22x%22%3A31.174974%2C%22y%22%3A234.33131%2C%22width%22%3A67.140996%2C%22height%22%3A16.63391999999999%2C%22text%22%3A%22%E5%86%85%E6%A0%B8%E7%A9%BA%E9%97%B4%22%7D%2C%7B%22x%22%3A178.99577%2C%22y%22%3A235.32898%2C%22width%22%3A32.93935999999999%2C%22height%22%3A16.84684999999999%2C%22text%22%3A%22%E5%86%85%E6%A0%B8%22%7D%2C%7B%22x%22%3A71.906166%2C%22y%22%3A288.61783%2C%22width%22%3A84.59529400000001%2C%22height%22%3A17.34267%2C%22text%22%3A%22%E8%BF%90%E8%A1%8C%E6%97%B6%E7%B3%BB%E7%BB%9F%22%7D%2C%7B%22x%22%3A187.25276%2C%22y%22%3A289.78885%2C%22width%22%3A50.98129%2C%22height%22%3A17.31034999999997%2C%22text%22%3A%22%E7%BA%BF%E7%A8%8B%E8%A1%A8%22%7D%2C%7B%22x%22%3A290.4909%2C%22y%22%3A291.71365%2C%22width%22%3A51.446259999999995%2C%22height%22%3A17.06605000000002%2C%22text%22%3A%22%E8%BF%9B%E7%A8%8B%E8%A1%A8%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23f3f3f3%22%2C%22id%22%3A%22u42c4f22e%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><p data-lake-id=\"u7f5aff2d\" id=\"u7f5aff2d\"><span data-lake-id=\"u3f830311\" id=\"u3f830311\">在用户空间管理线程时，每个进程需要有其专用的线程表，用来跟踪该进程中的线程。这些表和内核中的进程表类似。该线程表由运行时系统管理。当一个线程转换到就绪状态或阻塞状态时，在该线程表中存放重新启动该线程所需的信息，与内核在进程表中存放进程的信息完全一样。</span></p><p data-lake-id=\"u15e22a76\" id=\"u15e22a76\"><span data-lake-id=\"ucdf937ca\" id=\"ucdf937ca\">优点</span></p><ol list=\"u1fcfdb53\"><li fid=\"u65d8df73\" data-lake-id=\"ua0026a63\" id=\"ua0026a63\"><span data-lake-id=\"ub8bf1b0e\" id=\"ub8bf1b0e\">用户级线程包可以在不支持线程的操作系统上实现。</span></li><li fid=\"u65d8df73\" data-lake-id=\"udda9682b\" id=\"udda9682b\"><span data-lake-id=\"u328e03f7\" id=\"u328e03f7\">线程的切换可以在几条指令内完成。进行类似于这样的线程切换至少比陷入内核要快一个数量级（或许更多）。</span></li><li fid=\"u65d8df73\" data-lake-id=\"u5a0043ee\" id=\"u5a0043ee\"><span data-lake-id=\"u06ef7be7\" id=\"u06ef7be7\">保存线程状态的过程和调度程序都只是本地过程，所以启动它们比进行内核调用效率更高。另一方面，不需要陷阱，不需要上下文切换，也不需要对内存高速缓存进行刷新，这就使得线程调度非常快捷。</span></li><li fid=\"u65d8df73\" data-lake-id=\"u6246b6ba\" id=\"u6246b6ba\"><span data-lake-id=\"u0e64fc42\" id=\"u0e64fc42\">它允许每个进程有自己定制的调度算法。</span></li></ol><p data-lake-id=\"u4ab01e0e\" id=\"u4ab01e0e\"><span data-lake-id=\"u99be08bf\" id=\"u99be08bf\">缺点</span></p><ol list=\"ufb4578a7\"><li fid=\"u27b037a2\" data-lake-id=\"u8dfa62ee\" id=\"u8dfa62ee\"><span data-lake-id=\"ue4dc6398\" id=\"ue4dc6398\">第一个问题是如何实现阻塞系统调用。假设在还没有任何击键之前，一个线程读取键盘。让该线程实际进行该系统调用是不可接受的，因为这会停止所有的线程。</span></li><li fid=\"u27b037a2\" data-lake-id=\"u7e4ab763\" id=\"u7e4ab763\"><span data-lake-id=\"u043b2678\" id=\"u043b2678\">页面故障问题。如果有一个线程引起页面故障，内核由于甚至不知道有线程存在，通常会把整个进程阻塞直到磁盘 I/O 完成为止，尽管其他的线程是可以运行的。</span></li><li fid=\"u27b037a2\" data-lake-id=\"uad30ed64\" id=\"uad30ed64\"><span data-lake-id=\"ucf3b8f5f\" id=\"ucf3b8f5f\">如果一个线程开始运行，那么在该进程中的其他线程就不能运行，除非第一个线程自动放弃 CPU 。</span></li><li fid=\"u27b037a2\" data-lake-id=\"ua97b1af9\" id=\"ua97b1af9\"><span data-lake-id=\"udd55cb80\" id=\"udd55cb80\">通常在经常发生线程阻塞的应用中才希望使用多个线程。对于那些基本上是 CPU 密集型而且极少有阻塞的应用程序而言，没有很大的意义。</span></li></ol><h4 data-lake-id=\"fNxP7\" id=\"fNxP7\"><span data-lake-id=\"u11930c6f\" id=\"u11930c6f\">4. 在内核中实现线程</span></h4><p data-lake-id=\"ua2587c2e\" id=\"ua2587c2e\"><span data-lake-id=\"ub58e3657\" id=\"ub58e3657\">在内核中实现线程时，内核中有用来记录系统中所有线程的线程表。当某个线程希望创建一个新线程或撤销一个已有线程时，它进行一个系统调用，这个系统调用通过对线程表的更新完成线程创建或撤销工作。内核的线程表保存了每个线程的寄存器、状态和其他信息。</span></p><p data-lake-id=\"ube222eef\" id=\"ube222eef\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2022%2Fpng%2F732231%2F1647358712320-eb583e1f-5f24-4fda-b9c9-2aa6d5757e06.png%22%2C%22taskId%22%3A%22u7f984090-3392-4a28-9556-996cccd21be%22%2C%22clientId%22%3A%22u5297893b-ed7c-4%22%2C%22originalType%22%3A%22url%22%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A41561%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A345%2C%22originHeight%22%3A331%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%E8%BF%9B%E7%A8%8B%20%E7%BA%BF%E7%A8%8B%20%E5%86%85%E6%A0%B8%20%E7%BA%BF%E7%A8%8B%E8%A1%A8%20%E8%BF%9B%E7%A8%8B%E8%A1%A8%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A64.092155%2C%22y%22%3A31.95933%2C%22width%22%3A34.69410499999999%2C%22height%22%3A16.784554999999997%2C%22text%22%3A%22%E8%BF%9B%E7%A8%8B%22%7D%2C%7B%22x%22%3A150.18822%2C%22y%22%3A33.623005%2C%22width%22%3A35.76607999999999%2C%22height%22%3A17.218094999999998%2C%22text%22%3A%22%E7%BA%BF%E7%A8%8B%22%7D%2C%7B%22x%22%3A124.27396%2C%22y%22%3A233.07024%2C%22width%22%3A34.35643%2C%22height%22%3A17.684559999999976%2C%22text%22%3A%22%E5%86%85%E6%A0%B8%22%7D%2C%7B%22x%22%3A220.73724%2C%22y%22%3A290.6955%2C%22width%22%3A50.51221000000001%2C%22height%22%3A16.498199999999997%2C%22text%22%3A%22%E7%BA%BF%E7%A8%8B%E8%A1%A8%22%7D%2C%7B%22x%22%3A142.8824%2C%22y%22%3A293.7283%2C%22width%22%3A51.41618%2C%22height%22%3A17.786130000000014%2C%22text%22%3A%22%E8%BF%9B%E7%A8%8B%E8%A1%A8%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23f5f5f5%22%2C%22id%22%3A%22u2882dbda%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><p data-lake-id=\"u612e3e83\" id=\"u612e3e83\"><span data-lake-id=\"u3aa97eb9\" id=\"u3aa97eb9\">所有能够阻塞线程的调用都以系统调用的形式实现，这与运行时系统过程相比，代价是相当可观的。当一个线程阻塞时，内核根据其选择，可以运行同一个进程中的另一个线程（若有一个就绪线程）或者运行另一个进程中的线程。而在用户级线程中，运行时系统始终运行自己进程中的线程，直到内核剥夺它的 CPU （或者没有可运行的线程存在了）为止。</span></p><h4 data-lake-id=\"tILlW\" id=\"tILlW\"><span data-lake-id=\"ucb66377e\" id=\"ucb66377e\">5. 混合实现</span></h4><p data-lake-id=\"u6421fc2d\" id=\"u6421fc2d\"><span data-lake-id=\"ua426e3dd\" id=\"ua426e3dd\">人们已经研究了各种试图将用户级线程的优点和内核级线程的优点结合起来的方法。一种方法是使用内核级线程，然后将用户级线程与某些或者全部内核线程多路复用起来。</span></p><p data-lake-id=\"ua8058da1\" id=\"ua8058da1\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2022%2Fpng%2F732231%2F1647358713326-82a10807-9e2e-47a7-bc36-e329b6ecd6f1.png%22%2C%22taskId%22%3A%22uc23b55bc-ae5f-4001-82b4-fabe1bb7b5b%22%2C%22clientId%22%3A%22u5297893b-ed7c-4%22%2C%22originalType%22%3A%22url%22%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A68960%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A623%2C%22originHeight%22%3A405%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%E5%A4%9A%E7%94%A8%E6%88%B7%E7%BA%BF%E7%A8%8B%E5%AF%B9%E5%BA%94%E4%B8%80%E4%B8%AA%E5%86%85%E6%A0%B8%E7%BA%BF%E7%A8%8B%20%E7%94%A8%E6%88%B7%20%E7%A9%BA%E9%97%B4%20%E5%86%85%E6%A0%B8%20%E5%86%85%E6%A0%B8%20%E5%86%85%E6%A0%B8%E7%BA%BF%E7%A8%8B%20%E7%A9%BA%E9%97%B4%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A137.90378%2C%22y%22%3A33.947403%2C%22width%22%3A288.33716000000004%2C%22height%22%3A24.738738999999995%2C%22text%22%3A%22%E5%A4%9A%E7%94%A8%E6%88%B7%E7%BA%BF%E7%A8%8B%E5%AF%B9%E5%BA%94%E4%B8%80%E4%B8%AA%E5%86%85%E6%A0%B8%E7%BA%BF%E7%A8%8B%22%7D%2C%7B%22x%22%3A541.9888%2C%22y%22%3A162.03087%2C%22width%22%3A45.01120000000003%2C%22height%22%3A23.52063000000001%2C%22text%22%3A%22%E7%94%A8%E6%88%B7%22%7D%2C%7B%22x%22%3A543.14856%2C%22y%22%3A197.05598%2C%22width%22%3A44.54043999999999%2C%22height%22%3A22.81662%2C%22text%22%3A%22%E7%A9%BA%E9%97%B4%22%7D%2C%7B%22x%22%3A543.82947%2C%22y%22%3A290.23996%2C%22width%22%3A43.01162999999997%2C%22height%22%3A22.02170000000001%2C%22text%22%3A%22%E5%86%85%E6%A0%B8%22%7D%2C%7B%22x%22%3A112.18683%2C%22y%22%3A302.86005%2C%22width%22%3A42.70467000000001%2C%22height%22%3A21.27890000000002%2C%22text%22%3A%22%E5%86%85%E6%A0%B8%22%7D%2C%7B%22x%22%3A350.57227%2C%22y%22%3A309.74527%2C%22width%22%3A86.76229000000001%2C%22height%22%3A21.24543%2C%22text%22%3A%22%E5%86%85%E6%A0%B8%E7%BA%BF%E7%A8%8B%22%7D%2C%7B%22x%22%3A543.3564%2C%22y%22%3A322.31497%2C%22width%22%3A44.23299999999995%2C%22height%22%3A24.156469999999956%2C%22text%22%3A%22%E7%A9%BA%E9%97%B4%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23f7f7f7%22%2C%22id%22%3A%22u58aeb2bb%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><p data-lake-id=\"u1b8685a8\" id=\"u1b8685a8\"><span data-lake-id=\"ud51e7e3c\" id=\"ud51e7e3c\">采用这种方法，内核只识别内核级线程，并对其进行调度。其中一些内核级线程会被多个用户级线程多路复用。如同在没有多线程能力操作系统中某个进程中的用户级线程一样，可以创建、撤销和调度这些用户级线程。在这种模型中，每个内核级线程有一个可以轮流使用的用户级线程集合。</span></p><h4 data-lake-id=\"oyCQI\" id=\"oyCQI\"><span data-lake-id=\"u8e1f4fb6\" id=\"u8e1f4fb6\">6. 调度程序激活机制</span></h4><p data-lake-id=\"ub337e2d5\" id=\"ub337e2d5\"><span data-lake-id=\"ufdb4ce74\" id=\"ufdb4ce74\">调度程序激活工作的目标是模拟内核线程的功能，但是为线程包提供通常在用户空间中才能实现的更好的性能和更大的灵活性。</span></p><p data-lake-id=\"uc5592fba\" id=\"uc5592fba\"><span data-lake-id=\"ubb091c85\" id=\"ubb091c85\">使该机制工作的基本思路是，当内核了解到一个线程被阻塞之后，内核通知该进程的运行时系统，。内核通过在一个已知的起始地址启动运行时系统，从而发出了通知，这个机制称为上行调用。一旦如此激活，运行时系统就重新调度其线程。</span></p><p data-lake-id=\"u51485209\" id=\"u51485209\"><span data-lake-id=\"ubfb5699f\" id=\"ubfb5699f\">调度程序激活机制的一个目标是作为上行调用的信赖基础，这是一种违反分层次系统内在结构的概念。</span></p><h4 data-lake-id=\"biibT\" id=\"biibT\"><span data-lake-id=\"u3d4812c3\" id=\"u3d4812c3\">7. 弹出式线程</span></h4><p data-lake-id=\"u68ec4a9e\" id=\"u68ec4a9e\"><span data-lake-id=\"ua791973b\" id=\"ua791973b\">一个消息的到达导致系统创建一个处理该消息的线程，这种线程称为弹出式线程。</span></p><p data-lake-id=\"u845204f4\" id=\"u845204f4\"><span data-lake-id=\"u94b1be5e\" id=\"u94b1be5e\">弹出式线程的关键好处是，由于这种线程相当新，没有历史这样，就有可能快速创建这类线程。对该新线程指定所要处理的消息。使用弹出式线程的结果是，消息到达与处理开始之间的时间非常短。</span></p><h3 data-lake-id=\"e2CT7\" id=\"e2CT7\"><span data-lake-id=\"u88138203\" id=\"u88138203\">三、 进程间通信</span></h3><p data-lake-id=\"uecb6f1ec\" id=\"uecb6f1ec\"><span data-lake-id=\"u4c99d395\" id=\"u4c99d395\">进程间通信需要关注的三个问题：</span></p><ol list=\"u90a1e9f3\"><li fid=\"u07c78df3\" data-lake-id=\"u6d049fbc\" id=\"u6d049fbc\"><span data-lake-id=\"u3a64e075\" id=\"u3a64e075\">一个进程如何把信息传递给另一个。</span></li><li fid=\"u07c78df3\" data-lake-id=\"u06ad979b\" id=\"u06ad979b\"><span data-lake-id=\"u5bba1157\" id=\"u5bba1157\">如何确保两个或更多的进程在关键活动中不会出现交叉。</span></li><li fid=\"u07c78df3\" data-lake-id=\"u7f657f22\" id=\"u7f657f22\"><span data-lake-id=\"u566d14ea\" id=\"u566d14ea\">正确的顺序。</span></li></ol><h4 data-lake-id=\"JWPWY\" id=\"JWPWY\"><span data-lake-id=\"u4f535ba4\" id=\"u4f535ba4\">1. 竞争条件</span></h4><p data-lake-id=\"u4b920511\" id=\"u4b920511\"><span data-lake-id=\"ue4ce5035\" id=\"ue4ce5035\">两个或多个进程读写某些共享数据，而最后的结果取决于进程运行的精确时序，称为竞争条件。</span></p><h4 data-lake-id=\"wRfmm\" id=\"wRfmm\"><span data-lake-id=\"u196e2cdf\" id=\"u196e2cdf\">2. 临界区</span></h4><p data-lake-id=\"u00c690b7\" id=\"u00c690b7\"><span data-lake-id=\"ue7b019c8\" id=\"ue7b019c8\">在某些时候进程可能需要访问共享内存或共享文件，或执行另外一些会导致竞争的操作。我们把对共享内存进行访问的程序片段称作临界区域或临界区。如果我们能够适当地安排，使得两个进程不可能同时处于临界区中，就能够避免竞争条件。</span></p><p data-lake-id=\"ub61783ae\" id=\"ub61783ae\"><span data-lake-id=\"u66f818de\" id=\"u66f818de\">对于保证使用共享数据的并发进程能够正确和高效地进行协作，一个好的解决方案，需要满足以下 4 个条件：</span></p><ul list=\"u658134fa\"><li fid=\"uf6d4026f\" data-lake-id=\"u0cc4bb6f\" id=\"u0cc4bb6f\"><span data-lake-id=\"ud134e699\" id=\"ud134e699\">任何两个进程不能同时处于其临界区。</span></li><li fid=\"uf6d4026f\" data-lake-id=\"ueadcd025\" id=\"ueadcd025\"><span data-lake-id=\"u6182cb7a\" id=\"u6182cb7a\">不应对 CPU 的速度和数量做任何假设。</span></li><li fid=\"uf6d4026f\" data-lake-id=\"uc735b457\" id=\"uc735b457\"><span data-lake-id=\"uc6b955ca\" id=\"uc6b955ca\">临界区外运行的进程不得阻塞其他进程。</span></li><li fid=\"uf6d4026f\" data-lake-id=\"u38313e8d\" id=\"u38313e8d\"><span data-lake-id=\"u07772256\" id=\"u07772256\">不得使进程无限期等待进入临界区。</span></li></ul><h4 data-lake-id=\"ahFHj\" id=\"ahFHj\"><span data-lake-id=\"ud6d913a3\" id=\"ud6d913a3\">3. 忙等待的互斥</span></h4><h5 data-lake-id=\"cxNWI\" id=\"cxNWI\"><span data-lake-id=\"uc85addf7\" id=\"uc85addf7\">（1） 屏蔽中断</span></h5><p data-lake-id=\"ud09e254e\" id=\"ud09e254e\"><span data-lake-id=\"u956b5627\" id=\"u956b5627\">在单处理器系统中，最简单的方法是使每个进程在刚刚进入临界区后立即屏蔽所有中断，并在就要离开之前再打开中断。屏蔽中断后，时钟中断也被屏蔽。CPU 只有发生时钟中断或其他中断时才会进行进程切换，这样，在屏蔽中断之后 CPU 将不会被切换到其他进程。于是，一旦某个进程屏蔽中断之后，它就可以检查和修改共享内存，而不必担心其他进程介入。</span></p><p data-lake-id=\"u5b0044d4\" id=\"u5b0044d4\"><span data-lake-id=\"ua0b9c2b5\" id=\"ua0b9c2b5\">缺点：</span></p><ol list=\"uc4c794fe\"><li fid=\"uf240168c\" data-lake-id=\"ucc6ce6b2\" id=\"ucc6ce6b2\"><span data-lake-id=\"u17356fc9\" id=\"u17356fc9\">若一个进程屏蔽中断后不再打开中断，整个系统可能会因此终止。</span></li><li fid=\"uf240168c\" data-lake-id=\"u9d76f937\" id=\"u9d76f937\"><span data-lake-id=\"u2d34cc52\" id=\"u2d34cc52\">如果系统是多处理器（有两个或可能更多的处理器），则屏蔽中断仅仅对执行 disable 指令的那个 CPU 有效。其他 CPU 仍将继续运行，并可以访问共享内存。</span></li></ol><p data-lake-id=\"ue1d51a97\" id=\"ue1d51a97\"><span data-lake-id=\"ufb5017e1\" id=\"ufb5017e1\">但是对内核来说，当它在更新变量或列表的几条指令期间将中断屏蔽是很方便的。</span></p><p data-lake-id=\"ufceb5b13\" id=\"ufceb5b13\"><span data-lake-id=\"uc710761a\" id=\"uc710761a\">所以结论是：屏蔽中断对于操作系统本身而言是一项很有用的技术，但对于用户进程则不是一种合适的通用互斥机制。</span></p><h5 data-lake-id=\"EHbgm\" id=\"EHbgm\"><span data-lake-id=\"u4955b0fd\" id=\"u4955b0fd\">（2） 锁变量</span></h5><p data-lake-id=\"u4b16d252\" id=\"u4b16d252\"><span data-lake-id=\"udc1888ff\" id=\"udc1888ff\">设想有一个共享（锁）变量，其初始值为 0。当一个进程想进入其临界区时，它首先测试这把锁。如果该锁的值为 0，则该进程将其设置为 1 并进入临界区。若这把锁的值已经为 1，则该进程将等待直到其值变为 0。于是，0 就表示临界区内没有进程，1 表示已经有某个进程进入临界区。</span></p><p data-lake-id=\"ufe769e23\" id=\"ufe769e23\"><span data-lake-id=\"ubd71d940\" id=\"ubd71d940\">缺点：锁变量的读写不是原子操作，可能被其他进程中断</span></p><p data-lake-id=\"uf059431b\" id=\"uf059431b\"><span data-lake-id=\"u21b31ac8\" id=\"u21b31ac8\">假设一个进程读出锁变量的值并发现它为 0，而恰好在它将其值设置为 1 之前，另一个进程被调度运行，将该锁变量设置为 1。当第一个进程再次能运行时，它同样也将该锁设置为 1，则此时同时有两个进程进入临界区中。</span></p><h5 data-lake-id=\"yp4wE\" id=\"yp4wE\"><span data-lake-id=\"u53276966\" id=\"u53276966\">（3）严格轮换法</span></h5><p data-lake-id=\"ud07af71a\" id=\"ud07af71a\"><span data-lake-id=\"u08d99f56\" id=\"u08d99f56\">定义一个整型变量 turn ，初始值为 0，用于记录轮到哪个进程进入临界区，并检查或更新共享内存。开始时，进程 0 检查 turn ，发现其值为 0，于是进入临界区。进程 1 也发现其值为 0，所以在一个等待循环中不停地测试 turn ，看其值何时变为 1。连续测试一个变量直到某个值出现为止，称为忙等待。</span></p><p data-lake-id=\"ub821eca7\" id=\"ub821eca7\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2022%2Fpng%2F732231%2F1647358713260-965dfe7d-4bdd-468f-aef4-fd0bd6ef651b.png%22%2C%22taskId%22%3A%22u7f37aabb-320f-4aeb-9b3e-b1929e90192%22%2C%22clientId%22%3A%22u5297893b-ed7c-4%22%2C%22originalType%22%3A%22url%22%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A61161%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A739%2C%22originHeight%22%3A350%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22WHILE(TRUE)%20WHILE(TRUE)%20%2F*%E5%BE%AA%E7%8E%AF*%2F%20WHILE(TURN%20!-%200)%20WHILE(TURN%20!-1)%20%2F*%E5%BE%AA%E7%8E%AF*%2F%20CRITICAL_REGION()%3B%20CRITICAL_REGION()%3B%20TURN%201%3B%20TURN%200%20%3B%20NONCRITICAL-REGION()%3B%20NONCRITICAL_REGION()%3B%20B)%20A)%20%E5%9B%BE2-23%E4%B8%B4%E7%95%8C%E5%8C%BA%E9%97%AE%E9%A2%98%E7%9A%84%E4%B8%80%E7%A7%8D%E8%A7%A3%E6%B3%95(%E5%9C%A8%E4%B8%A4%E7%A7%8D%E6%83%85%E5%86%B5%E4%B8%8B%E8%AF%B7%E6%B3%A8%E6%84%8F%E5%88%86%E5%8F%B7%E7%BB%88%E6%AD%A2%E4%BA%86%20WHILE%E8%AF%AD%E5%8F%A5)%3AA%20%20)%E8%BF%9B%E7%A8%8B%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A395.0706%2C%22y%22%3A67.19977%2C%22width%22%3A115.25975%2C%22height%22%3A19.459035999999998%2C%22text%22%3A%22WHILE(TRUE)%22%7D%2C%7B%22x%22%3A77.80576%2C%22y%22%3A68.92519%2C%22width%22%3A112.40445999999999%2C%22height%22%3A17.510334%2C%22text%22%3A%22WHILE(TRUE)%22%7D%2C%7B%22x%22%3A596.29596%2C%22y%22%3A87.80451%2C%22width%22%3A80.94803999999999%2C%22height%22%3A16.591330000000013%2C%22text%22%3A%22%2F*%E5%BE%AA%E7%8E%AF*%2F%22%7D%2C%7B%22x%22%3A107.38401%2C%22y%22%3A88.24296%2C%22width%22%3A114.92629000000001%2C%22height%22%3A15.904646%2C%22text%22%3A%22WHILE(TURN%20!-%200)%22%7D%2C%7B%22x%22%3A423.18515%2C%22y%22%3A89.1388%2C%22width%22%3A111.32584999999995%2C%22height%22%3A15.458985999999996%2C%22text%22%3A%22WHILE(TURN%20!-1)%22%7D%2C%7B%22x%22%3A269.06027%2C%22y%22%3A92.586815%2C%22width%22%3A79.71953000000002%2C%22height%22%3A15.919984999999997%2C%22text%22%3A%22%2F*%E5%BE%AA%E7%8E%AF*%2F%22%7D%2C%7B%22x%22%3A105.36691%2C%22y%22%3A108.651855%2C%22width%22%3A127.65481999999999%2C%22height%22%3A16.740441000000004%2C%22text%22%3A%22CRITICAL_REGION()%3B%22%7D%2C%7B%22x%22%3A423.4298%2C%22y%22%3A109.52817%2C%22width%22%3A127.70636999999999%2C%22height%22%3A16.381079999999997%2C%22text%22%3A%22CRITICAL_REGION()%3B%22%7D%2C%7B%22x%22%3A104.99871%2C%22y%22%3A129.32082%2C%22width%22%3A64.57546%2C%22height%22%3A14.635860000000008%2C%22text%22%3A%22TURN%201%3B%22%7D%2C%7B%22x%22%3A422.64273%2C%22y%22%3A129.73389%2C%22width%22%3A66.33067000000005%2C%22height%22%3A14.928830000000005%2C%22text%22%3A%22TURN%200%20%3B%22%7D%2C%7B%22x%22%3A422.92575%2C%22y%22%3A149.36119%2C%22width%22%3A157.95578%2C%22height%22%3A17.975189999999998%2C%22text%22%3A%22NONCRITICAL-REGION()%3B%22%7D%2C%7B%22x%22%3A105.3031%2C%22y%22%3A149.61511%2C%22width%22%3A157.98440000000002%2C%22height%22%3A16.997330000000005%2C%22text%22%3A%22NONCRITICAL_REGION()%3B%22%7D%2C%7B%22x%22%3A537.1746%2C%22y%22%3A205.03038%2C%22width%22%3A16.493299999999977%2C%22height%22%3A15.354649999999992%2C%22text%22%3A%22B)%22%7D%2C%7B%22x%22%3A193.5379%2C%22y%22%3A207.03346%2C%22width%22%3A15.537359999999978%2C%22height%22%3A13.631079999999997%2C%22text%22%3A%22A)%22%7D%2C%7B%22x%22%3A57.131687%2C%22y%22%3A257.44168%2C%22width%22%3A642.2015630000001%2C%22height%22%3A21.70537999999999%2C%22text%22%3A%22%E5%9B%BE2-23%E4%B8%B4%E7%95%8C%E5%8C%BA%E9%97%AE%E9%A2%98%E7%9A%84%E4%B8%80%E7%A7%8D%E8%A7%A3%E6%B3%95(%E5%9C%A8%E4%B8%A4%E7%A7%8D%E6%83%85%E5%86%B5%E4%B8%8B%E8%AF%B7%E6%B3%A8%E6%84%8F%E5%88%86%E5%8F%B7%E7%BB%88%E6%AD%A2%E4%BA%86%22%7D%2C%7B%22x%22%3A230.35976%2C%22y%22%3A300.94434%2C%22width%22%3A294.94987%2C%22height%22%3A20.870329999999967%2C%22text%22%3A%22WHILE%E8%AF%AD%E5%8F%A5)%3AA%20%20)%E8%BF%9B%E7%A8%8B%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23f4f4f4%22%2C%22id%22%3A%22ua427d614%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><p data-lake-id=\"ub07fd46e\" id=\"ub07fd46e\"><span data-lake-id=\"u85162c86\" id=\"u85162c86\">只有在有理由认为等待时间是非常短的情形下，才使用忙等待。用于忙等待的锁，称为自旋锁（spin lock）。</span></p><p data-lake-id=\"ua8d7f963\" id=\"ua8d7f963\"><span data-lake-id=\"u41eb2936\" id=\"u41eb2936\">缺点：</span></p><ol list=\"u40e0fff3\"><li fid=\"u4bb2f65e\" data-lake-id=\"u80c2c6bd\" id=\"u80c2c6bd\"><span data-lake-id=\"uddca523d\" id=\"uddca523d\">采用忙等待的方式，会浪费 CPU 时间。</span></li><li fid=\"u4bb2f65e\" data-lake-id=\"u125f36e6\" id=\"u125f36e6\"><span data-lake-id=\"uec8d110d\" id=\"uec8d110d\">该方案要求两个进程严格地轮流进入它们的临界区，会造成一个临界区外运行的进程阻塞其他进程的情况。</span></li></ol><h5 data-lake-id=\"LDwBz\" id=\"LDwBz\"><span data-lake-id=\"ua52db814\" id=\"ua52db814\">（4）Peterson 解法</span></h5><p data-lake-id=\"u97ddeb3f\" id=\"u97ddeb3f\"><span data-lake-id=\"u9cfbdb57\" id=\"u9cfbdb57\">在使用共享变量（即进入其临界区）之前，各个进程使用其进程号 0 或 1 作为参数来调用 enter_region 。该调用在需要时将使进程等待，直到能安全地进入临界区。在完成对共享变量的操作之后，进程将调用 leave_region ，表示操作已完成，若其他的进程希望进入临界区，则现在就可以进入。</span></p><p data-lake-id=\"u1231b170\" id=\"u1231b170\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2022%2Fpng%2F732231%2F1647358713398-b5c57590-5982-4930-aa15-09d028a9432a.png%22%2C%22taskId%22%3A%22u60b7fcd6-150e-496e-9659-c0495dd551e%22%2C%22clientId%22%3A%22u5297893b-ed7c-4%22%2C%22originalType%22%3A%22url%22%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A188850%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A984%2C%22originHeight%22%3A603%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%23DEFINE%20FALSE%20012%20%23DEFINE%20TRUE%20%2F*%E8%BF%9B%E7%A8%8B%E6%95%B0%E9%87%8F*%2F%20%23DEFINE%20N%20%2F*%E7%8E%B0%E5%9C%A8%E8%BD%AE%E5%88%B0%E8%B0%81%3F*%2F%20INT%20TURN%3B%20INT%20INTERESTED%5BN%5D%3B%20*%E6%89%80%E6%9C%89%E5%80%BC%E5%88%9D%E5%A7%8B%E5%8C%96%E4%B8%BA0(FALSE)%20%2F*%E8%BF%9B%E7%A8%8B%E6%98%AF0%E6%88%961*%2F%20VOID%20ENTER-REGION(INT%20PROCESS)%3B%20%2F*%E5%85%B6%E4%BB%96%E8%BF%9B%E7%A8%8B%E5%8F%B7*%2F%20INT%20OTHER%3B%20%2F*%E5%8F%A6%E4%B8%80%E6%96%B9%E8%BF%9B%E7%A8%8B*%2F%20OTHER1PROCESS%3B%20%2F*%E8%A1%A8%E6%98%8E%E6%89%80%E6%84%9F%E5%85%B4%E8%B6%A3%E7%9A%84*%2F%20INTERESTED%5BPROCESS%5DTRUE%3B%20*%E8%AE%BE%E7%BD%AE%E6%A0%87%E5%BF%97*%2F%20TURNPROCESS%3B%20WHILE(TURN%202%20PROCESS%20%26%26INTERESTED%5BOTHER)%E4%BA%8C%20TRUE)%3B%2F*%E7%A9%BA%E8%AF%AD%E5%8F%A5%20%2F*%E8%BF%9B%E7%A8%8B%3A%E8%B0%81%E7%A6%BB%E5%BC%80%3F%20%E6%B0%B4%2F%20VOID%20LEAVE-REGION(INT%20PROCESS)%20*%E8%A1%A8%E7%A4%BA%E7%A6%BB%E5%BC%80%E4%B8%B4%E7%95%8C%E5%8C%BA*%2F%20INTERESTED%5BPROCESS%5DFALSE%3B%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A86.46272%2C%22y%22%3A35.341827%2C%22width%22%3A153.50225999999998%2C%22height%22%3A18.323947999999994%2C%22text%22%3A%22%23DEFINE%20FALSE%22%7D%2C%7B%22x%22%3A243.94673%2C%22y%22%3A36.126793%2C%22width%22%3A19.58332999999999%2C%22height%22%3A73.409717%2C%22text%22%3A%22012%22%7D%2C%7B%22x%22%3A86.485855%2C%22y%22%3A60.783516%2C%22width%22%3A140.70182499999999%2C%22height%22%3A19.043184000000004%2C%22text%22%3A%22%23DEFINE%20TRUE%22%7D%2C%7B%22x%22%3A567.81036%2C%22y%22%3A75.19379%2C%22width%22%3A144.80844000000002%2C%22height%22%3A21.711994999999987%2C%22text%22%3A%22%2F*%E8%BF%9B%E7%A8%8B%E6%95%B0%E9%87%8F*%2F%22%7D%2C%7B%22x%22%3A87.67526%2C%22y%22%3A86.56935%2C%22width%22%3A95.18981000000001%2C%22height%22%3A19.175095999999996%2C%22text%22%3A%22%23DEFINE%20N%22%7D%2C%7B%22x%22%3A569.46045%2C%22y%22%3A131.57729%2C%22width%22%3A188.71051%2C%22height%22%3A21.28530999999998%2C%22text%22%3A%22%2F*%E7%8E%B0%E5%9C%A8%E8%BD%AE%E5%88%B0%E8%B0%81%3F*%2F%22%7D%2C%7B%22x%22%3A85.892334%2C%22y%22%3A138.2912%2C%22width%22%3A77.29693599999999%2C%22height%22%3A19.238139999999987%2C%22text%22%3A%22INT%20TURN%3B%22%7D%2C%7B%22x%22%3A86.06303%2C%22y%22%3A163.55081%2C%22width%22%3A163.51267%2C%22height%22%3A22.63042999999999%2C%22text%22%3A%22INT%20INTERESTED%5BN%5D%3B%22%7D%2C%7B%22x%22%3A569.70776%2C%22y%22%3A163.93298%2C%22width%22%3A337.64324%2C%22height%22%3A21.666690000000017%2C%22text%22%3A%22*%E6%89%80%E6%9C%89%E5%80%BC%E5%88%9D%E5%A7%8B%E5%8C%96%E4%B8%BA0(FALSE)%22%7D%2C%7B%22x%22%3A568.3979%2C%22y%22%3A205.85046%2C%22width%22%3A164.68174999999997%2C%22height%22%3A19.895019999999988%2C%22text%22%3A%22%2F*%E8%BF%9B%E7%A8%8B%E6%98%AF0%E6%88%961*%2F%22%7D%2C%7B%22x%22%3A87.33714%2C%22y%22%3A213.40321%2C%22width%22%3A305.42354%2C%22height%22%3A25.11205000000001%2C%22text%22%3A%22VOID%20ENTER-REGION(INT%20PROCESS)%3B%22%7D%2C%7B%22x%22%3A568.27966%2C%22y%22%3A254.44441%2C%22width%22%3A164.72493999999995%2C%22height%22%3A23.182669999999973%2C%22text%22%3A%22%2F*%E5%85%B6%E4%BB%96%E8%BF%9B%E7%A8%8B%E5%8F%B7*%2F%22%7D%2C%7B%22x%22%3A133.79742%2C%22y%22%3A265.67627%2C%22width%22%3A90.46616%2C%22height%22%3A20.761230000000012%2C%22text%22%3A%22INT%20OTHER%3B%22%7D%2C%7B%22x%22%3A568.0754%2C%22y%22%3A315.3737%2C%22width%22%3A160.3889600000001%2C%22height%22%3A22.440050000000042%2C%22text%22%3A%22%2F*%E5%8F%A6%E4%B8%80%E6%96%B9%E8%BF%9B%E7%A8%8B*%2F%22%7D%2C%7B%22x%22%3A135.68947%2C%22y%22%3A317.74445%2C%22width%22%3A201.17918%2C%22height%22%3A20.002680000000055%2C%22text%22%3A%22OTHER1PROCESS%3B%22%7D%2C%7B%22x%22%3A568.6529%2C%22y%22%3A337.5186%2C%22width%22%3A212.14873999999998%2C%22height%22%3A22.232129999999984%2C%22text%22%3A%22%2F*%E8%A1%A8%E6%98%8E%E6%89%80%E6%84%9F%E5%85%B4%E8%B6%A3%E7%9A%84*%2F%22%7D%2C%7B%22x%22%3A135.16338%2C%22y%22%3A342.8631%2C%22width%22%3A282.80075999999997%2C%22height%22%3A21.718000000000018%2C%22text%22%3A%22INTERESTED%5BPROCESS%5DTRUE%3B%22%7D%2C%7B%22x%22%3A567.12646%2C%22y%22%3A363.18042%2C%22width%22%3A145.92924000000005%2C%22height%22%3A25.800449999999955%2C%22text%22%3A%22*%E8%AE%BE%E7%BD%AE%E6%A0%87%E5%BF%97*%2F%22%7D%2C%7B%22x%22%3A135.7902%2C%22y%22%3A371.31137%2C%22width%22%3A148.58894999999998%2C%22height%22%3A19.145749999999964%2C%22text%22%3A%22TURNPROCESS%3B%22%7D%2C%7B%22x%22%3A135.93552%2C%22y%22%3A395.34955%2C%22width%22%3A664.70065%2C%22height%22%3A20.421509999999955%2C%22text%22%3A%22WHILE(TURN%202%20PROCESS%20%26%26INTERESTED%5BOTHER)%E4%BA%8C%20TRUE)%3B%2F*%E7%A9%BA%E8%AF%AD%E5%8F%A5%22%7D%2C%7B%22x%22%3A581.2839%2C%22y%22%3A473.8451%2C%22width%22%3A173.1997%2C%22height%22%3A19.002740000000017%2C%22text%22%3A%22%2F*%E8%BF%9B%E7%A8%8B%3A%E8%B0%81%E7%A6%BB%E5%BC%80%3F%22%7D%2C%7B%22x%22%3A770.462%2C%22y%22%3A473.90942%2C%22width%22%3A20.22715000000005%2C%22height%22%3A17.04615000000001%2C%22text%22%3A%22%E6%B0%B4%2F%22%7D%2C%7B%22x%22%3A87.82218%2C%22y%22%3A473.60687%2C%22width%22%3A302.38172%2C%22height%22%3A22.95572999999996%2C%22text%22%3A%22VOID%20LEAVE-REGION(INT%20PROCESS)%22%7D%2C%7B%22x%22%3A579.90344%2C%22y%22%3A520.2272%2C%22width%22%3A212.00591999999995%2C%22height%22%3A22.32705999999996%2C%22text%22%3A%22*%E8%A1%A8%E7%A4%BA%E7%A6%BB%E5%BC%80%E4%B8%B4%E7%95%8C%E5%8C%BA*%2F%22%7D%2C%7B%22x%22%3A136.30066%2C%22y%22%3A520.7871%2C%22width%22%3A293.66888%2C%22height%22%3A24.520149999999944%2C%22text%22%3A%22INTERESTED%5BPROCESS%5DFALSE%3B%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23f3f3f3%22%2C%22id%22%3A%22ua675d282%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><h5 data-lake-id=\"MLBRa\" id=\"MLBRa\"><span data-lake-id=\"u5dd570c6\" id=\"u5dd570c6\">（5）TSL 指令</span></h5><p data-lake-id=\"ue4646917\" id=\"ue4646917\"><span data-lake-id=\"uad4885ab\" id=\"uad4885ab\">TSL 指令是硬件支持的一种方案，称为测试并加锁，它将一个内存字 lock 读到寄存器 RX 中，然后在该内存地址上存一个非零值。</span></p><p data-lake-id=\"ucaa0379a\" id=\"ucaa0379a\"><span data-lake-id=\"u26c26d64\" id=\"u26c26d64\">读字和写字操作保证是不可分割的，即该指令结束之前其他处理器均不允许访问该内存字。执行 TSL 指令的 CPU 将锁住内存总线，以禁止其他 CPU 在本指令结束之前访问内存。因此不会出现前面第二种方法锁变量的问题。</span></p><p data-lake-id=\"u50b68964\" id=\"u50b68964\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2022%2Fpng%2F732231%2F1647358713372-fd6d92e1-8855-433f-aef1-9d139c5d39e7.png%22%2C%22taskId%22%3A%22u3598648e-f9e6-4dad-b542-4e842166471%22%2C%22clientId%22%3A%22u5297893b-ed7c-4%22%2C%22originalType%22%3A%22url%22%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A94936%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A944%2C%22originHeight%22%3A325%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22searchocrLocations%22%3A%5B%7B%22x%22%3A66.1251%2C%22y%22%3A28.196764%2C%22width%22%3A127.5763%2C%22height%22%3A20.115212999999997%2C%22text%22%3A%22ENTER_REGION%3A%22%7D%2C%7B%22x%22%3A113.702385%2C%22y%22%3A49.401497%2C%22width%22%3A213.225345%2C%22height%22%3A22.694993000000004%2C%22text%22%3A%22TSL%20REGISTER%2CLOCK%22%7D%2C%7B%22x%22%3A473.44104%2C%22y%22%3A51.35197%2C%22width%22%3A295.81046%2C%22height%22%3A23.509949999999996%2C%22text%22%3A%22%E5%A4%8D%E5%88%B6%E9%94%81%E5%88%B0%E5%AF%84%E5%AD%98%E5%99%A8%E5%B9%B6%E5%B0%86%E9%94%81%E8%AE%BE%E4%B8%BA1%22%7D%2C%7B%22x%22%3A112.36603%2C%22y%22%3A75.90302%2C%22width%22%3A188.36553999999998%2C%22height%22%3A19.481130000000007%2C%22text%22%3A%22CMP%20REGISTER%2C%230%22%7D%2C%7B%22x%22%3A471.95197%2C%22y%22%3A76.38924%2C%22width%22%3A118.98212999999993%2C%22height%22%3A21.617360000000005%2C%22text%22%3A%22I%E9%94%81%E6%98%AF%E9%9B%B6%E5%90%97%3F%22%7D%2C%7B%22x%22%3A112.05754%2C%22y%22%3A100.06873%2C%22width%22%3A166.56669999999997%2C%22height%22%3A20.988474999999994%2C%22text%22%3A%22JNE%20ENTER-REGION%22%7D%2C%7B%22x%22%3A481.54388%2C%22y%22%3A101.75738%2C%22width%22%3A391.94581999999997%2C%22height%22%3A21.443494%2C%22text%22%3A%22%E8%8B%A5%E4%B8%8D%E6%98%AF%E9%9B%B6%2C%E8%AF%B4%E6%98%8E%E9%94%81%E5%B7%B2%E8%A2%AB%E8%AE%BE%E7%BD%AE%2C%E6%89%80%E4%BB%A5%E5%BE%AA%E7%8E%AF%22%7D%2C%7B%22x%22%3A111.782875%2C%22y%22%3A123.85334%2C%22width%22%3A41.862984999999995%2C%22height%22%3A18.875910000000005%2C%22text%22%3A%22RET%22%7D%2C%7B%22x%22%3A486.47037%2C%22y%22%3A126.58112%2C%22width%22%3A271.73963000000003%2C%22height%22%3A22.616540000000015%2C%22text%22%3A%22%E8%BF%94%E5%9B%9E%E8%B0%83%E7%94%A8%E8%80%85%2C%E8%BF%9B%E5%85%A5%E4%BA%86%E4%B8%B4%E7%95%8C%E5%8C%BA%22%7D%2C%7B%22x%22%3A63.495598%2C%22y%22%3A194.07196%2C%22width%22%3A132.216272%2C%22height%22%3A25.12587000000002%2C%22text%22%3A%22LEAVE-REGION%3A%22%7D%2C%7B%22x%22%3A479.58835%2C%22y%22%3A220.69363%2C%22width%22%3A133.53575%2C%22height%22%3A22.36806999999999%2C%22text%22%3A%22%E5%9C%A8%E9%94%81%E4%B8%AD%E5%AD%98%E5%85%A50%22%7D%2C%7B%22x%22%3A111.48124%2C%22y%22%3A221.39665%2C%22width%22%3A154.70959%2C%22height%22%3A18.14231000000001%2C%22text%22%3A%22MOVE%20LOCK%2C%230%22%7D%2C%7B%22x%22%3A113.65986%2C%22y%22%3A245.00342%2C%22width%22%3A39.92119000000001%2C%22height%22%3A17.904049999999984%2C%22text%22%3A%22RET%22%7D%2C%7B%22x%22%3A482.8511%2C%22y%22%3A247.13303%2C%22width%22%3A115.88440000000003%2C%22height%22%3A22.029570000000007%2C%22text%22%3A%22%E8%BF%94%E5%9B%9E%E8%B0%83%E7%94%A8%E8%80%85%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23f2f2f2%22%2C%22id%22%3A%22ua30a8d45%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><p data-lake-id=\"u6f2233d3\" id=\"u6f2233d3\"><span data-lake-id=\"ueb3d8dbd\" id=\"ueb3d8dbd\">为了使用 TSL 指令，要使用一个共享变量 lock 来协调对共享内存的访问。当 lock 为 0 时，任何进程都可以使用 TSL 指令将其设置为 1，并读写共享内存。当操作结束时，进程用一条普通的 move 指令将 lock 的值重新设置为 0。</span></p><p data-lake-id=\"u55a28230\" id=\"u55a28230\"><span data-lake-id=\"u84f84a83\" id=\"u84f84a83\">一个可替代 TSL 的指令是 XCHG ，它原子性地交换了两个位置的内容，它本质上与 TSL 的解决办法一样。所有的 Intel x86 CPU 在低层同步中使用 XCHG 指令。</span></p><p data-lake-id=\"u415fc756\" id=\"u415fc756\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2022%2Fpng%2F732231%2F1647358713387-44f5c1ea-b8bf-487d-b85d-574701da82a4.png%22%2C%22taskId%22%3A%22u90344cea-036f-446c-ac3f-bdbf4ed3752%22%2C%22clientId%22%3A%22u5297893b-ed7c-4%22%2C%22originalType%22%3A%22url%22%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A119099%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A948%2C%22originHeight%22%3A353%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22ENTER_REGION%3A%20%7C%E5%9C%A8%E5%AF%84%E5%AD%98%E5%99%A8%E4%B8%AD%E6%94%BE%E4%B8%80%E4%B8%AA1%20MOVE%20REGISTER%2C%231%20%E4%BA%A4%E6%8D%A2%E5%AF%84%E5%AD%98%E5%99%A8%E4%B8%8E%E9%94%81%E5%8F%98%E9%87%8F%E7%9A%84%E5%86%85%E5%AE%B9%20XCHG%20REGISTER%2CLOCK%20%E9%94%81%E6%98%AF%E9%9B%B6%E5%90%97%3F%20CMP%20REGISTER%2C%230%20%7C%E8%8B%A5%E4%B8%8D%E6%98%AF%E9%9B%B6%2C%E8%AF%B4%E6%98%8E%E9%94%81%E5%B7%B2%E8%A2%AB%E8%AE%BE%E7%BD%AE%2C%E5%9B%A0%E6%AD%A4%E5%BE%AA%E7%8E%AF%20JNE%20ENTER%20REGION%20%E8%BF%94%E5%9B%9E%E8%B0%83%E7%94%A8%E8%80%85%2C%E8%BF%9B%E5%85%A5%E4%B8%B4%E7%95%8C%E5%8C%BA%20RET%20LEAVE_%20REGION%3A%20MOVE%20LOCK%2C%230%20%E5%9C%A8%E9%94%81%E4%B8%AD%E5%AD%98%E5%85%A50%20I%E8%BF%94%E5%9B%9E%E8%B0%83%E7%94%A8%E8%80%85%20RET%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A83.02028%2C%22y%22%3A26.458458%2C%22width%22%3A139.70328999999998%2C%22height%22%3A22.997985999999997%2C%22text%22%3A%22ENTER_REGION%3A%22%7D%2C%7B%22x%22%3A499.6743%2C%22y%22%3A54.900707%2C%22width%22%3A206.1042%2C%22height%22%3A22.778003%2C%22text%22%3A%22%7C%E5%9C%A8%E5%AF%84%E5%AD%98%E5%99%A8%E4%B8%AD%E6%94%BE%E4%B8%80%E4%B8%AA1%22%7D%2C%7B%22x%22%3A137.35591%2C%22y%22%3A55.99703%2C%22width%22%3A225.84062%2C%22height%22%3A20.722509999999993%2C%22text%22%3A%22MOVE%20REGISTER%2C%231%22%7D%2C%7B%22x%22%3A501.0253%2C%22y%22%3A85.81972%2C%22width%22%3A284.56686%2C%22height%22%3A23.221890000000002%2C%22text%22%3A%22%E4%BA%A4%E6%8D%A2%E5%AF%84%E5%AD%98%E5%99%A8%E4%B8%8E%E9%94%81%E5%8F%98%E9%87%8F%E7%9A%84%E5%86%85%E5%AE%B9%22%7D%2C%7B%22x%22%3A136.9672%2C%22y%22%3A85.79655%2C%22width%22%3A264.8283%2C%22height%22%3A21.090050000000005%2C%22text%22%3A%22XCHG%20REGISTER%2CLOCK%22%7D%2C%7B%22x%22%3A502.0844%2C%22y%22%3A116.55548%2C%22width%22%3A106.59949999999998%2C%22height%22%3A20.702520000000007%2C%22text%22%3A%22%E9%94%81%E6%98%AF%E9%9B%B6%E5%90%97%3F%22%7D%2C%7B%22x%22%3A137.79408%2C%22y%22%3A116.77246%2C%22width%22%3A209.03208999999998%2C%22height%22%3A20.717970000000008%2C%22text%22%3A%22CMP%20REGISTER%2C%230%22%7D%2C%7B%22x%22%3A509.1925%2C%22y%22%3A145.02438%2C%22width%22%3A390.7531%2C%22height%22%3A23.44892999999999%2C%22text%22%3A%22%7C%E8%8B%A5%E4%B8%8D%E6%98%AF%E9%9B%B6%2C%E8%AF%B4%E6%98%8E%E9%94%81%E5%B7%B2%E8%A2%AB%E8%AE%BE%E7%BD%AE%2C%E5%9B%A0%E6%AD%A4%E5%BE%AA%E7%8E%AF%22%7D%2C%7B%22x%22%3A137.66049%2C%22y%22%3A148.23627%2C%22width%22%3A182.17801%2C%22height%22%3A20.78964000000002%2C%22text%22%3A%22JNE%20ENTER%20REGION%22%7D%2C%7B%22x%22%3A504.1813%2C%22y%22%3A177.4099%2C%22width%22%3A257.29259999999994%2C%22height%22%3A22.16679000000002%2C%22text%22%3A%22%E8%BF%94%E5%9B%9E%E8%B0%83%E7%94%A8%E8%80%85%2C%E8%BF%9B%E5%85%A5%E4%B8%B4%E7%95%8C%E5%8C%BA%22%7D%2C%7B%22x%22%3A137.99936%2C%22y%22%3A178.99837%2C%22width%22%3A46.28053%2C%22height%22%3A18.762010000000004%2C%22text%22%3A%22RET%22%7D%2C%7B%22x%22%3A81.16909%2C%22y%22%3A239.52191%2C%22width%22%3A144.56671%2C%22height%22%3A23.696470000000033%2C%22text%22%3A%22LEAVE_%20REGION%3A%22%7D%2C%7B%22x%22%3A136.37549%2C%22y%22%3A268.98517%2C%22width%22%3A170.74421%2C%22height%22%3A20.52583000000004%2C%22text%22%3A%22MOVE%20LOCK%2C%230%22%7D%2C%7B%22x%22%3A504.3624%2C%22y%22%3A269.10358%2C%22width%22%3A133.81405000000007%2C%22height%22%3A21.04857999999996%2C%22text%22%3A%22%E5%9C%A8%E9%94%81%E4%B8%AD%E5%AD%98%E5%85%A50%22%7D%2C%7B%22x%22%3A499.31238%2C%22y%22%3A300.2877%2C%22width%22%3A123.00492000000003%2C%22height%22%3A21.495300000000043%2C%22text%22%3A%22I%E8%BF%94%E5%9B%9E%E8%B0%83%E7%94%A8%E8%80%85%22%7D%2C%7B%22x%22%3A137.56737%2C%22y%22%3A301.4358%2C%22width%22%3A47.06066999999999%2C%22height%22%3A18.784100000000024%2C%22text%22%3A%22RET%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23f1f1f1%22%2C%22id%22%3A%22ub64677ba%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><p data-lake-id=\"ubf018010\" id=\"ubf018010\"><span data-lake-id=\"u8d5b431f\" id=\"u8d5b431f\">缺点：</span></p><ol list=\"u6ae10fb1\"><li fid=\"u8928cfbd\" data-lake-id=\"u39d50835\" id=\"u39d50835\"><span data-lake-id=\"u04255907\" id=\"u04255907\">采用忙等待的方式，会浪费 CPU 时间。</span></li></ol><h4 data-lake-id=\"V2UCy\" id=\"V2UCy\"><span data-lake-id=\"uc35e8bfd\" id=\"uc35e8bfd\">4. 睡眠与唤醒</span></h4><p data-lake-id=\"uf063b2ad\" id=\"uf063b2ad\"><span data-lake-id=\"u8c1fe859\" id=\"u8c1fe859\">Peterson 解法和 TSL 或 XCHG 解法都是正确的，但它们都有忙等待的缺点。这种方法不仅浪费了 CPU 时间，而且还可能引起预想不到的结果。</span></p><p data-lake-id=\"u3f511202\" id=\"u3f511202\"><span data-lake-id=\"u50fecc80\" id=\"u50fecc80\">我们可以使用睡眠与唤醒的机制，使它们在无法进入临界区时将阻塞，而不是忙等待。</span></p><p data-lake-id=\"u1b0b34cc\" id=\"u1b0b34cc\"><span data-lake-id=\"u2eca92d5\" id=\"u2eca92d5\">最简单的是 sleep 和 wakeup 。 sleep 是一个将引起调用进程阻塞的系统调用，即被挂起，直到另外一个进程将其唤醒。wakeup 调用有一个参数，即要被唤醒的进程。</span></p><p data-lake-id=\"u84b35c4a\" id=\"u84b35c4a\"><span data-lake-id=\"u65a0d574\" id=\"u65a0d574\">缺点：</span></p><p data-lake-id=\"uebaca453\" id=\"uebaca453\"><span data-lake-id=\"ua0035715\" id=\"ua0035715\">参考生产者-消费者问题，发给一个（尚）未睡眠进程的 wakeup 信号会出现丢失，从而出现生产者和消费者同时睡眠的情况。</span></p><p data-lake-id=\"ue7c0fbee\" id=\"ue7c0fbee\"><span data-lake-id=\"uc0d8b776\" id=\"uc0d8b776\">一种快速的弥补方法是修改规则，加上一个唤醒等待位。当一个 wakeup 信号发送给一个清醒的进程信号时，将该位置 1。随后，当该进程要睡眠时，如果唤醒等待位为 1，则将该位清除，而该进程仍然保持清醒。但原则上讲，这并没有从根本上解决问题。</span></p><h4 data-lake-id=\"sXXIz\" id=\"sXXIz\"><span data-lake-id=\"u3fa3baf4\" id=\"u3fa3baf4\">5. 信号量</span></h4><p data-lake-id=\"uac6b263b\" id=\"uac6b263b\"><span data-lake-id=\"u5d056485\" id=\"u5d056485\">信号量是一个整型变量用来累计唤醒次数，供以后使用。一个信号量的取值可以为 0（表示没有保存下来的唤醒操作）或者为正值（表示有一个或多个唤醒操作）。</span></p><p data-lake-id=\"u33afcbe9\" id=\"u33afcbe9\"><span data-lake-id=\"u8fcd4f79\" id=\"u8fcd4f79\">对信号量一共有两种操作：down 和 up （分别为一般化后的 sleep 和 wakeup ）。</span></p><p data-lake-id=\"u3849d7f6\" id=\"u3849d7f6\"><span data-lake-id=\"u0301a234\" id=\"u0301a234\">对一信号量执行 down 操作，则是检查其值是否大于 0。若该值大于 0，则将其值减 1（即用掉一个保存的唤醒信号）并继续；若该值为 0，则进程将睡眠，而且此时 down 操作并未结束。</span></p><p data-lake-id=\"ub5519bec\" id=\"ub5519bec\"><span data-lake-id=\"u2398604f\" id=\"u2398604f\">对一信号量执行 up 操作，会对信号量的值增 1。如果一个或多个进程在该信号量上睡眠，信号量的值仍旧是 0，但在其上睡眠的进程会被唤醒一个。</span></p><p data-lake-id=\"ud4a06746\" id=\"ud4a06746\"><span data-lake-id=\"uc52c184e\" id=\"uc52c184e\">检查数值、修改变量值以及可能发生的睡眠和唤醒操作均作为一个单一的、不可分割的原子操作完成。所谓原子操作，是指一组相关联的操作要么都不间断地执行，要么都不执行。</span></p><h4 data-lake-id=\"qZRGc\" id=\"qZRGc\"><span data-lake-id=\"u2ce798f4\" id=\"u2ce798f4\">6. 互斥量</span></h4><p data-lake-id=\"uf911a753\" id=\"uf911a753\"><span data-lake-id=\"u4f568ee8\" id=\"u4f568ee8\">如果不需要信号量的计数能力，有时可以使用信号量的一个简化版本，称为互斥量（mutex）。互斥量仅仅适用于管理共享资源或一小段代码。由于互斥量在实现时既容易又有效，这使得互斥量在实现用户空间线程包时非常有用。</span></p><p data-lake-id=\"ub462ad61\" id=\"ub462ad61\"><span data-lake-id=\"u47f7a782\" id=\"u47f7a782\">互斥量是一个可以处于两态之一的变量：解锁和加锁。当一个线程（或进程）需要访问临界区时，它调用 mutex_lock 。如果该互斥量当前是解锁的（即临界区可用），此调用成功，调用线程可以自由进入该临界区。另一方面，如果该互斥量已经加锁，调用线程被阻塞，直到在临界区中的线程完成并调用 mutex_unlock 。如果多个线程被阻塞在该互斥量上，将随机选择一个线程并允许它获得锁。</span></p><p data-lake-id=\"u88f42e74\" id=\"u88f42e74\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2022%2Fpng%2F732231%2F1647358714079-f7f766ed-12c2-4b10-a323-12b9f1b37558.png%22%2C%22taskId%22%3A%22u4591fa98-fe52-493d-a89c-cf5b8947714%22%2C%22clientId%22%3A%22u5297893b-ed7c-4%22%2C%22originalType%22%3A%22url%22%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A128913%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A1049%2C%22originHeight%22%3A358%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22MUTEX_LOCK%3A%20I%E5%B0%86%E4%BA%92%E6%96%A5%E4%BF%A1%E5%8F%B7%E9%87%8F%E5%A4%8D%E5%88%B6%E5%88%B0%E5%AF%84%E5%AD%98%E5%99%A8%2C%E5%B9%B6%E4%B8%94%E5%B0%86%E4%BA%92%E6%96%A5%E4%BF%A1%E5%8F%B7%E9%87%8F%E7%BD%AE%E4%B8%BA1%20TSL%20REGISTER%2CMUTEX%20%E4%BA%92%E6%96%A5%E4%BF%A1%E5%8F%B7%E9%87%8F%E6%98%AF0%E5%90%97%3F%20CMP%20REGISTER%2C%230%20%E5%A6%82%E6%9E%9C%E4%BA%92%E6%96%A5%E4%BF%A1%E5%8F%B7%E9%87%8F%E4%B8%BA0%2C%E5%AE%83%E8%A2%AB%E8%A7%A3%E9%94%81%2C%E6%89%80%E4%BB%A5%E8%BF%94%E5%9B%9E%20JZE%20OK%20%E4%BA%92%E6%96%A5%E4%BF%A1%E5%8F%B7%E9%87%8F%E5%BF%99%3B%E8%B0%83%E5%BA%A6%E5%8F%A6%E4%B8%80%E4%B8%AA%E7%BA%BF%E7%A8%8B%20CALL%20THREAD-YIELD%20%E7%A8%8D%E5%90%8E%E5%86%8D%E8%AF%95%20JMP%20MUTEX_LOCK%20%E8%BF%94%E5%9B%9E%E8%B0%83%E7%94%A8%E8%80%85%3B%E8%BF%9B%E5%85%A5%E4%B8%B4%E7%95%8C%E5%8C%BA%20OK%3A%20RET%20MUTEX-UNLOCK%3A%20%E5%B0%86MUTEX%E7%BD%AE%E4%B8%BA0%20MOVE%20MUTEX%2C%230%20I%E8%BF%94%E5%9B%9E%E8%B0%83%E7%94%A8%E8%80%85%20RET%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A48.815895%2C%22y%22%3A29.277971%2C%22width%22%3A114.53300499999999%2C%22height%22%3A19.066775%2C%22text%22%3A%22MUTEX_LOCK%3A%22%7D%2C%7B%22x%22%3A455.02924%2C%22y%22%3A45.703693%2C%22width%22%3A545.99126%2C%22height%22%3A25.386487000000002%2C%22text%22%3A%22I%E5%B0%86%E4%BA%92%E6%96%A5%E4%BF%A1%E5%8F%B7%E9%87%8F%E5%A4%8D%E5%88%B6%E5%88%B0%E5%AF%84%E5%AD%98%E5%99%A8%2C%E5%B9%B6%E4%B8%94%E5%B0%86%E4%BA%92%E6%96%A5%E4%BF%A1%E5%8F%B7%E9%87%8F%E7%BD%AE%E4%B8%BA1%22%7D%2C%7B%22x%22%3A94.68304%2C%22y%22%3A52.007664%2C%22width%22%3A232.88822%2C%22height%22%3A21.326061000000003%2C%22text%22%3A%22TSL%20REGISTER%2CMUTEX%22%7D%2C%7B%22x%22%3A455.00177%2C%22y%22%3A72.39464%2C%22width%22%3A196.18283000000002%2C%22height%22%3A19.71457000000001%2C%22text%22%3A%22%E4%BA%92%E6%96%A5%E4%BF%A1%E5%8F%B7%E9%87%8F%E6%98%AF0%E5%90%97%3F%22%7D%2C%7B%22x%22%3A96.03117%2C%22y%22%3A77.872635%2C%22width%22%3A187.56753%2C%22height%22%3A18.257604999999998%2C%22text%22%3A%22CMP%20REGISTER%2C%230%22%7D%2C%7B%22x%22%3A455.88818%2C%22y%22%3A95.267586%2C%22width%22%3A431.37226000000004%2C%22height%22%3A20.35102400000001%2C%22text%22%3A%22%E5%A6%82%E6%9E%9C%E4%BA%92%E6%96%A5%E4%BF%A1%E5%8F%B7%E9%87%8F%E4%B8%BA0%2C%E5%AE%83%E8%A2%AB%E8%A7%A3%E9%94%81%2C%E6%89%80%E4%BB%A5%E8%BF%94%E5%9B%9E%22%7D%2C%7B%22x%22%3A96.74853%2C%22y%22%3A102.46524%2C%22width%22%3A66.43006999999999%2C%22height%22%3A18.286170000000013%2C%22text%22%3A%22JZE%20OK%22%7D%2C%7B%22x%22%3A457.21695%2C%22y%22%3A118.29847%2C%22width%22%3A327.64115000000004%2C%22height%22%3A22.425240000000016%2C%22text%22%3A%22%E4%BA%92%E6%96%A5%E4%BF%A1%E5%8F%B7%E9%87%8F%E5%BF%99%3B%E8%B0%83%E5%BA%A6%E5%8F%A6%E4%B8%80%E4%B8%AA%E7%BA%BF%E7%A8%8B%22%7D%2C%7B%22x%22%3A96.28105%2C%22y%22%3A126.11008%2C%22width%22%3A175.4962%2C%22height%22%3A20.281490000000005%2C%22text%22%3A%22CALL%20THREAD-YIELD%22%7D%2C%7B%22x%22%3A460.3262%2C%22y%22%3A142.54605%2C%22width%22%3A96.6585%2C%22height%22%3A20.205919999999992%2C%22text%22%3A%22%E7%A8%8D%E5%90%8E%E5%86%8D%E8%AF%95%22%7D%2C%7B%22x%22%3A96.5296%2C%22y%22%3A149.61404%2C%22width%22%3A156.96681%2C%22height%22%3A19.92031%2C%22text%22%3A%22JMP%20MUTEX_LOCK%22%7D%2C%7B%22x%22%3A457.04318%2C%22y%22%3A170.27042%2C%22width%22%3A259.35722%2C%22height%22%3A20.327049999999986%2C%22text%22%3A%22%E8%BF%94%E5%9B%9E%E8%B0%83%E7%94%A8%E8%80%85%3B%E8%BF%9B%E5%85%A5%E4%B8%B4%E7%95%8C%E5%8C%BA%22%7D%2C%7B%22x%22%3A51.117138%2C%22y%22%3A175.0996%2C%22width%22%3A85.09369199999999%2C%22height%22%3A19.998649999999998%2C%22text%22%3A%22OK%3A%20RET%22%7D%2C%7B%22x%22%3A50.427677%2C%22y%22%3A246.78568%2C%22width%22%3A139.05702300000002%2C%22height%22%3A18.765679999999975%2C%22text%22%3A%22MUTEX-UNLOCK%3A%22%7D%2C%7B%22x%22%3A466.33298%2C%22y%22%3A263.83493%2C%22width%22%3A141.39468%2C%22height%22%3A22.76514000000003%2C%22text%22%3A%22%E5%B0%86MUTEX%E7%BD%AE%E4%B8%BA0%22%7D%2C%7B%22x%22%3A96.48728%2C%22y%22%3A271.98755%2C%22width%22%3A171.12581999999998%2C%22height%22%3A16.974879999999985%2C%22text%22%3A%22MOVE%20MUTEX%2C%230%22%7D%2C%7B%22x%22%3A460.1614%2C%22y%22%3A294.17554%2C%22width%22%3A121.50970000000001%2C%22height%22%3A22.273500000000013%2C%22text%22%3A%22I%E8%BF%94%E5%9B%9E%E8%B0%83%E7%94%A8%E8%80%85%22%7D%2C%7B%22x%22%3A98.03508%2C%22y%22%3A295.4916%2C%22width%22%3A40.30536000000001%2C%22height%22%3A18.104229999999973%2C%22text%22%3A%22RET%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23f1f1f1%22%2C%22id%22%3A%22u0c28150e%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><p data-lake-id=\"u7db26f4a\" id=\"u7db26f4a\"><span data-lake-id=\"u6bbc7ac9\" id=\"u6bbc7ac9\">enter_region 和 mutex_lock 的代码很相似，但有一个关键的区别。</span></p><p data-lake-id=\"ub0a5f022\" id=\"ub0a5f022\"><span data-lake-id=\"ufa053b5c\" id=\"ufa053b5c\">当 enter_region 进入临界区失败时，它始终重复测试锁（忙等待）。实际上，由于时钟超时的作用，会调度其他进程运行。这样迟早拥有锁的进程会进入运行并释放锁。</span></p><p data-lake-id=\"ufc805e4c\" id=\"ufc805e4c\"><span data-lake-id=\"u63cbae2f\" id=\"u63cbae2f\">在（用户）线程中，情形有所不同，因为没有时钟停止运行时间过长的线程。结果是通过忙等待的方式来试图获得锁的线程将永远循环下去，决不会得到锁，因为这个运行的线程不会让其他线程运行从而释放锁。因此当 mutex_lock 取锁失败时，它调用 thread_yield 将 CPU 放弃给另一个线程。这样，就没有忙等待。在该线程下次运行时，它再一次对锁进行测试。</span></p><h4 data-lake-id=\"cklet\" id=\"cklet\"><span data-lake-id=\"u305e00ec\" id=\"u305e00ec\">7. 条件变量</span></h4><p data-lake-id=\"u1ca8ce42\" id=\"u1ca8ce42\"><span data-lake-id=\"ud0c0ef4e\" id=\"ud0c0ef4e\">条件变量允许线程由于一些未达到的条件而阻塞。</span></p><p data-lake-id=\"u38f3c613\" id=\"u38f3c613\"><span data-lake-id=\"u69841ec0\" id=\"u69841ec0\">与条件变量相关的最重要的两个操作是 pthread_cond_wait 和 pthread_cond_signal 。前者阻塞调用线程直到另一其他线程向它发信号（使用后一个调用）。</span></p><p data-lake-id=\"u15437e27\" id=\"u15437e27\"><span data-lake-id=\"u019ed95c\" id=\"u019ed95c\">条件变量（不像信号量）不会存在内存中。如果将一个信号量传递给一个没有线程在等待的条件变量，那么这个信号就会丢失。</span></p><h4 data-lake-id=\"CiDOP\" id=\"CiDOP\"><span data-lake-id=\"uced4611f\" id=\"uced4611f\">8. 管程</span></h4><p data-lake-id=\"u3d92473f\" id=\"u3d92473f\"><span data-lake-id=\"u4ce81686\" id=\"u4ce81686\">管程是一种高级同步原语，管程有一个很重要的特性，即任一时刻管程中只能有一个活跃进程，这一特性使管程能有效地完成互斥。</span></p><p data-lake-id=\"u773574a7\" id=\"u773574a7\"><span data-lake-id=\"u0199dc7f\" id=\"u0199dc7f\">当一个进程调用管程过程时，该过程中的前几条指令将检查在管程中是否有其他的活跃进程。如果当一个进程调用管程过程时，该过程中的前几条指令将检查在管程中是否有其他的活跃进程。如果</span></p><p data-lake-id=\"ucec01bc1\" id=\"ucec01bc1\"><span data-lake-id=\"u89bd7bd7\" id=\"u89bd7bd7\">管程提供了一种实现互斥的简便途径，通过临界区互斥的自动化，管程比信号量更容易保证并行编程的正确性。</span></p><h4 data-lake-id=\"l2Lvn\" id=\"l2Lvn\"><span data-lake-id=\"u81753795\" id=\"u81753795\">9. 消息传递</span></h4><p data-lake-id=\"u8e783819\" id=\"u8e783819\"><span data-lake-id=\"uea44694d\" id=\"uea44694d\">这种进程间通信的方法使用两条原语 send 和 receive ，它们像信号量而不像管程，是系统调用而不是语言成分。</span></p><p data-lake-id=\"uf5bfc33f\" id=\"uf5bfc33f\"><span data-lake-id=\"u5dd06747\" id=\"u5dd06747\">前一个调用向一个给定的目标发送一条消息，后一个调用从一个给定的源（或者是任意源，如果接收者不介意的话）接收一条消息。如果没有消息可用，则接收者可能被阻塞，直到一条消息到达，或者，带着一个错误码立即返回。</span></p><h4 data-lake-id=\"Bhyhu\" id=\"Bhyhu\"><span data-lake-id=\"u082fe6d9\" id=\"u082fe6d9\">10. 屏障</span></h4><p data-lake-id=\"u9544ea6f\" id=\"u9544ea6f\"><span data-lake-id=\"uded3671e\" id=\"uded3671e\">在有些应用中划分了若干阶段，并且规定，除非所有的进程都就绪准备着手下一个阶段，否则任何进程都不能进入下一个阶段。可以通过在每个阶段的结尾安置屏障来实现这种行为。当一个进程到达屏障时，它就被屏障阻拦，直到所有进程都到达该屏障为止。</span></p><h3 data-lake-id=\"TtiiE\" id=\"TtiiE\"><span data-lake-id=\"u706ff411\" id=\"u706ff411\">四、调度</span></h3><p data-lake-id=\"ubdcf2395\" id=\"ubdcf2395\"><span data-lake-id=\"ubfec2b80\" id=\"ubfec2b80\">当计算机系统是多道程序设计系统时，通常就会有多个进程或线程同时竞争 CPU。只要有两个或更多的进程处于就绪状态，这种情形就会发生。如果只有一个 CPU 可用，那么就必须选择下一个要运行的进程。在操作系统中，完成选择工作的这一部分称为调度程序，该程序使用的算法称为调度算法。</span></p><h4 data-lake-id=\"h3NfM\" id=\"h3NfM\"><span data-lake-id=\"ub039c09f\" id=\"ub039c09f\">1. 何时调度</span></h4><ol list=\"uf3d730da\"><li fid=\"uf3508598\" data-lake-id=\"ufb3bfa20\" id=\"ufb3bfa20\"><span data-lake-id=\"u9144848b\" id=\"u9144848b\">在创建一个新进程之后，需要决定是运行父进程还是运行子进程。</span></li><li fid=\"uf3508598\" data-lake-id=\"u82d9306e\" id=\"u82d9306e\"><span data-lake-id=\"u94ff88f6\" id=\"u94ff88f6\">在一个进程退出时必须做出调度决策。</span></li><li fid=\"uf3508598\" data-lake-id=\"u3450d398\" id=\"u3450d398\"><span data-lake-id=\"u6630f7d7\" id=\"u6630f7d7\">当一个进程阻塞在 I/O 和信号量上或由于其他原因阻塞时，必须选择另一个进程运行。</span></li><li fid=\"uf3508598\" data-lake-id=\"ue1ea8a6b\" id=\"ue1ea8a6b\"><span data-lake-id=\"u5efc6454\" id=\"u5efc6454\">第四，在一个 I/O 中断发生时，必须做出调度决策。</span></li></ol><h4 data-lake-id=\"V6UHW\" id=\"V6UHW\"><span data-lake-id=\"u7bd3fdde\" id=\"u7bd3fdde\">2. 调度算法分类</span></h4><ol list=\"uc40a5d54\"><li fid=\"u4f0ad15e\" data-lake-id=\"u718738a6\" id=\"u718738a6\"><span data-lake-id=\"ua3cc831a\" id=\"ua3cc831a\">批处理。</span></li><li fid=\"u4f0ad15e\" data-lake-id=\"u74517b81\" id=\"u74517b81\"><span data-lake-id=\"ub883158b\" id=\"ub883158b\">交互式。</span></li><li fid=\"u4f0ad15e\" data-lake-id=\"u425722d3\" id=\"u425722d3\"><span data-lake-id=\"u478b0720\" id=\"u478b0720\">实时。</span></li></ol><h4 data-lake-id=\"HWQSD\" id=\"HWQSD\"><span data-lake-id=\"u93364147\" id=\"u93364147\">3. 调度算法的目标</span></h4><p data-lake-id=\"uf49f4cef\" id=\"uf49f4cef\"><span data-lake-id=\"ue22abfca\" id=\"ue22abfca\">为了设计调度算法，有必要考虑什么是一个好的调度算法。某些目标取决于环境（批处理、交互式或实时），但是还有一些目标是适用于所有情形的。</span></p><p data-lake-id=\"u173ec000\" id=\"u173ec000\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2022%2Fpng%2F732231%2F1647358714216-66143694-5546-460a-bbbb-cce489e6e022.png%22%2C%22taskId%22%3A%22u1631c61c-ed9a-44e1-88a7-154e1a8d87f%22%2C%22clientId%22%3A%22u5297893b-ed7c-4%22%2C%22originalType%22%3A%22url%22%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A144551%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A542%2C%22originHeight%22%3A492%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%E6%89%80%E6%9C%89%E7%B3%BB%E7%BB%9F%20%E5%85%AC%E5%B9%B3%20%E7%BB%99%E6%AF%8F%E4%B8%AA%E8%BF%9B%E7%A8%8B%E5%85%AC%E5%B9%B3%E7%9A%84CPU%E4%BB%BD%E9%A2%9D%20%E7%AD%96%E7%95%A5%E5%BC%BA%E5%88%B6%E6%89%A7%E8%A1%8C--%E7%9C%8B%E5%88%B0%E6%89%80%E5%AE%A3%E5%B8%83%E7%9A%84%E7%AD%96%E7%95%A5%E6%89%A7%E8%A1%8C%20%E5%B9%B3%E8%A1%A1--%E4%BF%9D%E6%8C%81%E7%B3%BB%E7%BB%9F%E7%9A%84%E6%89%80%E6%9C%89%E9%83%A8%E5%88%86%E9%83%BD%E5%BF%99%E7%A2%8C%20%E6%89%B9%E5%A4%84%E7%90%86%E7%B3%BB%E7%BB%9F%20%E5%90%9E%E5%90%90%E9%87%8F--%E6%AF%8F%E5%B0%8F%E6%97%B6%E6%9C%80%E5%A4%A7%E4%BD%9C%E4%B8%9A%E6%95%B0%20%E5%91%A8%E8%BD%AC%E6%97%B6%E9%97%B4--%E4%BB%8E%E6%8F%90%E4%BA%A4%E5%88%B0%E7%BB%88%E6%AD%A2%E9%97%B4%E7%9A%84%E6%9C%80%E5%B0%8F%E6%97%B6%E9%97%B4%20CPU%E5%88%A9%E7%94%A8%E7%8E%87--%E4%BF%9D%E6%8C%81CPU%E5%A7%8B%E7%BB%88%E5%BF%99%E7%A2%8C%20%E4%BA%A4%E4%BA%92%E5%BC%8F%E7%B3%BB%E7%BB%9F%20%E5%93%8D%E5%BA%94%E6%97%B6%E9%97%B4--%E5%BF%AB%E9%80%9F%E5%93%8D%E5%BA%94%E8%AF%B7%E6%B1%82%20%E5%9D%87%E8%A1%A1%E6%80%A7--%E6%BB%A1%E8%B6%B3%E7%94%A8%E6%88%B7%E7%9A%84%E6%9C%9F%E6%9C%9B%20%E5%AE%9E%E6%97%B6%E7%B3%BB%E7%BB%9F%20%E6%BB%A1%E8%B6%B3%E6%88%AA%E6%AD%A2%E6%97%B6%E9%97%B4--%E9%81%BF%E5%85%8D%E4%B8%A2%E5%A4%B1%E6%95%B0%E6%8D%AE%20%E5%8F%AF%E9%A2%84%E6%B5%8B%E6%80%A7--%E5%9C%A8%E5%A4%9A%E5%AA%92%E4%BD%93%E7%B3%BB%E7%BB%9F%E4%B8%AD%E9%81%BF%E5%85%8D%E5%93%81%E8%B4%A8%E9%99%8D%E4%BD%8E%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A35.65439%2C%22y%22%3A24.521551%2C%22width%22%3A90.74041600000001%2C%22height%22%3A21.255854000000003%2C%22text%22%3A%22%E6%89%80%E6%9C%89%E7%B3%BB%E7%BB%9F%22%7D%2C%7B%22x%22%3A61.580032%2C%22y%22%3A54.89885%2C%22width%22%3A49.66426799999999%2C%22height%22%3A23.408629999999995%2C%22text%22%3A%22%E5%85%AC%E5%B9%B3%22%7D%2C%7B%22x%22%3A137.81487%2C%22y%22%3A55.67761%2C%22width%22%3A283.18854999999996%2C%22height%22%3A22.212360000000004%2C%22text%22%3A%22%E7%BB%99%E6%AF%8F%E4%B8%AA%E8%BF%9B%E7%A8%8B%E5%85%AC%E5%B9%B3%E7%9A%84CPU%E4%BB%BD%E9%A2%9D%22%7D%2C%7B%22x%22%3A59.462803%2C%22y%22%3A85.995995%2C%22width%22%3A404.915857%2C%22height%22%3A22.807615000000013%2C%22text%22%3A%22%E7%AD%96%E7%95%A5%E5%BC%BA%E5%88%B6%E6%89%A7%E8%A1%8C--%E7%9C%8B%E5%88%B0%E6%89%80%E5%AE%A3%E5%B8%83%E7%9A%84%E7%AD%96%E7%95%A5%E6%89%A7%E8%A1%8C%22%7D%2C%7B%22x%22%3A60.2583%2C%22y%22%3A116.52188%2C%22width%22%3A359.29526%2C%22height%22%3A21.348519999999994%2C%22text%22%3A%22%E5%B9%B3%E8%A1%A1--%E4%BF%9D%E6%8C%81%E7%B3%BB%E7%BB%9F%E7%9A%84%E6%89%80%E6%9C%89%E9%83%A8%E5%88%86%E9%83%BD%E5%BF%99%E7%A2%8C%22%7D%2C%7B%22x%22%3A35.42966%2C%22y%22%3A155.98174%2C%22width%22%3A113.84506%2C%22height%22%3A20.931160000000006%2C%22text%22%3A%22%E6%89%B9%E5%A4%84%E7%90%86%E7%B3%BB%E7%BB%9F%22%7D%2C%7B%22x%22%3A61.339737%2C%22y%22%3A185.11102%2C%22width%22%3A289.61848299999997%2C%22height%22%3A20.98848000000001%2C%22text%22%3A%22%E5%90%9E%E5%90%90%E9%87%8F--%E6%AF%8F%E5%B0%8F%E6%97%B6%E6%9C%80%E5%A4%A7%E4%BD%9C%E4%B8%9A%E6%95%B0%22%7D%2C%7B%22x%22%3A60.12456%2C%22y%22%3A214.97931%2C%22width%22%3A404.7664%2C%22height%22%3A22.812540000000013%2C%22text%22%3A%22%E5%91%A8%E8%BD%AC%E6%97%B6%E9%97%B4--%E4%BB%8E%E6%8F%90%E4%BA%A4%E5%88%B0%E7%BB%88%E6%AD%A2%E9%97%B4%E7%9A%84%E6%9C%80%E5%B0%8F%E6%97%B6%E9%97%B4%22%7D%2C%7B%22x%22%3A58.949585%2C%22y%22%3A246.5349%2C%22width%22%3A336.493655%2C%22height%22%3A22.138350000000003%2C%22text%22%3A%22CPU%E5%88%A9%E7%94%A8%E7%8E%87--%E4%BF%9D%E6%8C%81CPU%E5%A7%8B%E7%BB%88%E5%BF%99%E7%A2%8C%22%7D%2C%7B%22x%22%3A34.484165%2C%22y%22%3A284.7386%2C%22width%22%3A116.486535%2C%22height%22%3A22.425039999999967%2C%22text%22%3A%22%E4%BA%A4%E4%BA%92%E5%BC%8F%E7%B3%BB%E7%BB%9F%22%7D%2C%7B%22x%22%3A59.104023%2C%22y%22%3A314.31082%2C%22width%22%3A268.342977%2C%22height%22%3A22.578550000000007%2C%22text%22%3A%22%E5%93%8D%E5%BA%94%E6%97%B6%E9%97%B4--%E5%BF%AB%E9%80%9F%E5%93%8D%E5%BA%94%E8%AF%B7%E6%B1%82%22%7D%2C%7B%22x%22%3A59.4836%2C%22y%22%3A345.50345%2C%22width%22%3A268.84351999999996%2C%22height%22%3A21.503109999999992%2C%22text%22%3A%22%E5%9D%87%E8%A1%A1%E6%80%A7--%E6%BB%A1%E8%B6%B3%E7%94%A8%E6%88%B7%E7%9A%84%E6%9C%9F%E6%9C%9B%22%7D%2C%7B%22x%22%3A35.233654%2C%22y%22%3A383.10242%2C%22width%22%3A90.56230599999999%2C%22height%22%3A23.104730000000018%2C%22text%22%3A%22%E5%AE%9E%E6%97%B6%E7%B3%BB%E7%BB%9F%22%7D%2C%7B%22x%22%3A58.44842%2C%22y%22%3A414.8794%2C%22width%22%3A314.21525%2C%22height%22%3A22.02075000000002%2C%22text%22%3A%22%E6%BB%A1%E8%B6%B3%E6%88%AA%E6%AD%A2%E6%97%B6%E9%97%B4--%E9%81%BF%E5%85%8D%E4%B8%A2%E5%A4%B1%E6%95%B0%E6%8D%AE%22%7D%2C%7B%22x%22%3A59.966267%2C%22y%22%3A444.28455%2C%22width%22%3A427.32325299999997%2C%22height%22%3A22.515289999999993%2C%22text%22%3A%22%E5%8F%AF%E9%A2%84%E6%B5%8B%E6%80%A7--%E5%9C%A8%E5%A4%9A%E5%AA%92%E4%BD%93%E7%B3%BB%E7%BB%9F%E4%B8%AD%E9%81%BF%E5%85%8D%E5%93%81%E8%B4%A8%E9%99%8D%E4%BD%8E%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23eeeeee%22%2C%22id%22%3A%22u817dcf3b%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><h4 data-lake-id=\"cmgPH\" id=\"cmgPH\"><span data-lake-id=\"u6f91ade6\" id=\"u6f91ade6\">4. 批处理系统中的调度</span></h4><h5 data-lake-id=\"nOhIk\" id=\"nOhIk\"><span data-lake-id=\"u11eb3807\" id=\"u11eb3807\">（1）先来先服务</span></h5><p data-lake-id=\"u2a377bdb\" id=\"u2a377bdb\"><span data-lake-id=\"u3b797662\" id=\"u3b797662\">在所有调度算法中，最简单的是非抢占式的先来先服务算法。使用该算法，进程按照它们请求 CPU 的顺序使用 CPU 。</span></p><p data-lake-id=\"u35644aaa\" id=\"u35644aaa\"><span data-lake-id=\"u77f34046\" id=\"u77f34046\">优点：</span></p><p data-lake-id=\"uf4becf5d\" id=\"uf4becf5d\"><span data-lake-id=\"ub7cc36ca\" id=\"ub7cc36ca\">这个算法的主要优点是易于理解并且便于在程序中运用。</span></p><p data-lake-id=\"uf6c2cffa\" id=\"uf6c2cffa\"><span data-lake-id=\"uf2e1620b\" id=\"uf2e1620b\">缺点：</span></p><p data-lake-id=\"ub433b3d1\" id=\"ub433b3d1\"><span data-lake-id=\"ubf0ed4eb\" id=\"ubf0ed4eb\">平均等待时间过长。</span></p><h5 data-lake-id=\"EMKdp\" id=\"EMKdp\"><span data-lake-id=\"uea487299\" id=\"uea487299\">（2）最短作业优先</span></h5><p data-lake-id=\"ubc3a5f31\" id=\"ubc3a5f31\"><span data-lake-id=\"udf8c5502\" id=\"udf8c5502\">当输入队列中有若干个同等重要的作业被启动时，调度程序应使用最短作业优先算法。</span></p><p data-lake-id=\"ufe32b149\" id=\"ufe32b149\"><span data-lake-id=\"ud7df2243\" id=\"ud7df2243\">只有在所有的作业都可同时运行的情形下，最短作业优先算法才是最优化的。</span></p><h5 data-lake-id=\"JJnqV\" id=\"JJnqV\"><span data-lake-id=\"u24b9d543\" id=\"u24b9d543\">（3）最短剩余时间优先</span></h5><p data-lake-id=\"u3010b7f8\" id=\"u3010b7f8\"><span data-lake-id=\"uf487b0bb\" id=\"uf487b0bb\">最短作业优先的抢占式版本是最短剩余时间优先算法。使用这个算法，调度程序总是选择剩余运行时间最短的那个进程运行。</span></p><h4 data-lake-id=\"dwQCf\" id=\"dwQCf\"><span data-lake-id=\"u469ba4d5\" id=\"u469ba4d5\">5. 交互式系统中的调度</span></h4><h4 data-lake-id=\"fO2OV\" id=\"fO2OV\"><span data-lake-id=\"ue99178ee\" id=\"ue99178ee\">（1）轮转调度</span></h4><p data-lake-id=\"u1e559454\" id=\"u1e559454\"><span data-lake-id=\"u81981a8e\" id=\"u81981a8e\">一种最古老、最简单、最公平且使用最广的算法是轮转调度。每个进程被分配一个时间段，称为时间片，即允许该进程在该时间段中运行。如果在时间片结束时该进程还在运行，则将剥夺 CPU 并分配给另一个进程。如果该进程在时间片结束前阻塞或结束，则 CPU 立即进行切换。</span></p><p data-lake-id=\"u224f9d71\" id=\"u224f9d71\"><span data-lake-id=\"uee1d9adb\" id=\"uee1d9adb\">需要注意的是，时间片设得太短会导致过多的进程切换，降低了 CPU 效率；而设得太长又可能引起对短的交互请求的响应时间变长。将时间片设为 20ms ～ 50 ms 通常是一个比较合理的折中。</span></p><h4 data-lake-id=\"Ba7T2\" id=\"Ba7T2\"><span data-lake-id=\"ube9a6544\" id=\"ube9a6544\">（2）优先级调度</span></h4><p data-lake-id=\"u09976307\" id=\"u09976307\"><span data-lake-id=\"u2003d5ae\" id=\"u2003d5ae\">每个进程被赋予一个优先级，允许优先级最高的可运行进程先运行。为了防止高优先级进程无休止地运行下去，调度程序可以在每个时钟滴答（即每个时钟中断）降低当前进程的优先级。如果这个动作导致该进程的优先级低于次高优先级的进程，则进行进程切换。</span></p><h4 data-lake-id=\"IlGFC\" id=\"IlGFC\"><span data-lake-id=\"u5917db16\" id=\"u5917db16\">（3）多级队列</span></h4><p data-lake-id=\"ua32667cd\" id=\"ua32667cd\"><span data-lake-id=\"ucf50528a\" id=\"ucf50528a\">将一组进程按优先级分成若干类，并且在各类之间采用优先级调度，而在各类进程的内部采用其他调度方式。</span></p><h4 data-lake-id=\"M5koO\" id=\"M5koO\"><span data-lake-id=\"u8a0f6def\" id=\"u8a0f6def\">（4）最短进程优先</span></h4><p data-lake-id=\"ua78aa1f4\" id=\"ua78aa1f4\"><span data-lake-id=\"u472d3be8\" id=\"u472d3be8\">对于批处理系统而言，由于最短作业优先常常伴随着最短响应时间，所以如果能够把它用于交互进程，那将是非常好的。</span></p><h4 data-lake-id=\"WvdTq\" id=\"WvdTq\"><span data-lake-id=\"u2fb99e2b\" id=\"u2fb99e2b\">（5）保证调度</span></h4><p data-lake-id=\"udd72c108\" id=\"udd72c108\"><span data-lake-id=\"u636dcb0b\" id=\"u636dcb0b\">向用户作出明确的性能保证，然后去实现它。</span></p><p data-lake-id=\"ua46e3f5a\" id=\"ua46e3f5a\"><span data-lake-id=\"ucdd9b928\" id=\"ucdd9b928\">一种很实际并很容易实现的保证是：若用户工作时有 n 个用户登录，则用户将获得 CPU 处理能力的 1/n 。类似地，在一个有 n 个进程运行的单用户系统中，若所有的进程都等价，则每个进程将获得 1/n 的 CPU 时间。看上去足够公平了。</span></p><h4 data-lake-id=\"Tiqaa\" id=\"Tiqaa\"><span data-lake-id=\"uf7e3f658\" id=\"uf7e3f658\">（6）彩票调度</span></h4><p data-lake-id=\"u3fbc1674\" id=\"u3fbc1674\"><span data-lake-id=\"u6f7bb7f8\" id=\"u6f7bb7f8\">向进程提供各种系统资源（如 CPU 时间）的彩票。一旦需要做出一项调度决策时，就随机抽出一张彩票，拥有该彩票的进程获得该资源。在应用到 CPU 调度时，系统可以掌握每秒钟 50 次的一种彩票，作为奖励每个获奖者可以得到 20 ms 的 CPU 时间。</span></p><h4 data-lake-id=\"NnMcu\" id=\"NnMcu\"><span data-lake-id=\"u03a79107\" id=\"u03a79107\">（7）公平分享调度</span></h4><p data-lake-id=\"ubd1fe371\" id=\"ubd1fe371\"><span data-lake-id=\"u04dce58e\" id=\"u04dce58e\">到现在为止，我们假设被调度的都是各个进程自身，并不关注其所有者是谁。</span></p><p data-lake-id=\"u4b154840\" id=\"u4b154840\"><span data-lake-id=\"ue7b476be\" id=\"ue7b476be\">为了避免这种情形，某些系统在调度处理之前考虑谁拥有进程这一因素。在这种模式中，每个用户分配到 CPU 时间的一部分，而调度程序以一种强制的方式选择进程。这样，如果两个用户都得到获得 50% CPU 时间的保证，那么无论一个用户有多少进程存在，每个用户都会得到应有的 CPU 份额。</span></p><h4 data-lake-id=\"QdPKK\" id=\"QdPKK\"><span data-lake-id=\"uc20dcec8\" id=\"uc20dcec8\">6. 策略和机制</span></h4><p data-lake-id=\"ua4939001\" id=\"ua4939001\"><span data-lake-id=\"u0a3e3e23\" id=\"u0a3e3e23\">我们讨论的调度算法中没有一个算法从用户进程接收有关的调度决策信息，这就导致了调度程序很少能够做出最优的选择。</span></p><p data-lake-id=\"u99c11fa4\" id=\"u99c11fa4\"><span data-lake-id=\"ua0bc1058\" id=\"ua0bc1058\">解决问题的方法是将调度机制与调度策略分离，也就是将调度算法以某种形式参数化，而参数可以由用户进程填写。</span></p><p data-lake-id=\"ub0498032\" id=\"ub0498032\"><span data-lake-id=\"uf5d17757\" id=\"uf5d17757\">在这里，调度机制位于内核，而调度策略则由用户进程决定。</span></p>",
  "public": 0,
  "status": 1,
  "likes_count": 0,
  "read_count": 0,
  "hits": 0,
  "comments_count": 0,
  "word_count": 12924,
  "created_at": "2022-04-04T11:33:58.000Z",
  "updated_at": "2023-11-18T08:01:21.000Z",
  "content_updated_at": "2023-11-18T08:01:20.000Z",
  "published_at": "2023-11-18T08:01:20.000Z",
  "first_published_at": "2022-04-04T11:33:57.644Z",
  "book": {
    "id": 26225124,
    "type": "Book",
    "slug": "mxunh7",
    "name": "八股文 eight-part essay writing",
    "user_id": 732231,
    "description": "前端八股文",
    "toc_yml": "- type: META\n  count: 266\n  display_level: 1\n  tail_type: UPDATED_AT\n  base_version_id: 372566485\n  published: true\n  max_level: 3\n  last_updated_at: 2023-11-19T17:42:04.477Z\n  version_id: 372566559\n- type: TITLE\n  title: Html\n  uuid: SGxU5CjqNEcbiuCZ\n  url: ''\n  prev_uuid: ''\n  sibling_uuid: zGMd5d7cJrlxTWC4\n  child_uuid: mg4resPTI5OX8qJv\n  parent_uuid: ''\n  doc_id: ''\n  level: 0\n  id: ''\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: DOM 和 BOM\n  uuid: mg4resPTI5OX8qJv\n  url: wi8m4d\n  prev_uuid: SGxU5CjqNEcbiuCZ\n  sibling_uuid: 0QwKgmDym3ugd0Sy\n  child_uuid: ''\n  parent_uuid: SGxU5CjqNEcbiuCZ\n  doc_id: 72212235\n  level: 1\n  id: 72212235\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 行内元素、块元素、空元素\n  uuid: 0QwKgmDym3ugd0Sy\n  url: iiw9gy\n  prev_uuid: mg4resPTI5OX8qJv\n  sibling_uuid: pSprvwAkoJCOsbn4\n  child_uuid: ''\n  parent_uuid: SGxU5CjqNEcbiuCZ\n  doc_id: 72212238\n  level: 1\n  id: 72212238\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: web worker\n  uuid: pSprvwAkoJCOsbn4\n  url: orgrng\n  prev_uuid: 0QwKgmDym3ugd0Sy\n  sibling_uuid: M9_OGyccVAlBlvhk\n  child_uuid: ''\n  parent_uuid: SGxU5CjqNEcbiuCZ\n  doc_id: 72212240\n  level: 1\n  id: 72212240\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: html5 离线储存相关问题\n  uuid: M9_OGyccVAlBlvhk\n  url: lefokp\n  prev_uuid: pSprvwAkoJCOsbn4\n  sibling_uuid: YJKrEyielhl4Nuav\n  child_uuid: ''\n  parent_uuid: SGxU5CjqNEcbiuCZ\n  doc_id: 72212243\n  level: 1\n  id: 72212243\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: html5 拖拽 api\n  uuid: YJKrEyielhl4Nuav\n  url: lfb4ol\n  prev_uuid: M9_OGyccVAlBlvhk\n  sibling_uuid: yh3hn6VjMiW-J-D0\n  child_uuid: ''\n  parent_uuid: SGxU5CjqNEcbiuCZ\n  doc_id: 72212244\n  level: 1\n  id: 72212244\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: <script>标签\n  uuid: yh3hn6VjMiW-J-D0\n  url: qtgnxp\n  prev_uuid: YJKrEyielhl4Nuav\n  sibling_uuid: ''\n  child_uuid: ''\n  parent_uuid: SGxU5CjqNEcbiuCZ\n  doc_id: 72212241\n  level: 1\n  id: 72212241\n  open_window: 0\n  visible: 1\n- type: TITLE\n  title: CSS\n  uuid: zGMd5d7cJrlxTWC4\n  url: ''\n  prev_uuid: SGxU5CjqNEcbiuCZ\n  sibling_uuid: qhr80Kgya8JXe694\n  child_uuid: 0DPnkW0dsw8oLLr1\n  parent_uuid: ''\n  doc_id: ''\n  level: 0\n  id: ''\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 盒模型\n  uuid: 0DPnkW0dsw8oLLr1\n  url: cthggr\n  prev_uuid: zGMd5d7cJrlxTWC4\n  sibling_uuid: vip2qlmBz5ieS09L\n  child_uuid: ''\n  parent_uuid: zGMd5d7cJrlxTWC4\n  doc_id: 72212182\n  level: 1\n  id: 72212182\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: CSS 选择器优先级\n  uuid: vip2qlmBz5ieS09L\n  url: ho82xg\n  prev_uuid: 0DPnkW0dsw8oLLr1\n  sibling_uuid: aKI0hRvFJqqxjonJ\n  child_uuid: ''\n  parent_uuid: zGMd5d7cJrlxTWC4\n  doc_id: 72212058\n  level: 1\n  id: 72212058\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: CSS 中可继承和不可继承的元素\n  uuid: aKI0hRvFJqqxjonJ\n  url: wfdzgn\n  prev_uuid: vip2qlmBz5ieS09L\n  sibling_uuid: mTH7crgTT4xe8CWt\n  child_uuid: ''\n  parent_uuid: zGMd5d7cJrlxTWC4\n  doc_id: 76189714\n  level: 1\n  id: 76189714\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: CSS3的新特性\n  uuid: mTH7crgTT4xe8CWt\n  url: ag74vy\n  prev_uuid: aKI0hRvFJqqxjonJ\n  sibling_uuid: ZnPd4wAZb2_hK2P9\n  child_uuid: ''\n  parent_uuid: zGMd5d7cJrlxTWC4\n  doc_id: 76189695\n  level: 1\n  id: 76189695\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 重排(回流) reflow 和重绘 repaint\n  uuid: ZnPd4wAZb2_hK2P9\n  url: vm3nkg\n  prev_uuid: mTH7crgTT4xe8CWt\n  sibling_uuid: rWlv7dJ62sVgcOEs\n  child_uuid: ''\n  parent_uuid: zGMd5d7cJrlxTWC4\n  doc_id: 72212190\n  level: 1\n  id: 72212190\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: bfc 块级格式化上下文\n  uuid: rWlv7dJ62sVgcOEs\n  url: px9dg8\n  prev_uuid: ZnPd4wAZb2_hK2P9\n  sibling_uuid: tuDf776mK4wcCPyG\n  child_uuid: ''\n  parent_uuid: zGMd5d7cJrlxTWC4\n  doc_id: 72212187\n  level: 1\n  id: 72212187\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: flex 相关内容\n  uuid: tuDf776mK4wcCPyG\n  url: kwodx6\n  prev_uuid: rWlv7dJ62sVgcOEs\n  sibling_uuid: yUgkQgmvFErkPa3s\n  child_uuid: ''\n  parent_uuid: zGMd5d7cJrlxTWC4\n  doc_id: 72212060\n  level: 1\n  id: 72212060\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 常见的 css 布局单位\n  uuid: yUgkQgmvFErkPa3s\n  url: hxcsv4\n  prev_uuid: tuDf776mK4wcCPyG\n  sibling_uuid: aVEVYdIPl8W6T6Xi\n  child_uuid: ''\n  parent_uuid: zGMd5d7cJrlxTWC4\n  doc_id: 76176536\n  level: 1\n  id: 76176536\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 隐藏元素的方法有哪些\n  uuid: aVEVYdIPl8W6T6Xi\n  url: zgnzmd\n  prev_uuid: yUgkQgmvFErkPa3s\n  sibling_uuid: YtmH8avhvYJB9UyF\n  child_uuid: ''\n  parent_uuid: zGMd5d7cJrlxTWC4\n  doc_id: 76166645\n  level: 1\n  id: 76166645\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 布局相关\n  uuid: YtmH8avhvYJB9UyF\n  url: krwdmg\n  prev_uuid: aVEVYdIPl8W6T6Xi\n  sibling_uuid: CrSjsBkXMs-MCWSW\n  child_uuid: ''\n  parent_uuid: zGMd5d7cJrlxTWC4\n  doc_id: 72212185\n  level: 1\n  id: 72212185\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: position\n  uuid: CrSjsBkXMs-MCWSW\n  url: cy8e47\n  prev_uuid: YtmH8avhvYJB9UyF\n  sibling_uuid: GDsMyqZGAxiud0tu\n  child_uuid: ''\n  parent_uuid: zGMd5d7cJrlxTWC4\n  doc_id: 76179418\n  level: 1\n  id: 76179418\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: line-height 继承\n  uuid: GDsMyqZGAxiud0tu\n  url: ov3l3t\n  prev_uuid: CrSjsBkXMs-MCWSW\n  sibling_uuid: 8IbRucskyeohIYm9\n  child_uuid: ''\n  parent_uuid: zGMd5d7cJrlxTWC4\n  doc_id: 72212191\n  level: 1\n  id: 72212191\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: transition 和 animation 的区别\n  uuid: 8IbRucskyeohIYm9\n  url: dxfgvc\n  prev_uuid: GDsMyqZGAxiud0tu\n  sibling_uuid: ''\n  child_uuid: ''\n  parent_uuid: zGMd5d7cJrlxTWC4\n  doc_id: 72212248\n  level: 1\n  id: 72212248\n  open_window: 0\n  visible: 1\n- type: TITLE\n  title: JavaScript\n  uuid: qhr80Kgya8JXe694\n  url: ''\n  prev_uuid: zGMd5d7cJrlxTWC4\n  sibling_uuid: OvNosf5MpHIChAgK\n  child_uuid: 90tldmEuBBJgWC3T\n  parent_uuid: ''\n  doc_id: ''\n  level: 0\n  id: ''\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 事件相关\n  uuid: 90tldmEuBBJgWC3T\n  url: nt0p86\n  prev_uuid: qhr80Kgya8JXe694\n  sibling_uuid: xIU5xQr1JMCVH5cA\n  child_uuid: ''\n  parent_uuid: qhr80Kgya8JXe694\n  doc_id: 74888813\n  level: 1\n  id: 74888813\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: this 指向\n  uuid: xIU5xQr1JMCVH5cA\n  url: gg150b\n  prev_uuid: 90tldmEuBBJgWC3T\n  sibling_uuid: 6Ar0J-_X29oI3wTB\n  child_uuid: ''\n  parent_uuid: qhr80Kgya8JXe694\n  doc_id: 75890758\n  level: 1\n  id: 75890758\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 什么是 JavaScript 中的包装类型？\n  uuid: 6Ar0J-_X29oI3wTB\n  url: wzg6fe\n  prev_uuid: xIU5xQr1JMCVH5cA\n  sibling_uuid: Qa3xCtxz7N6SItvm\n  child_uuid: ''\n  parent_uuid: qhr80Kgya8JXe694\n  doc_id: 72212229\n  level: 1\n  id: 72212229\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 判断数据类型的方式\n  uuid: Qa3xCtxz7N6SItvm\n  url: sbc1s5\n  prev_uuid: 6Ar0J-_X29oI3wTB\n  sibling_uuid: YAfKsOzxyHtggeH_\n  child_uuid: ''\n  parent_uuid: qhr80Kgya8JXe694\n  doc_id: 72212065\n  level: 1\n  id: 72212065\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 简述 0.1 + 0.2 !== 0.3 的原因\n  uuid: YAfKsOzxyHtggeH_\n  url: tbg0o2\n  prev_uuid: Qa3xCtxz7N6SItvm\n  sibling_uuid: auBZlGsXZ8oosiPU\n  child_uuid: ''\n  parent_uuid: qhr80Kgya8JXe694\n  doc_id: 72212193\n  level: 1\n  id: 72212193\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 内存和垃圾回收\n  uuid: auBZlGsXZ8oosiPU\n  url: ppt4fu\n  prev_uuid: YAfKsOzxyHtggeH_\n  sibling_uuid: 8PafJn7x0wmhigct\n  child_uuid: ''\n  parent_uuid: qhr80Kgya8JXe694\n  doc_id: 72212089\n  level: 1\n  id: 72212089\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: weakMap 和 weakSet\n  uuid: 8PafJn7x0wmhigct\n  url: gc9gp1\n  prev_uuid: auBZlGsXZ8oosiPU\n  sibling_uuid: WIf4vWi3HiZT-jbp\n  child_uuid: ''\n  parent_uuid: qhr80Kgya8JXe694\n  doc_id: 72212075\n  level: 1\n  id: 72212075\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 原型和原型链\n  uuid: WIf4vWi3HiZT-jbp\n  url: bwqx2g\n  prev_uuid: 8PafJn7x0wmhigct\n  sibling_uuid: VGXlQVKMm6owjMaV\n  child_uuid: ''\n  parent_uuid: qhr80Kgya8JXe694\n  doc_id: 72212063\n  level: 1\n  id: 72212063\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 实现继承的几种方式\n  uuid: VGXlQVKMm6owjMaV\n  url: ka9kuf\n  prev_uuid: WIf4vWi3HiZT-jbp\n  sibling_uuid: qDFgKZBKSFUKwgRw\n  child_uuid: ''\n  parent_uuid: qhr80Kgya8JXe694\n  doc_id: 72212064\n  level: 1\n  id: 72212064\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 跨域相关问题\n  uuid: qDFgKZBKSFUKwgRw\n  url: iqsxnp\n  prev_uuid: VGXlQVKMm6owjMaV\n  sibling_uuid: L68hwb7H_RxeZdQZ\n  child_uuid: ''\n  parent_uuid: qhr80Kgya8JXe694\n  doc_id: 72212080\n  level: 1\n  id: 72212080\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: AMD、CMD、UMD、CJS、ESM\n  uuid: L68hwb7H_RxeZdQZ\n  url: qthk0m\n  prev_uuid: qDFgKZBKSFUKwgRw\n  sibling_uuid: t54jiUmDgvh-8Dna\n  child_uuid: ''\n  parent_uuid: qhr80Kgya8JXe694\n  doc_id: 72212318\n  level: 1\n  id: 72212318\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: symbol\n  uuid: t54jiUmDgvh-8Dna\n  url: qi5rpw\n  prev_uuid: L68hwb7H_RxeZdQZ\n  sibling_uuid: FATize3JPlnxF85T\n  child_uuid: ''\n  parent_uuid: qhr80Kgya8JXe694\n  doc_id: 72212253\n  level: 1\n  id: 72212253\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: var、let 和 const\n  uuid: FATize3JPlnxF85T\n  url: licxpw\n  prev_uuid: t54jiUmDgvh-8Dna\n  sibling_uuid: 4ca5vn6xM_z6AK2O\n  child_uuid: ''\n  parent_uuid: qhr80Kgya8JXe694\n  doc_id: 72212068\n  level: 1\n  id: 72212068\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: for...in 和 for...of 的区别\n  uuid: 4ca5vn6xM_z6AK2O\n  url: bqhdyg\n  prev_uuid: FATize3JPlnxF85T\n  sibling_uuid: xsV0pLh6zFA5xtb5\n  child_uuid: ''\n  parent_uuid: qhr80Kgya8JXe694\n  doc_id: 72212231\n  level: 1\n  id: 72212231\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: for await ... of\n  uuid: xsV0pLh6zFA5xtb5\n  url: hcf3l8\n  prev_uuid: 4ca5vn6xM_z6AK2O\n  sibling_uuid: _BNsSFR706yxUItc\n  child_uuid: ''\n  parent_uuid: qhr80Kgya8JXe694\n  doc_id: 81931436\n  level: 1\n  id: 81931436\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 异步编程的实现方式\n  uuid: _BNsSFR706yxUItc\n  url: np50n2\n  prev_uuid: xsV0pLh6zFA5xtb5\n  sibling_uuid: la7KQjlbl3MUU77q\n  child_uuid: ''\n  parent_uuid: qhr80Kgya8JXe694\n  doc_id: 72212144\n  level: 1\n  id: 72212144\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: promise\n  uuid: la7KQjlbl3MUU77q\n  url: vc6k8l\n  prev_uuid: _BNsSFR706yxUItc\n  sibling_uuid: VuY72bKRcz1OB186\n  child_uuid: ''\n  parent_uuid: qhr80Kgya8JXe694\n  doc_id: 72212247\n  level: 1\n  id: 72212247\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: generator 和 async\n  uuid: VuY72bKRcz1OB186\n  url: ga86yq\n  prev_uuid: la7KQjlbl3MUU77q\n  sibling_uuid: 8vUmcmux3iz5MIpD\n  child_uuid: ''\n  parent_uuid: qhr80Kgya8JXe694\n  doc_id: 72212086\n  level: 1\n  id: 72212086\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: proxy 和 reflect\n  uuid: 8vUmcmux3iz5MIpD\n  url: in6cx4\n  prev_uuid: VuY72bKRcz1OB186\n  sibling_uuid: c47dSKFFfqVoM6Py\n  child_uuid: ''\n  parent_uuid: qhr80Kgya8JXe694\n  doc_id: 72212102\n  level: 1\n  id: 72212102\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: JavaScript 模块化\n  uuid: c47dSKFFfqVoM6Py\n  url: cakiwz\n  prev_uuid: 8vUmcmux3iz5MIpD\n  sibling_uuid: MAfl3GuGUP59jy4n\n  child_uuid: ''\n  parent_uuid: qhr80Kgya8JXe694\n  doc_id: 72212084\n  level: 1\n  id: 72212084\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: new 和 Object.create\n  uuid: MAfl3GuGUP59jy4n\n  url: gyo93k\n  prev_uuid: c47dSKFFfqVoM6Py\n  sibling_uuid: Je23tJi-nQnJPq9r\n  child_uuid: ''\n  parent_uuid: qhr80Kgya8JXe694\n  doc_id: 72212066\n  level: 1\n  id: 72212066\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 闭包\n  uuid: Je23tJi-nQnJPq9r\n  url: lfs5gz\n  prev_uuid: MAfl3GuGUP59jy4n\n  sibling_uuid: _fhtToBbga9ohrYS\n  child_uuid: ''\n  parent_uuid: qhr80Kgya8JXe694\n  doc_id: 72212077\n  level: 1\n  id: 72212077\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 事件源\n  uuid: _fhtToBbga9ohrYS\n  url: gt06mk\n  prev_uuid: Je23tJi-nQnJPq9r\n  sibling_uuid: U5MgBMWzTsB1RYDu\n  child_uuid: ''\n  parent_uuid: qhr80Kgya8JXe694\n  doc_id: 72212088\n  level: 1\n  id: 72212088\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: ajax、jsonp、fetch\n  uuid: U5MgBMWzTsB1RYDu\n  url: irz8zx\n  prev_uuid: _fhtToBbga9ohrYS\n  sibling_uuid: bZdDm2XJBJD0pj9w\n  child_uuid: ''\n  parent_uuid: qhr80Kgya8JXe694\n  doc_id: 72212076\n  level: 1\n  id: 72212076\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: preload、prefetch、preconnect 以及 dns-prefetch\n  uuid: bZdDm2XJBJD0pj9w\n  url: fvfmxc\n  prev_uuid: U5MgBMWzTsB1RYDu\n  sibling_uuid: MW2JSrYEi0wxSNq3\n  child_uuid: ''\n  parent_uuid: qhr80Kgya8JXe694\n  doc_id: 72212183\n  level: 1\n  id: 72212183\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 正则表达式\n  uuid: MW2JSrYEi0wxSNq3\n  url: cw2t02\n  prev_uuid: bZdDm2XJBJD0pj9w\n  sibling_uuid: S00dNihJnQ2cS5Vm\n  child_uuid: ''\n  parent_uuid: qhr80Kgya8JXe694\n  doc_id: 72212027\n  level: 1\n  id: 72212027\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 常见的位运算符有哪些, 其计算规则是什么\n  uuid: S00dNihJnQ2cS5Vm\n  url: iz1yst\n  prev_uuid: MW2JSrYEi0wxSNq3\n  sibling_uuid: 2wcsFBtYfQic5eiX\n  child_uuid: ''\n  parent_uuid: qhr80Kgya8JXe694\n  doc_id: 72212227\n  level: 1\n  id: 72212227\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: Unicode、UTF-8、UTF-16、UTF-32有什么区别\n  uuid: 2wcsFBtYfQic5eiX\n  url: es6bst\n  prev_uuid: S00dNihJnQ2cS5Vm\n  sibling_uuid: gbTtC2RHHJkC7-3a\n  child_uuid: ''\n  parent_uuid: qhr80Kgya8JXe694\n  doc_id: 72212226\n  level: 1\n  id: 72212226\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: escape、encodeURI、encodeURIComponent 的区别\n  uuid: gbTtC2RHHJkC7-3a\n  url: kbmg21\n  prev_uuid: 2wcsFBtYfQic5eiX\n  sibling_uuid: MObHc4irNOQbHvIR\n  child_uuid: ''\n  parent_uuid: qhr80Kgya8JXe694\n  doc_id: 72212232\n  level: 1\n  id: 72212232\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 为什么 proxy 不能被 polyfill\n  uuid: MObHc4irNOQbHvIR\n  url: hduwrh\n  prev_uuid: gbTtC2RHHJkC7-3a\n  sibling_uuid: jkZPHqL1CpgItML8\n  child_uuid: ''\n  parent_uuid: qhr80Kgya8JXe694\n  doc_id: 72212145\n  level: 1\n  id: 72212145\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 观察者模式和发布订阅模式的对比\n  uuid: jkZPHqL1CpgItML8\n  url: aywgrn\n  prev_uuid: MObHc4irNOQbHvIR\n  sibling_uuid: ''\n  child_uuid: ''\n  parent_uuid: qhr80Kgya8JXe694\n  doc_id: 72212180\n  level: 1\n  id: 72212180\n  open_window: 0\n  visible: 1\n- type: TITLE\n  title: 计算机网络\n  uuid: OvNosf5MpHIChAgK\n  url: ''\n  prev_uuid: qhr80Kgya8JXe694\n  sibling_uuid: yZ8pnWcSAgj7NDG4\n  child_uuid: qubg071rD6LP4TBM\n  parent_uuid: ''\n  doc_id: ''\n  level: 0\n  id: ''\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: tcp 三次握手四次挥手\n  uuid: qubg071rD6LP4TBM\n  url: yuqbh0\n  prev_uuid: OvNosf5MpHIChAgK\n  sibling_uuid: pA-xEh0trbi9z6_g\n  child_uuid: ''\n  parent_uuid: OvNosf5MpHIChAgK\n  doc_id: 72212095\n  level: 1\n  id: 72212095\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: http 协议和 https 协议\n  uuid: pA-xEh0trbi9z6_g\n  url: zm62x4\n  prev_uuid: qubg071rD6LP4TBM\n  sibling_uuid: y_o_p-E2Tzle62mJ\n  child_uuid: ''\n  parent_uuid: OvNosf5MpHIChAgK\n  doc_id: 72212085\n  level: 1\n  id: 72212085\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 浏览器缓存\n  uuid: y_o_p-E2Tzle62mJ\n  url: boce40\n  prev_uuid: pA-xEh0trbi9z6_g\n  sibling_uuid: ZQYAdT9uiq69c3iA\n  child_uuid: ''\n  parent_uuid: OvNosf5MpHIChAgK\n  doc_id: 72212079\n  level: 1\n  id: 72212079\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: http 请求的 method\n  uuid: ZQYAdT9uiq69c3iA\n  url: fpmvpg\n  prev_uuid: y_o_p-E2Tzle62mJ\n  sibling_uuid: HgR76Gj7y9kNTaYe\n  child_uuid: ''\n  parent_uuid: OvNosf5MpHIChAgK\n  doc_id: 88490090\n  level: 1\n  id: 88490090\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: get 和 post 的区别\n  uuid: HgR76Gj7y9kNTaYe\n  url: nk4fw8\n  prev_uuid: ZQYAdT9uiq69c3iA\n  sibling_uuid: PoOSFrO1TLcXG4PY\n  child_uuid: ''\n  parent_uuid: OvNosf5MpHIChAgK\n  doc_id: 72212130\n  level: 1\n  id: 72212130\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: cookie、session、localStorage和sessionStorage\n  uuid: PoOSFrO1TLcXG4PY\n  url: bk9qnc\n  prev_uuid: HgR76Gj7y9kNTaYe\n  sibling_uuid: hhsYEiBi4CZOy9Ch\n  child_uuid: ''\n  parent_uuid: OvNosf5MpHIChAgK\n  doc_id: 81366952\n  level: 1\n  id: 81366952\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: jwt\n  uuid: hhsYEiBi4CZOy9Ch\n  url: bl6emu\n  prev_uuid: PoOSFrO1TLcXG4PY\n  sibling_uuid: fJfHmbBBr_GxAcan\n  child_uuid: ''\n  parent_uuid: OvNosf5MpHIChAgK\n  doc_id: 81941261\n  level: 1\n  id: 81941261\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 常见的 http 状态码\n  uuid: fJfHmbBBr_GxAcan\n  url: imp49b\n  prev_uuid: hhsYEiBi4CZOy9Ch\n  sibling_uuid: zgVX7fTpDl2L9-6c\n  child_uuid: ''\n  parent_uuid: OvNosf5MpHIChAgK\n  doc_id: 72212093\n  level: 1\n  id: 72212093\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: lru 缓存机制\n  uuid: zgVX7fTpDl2L9-6c\n  url: gn5mcc\n  prev_uuid: fJfHmbBBr_GxAcan\n  sibling_uuid: JD3qXMjL2VUr4-BG\n  child_uuid: ''\n  parent_uuid: OvNosf5MpHIChAgK\n  doc_id: 81944011\n  level: 1\n  id: 81944011\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: dns 协议\n  uuid: JD3qXMjL2VUr4-BG\n  url: dg4tg1\n  prev_uuid: zgVX7fTpDl2L9-6c\n  sibling_uuid: qhoie0g9LgYGDoNx\n  child_uuid: ''\n  parent_uuid: OvNosf5MpHIChAgK\n  doc_id: 72212129\n  level: 1\n  id: 72212129\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: webSocket 协议\n  uuid: qhoie0g9LgYGDoNx\n  url: fzwma6\n  prev_uuid: JD3qXMjL2VUr4-BG\n  sibling_uuid: Z74gvBr6M7cblG3L\n  child_uuid: ''\n  parent_uuid: OvNosf5MpHIChAgK\n  doc_id: 72212082\n  level: 1\n  id: 72212082\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: udp 协议\n  uuid: Z74gvBr6M7cblG3L\n  url: bcw1ix\n  prev_uuid: qhoie0g9LgYGDoNx\n  sibling_uuid: ZBAYX-mmHJMSbNVE\n  child_uuid: ''\n  parent_uuid: OvNosf5MpHIChAgK\n  doc_id: 72212245\n  level: 1\n  id: 72212245\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 前端安全\n  uuid: ZBAYX-mmHJMSbNVE\n  url: ae6e6m\n  prev_uuid: Z74gvBr6M7cblG3L\n  sibling_uuid: 46cFvee2l7mbrO25\n  child_uuid: ''\n  parent_uuid: OvNosf5MpHIChAgK\n  doc_id: 72212081\n  level: 1\n  id: 72212081\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 从 url 输入到页面渲染整个过程\n  uuid: 46cFvee2l7mbrO25\n  url: xq8v88\n  prev_uuid: ZBAYX-mmHJMSbNVE\n  sibling_uuid: 0kA-zwowKG0pX0PW\n  child_uuid: ''\n  parent_uuid: OvNosf5MpHIChAgK\n  doc_id: 72212083\n  level: 1\n  id: 72212083\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: http 请求方法的 options 方法的作用\n  uuid: 0kA-zwowKG0pX0PW\n  url: sg1n3n\n  prev_uuid: 46cFvee2l7mbrO25\n  sibling_uuid: Jw389HdGLryB0kOx\n  child_uuid: ''\n  parent_uuid: OvNosf5MpHIChAgK\n  doc_id: 72212141\n  level: 1\n  id: 72212141\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: tls/ssl 中为什么一定要用三个随机数，来生成会话密钥？\n  uuid: Jw389HdGLryB0kOx\n  url: gcggsc\n  prev_uuid: 0kA-zwowKG0pX0PW\n  sibling_uuid: pakLg61uoUeNvIdr\n  child_uuid: ''\n  parent_uuid: OvNosf5MpHIChAgK\n  doc_id: 72212132\n  level: 1\n  id: 72212132\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: ssl 连接断开后如何恢复\n  uuid: pakLg61uoUeNvIdr\n  url: nzhppv\n  prev_uuid: Jw389HdGLryB0kOx\n  sibling_uuid: JpyBYsq-UVyD8CUJ\n  child_uuid: ''\n  parent_uuid: OvNosf5MpHIChAgK\n  doc_id: 72212133\n  level: 1\n  id: 72212133\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: rsa 算法的安全性保障\n  uuid: JpyBYsq-UVyD8CUJ\n  url: am614q\n  prev_uuid: pakLg61uoUeNvIdr\n  sibling_uuid: tOZ4EaNrn_pQcc61\n  child_uuid: ''\n  parent_uuid: OvNosf5MpHIChAgK\n  doc_id: 72212131\n  level: 1\n  id: 72212131\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: dns 为什么使用 udp 协议作为传输层协议\n  uuid: tOZ4EaNrn_pQcc61\n  url: vxqwd7\n  prev_uuid: JpyBYsq-UVyD8CUJ\n  sibling_uuid: TxInBprdnCiNVH3Q\n  child_uuid: ''\n  parent_uuid: OvNosf5MpHIChAgK\n  doc_id: 72212135\n  level: 1\n  id: 72212135\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: cdn 服务\n  uuid: TxInBprdnCiNVH3Q\n  url: yo63o7\n  prev_uuid: tOZ4EaNrn_pQcc61\n  sibling_uuid: Nib9sks0CPJxeqmk\n  child_uuid: ''\n  parent_uuid: OvNosf5MpHIChAgK\n  doc_id: 72212136\n  level: 1\n  id: 72212136\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 正向代理和反向代理\n  uuid: Nib9sks0CPJxeqmk\n  url: ikn00f\n  prev_uuid: TxInBprdnCiNVH3Q\n  sibling_uuid: AfxQwTWEwbMgjd4o\n  child_uuid: ''\n  parent_uuid: OvNosf5MpHIChAgK\n  doc_id: 72212134\n  level: 1\n  id: 72212134\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 负载平衡的两种实现方式\n  uuid: AfxQwTWEwbMgjd4o\n  url: kh4w6x\n  prev_uuid: Nib9sks0CPJxeqmk\n  sibling_uuid: TnQes05_sAmm18E2\n  child_uuid: ''\n  parent_uuid: OvNosf5MpHIChAgK\n  doc_id: 72212138\n  level: 1\n  id: 72212138\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 即时通讯的实现，短轮询、长轮询、SSE 和 WebSocket 间的区别\n  uuid: TnQes05_sAmm18E2\n  url: rsxa0f\n  prev_uuid: AfxQwTWEwbMgjd4o\n  sibling_uuid: Qi2IZ6HU4mYUaoGj\n  child_uuid: ''\n  parent_uuid: OvNosf5MpHIChAgK\n  doc_id: 72212139\n  level: 1\n  id: 72212139\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 如何实现多个网站之间共享登陆状态\n  uuid: Qi2IZ6HU4mYUaoGj\n  url: kc3lut\n  prev_uuid: TnQes05_sAmm18E2\n  sibling_uuid: ''\n  child_uuid: ''\n  parent_uuid: OvNosf5MpHIChAgK\n  doc_id: 72212142\n  level: 1\n  id: 72212142\n  open_window: 0\n  visible: 1\n- type: TITLE\n  title: 框架\n  uuid: yZ8pnWcSAgj7NDG4\n  url: ''\n  prev_uuid: OvNosf5MpHIChAgK\n  sibling_uuid: 9P2eq3K9ULR0af5X\n  child_uuid: 8RK2le4DpAEY0Xhs\n  parent_uuid: ''\n  doc_id: ''\n  level: 0\n  id: ''\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: MVVM、MVC、MVP 的区别\n  uuid: 8RK2le4DpAEY0Xhs\n  url: nnwww9\n  prev_uuid: yZ8pnWcSAgj7NDG4\n  sibling_uuid: 3B-5QM6whAr8xbJa\n  child_uuid: ''\n  parent_uuid: yZ8pnWcSAgj7NDG4\n  doc_id: 72212201\n  level: 1\n  id: 72212201\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: template 和 jsx 的区别\n  uuid: 3B-5QM6whAr8xbJa\n  url: ki7zks\n  prev_uuid: 8RK2le4DpAEY0Xhs\n  sibling_uuid: DkeXEgTb0ATztbj5\n  child_uuid: ''\n  parent_uuid: yZ8pnWcSAgj7NDG4\n  doc_id: 72212199\n  level: 1\n  id: 72212199\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: vue 和 react 的对比\n  uuid: DkeXEgTb0ATztbj5\n  url: nm61qs\n  prev_uuid: 3B-5QM6whAr8xbJa\n  sibling_uuid: myf4AFewp6Q9j0jB\n  child_uuid: ''\n  parent_uuid: yZ8pnWcSAgj7NDG4\n  doc_id: 72212222\n  level: 1\n  id: 72212222\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 虚拟 dom\n  uuid: myf4AFewp6Q9j0jB\n  url: hmvf8u\n  prev_uuid: DkeXEgTb0ATztbj5\n  sibling_uuid: 6fj1Su82FQx4B9RA\n  child_uuid: ''\n  parent_uuid: yZ8pnWcSAgj7NDG4\n  doc_id: 72212052\n  level: 1\n  id: 72212052\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: diff 算法\n  uuid: 6fj1Su82FQx4B9RA\n  url: op7dg1\n  prev_uuid: myf4AFewp6Q9j0jB\n  sibling_uuid: KZOzseU257YUuz3Z\n  child_uuid: nsUtw5_Fy4zD43hj\n  parent_uuid: yZ8pnWcSAgj7NDG4\n  doc_id: 72212178\n  level: 1\n  id: 72212178\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: vue diff 算法\n  uuid: nsUtw5_Fy4zD43hj\n  url: diavmt\n  prev_uuid: 6fj1Su82FQx4B9RA\n  sibling_uuid: ''\n  child_uuid: ''\n  parent_uuid: 6fj1Su82FQx4B9RA\n  doc_id: 81946293\n  level: 2\n  id: 81946293\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: vue 和 react 中的 key\n  uuid: KZOzseU257YUuz3Z\n  url: ycltzx\n  prev_uuid: 6fj1Su82FQx4B9RA\n  sibling_uuid: tWIf-VANuEIzO79L\n  child_uuid: ''\n  parent_uuid: yZ8pnWcSAgj7NDG4\n  doc_id: 72212037\n  level: 1\n  id: 72212037\n  open_window: 0\n  visible: 1\n- type: TITLE\n  title: Vue\n  uuid: tWIf-VANuEIzO79L\n  url: ''\n  prev_uuid: KZOzseU257YUuz3Z\n  sibling_uuid: TDqDjUraeNpGcmKR\n  child_uuid: Z40f-xGca713sBpr\n  parent_uuid: yZ8pnWcSAgj7NDG4\n  doc_id: ''\n  level: 1\n  id: ''\n  open_window: 1\n  visible: 1\n- type: TITLE\n  title: Vue v2\n  uuid: Z40f-xGca713sBpr\n  url: ''\n  prev_uuid: tWIf-VANuEIzO79L\n  sibling_uuid: Qq1JPp61C_co9sXM\n  child_uuid: 0b7XOg1-9GQSIskY\n  parent_uuid: tWIf-VANuEIzO79L\n  doc_id: ''\n  level: 2\n  id: ''\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 模版编译原理\n  uuid: 0b7XOg1-9GQSIskY\n  url: fyz5q4\n  prev_uuid: Z40f-xGca713sBpr\n  sibling_uuid: hz8t5ak_IXT2gXfW\n  child_uuid: ''\n  parent_uuid: Z40f-xGca713sBpr\n  doc_id: 72212041\n  level: 3\n  id: 72212041\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: vue2 数据响应式原理\n  uuid: hz8t5ak_IXT2gXfW\n  url: uh28xg\n  prev_uuid: 0b7XOg1-9GQSIskY\n  sibling_uuid: _bf1hn5-uZNg51Ke\n  child_uuid: ''\n  parent_uuid: Z40f-xGca713sBpr\n  doc_id: 72212115\n  level: 3\n  id: 72212115\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 生命周期相关问题\n  uuid: _bf1hn5-uZNg51Ke\n  url: oagu14\n  prev_uuid: hz8t5ak_IXT2gXfW\n  sibling_uuid: ivG3tDP22jM4J7ts\n  child_uuid: ''\n  parent_uuid: Z40f-xGca713sBpr\n  doc_id: 72212110\n  level: 3\n  id: 72212110\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 渲染方式\n  uuid: ivG3tDP22jM4J7ts\n  url: woi8l3\n  prev_uuid: _bf1hn5-uZNg51Ke\n  sibling_uuid: LKipxSOtArQIraVN\n  child_uuid: ''\n  parent_uuid: Z40f-xGca713sBpr\n  doc_id: 72212032\n  level: 3\n  id: 72212032\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 事件绑定原理\n  uuid: LKipxSOtArQIraVN\n  url: yl9mmz\n  prev_uuid: ivG3tDP22jM4J7ts\n  sibling_uuid: 01R9Nnisca_sLRRp\n  child_uuid: ''\n  parent_uuid: Z40f-xGca713sBpr\n  doc_id: 72212039\n  level: 3\n  id: 72212039\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 组件缓存(keep-alive)\n  uuid: 01R9Nnisca_sLRRp\n  url: wqgptk\n  prev_uuid: LKipxSOtArQIraVN\n  sibling_uuid: 20DpKtgxdFH0O-ix\n  child_uuid: ''\n  parent_uuid: Z40f-xGca713sBpr\n  doc_id: 72212045\n  level: 3\n  id: 72212045\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: vue 组件通信方式\n  uuid: 20DpKtgxdFH0O-ix\n  url: xxds30\n  prev_uuid: 01R9Nnisca_sLRRp\n  sibling_uuid: 6wj8C6XOZFvKx1QA\n  child_uuid: ''\n  parent_uuid: Z40f-xGca713sBpr\n  doc_id: 77460672\n  level: 3\n  id: 77460672\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: nextTick 相关问题\n  uuid: 6wj8C6XOZFvKx1QA\n  url: ggyg1d\n  prev_uuid: 20DpKtgxdFH0O-ix\n  sibling_uuid: xORSK62Sn5964_kc\n  child_uuid: ''\n  parent_uuid: Z40f-xGca713sBpr\n  doc_id: 72212042\n  level: 3\n  id: 72212042\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 组件中 data 为什么是一个函数\n  uuid: xORSK62Sn5964_kc\n  url: kwsg4m\n  prev_uuid: 6wj8C6XOZFvKx1QA\n  sibling_uuid: CWb6bsasGDnvMM-U\n  child_uuid: ''\n  parent_uuid: Z40f-xGca713sBpr\n  doc_id: 72212109\n  level: 3\n  id: 72212109\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: computed 相关问题\n  uuid: CWb6bsasGDnvMM-U\n  url: zq4s02\n  prev_uuid: xORSK62Sn5964_kc\n  sibling_uuid: K939tqfx_BW5lRDQ\n  child_uuid: ''\n  parent_uuid: Z40f-xGca713sBpr\n  doc_id: 72212116\n  level: 3\n  id: 72212116\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 服务端渲染 ssr\n  uuid: K939tqfx_BW5lRDQ\n  url: pw3v8v\n  prev_uuid: CWb6bsasGDnvMM-U\n  sibling_uuid: 6kQ_DqRf_zluG2z9\n  child_uuid: ''\n  parent_uuid: Z40f-xGca713sBpr\n  doc_id: 72212043\n  level: 3\n  id: 72212043\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: vue.use 具体的功能\n  uuid: 6kQ_DqRf_zluG2z9\n  url: bvokpn\n  prev_uuid: K939tqfx_BW5lRDQ\n  sibling_uuid: YzuZXyy9c_kaJu9c\n  child_uuid: ''\n  parent_uuid: Z40f-xGca713sBpr\n  doc_id: 72212046\n  level: 3\n  id: 72212046\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 单页应用与多页应用的区别\n  uuid: YzuZXyy9c_kaJu9c\n  url: pshmo2\n  prev_uuid: 6kQ_DqRf_zluG2z9\n  sibling_uuid: jso948tO58555KH-\n  child_uuid: ''\n  parent_uuid: Z40f-xGca713sBpr\n  doc_id: 72212224\n  level: 3\n  id: 72212224\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: assets 和 static 的区别\n  uuid: jso948tO58555KH-\n  url: yyhf0u\n  prev_uuid: YzuZXyy9c_kaJu9c\n  sibling_uuid: ''\n  child_uuid: ''\n  parent_uuid: Z40f-xGca713sBpr\n  doc_id: 72212225\n  level: 3\n  id: 72212225\n  open_window: 0\n  visible: 1\n- type: TITLE\n  title: Vue v3\n  uuid: Qq1JPp61C_co9sXM\n  url: ''\n  prev_uuid: Z40f-xGca713sBpr\n  sibling_uuid: NDstnhh3QXikKrZa\n  child_uuid: s2KSqDo2LUDykK1r\n  parent_uuid: tWIf-VANuEIzO79L\n  doc_id: ''\n  level: 2\n  id: ''\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: vue3 优化的关键点\n  uuid: s2KSqDo2LUDykK1r\n  url: vcur5h\n  prev_uuid: Qq1JPp61C_co9sXM\n  sibling_uuid: bK2zh7wDgnCOjGdb\n  child_uuid: ''\n  parent_uuid: Qq1JPp61C_co9sXM\n  doc_id: 72212029\n  level: 3\n  id: 72212029\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: vue3 数据响应式原理\n  uuid: bK2zh7wDgnCOjGdb\n  url: ghc5e2\n  prev_uuid: s2KSqDo2LUDykK1r\n  sibling_uuid: uCtRLhVps5ghz54g\n  child_uuid: ''\n  parent_uuid: Qq1JPp61C_co9sXM\n  doc_id: 72212036\n  level: 3\n  id: 72212036\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: vue3 新特性\n  uuid: uCtRLhVps5ghz54g\n  url: cmegik\n  prev_uuid: bK2zh7wDgnCOjGdb\n  sibling_uuid: TJgKi8_C6fiOd5dJ\n  child_uuid: ''\n  parent_uuid: Qq1JPp61C_co9sXM\n  doc_id: 81946525\n  level: 3\n  id: 81946525\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: vue3 生命周期\n  uuid: TJgKi8_C6fiOd5dJ\n  url: gwzgib\n  prev_uuid: uCtRLhVps5ghz54g\n  sibling_uuid: horvlR4VG0faCelq\n  child_uuid: ''\n  parent_uuid: Qq1JPp61C_co9sXM\n  doc_id: 72212114\n  level: 3\n  id: 72212114\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: vue3 api 的变化\n  uuid: horvlR4VG0faCelq\n  url: cgy1qw\n  prev_uuid: TJgKi8_C6fiOd5dJ\n  sibling_uuid: T4jbFsZR0B-ev_pi\n  child_uuid: ''\n  parent_uuid: Qq1JPp61C_co9sXM\n  doc_id: 72212096\n  level: 3\n  id: 72212096\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: composition API 与 react hook 区别\n  uuid: T4jbFsZR0B-ev_pi\n  url: kdnt9x\n  prev_uuid: horvlR4VG0faCelq\n  sibling_uuid: ''\n  child_uuid: ''\n  parent_uuid: Qq1JPp61C_co9sXM\n  doc_id: 72212223\n  level: 3\n  id: 72212223\n  open_window: 0\n  visible: 1\n- type: TITLE\n  title: Vue Router\n  uuid: NDstnhh3QXikKrZa\n  url: ''\n  prev_uuid: Qq1JPp61C_co9sXM\n  sibling_uuid: OAPGa_yYZYTt0hO-\n  child_uuid: 4O6Acxrj4Z6ILMq7\n  parent_uuid: tWIf-VANuEIzO79L\n  doc_id: ''\n  level: 2\n  id: ''\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 实现原理\n  uuid: 4O6Acxrj4Z6ILMq7\n  url: bgudpr\n  prev_uuid: NDstnhh3QXikKrZa\n  sibling_uuid: 3NsmXDCnBZguoYRa\n  child_uuid: ''\n  parent_uuid: NDstnhh3QXikKrZa\n  doc_id: 72212195\n  level: 3\n  id: 72212195\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 钩子函数和执行顺序\n  uuid: 3NsmXDCnBZguoYRa\n  url: ugd6ob\n  prev_uuid: 4O6Acxrj4Z6ILMq7\n  sibling_uuid: ''\n  child_uuid: ''\n  parent_uuid: NDstnhh3QXikKrZa\n  doc_id: 72212111\n  level: 3\n  id: 72212111\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: Vuex\n  uuid: OAPGa_yYZYTt0hO-\n  url: co230y\n  prev_uuid: NDstnhh3QXikKrZa\n  sibling_uuid: ''\n  child_uuid: ''\n  parent_uuid: tWIf-VANuEIzO79L\n  doc_id: 72212048\n  level: 2\n  id: 72212048\n  open_window: 0\n  visible: 1\n- type: TITLE\n  title: React\n  uuid: TDqDjUraeNpGcmKR\n  url: ''\n  prev_uuid: tWIf-VANuEIzO79L\n  sibling_uuid: ''\n  child_uuid: TzgntU7-pdLEQIEy\n  parent_uuid: yZ8pnWcSAgj7NDG4\n  doc_id: ''\n  level: 1\n  id: ''\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: props.children 和 React.Children 的区别\n  uuid: TzgntU7-pdLEQIEy\n  url: glhczw\n  prev_uuid: TDqDjUraeNpGcmKR\n  sibling_uuid: a5LfIfk4TICUM-se\n  child_uuid: ''\n  parent_uuid: TDqDjUraeNpGcmKR\n  doc_id: 72212221\n  level: 2\n  id: 72212221\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 生命周期\n  uuid: a5LfIfk4TICUM-se\n  url: ttmkd1\n  prev_uuid: TzgntU7-pdLEQIEy\n  sibling_uuid: Xl4JcMfM03VwU1Hb\n  child_uuid: ''\n  parent_uuid: TDqDjUraeNpGcmKR\n  doc_id: 72212054\n  level: 2\n  id: 72212054\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 事件相关问题\n  uuid: Xl4JcMfM03VwU1Hb\n  url: ed4qqb\n  prev_uuid: a5LfIfk4TICUM-se\n  sibling_uuid: CepfhgK9OC8dVV7r\n  child_uuid: ''\n  parent_uuid: TDqDjUraeNpGcmKR\n  doc_id: 72212050\n  level: 2\n  id: 72212050\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: react hooks 相关问题\n  uuid: CepfhgK9OC8dVV7r\n  url: gq900o\n  prev_uuid: Xl4JcMfM03VwU1Hb\n  sibling_uuid: ubGrfyb3NqJ_Lkqn\n  child_uuid: ''\n  parent_uuid: TDqDjUraeNpGcmKR\n  doc_id: 72212057\n  level: 2\n  id: 72212057\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: setState 相关问题\n  uuid: ubGrfyb3NqJ_Lkqn\n  url: pwqm3y\n  prev_uuid: CepfhgK9OC8dVV7r\n  sibling_uuid: 4pm440hNri1XmMGQ\n  child_uuid: ''\n  parent_uuid: TDqDjUraeNpGcmKR\n  doc_id: 72212205\n  level: 2\n  id: 72212205\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: props 相关问题\n  uuid: 4pm440hNri1XmMGQ\n  url: aopf74\n  prev_uuid: ubGrfyb3NqJ_Lkqn\n  sibling_uuid: FKTcfv0hyyXraJmD\n  child_uuid: ''\n  parent_uuid: TDqDjUraeNpGcmKR\n  doc_id: 72212215\n  level: 2\n  id: 72212215\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: context 相关问题\n  uuid: FKTcfv0hyyXraJmD\n  url: biktsf\n  prev_uuid: 4pm440hNri1XmMGQ\n  sibling_uuid: Y0S-6wqJKj2EF9W2\n  child_uuid: ''\n  parent_uuid: TDqDjUraeNpGcmKR\n  doc_id: 72212210\n  level: 2\n  id: 72212210\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 高阶组件\n  uuid: Y0S-6wqJKj2EF9W2\n  url: si40mg\n  prev_uuid: FKTcfv0hyyXraJmD\n  sibling_uuid: 7NqebQUMdfbQX_co\n  child_uuid: ''\n  parent_uuid: TDqDjUraeNpGcmKR\n  doc_id: 72212094\n  level: 2\n  id: 72212094\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: react fiber\n  uuid: 7NqebQUMdfbQX_co\n  url: fheyn3\n  prev_uuid: Y0S-6wqJKj2EF9W2\n  sibling_uuid: Z3dClfuPaIaWVJrc\n  child_uuid: ''\n  parent_uuid: TDqDjUraeNpGcmKR\n  doc_id: 72212055\n  level: 2\n  id: 72212055\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: react 新版本特性\n  uuid: Z3dClfuPaIaWVJrc\n  url: yr6q8p\n  prev_uuid: 7NqebQUMdfbQX_co\n  sibling_uuid: '-FVw4r0aOtQdA3mR'\n  child_uuid: ''\n  parent_uuid: TDqDjUraeNpGcmKR\n  doc_id: 72212125\n  level: 2\n  id: 72212125\n  open_window: 0\n  visible: 1\n- type: TITLE\n  title: React Router\n  uuid: '-FVw4r0aOtQdA3mR'\n  url: ''\n  prev_uuid: Z3dClfuPaIaWVJrc\n  sibling_uuid: fMyaiZHW0XSEI8sS\n  child_uuid: mVIvxzgV48RK5_Q4\n  parent_uuid: TDqDjUraeNpGcmKR\n  doc_id: ''\n  level: 2\n  id: ''\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 实现原理\n  uuid: mVIvxzgV48RK5_Q4\n  url: wethcy\n  prev_uuid: '-FVw4r0aOtQdA3mR'\n  sibling_uuid: Bl1_fHvLILZsHBbF\n  child_uuid: ''\n  parent_uuid: '-FVw4r0aOtQdA3mR'\n  doc_id: 72212218\n  level: 3\n  id: 72212218\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: Link 和 a 标签的区别\n  uuid: Bl1_fHvLILZsHBbF\n  url: wm4ok4\n  prev_uuid: mVIvxzgV48RK5_Q4\n  sibling_uuid: ''\n  child_uuid: ''\n  parent_uuid: '-FVw4r0aOtQdA3mR'\n  doc_id: 72212179\n  level: 3\n  id: 72212179\n  open_window: 0\n  visible: 1\n- type: TITLE\n  title: React 数据管理\n  uuid: fMyaiZHW0XSEI8sS\n  url: ''\n  prev_uuid: '-FVw4r0aOtQdA3mR'\n  sibling_uuid: OeMWtixpAD2-KWzt\n  child_uuid: 59KZOAY7cpzzjK2t\n  parent_uuid: TDqDjUraeNpGcmKR\n  doc_id: ''\n  level: 2\n  id: ''\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: redux\n  uuid: 59KZOAY7cpzzjK2t\n  url: lv63wa\n  prev_uuid: fMyaiZHW0XSEI8sS\n  sibling_uuid: 04W_NxYoVNi2nw_9\n  child_uuid: ''\n  parent_uuid: fMyaiZHW0XSEI8sS\n  doc_id: 72212124\n  level: 3\n  id: 72212124\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: mobx\n  uuid: 04W_NxYoVNi2nw_9\n  url: dyi5bf\n  prev_uuid: 59KZOAY7cpzzjK2t\n  sibling_uuid: _vbvvkBStDB0r4jY\n  child_uuid: ''\n  parent_uuid: fMyaiZHW0XSEI8sS\n  doc_id: 72212126\n  level: 3\n  id: 72212126\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: redux 和 mobx 对比\n  uuid: _vbvvkBStDB0r4jY\n  url: elg7s5\n  prev_uuid: 04W_NxYoVNi2nw_9\n  sibling_uuid: ''\n  child_uuid: ''\n  parent_uuid: fMyaiZHW0XSEI8sS\n  doc_id: 72212127\n  level: 3\n  id: 72212127\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 服务端渲染 ssr\n  uuid: OeMWtixpAD2-KWzt\n  url: egaslg\n  prev_uuid: fMyaiZHW0XSEI8sS\n  sibling_uuid: MTc53b0X3W8cyi_3\n  child_uuid: ''\n  parent_uuid: TDqDjUraeNpGcmKR\n  doc_id: 72212219\n  level: 2\n  id: 72212219\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 哪些方法会触发 react 重渲染\n  uuid: MTc53b0X3W8cyi_3\n  url: qy4smk\n  prev_uuid: OeMWtixpAD2-KWzt\n  sibling_uuid: b7IhhfJU6La1DgRE\n  child_uuid: ''\n  parent_uuid: TDqDjUraeNpGcmKR\n  doc_id: 72212216\n  level: 2\n  id: 72212216\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 创建组件的几种方式\n  uuid: b7IhhfJU6La1DgRE\n  url: vg2cmd\n  prev_uuid: MTc53b0X3W8cyi_3\n  sibling_uuid: lhmlu-BvI_ms0sSC\n  child_uuid: ''\n  parent_uuid: TDqDjUraeNpGcmKR\n  doc_id: 72212175\n  level: 2\n  id: 72212175\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 组件通信的方式\n  uuid: lhmlu-BvI_ms0sSC\n  url: moqmzb\n  prev_uuid: b7IhhfJU6La1DgRE\n  sibling_uuid: amb-PuSjhZwSxODn\n  child_uuid: ''\n  parent_uuid: TDqDjUraeNpGcmKR\n  doc_id: 72212118\n  level: 2\n  id: 72212118\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: Component 和 PureComponent 的区别\n  uuid: amb-PuSjhZwSxODn\n  url: ypfivt\n  prev_uuid: lhmlu-BvI_ms0sSC\n  sibling_uuid: BNAX1KhSgOp0v6r4\n  child_uuid: ''\n  parent_uuid: TDqDjUraeNpGcmKR\n  doc_id: 72212207\n  level: 2\n  id: 72212207\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 函数式编程的理解\n  uuid: BNAX1KhSgOp0v6r4\n  url: tqdy3a\n  prev_uuid: amb-PuSjhZwSxODn\n  sibling_uuid: 5pVccocS1pnwxzh2\n  child_uuid: ''\n  parent_uuid: TDqDjUraeNpGcmKR\n  doc_id: 72212194\n  level: 2\n  id: 72212194\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 有状态组件和无状态组件的理解及使用场景\n  uuid: 5pVccocS1pnwxzh2\n  url: gbrvz9\n  prev_uuid: BNAX1KhSgOp0v6r4\n  sibling_uuid: wtp8Bo-2_zSNLXbR\n  child_uuid: ''\n  parent_uuid: TDqDjUraeNpGcmKR\n  doc_id: 72212203\n  level: 2\n  id: 72212203\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: Fragment 的理解和使用场景\n  uuid: wtp8Bo-2_zSNLXbR\n  url: dasmdx\n  prev_uuid: 5pVccocS1pnwxzh2\n  sibling_uuid: hYTp24IWi4pAhbqG\n  child_uuid: ''\n  parent_uuid: TDqDjUraeNpGcmKR\n  doc_id: 72212214\n  level: 2\n  id: 72212214\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 受控组件和非受控组件\n  uuid: hYTp24IWi4pAhbqG\n  url: bgt6ta\n  prev_uuid: wtp8Bo-2_zSNLXbR\n  sibling_uuid: ''\n  child_uuid: ''\n  parent_uuid: TDqDjUraeNpGcmKR\n  doc_id: 72212208\n  level: 2\n  id: 72212208\n  open_window: 0\n  visible: 1\n- type: TITLE\n  title: 构建工具\n  uuid: 9P2eq3K9ULR0af5X\n  url: ''\n  prev_uuid: yZ8pnWcSAgj7NDG4\n  sibling_uuid: _ib2ffJOMJ90FuD0\n  child_uuid: KkWBlMnn8vKsvI2E\n  parent_uuid: ''\n  doc_id: ''\n  level: 0\n  id: ''\n  open_window: 1\n  visible: 1\n- type: TITLE\n  title: Webpack\n  uuid: KkWBlMnn8vKsvI2E\n  url: ''\n  prev_uuid: 9P2eq3K9ULR0af5X\n  sibling_uuid: PA5M4tEq9BGEMtO9\n  child_uuid: 3HGKlhysP-vEQXiM\n  parent_uuid: 9P2eq3K9ULR0af5X\n  doc_id: ''\n  level: 1\n  id: ''\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: webpack 概念\n  uuid: 3HGKlhysP-vEQXiM\n  url: gkdarc\n  prev_uuid: KkWBlMnn8vKsvI2E\n  sibling_uuid: Ci_c8WtimOb3m1kJ\n  child_uuid: ''\n  parent_uuid: KkWBlMnn8vKsvI2E\n  doc_id: 72212169\n  level: 2\n  id: 72212169\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: webpack 中的 module 是什么\n  uuid: Ci_c8WtimOb3m1kJ\n  url: qyb5qk\n  prev_uuid: 3HGKlhysP-vEQXiM\n  sibling_uuid: gLWNNobChGyBvcJT\n  child_uuid: ''\n  parent_uuid: KkWBlMnn8vKsvI2E\n  doc_id: 72212266\n  level: 2\n  id: 72212266\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 模块打包原理\n  uuid: gLWNNobChGyBvcJT\n  url: iohxdb\n  prev_uuid: Ci_c8WtimOb3m1kJ\n  sibling_uuid: YwCVADfU_XBsG0WO\n  child_uuid: ''\n  parent_uuid: KkWBlMnn8vKsvI2E\n  doc_id: 72212160\n  level: 2\n  id: 72212160\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 打包构建流程\n  uuid: YwCVADfU_XBsG0WO\n  url: eshey5\n  prev_uuid: gLWNNobChGyBvcJT\n  sibling_uuid: EBqwwnL3J1wUmOlh\n  child_uuid: ''\n  parent_uuid: KkWBlMnn8vKsvI2E\n  doc_id: 72212151\n  level: 2\n  id: 72212151\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 热更新原理\n  uuid: EBqwwnL3J1wUmOlh\n  url: yse9bt\n  prev_uuid: YwCVADfU_XBsG0WO\n  sibling_uuid: lwF1dFLq1rG9MdQU\n  child_uuid: ''\n  parent_uuid: KkWBlMnn8vKsvI2E\n  doc_id: 72212165\n  level: 2\n  id: 72212165\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: chunk 和 bundle 的区别\n  uuid: lwF1dFLq1rG9MdQU\n  url: hg8h4r\n  prev_uuid: EBqwwnL3J1wUmOlh\n  sibling_uuid: o9ye0yiAxvwwA4jE\n  child_uuid: ''\n  parent_uuid: KkWBlMnn8vKsvI2E\n  doc_id: 72212153\n  level: 2\n  id: 72212153\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: fullhash、chunkhash 和 contenthash 的区别\n  uuid: o9ye0yiAxvwwA4jE\n  url: puabgz\n  prev_uuid: lwF1dFLq1rG9MdQU\n  sibling_uuid: OxdvFHcLzVG6YfBc\n  child_uuid: ''\n  parent_uuid: KkWBlMnn8vKsvI2E\n  doc_id: 72212173\n  level: 2\n  id: 72212173\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: loader 和 plugin\n  uuid: OxdvFHcLzVG6YfBc\n  url: hl39v0\n  prev_uuid: o9ye0yiAxvwwA4jE\n  sibling_uuid: nER_RrE8K11hpa78\n  child_uuid: ''\n  parent_uuid: KkWBlMnn8vKsvI2E\n  doc_id: 72212157\n  level: 2\n  id: 72212157\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: babel\n  uuid: nER_RrE8K11hpa78\n  url: nny1iy\n  prev_uuid: OxdvFHcLzVG6YfBc\n  sibling_uuid: 8mmMPlYkLyNfpEq9\n  child_uuid: ''\n  parent_uuid: KkWBlMnn8vKsvI2E\n  doc_id: 72212170\n  level: 2\n  id: 72212170\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: sourceMap\n  uuid: 8mmMPlYkLyNfpEq9\n  url: dtf17x\n  prev_uuid: nER_RrE8K11hpa78\n  sibling_uuid: M7r8XoDGrg6cNKlE\n  child_uuid: ''\n  parent_uuid: KkWBlMnn8vKsvI2E\n  doc_id: 72212156\n  level: 2\n  id: 72212156\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 代码分割的本质\n  uuid: M7r8XoDGrg6cNKlE\n  url: pdp2uz\n  prev_uuid: 8mmMPlYkLyNfpEq9\n  sibling_uuid: Qs47BJts9deBE55f\n  child_uuid: ''\n  parent_uuid: KkWBlMnn8vKsvI2E\n  doc_id: 72212163\n  level: 2\n  id: 72212163\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: npm 打包注意点\n  uuid: Qs47BJts9deBE55f\n  url: uhgsm9\n  prev_uuid: M7r8XoDGrg6cNKlE\n  sibling_uuid: 02dCOY3aMQkTKtr5\n  child_uuid: ''\n  parent_uuid: KkWBlMnn8vKsvI2E\n  doc_id: 72212150\n  level: 2\n  id: 72212150\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 构建工具和打包工具的区别\n  uuid: 02dCOY3aMQkTKtr5\n  url: goy7xw\n  prev_uuid: Qs47BJts9deBE55f\n  sibling_uuid: HWLaGOPI5cyGuMSs\n  child_uuid: ''\n  parent_uuid: KkWBlMnn8vKsvI2E\n  doc_id: 72212255\n  level: 2\n  id: 72212255\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: webpack 与 其他构建工具的异同\n  uuid: HWLaGOPI5cyGuMSs\n  url: wh1m7t\n  prev_uuid: 02dCOY3aMQkTKtr5\n  sibling_uuid: gpqfvEQbvGr-oYDM\n  child_uuid: ''\n  parent_uuid: KkWBlMnn8vKsvI2E\n  doc_id: 72212154\n  level: 2\n  id: 72212154\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: webpack 5 和 webpack 4 的区别\n  uuid: gpqfvEQbvGr-oYDM\n  url: gwyegl\n  prev_uuid: HWLaGOPI5cyGuMSs\n  sibling_uuid: ''\n  child_uuid: ''\n  parent_uuid: KkWBlMnn8vKsvI2E\n  doc_id: 72212197\n  level: 2\n  id: 72212197\n  open_window: 0\n  visible: 1\n- type: TITLE\n  title: rollup\n  uuid: PA5M4tEq9BGEMtO9\n  url: ''\n  prev_uuid: KkWBlMnn8vKsvI2E\n  sibling_uuid: cc50VGYB9StWj9iE\n  child_uuid: rfwXExGVTXBKDdM2\n  parent_uuid: 9P2eq3K9ULR0af5X\n  doc_id: ''\n  level: 1\n  id: ''\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: rollup 概念\n  uuid: rfwXExGVTXBKDdM2\n  url: xx4xp9\n  prev_uuid: PA5M4tEq9BGEMtO9\n  sibling_uuid: IApizKSiwn87t7KS\n  child_uuid: ''\n  parent_uuid: PA5M4tEq9BGEMtO9\n  doc_id: 76721509\n  level: 2\n  id: 76721509\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: rollup 常用插件\n  uuid: IApizKSiwn87t7KS\n  url: kggg6d\n  prev_uuid: rfwXExGVTXBKDdM2\n  sibling_uuid: 0ak8GBSDIkitvTUZ\n  child_uuid: ''\n  parent_uuid: PA5M4tEq9BGEMtO9\n  doc_id: 76721975\n  level: 2\n  id: 76721975\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: rollup 优缺点\n  uuid: 0ak8GBSDIkitvTUZ\n  url: gugo43\n  prev_uuid: IApizKSiwn87t7KS\n  sibling_uuid: ''\n  child_uuid: ''\n  parent_uuid: PA5M4tEq9BGEMtO9\n  doc_id: 76722698\n  level: 2\n  id: 76722698\n  open_window: 0\n  visible: 1\n- type: TITLE\n  title: Vite\n  uuid: cc50VGYB9StWj9iE\n  url: ''\n  prev_uuid: PA5M4tEq9BGEMtO9\n  sibling_uuid: ''\n  child_uuid: QzOULjlE0M-dX3XY\n  parent_uuid: 9P2eq3K9ULR0af5X\n  doc_id: ''\n  level: 1\n  id: ''\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: ESM 、 esbuild、rollup\n  uuid: QzOULjlE0M-dX3XY\n  url: zbte28\n  prev_uuid: cc50VGYB9StWj9iE\n  sibling_uuid: 2b9lJDrKP6nHewez\n  child_uuid: ''\n  parent_uuid: cc50VGYB9StWj9iE\n  doc_id: 72212267\n  level: 2\n  id: 72212267\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: vite 的实现原理\n  uuid: 2b9lJDrKP6nHewez\n  url: qa0ptd\n  prev_uuid: QzOULjlE0M-dX3XY\n  sibling_uuid: j9nVKLx68XcKSS5v\n  child_uuid: ''\n  parent_uuid: cc50VGYB9StWj9iE\n  doc_id: 72212250\n  level: 2\n  id: 72212250\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: vite 的热更新原理\n  uuid: j9nVKLx68XcKSS5v\n  url: de75ab\n  prev_uuid: 2b9lJDrKP6nHewez\n  sibling_uuid: F_ygXseqm2S2JzwI\n  child_uuid: ''\n  parent_uuid: cc50VGYB9StWj9iE\n  doc_id: 72212258\n  level: 2\n  id: 72212258\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: vite 的构建速度快的原因\n  uuid: F_ygXseqm2S2JzwI\n  url: on0xtf\n  prev_uuid: j9nVKLx68XcKSS5v\n  sibling_uuid: T4SDnSe1k7y_7x3W\n  child_uuid: ''\n  parent_uuid: cc50VGYB9StWj9iE\n  doc_id: 72212171\n  level: 2\n  id: 72212171\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: vite 的优缺点\n  uuid: T4SDnSe1k7y_7x3W\n  url: xqi8st\n  prev_uuid: F_ygXseqm2S2JzwI\n  sibling_uuid: iKoQ0EmfPV_t8bnB\n  child_uuid: ''\n  parent_uuid: cc50VGYB9StWj9iE\n  doc_id: 72212257\n  level: 2\n  id: 72212257\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: vite 生产环境使用了 rollup，是否能在生产环境使用 esm\n  uuid: iKoQ0EmfPV_t8bnB\n  url: wfsv84\n  prev_uuid: T4SDnSe1k7y_7x3W\n  sibling_uuid: w6EvBA84BcVw35TD\n  child_uuid: ''\n  parent_uuid: cc50VGYB9StWj9iE\n  doc_id: 72212256\n  level: 2\n  id: 72212256\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: vite 如何兼容非 commonjs 模块\n  uuid: w6EvBA84BcVw35TD\n  url: hpfp18\n  prev_uuid: iKoQ0EmfPV_t8bnB\n  sibling_uuid: NuVIodhn60MXc8rH\n  child_uuid: ''\n  parent_uuid: cc50VGYB9StWj9iE\n  doc_id: 72212261\n  level: 2\n  id: 72212261\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 组件嵌套层级过深，是否会影响 vite 速度\n  uuid: NuVIodhn60MXc8rH\n  url: gw29gz\n  prev_uuid: w6EvBA84BcVw35TD\n  sibling_uuid: uo8BVC-6HYu_8QcI\n  child_uuid: ''\n  parent_uuid: cc50VGYB9StWj9iE\n  doc_id: 72212260\n  level: 2\n  id: 72212260\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 简易 vite 实现\n  uuid: uo8BVC-6HYu_8QcI\n  url: oop1cx\n  prev_uuid: NuVIodhn60MXc8rH\n  sibling_uuid: ''\n  child_uuid: ''\n  parent_uuid: cc50VGYB9StWj9iE\n  doc_id: 72212265\n  level: 2\n  id: 72212265\n  open_window: 0\n  visible: 1\n- type: TITLE\n  title: 性能优化\n  uuid: _ib2ffJOMJ90FuD0\n  url: ''\n  prev_uuid: 9P2eq3K9ULR0af5X\n  sibling_uuid: 9BBksIvNcFzfWLRd\n  child_uuid: kZWKWb1BdUt9h_Ua\n  parent_uuid: ''\n  doc_id: ''\n  level: 0\n  id: ''\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 前端项目性能指标\n  uuid: kZWKWb1BdUt9h_Ua\n  url: fv22gd\n  prev_uuid: _ib2ffJOMJ90FuD0\n  sibling_uuid: WMCvfSADqHqcTJXw\n  child_uuid: ''\n  parent_uuid: _ib2ffJOMJ90FuD0\n  doc_id: 72212177\n  level: 1\n  id: 72212177\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 优化 webpack 的构建速度\n  uuid: WMCvfSADqHqcTJXw\n  url: aft935\n  prev_uuid: kZWKWb1BdUt9h_Ua\n  sibling_uuid: 1ctvLIEro_Mh0xK-\n  child_uuid: ''\n  parent_uuid: _ib2ffJOMJ90FuD0\n  doc_id: 72212166\n  level: 1\n  id: 72212166\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 前端性能优化\n  uuid: 1ctvLIEro_Mh0xK-\n  url: tcfotb\n  prev_uuid: WMCvfSADqHqcTJXw\n  sibling_uuid: _eck6_rsRKfOJVvr\n  child_uuid: ''\n  parent_uuid: _ib2ffJOMJ90FuD0\n  doc_id: 72212146\n  level: 1\n  id: 72212146\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: vue2 性能优化\n  uuid: _eck6_rsRKfOJVvr\n  url: rkov84\n  prev_uuid: 1ctvLIEro_Mh0xK-\n  sibling_uuid: YZvWK7y4PMXszEwE\n  child_uuid: ''\n  parent_uuid: _ib2ffJOMJ90FuD0\n  doc_id: 72212123\n  level: 1\n  id: 72212123\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: react 性能优化\n  uuid: YZvWK7y4PMXszEwE\n  url: qf0cik\n  prev_uuid: _eck6_rsRKfOJVvr\n  sibling_uuid: '-vVIPSz4Z6P_s7e9'\n  child_uuid: ''\n  parent_uuid: _ib2ffJOMJ90FuD0\n  doc_id: 72212121\n  level: 1\n  id: 72212121\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 服务端性能优化 cdn、ssr\n  uuid: '-vVIPSz4Z6P_s7e9'\n  url: sg5qwg\n  prev_uuid: YZvWK7y4PMXszEwE\n  sibling_uuid: ''\n  child_uuid: ''\n  parent_uuid: _ib2ffJOMJ90FuD0\n  doc_id: 72212202\n  level: 1\n  id: 72212202\n  open_window: 0\n  visible: 1\n- type: TITLE\n  title: 包管理\n  uuid: 9BBksIvNcFzfWLRd\n  url: ''\n  prev_uuid: _ib2ffJOMJ90FuD0\n  sibling_uuid: kkdXxj_7f1anXGc6\n  child_uuid: Hf2631LtoAoZ4z-W\n  parent_uuid: ''\n  doc_id: ''\n  level: 0\n  id: ''\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: Monorepo\n  uuid: Hf2631LtoAoZ4z-W\n  url: xgnw24\n  prev_uuid: 9BBksIvNcFzfWLRd\n  sibling_uuid: 41gDqpiyNdq269Lp\n  child_uuid: ''\n  parent_uuid: 9BBksIvNcFzfWLRd\n  doc_id: 72212268\n  level: 1\n  id: 72212268\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: npm、yarn、pnpm\n  uuid: 41gDqpiyNdq269Lp\n  url: nvbtiy\n  prev_uuid: Hf2631LtoAoZ4z-W\n  sibling_uuid: ZxzFHpuyOFknxwqY\n  child_uuid: ''\n  parent_uuid: 9BBksIvNcFzfWLRd\n  doc_id: 72212269\n  level: 1\n  id: 72212269\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: verdaccio\n  uuid: ZxzFHpuyOFknxwqY\n  url: yms8mi\n  prev_uuid: 41gDqpiyNdq269Lp\n  sibling_uuid: ''\n  child_uuid: ''\n  parent_uuid: 9BBksIvNcFzfWLRd\n  doc_id: 76725286\n  level: 1\n  id: 76725286\n  open_window: 0\n  visible: 1\n- type: TITLE\n  title: TypeScript\n  uuid: kkdXxj_7f1anXGc6\n  url: ''\n  prev_uuid: 9BBksIvNcFzfWLRd\n  sibling_uuid: wtEzbVO2d1PioEzt\n  child_uuid: oXvKPuEdNzldyAga\n  parent_uuid: ''\n  doc_id: ''\n  level: 0\n  id: ''\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 什么是 TypeScript\n  uuid: oXvKPuEdNzldyAga\n  url: ycg3n9\n  prev_uuid: kkdXxj_7f1anXGc6\n  sibling_uuid: nIgWerTolUPcvwbs\n  child_uuid: ''\n  parent_uuid: kkdXxj_7f1anXGc6\n  doc_id: 72212313\n  level: 1\n  id: 72212313\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: ts 中常用内置工具类型有哪些\n  uuid: nIgWerTolUPcvwbs\n  url: ba7and\n  prev_uuid: oXvKPuEdNzldyAga\n  sibling_uuid: cKo1ehuC2Ezv_LkG\n  child_uuid: ''\n  parent_uuid: kkdXxj_7f1anXGc6\n  doc_id: 75214600\n  level: 1\n  id: 75214600\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: ts 中类型保护\n  uuid: cKo1ehuC2Ezv_LkG\n  url: cqgawt\n  prev_uuid: nIgWerTolUPcvwbs\n  sibling_uuid: 9WWFtyTsyXQ8444b\n  child_uuid: ''\n  parent_uuid: kkdXxj_7f1anXGc6\n  doc_id: 75214621\n  level: 1\n  id: 75214621\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: ts 的模块加载机制\n  uuid: 9WWFtyTsyXQ8444b\n  url: ug5vit\n  prev_uuid: cKo1ehuC2Ezv_LkG\n  sibling_uuid: uyRC7gMPBD6WflDI\n  child_uuid: ''\n  parent_uuid: kkdXxj_7f1anXGc6\n  doc_id: 72212315\n  level: 1\n  id: 72212315\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: ts 中的访问修饰符\n  uuid: uyRC7gMPBD6WflDI\n  url: ku85bk\n  prev_uuid: 9WWFtyTsyXQ8444b\n  sibling_uuid: GVJiiBTgyp1nxuIJ\n  child_uuid: ''\n  parent_uuid: kkdXxj_7f1anXGc6\n  doc_id: 72212284\n  level: 1\n  id: 72212284\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: ts 关键字间的区别\n  uuid: GVJiiBTgyp1nxuIJ\n  url: sagma3\n  prev_uuid: uyRC7gMPBD6WflDI\n  sibling_uuid: a7efyzFrZWkkYm_s\n  child_uuid: ''\n  parent_uuid: kkdXxj_7f1anXGc6\n  doc_id: 72212308\n  level: 1\n  id: 72212308\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: ts 中 enum 类型转 type\n  uuid: a7efyzFrZWkkYm_s\n  url: gehkyv\n  prev_uuid: GVJiiBTgyp1nxuIJ\n  sibling_uuid: '-BM8soj2CmjTa135'\n  child_uuid: ''\n  parent_uuid: kkdXxj_7f1anXGc6\n  doc_id: 75323990\n  level: 1\n  id: 75323990\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: ts 中枚举和常量枚举(const枚举)的区别\n  uuid: '-BM8soj2CmjTa135'\n  url: oznghr\n  prev_uuid: a7efyzFrZWkkYm_s\n  sibling_uuid: YPyFfjPr_NzLvDP3\n  child_uuid: ''\n  parent_uuid: kkdXxj_7f1anXGc6\n  doc_id: 72212282\n  level: 1\n  id: 72212282\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: ts 中的 interface 可以给 Function/Array/Class 做声明么\n  uuid: YPyFfjPr_NzLvDP3\n  url: ona7hl\n  prev_uuid: '-BM8soj2CmjTa135'\n  sibling_uuid: 49oDbGS0njKPDYjI\n  child_uuid: ''\n  parent_uuid: kkdXxj_7f1anXGc6\n  doc_id: 72212286\n  level: 1\n  id: 72212286\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: ts 中的 this 和 js 中的 this 有什么差异\n  uuid: 49oDbGS0njKPDYjI\n  url: eb4bg0\n  prev_uuid: YPyFfjPr_NzLvDP3\n  sibling_uuid: GsAFhvyPAqtOwB6m\n  child_uuid: ''\n  parent_uuid: kkdXxj_7f1anXGc6\n  doc_id: 72212288\n  level: 1\n  id: 72212288\n  open_window: 0\n  visible: 0\n- type: DOC\n  title: ts 中如何枚举联合类型的 key\n  uuid: GsAFhvyPAqtOwB6m\n  url: ly5v3x\n  prev_uuid: 49oDbGS0njKPDYjI\n  sibling_uuid: CNWh84n78nKW-JK8\n  child_uuid: ''\n  parent_uuid: kkdXxj_7f1anXGc6\n  doc_id: 72212289\n  level: 1\n  id: 72212289\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: ts 中 ?.、??、!.、_、** 等符号的含义\n  uuid: CNWh84n78nKW-JK8\n  url: lyezty\n  prev_uuid: GsAFhvyPAqtOwB6m\n  sibling_uuid: iqwPMQndJB_eNuct\n  child_uuid: ''\n  parent_uuid: kkdXxj_7f1anXGc6\n  doc_id: 72212291\n  level: 1\n  id: 72212291\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: ts 中的 this 和 js 中的 this 有什么差异\n  uuid: iqwPMQndJB_eNuct\n  url: ld83ko\n  prev_uuid: CNWh84n78nKW-JK8\n  sibling_uuid: oKAWJxKVLy8BxvQy\n  child_uuid: ''\n  parent_uuid: kkdXxj_7f1anXGc6\n  doc_id: 72212314\n  level: 1\n  id: 72212314\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 什么是抗变、双变、协变和逆变\n  uuid: oKAWJxKVLy8BxvQy\n  url: ttipbo\n  prev_uuid: iqwPMQndJB_eNuct\n  sibling_uuid: bqK3b3uPMHw4gfuI\n  child_uuid: ''\n  parent_uuid: kkdXxj_7f1anXGc6\n  doc_id: 72212293\n  level: 1\n  id: 72212293\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: ts 中同名的 interface 或者同名的 interface 和 class 可以合并么\n  uuid: bqK3b3uPMHw4gfuI\n  url: vwk8ta\n  prev_uuid: oKAWJxKVLy8BxvQy\n  sibling_uuid: KPQ1D_KkpP1Og_rA\n  child_uuid: ''\n  parent_uuid: kkdXxj_7f1anXGc6\n  doc_id: 72212294\n  level: 1\n  id: 72212294\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 如何使 ts 项目引入并识别编译为 js 的 npm 库包\n  uuid: KPQ1D_KkpP1Og_rA\n  url: wprnb4\n  prev_uuid: bqK3b3uPMHw4gfuI\n  sibling_uuid: QYmnWc4XN-1SsH6y\n  child_uuid: ''\n  parent_uuid: kkdXxj_7f1anXGc6\n  doc_id: 72212295\n  level: 1\n  id: 72212295\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: ts 如何自动生成库包的声明文件\n  uuid: QYmnWc4XN-1SsH6y\n  url: qthgtd\n  prev_uuid: KPQ1D_KkpP1Og_rA\n  sibling_uuid: NF_E4aerReEqE3W0\n  child_uuid: ''\n  parent_uuid: kkdXxj_7f1anXGc6\n  doc_id: 72212297\n  level: 1\n  id: 72212297\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 什么是泛型\n  uuid: NF_E4aerReEqE3W0\n  url: uaxegb\n  prev_uuid: QYmnWc4XN-1SsH6y\n  sibling_uuid: RzXzd38jikHanZPF\n  child_uuid: ''\n  parent_uuid: kkdXxj_7f1anXGc6\n  doc_id: 72212298\n  level: 1\n  id: 72212298\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: '-?、-readonly 的含义是什么'\n  uuid: RzXzd38jikHanZPF\n  url: vwkgu7\n  prev_uuid: NF_E4aerReEqE3W0\n  sibling_uuid: Ew56s2fseHbfjMcO\n  child_uuid: ''\n  parent_uuid: kkdXxj_7f1anXGc6\n  doc_id: 72212301\n  level: 1\n  id: 72212301\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: ts 是基于结构类型兼容的\n  uuid: Ew56s2fseHbfjMcO\n  url: hct7os\n  prev_uuid: RzXzd38jikHanZPF\n  sibling_uuid: 6WmcslXNXxUHs9J5\n  child_uuid: ''\n  parent_uuid: kkdXxj_7f1anXGc6\n  doc_id: 72212304\n  level: 1\n  id: 72212304\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: const 断言\n  uuid: 6WmcslXNXxUHs9J5\n  url: xgt0bn\n  prev_uuid: Ew56s2fseHbfjMcO\n  sibling_uuid: SmKRuWqpkdAgtE3g\n  child_uuid: ''\n  parent_uuid: kkdXxj_7f1anXGc6\n  doc_id: 72212305\n  level: 1\n  id: 72212305\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 如何在 window 扩展类型\n  uuid: SmKRuWqpkdAgtE3g\n  url: lnqu18\n  prev_uuid: 6WmcslXNXxUHs9J5\n  sibling_uuid: e-hbAenE5NXBqgWo\n  child_uuid: ''\n  parent_uuid: kkdXxj_7f1anXGc6\n  doc_id: 72212309\n  level: 1\n  id: 72212309\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 复杂类型推导内容\n  uuid: e-hbAenE5NXBqgWo\n  url: bvhrsb\n  prev_uuid: SmKRuWqpkdAgtE3g\n  sibling_uuid: ''\n  child_uuid: ''\n  parent_uuid: kkdXxj_7f1anXGc6\n  doc_id: 72212310\n  level: 1\n  id: 72212310\n  open_window: 0\n  visible: 1\n- type: TITLE\n  title: 小程序\n  uuid: wtEzbVO2d1PioEzt\n  url: ''\n  prev_uuid: kkdXxj_7f1anXGc6\n  sibling_uuid: NjvgaFbxjDjDquPs\n  child_uuid: FLsungh0dT3ok_0a\n  parent_uuid: ''\n  doc_id: ''\n  level: 0\n  id: ''\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 小程序相关文件类型\n  uuid: FLsungh0dT3ok_0a\n  url: rugmeb\n  prev_uuid: wtEzbVO2d1PioEzt\n  sibling_uuid: mg4IRxHSo-LSctGx\n  child_uuid: ''\n  parent_uuid: wtEzbVO2d1PioEzt\n  doc_id: 77463281\n  level: 1\n  id: 77463281\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 小程序的优缺点\n  uuid: mg4IRxHSo-LSctGx\n  url: itwfg1\n  prev_uuid: FLsungh0dT3ok_0a\n  sibling_uuid: VLFzOMdd3wS3G3n8\n  child_uuid: ''\n  parent_uuid: wtEzbVO2d1PioEzt\n  doc_id: 77456810\n  level: 1\n  id: 77456810\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 小程序原理\n  uuid: VLFzOMdd3wS3G3n8\n  url: df386q\n  prev_uuid: mg4IRxHSo-LSctGx\n  sibling_uuid: iXXVOfAVEFFLUGLp\n  child_uuid: ''\n  parent_uuid: wtEzbVO2d1PioEzt\n  doc_id: 77456951\n  level: 1\n  id: 77456951\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 小程序的双向绑定与 vue 的异同\n  uuid: iXXVOfAVEFFLUGLp\n  url: pfeofq\n  prev_uuid: VLFzOMdd3wS3G3n8\n  sibling_uuid: Tg-jnrLu4reCBSx5\n  child_uuid: ''\n  parent_uuid: wtEzbVO2d1PioEzt\n  doc_id: 77456254\n  level: 1\n  id: 77456254\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 小程序尺寸单位 rpx\n  uuid: Tg-jnrLu4reCBSx5\n  url: dt36ib\n  prev_uuid: iXXVOfAVEFFLUGLp\n  sibling_uuid: zsf5ihjINsJtmdB7\n  child_uuid: ''\n  parent_uuid: wtEzbVO2d1PioEzt\n  doc_id: 77462972\n  level: 1\n  id: 77462972\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 小程序页面间传递数据的方法\n  uuid: zsf5ihjINsJtmdB7\n  url: lgfegn\n  prev_uuid: Tg-jnrLu4reCBSx5\n  sibling_uuid: pmT_DNWp1Kj3pNLh\n  child_uuid: ''\n  parent_uuid: wtEzbVO2d1PioEzt\n  doc_id: 77463586\n  level: 1\n  id: 77463586\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 小程序的生命周期函数\n  uuid: pmT_DNWp1Kj3pNLh\n  url: gnn51p\n  prev_uuid: zsf5ihjINsJtmdB7\n  sibling_uuid: Uhe3MJlkMOSgK0Rg\n  child_uuid: ''\n  parent_uuid: wtEzbVO2d1PioEzt\n  doc_id: 77463729\n  level: 1\n  id: 77463729\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 小程序中页面跳转的几种方式\n  uuid: Uhe3MJlkMOSgK0Rg\n  url: lgdk49\n  prev_uuid: pmT_DNWp1Kj3pNLh\n  sibling_uuid: 6A1qVz1XNaVyhfOk\n  child_uuid: ''\n  parent_uuid: wtEzbVO2d1PioEzt\n  doc_id: 77456427\n  level: 1\n  id: 77456427\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: h5 跳转小程序的几种方式\n  uuid: 6A1qVz1XNaVyhfOk\n  url: uxfa80\n  prev_uuid: Uhe3MJlkMOSgK0Rg\n  sibling_uuid: ew7M9iTrzvOJfXaH\n  child_uuid: ''\n  parent_uuid: wtEzbVO2d1PioEzt\n  doc_id: 77457654\n  level: 1\n  id: 77457654\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 小程序中如何实现下拉刷新\n  uuid: ew7M9iTrzvOJfXaH\n  url: qk3yad\n  prev_uuid: 6A1qVz1XNaVyhfOk\n  sibling_uuid: 2Y1B8CPyL3LkgcKl\n  child_uuid: ''\n  parent_uuid: wtEzbVO2d1PioEzt\n  doc_id: 77457211\n  level: 1\n  id: 77457211\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 小程序中 bindtap 和 catchtap 的区别\n  uuid: 2Y1B8CPyL3LkgcKl\n  url: vtacoq\n  prev_uuid: ew7M9iTrzvOJfXaH\n  sibling_uuid: 9RPkwJ0bDYesKq0y\n  child_uuid: ''\n  parent_uuid: wtEzbVO2d1PioEzt\n  doc_id: 77457391\n  level: 1\n  id: 77457391\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 小程序关联微信公众号如何确定用户的唯一性\n  uuid: 9RPkwJ0bDYesKq0y\n  url: zy41fo\n  prev_uuid: 2Y1B8CPyL3LkgcKl\n  sibling_uuid: gKieZkqAn8bSEFC8\n  child_uuid: ''\n  parent_uuid: wtEzbVO2d1PioEzt\n  doc_id: 77457485\n  level: 1\n  id: 77457485\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 小程序登陆\n  uuid: gKieZkqAn8bSEFC8\n  url: ykzhe6\n  prev_uuid: 9RPkwJ0bDYesKq0y\n  sibling_uuid: RcTwzJ7rg9upyTN_\n  child_uuid: ''\n  parent_uuid: wtEzbVO2d1PioEzt\n  doc_id: 77461717\n  level: 1\n  id: 77461717\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 小程序授权获取用户信息流程\n  uuid: RcTwzJ7rg9upyTN_\n  url: yid7ry\n  prev_uuid: gKieZkqAn8bSEFC8\n  sibling_uuid: 8TCMQK_DARltEJe-\n  child_uuid: ''\n  parent_uuid: wtEzbVO2d1PioEzt\n  doc_id: 77463054\n  level: 1\n  id: 77463054\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 小程序性能优化\n  uuid: 8TCMQK_DARltEJe-\n  url: rm2ldf\n  prev_uuid: RcTwzJ7rg9upyTN_\n  sibling_uuid: oJtRGAclpkJwEuI8\n  child_uuid: ''\n  parent_uuid: wtEzbVO2d1PioEzt\n  doc_id: 77463131\n  level: 1\n  id: 77463131\n  open_window: 0\n  visible: 1\n- type: TITLE\n  title: 其他\n  uuid: oJtRGAclpkJwEuI8\n  url: ''\n  prev_uuid: 8TCMQK_DARltEJe-\n  sibling_uuid: ''\n  child_uuid: gNjUOGAJS5Dc3hG8\n  parent_uuid: wtEzbVO2d1PioEzt\n  doc_id: ''\n  level: 1\n  id: ''\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 开发过程中的问题\n  uuid: gNjUOGAJS5Dc3hG8\n  url: kifv58\n  prev_uuid: oJtRGAclpkJwEuI8\n  sibling_uuid: nNiRI9qkLPlOVLR_\n  child_uuid: ''\n  parent_uuid: oJtRGAclpkJwEuI8\n  doc_id: 75215602\n  level: 2\n  id: 75215602\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 文档\n  uuid: nNiRI9qkLPlOVLR_\n  url: fyibny\n  prev_uuid: gNjUOGAJS5Dc3hG8\n  sibling_uuid: ''\n  child_uuid: ''\n  parent_uuid: oJtRGAclpkJwEuI8\n  doc_id: 76180642\n  level: 2\n  id: 76180642\n  open_window: 0\n  visible: 1\n- type: TITLE\n  title: 设计模式\n  uuid: NjvgaFbxjDjDquPs\n  url: ''\n  prev_uuid: wtEzbVO2d1PioEzt\n  sibling_uuid: EVQTfJhAXBsdI9RS\n  child_uuid: JrkuwvCs_WhsJYNf\n  parent_uuid: ''\n  doc_id: ''\n  level: 0\n  id: ''\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 面向对象的三大特征和六大原则\n  uuid: JrkuwvCs_WhsJYNf\n  url: ucwzqf\n  prev_uuid: NjvgaFbxjDjDquPs\n  sibling_uuid: Xq8Z3JqSyuSI-WfI\n  child_uuid: ''\n  parent_uuid: NjvgaFbxjDjDquPs\n  doc_id: 76155221\n  level: 1\n  id: 76155221\n  open_window: 0\n  visible: 1\n- type: TITLE\n  title: 创建型模式\n  uuid: Xq8Z3JqSyuSI-WfI\n  url: ''\n  prev_uuid: JrkuwvCs_WhsJYNf\n  sibling_uuid: eHPKkMsIpdNsNQAc\n  child_uuid: 27x6aBfQlsFoEcIe\n  parent_uuid: NjvgaFbxjDjDquPs\n  doc_id: ''\n  level: 1\n  id: ''\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 单例模式\n  uuid: 27x6aBfQlsFoEcIe\n  url: greg09\n  prev_uuid: Xq8Z3JqSyuSI-WfI\n  sibling_uuid: S7_MAWPxiUwGc_yG\n  child_uuid: ''\n  parent_uuid: Xq8Z3JqSyuSI-WfI\n  doc_id: 76157711\n  level: 2\n  id: 76157711\n  open_window: 0\n  visible: 0\n- type: DOC\n  title: 工厂模式\n  uuid: S7_MAWPxiUwGc_yG\n  url: yilldv\n  prev_uuid: 27x6aBfQlsFoEcIe\n  sibling_uuid: Fz4UUe9sootwkJLN\n  child_uuid: ''\n  parent_uuid: Xq8Z3JqSyuSI-WfI\n  doc_id: 76157741\n  level: 2\n  id: 76157741\n  open_window: 0\n  visible: 0\n- type: DOC\n  title: 抽象工厂模式\n  uuid: Fz4UUe9sootwkJLN\n  url: lb85cd\n  prev_uuid: S7_MAWPxiUwGc_yG\n  sibling_uuid: WqigBLqy73MyrYGy\n  child_uuid: ''\n  parent_uuid: Xq8Z3JqSyuSI-WfI\n  doc_id: 76157793\n  level: 2\n  id: 76157793\n  open_window: 0\n  visible: 0\n- type: DOC\n  title: 建造者模式\n  uuid: WqigBLqy73MyrYGy\n  url: um62o3\n  prev_uuid: Fz4UUe9sootwkJLN\n  sibling_uuid: ''\n  child_uuid: ''\n  parent_uuid: Xq8Z3JqSyuSI-WfI\n  doc_id: 76157841\n  level: 2\n  id: 76157841\n  open_window: 0\n  visible: 0\n- type: TITLE\n  title: 结构型模式\n  uuid: eHPKkMsIpdNsNQAc\n  url: ''\n  prev_uuid: Xq8Z3JqSyuSI-WfI\n  sibling_uuid: TKjNLxzsEvV-8OQ3\n  child_uuid: 4EnmycRcgTwdexqd\n  parent_uuid: NjvgaFbxjDjDquPs\n  doc_id: ''\n  level: 1\n  id: ''\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 代理模式\n  uuid: 4EnmycRcgTwdexqd\n  url: emgn4g\n  prev_uuid: eHPKkMsIpdNsNQAc\n  sibling_uuid: n2uHzl_zHrRDMw9b\n  child_uuid: ''\n  parent_uuid: eHPKkMsIpdNsNQAc\n  doc_id: 76157876\n  level: 2\n  id: 76157876\n  open_window: 0\n  visible: 0\n- type: DOC\n  title: 享元模式\n  uuid: n2uHzl_zHrRDMw9b\n  url: mvrd51\n  prev_uuid: 4EnmycRcgTwdexqd\n  sibling_uuid: 2IchTHraJITPZqEK\n  child_uuid: ''\n  parent_uuid: eHPKkMsIpdNsNQAc\n  doc_id: 76157912\n  level: 2\n  id: 76157912\n  open_window: 0\n  visible: 0\n- type: DOC\n  title: 适配器模式\n  uuid: 2IchTHraJITPZqEK\n  url: amee0r\n  prev_uuid: n2uHzl_zHrRDMw9b\n  sibling_uuid: r8zuIkYzgg-459k6\n  child_uuid: ''\n  parent_uuid: eHPKkMsIpdNsNQAc\n  doc_id: 76157968\n  level: 2\n  id: 76157968\n  open_window: 0\n  visible: 0\n- type: DOC\n  title: 装饰者模式\n  uuid: r8zuIkYzgg-459k6\n  url: wze6cu\n  prev_uuid: 2IchTHraJITPZqEK\n  sibling_uuid: DuNhBRIiXKK43Um3\n  child_uuid: ''\n  parent_uuid: eHPKkMsIpdNsNQAc\n  doc_id: 76157988\n  level: 2\n  id: 76157988\n  open_window: 0\n  visible: 0\n- type: DOC\n  title: 外观模式\n  uuid: DuNhBRIiXKK43Um3\n  url: staee7\n  prev_uuid: r8zuIkYzgg-459k6\n  sibling_uuid: mhEwDrx0vl1iJZPc\n  child_uuid: ''\n  parent_uuid: eHPKkMsIpdNsNQAc\n  doc_id: 76158039\n  level: 2\n  id: 76158039\n  open_window: 0\n  visible: 0\n- type: DOC\n  title: 组合模式\n  uuid: mhEwDrx0vl1iJZPc\n  url: agqniz\n  prev_uuid: DuNhBRIiXKK43Um3\n  sibling_uuid: XkuptE3GdOIrxGB7\n  child_uuid: ''\n  parent_uuid: eHPKkMsIpdNsNQAc\n  doc_id: 76158077\n  level: 2\n  id: 76158077\n  open_window: 0\n  visible: 0\n- type: DOC\n  title: 桥接模式\n  uuid: XkuptE3GdOIrxGB7\n  url: yk1n51\n  prev_uuid: mhEwDrx0vl1iJZPc\n  sibling_uuid: ''\n  child_uuid: ''\n  parent_uuid: eHPKkMsIpdNsNQAc\n  doc_id: 76158107\n  level: 2\n  id: 76158107\n  open_window: 0\n  visible: 0\n- type: TITLE\n  title: 行为型模式\n  uuid: TKjNLxzsEvV-8OQ3\n  url: ''\n  prev_uuid: eHPKkMsIpdNsNQAc\n  sibling_uuid: v09XKwozBY05xZwo\n  child_uuid: mU7tiw4Lxo1QeZ2M\n  parent_uuid: NjvgaFbxjDjDquPs\n  doc_id: ''\n  level: 1\n  id: ''\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 发布-订阅模式\n  uuid: mU7tiw4Lxo1QeZ2M\n  url: pdlrcu\n  prev_uuid: TKjNLxzsEvV-8OQ3\n  sibling_uuid: D0GpxbjsBVVy9wMd\n  child_uuid: ''\n  parent_uuid: TKjNLxzsEvV-8OQ3\n  doc_id: 76158148\n  level: 2\n  id: 76158148\n  open_window: 0\n  visible: 0\n- type: DOC\n  title: 策略模式\n  uuid: D0GpxbjsBVVy9wMd\n  url: rm1d8m\n  prev_uuid: mU7tiw4Lxo1QeZ2M\n  sibling_uuid: LqATOvJNtJkCK6Rf\n  child_uuid: ''\n  parent_uuid: TKjNLxzsEvV-8OQ3\n  doc_id: 76158179\n  level: 2\n  id: 76158179\n  open_window: 0\n  visible: 0\n- type: DOC\n  title: 状态模式\n  uuid: LqATOvJNtJkCK6Rf\n  url: psug0t\n  prev_uuid: D0GpxbjsBVVy9wMd\n  sibling_uuid: B2ht6lKH9UrXGIzd\n  child_uuid: ''\n  parent_uuid: TKjNLxzsEvV-8OQ3\n  doc_id: 76158219\n  level: 2\n  id: 76158219\n  open_window: 0\n  visible: 0\n- type: DOC\n  title: 模版方法模式：咖啡厅制作咖啡\n  uuid: B2ht6lKH9UrXGIzd\n  url: vtvg1m\n  prev_uuid: LqATOvJNtJkCK6Rf\n  sibling_uuid: zmQm5ECyq6leF2PJ\n  child_uuid: ''\n  parent_uuid: TKjNLxzsEvV-8OQ3\n  doc_id: 76158262\n  level: 2\n  id: 76158262\n  open_window: 0\n  visible: 0\n- type: DOC\n  title: 迭代器模式：银行的点钞机\n  uuid: zmQm5ECyq6leF2PJ\n  url: grf92w\n  prev_uuid: B2ht6lKH9UrXGIzd\n  sibling_uuid: PoBek3VT-clw6YJQ\n  child_uuid: ''\n  parent_uuid: TKjNLxzsEvV-8OQ3\n  doc_id: 76158339\n  level: 2\n  id: 76158339\n  open_window: 0\n  visible: 0\n- type: DOC\n  title: 命令模式：江湖通缉令\n  uuid: PoBek3VT-clw6YJQ\n  url: ro2iu8\n  prev_uuid: zmQm5ECyq6leF2PJ\n  sibling_uuid: DBxd87bCzenGMWZM\n  child_uuid: ''\n  parent_uuid: TKjNLxzsEvV-8OQ3\n  doc_id: 76158383\n  level: 2\n  id: 76158383\n  open_window: 0\n  visible: 0\n- type: DOC\n  title: 职责链模式：领导，我想请个假\n  uuid: DBxd87bCzenGMWZM\n  url: foznxz\n  prev_uuid: PoBek3VT-clw6YJQ\n  sibling_uuid: qmPtYgpm0KNR2Idp\n  child_uuid: ''\n  parent_uuid: TKjNLxzsEvV-8OQ3\n  doc_id: 76158417\n  level: 2\n  id: 76158417\n  open_window: 0\n  visible: 0\n- type: DOC\n  title: 中介者模式：找媒人介绍对象\n  uuid: qmPtYgpm0KNR2Idp\n  url: ogglev\n  prev_uuid: DBxd87bCzenGMWZM\n  sibling_uuid: ''\n  child_uuid: ''\n  parent_uuid: TKjNLxzsEvV-8OQ3\n  doc_id: 76158479\n  level: 2\n  id: 76158479\n  open_window: 0\n  visible: 0\n- type: TITLE\n  title: 其他模式\n  uuid: v09XKwozBY05xZwo\n  url: ''\n  prev_uuid: TKjNLxzsEvV-8OQ3\n  sibling_uuid: ''\n  child_uuid: 4dVV00R_mZE1DrwK\n  parent_uuid: NjvgaFbxjDjDquPs\n  doc_id: ''\n  level: 1\n  id: ''\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: MVC、MVP、MVVM\n  uuid: 4dVV00R_mZE1DrwK\n  url: fsq7zk\n  prev_uuid: v09XKwozBY05xZwo\n  sibling_uuid: 4r6hmhgqPGZM0f-V\n  child_uuid: ''\n  parent_uuid: v09XKwozBY05xZwo\n  doc_id: 76158563\n  level: 2\n  id: 76158563\n  open_window: 0\n  visible: 0\n- type: DOC\n  title: 模块模式\n  uuid: 4r6hmhgqPGZM0f-V\n  url: iuz8cq\n  prev_uuid: 4dVV00R_mZE1DrwK\n  sibling_uuid: 3Tl5Ezys8fWumdtI\n  child_uuid: ''\n  parent_uuid: v09XKwozBY05xZwo\n  doc_id: 76158605\n  level: 2\n  id: 76158605\n  open_window: 0\n  visible: 0\n- type: DOC\n  title: 链模式\n  uuid: 3Tl5Ezys8fWumdtI\n  url: dd1zkg\n  prev_uuid: 4r6hmhgqPGZM0f-V\n  sibling_uuid: 5HZMFXgHcKbHDbAm\n  child_uuid: ''\n  parent_uuid: v09XKwozBY05xZwo\n  doc_id: 76158637\n  level: 2\n  id: 76158637\n  open_window: 0\n  visible: 0\n- type: DOC\n  title: 中间件\n  uuid: 5HZMFXgHcKbHDbAm\n  url: ckmwol\n  prev_uuid: 3Tl5Ezys8fWumdtI\n  sibling_uuid: ''\n  child_uuid: ''\n  parent_uuid: v09XKwozBY05xZwo\n  doc_id: 76158659\n  level: 2\n  id: 76158659\n  open_window: 0\n  visible: 0\n- type: DOC\n  title: NodeJS\n  uuid: EVQTfJhAXBsdI9RS\n  url: kvz3ia\n  prev_uuid: NjvgaFbxjDjDquPs\n  sibling_uuid: sETeEocX3KoAjN4C\n  child_uuid: KuyWvW7e-Iqza8tB\n  parent_uuid: ''\n  doc_id: 72212317\n  level: 0\n  id: 72212317\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: koa\n  uuid: KuyWvW7e-Iqza8tB\n  url: uh8e2o\n  prev_uuid: EVQTfJhAXBsdI9RS\n  sibling_uuid: ''\n  child_uuid: ''\n  parent_uuid: EVQTfJhAXBsdI9RS\n  doc_id: 76189255\n  level: 1\n  id: 76189255\n  open_window: 0\n  visible: 1\n- type: TITLE\n  title: 前端前沿技术\n  uuid: sETeEocX3KoAjN4C\n  url: ''\n  prev_uuid: EVQTfJhAXBsdI9RS\n  sibling_uuid: T2m_bXwyhIIt4efV\n  child_uuid: Rmo1yN_IvtmUw-Jw\n  parent_uuid: ''\n  doc_id: ''\n  level: 0\n  id: ''\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 2022年哪些前端技术点会火？\n  uuid: Rmo1yN_IvtmUw-Jw\n  url: dx03eg\n  prev_uuid: sETeEocX3KoAjN4C\n  sibling_uuid: M9hz7-1Xb17n1xJH\n  child_uuid: ''\n  parent_uuid: sETeEocX3KoAjN4C\n  doc_id: 72212106\n  level: 1\n  id: 72212106\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 关于2022前端趋势总结的总结\n  uuid: M9hz7-1Xb17n1xJH\n  url: bvq3i9\n  prev_uuid: Rmo1yN_IvtmUw-Jw\n  sibling_uuid: 5j76c3Np6YlU5BK5\n  child_uuid: ''\n  parent_uuid: sETeEocX3KoAjN4C\n  doc_id: 72212105\n  level: 1\n  id: 72212105\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: Vue3.2 更新内容\n  uuid: 5j76c3Np6YlU5BK5\n  url: ia89dn\n  prev_uuid: M9hz7-1Xb17n1xJH\n  sibling_uuid: ''\n  child_uuid: ''\n  parent_uuid: sETeEocX3KoAjN4C\n  doc_id: 72212098\n  level: 1\n  id: 72212098\n  open_window: 0\n  visible: 1\n- type: TITLE\n  title: 精选笔记\n  uuid: T2m_bXwyhIIt4efV\n  url: ''\n  prev_uuid: sETeEocX3KoAjN4C\n  sibling_uuid: ''\n  child_uuid: qAH5c79MrPTnrzC2\n  parent_uuid: ''\n  doc_id: ''\n  level: 0\n  id: ''\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: Html 精选\n  uuid: qAH5c79MrPTnrzC2\n  url: tdmwtw\n  prev_uuid: T2m_bXwyhIIt4efV\n  sibling_uuid: O8A1TxI5Yrt4OrdY\n  child_uuid: ''\n  parent_uuid: T2m_bXwyhIIt4efV\n  doc_id: 72212275\n  level: 1\n  id: 72212275\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: Css 精选\n  uuid: O8A1TxI5Yrt4OrdY\n  url: tf1yfg\n  prev_uuid: qAH5c79MrPTnrzC2\n  sibling_uuid: jTwW11V9HcT_Yd9G\n  child_uuid: ''\n  parent_uuid: T2m_bXwyhIIt4efV\n  doc_id: 72212272\n  level: 1\n  id: 72212272\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: JavaScript 精选\n  uuid: jTwW11V9HcT_Yd9G\n  url: ofgykz\n  prev_uuid: O8A1TxI5Yrt4OrdY\n  sibling_uuid: k6oWUdlMoIZTpbLG\n  child_uuid: ''\n  parent_uuid: T2m_bXwyhIIt4efV\n  doc_id: 72212277\n  level: 1\n  id: 72212277\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 计算机网络精选\n  uuid: k6oWUdlMoIZTpbLG\n  url: qg8cut\n  prev_uuid: jTwW11V9HcT_Yd9G\n  sibling_uuid: tJXjV-LZN2IsR4s0\n  child_uuid: ''\n  parent_uuid: T2m_bXwyhIIt4efV\n  doc_id: 72212279\n  level: 1\n  id: 72212279\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 操作系统精选\n  uuid: tJXjV-LZN2IsR4s0\n  url: tqxxpv\n  prev_uuid: k6oWUdlMoIZTpbLG\n  sibling_uuid: ''\n  child_uuid: ''\n  parent_uuid: T2m_bXwyhIIt4efV\n  doc_id: 72212270\n  level: 1\n  id: 72212270\n  open_window: 0\n  visible: 1\n",
    "creator_id": 732231,
    "public": 0,
    "items_count": 237,
    "likes_count": 0,
    "watches_count": 1,
    "content_updated_at": "2023-11-19T17:42:04.537Z",
    "created_at": "2022-04-04T11:31:45.000Z",
    "updated_at": "2023-11-19T17:42:05.000Z",
    "user": {
      "id": 732231,
      "type": "User",
      "login": "wcywxq",
      "name": "magic",
      "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/732231/1606968271774-avatar/886ad88b-d2cc-4c9e-a674-f70eb51a679c.png",
      "books_count": 21,
      "public_books_count": 0,
      "followers_count": 0,
      "following_count": 0,
      "public": 1,
      "description": null,
      "created_at": "2020-01-08T14:21:31.000Z",
      "updated_at": "2023-11-23T19:11:28.000Z",
      "work_id": "",
      "_serializer": "v2.user"
    },
    "namespace": "wcywxq/mxunh7",
    "_serializer": "v2.book"
  },
  "user": {
    "id": 732231,
    "type": "User",
    "login": "wcywxq",
    "name": "magic",
    "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/732231/1606968271774-avatar/886ad88b-d2cc-4c9e-a674-f70eb51a679c.png",
    "books_count": 21,
    "public_books_count": 0,
    "followers_count": 0,
    "following_count": 0,
    "public": 1,
    "description": null,
    "created_at": "2020-01-08T14:21:31.000Z",
    "updated_at": "2023-11-23T19:11:28.000Z",
    "work_id": "",
    "_serializer": "v2.user"
  },
  "tags": [],
  "latest_version_id": 2124593688,
  "creator": {
    "id": 732231,
    "type": "User",
    "login": "wcywxq",
    "name": "magic",
    "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/732231/1606968271774-avatar/886ad88b-d2cc-4c9e-a674-f70eb51a679c.png",
    "books_count": 21,
    "public_books_count": 0,
    "followers_count": 0,
    "following_count": 0,
    "public": 1,
    "description": null,
    "created_at": "2020-01-08T14:21:31.000Z",
    "updated_at": "2023-11-23T19:11:28.000Z",
    "work_id": "",
    "_serializer": "v2.user"
  },
  "_serializer": "v2.doc_detail"
}