{
  "id": 11465876,
  "slug": "thzcqg",
  "title": "编程语言-Dart",
  "description": "Dart语言入门教程官方网站：https://dart.dev/中文网站：http://dart.goodev.org/一、 安装获取 dart SDK// 稳定版 brew tap dart-lang/dart brew install dart// 最新版 brew install dar...",
  "cover": "",
  "user_id": 732231,
  "book_id": 25332177,
  "last_editor_id": 732231,
  "format": "lake",
  "body_draft": "<!doctype html><div class=\"lake-content\" typography=\"traditional\"><h1 id=\"a2578a9d\"><span class=\"ne-text\">Dart语言入门教程</span></h1><p id=\"0c4d068e4aede2bc9d552ce387999b01_p_4\" class=\"ne-p\"><br></p><p id=\"6705f221661db373747186fcc0d8b368_p_5\" class=\"ne-p\"><a href=\"https://dart.dev/\" data-href=\"https://dart.dev/\" target=\"_blank\" class=\"ne-link\"><strong><span class=\"ne-text\">官方网站：https://dart.dev/</span></strong></a></p><p id=\"f23fb9c519ff30bfe03d0b2cc2cac85d_p_6\" class=\"ne-p\"><br></p><p id=\"e1ae3c4cdaff9ecb8f54a69d09000e7f_p_7\" class=\"ne-p\"><a href=\"http://dart.goodev.org/\" data-href=\"http://dart.goodev.org/\" target=\"_blank\" class=\"ne-link\"><strong><span class=\"ne-text\">中文网站：http://dart.goodev.org/</span></strong></a></p><p id=\"92c8228235b93f7cc9ced6ac90fca3a6_p_8\" class=\"ne-p\"><br></p><h2 id=\"63554eb7\"><span class=\"ne-text\">一、 安装</span></h2><p id=\"eadc4ec477465f1f239730d987d394b1_p_9\" class=\"ne-p\"><br></p><p id=\"3adfce58bc38f68773194b31cdb94195_p_10\" class=\"ne-p\"><span class=\"ne-text\">获取 </span><code class=\"ne-code\"><span class=\"ne-text\">dart SDK</span></code></p><p id=\"828bea0262f636b25c97fbef525aed20_p_11\" class=\"ne-p\"><br></p><pre data-language=\"bash\" id=\"467fb524\" class=\"ne-codeblock language-bash\">// 稳定版\nbrew tap dart-lang/dart\nbrew install dart</pre><p id=\"09a2b5671cf447a1a3529d71c89cf9e1_p_12\" class=\"ne-p\"><br></p><pre data-language=\"bash\" id=\"3a0f0fc8\" class=\"ne-codeblock language-bash\">// 最新版\nbrew install dart --devel</pre><p id=\"2369fafe89fae403079018df6f36b51b_p_13\" class=\"ne-p\"><br></p><pre data-language=\"bash\" id=\"71a442ec\" class=\"ne-codeblock language-bash\">// 升级\nbrew upgrade dart</pre><p id=\"7cf79ceeaaf91ef14264b4c55c1c8c1d_p_14\" class=\"ne-p\"><br></p><pre data-language=\"bash\" id=\"9e2519f8\" class=\"ne-codeblock language-bash\">// 安装稳定版\nbrew unlink dart\nbrew install dart</pre><p id=\"c53070088aadb43ef468f61fca8ca22a_p_15\" class=\"ne-p\"><br></p><pre data-language=\"bash\" id=\"ee7c088f\" class=\"ne-codeblock language-bash\">// 安装最新版\nbrew upgrade --force dart -- --level</pre><p id=\"42752743bc6d3f9f6c928fb47989b8c2_p_16\" class=\"ne-p\"><br></p><pre data-language=\"bash\" id=\"740b9612\" class=\"ne-codeblock language-bash\">// 查看版本\nbrew info dart</pre><p id=\"c5eaf555cee01ec836fc749258c6179d_p_17\" class=\"ne-p\"><br></p><h2 id=\"4e1cfe64\"><span class=\"ne-text\">二、 介绍</span></h2><p id=\"3f8949dd5527f0c9624c3fd3faefb76f_p_18\" class=\"ne-p\"><br></p><p id=\"73aad70cb1af7691c154b98afa7c6c13_p_19\" class=\"ne-p\"><code class=\"ne-code\"><span class=\"ne-text\">main</span></code><span class=\"ne-text\"> 方法：程序入口</span></p><p id=\"db841a6e995b001085603629a3ace379_p_20\" class=\"ne-p\"><br></p><p id=\"27632d19dfb89c756ec6ef19b4b1680c_p_21\" class=\"ne-p\"><code class=\"ne-code\"><span class=\"ne-text\">print</span></code><span class=\"ne-text\"> 方法：可以在控制台输出内容</span></p><p id=\"37928cd1f32681ee4810a9ab9d3c1104_p_22\" class=\"ne-p\"><br></p><h2 id=\"93d6d18f\"><span class=\"ne-text\">三、 变量与常量</span></h2><p id=\"4547a4b65fb57fca5301c6973643450c_p_23\" class=\"ne-p\"><br></p><h3 id=\"a15d0d16\"><span class=\"ne-text\">3.1 变量</span></h3><p id=\"1f3b4b4a4867a8b756c196b38558d0c4_p_24\" class=\"ne-p\"><br></p><p id=\"078bdfad2e546716bb6d702274e69900_p_25\" class=\"ne-p\"><span class=\"ne-text\">使用 </span><code class=\"ne-code\"><span class=\"ne-text\">var</span></code><span class=\"ne-text\"> 声明变量，可赋予不同类型的值。</span></p><p id=\"b57de0a6a045efefe71d109094be9ddc_p_26\" class=\"ne-p\"><br></p><p id=\"5959332689a9fb7853abd9b3da1fd79b_p_27\" class=\"ne-p\"><span class=\"ne-text\">未初始化时，默认值为 </span><code class=\"ne-code\"><span class=\"ne-text\">null</span></code><span class=\"ne-text\">。</span></p><p id=\"d17d837b16c49a0e5c21edc18722e410_p_28\" class=\"ne-p\"><br></p><p id=\"d3f96a37df9cae0ea34ac942ae464a54_p_29\" class=\"ne-p\"><span class=\"ne-text\">使用 </span><code class=\"ne-code\"><span class=\"ne-text\">final</span></code><span class=\"ne-text\"> 关键字声明一个只能赋值一次的变量。</span></p><p id=\"d657ac1e4c3211af4f7dcea889518735_p_30\" class=\"ne-p\"><br></p><h3 id=\"a2c425db\"><span class=\"ne-text\">3.2 常量</span></h3><p id=\"e2e9b10bfede90e88bd47291199e0b55_p_31\" class=\"ne-p\"><br></p><p id=\"aa5ef4fb9dccfd710d04f9b1cd838995_p_32\" class=\"ne-p\"><span class=\"ne-text\">使用 </span><code class=\"ne-code\"><span class=\"ne-text\">const</span></code><span class=\"ne-text\"> 声明常量</span></p><p id=\"73b74e66f7d869f94eb34b57d63eae3f_p_33\" class=\"ne-p\"><br></p><p id=\"8a852428bd1d78bb205afaebe2c0a34d_p_34\" class=\"ne-p\"><span class=\"ne-text\">使用 </span><code class=\"ne-code\"><span class=\"ne-text\">const</span></code><span class=\"ne-text\"> 声明的必须是编译器的常量 </span><code class=\"ne-code\"><span class=\"ne-text\">=&amp;gt;</span></code><span class=\"ne-text\"> 在编译阶段就可以确定它的值</span></p><p id=\"86d045d193aa7ac4616d4ea50a0dc92f_p_35\" class=\"ne-p\"><br></p><h2 id=\"b6691530\"><span class=\"ne-text\">四、 数据类型</span></h2><p id=\"6f8f966688575a1f666bafa122494f73_p_36\" class=\"ne-p\"><br></p><h3 id=\"23be9bf8\"><span class=\"ne-text\">4.1 数值型：</span><code class=\"ne-code\"><span class=\"ne-text\">Number</span></code><span class=\"ne-text\"> (简写：</span><code class=\"ne-code\"><span class=\"ne-text\">num</span></code><span class=\"ne-text\">)</span></h3><p id=\"ab57135091a86c42cc63ec67ac068a45_p_37\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"84c394ea544064f7d73c652517a1814b_li_2\"><span class=\"ne-text\">子类型：</span></li></ul><p id=\"82f45866a429f6224b2e92c65bfda254_p_38\" class=\"ne-p\"><br></p><ol class=\"ne-ol\"><li id=\"ecb3a0c72e5d389dc3397371256fc038_li_3\"><span class=\"ne-text\">整型 </span><code class=\"ne-code\"><span class=\"ne-text\">Int</span></code></li></ol><ol start=\"2\" class=\"ne-ol\"><li id=\"01e024c77bff0264be5d7cf5dc145571_li_4\"><span class=\"ne-text\">浮点型 </span><code class=\"ne-code\"><span class=\"ne-text\">double</span></code></li></ol><p id=\"faade82d6cfe8ed09f505bc5d9204fda_p_39\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"cbcbcfa84a0c5e81080258b6f8249e69_li_5\"><span class=\"ne-text\">数值型操作：</span></li></ul><p id=\"17b412f9fc3ec51ada5f566f0d09108c_p_40\" class=\"ne-p\"><br></p><p id=\"7f62102a159170d36a5cb2b841901be8_p_41\" class=\"ne-p\"><strong><span class=\"ne-text\">运算符：</span></strong><span class=\"ne-text\"> </span><code class=\"ne-code\"><span class=\"ne-text\">+</span></code><span class=\"ne-text\">、</span><code class=\"ne-code\"><span class=\"ne-text\">-</span></code><span class=\"ne-text\">、</span><code class=\"ne-code\"><span class=\"ne-text\">*</span></code><span class=\"ne-text\">、</span><code class=\"ne-code\"><span class=\"ne-text\">/</span></code><span class=\"ne-text\">、</span><code class=\"ne-code\"><span class=\"ne-text\">～/</span></code><span class=\"ne-text\">(</span><strong><span class=\"ne-text\">取整</span></strong><span class=\"ne-text\">)、</span><code class=\"ne-code\"><span class=\"ne-text\">%</span></code><span class=\"ne-text\">(</span><strong><span class=\"ne-text\">取余</span></strong><span class=\"ne-text\">)</span></p><p id=\"aebb7af96a9ee3c9b7a669f28fef1d7e_p_42\" class=\"ne-p\"><br></p><p id=\"d8cb98402c8fed5051add71eaff7c1d8_p_43\" class=\"ne-p\"><strong><span class=\"ne-text\">常用属性：</span></strong><span class=\"ne-text\"> </span><code class=\"ne-code\"><span class=\"ne-text\">isNaN</span></code><span class=\"ne-text\"> (</span><strong><span class=\"ne-text\">是否是非数字</span></strong><span class=\"ne-text\">)、</span><code class=\"ne-code\"><span class=\"ne-text\">isEven</span></code><span class=\"ne-text\"> (</span><strong><span class=\"ne-text\">是否是偶数</span></strong><span class=\"ne-text\">)、</span><code class=\"ne-code\"><span class=\"ne-text\">isOdd</span></code><span class=\"ne-text\"> (</span><strong><span class=\"ne-text\">是否是奇数</span></strong><span class=\"ne-text\">)</span></p><p id=\"157b805d005afe38c7c2d5198b31ee6e_p_44\" class=\"ne-p\"><br></p><p id=\"0e61345db0c4d82610fea33ad6549618_p_45\" class=\"ne-p\"><strong><span class=\"ne-text\">常用方法：</span></strong></p><p id=\"e81b6efc8e2153cf8aa53e3b04d7f22c_p_46\" class=\"ne-p\"><br></p><p id=\"901ad89df13f1fa8b0ed7230cc4a5f20_p_47\" class=\"ne-p\"><span class=\"ne-text\"> 1. </span><code class=\"ne-code\"><span class=\"ne-text\">abs()</span></code><span class=\"ne-text\"> 绝对值</span></p><p id=\"aa95668f5a65b03373d1b0b3f9f8d3a6_p_48\" class=\"ne-p\"><br></p><p id=\"30d09586ebab31a6f06d7323c74bceba_p_49\" class=\"ne-p\"><span class=\"ne-text\"> 2. </span><code class=\"ne-code\"><span class=\"ne-text\">round()</span></code><span class=\"ne-text\"> 四舍五入</span></p><p id=\"4108a5bc411c7547dc6876b612b07f81_p_50\" class=\"ne-p\"><br></p><p id=\"7df0a2ce0c0b7778e06fe404c42899ad_p_51\" class=\"ne-p\"><span class=\"ne-text\"> 3. </span><code class=\"ne-code\"><span class=\"ne-text\">floor()</span></code><span class=\"ne-text\"> 取不大于它的整数，向下取整</span></p><p id=\"bc2359f7bb1e32241fa27f528e60a125_p_52\" class=\"ne-p\"><br></p><p id=\"7b36ba3badabb6c5f85e8b19dc8baeac_p_53\" class=\"ne-p\"><span class=\"ne-text\"> 4. </span><code class=\"ne-code\"><span class=\"ne-text\">ceil()</span></code><span class=\"ne-text\"> 取不小于于它的整数，向上取整</span></p><p id=\"e10b5c78ee7ba45f407740af88433fc9_p_54\" class=\"ne-p\"><br></p><p id=\"fc05bb753339cca5ffc6eea670440b23_p_55\" class=\"ne-p\"><span class=\"ne-text\"> 5. </span><code class=\"ne-code\"><span class=\"ne-text\">toInt()</span></code><span class=\"ne-text\"> 浮点型转整形</span></p><p id=\"a6e7204180aba568d27cc7b95d0717fd_p_56\" class=\"ne-p\"><br></p><p id=\"2685b546b5ccfd6e48aea7e4c95c24a1_p_57\" class=\"ne-p\"><span class=\"ne-text\"> 6. </span><code class=\"ne-code\"><span class=\"ne-text\">toDouble()</span></code><span class=\"ne-text\"> 整形转浮点型</span></p><p id=\"e3c9bad72638009a374744280c63ecc6_p_58\" class=\"ne-p\"><br></p><p id=\"579486377ec4151f50ec12d2813167ca_p_59\" class=\"ne-p\"><strong><span class=\"ne-text\">注意:</span></strong><span class=\"ne-text\"> </span><code class=\"ne-code\"><span class=\"ne-text\">0.0 /0.0 =&gt; NAN</span></code></p><p id=\"daa3e859dfee1b8825cb9c219dcb2526_p_60\" class=\"ne-p\"><br></p><h3 id=\"d0c6a326\"><span class=\"ne-text\">4.2 字符串：</span><code class=\"ne-code\"><span class=\"ne-text\">String</span></code></h3><p id=\"d89d8c6a729313c0d25f9b1742c0d590_p_61\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"4807df6b1158ec79afe639aac52454d6_li_6\"><span class=\"ne-text\">字符串的使用</span></li></ul><p id=\"9b034733f43578c770243b15c945bc07_p_62\" class=\"ne-p\"><br></p><ol class=\"ne-ol\"><li id=\"4f2de47ac07855b064dff5485a44e190_li_7\"><span class=\"ne-text\">使用单引号，双引号创建字符串</span></li></ol><ol start=\"2\" class=\"ne-ol\"><li id=\"48acd77122ea45a1f8180903fb4b4595_li_8\"><span class=\"ne-text\">使用三个引号或双引号创建多行字符串</span></li></ol><ol start=\"3\" class=\"ne-ol\"><li id=\"406b9e952065106e30a26d9b40c27281_li_9\"><span class=\"ne-text\">使用 </span><code class=\"ne-code\"><span class=\"ne-text\">r</span></code><span class=\"ne-text\"> 创建原始 </span><code class=\"ne-code\"><span class=\"ne-text\">raw</span></code><span class=\"ne-text\"> 字符串. </span><code class=\"ne-code\"><span class=\"ne-text\">=&amp;gt;</span></code></li></ol><p id=\"87e34965e50e2c8e31ce44a85667e8dd_p_63\" class=\"ne-p\"><br></p><pre data-language=\"dart\" id=\"ddcffe57\" class=\"ne-codeblock language-dart\">String str = 'Hello \\n World!';\nprint(str); // 输出换行形式的 Hello World\n\nString str1 = r'Hello \\n World!';\nprint(str1); // 输出 Hello \\n World</pre><p id=\"b3add770127d8c2a5064673aa8a9731f_p_64\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"50c417f6f8aacca49cb21782e8eecbd5_li_10\"><span class=\"ne-text\">字符串操作</span></li></ul><p id=\"2a81d6eed31dfd1dc3c193bbdb75c1a1_p_65\" class=\"ne-p\"><br></p><p id=\"a3b1a8ba5f5881d907725330f1388134_p_66\" class=\"ne-p\"><strong><span class=\"ne-text\">运算符:</span></strong><span class=\"ne-text\"> </span><code class=\"ne-code\"><span class=\"ne-text\">+</span></code><span class=\"ne-text\">、</span><code class=\"ne-code\"><span class=\"ne-text\">*</span></code><span class=\"ne-text\">(</span><strong><span class=\"ne-text\">重复次数</span></strong><span class=\"ne-text\">)、</span><code class=\"ne-code\"><span class=\"ne-text\">==</span></code><span class=\"ne-text\">、</span><code class=\"ne-code\"><span class=\"ne-text\">[]</span></code><span class=\"ne-text\">(</span><strong><span class=\"ne-text\">取字符</span></strong><span class=\"ne-text\">)</span></p><p id=\"152302cc03cd3433e252fd8fbe4bade7_p_67\" class=\"ne-p\"><br></p><p id=\"4c8e762298f4de42a44d7beaa8a560d7_p_68\" class=\"ne-p\"><strong><span class=\"ne-text\">插值表达式：</span></strong><span class=\"ne-text\"> </span><code class=\"ne-code\"><span class=\"ne-text\">${expression}</span></code></p><p id=\"956e0d4312e941b77cd57ec35c294aff_p_69\" class=\"ne-p\"><br></p><pre data-language=\"dart\" id=\"cebc7176\" class=\"ne-codeblock language-dart\">int a = 1;\nint b = 2;\nprint('a + b = ${a + b}');\nprint('a=$a');</pre><p id=\"67523e0fa28fe87849ce38cd391e3347_p_70\" class=\"ne-p\"><br></p><p id=\"32901d9d2241486b0f03eeb197210d43_p_71\" class=\"ne-p\"><strong><span class=\"ne-text\">常用属性</span></strong><span class=\"ne-text\">：</span><code class=\"ne-code\"><span class=\"ne-text\">length</span></code><span class=\"ne-text\">、</span><code class=\"ne-code\"><span class=\"ne-text\">isEmpty</span></code><span class=\"ne-text\">、</span><code class=\"ne-code\"><span class=\"ne-text\">isNotEmpty</span></code></p><p id=\"200b796b4b1f5a36aa12caae6b6fa3d8_p_72\" class=\"ne-p\"><br></p><p id=\"c3824fa46270d486ccc5e4bf91047513_p_73\" class=\"ne-p\"><strong><span class=\"ne-text\">常用方法</span></strong><span class=\"ne-text\">：</span></p><p id=\"d36608d2dcf9f070081537010b5adfb3_p_74\" class=\"ne-p\"><br></p><p id=\"0e112c57c86c4738545f78f11e57db61_p_75\" class=\"ne-p\"><span class=\"ne-text\">1、</span><code class=\"ne-code\"><span class=\"ne-text\">contains()</span></code><span class=\"ne-text\">(是否包含)</span></p><p id=\"391eee0f96cca26f6e7df243706d21bf_p_76\" class=\"ne-p\"><br></p><p id=\"235db49a5621c0f65445c20861a774d3_p_77\" class=\"ne-p\"><span class=\"ne-text\">2、</span><code class=\"ne-code\"><span class=\"ne-text\">subString()</span></code><span class=\"ne-text\">(截取一段字符串，参数1:开始位置；参数2:结束位置(不包括))</span></p><p id=\"f585fed1cef9af7641b65ac1c4919258_p_78\" class=\"ne-p\"><br></p><p id=\"9672958375b123e1e3a4c4e0e8c981b0_p_79\" class=\"ne-p\"><span class=\"ne-text\">3、</span><code class=\"ne-code\"><span class=\"ne-text\">startsWith()</span></code><span class=\"ne-text\">(是否以一个字符串开头)</span></p><p id=\"cacc5e28cdefa24e262c83e0ab2a3ade_p_80\" class=\"ne-p\"><br></p><p id=\"9f8e2fa2713b39a415bd142e9d26b9ae_p_81\" class=\"ne-p\"><span class=\"ne-text\">4、</span><code class=\"ne-code\"><span class=\"ne-text\">endsWith()</span></code><span class=\"ne-text\">(是否以一个字符串结尾)</span></p><p id=\"ede07f6666baf1587414d7171c5dd877_p_82\" class=\"ne-p\"><br></p><p id=\"7eac4beb2a9933bfb57148c14dfef49a_p_83\" class=\"ne-p\"><span class=\"ne-text\">5、</span><code class=\"ne-code\"><span class=\"ne-text\">indexOf()</span></code><span class=\"ne-text\">(是否包含一个字符，返回这个字符的下标)</span></p><p id=\"470257ffbff08ad0eedbc557452f8c66_p_84\" class=\"ne-p\"><br></p><p id=\"7a449560b032be8c023c2d413f18a99c_p_85\" class=\"ne-p\"><span class=\"ne-text\">6、</span><code class=\"ne-code\"><span class=\"ne-text\">lastIndexOf()</span></code><span class=\"ne-text\">(是否包含一个字符，倒序返回这个字符的下标)</span></p><p id=\"c07d4a2054239914d4a014d7d64fcf23_p_86\" class=\"ne-p\"><br></p><p id=\"65f948928283ecdcfb33599856a7a1f9_p_87\" class=\"ne-p\"><span class=\"ne-text\">7、</span><code class=\"ne-code\"><span class=\"ne-text\">toLowerCase()</span></code><span class=\"ne-text\">(转换小写)</span></p><p id=\"ac4c0d2013d04adfac6d2e9459525ac0_p_88\" class=\"ne-p\"><br></p><p id=\"c4af109e5f9e548d8aed504aa58bdf77_p_89\" class=\"ne-p\"><span class=\"ne-text\">8、</span><code class=\"ne-code\"><span class=\"ne-text\">toUpperCase()</span></code><span class=\"ne-text\">(转换大写)</span></p><p id=\"700ece5e21ebc17eb29d438c814531fe_p_90\" class=\"ne-p\"><br></p><p id=\"d240e07c3cda8763d135a158a8868d9c_p_91\" class=\"ne-p\"><span class=\"ne-text\">9、</span><code class=\"ne-code\"><span class=\"ne-text\">trim()</span></code><span class=\"ne-text\">(截取空格)</span></p><p id=\"f82a35c2fca60d6b3bdc5c1000201985_p_92\" class=\"ne-p\"><br></p><p id=\"dd4f5705532ea3e11e67d07369fd2a2a_p_93\" class=\"ne-p\"><span class=\"ne-text\">10、</span><code class=\"ne-code\"><span class=\"ne-text\">trimLeft()</span></code><span class=\"ne-text\">(截取左边空格)</span></p><p id=\"d0973d57fdd5c28d718b374e8fa011eb_p_94\" class=\"ne-p\"><br></p><p id=\"06974f7abdfcf9aad7ed34c1efb75387_p_95\" class=\"ne-p\"><span class=\"ne-text\">11、</span><code class=\"ne-code\"><span class=\"ne-text\">trimRight()</span></code><span class=\"ne-text\">(截取右边空格)</span></p><p id=\"cd1514dfedaab485e5767b166731e116_p_96\" class=\"ne-p\"><br></p><p id=\"6e6fc016839665ac1b188eebf806ce0b_p_97\" class=\"ne-p\"><span class=\"ne-text\">12、</span><code class=\"ne-code\"><span class=\"ne-text\">split()</span></code><span class=\"ne-text\">(分割字符串)</span></p><p id=\"545db91b827f87cc9afe81c0f08a1a88_p_98\" class=\"ne-p\"><br></p><p id=\"7f071668e9a71f32f4ce84b5d6d9d99e_p_99\" class=\"ne-p\"><span class=\"ne-text\">13、</span><code class=\"ne-code\"><span class=\"ne-text\">replaceXXX()</span></code><span class=\"ne-text\">(替换)</span></p><p id=\"ec69cd8d8f73ee437722723e0adf1fa7_p_100\" class=\"ne-p\"><br></p><h3 id=\"8ca0f9f4\"><span class=\"ne-text\">4.3 布尔型：</span><code class=\"ne-code\"><span class=\"ne-text\">Boolean</span></code></h3><p id=\"01884230bc631815ce050c63d5156a8c_p_101\" class=\"ne-p\"><br></p><h3 id=\"7a6f4b82\"><span class=\"ne-text\">4.4 列表：</span><code class=\"ne-code\"><span class=\"ne-text\">List</span></code></h3><p id=\"a2c2ab33193f15adcdff2e08f718d7c2_p_102\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"bbc34005924571b22b99d435b8cc5fcc_li_11\"><code class=\"ne-code\"><strong><span class=\"ne-text\">List</span></strong></code><strong><span class=\"ne-text\">(数组)的创建</span></strong></li></ul><p id=\"c4eb78622bfacec164736bf4df40fa3b_p_103\" class=\"ne-p\"><br></p><p id=\"507710bca3293fce405d2de8337463c2_p_104\" class=\"ne-p\"><strong><span class=\"ne-text\">创建 </span></strong><code class=\"ne-code\"><strong><span class=\"ne-text\">List</span></strong></code><strong><span class=\"ne-text\">：</span></strong></p><p id=\"702e00ceee7e1a86732f5fe484305638_p_105\" class=\"ne-p\"><br></p><pre data-language=\"dart\" id=\"3e45b4fd\" class=\"ne-codeblock language-dart\">var list = [1, 2, 3];</pre><p id=\"32e4b810a1a3b020b0a0d082442d55f7_p_106\" class=\"ne-p\"><br></p><p id=\"7fde13e3572576071427149c071f3106_p_107\" class=\"ne-p\"><strong><span class=\"ne-text\">创建不可变的 List：</span></strong></p><p id=\"c6ea08d82bf830d4344bc47c75959696_p_108\" class=\"ne-p\"><br></p><pre data-language=\"dart\" id=\"84ac5242\" class=\"ne-codeblock language-dart\">var list = const [1, 2, 3];</pre><p id=\"db6a3a7f6005176b48ff149f30b21edd_p_109\" class=\"ne-p\"><br></p><p id=\"2ec24553e9f1e3274c41666eb9b18f98_p_110\" class=\"ne-p\"><strong><span class=\"ne-text\">构造创建：</span></strong></p><p id=\"7df9b20b6b924d2fc8c9e5079bc8d88d_p_111\" class=\"ne-p\"><br></p><pre data-language=\"dart\" id=\"5cf82732\" class=\"ne-codeblock language-dart\">var list = new List();</pre><p id=\"91e61ff04e041e671d1cfa701fb2f0a0_p_112\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"6cdc930b0a9bcb62ff889202652ee4a2_li_12\"><strong><span class=\"ne-text\">常用操作</span></strong></li></ul><p id=\"45e36abc53ce1dcd83cb64d5bdb2b960_p_113\" class=\"ne-p\"><br></p><p id=\"fbf5c055cc27a29000dc26ca46f6a5b2_p_114\" class=\"ne-p\"><code class=\"ne-code\"><span class=\"ne-text\">[].length</span></code></p><p id=\"bdad9f83e0239c83aaf356c272a6c0ea_p_115\" class=\"ne-p\"><br></p><p id=\"ebb6bef3211e5ba4d45cddf6700eeca8_p_116\" class=\"ne-p\"><code class=\"ne-code\"><span class=\"ne-text\">add()</span></code><span class=\"ne-text\">、</span><code class=\"ne-code\"><span class=\"ne-text\">insert()</span></code><span class=\"ne-text\"> </span><strong><span class=\"ne-text\">用来添加元素</span></strong></p><p id=\"df79537d6e51b378da87648af8c34dc2_p_117\" class=\"ne-p\"><br></p><p id=\"9e1d1d94e54dab315b967eb9cca78974_p_118\" class=\"ne-p\"><code class=\"ne-code\"><span class=\"ne-text\">remove()</span></code><span class=\"ne-text\">、</span><code class=\"ne-code\"><span class=\"ne-text\">clear()</span></code><span class=\"ne-text\"> </span><strong><span class=\"ne-text\">用来删除元素，其中 </span></strong><code class=\"ne-code\"><strong><span class=\"ne-text\">clear</span></strong></code><strong><span class=\"ne-text\"> 是清空整个 </span></strong><code class=\"ne-code\"><strong><span class=\"ne-text\">list</span></strong></code></p><p id=\"649530dfe6472825a73f37a542e2e465_p_119\" class=\"ne-p\"><br></p><p id=\"c44a782b4f97445dd1a5147d1cea57cb_p_120\" class=\"ne-p\"><code class=\"ne-code\"><span class=\"ne-text\">indexOf()</span></code><span class=\"ne-text\">、</span><code class=\"ne-code\"><span class=\"ne-text\">lastIndexOf</span></code><span class=\"ne-text\"> </span><strong><span class=\"ne-text\">获取 </span></strong><code class=\"ne-code\"><strong><span class=\"ne-text\">list</span></strong></code><strong><span class=\"ne-text\"> 中元素的位置</span></strong></p><p id=\"d0c08438d746f74145c64c20ef564288_p_121\" class=\"ne-p\"><br></p><p id=\"940e412ec8d104df799f638e9dae072a_p_122\" class=\"ne-p\"><code class=\"ne-code\"><span class=\"ne-text\">sort()</span></code><span class=\"ne-text\"> </span><strong><span class=\"ne-text\">排序，可以传递参数，参数是要传递的方法，默认按照 </span></strong><code class=\"ne-code\"><strong><span class=\"ne-text\">ASCII</span></strong></code><strong><span class=\"ne-text\"> 码来进行排序。</span></strong></p><p id=\"229af124bfdb4f72f7476a537561ed01_p_123\" class=\"ne-p\"><br></p><p id=\"0ad17f28928647e4d87741f38a742edb_p_124\" class=\"ne-p\"><code class=\"ne-code\"><span class=\"ne-text\">sublist()</span></code><span class=\"ne-text\"> </span><strong><span class=\"ne-text\">获取子 </span></strong><code class=\"ne-code\"><strong><span class=\"ne-text\">list</span></strong></code></p><p id=\"58e4bdcd35d7c4cee2e913ca95d454c8_p_125\" class=\"ne-p\"><br></p><p id=\"90ab158ab0669d472e9bce0892b494b1_p_126\" class=\"ne-p\"><code class=\"ne-code\"><span class=\"ne-text\">shuffle()</span></code><span class=\"ne-text\"> </span><strong><span class=\"ne-text\">打乱(随机打乱 )</span></strong></p><p id=\"218526f010699898c9b5afe5bee78564_p_127\" class=\"ne-p\"><br></p><p id=\"38259d4109422d7ac89903b2b931ec00_p_128\" class=\"ne-p\"><code class=\"ne-code\"><span class=\"ne-text\">asMap()</span></code><span class=\"ne-text\">  </span><strong><span class=\"ne-text\">将 </span></strong><code class=\"ne-code\"><strong><span class=\"ne-text\">list</span></strong></code><strong><span class=\"ne-text\"> 转换为 </span></strong><code class=\"ne-code\"><strong><span class=\"ne-text\">map</span></strong></code></p><p id=\"95d2789c2734df969b06fab66880adbb_p_129\" class=\"ne-p\"><br></p><p id=\"d1e49d942f29780dc2a90589abfcbd16_p_130\" class=\"ne-p\"><code class=\"ne-code\"><span class=\"ne-text\">forEach()</span></code><span class=\"ne-text\"> </span><strong><span class=\"ne-text\">循环一个 </span></strong><code class=\"ne-code\"><strong><span class=\"ne-text\">list</span></strong></code><strong><span class=\"ne-text\">，括号中传递的是一个方法。</span></strong><span class=\"ne-text\"> </span><code class=\"ne-code\"><span class=\"ne-text\">list.forEach(print);</span></code></p><p id=\"9478673e50b8f1aa6afefb8412111c6e_p_131\" class=\"ne-p\"><br></p><p id=\"2890fb7d42ad2dab771c823da10c2d83_p_132\" class=\"ne-p\"><code class=\"ne-code\"><span class=\"ne-text\">generate</span></code><span class=\"ne-text\"> (生成集合的长度, 迭代器回调函数)</span><strong><span class=\"ne-text\">集合的生成函数</span></strong></p><p id=\"ec0f52fa0be53a0503a5f45678d7af64_p_133\" class=\"ne-p\"><br></p><h3 id=\"851523de\"><span class=\"ne-text\">4.5 键值对：</span><code class=\"ne-code\"><span class=\"ne-text\">Map</span></code></h3><p id=\"6a5e5c037f52571ccd187b65a73b96f5_p_134\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"7619f286c38a1f8b13705838e4072d6c_li_13\"><code class=\"ne-code\"><span class=\"ne-text\">Map</span></code><span class=\"ne-text\"> 的创建</span></li></ul><p id=\"f8654ab62d3ffca1147edabe4e605303_p_135\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"73e63644f89cb670ef9bdb48b7cb4292_p_136\" class=\"ne-p\"><span class=\"ne-text\">创建 Map</span></p></div><p id=\"f474938634c47815c9cafa361ce29c41_p_137\" class=\"ne-p\"><br></p><pre data-language=\"dart\" id=\"5d50ed09\" class=\"ne-codeblock language-dart\">var language = {'first': 'Dart', 'second': 'Java'};</pre><p id=\"b1543dbd8d735319a0032dfd0a528e84_p_138\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"71856c5a7c4deddc6eefebb1c7f23656_p_139\" class=\"ne-p\"><span class=\"ne-text\">创建不可变 Map</span></p></div><p id=\"91cea5fb3ce029632e4cd2ba40ed2467_p_140\" class=\"ne-p\"><br></p><pre data-language=\"dart\" id=\"2460bc3e\" class=\"ne-codeblock language-dart\">var language = const {'first': 'Dart', 'second': 'Java'};</pre><p id=\"6a77d5641d799908d669ed274c8503e1_p_141\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"63bc3581ece212bbb29f4ecf97590143_p_142\" class=\"ne-p\"><span class=\"ne-text\">构造创建</span></p></div><p id=\"ecbf2a7b370d7c1f11409dc2caadd396_p_143\" class=\"ne-p\"><br></p><pre data-language=\"dart\" id=\"a6ad0cd0\" class=\"ne-codeblock language-dart\">var language = new Map();</pre><p id=\"4f67eb9790b6288e2156994dc5ad2f6e_p_144\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"363e14b7b4f572366c286c15573115f2_li_14\"><code class=\"ne-code\"><span class=\"ne-text\">Map</span></code><span class=\"ne-text\"> 常用操作</span></li></ul><p id=\"bdbce808fca59ee263677a643219090a_p_145\" class=\"ne-p\"><br></p><p id=\"5c50150ba70a9c56a561b16670294632_p_146\" class=\"ne-p\"><span class=\"ne-text\">1、</span><code class=\"ne-code\"><span class=\"ne-text\">[].length</span></code></p><p id=\"7e0f4c425a469a407bb6094b1048bd2a_p_147\" class=\"ne-p\"><br></p><p id=\"581833c2ef73158c738d8c4e5333ca21_p_148\" class=\"ne-p\"><span class=\"ne-text\">2、</span><code class=\"ne-code\"><span class=\"ne-text\">isEmpty()</span></code><span class=\"ne-text\">、</span><code class=\"ne-code\"><span class=\"ne-text\">isNotEmpty()</span></code><span class=\"ne-text\"> </span><strong><span class=\"ne-text\">是否为空</span></strong></p><p id=\"969bd2598fc33869bfe0a82878b9c62e_p_149\" class=\"ne-p\"><br></p><p id=\"56a6c5b5bb60e646eb5422731f4b7491_p_150\" class=\"ne-p\"><span class=\"ne-text\">3、</span><code class=\"ne-code\"><span class=\"ne-text\">keys,values</span></code><span class=\"ne-text\"> </span><strong><span class=\"ne-text\">获取 map 所有的键和所有的值</span></strong></p><p id=\"132b72ac11decfdb5c7171cc51240ee2_p_151\" class=\"ne-p\"><br></p><p id=\"1df5e03badd3a60f200a3b4926e6684d_p_152\" class=\"ne-p\"><span class=\"ne-text\">4、</span><code class=\"ne-code\"><span class=\"ne-text\">containsKey()</span></code><span class=\"ne-text\"> </span><strong><span class=\"ne-text\">是否包含某个键</span></strong></p><p id=\"d6aad01cce7555ee21c55669cd02505b_p_153\" class=\"ne-p\"><br></p><p id=\"040d1927073f9b26b3534a01ad54005f_p_154\" class=\"ne-p\"><span class=\"ne-text\">5、</span><code class=\"ne-code\"><span class=\"ne-text\">containsValue()</span></code><span class=\"ne-text\"> </span><strong><span class=\"ne-text\">是否包含某个值</span></strong></p><p id=\"21145fbd4b460925834eb32e00b394d5_p_155\" class=\"ne-p\"><br></p><p id=\"dca9fa670c8db031c78bfd2b0e8d44dd_p_156\" class=\"ne-p\"><span class=\"ne-text\">6、</span><code class=\"ne-code\"><span class=\"ne-text\">remove()</span></code><span class=\"ne-text\"> </span><strong><span class=\"ne-text\">移除某个元素</span></strong></p><p id=\"b68200708c960efa87d95f272f623cc5_p_157\" class=\"ne-p\"><br></p><p id=\"3ba0f2a99137cfc138d14370794cc714_p_158\" class=\"ne-p\"><span class=\"ne-text\">7、</span><code class=\"ne-code\"><span class=\"ne-text\">forEach()</span></code><span class=\"ne-text\"> </span><strong><span class=\"ne-text\">循环，传入两个方法</span></strong></p><p id=\"e2e19f3807b1a26de6bfd8d5d8f8346a_p_159\" class=\"ne-p\"><br></p><pre data-language=\"dart\" id=\"70eb2963\" class=\"ne-codeblock language-dart\">void main() {\n  var map = {'first': 'Dart', 'Second': 'Java', 'Third': 'Python'};\n  map.forEach(f);\n}\nvoid f(key, value) {\n  print(&quot;key=$key, value=$value&quot;);\n}</pre><p id=\"b0d1fb541c750b95e1b76e1c686fea12_p_160\" class=\"ne-p\"><br></p><p id=\"fddb9038a7bb3abe9bb6c5bc07581291_p_161\" class=\"ne-p\"><span class=\"ne-text\">8、 </span><code class=\"ne-code\"><span class=\"ne-text\">map()</span></code><span class=\"ne-text\"> </span><code class=\"ne-code\"><strong><span class=\"ne-text\">map</span></strong></code><strong><span class=\"ne-text\"> 的遍历方式，接受一个回调函数作为参数，返回一个新 </span></strong><code class=\"ne-code\"><strong><span class=\"ne-text\">map</span></strong></code></p><p id=\"3b53c3d38868cd3e8117384bc7b8db12_p_162\" class=\"ne-p\"><br></p><pre data-language=\"dart\" id=\"3413ddac\" class=\"ne-codeblock language-dart\">void main() {\n    Map age = {&quot;zhangsan&quot;: 18, &quot;lisi&quot;: 20};\n    Map age2 = age.map(f);\n    print(age2); // {18: &quot;zhangsan&quot;, 20: &quot;lisi&quot;};\n}\nMapEntry f(k, v) {\n    return MapEntry(v, k); // 调换 k, v 的值\n}</pre><p id=\"788cb192a755349940f6d50adab26c47_p_163\" class=\"ne-p\"><br></p><h3 id=\"24728d0d\"><span class=\"ne-text\">4.6 </span><code class=\"ne-code\"><span class=\"ne-text\">Runes, Symbols</span></code></h3><p id=\"5a4f541457331ccb8d780e99c0cac44a_p_164\" class=\"ne-p\"><br></p><h3 id=\"8dfe3165\"><span class=\"ne-text\">4.7 </span><code class=\"ne-code\"><span class=\"ne-text\">dynamic =&amp;gt</span></code><span class=\"ne-text\">; 动态类型</span></h3><p id=\"f121a14e6e189b9063748754f0838cd7_p_165\" class=\"ne-p\"><br></p><pre data-language=\"dart\" id=\"d8216917\" class=\"ne-codeblock language-dart\">void main() {\n  var list = new List&lt;dynamic&gt;();\n  list.add(1);\n  list.add(&quot;hello&quot;);\n  list.add(true);\n  print(list);\n}</pre><p id=\"a964985d3a0719f64ee67db676d49377_p_166\" class=\"ne-p\"><br></p><h3 id=\"8e7deab9\"><span class=\"ne-text\">4.8 </span><code class=\"ne-code\"><span class=\"ne-text\">dynamic, var, Object</span></code><span class=\"ne-text\"> 的区别</span></h3><p id=\"fff1d53cf87be1ed0758fa6eab740c40_p_167\" class=\"ne-p\"><br></p><p id=\"b4e753018bde7d3ee22bb43600a73a16_p_168\" class=\"ne-p\"><em><span class=\"ne-text\">dynamic</span></em><span class=\"ne-text\"> 是动态类型，如果使用其声明一种类型，则仍旧可以为其声明另一种类型；通常不直接使用。</span></p><p id=\"c05a4e07798be0757743d22bc9d5b835_p_169\" class=\"ne-p\"><br></p><p id=\"ed3fee819e4b5af5e7633e5ebcc09c78_p_170\" class=\"ne-p\"><em><span class=\"ne-text\">var</span></em><span class=\"ne-text\"> 是关键字，如果使用其声明一种类型，不可为其声明另一种类型，但可改变同类型的值；</span></p><p id=\"c82f591337f789ed81cef7d9c961abe3_p_171\" class=\"ne-p\"><br></p><p id=\"631712b2d9453063577c92e2f2c2f0c0_p_172\" class=\"ne-p\"><em><span class=\"ne-text\">Obejct</span></em><span class=\"ne-text\"> 是基类，用其声明的变量只能使用 </span><strong><em><span class=\"ne-text\">Object</span></em></strong><span class=\"ne-text\"> 类所提供的方法</span></p><p id=\"78b96904bed30c073b2e45e0e72b5f12_p_173\" class=\"ne-p\"><br></p><h2 id=\"b47821f1\"><span class=\"ne-text\">五、 运算符</span></h2><p id=\"2c47ab815ac9d02ba311a88ab630b791_p_174\" class=\"ne-p\"><br></p><h3 id=\"014f3b72\"><span class=\"ne-text\">5.1 算数运算符</span></h3><p id=\"b74861f8c214db2af20d35d849124f0d_p_175\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"d5514f734c8dc25e8be741ad13d6c27d_li_15\"><strong><span class=\"ne-text\">加减乘除</span></strong><span class=\"ne-text\">: </span><code class=\"ne-code\"><span class=\"ne-text\">+</span></code><span class=\"ne-text\">，</span><code class=\"ne-code\"><span class=\"ne-text\">-</span></code><span class=\"ne-text\">，</span><code class=\"ne-code\"><span class=\"ne-text\">*</span></code><span class=\"ne-text\">，</span><code class=\"ne-code\"><span class=\"ne-text\">/</span></code><span class=\"ne-text\">，</span><code class=\"ne-code\"><span class=\"ne-text\">～/</span></code><span class=\"ne-text\">，</span><code class=\"ne-code\"><span class=\"ne-text\">%</span></code><span class=\"ne-text\">。</span></li></ul><ul class=\"ne-ul\"><li id=\"95435fa2551c2eb17f6f4c9de9bed1bd_li_16\"><strong><span class=\"ne-text\">递增递减:</span></strong><span class=\"ne-text\"> ·</span><code class=\"ne-code\"><span class=\"ne-text\">++var</span></code><span class=\"ne-text\">，</span><code class=\"ne-code\"><span class=\"ne-text\">var++</span></code><span class=\"ne-text\">，</span><code class=\"ne-code\"><span class=\"ne-text\">--var</span></code><span class=\"ne-text\">，</span><code class=\"ne-code\"><span class=\"ne-text\">var--</span></code><span class=\"ne-text\">。</span></li></ul><p id=\"aaf6d3f54c4ea0860c4a0b47cf319be5_p_176\" class=\"ne-p\"><br></p><h3 id=\"7f1403d6\"><span class=\"ne-text\">5.2 关系运算符</span></h3><p id=\"a292c8eba1d29cc46db3dc9b759dec15_p_177\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"f4cc0d098a075a3387e496d037c400cd_li_17\"><strong><span class=\"ne-text\">运算符:</span></strong><span class=\"ne-text\"> </span><code class=\"ne-code\"><span class=\"ne-text\">==</span></code><span class=\"ne-text\">，</span><code class=\"ne-code\"><span class=\"ne-text\">!=</span></code><span class=\"ne-text\">，</span><code class=\"ne-code\"><span class=\"ne-text\">&gt;</span></code><span class=\"ne-text\">，</span><code class=\"ne-code\"><span class=\"ne-text\">&lt;</span></code><span class=\"ne-text\">，</span><code class=\"ne-code\"><span class=\"ne-text\">&gt;=</span></code><span class=\"ne-text\">，</span><code class=\"ne-code\"><span class=\"ne-text\">&lt;=</span></code></li></ul><ul class=\"ne-ul\"><li id=\"d133ab88c20b57974bf539fdb4a74f35_li_18\"><strong><span class=\"ne-text\">判断内容是否相同使用 </span></strong><code class=\"ne-code\"><strong><span class=\"ne-text\">==</span></strong></code></li></ul><p id=\"639ff39a813bac805cf1d42cf6370925_p_178\" class=\"ne-p\"><br></p><h3 id=\"10766857\"><span class=\"ne-text\">5.3 逻辑运算符</span></h3><p id=\"704e7fcf3e24f0df062f455d61ce8bf2_p_179\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"febcb62b4f5424b435c4ff8e61803d36_li_19\"><strong><span class=\"ne-text\">运算符：</span></strong><span class=\"ne-text\"> </span><code class=\"ne-code\"><span class=\"ne-text\">!</span></code><span class=\"ne-text\">，</span><code class=\"ne-code\"><span class=\"ne-text\">&amp;&amp;</span></code><span class=\"ne-text\">，</span><code class=\"ne-code\"><span class=\"ne-text\">||</span></code></li></ul><ul class=\"ne-ul\"><li id=\"8f8402239237d570dccf0fc0dd46418a_li_20\"><strong><span class=\"ne-text\">针对布尔类型运算</span></strong></li></ul><p id=\"eca7cff7c59afa2f3de403ef7621a785_p_180\" class=\"ne-p\"><br></p><h3 id=\"34b8e337\"><span class=\"ne-text\">5.4 赋值运算符</span></h3><p id=\"0efc130a474ae63eb94f94d29c0b519f_p_181\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"58212f57b94674aebb84a0d9186513ce_li_21\"><strong><span class=\"ne-text\">基础运算符：</span></strong><span class=\"ne-text\"> </span><code class=\"ne-code\"><span class=\"ne-text\">=</span></code><span class=\"ne-text\">，</span><code class=\"ne-code\"><span class=\"ne-text\">??=</span></code><strong><span class=\"ne-text\">(如果左边的变量没有值，就将右侧的值赋给它；如果左边变量有值，右边的值无效。)</span></strong></li></ul><ul class=\"ne-ul\"><li id=\"94568ed0e65593a55b9f51f0d957b7b9_li_22\"><strong><span class=\"ne-text\">复合运算符：</span></strong><code class=\"ne-code\"><span class=\"ne-text\">+=</span></code><span class=\"ne-text\">，</span><code class=\"ne-code\"><span class=\"ne-text\">-=</span></code><span class=\"ne-text\">，</span><code class=\"ne-code\"><span class=\"ne-text\">*=</span></code><span class=\"ne-text\">，</span><code class=\"ne-code\"><span class=\"ne-text\">/=</span></code><span class=\"ne-text\">，</span><code class=\"ne-code\"><span class=\"ne-text\">%=</span></code><span class=\"ne-text\">，</span><code class=\"ne-code\"><span class=\"ne-text\">~/=</span></code></li></ul><p id=\"1afec35b50202e46c8ab3d64c8b15d95_p_182\" class=\"ne-p\"><br></p><h3 id=\"b18b30d3\"><span class=\"ne-text\">5.5 条件表达式</span></h3><p id=\"bd34bbbaf941aa44b5ef63b842573764_p_183\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"b3b8fb2822b4739f29f8f338a2e2d8b5_li_23\"><strong><span class=\"ne-text\">三目运算符：</span></strong><span class=\"ne-text\"> </span><code class=\"ne-code\"><span class=\"ne-text\">condition ? expr1 : expr2</span></code></li></ul><ul class=\"ne-ul\"><li id=\"93da30f74bdf4077f04e13ecd59863d3_li_24\"><code class=\"ne-code\"><strong><span class=\"ne-text\">??</span></strong></code><strong><span class=\"ne-text\">运算符：</span></strong><span class=\"ne-text\"> </span><code class=\"ne-code\"><span class=\"ne-text\">expr1 ?? expr2</span></code><span class=\"ne-text\">(</span><strong><span class=\"ne-text\">如果第一个表达式为空，则使用第二个表达式，否则直接使用第一个表达式的值.</span></strong><span class=\"ne-text\">)</span></li></ul><p id=\"0f7c273f12939198215a96015893827f_p_184\" class=\"ne-p\"><br></p><h2 id=\"bd3fc3e3\"><span class=\"ne-text\">六、 控制流语句</span></h2><p id=\"9040129079d6c20944d5abd09137a458_p_185\" class=\"ne-p\"><br></p><h3 id=\"22af5e7e\"><span class=\"ne-text\">6.1 条件语句</span></h3><p id=\"a2e9e486493798ec13110bd7c2133490_p_186\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"085f67c8d6198adac35f2ed79d4e7c90_li_25\"><strong><span class=\"ne-text\">if语句</span></strong></li></ul><ul class=\"ne-ul\"><li id=\"97b0ed55a8e0b30763f2b63dd4d23aa0_li_26\"><strong><span class=\"ne-text\">if...else if 语句</span></strong></li></ul><ul class=\"ne-ul\"><li id=\"871605018541f47e7259e5f21cf4e545_li_27\"><strong><span class=\"ne-text\">if...else if...else 语句</span></strong></li></ul><p id=\"c7048e5640cfa0d88f49c32fad2740da_p_187\" class=\"ne-p\"><br></p><h3 id=\"2d6cdeb7\"><span class=\"ne-text\">6.2 循环语句</span></h3><p id=\"1b4147100f9b232305f6ba2db16414a4_p_188\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"78021af58cc7387d8d6fac1d050ffb56_li_28\"><strong><span class=\"ne-text\">for循环</span></strong></li></ul><ul class=\"ne-ul\"><li id=\"878a7319ea997971032ee9e252154fbf_li_29\"><strong><span class=\"ne-text\">for...in 循环</span></strong></li></ul><ul class=\"ne-ul\"><li id=\"b4cb724d74f9aed7d33451c547f6a805_li_30\"><strong><span class=\"ne-text\">while循环</span></strong></li></ul><ul class=\"ne-ul\"><li id=\"cf7429805699c96957c61f111698e4ca_li_31\"><strong><span class=\"ne-text\">do...while 循环</span></strong></li></ul><ul class=\"ne-ul\"><li id=\"a6905ccde6cf6657dfb49641491dac3d_li_32\"><strong><span class=\"ne-text\">break 和 continue</span></strong></li></ul><ul class=\"ne-list-wrap\"><ul ne-level=\"1\" class=\"ne-ul\"><li id=\"5a0d017d628d7d029d90e9802c4df17d_li_33\"><strong><span class=\"ne-text\">break 用于终止循环</span></strong></li></ul></ul><ul class=\"ne-list-wrap\"><ul ne-level=\"1\" class=\"ne-ul\"><li id=\"128653c176c857fbef19cdf72cbcaf80_li_34\"><strong><span class=\"ne-text\">continue 用于跳出当前循环</span></strong></li></ul></ul><ul class=\"ne-ul\"><li id=\"38b4885c88ac761e16cd06ebefdf8776_li_35\"><strong><span class=\"ne-text\">switch...case 语句</span></strong></li></ul><ul class=\"ne-list-wrap\"><ul ne-level=\"1\" class=\"ne-ul\"><li id=\"12920a4d6e3133f02f60521345d5b13c_li_36\"><strong><span class=\"ne-text\">比较类型:</span></strong><span class=\"ne-text\"> </span><strong><span class=\"ne-text\">num, String, 编译器常量, 对象, 枚举</span></strong></li></ul></ul><ul class=\"ne-list-wrap\"><ul ne-level=\"1\" class=\"ne-ul\"><li id=\"60a15cdaee09c5919b9e9e305750f531_li_37\"><strong><span class=\"ne-text\">非空 case 必须有一个 break</span></strong></li></ul></ul><ul class=\"ne-list-wrap\"><ul ne-level=\"1\" class=\"ne-ul\"><li id=\"8ff5df2ae9886ea5dc1958d3dce07a09_li_38\"><strong><span class=\"ne-text\">default 关键字来处理默认情况</span></strong></li></ul></ul><ul class=\"ne-list-wrap\"><ul ne-level=\"1\" class=\"ne-ul\"><li id=\"b1b4245e56500070caf0aa555ae652d7_li_39\"><strong><span class=\"ne-text\">continue 跳转标签</span></strong></li></ul></ul><p id=\"754d4d7b7f7ef59febce1379b79c5a84_p_189\" class=\"ne-p\"><br></p><h2 id=\"1a05b0c4\"><span class=\"ne-text\">七、 方法</span></h2><p id=\"a7461c86e6a9d61cb988ef01871fdc3e_p_190\" class=\"ne-p\"><br></p><h3 id=\"11ad6452\"><span class=\"ne-text\">7.1 方法定义</span></h3><p id=\"ebc5def445ee0b4a8a315ff5c89870b2_p_191\" class=\"ne-p\"><br></p><p id=\"1768844fed58d5197755a5d26c7486e7_p_192\" class=\"ne-p\"><strong><span class=\"ne-text\">方法定义：</span></strong></p><p id=\"a54598ca955746a71345e6f1c7efebc9_p_193\" class=\"ne-p\"><br></p><pre data-language=\"text\" id=\"0bb2c91c\" class=\"ne-codeblock language-text\">返回类型 方法名 (参数1，参数2 ...) {\n    方法体\n    return 返回值\n}</pre><p id=\"f9b899a2271a73dadb46fc35f51f07c4_p_194\" class=\"ne-p\"><br></p><p id=\"1aef55c1844614fee93b58b509332257_p_195\" class=\"ne-p\"><strong><span class=\"ne-text\">方法特性：</span></strong></p><p id=\"23475a21370dc3b01a4e53f8cf794c6f_p_196\" class=\"ne-p\"><br></p><p id=\"c17cc3ecf2ff1df40138a63366b4555e_p_197\" class=\"ne-p\"><code class=\"ne-code\"><span class=\"ne-text\">1、</span></code><span class=\"ne-text\"> 方法也是对象，并且有具体类型 </span><code class=\"ne-code\"><span class=\"ne-text\">Function</span></code><span class=\"ne-text\">。</span></p><p id=\"cef4f7dc7a55e7d89762a09a512d9105_p_198\" class=\"ne-p\"><br></p><p id=\"cd95284d80760a52034923bb91ba4055_p_199\" class=\"ne-p\"><code class=\"ne-code\"><span class=\"ne-text\">2、</span></code><span class=\"ne-text\"> 返回值类型，参数类型都可以省略。</span></p><p id=\"99d7f9ffd07472f73f14113da034a561_p_200\" class=\"ne-p\"><br></p><p id=\"b8bbb0c68e2db06373485621b7c5450c_p_201\" class=\"ne-p\"><code class=\"ne-code\"><span class=\"ne-text\">3、</span></code><span class=\"ne-text\"> 箭头语法：</span><code class=\"ne-code\"><span class=\"ne-text\">=&gt; expr</span></code><span class=\"ne-text\"> 是 </span><code class=\"ne-code\"><span class=\"ne-text\">{return expr;}</span></code><span class=\"ne-text\">缩写。只适用于 </span><strong><span class=\"ne-text\">一个表达式</span></strong><span class=\"ne-text\">。</span></p><p id=\"51391d7d944f941a39fd10b1691d92b8_p_202\" class=\"ne-p\"><br></p><p id=\"5b8c8d15cb12afc80a916b906ec09a21_p_203\" class=\"ne-p\"><code class=\"ne-code\"><span class=\"ne-text\">4、</span></code><span class=\"ne-text\"> 方法都有返回值。如果没有指定，默认 </span><code class=\"ne-code\"><span class=\"ne-text\">return null</span></code><span class=\"ne-text\"> 最后一句执行。</span></p><p id=\"8fbe4b2afec4087483dadb750a83b417_p_204\" class=\"ne-p\"><br></p><h3 id=\"a73dcf54\"><span class=\"ne-text\">7.2 可选参数</span></h3><p id=\"ed628da24993324917ceed9d7032667e_p_205\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"499bd242e329b6006548a778fcffecb4_li_40\"><span class=\"ne-text\">可选命名参数：</span><code class=\"ne-code\"><span class=\"ne-text\">{param1, param2, ...}</span></code></li></ul><p id=\"352f391bc738d2265b3d832a48674509_p_206\" class=\"ne-p\"><br></p><pre data-language=\"dart\" id=\"c5eb5218\" class=\"ne-codeblock language-dart\">void main() {\n  printPerson(&quot;张三&quot;);// name=张三, age=null, gender=null\n  printPerson(&quot;张三&quot;, age: 20); // name=张三, age=20, gender=null\n  printPerson(&quot;张三&quot;, age: 20, gender: &quot;Male&quot;); // name=张三, age=20, gender=&quot;Male&quot;\n  printPerson(&quot;张三&quot;, gender: &quot;Male&quot;); // name=张三, age=null, gender=&quot;Male&quot;\n}\n\nprintPerson(String name, { int age, String gender }) {\n  print('name=$name, age=$age, gender=$gender'); \n}</pre><p id=\"fa496c4be2d075776e02d4d8dd97275f_p_207\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"8a76ff15f853ed359af4b236df150ee0_li_41\"><span class=\"ne-text\">可选位置参数：</span><code class=\"ne-code\"><span class=\"ne-text\">[param1, param2, ...]</span></code></li></ul><p id=\"3c2e4ae7a4912940f2b69cc49919d5f2_p_208\" class=\"ne-p\"><br></p><pre data-language=\"dart\" id=\"990ac084\" class=\"ne-codeblock language-dart\">void main() {\n  printPerson(&quot;李四&quot;);// name=李四, age=null, gender=null\n  printPerson(&quot;李四&quot;, 18);// name=李四, age=18, gender=null\n  printPerson(&quot;李四&quot;, 18, &quot;男&quot;); // name=李四, age=18, gender=男\n}\n\nprintPerson(String name, [int age, String gender]) {\n  print('name=$name, age=$age, gender=$gender');\n}</pre><p id=\"8919573e332594403c98b16dc3707127_p_209\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"c298936632e0e0be52995bb03edf247a_li_42\"><span class=\"ne-text\">如果存在具体参数，可选参数声明，必须在参数后面</span></li></ul><p id=\"9fcc44cb3c056720422a68184834d3f8_p_210\" class=\"ne-p\"><br></p><h3 id=\"3d374fc1\"><span class=\"ne-text\">7.3 默认参数值</span></h3><p id=\"1da2a8520c15248cb5e414baf18050d4_p_211\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"dc7f33bd1c968f16cd63fa0e94b6670c_li_43\"><span class=\"ne-text\">使用 </span><code class=\"ne-code\"><span class=\"ne-text\">=</span></code><span class=\"ne-text\"> 在 </span><strong><span class=\"ne-text\">可选参数</span></strong><span class=\"ne-text\"> 指定默认值</span></li></ul><p id=\"bf526d24f704019105ff4879923c79a3_p_212\" class=\"ne-p\"><br></p><pre data-language=\"dart\" id=\"85874c44\" class=\"ne-codeblock language-dart\">void main() {\n  printPerson(&quot;张三&quot;); // name=张三, age=30, gender=女\n  printPerson(&quot;张三&quot;, age: 20); // name=张三, age=20, gender=女\n  printPerson(&quot;张三&quot;, gender: &quot;男&quot;); // name=张三, age=30, gender=男\n}\n\nprintPerson(String name, { int age = 30, String gender = &quot;女&quot; }) {\n  print('name=$name, age=$age, gender=$gender');\n}</pre><p id=\"6a4878fe05233880c9bb3f78bdfc8d68_p_213\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"6fb8356ba6122194cd710c5932646a78_li_44\"><span class=\"ne-text\">默认值只能是编译时常量</span></li></ul><p id=\"3a8029979cdf6369a743f706414be0bf_p_214\" class=\"ne-p\"><br></p><h3 id=\"da4cf90f\"><span class=\"ne-text\">7.4 方法对象</span></h3><p id=\"c2fcbb13669d3e57d1dc5c7e95ef2350_p_215\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"c638bd53eb987d0e8e4718d4947ca094_li_45\"><span class=\"ne-text\">方法可以作为对象赋值给其它变量</span></li></ul><p id=\"02630234cefdd1a3dfd9b8e850834e4e_p_216\" class=\"ne-p\"><br></p><pre data-language=\"dart\" id=\"7a8ac852\" class=\"ne-codeblock language-dart\">void main() {\n  // var func = printHello;\n  Function func = printHello;\n  func();\n}\n\nvoid printHello() {\n  print(&quot;Hello&quot;);\n}</pre><p id=\"e9b9195071b602f228ecd87131f54a09_p_217\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"c0756fc4766b82f013916a1dfc29e220_li_46\"><span class=\"ne-text\">方法可作为参数传递给其它方法</span></li></ul><p id=\"106abb71162cab57d99f22c8182baa6a_p_218\" class=\"ne-p\"><br></p><pre data-language=\"dart\" id=\"4e4e21dc\" class=\"ne-codeblock language-dart\">void main() {\n  var list = [1, 2, 3, 4];\n  list.forEach(print);\n}\n\n// 或者\nvoid main() {\n  var list1 = [&quot;h&quot;, &quot;e&quot;, &quot;l&quot;, &quot;l&quot;, &quot;o&quot;];\n  print(listTimes(list1, times));\n}\n\nList listTimes(List list, String f(str)) {\n  for(var index = 0; index &lt; list.length; index++) {\n    list[index] = f(list[index]);\n  }\n  return list;\n}\n\nString times(str) {\n  return str * 3;\n}</pre><p id=\"43756015fe654e98c2f5e26d2f231b8c_p_219\" class=\"ne-p\"><br></p><h3 id=\"588eca3a\"><span class=\"ne-text\">7.5 匿名方法</span></h3><p id=\"9c56ecf09c84a42020f1c0dd6460690c_p_220\" class=\"ne-p\"><br></p><p id=\"2ea8639b55360cd848e93d2c64e65871_p_221\" class=\"ne-p\"><span class=\"ne-text\">如何定义：</span></p><p id=\"70a1d1e1a593e58a7f63727c676411db_p_222\" class=\"ne-p\"><br></p><pre data-language=\"dart\" id=\"27d2b81f\" class=\"ne-codeblock language-dart\">(参数1，参数2，...) {\n    方法体...\n    return 返回值\n}</pre><p id=\"7daa843f6e495dd1d2c6696528cc65bd_p_223\" class=\"ne-p\"><br></p><p id=\"29aac8103521bf65bece0eb05580ca6f_p_224\" class=\"ne-p\"><span class=\"ne-text\">匿名方法的特性：</span></p><p id=\"3f2f7751b6bc6bbae810562f248d6f49_p_225\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"3acb5ad9afda68694759bf4e11913e75_li_47\"><span class=\"ne-text\">可赋值给变量，通过变量进行调用</span></li></ul><p id=\"73af83e6e31af8831621458232b96888_p_226\" class=\"ne-p\"><br></p><pre data-language=\"dart\" id=\"7a2bab7e\" class=\"ne-codeblock language-dart\">void main() {\n  // 第一种\n  var func = (str) {\n    print(&quot;Hello---$str&quot;);\n  };\n  func(30);\n  // 第二种\n  (() {\n      print(&quot;Test&quot;);\n  })()\n}</pre><p id=\"b90a99f66c0879bbc49e9b0b68e59c08_p_227\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"fb8d14069863534a0d0ee4e778cd9681_li_48\"><span class=\"ne-text\">可在其它方法中直接调用或传递给其它方法</span></li></ul><p id=\"bdc03e8bcffcbda15027382924358318_p_228\" class=\"ne-p\"><br></p><pre data-language=\"dart\" id=\"786ce608\" class=\"ne-codeblock language-dart\">void main() {\n  var list1 = [&quot;h&quot;, &quot;e&quot;, &quot;l&quot;, &quot;l&quot;, &quot;o&quot;];\n  var result = listTimes(list1, (str) {return str * 3;});\n  // var result = listTimes(list1, (str) =&gt; str * 3);\n  print(result);\n}\n\nList listTimes(List list, f(str)) {\n  for(var index = 0; index &lt; list.length; index++) {\n    list[index] = f(list[index]);\n  }\n  return list;\n}</pre><p id=\"b7e198aef6e013ece72351e474a68ffa_p_229\" class=\"ne-p\"><br></p><pre data-language=\"dart\" id=\"9ff3f424\" class=\"ne-codeblock language-dart\">void main() {\n  var list2 = [&quot;h&quot;, &quot;e&quot;, &quot;l&quot;, &quot;l&quot;, &quot;o&quot;];\n  print(listTimes2(list2));\n}\nList listTimes2(List list) {\n  var func = (str) { return str * 3; };\n  for(var i = 0; i &lt; list.length; i++) {\n    list[i] = func(list[i]);\n  }\n  return list;\n}</pre><p id=\"8cc0a1f126bf8ee201bd7f38025053c4_p_230\" class=\"ne-p\"><br></p><p id=\"acd86c7f2e14e66cf85721cbce4c8240_p_231\" class=\"ne-p\"><span class=\"ne-text\">注意：匿名方法不能直接定义在外面</span></p><p id=\"9bf8874c736b2ce6c6ef8eacb225391e_p_232\" class=\"ne-p\"><br></p><h3 id=\"7a56f110\"><span class=\"ne-text\">7.6 闭包</span></h3><p id=\"18170e7e8da575f5dcb8686e02c401e4_p_233\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"e266eebe601188904dea6ef500c7b44f_li_49\"><span class=\"ne-text\">闭包是一个方法(对象)</span></li></ul><ul class=\"ne-ul\"><li id=\"f7b535b7dde1ad7f696eb45abc626453_li_50\"><span class=\"ne-text\">闭包定义在其它方法内部</span></li></ul><ul class=\"ne-ul\"><li id=\"260a7ab323ff498d126d0665ef86e8e4_li_51\"><span class=\"ne-text\">闭包能够访问外部方法内的局部变量，并持有其状态</span></li></ul><p id=\"4948fb5770e7048a08aaf543e87b3f8d_p_234\" class=\"ne-p\"><br></p><pre data-language=\"dart\" id=\"7e10dec9\" class=\"ne-codeblock language-dart\">void main() {\n  var func = a();\n  func();\n  func();\n  func();\n  func();\n}\na() {\n  int count = 0;\n  printCount() {\n    print(count++);\n  };\n  return printCount;\n}</pre><p id=\"e138d80e1ae914d5031cbb3f3c1d8950_p_235\" class=\"ne-p\"><br></p><pre data-language=\"dart\" id=\"44aebbf3\" class=\"ne-codeblock language-dart\">// 使用匿名方法的闭包\nvoid main() {\n  var func = a();\n  func();\n  func();\n  func();\n  func();\n}\n\na() {\n  int count = 0;\n  return () {\n    print(count++);\n  };\n}</pre><p id=\"c454258df76d70059117b842caffb1bc_p_236\" class=\"ne-p\"><br></p><h2 id=\"0e7e494d\"><span class=\"ne-text\">八、 </span><code class=\"ne-code\"><span class=\"ne-text\">Dart</span></code><span class=\"ne-text\"> 面向对象编程</span></h2><p id=\"9e235b5e43f23e9011dd8415c92088fa_p_237\" class=\"ne-p\"><br></p><h3 id=\"842be82b\"><span class=\"ne-text\">8.1 类于对象</span></h3><p id=\"6033ae78638b22f9c7b1001e674f8b54_p_238\" class=\"ne-p\"><br></p><ol class=\"ne-ol\"><li id=\"d3db2da957cb8f4600c3264666cc6690_li_52\"><span class=\"ne-text\">使用关键字 </span><code class=\"ne-code\"><span class=\"ne-text\">class</span></code><span class=\"ne-text\"> 声明一个类</span></li></ol><ol start=\"2\" class=\"ne-ol\"><li id=\"a666a1ac811c0eaf27cec4ff464016fb_li_53\"><span class=\"ne-text\">使用关键字 </span><code class=\"ne-code\"><span class=\"ne-text\">new</span></code><span class=\"ne-text\"> 创建一个对象，</span><code class=\"ne-code\"><span class=\"ne-text\">new</span></code><span class=\"ne-text\"> 可省略</span></li></ol><ol start=\"3\" class=\"ne-ol\"><li id=\"c58c860595f195b151f16e1c2ede3254_li_54\"><span class=\"ne-text\">所有对象都继承于 </span><code class=\"ne-code\"><span class=\"ne-text\">Object</span></code><span class=\"ne-text\"> 类型</span></li></ol><p id=\"2a5c77aaadd212cc52fa92db4e5d7833_p_239\" class=\"ne-p\"><br></p><h3 id=\"8cadb31c\"><span class=\"ne-text\">8.2 属性和方法</span></h3><p id=\"6a64108399bd39151a0c47ad4f78419e_p_240\" class=\"ne-p\"><br></p><ol class=\"ne-ol\"><li id=\"7a8c564ee6f266e337cd3cb075bbdec4_li_55\"><span class=\"ne-text\">属性默认会生成 </span><code class=\"ne-code\"><span class=\"ne-text\">getter</span></code><span class=\"ne-text\"> 和 </span><code class=\"ne-code\"><span class=\"ne-text\">setter</span></code><span class=\"ne-text\"> 方法</span></li></ol><ol start=\"2\" class=\"ne-ol\"><li id=\"8128c4fd74858858ac3d4211addaae66_li_56\"><span class=\"ne-text\">使用 </span><code class=\"ne-code\"><span class=\"ne-text\">final</span></code><span class=\"ne-text\"> 声明的属性只有 </span><code class=\"ne-code\"><span class=\"ne-text\">getter</span></code><span class=\"ne-text\"> 方法（只可读不可写）</span></li></ol><ol start=\"3\" class=\"ne-ol\"><li id=\"f276e45d694340343e1378e2cdf66abb_li_57\"><span class=\"ne-text\">属性和方法是通过 </span><code class=\"ne-code\"><span class=\"ne-text\">.</span></code><span class=\"ne-text\"> 访问</span></li></ol><ol start=\"4\" class=\"ne-ol\"><li id=\"8d15985e499dcc99dcd287f9b418e261_li_58\"><span class=\"ne-text\">方法不能被重栽</span></li></ol><p id=\"672ca78e6355d2efd6d038cc344f6bcf_p_241\" class=\"ne-p\"><br></p><h3 id=\"bb4c9d85\"><span class=\"ne-text\">8.3 类及成员可见性</span></h3><p id=\"8205712d24d63d21d2add54ced58c376_p_242\" class=\"ne-p\"><br></p><ol class=\"ne-ol\"><li id=\"9d56613e9e047661efc01e7fabe2959c_li_59\"><code class=\"ne-code\"><span class=\"ne-text\">Dart</span></code><span class=\"ne-text\"> 中的可见性是以 </span><code class=\"ne-code\"><span class=\"ne-text\">library(库)</span></code><span class=\"ne-text\"> 为单位</span></li></ol><ol start=\"2\" class=\"ne-ol\"><li id=\"868fdf83a850e953adfdf30250d69383_li_60\"><span class=\"ne-text\">默认情况下，每一个 </span><code class=\"ne-code\"><span class=\"ne-text\">Dart</span></code><span class=\"ne-text\"> 文件就是一个库</span></li></ol><ol start=\"3\" class=\"ne-ol\"><li id=\"ed47c5405a814c09aa363c8ec3c695da_li_61\"><span class=\"ne-text\">使用 </span><code class=\"ne-code\"><span class=\"ne-text\">_</span></code><span class=\"ne-text\"> 表示库的私有性</span></li></ol><p id=\"cee8e2bf8099195a87e3ac26f9657d80_p_243\" class=\"ne-p\"><br></p><pre data-language=\"dart\" id=\"f2959bec\" class=\"ne-codeblock language-dart\">// person.dart\nclass _Person {\n  String name;\n  int age;\n  // final String address;\n\n  void work() {\n    print(&quot;name is $name, age is $age&quot;);\n  }\n}\n\n// class_and_object.dart\nimport 'person.dart';\n\nvoid main() {\n  // var person = new Person();\n  var person = _Person(); // error\n  person.name = &quot;Tom&quot;;\n  person.age = 20;\n  print(person.name); \n  person.work();\n\n  // print(person.address);\n}</pre><p id=\"6676b0fdf5d68f5dfac942cb8c232755_p_244\" class=\"ne-p\"><br></p><ol start=\"4\" class=\"ne-ol\"><li id=\"19de8a34d53225115feaabff50262d82_li_62\"><span class=\"ne-text\">使用 </span><strong><em><span class=\"ne-text\">import</span></em></strong><span class=\"ne-text\"> 导入库</span></li></ol><p id=\"2b23bc620f657a68260e8cdb7a7f2598_p_245\" class=\"ne-p\"><br></p><h3 id=\"3d0dd0b5\"><span class=\"ne-text\">8.4 计算属性</span></h3><p id=\"b4dae59027624f33efe1705e43a76835_p_246\" class=\"ne-p\"><br></p><ol class=\"ne-ol\"><li id=\"39a66c1c40ddf45833e37bf8bd5c2a66_li_63\"><span class=\"ne-text\">顾名思义，计算属性的值是通过计算而来，本身不存储值</span></li></ol><ol start=\"2\" class=\"ne-ol\"><li id=\"2e6590cabe20af477f2dc990cdf0b5cb_li_64\"><span class=\"ne-text\">计算属性赋值，其实是通过计算转换到其它实例变量</span></li></ol><p id=\"033309e021dae6cc1eabb307bcb5ba20_p_247\" class=\"ne-p\"><br></p><pre data-language=\"dart\" id=\"53b5281a\" class=\"ne-codeblock language-dart\">void main() {\n  var rect = new Rectangle();\n  rect.width = 10;\n  rect.height = 20;\n  print(rect.area); // 200;\n  \n  // 已知面积求宽度\n  rect.area = 200;\n  print(rect.width); // 10.0\n}\n\nclass Rectangle {\n  num width, height;\n  // 获取计算属性的值\n  num get area =&gt; width * height;\n  // num get area {\n  //   return width * height;\n  // }\n  // 设置计算属性值\n  set area(value){\n    width = value / 20;\n  }\n}</pre><p id=\"bea473518fba3dbf9effb067ddad4499_p_248\" class=\"ne-p\"><br></p><h3 id=\"34a314fc\"><span class=\"ne-text\">8.5 构造方法</span></h3><p id=\"f46f4fe0560ab2f40140fcdf6c76e650_p_249\" class=\"ne-p\"><br></p><ol class=\"ne-ol\"><li id=\"5b44ab71647e74e74811e8772b16d3dd_li_65\"><span class=\"ne-text\">如果没有自定义构造方法，则会有个默认构造方法</span></li></ol><ol start=\"2\" class=\"ne-ol\"><li id=\"43a1e2d44e570c63396bbe8b086b0c9c_li_66\"><span class=\"ne-text\">如果存在自定义构造方法，则默认构造方法无效</span></li></ol><p id=\"e08beadb42b714218a1b36be3f0f61c1_p_250\" class=\"ne-p\"><br></p><pre data-language=\"dart\" id=\"b67772e6\" class=\"ne-codeblock language-dart\">void main() {\n  var person = new Person(&quot;Tom&quot;, 20);\n}\nclass Person {\n  String name;\n  int age;\n\n  // final String gender;\n  Person(String name, int age) {\n    this.name = name;\n    this.age = age;\n  }\n  void work() {\n    print(&quot;work...&quot;);\n  }\n}</pre><p id=\"3d18b6b62d151c043218e7d9d07e2abe_p_251\" class=\"ne-p\"><br></p><p id=\"512aa0dafa3495b06051cb82627ded76_p_252\" class=\"ne-p\"><strong><span class=\"ne-text\">语法糖</span></strong><span class=\"ne-text\">：在构造方法执行之前对属性进行赋值</span></p><p id=\"3515d0f9ecb9499a648a8b4a3ee78839_p_253\" class=\"ne-p\"><br></p><pre data-language=\"dart\" id=\"6d961901\" class=\"ne-codeblock language-dart\">void main() {\n  var person = new Person(&quot;Tom&quot;, 20, &quot;Male&quot;);\n}\nclass Person {\n  String name;\n  int age;\n\n  final String gender;\n  Person(this.name, this.age, this.gender); // 语法糖\n  void work() {\n    print(&quot;work...&quot;);\n  }\n}</pre><p id=\"d6f5ed1b4d8d8ac6d60ab389ddb41993_p_254\" class=\"ne-p\"><br></p><ol start=\"3\" class=\"ne-ol\"><li id=\"1da4d5696ebfd959f65a0b313e29d7e1_li_67\"><span class=\"ne-text\">构造方法不能重载</span></li></ol><p id=\"97e3b88e8f1bfda10a9dde2c42a136f9_p_255\" class=\"ne-p\"><br></p><h3 id=\"28dec681\"><span class=\"ne-text\">8.6 命名构造方法</span></h3><p id=\"df7e8d3180610289b39a308b14a0a4a1_p_256\" class=\"ne-p\"><br></p><ol class=\"ne-ol\"><li id=\"30cae26e7502e9f017c84e863dc60c9a_li_68\"><span class=\"ne-text\">使用命名构造方法，可以实现多个构造方法</span></li></ol><ol start=\"2\" class=\"ne-ol\"><li id=\"801b9dbdc1ac6f4d85c9b19b4789c3fc_li_69\"><span class=\"ne-text\">使用 </span><strong><span class=\"ne-text\">类名.方法</span></strong><span class=\"ne-text\"> 的形式实现</span></li></ol><p id=\"0983ce4784ca53081c2afa97562f5bfa_p_257\" class=\"ne-p\"><br></p><pre data-language=\"dart\" id=\"494027e5\" class=\"ne-codeblock language-dart\">void main() {\n  var person = new Person.width(&quot;Tom&quot;);\n}\nclass Person {\n  String name;\n  Person.width(String name) {\n    this.name = name;\n  }\n  void work() {\n    print(&quot;work...&quot;);\n  }\n}</pre><p id=\"e1f77a305d41e8c97d8b51cc18da7968_p_258\" class=\"ne-p\"><br></p><h3 id=\"d6b162f0\"><span class=\"ne-text\">8.7 常量构造方法</span></h3><p id=\"e1752ec3be6731068aa3b2551ab39c93_p_259\" class=\"ne-p\"><br></p><ol class=\"ne-ol\"><li id=\"038eed847438de9721f00d3376029b9f_li_70\"><span class=\"ne-text\">如果类是不可变状态，可以把对象定义为编译时常量</span></li></ol><ol start=\"2\" class=\"ne-ol\"><li id=\"291c8c6c981d7dd0eb3e6796154db186_li_71\"><span class=\"ne-text\">使用 </span><code class=\"ne-code\"><span class=\"ne-text\">const</span></code><span class=\"ne-text\"> 声明构造方法，并且所有变量都为 </span><code class=\"ne-code\"><span class=\"ne-text\">fianl</span></code></li></ol><ol start=\"3\" class=\"ne-ol\"><li id=\"47e65a06005a27a9499be24fefea33e0_li_72\"><span class=\"ne-text\">使用 </span><code class=\"ne-code\"><span class=\"ne-text\">const</span></code><span class=\"ne-text\"> 声明对象，可以省略</span></li></ol><p id=\"c43279d314bb1c051d65b017ff2a7851_p_260\" class=\"ne-p\"><br></p><pre data-language=\"dart\" id=\"d4725875\" class=\"ne-codeblock language-dart\">void main() {\n  // const person = const Person(&quot;张三&quot;, 20, &quot;Male&quot;);\n  const person = Person(&quot;张三&quot;, 20, &quot;Male&quot;);\n}\n\nclass Person {\n  final String name;\n  final int age;\n  final String gender;\n  const Person(this.name, this.age, this.gender);\n  void work() {\n    print(&quot;work&quot;);\n  }\n}</pre><p id=\"0344f8f97ae50ef300797fddbaffc9a7_p_261\" class=\"ne-p\"><br></p><h3 id=\"1b266566\"><span class=\"ne-text\">8.8 工厂构造方法</span></h3><p id=\"3a5652c73375f059b90ee82b60669833_p_262\" class=\"ne-p\"><br></p><ol class=\"ne-ol\"><li id=\"f31bb8c1fbe48b6a657c8f66dc6d711d_li_73\"><span class=\"ne-text\">工厂构造方法类似于设计模式中的工厂模式</span></li></ol><ol start=\"2\" class=\"ne-ol\"><li id=\"1fa090ece2fac3ff8c9d9a4bdc6d2b0c_li_74\"><span class=\"ne-text\">在构造方法前添加关键字 </span><code class=\"ne-code\"><span class=\"ne-text\">factory</span></code><span class=\"ne-text\"> 实现一个工厂构造方法</span></li></ol><ol start=\"3\" class=\"ne-ol\"><li id=\"0b1faea7a66a54e5092eda729830a51c_li_75\"><span class=\"ne-text\">在工厂构造方法中可返回对象</span></li></ol><p id=\"e319add840b73a166328bf789b6ae09d_p_263\" class=\"ne-p\"><br></p><pre data-language=\"dart\" id=\"2d4ef080\" class=\"ne-codeblock language-dart\">class Logger {\n  final String name;\n  static final Map&lt;String, Logger&gt; _cache = &lt;String, Logger&gt; {};\n\n  factory Logger(String name) {\n    return Logger._internal('Dart'); // 可以返回\n  }\n  Logger._internal(this.name);\n  void log(String msg) {\n    print(msg);\n  }\n}</pre><p id=\"95c82bac10be325ff523b3dbe014a366_p_264\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"588b8703b820566674f1a367450a31c9_li_76\"><strong><em><span class=\"ne-text\">命名工厂构造方法</span></em></strong><span class=\"ne-text\">（</span><strong><em><span class=\"ne-text\">factory 类名.方法名</span></em></strong><span class=\"ne-text\">）</span></li></ul><p id=\"e4d5668038ec0dd0f47f3473097287e2_p_265\" class=\"ne-p\"><br></p><p id=\"a616915df2e7a11aeb5a73015b33acb5_p_266\" class=\"ne-p\"><span class=\"ne-text\">它可以有返回值，而且不需要将类的 </span><strong><em><span class=\"ne-text\">final</span></em></strong><span class=\"ne-text\"> 变量作为参数，是提供一种灵活获取类对象的方式</span></p><p id=\"c1f615bd093ec15198b28dc0cd440916_p_267\" class=\"ne-p\"><br></p><pre data-language=\"dart\" id=\"93328c4f\" class=\"ne-codeblock language-dart\">class Student {\n  factory Student._stu(Student stu) {\n    return Student(stu._school, stu.name, stu.age);\n  }\n}</pre><p id=\"1941af98e6c0fecbf8062468a010bb3c_p_268\" class=\"ne-p\"><br></p><h3 id=\"2da81770\"><span class=\"ne-text\">8.9 初始化列表常用于设置 (</span><code class=\"ne-code\"><span class=\"ne-text\">fianl</span></code><span class=\"ne-text\"> 变量的值)</span></h3><p id=\"8757c9f7854dde4a72cfc4af616e895a_p_269\" class=\"ne-p\"><br></p><ol class=\"ne-ol\"><li id=\"16bc700158d5e4e6a3b22de274b99aaa_li_77\"><span class=\"ne-text\">初始化列表会在构造方法体执行之前执行</span></li></ol><ol start=\"2\" class=\"ne-ol\"><li id=\"5b37720486515372c50de814b3501f4d_li_78\"><span class=\"ne-text\">使用逗号分隔初始化表达式</span></li></ol><ol start=\"3\" class=\"ne-ol\"><li id=\"b3519a03056fffac0dd5a06414abad78_li_79\"><span class=\"ne-text\">初始化列表常用于设置 </span><code class=\"ne-code\"><span class=\"ne-text\">final</span></code><span class=\"ne-text\"> 变量的值</span></li></ol><p id=\"f994bede262e74fa3b6f0e70c438222d_p_270\" class=\"ne-p\"><br></p><pre data-language=\"dart\" id=\"a7376f35\" class=\"ne-codeblock language-dart\">void main() {\n  var person = new Person(&quot;Tom&quot;, 20, &quot;Male&quot;);\n}\nclass Person {\n  String name;\n  int age;\n  final String gender;\n\n  Person(this.name, this.age, this.gender);\n  // 初始化列表\n  Person.withMap(Map map): gender = map[&quot;gender&quot;] {\n    this.name = map[&quot;name&quot;];\n    this.age = map[&quot;age&quot;];\n  }\n  // 或者\n  Person.withMap1(Map map): name = map[&quot;name&quot;], age = map[&quot;age&quot;], gender = map[&quot;gender&quot;];\n  void work() {\n    print(&quot;work&quot;);\n  }\n}</pre><p id=\"0ff356bd76a1afc7336643db6003559d_p_271\" class=\"ne-p\"><br></p><h3 id=\"0ce482f2\"><span class=\"ne-text\">8.10 静态成员</span></h3><p id=\"4af52400f7f68b78e0bfc22f9633493e_p_272\" class=\"ne-p\"><br></p><ol class=\"ne-ol\"><li id=\"d673ee91fb8f20e1bf0b00bd5d22f847_li_80\"><span class=\"ne-text\">使用 </span><code class=\"ne-code\"><span class=\"ne-text\">static</span></code><span class=\"ne-text\"> 关键字来实现类级别的变量和函数（不再属于对象级别）</span></li></ol><ol start=\"2\" class=\"ne-ol\"><li id=\"c9f2d60a0de1ada754f2dfcde4f660e9_li_81\"><span class=\"ne-text\">静态成员不能访问非静态成员，非静态成员可以访问静态成员</span></li></ol><ol start=\"3\" class=\"ne-ol\"><li id=\"c2e1188f5511bc87189c3927a0879808_li_82\"><span class=\"ne-text\">类中的常量需要使用 </span><code class=\"ne-code\"><span class=\"ne-text\">static const</span></code><span class=\"ne-text\"> 声明</span></li></ol><p id=\"3f2704f87d6ead87f93c1c897ce22fea_p_273\" class=\"ne-p\"><br></p><pre data-language=\"dart\" id=\"e8bcdffd\" class=\"ne-codeblock language-dart\">void main() {\n  var page = new Page();\n  // page.scrollDown();\n  Page.scrollDown();\n}\nclass Page {\n  // 添加常量\n  static const int maxAge = 10;\n  \n  static int currentPage = 1;\n  static void scrollDown() {\n    currentPage = 1;\n    print(&quot;scrollDown&quot;);\n  }\n  void scrollUp() {\n    currentPage++;\n    print(&quot;scrollUp&quot;);\n  }\n}</pre><p id=\"a57e3e87113ee096d36d0fd8d72ea1ca_p_274\" class=\"ne-p\"><br></p><h3 id=\"539800c4\"><span class=\"ne-text\">8.11 对象操作符</span></h3><p id=\"d92d21c1f221dd0504a484de03a61dd1_p_275\" class=\"ne-p\"><br></p><ol class=\"ne-ol\"><li id=\"4177dedb9a1727ab3375d8467fb6f920_li_83\"><span class=\"ne-text\">条件成员访问：</span><code class=\"ne-code\"><span class=\"ne-text\">?.</span></code><span class=\"ne-text\">（如果该操作符前边不为空，则继续向后执行，否则不继续执行）</span></li></ol><ol start=\"2\" class=\"ne-ol\"><li id=\"b133d4da2859da170c434559b5ceda34_li_84\"><span class=\"ne-text\">类型转换：</span><code class=\"ne-code\"><span class=\"ne-text\">as</span></code></li></ol><p id=\"c2f8a44a9de114d551b6cb9360b19084_p_276\" class=\"ne-p\"><br></p><pre data-language=\"dart\" id=\"b1120071\" class=\"ne-codeblock language-dart\">void main() {\n  var person;\n  person = &quot;&quot;;\n  person = new Person();\n  (person as Person).work();\n}\nclass Person {\n  String name;\n  int age;\n  void work() {\n    print(&quot;work...&quot;); \n  }\n}</pre><p id=\"5e01eae6c8e0e41c350eff7c120f6c4d_p_277\" class=\"ne-p\"><br></p><ol start=\"3\" class=\"ne-ol\"><li id=\"99f0fc24a8a7fc5b19c032ca1390eafd_li_85\"><span class=\"ne-text\">是否指定类型：</span><code class=\"ne-code\"><span class=\"ne-text\">is</span></code><span class=\"ne-text\">，</span><code class=\"ne-code\"><span class=\"ne-text\">is!</span></code></li></ol><p id=\"fef395f1663a72149f43467aba9a9f0d_p_278\" class=\"ne-p\"><br></p><pre data-language=\"dart\" id=\"57e25bcc\" class=\"ne-codeblock language-dart\">void main() {\n  var person;\n  person = &quot;&quot;;\n  person = new Person();\n  if(person is Person) {\n    person.work();\n  }\n}\nclass Person {\n  String name;\n  int age;\n  void work() {\n    print(&quot;work...&quot;); \n  }\n}</pre><p id=\"f658905930ba3ab999e81f9ca3773cdd_p_279\" class=\"ne-p\"><br></p><ol start=\"4\" class=\"ne-ol\"><li id=\"6994039d2e96fc3c3c6e16a1606542dd_li_86\"><span class=\"ne-text\">级联操作：</span><code class=\"ne-code\"><span class=\"ne-text\">..</span></code></li></ol><p id=\"f7138c4e59ae2939e7ca22b018b3177c_p_280\" class=\"ne-p\"><br></p><pre data-language=\"dart\" id=\"4381f132\" class=\"ne-codeblock language-dart\">void main() {\n  var person = new Person();\n  person..name = &quot;Tom&quot; ..age = 20 ..work();\n  // 等价于\n  person.name = &quot;Tom&quot;;\n  person.age = 20;\n  person.work();\n}\nclass Person {\n  String name;\n  int age;\n  void work() {\n    print(&quot;work...&quot;); \n  }\n}</pre><p id=\"31f48e2ab2cc1fa560bafed1287af19b_p_281\" class=\"ne-p\"><br></p><h3 id=\"a3818357\"><span class=\"ne-text\">8.11 对象 </span><code class=\"ne-code\"><span class=\"ne-text\">call</span></code><span class=\"ne-text\"> 方法</span></h3><p id=\"2315f10f54bc7e13b39e40a7ef999847_p_282\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"9aeb66d6ca76f955224aeb8c90e0dea8_li_87\"><span class=\"ne-text\">如果类实现了 </span><code class=\"ne-code\"><span class=\"ne-text\">call()</span></code><span class=\"ne-text\"> 方法，则该类的对象可以作为方法使用</span></li></ul><p id=\"d8862285fa1c5254153b79d80f836d67_p_283\" class=\"ne-p\"><br></p><pre data-language=\"dart\" id=\"8ac7d2ff\" class=\"ne-codeblock language-dart\">void main() {\n  var person = new Person();\n  // person(&quot;张三&quot;, 30);\n  print(person(&quot;张三&quot;, 30));\n}\nclass Person {\n  String name;\n  int age;\n  // void call(String name, int age) {\n  //   print(&quot;Name is $name, Age is $age&quot;);\n  // }\n  String call(String name, int age) {\n    return &quot;Name is $name, Age is $age&quot;;\n  }\n}</pre><p id=\"d643b961309916d9e6d944f2fc2ef443_p_284\" class=\"ne-p\"><br></p><h2 id=\"a58aed29\"><span class=\"ne-text\">九、面向对象扩展</span></h2><p id=\"c667c8fb4a9b06dea1ac969618387647_p_285\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"297d760a11647fd51bb42dd9febba454_li_88\"><span class=\"ne-text\">继承，继承中的构造方法</span></li></ul><ul class=\"ne-ul\"><li id=\"ecb26e731050f6c35c47ae279a616be6_li_89\"><span class=\"ne-text\">抽象类</span></li></ul><ul class=\"ne-ul\"><li id=\"9707d878adfc9f14b866140d0ef6c053_li_90\"><span class=\"ne-text\">接口</span></li></ul><ul class=\"ne-ul\"><li id=\"4639856470db88c2e16d235203384bb9_li_91\"><code class=\"ne-code\"><span class=\"ne-text\">Mixins</span></code><span class=\"ne-text\">，操作符的覆写（操作符/运算符重载）</span></li></ul><p id=\"0a119ed9fd147db9466e04386b6ded7b_p_286\" class=\"ne-p\"><br></p><h3 id=\"cd14c6c5\"><span class=\"ne-text\">9.1 继承</span></h3><p id=\"4b09dea2a885c00a614eef1d25a58513_p_287\" class=\"ne-p\"><br></p><ol class=\"ne-ol\"><li id=\"a8ff3ba3788ba80a69de7dc2ca6269b3_li_92\"><span class=\"ne-text\">使用关键字 </span><code class=\"ne-code\"><span class=\"ne-text\">extends</span></code><span class=\"ne-text\"> 继承一个类</span></li></ol><ol start=\"2\" class=\"ne-ol\"><li id=\"b7f4998e5a4070c23da43eb7be23ffec_li_93\"><span class=\"ne-text\">子类会继承父类可见的属性和方法（私有属性无法继承），不会继承构造方法</span></li></ol><ol start=\"3\" class=\"ne-ol\"><li id=\"2fcedb2fae4763694c4cc84bf7883da7_li_94\"><span class=\"ne-text\">子类能够复写父类的方法、</span><code class=\"ne-code\"><span class=\"ne-text\">getter</span></code><span class=\"ne-text\"> 和 </span><code class=\"ne-code\"><span class=\"ne-text\">setter</span></code></li></ol><ol start=\"4\" class=\"ne-ol\"><li id=\"7aecc81cfacf39d61a1b98b77dbd131f_li_95\"><span class=\"ne-text\">单继承，多态性（例如可以重写 </span><code class=\"ne-code\"><span class=\"ne-text\">toString</span></code><span class=\"ne-text\"> 方法）</span></li></ol><p id=\"6d7ea3ddda2a454c5683711790958ce9_p_288\" class=\"ne-p\"><br></p><pre data-language=\"dart\" id=\"6d7ec211\" class=\"ne-codeblock language-dart\">// person.dart\nclass Person {\n  String name;\n  int age;\n  String _birthday;\n  bool get isAudit =&gt; age &gt; 10;\n  void run() {\n    print(&quot;Person run&quot;);\n  }\n}</pre><p id=\"eaf89275095ca133033e98ed4b1e7f4f_p_289\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"41d4a0d7d9a41d898f0b1775accaa8a8_li_96\"><a href=\"/override \" data-href=\"/override \" class=\"ne-link\"><strong><em><span class=\"ne-text\">@override </span></em></strong></a><strong><em><span class=\"ne-text\"> </span></em></strong><span class=\"ne-text\"> 表示下面的计算属性或方法是从父类中复写过来的，并不是自己的</span></li></ul><ul class=\"ne-ul\"><li id=\"b8c00fb6fdf8a6c96b0e3ec9c64071df_li_97\"><code class=\"ne-code\"><strong><span class=\"ne-text\">super.run();</span></strong></code><span class=\"ne-text\">  </span><code class=\"ne-code\"><strong><em><span class=\"ne-text\">super</span></em></strong></code><span class=\"ne-text\"> 表示在子类中调用父类的方法，相当于 </span><code class=\"ne-code\"><strong><em><span class=\"ne-text\">this</span></em></strong></code></li></ul><p id=\"00b91516bf5c5ea740befa2a58c086c0_p_290\" class=\"ne-p\"><br></p><pre data-language=\"dart\" id=\"ca9f4b98\" class=\"ne-codeblock language-dart\">// student.dart\nimport &quot;person.dart&quot;;\n\nvoid main() {\n  var student = new Student();\n  student.study();\n  student.name = &quot;Tom&quot;;\n  student.age = 16;\n  print(student.isAudit);\n  student.run();\n}\nclass Student extends Person {\n  void study() {\n    print(&quot;Student study...&quot;); \n  }\n  // @override 表示下面的计算属性或方法是从父类中复写过来的，并不是自己的\n  @override\n  bool get isAudit =&gt; age &gt; 15;\n\n  @override\n  void run() {\n    // super.run(); // super表示在子类中调用父类的方法 \n    print(&quot;Student run...&quot;);\n  }\n}</pre><p id=\"ad203e3a237b08b1d0d926597eaff133_p_291\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"5e16ce9117d60001877fc595218fc97a_li_98\"><span class=\"ne-text\">多态</span></li></ul><p id=\"b97212b73dbf30e62a224a0cb8196f65_p_292\" class=\"ne-p\"><br></p><pre data-language=\"dart\" id=\"fc330c4f\" class=\"ne-codeblock language-dart\">// 子类的实例可以赋值给父类的一个应用\nvoid main() {\n    Person person = new Student();\n    if(person is Student) {\n      person.study();\n    }\n}</pre><p id=\"142a0ac02c890c3b4e4f9cecaa5f0275_p_293\" class=\"ne-p\"><br></p><h3 id=\"0b9e8a5f\"><span class=\"ne-text\">9.2 继承中的构造方法</span></h3><p id=\"fe7fc0ab45dac8012eef4e5feecabfcd_p_294\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"0dcafa4b9a3e0f2c9c87ce2ae894abca_li_99\"><span class=\"ne-text\">继承中的构造方法</span></li></ul><p id=\"77fe4e42c2d2d366d1accde6e1c1af59_p_295\" class=\"ne-p\"><br></p><ol class=\"ne-ol\"><li id=\"e57673e247e32d1ead654b853b550c1d_li_100\"><span class=\"ne-text\">子类中的构造方法默认会调用父类的无名无参的构造方法</span></li></ol><ol start=\"2\" class=\"ne-ol\"><li id=\"4bebb0d014537a2673d39404dea93244_li_101\"><span class=\"ne-text\">如果父类没有无名无参的构造方法，则需要显示调用父类构造方法</span></li></ol><ol start=\"3\" class=\"ne-ol\"><li id=\"fb8a41c7c04f0b76e665bdf052acdf19_li_102\"><span class=\"ne-text\">在构造方法参数后使用 </span><code class=\"ne-code\"><span class=\"ne-text\">:</span></code><span class=\"ne-text\"> 显示调用父类构造方法</span></li></ol><p id=\"1db0ebf876a15c92c914cf3cdc862b64_p_296\" class=\"ne-p\"><br></p><pre data-language=\"dart\" id=\"7eb8cabc\" class=\"ne-codeblock language-dart\">void main() {\n  var student = new Student(&quot;Tom&quot;);\n  print(student.name);\n}\nclass Person {\n  String name;\n  Person(this.name);\n  Person.withName(this.name);\n}\nclass Student extends Person {\n  int age;\n\n//  Student(String name) : super(name);\n  Student(String name) : super.withName(name);\n}</pre><p id=\"4d03ec137080c7a0ce05f378a2fc9078_p_297\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"5a156dfe63b514adbea020d156197a61_li_103\"><span class=\"ne-text\">构造方法的执行顺序</span></li></ul><p id=\"6b7d4d1ce5df30f76ec280811854eb6a_p_298\" class=\"ne-p\"><br></p><ol class=\"ne-ol\"><li id=\"30824f9b63253c539ba7d9115378e2db_li_104\"><span class=\"ne-text\">父类的构造方法在子类构造方法体开始执行的位置调用</span></li></ol><ol start=\"2\" class=\"ne-ol\"><li id=\"02d67090e5196c395c5cc7636dad33aa_li_105\"><span class=\"ne-text\">如果有初始化列表，初始化列表会在父类构造方法之前执行</span></li></ol><p id=\"f7dab119a6de9c02eceeeaa20c58303b_p_299\" class=\"ne-p\"><br></p><pre data-language=\"dart\" id=\"a54523c7\" class=\"ne-codeblock language-dart\">void main() {\n  var student = new Student(&quot;Tom&quot;, &quot;Male&quot;);\n  print(student.name);\n}\nclass Person {\n  String name;\n  Person(this.name);\n  Person.withName(this.name);\n}\nclass Student extends Person {\n  int age;\n  final String gender;\n//  Student(String name) : super(name);\n  // 初始化列表必须放在显示调用父类构造方法的前面\n  Student(String name, String genderName) : gender = genderName, super.withName(name);\n}</pre><p id=\"3b1704c33fc6d6f8a8da83e196debd0d_p_300\" class=\"ne-p\"><br></p><h3 id=\"7fc58712\"><span class=\"ne-text\">9.3 抽象类</span></h3><p id=\"7fcd20ea8e49dccbe59daa613949d790_p_301\" class=\"ne-p\"><br></p><ol class=\"ne-ol\"><li id=\"41fd3bf87627d65866bf92941cd574e3_li_106\"><span class=\"ne-text\">抽象类使用关键字 </span><code class=\"ne-code\"><span class=\"ne-text\">abstract</span></code><span class=\"ne-text\"> 表示，不能直接被实例化</span></li></ol><ol start=\"2\" class=\"ne-ol\"><li id=\"5f3c53c853d8deeb2fc28ee4fcc1f448_li_107\"><span class=\"ne-text\">抽象方法不用 </span><code class=\"ne-code\"><span class=\"ne-text\">abstract</span></code><span class=\"ne-text\"> 修饰，无实现</span></li></ol><ol start=\"3\" class=\"ne-ol\"><li id=\"480cd42eca8f685182d4e26287de175a_li_108\"><span class=\"ne-text\">抽象类可以没有抽象方法</span></li></ol><ol start=\"4\" class=\"ne-ol\"><li id=\"3c15fb1d7aaaf46dee81f3492f81b226_li_109\"><span class=\"ne-text\">有抽象方法的类一定得声明为抽象类</span></li></ol><p id=\"97a3a563936e81f5bef06c12d11ccafb_p_302\" class=\"ne-p\"><br></p><p id=\"32418971d5e631b9940f4ead09ebdb21_p_303\" class=\"ne-p\"><span class=\"ne-text\">抽象类更多用来作为接口使用</span></p><p id=\"19e2a238dbc7e25bbba74d975405d802_p_304\" class=\"ne-p\"><br></p><pre data-language=\"dart\" id=\"2a8264a1\" class=\"ne-codeblock language-dart\">void main() {\n  var person = new Student();\n  person.run();\n}\nabstract class Person {\n  void run();\n}\nclass Student extends Person {\n  @override\n  void run() {\n    print(&quot;run...&quot;);\n  }\n}</pre><p id=\"8a0b3cc3ee29e653e154dc38bee23f35_p_305\" class=\"ne-p\"><br></p><h3 id=\"08f04307\"><span class=\"ne-text\">9.4 接口</span></h3><p id=\"287a7991d15a9423698de5405daff209_p_306\" class=\"ne-p\"><br></p><ol class=\"ne-ol\"><li id=\"d81d35b056fd412c9308d956b09483ae_li_110\"><span class=\"ne-text\">在 </span><code class=\"ne-code\"><span class=\"ne-text\">dart</span></code><span class=\"ne-text\"> 中，类和接口是统一的，类就是接口</span></li></ol><ol start=\"2\" class=\"ne-ol\"><li id=\"b79a525d836fabf9188863a060278be5_li_111\"><span class=\"ne-text\">每个类都隐式的定义了一个包含所有实例成员的接口</span></li></ol><ol start=\"3\" class=\"ne-ol\"><li id=\"2a0970b0f2e6eb64d9299dadf63bc7e2_li_112\"><span class=\"ne-text\">如果是复用已有类的实现，使用继承（</span><code class=\"ne-code\"><span class=\"ne-text\">extends</span></code><span class=\"ne-text\">）</span></li></ol><ol start=\"4\" class=\"ne-ol\"><li id=\"489f7e97148cf7ab74e5b2e2f03bfded_li_113\"><span class=\"ne-text\">如果只是使用已有类的外在行为(一些行为)，则使用接口（</span><code class=\"ne-code\"><span class=\"ne-text\">implements</span></code><span class=\"ne-text\">）</span></li></ol><p id=\"6e083a5926a9936a23902c87e04b4686_p_307\" class=\"ne-p\"><br></p><pre data-language=\"dart\" id=\"46d3911d\" class=\"ne-codeblock language-dart\">void main() {\n  var student = new Student();\n}\nclass Person {\n  String name;\n  int get age =&gt; 18;\n  void run() {\n    print(&quot;Person run...&quot;);\n  }\n}\nclass Student implements Person {\n  @override\n  String name;\n\n  @override\n  // TODO: implement age\n  int get age =&gt; 15;\n\n  @override\n  void run() {\n    // TODO: implement run\n  }\n}</pre><p id=\"711fcb79bc202f54137cc04fb6a12e2c_p_308\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"86bcc2305929b3e26eee22f26724b85e_li_114\"><span class=\"ne-text\">更好的写法，利用抽象类</span></li></ul><p id=\"0375f6a488aa68e79b4a160ec7f8fa4d_p_309\" class=\"ne-p\"><br></p><pre data-language=\"dart\" id=\"e985592d\" class=\"ne-codeblock language-dart\">void main() {\n  var student = new Student();\n  student.run();\n}\nabstract class Person {\n  void run();\n}\nclass Student implements Person {\n  @override\n  void run() {\n    print(&quot;Student run...&quot;);\n  }\n}</pre><p id=\"a56b84e031e02e5715ff0d6aadb83c0e_p_310\" class=\"ne-p\"><br></p><h3 id=\"cc3f95f0\"><span class=\"ne-text\">9.5 </span><code class=\"ne-code\"><span class=\"ne-text\">Mixins</span></code></h3><p id=\"1539b3e1473877a8fdb76e7e9fab2f17_p_311\" class=\"ne-p\"><br></p><ol class=\"ne-ol\"><li id=\"397aef9b56499c9ee867cfc0fb371f9e_li_115\"><code class=\"ne-code\"><span class=\"ne-text\">Mixins</span></code><span class=\"ne-text\"> 类似于多继承，是在多类继承中重用一个类代码的方式</span></li></ol><p id=\"f5c413e64e1bf60658b94f4d5ffba94d_p_312\" class=\"ne-p\"><br></p><pre data-language=\"dart\" id=\"15716d08\" class=\"ne-codeblock language-dart\">void main() {\n  var d = new D();\n  d.a();\n  d.b();\n  d.c();\n}\n\nclass A {\n  void a() {\n    print(&quot;A.a()...&quot;);\n  }\n}\nclass B {\n  void a() {\n    print(&quot;B.a()...&quot;);\n  }\n  void b() {\n    print(&quot;B.b()...&quot;);\n  }\n}\nclass C {\n  void a() {\n    print(&quot;C.a()...&quot;);\n  }\n  void b() {\n    print(&quot;C.b()...&quot;);\n  }\n  void c() {\n    print(&quot;C.c()...&quot;);\n  }\n}\n// 必须先有继承，才能使用 Mixins；如果使用 Mixins 的几个类中有相同的方法，则处于最后一个的方法优先被调用\nclass D extends A with B, C {\n\n}</pre><p id=\"8ed534170f3ad30be7425327269966a1_p_313\" class=\"ne-p\"><br></p><ol start=\"2\" class=\"ne-ol\"><li id=\"20e4f6f1ff3e3b87360f3b4d36446512_li_116\"><span class=\"ne-text\">作为 </span><code class=\"ne-code\"><span class=\"ne-text\">Mixin</span></code><span class=\"ne-text\"> 的类不能有显示声明构造方法</span></li></ol><ol start=\"3\" class=\"ne-ol\"><li id=\"29ccd03d31de2c030f3fbf3b6f3bc2da_li_117\"><span class=\"ne-text\">作为 </span><code class=\"ne-code\"><span class=\"ne-text\">Mixin</span></code><span class=\"ne-text\"> 的类只能继承自 </span><code class=\"ne-code\"><span class=\"ne-text\">Object</span></code></li></ol><ol start=\"4\" class=\"ne-ol\"><li id=\"25a3f8ad808fd9a95a5ff9e3e857ce33_li_118\"><span class=\"ne-text\">使用关键字 </span><code class=\"ne-code\"><span class=\"ne-text\">with</span></code><span class=\"ne-text\"> 连接一个或多个 </span><code class=\"ne-code\"><span class=\"ne-text\">Mixin</span></code></li></ol><p id=\"723be51dabd620a0060235545593c061_p_314\" class=\"ne-p\"><br></p><p id=\"8f8c79ef270c639ad317f5c6e2b64281_p_315\" class=\"ne-p\"><span class=\"ne-text\">如果是由其它类组装而来的，没有自己的属性或方法，则可以简写</span></p><p id=\"024a8421e8afb441225906c83320d8b8_p_316\" class=\"ne-p\"><br></p><pre data-language=\"dart\" id=\"dc394d0d\" class=\"ne-codeblock language-dart\">void main() {\n\n}\nabstract class Engine {\n  void work();\n}\nclass OilEngine implements Engine {\n  @override\n  void work() {\n    print(&quot;Work with qil...&quot;);\n  }\n}\nclass ElectricEngine implements Engine {\n  @override\n  void work() {\n    print(&quot;Work with electric...&quot;);\n  }\n}\nclass Tyre {\n  String name;\n  void run() {}\n}\n// 如果是由其它类组装而来的，没有自己的属性或方法，则可以简写\nclass Car = Tyre with ElectricEngine;\n// 完整写法\n//class Car extends Tyre with ElectricEngine {}\nclass Bus = Tyre with OilEngine;</pre><p id=\"7a2d0c77d4747b965eb8ad5f6277e1bb_p_317\" class=\"ne-p\"><br></p><h3 id=\"13db85ad\"><span class=\"ne-text\">9.6 操作符覆写(重载运算符/运算符重载)</span></h3><p id=\"10c43070f7361810f0a11bc380b5c8d3_p_318\" class=\"ne-p\"><br></p><ol class=\"ne-ol\"><li id=\"159301a2d0382eedf9903cfeb63f3872_li_119\"><span class=\"ne-text\">覆写操作符需要在类中定义</span></li></ol><p id=\"4f67f2156dee24fd9a5d4af3856a8608_p_319\" class=\"ne-p\"><br></p><pre data-language=\"dart\" id=\"14ee5233\" class=\"ne-codeblock language-dart\">返回类型 operator 操作符 (参数1, 参数2, ...) {\n    实现体...\n    return 返回值\n}</pre><p id=\"d7deb648382d2e3c8fc5570428e67bdf_p_320\" class=\"ne-p\"><br></p><ol start=\"2\" class=\"ne-ol\"><li id=\"931f7d67ddff31666cc42f774b68277a_li_120\"><span class=\"ne-text\">如果覆写 </span><code class=\"ne-code\"><span class=\"ne-text\">==</span></code><span class=\"ne-text\"> ，还需要覆写对象的 </span><code class=\"ne-code\"><span class=\"ne-text\">hashCode</span></code><span class=\"ne-text\"> </span><code class=\"ne-code\"><span class=\"ne-text\">getter</span></code><span class=\"ne-text\"> 方法</span></li></ol><ol start=\"3\" class=\"ne-ol\"><li id=\"f3e19ddc3719ac1d90f0900519163aee_li_121\"><span class=\"ne-text\">可覆写的操作符</span></li></ol><table id=\"589657d9\" class=\"ne-table\" style=\"width: 748px\"><tbody><tr style=\"height: 33px\"><td width=\"187\"><p id=\"ufd9a1165\" class=\"ne-p\" style=\"text-align: left\"><strong><em><span class=\"ne-text\">&lt;</span></em></strong></p></td><td width=\"187\"><p id=\"u314356df\" class=\"ne-p\" style=\"text-align: left\"><strong><em><span class=\"ne-text\">+</span></em></strong></p></td><td width=\"187\"><p id=\"u3697954c\" class=\"ne-p\" style=\"text-align: left\"><strong><em><span class=\"ne-text\">|</span></em></strong></p></td><td width=\"187\"><p id=\"u637fe1a4\" class=\"ne-p\" style=\"text-align: left\"><strong><em><span class=\"ne-text\">[]</span></em></strong></p></td></tr><tr style=\"height: 33px\"><td width=\"187\"><p id=\"u02cb827a\" class=\"ne-p\" style=\"text-align: left\"><strong><em><span class=\"ne-text\">&gt;</span></em></strong></p></td><td width=\"187\"><p id=\"u9687a534\" class=\"ne-p\" style=\"text-align: left\"><strong><em><span class=\"ne-text\">/</span></em></strong></p></td><td width=\"187\"><p id=\"ue01fbf78\" class=\"ne-p\" style=\"text-align: left\"><strong><em><span class=\"ne-text\">^</span></em></strong></p></td><td width=\"187\"><p id=\"u21be8106\" class=\"ne-p\" style=\"text-align: left\"><strong><em><span class=\"ne-text\">[]=</span></em></strong></p></td></tr><tr style=\"height: 33px\"><td width=\"187\"><p id=\"u022afaca\" class=\"ne-p\" style=\"text-align: left\"><strong><em><span class=\"ne-text\">&lt;=</span></em></strong></p></td><td width=\"187\"><p id=\"ubcb1da3f\" class=\"ne-p\" style=\"text-align: left\"><strong><em><span class=\"ne-text\">~/</span></em></strong></p></td><td width=\"187\"><p id=\"u3c7d48f2\" class=\"ne-p\" style=\"text-align: left\"><strong><em><span class=\"ne-text\">&amp;</span></em></strong></p></td><td width=\"187\"><p id=\"u1f18bb45\" class=\"ne-p\" style=\"text-align: left\"><strong><em><span class=\"ne-text\">~</span></em></strong></p></td></tr><tr style=\"height: 33px\"><td width=\"187\"><p id=\"u6982d547\" class=\"ne-p\" style=\"text-align: left\"><strong><em><span class=\"ne-text\">&gt;=</span></em></strong></p></td><td width=\"187\"><p id=\"u8af9c0f5\" class=\"ne-p\" style=\"text-align: left\"><strong><em><span class=\"ne-text\">*</span></em></strong></p></td><td width=\"187\"><p id=\"u941fc1d8\" class=\"ne-p\" style=\"text-align: left\"><strong><em><span class=\"ne-text\">&lt;&lt;</span></em></strong></p></td><td width=\"187\"><p id=\"uea73f148\" class=\"ne-p\" style=\"text-align: left\"><strong><em><span class=\"ne-text\">==</span></em></strong></p></td></tr><tr style=\"height: 33px\"><td width=\"187\"><p id=\"u988e412c\" class=\"ne-p\" style=\"text-align: left\"><strong><em><span class=\"ne-text\">-</span></em></strong></p></td><td width=\"187\"><p id=\"u63510c35\" class=\"ne-p\" style=\"text-align: left\"><strong><em><span class=\"ne-text\">%</span></em></strong></p></td><td width=\"187\"><p id=\"ud6736d51\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\">&gt;&gt;</span></p></td><td width=\"187\"></td></tr></tbody></table><p id=\"386408b19add78b5d4538676e07dc69f_p_321\" class=\"ne-p\"><br></p><pre data-language=\"dart\" id=\"ae3e4fb9\" class=\"ne-codeblock language-dart\">void main() {\n  var person1 = new Person(18);\n  var person2 = new Person(20);\n  var person3 = new Person(20);\n  print(person1 &gt; person2);\n  print(person1[&quot;age&quot;]);\n  print(person2 == person3);\n}\n\nclass Person {\n  int age;\n  Person(this.age);\n\n  // 覆写 &gt;\n  bool operator &gt;(Person person) {\n    return this.age &gt; person.age;\n  }\n  // 覆写 []\n  int operator [](String str) {\n    if(&quot;age&quot; == str) {\n      return age;\n    }\n    return 0;\n  }\n  // 覆写等号，重写hashCode，右键打开generate选项然后选择\n  @override\n  bool operator ==(Object other) =&gt;\n      identical(this, other) ||\n          other is Person &amp;&amp;\n              runtimeType == other.runtimeType &amp;&amp;\n              age == other.age;\n\n  @override\n  int get hashCode =&gt; age.hashCode;\n}</pre><p id=\"73ec4e895ea3387f14965acf6166c09a_p_322\" class=\"ne-p\"><br></p><h2 id=\"65d308b2\"><span class=\"ne-text\">十、枚举</span></h2><p id=\"8a93c62f5bf11a8467b27277718204ed_p_323\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"d2bd4251ccace6e00d7f31f03e164bd0_li_122\"><span class=\"ne-text\">枚举</span></li></ul><p id=\"deca07778d4970b7e735a77c95d1efec_p_324\" class=\"ne-p\"><br></p><ol class=\"ne-ol\"><li id=\"3b4cb8383e10f2fb13c3d1ad7f9cbf58_li_123\"><span class=\"ne-text\">枚举是一种有穷序列集的数据类型</span></li></ol><ol start=\"2\" class=\"ne-ol\"><li id=\"1599e7995111277d4eabadcab3234621_li_124\"><span class=\"ne-text\">使用关键字 </span><code class=\"ne-code\"><span class=\"ne-text\">enum</span></code><span class=\"ne-text\"> 定义一个枚举</span></li></ol><ol start=\"3\" class=\"ne-ol\"><li id=\"cd51041540e1a6b1150d4229137d1419_li_125\"><span class=\"ne-text\">常用于代替常量，控制语句等</span></li></ol><p id=\"869206ecba3f946b7a6ba2e46f91db50_p_325\" class=\"ne-p\"><br></p><pre data-language=\"dart\" id=\"2e8b3bc7\" class=\"ne-codeblock language-dart\">void main() {\n  var currentSeason = Season.spring;\n  print(currentSeason.index);\n  switch(currentSeason) {\n    case Season.spring:\n      print(&quot;1-3月&quot;);\n      break;\n    case Season.summer:\n      print(&quot;4-6月&quot;);\n      break;\n    case Season.autumn:\n      print(&quot;7-9月&quot;);\n      break;\n    case Season.winter:\n      print(&quot;10-12月&quot;);\n      break;\n  }\n}\nenum Season {\n  spring,\n  summer,\n  autumn,\n  winter\n}</pre><p id=\"47a5f0c513179a8c0b441643872a29bd_p_326\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"5822d4862081dd39ce4a7f4012d0a985_li_126\"><code class=\"ne-code\"><span class=\"ne-text\">Dart</span></code><span class=\"ne-text\"> 枚举特性</span></li></ul><p id=\"1260835a1e832a2cbb7274deda8a76af_p_327\" class=\"ne-p\"><br></p><ol class=\"ne-ol\"><li id=\"4b7c9e5586daa1631a1a4b33283fe2ab_li_127\"><code class=\"ne-code\"><span class=\"ne-text\">index</span></code><span class=\"ne-text\"> 从 </span><code class=\"ne-code\"><span class=\"ne-text\">0</span></code><span class=\"ne-text\"> 开始，依次累加</span></li></ol><ol start=\"2\" class=\"ne-ol\"><li id=\"239c258da39a5d926a220b7cefa6aeab_li_128\"><span class=\"ne-text\">不能指定原始值</span></li></ol><ol start=\"3\" class=\"ne-ol\"><li id=\"43af6b45700c65b7614508cb0961bac1_li_129\"><span class=\"ne-text\">不能添加方法</span></li></ol><p id=\"41eae880938c5eadbe95b939a2a3507a_p_328\" class=\"ne-p\"><br></p><h2 id=\"8f5e2369\"><span class=\"ne-text\">十一、泛型</span></h2><p id=\"367e571e142935bde23beca7770f783a_p_329\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"75db1dffa12aff67c71dbd97610149b5_li_130\"><span class=\"ne-text\">泛型</span></li></ul><p id=\"fcbe9387308e2fc9a13c5e4c70f82087_p_330\" class=\"ne-p\"><br></p><ol class=\"ne-ol\"><li id=\"4796b3d658a441993016bc5f15c0cd8f_li_131\"><code class=\"ne-code\"><span class=\"ne-text\">Dart</span></code><span class=\"ne-text\"> 中的类型是可选的，可使用泛型限定类型</span></li></ol><ol start=\"2\" class=\"ne-ol\"><li id=\"c9487d244be44f1ac17422dd4a03ee47_li_132\"><span class=\"ne-text\">使用泛型能够有效的减少代码重复</span></li></ol><p id=\"df5870a4b055e4cd4943273fac462f51_p_331\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"3288cb0a807727c403a185e940426f75_li_133\"><span class=\"ne-text\">泛型的使用</span></li></ul><p id=\"103e6bdcb2dcc51c8de25c5d976a9f93_p_332\" class=\"ne-p\"><br></p><ol class=\"ne-ol\"><li id=\"d0ed0dd82c573875fd8bb6c97957cdd9_li_134\"><span class=\"ne-text\">类的泛型</span></li></ol><p id=\"b4252b6b2deddfea7cfc17616ff2e148_p_333\" class=\"ne-p\"><br></p><pre data-language=\"dart\" id=\"e6da918c\" class=\"ne-codeblock language-dart\">void main() {\n  var utils = new Utils&lt;String&gt;();\n  utils.put(&quot;element&quot;);\n}\nclass Utils&lt;T&gt; {\n  T element;\n  void put(T element) {\n    this.element = element;\n  }\n}</pre><p id=\"d7e3387b899cd18519ad68c1e5005c09_p_334\" class=\"ne-p\"><br></p><ol start=\"2\" class=\"ne-ol\"><li id=\"66bc18383db18cb7bad90dea170a45e8_li_135\"><span class=\"ne-text\">方法的泛型</span></li></ol><p id=\"848d57ddbbb6aa5c588defcda9c65bc0_p_335\" class=\"ne-p\"><br></p><pre data-language=\"dart\" id=\"3a0dc9ac\" class=\"ne-codeblock language-dart\">void main() {\n  var utils = new Utils();\n  utils.put&lt;String&gt;(&quot;element&quot;);\n}\nclass Utils {\n  void put&lt;T&gt;(T element) {\n    print(element);\n  }\n}</pre><p id=\"41b79b76dff04c782ee1693f129a0de3_p_336\" class=\"ne-p\"><br></p><h2 id=\"87ad53d5\"><span class=\"ne-text\">十二、库</span></h2><p id=\"0a056e448975c60bc9085a7f02af8f3e_p_337\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"3ec995dbb7b9e41da89ba0f3770d5a31_li_136\"><span class=\"ne-text\">常用库</span></li></ul><p id=\"d8f5f3568d534b5e9cd994fed93e7e75_p_338\" class=\"ne-p\"><br></p><ol class=\"ne-ol\"><li id=\"d18678d79ab95cc02b2f66daddabac49_li_137\"><code class=\"ne-code\"><span class=\"ne-text\">Dart web</span></code><span class=\"ne-text\"> 应用通常使用 </span><code class=\"ne-code\"><span class=\"ne-text\">dart:html</span></code><span class=\"ne-text\"> 库</span></li></ol><ol start=\"2\" class=\"ne-ol\"><li id=\"e353d0d84a2918e47b3e328d13331cbe_li_138\"><code class=\"ne-code\"><span class=\"ne-text\">dart:core</span></code><span class=\"ne-text\"> 库定义了 </span><code class=\"ne-code\"><span class=\"ne-text\">num</span></code><span class=\"ne-text\">, </span><code class=\"ne-code\"><span class=\"ne-text\">int</span></code><span class=\"ne-text\">, 和 </span><code class=\"ne-code\"><span class=\"ne-text\">double</span></code><span class=\"ne-text\"> 类，这些类 定义一些操作数字的基础功能。</span></li></ol><ol start=\"3\" class=\"ne-ol\"><li id=\"8b9f468ea8cec76a487545ab6079825d_li_139\"><span class=\"ne-text\">异步编程通常使用回调函数，但是 </span><code class=\"ne-code\"><span class=\"ne-text\">Dart</span></code><span class=\"ne-text\"> 提供了另外的 选择： </span><a href=\"https://api.dartlang.org/stable/dart-async/Future-class.html\" data-href=\"https://api.dartlang.org/stable/dart-async/Future-class.html\" target=\"_blank\" class=\"ne-link\"><strong><em><span class=\"ne-text\">Future</span></em></strong></a><span class=\"ne-text\"> 和 </span><a href=\"https://api.dartlang.org/stable/dart-async/Stream-class.html\" data-href=\"https://api.dartlang.org/stable/dart-async/Stream-class.html\" target=\"_blank\" class=\"ne-link\"><strong><em><span class=\"ne-text\">Stream</span></em></strong></a><span class=\"ne-text\"> 对象。 </span><code class=\"ne-code\"><span class=\"ne-text\">Future</span></code><span class=\"ne-text\"> 和 </span><code class=\"ne-code\"><span class=\"ne-text\">JavaScript</span></code><span class=\"ne-text\"> 中的 </span><code class=\"ne-code\"><span class=\"ne-text\">Promise</span></code><span class=\"ne-text\"> 类似，代表在将来某个时刻会返回一个 结果。</span><code class=\"ne-code\"><span class=\"ne-text\">Stream</span></code><span class=\"ne-text\"> 是一种用来获取一些列数据的方式，例如 </span><code class=\"ne-code\"><span class=\"ne-text\">事件流</span></code><span class=\"ne-text\">。 </span><code class=\"ne-code\"><span class=\"ne-text\">Future</span></code><span class=\"ne-text\">, </span><code class=\"ne-code\"><span class=\"ne-text\">Stream</span></code><span class=\"ne-text\">, 以及其他异步操作的类在 </span><a href=\"https://api.dartlang.org/stable/dart-async/dart-async-library.html\" data-href=\"https://api.dartlang.org/stable/dart-async/dart-async-library.html\" target=\"_blank\" class=\"ne-link\"><strong><em><span class=\"ne-text\">dart:async</span></em></strong></a><span class=\"ne-text\"> 库中。</span></li></ol><ol start=\"4\" class=\"ne-ol\"><li id=\"a8b79ec246fe8bf47502a1426052a0dc_li_140\"><code class=\"ne-code\"><span class=\"ne-text\">Math</span></code><span class=\"ne-text\"> 库提供了常见的数学运算功能，例如 </span><code class=\"ne-code\"><span class=\"ne-text\">sine</span></code><span class=\"ne-text\"> 和 </span><code class=\"ne-code\"><span class=\"ne-text\">cosine</span></code><span class=\"ne-text\">， </span><code class=\"ne-code\"><span class=\"ne-text\">最大值</span></code><span class=\"ne-text\">、</span><code class=\"ne-code\"><span class=\"ne-text\">最小值等</span></code><span class=\"ne-text\">，还有各种常量 例如 </span><code class=\"ne-code\"><span class=\"ne-text\">pi</span></code><span class=\"ne-text\"> 和 </span><code class=\"ne-code\"><span class=\"ne-text\">e</span></code><span class=\"ne-text\"> 等。</span><code class=\"ne-code\"><span class=\"ne-text\">Math</span></code><span class=\"ne-text\"> 库中 的大部分函数都是顶级方法。导入 </span><code class=\"ne-code\"><span class=\"ne-text\">dart:math</span></code><span class=\"ne-text\"> 就可以使用 </span><code class=\"ne-code\"><span class=\"ne-text\">Math</span></code><span class=\"ne-text\"> 库了</span></li></ol><p id=\"f140694be8554ab7380456708abcd9fc_p_339\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"e403524ddb7e2f7695524618fe7ff1fe_li_141\"><span class=\"ne-text\">如果导入的两个库具有冲突的标识符，则可以使用库的前缀来区分</span></li></ul><p id=\"f9a30ee34e0f83179be8cb5e4158d0bf_p_340\" class=\"ne-p\"><br></p><pre data-language=\"dart\" id=\"36f03bec\" class=\"ne-codeblock language-dart\">import 'package:lib1/lib1.dart';\nimport 'package:lib2/lib2.dart' as lib2;\n// ...\nElement element1 = new Element();           // Uses Element from lib1.\nlib2.Element element2 = new lib2.Element(); // Uses Element from lib2.</pre><p id=\"58c8e4945e151873b2addcbc0a5ecc7b_p_341\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"dff68f143f67a15c606b57836c55588b_li_142\"><span class=\"ne-text\">导入库的一部分</span></li></ul><p id=\"b0ef2ce25375794a88fa9f52e7db5b09_p_342\" class=\"ne-p\"><br></p><p id=\"8d9552ff8b9b035d25f298a739a4e3c8_p_343\" class=\"ne-p\"><span class=\"ne-text\">如果你只使用库的一部分功能，则可以选择需要导入的 内容。例如：</span></p><p id=\"4252c262ba6e07a3ea03922001409458_p_344\" class=\"ne-p\"><br></p><pre data-language=\"dart\" id=\"46be027e\" class=\"ne-codeblock language-dart\">// Import only foo.\nimport 'package:lib1/lib1.dart' show foo;\n\n// Import all names EXCEPT foo.\nimport 'package:lib2/lib2.dart' hide foo;</pre><p id=\"907fcc622f0cb0469e548c6f5829004f_p_345\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"d077ce50b62086c2f877cfe6d0840f4d_li_143\"><span class=\"ne-text\">延迟载入库</span></li></ul><p id=\"24a645574b35969fd9fc73ce231749f5_p_346\" class=\"ne-p\"><br></p><p id=\"325d761e7972bfab2f755a1e3ed17ea0_p_347\" class=\"ne-p\"><code class=\"ne-code\"><span class=\"ne-text\">Deferred loading</span></code><span class=\"ne-text\"> (也称之为 </span><code class=\"ne-code\"><span class=\"ne-text\">lazy loading</span></code><span class=\"ne-text\">) 可以让应用在需要的时候再 加载库。 下面是一些使用延迟加载库的场景：</span></p><p id=\"8d4b271613686a2d1064c6b308ba1fa3_p_348\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"6506a4b068398aad74bdde688eed9038_li_144\"><span class=\"ne-text\">减少 </span><code class=\"ne-code\"><span class=\"ne-text\">APP</span></code><span class=\"ne-text\"> 的启动时间。</span></li></ul><ul class=\"ne-ul\"><li id=\"95d13e9d3dcbe2396f19a9f9462f998b_li_145\"><span class=\"ne-text\">执行 </span><code class=\"ne-code\"><span class=\"ne-text\">A/B</span></code><span class=\"ne-text\"> 测试，例如 尝试各种算法的 不同实现。</span></li></ul><ul class=\"ne-ul\"><li id=\"a42c3ead6b43dfe4805210f4e5eb4562_li_146\"><span class=\"ne-text\">加载很少使用的功能，例如可选的屏幕和对话框。</span></li></ul><p id=\"74ecfab27c8cf377938bc9b3d6847097_p_349\" class=\"ne-p\"><br></p><p id=\"6804417aa27587e75625564fa2f865ec_p_350\" class=\"ne-p\"><span class=\"ne-text\">要延迟加载一个库，需要先使用 </span><code class=\"ne-code\"><span class=\"ne-text\">deferred as</span></code><span class=\"ne-text\"> 来 导入：</span></p><p id=\"e79d777f0fefee41e9c01ecd95e72714_p_351\" class=\"ne-p\"><br></p><pre data-language=\"dart\" id=\"d52358e1\" class=\"ne-codeblock language-dart\">import 'package:deferred/hello.dart' deferred as hello;</pre><p id=\"ad3eb8fe3c94e7771e185a89172e7be1_p_352\" class=\"ne-p\"><br></p><p id=\"31ff2ddd806a62e186d13420e98110be_p_353\" class=\"ne-p\"><span class=\"ne-text\">当需要使用的时候，使用库标识符调用 </span><code class=\"ne-code\"><span class=\"ne-text\">loadLibrary()</span></code><span class=\"ne-text\"> 函数来加载库：</span></p><p id=\"b14ae4a1758357e04d7ee5fa01a4c0de_p_354\" class=\"ne-p\"><br></p><pre data-language=\"dart\" id=\"67293db7\" class=\"ne-codeblock language-dart\">greet() async {\n  await hello.loadLibrary();\n  hello.printGreeting();\n}</pre><p id=\"eca79acfd3f51d47aca4c006f27b136f_p_355\" class=\"ne-p\"><br></p><p id=\"9a23cd8ac183f301a2b78de75fa6efb1_p_356\" class=\"ne-p\"><span class=\"ne-text\"> 在前面的代码， 使用 </span><code class=\"ne-code\"><span class=\"ne-text\">await</span></code><span class=\"ne-text\"> 关键字暂停代码执行一直到库加载完成。 关于 </span><code class=\"ne-code\"><span class=\"ne-text\">async</span></code><span class=\"ne-text\"> 和 </span><code class=\"ne-code\"><span class=\"ne-text\">await</span></code><span class=\"ne-text\"> 的更多信息请参考 </span><a href=\"http://dart.goodev.org/guides/language/language-tour#asynchrony-support\" data-href=\"http://dart.goodev.org/guides/language/language-tour#asynchrony-support\" target=\"_blank\" class=\"ne-link\"><strong><em><span class=\"ne-text\">异步支持</span></em></strong></a><span class=\"ne-text\">。</span></p><p id=\"d714dfb89a61340ab03baf9eb7dd2748_p_357\" class=\"ne-p\"><br></p><p id=\"5052633adeafc0d3e1beb4718b4708a1_p_358\" class=\"ne-p\"><span class=\"ne-text\"> 在一个库上你可以多次调用 </span><code class=\"ne-code\"><span class=\"ne-text\">loadLibrary()</span></code><span class=\"ne-text\"> 函数。 但是该库只是载入一次。</span></p><p id=\"979969d98e3b20e665a3357f6c0ad150_p_359\" class=\"ne-p\"><br></p><p id=\"7132bb7df6e001ec359d353815cc4664_p_360\" class=\"ne-p\"><span class=\"ne-text\">使用延迟加载库的时候，请注意一下问题：</span></p><p id=\"eef98ed46c411ab61c1fa22a0e88ce37_p_361\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"5de3e33ab69837269bbf3ad6a241610d_li_147\"><span class=\"ne-text\">延迟加载库的常量在导入的时候是不可用的。 只有当库加载完毕的时候，库中常量才可以使用。</span></li></ul><ul class=\"ne-ul\"><li id=\"cdee48a0eabda493ea6f0275e5ca50e0_li_148\"><span class=\"ne-text\">在导入文件的时候无法使用延迟库中的类型。 如果你需要使用类型，则考虑把接口类型移动到另外一个库中， 让两个库都分别导入这个接口库。</span></li></ul><ul class=\"ne-ul\"><li id=\"3c1cefd698fe6e72bcc83acd93a42b0c_li_149\"><strong><em><span class=\"ne-text\">Dart</span></em></strong><span class=\"ne-text\"> 隐含的把 </span><code class=\"ne-code\"><span class=\"ne-text\">loadLibrary()</span></code><span class=\"ne-text\"> 函数导入到使用 </span><code class=\"ne-code\"><span class=\"ne-text\">deferred as</span></code><span class=\"ne-text\"> 的命名空间中。 </span><code class=\"ne-code\"><span class=\"ne-text\">loadLibrary()</span></code><span class=\"ne-text\"> 方法返回一个 </span><a href=\"http://dart.goodev.org/guides/libraries/library-tour#future\" data-href=\"http://dart.goodev.org/guides/libraries/library-tour#future\" target=\"_blank\" class=\"ne-link\"><strong><em><span class=\"ne-text\">Future</span></em></strong></a><span class=\"ne-text\">。</span></li></ul><p id=\"5a47d94bc98e6d340cdb7cccff7fa51d_p_362\" class=\"ne-p\"><br></p><h2 id=\"be7a8956\"><span class=\"ne-text\">十三、异步支持</span></h2><p id=\"b6f4d2a5c1aff0a932ad150db3ddf853_p_363\" class=\"ne-p\"><br></p><p id=\"3b58e21db61a702b2f6b865a5b5b4df4_p_364\" class=\"ne-p\"><code class=\"ne-code\"><span class=\"ne-text\">Dart</span></code><span class=\"ne-text\"> 库中有很多返回 </span><code class=\"ne-code\"><span class=\"ne-text\">Future</span></code><span class=\"ne-text\"> 或者 </span><code class=\"ne-code\"><span class=\"ne-text\">Stream</span></code><span class=\"ne-text\"> 对象的方法。 这些方法是 </span><em><span class=\"ne-text\">异步的</span></em><span class=\"ne-text\">： 这些函数在设置完基本的操作 后就返回了， 而无需等待操作执行完成。 例如读取一个文件，在打开文件后就返回了。</span></p><p id=\"ff31106e827670d9c13d04207c7807b1_p_365\" class=\"ne-p\"><br></p><p id=\"b010b79fe4c99d3ef5c42246eef16c14_p_366\" class=\"ne-p\"><span class=\"ne-text\">有两种方式可以使用 </span><code class=\"ne-code\"><span class=\"ne-text\">Future</span></code><span class=\"ne-text\"> 对象中的 数据：</span></p><p id=\"2b4048cb18fa24fbfc8c77ec5721ba52_p_367\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"31e043a6cf75578d236ec470a845322c_li_150\"><span class=\"ne-text\">使用 </span><code class=\"ne-code\"><span class=\"ne-text\">async</span></code><span class=\"ne-text\"> 和 </span><code class=\"ne-code\"><span class=\"ne-text\">await</span></code></li></ul><ul class=\"ne-ul\"><li id=\"0bbc4848def569839fe6663f48efda55_li_151\"><span class=\"ne-text\">使用 </span><a href=\"http://dart.goodev.org/guides/libraries/library-tour#future\" data-href=\"http://dart.goodev.org/guides/libraries/library-tour#future\" target=\"_blank\" class=\"ne-link\"><strong><em><span class=\"ne-text\">Future API</span></em></strong></a></li></ul><p id=\"847a4369e8d7b47263076c4ca89cd8a5_p_368\" class=\"ne-p\"><br></p><p id=\"7dd07a4d7d001ad6e35f27170519849b_p_369\" class=\"ne-p\"><span class=\"ne-text\">同样，从 </span><code class=\"ne-code\"><span class=\"ne-text\">Stream</span></code><span class=\"ne-text\"> 中获取数据也有两种方式：</span></p><p id=\"12aad13ff7b6c968d7e10183168a26f8_p_370\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"6bfd7a76669c62539f10d6db3839004d_li_152\"><span class=\"ne-text\">使用 </span><code class=\"ne-code\"><span class=\"ne-text\">async</span></code><span class=\"ne-text\"> 和一个 异步 </span><code class=\"ne-code\"><span class=\"ne-text\">for</span></code><span class=\"ne-text\"> 循环 (</span><code class=\"ne-code\"><span class=\"ne-text\">await for</span></code><span class=\"ne-text\">)</span></li></ul><ul class=\"ne-ul\"><li id=\"da6f91b71fd7b4a1e22ccfbf13b1a74a_li_153\"><span class=\"ne-text\">使用 </span><a href=\"http://dart.goodev.org/guides/libraries/library-tour#stream\" data-href=\"http://dart.goodev.org/guides/libraries/library-tour#stream\" target=\"_blank\" class=\"ne-link\"><strong><em><span class=\"ne-text\">Stream API</span></em></strong></a></li></ul><p id=\"a7a97780cb395857388ed964c5f3725c_p_371\" class=\"ne-p\"><br></p><p id=\"8a27c9c58140b994a4b84192c7335979_p_372\" class=\"ne-p\"><strong><span class=\"ne-text\">1.</span></strong><span class=\"ne-text\"> 要使用 </span><code class=\"ne-code\"><span class=\"ne-text\">await</span></code><span class=\"ne-text\">，其方法必须带有 </span><code class=\"ne-code\"><span class=\"ne-text\">async</span></code><span class=\"ne-text\"> 关键字：</span></p><p id=\"2cc7a87e0f7a623f30d3a0fbfb1815c3_p_373\" class=\"ne-p\"><br></p><pre data-language=\"dart\" id=\"7a36d06e\" class=\"ne-codeblock language-dart\">checkVersion() async {\n  var version = await lookUpVersion();\n  if (version == expectedVersion) {\n    // Do something.\n  } else {\n    // Do something else.\n  }\n}</pre><p id=\"0f62510e9876ac2b8fbef3c6abf81dba_p_374\" class=\"ne-p\"><br></p><p id=\"272124bd8713ce4596d1da7f15cab406_p_375\" class=\"ne-p\"><strong><span class=\"ne-text\">2.</span></strong><span class=\"ne-text\"> 可以使用 </span><code class=\"ne-code\"><span class=\"ne-text\">try</span></code><span class=\"ne-text\">, </span><code class=\"ne-code\"><span class=\"ne-text\">catch</span></code><span class=\"ne-text\">, 和 </span><code class=\"ne-code\"><span class=\"ne-text\">finally</span></code><span class=\"ne-text\"> 来处理使用 </span><code class=\"ne-code\"><span class=\"ne-text\">await</span></code><span class=\"ne-text\"> 的异常：</span></p><p id=\"ea7ffad04bfdbb99a8e20665fec055ff_p_376\" class=\"ne-p\"><br></p><pre data-language=\"dart\" id=\"8c5079db\" class=\"ne-codeblock language-dart\">try {\n  server = await HttpServer.bind(InternetAddress.LOOPBACK_IP_V4, 4044);\n} catch (e) {\n  // React to inability to bind to the port...\n}</pre><p id=\"f4a3c592a15de2aafcbfd6ea44b52d2e_p_377\" class=\"ne-p\"><br></p><h3 id=\"a1db95b8\"><span class=\"ne-text\">13.1 声明异步方法</span></h3><p id=\"b37407c92dd2046919e3158bff52accd_p_378\" class=\"ne-p\"><br></p><p id=\"dd4caec4acc05aaaf3b46aab2c10f914_p_379\" class=\"ne-p\"><span class=\"ne-text\"> 一个 </span><code class=\"ne-code\"><span class=\"ne-text\">async</span></code><span class=\"ne-text\"> 方法是函数体被标记为 </span><code class=\"ne-code\"><span class=\"ne-text\">async</span></code><span class=\"ne-text\"> 的方法。 虽然异步方法的执行可能需要一定时间，但是 异步方法立刻返回 - 在方法体还没执行之前就返回了。</span></p><p id=\"b2794e47279c4ed7006ea636861c4575_p_380\" class=\"ne-p\"><br></p><pre data-language=\"dart\" id=\"74345517\" class=\"ne-codeblock language-dart\">checkVersion() async {\n  // ...\n}\n\nlookUpVersion() async =&gt; /* ... */;</pre><p id=\"121b50bda08c128c3e28128057d3e46a_p_381\" class=\"ne-p\"><br></p><p id=\"e0e4afdd63438e4037151d8f05452b57_p_382\" class=\"ne-p\"><span class=\"ne-text\"> 在一个方法上添加 </span><code class=\"ne-code\"><span class=\"ne-text\">async</span></code><span class=\"ne-text\"> 关键字，则这个方法返回值为 </span><code class=\"ne-code\"><span class=\"ne-text\">Future</span></code><span class=\"ne-text\">。 例如，下面是一个返回字符串 的同步方法：</span></p><p id=\"1f3a1af4423a5f6548f92264c8ba9855_p_383\" class=\"ne-p\"><br></p><pre data-language=\"dart\" id=\"cd9d59fe\" class=\"ne-codeblock language-dart\">String lookUpVersionSync() =&gt; '1.0.0';</pre><p id=\"063a08ed2e1ff473c54a458563269e06_p_384\" class=\"ne-p\"><br></p><p id=\"5ada766efe7174b383d4ad4b53c47b54_p_385\" class=\"ne-p\"><span class=\"ne-text\"> 如果使用 </span><code class=\"ne-code\"><span class=\"ne-text\">async</span></code><span class=\"ne-text\"> 关键字，则该方法 返回一个 </span><code class=\"ne-code\"><span class=\"ne-text\">Future</span></code><span class=\"ne-text\">，并且 认为该函数是一个耗时的操作。</span></p><p id=\"e227befc343f9b09a2d440a1a01660d3_p_386\" class=\"ne-p\"><br></p><pre data-language=\"dart\" id=\"00cf361c\" class=\"ne-codeblock language-dart\">Future&lt;String&gt; lookUpVersion() async =&gt; '1.0.0';</pre><p id=\"b71763e3e4c3b4b8b22881ce7acedb8e_p_387\" class=\"ne-p\"><br></p><p id=\"3557045efc43b942f24dd99c02655986_p_388\" class=\"ne-p\"><span class=\"ne-text\"> 有时候，你的算法要求调用很多异步方法，并且等待 所有方法完成后再继续执行。使用 </span><code class=\"ne-code\"><a href=\"https://api.dartlang.org/stable/dart-async/Future/wait.html\" data-href=\"https://api.dartlang.org/stable/dart-async/Future/wait.html\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">Future.wait()</span></a></code><span class=\"ne-text\"> 这个静态函数来管理多个 </span><code class=\"ne-code\"><span class=\"ne-text\">Future</span></code><span class=\"ne-text\"> 并等待所有 </span><code class=\"ne-code\"><span class=\"ne-text\">Future</span></code><span class=\"ne-text\"> 执行完成。</span></p><p id=\"551b1052f74a2a4b4222675571b88192_p_389\" class=\"ne-p\"><br></p><pre data-language=\"dart\" id=\"758287b4\" class=\"ne-codeblock language-dart\">Future deleteDone = deleteLotsOfFiles();\nFuture copyDone = copyLotsOfFiles();\nFuture checksumDone = checksumLotsOfOtherFiles();\n\nFuture.wait([deleteDone, copyDone, checksumDone])\n    .then((List values) {\n      print('Done with all the long steps');\n    });</pre><p id=\"4bea89dfafb597e9afe4538b2bf7b1d5_p_390\" class=\"ne-p\"><br></p><h3 id=\"172c3272\"><span class=\"ne-text\">13.2 使用 </span><code class=\"ne-code\"><span class=\"ne-text\">await</span></code><span class=\"ne-text\"> 表达式</span></h3><p id=\"53af3e9f980081e358aa2e6f38131954_p_391\" class=\"ne-p\"><br></p><p id=\"7a800220ba61147f4a185169e43b3ef7_p_392\" class=\"ne-p\"><span class=\"ne-text\"> 在一个异步方法内可以使用多次 </span><code class=\"ne-code\"><span class=\"ne-text\">await</span></code><span class=\"ne-text\"> 表达式。 例如，下面的示例使用了三次 </span><code class=\"ne-code\"><span class=\"ne-text\">await</span></code><span class=\"ne-text\"> 表达式 来执行相关的功能：</span></p><p id=\"cad374bdd17b248b295bb46f1993c6ef_p_393\" class=\"ne-p\"><br></p><pre data-language=\"dart\" id=\"334b47bc\" class=\"ne-codeblock language-dart\">var entrypoint = await findEntrypoint();\nvar exitCode = await runExecutable(entrypoint, args);\nawait flushThenExit(exitCode);</pre><p id=\"13e645adec38b486b7650c768369b095_p_394\" class=\"ne-p\"><br></p><p id=\"bae33d18c5157a6737d97bede7c2bc6e_p_395\" class=\"ne-p\"><span class=\"ne-text\"> 在 </span><code class=\"ne-code\"><span class=\"ne-text\">await expression</span></code><span class=\"ne-text\"> 中， </span><code class=\"ne-code\"><span class=\"ne-text\">expression</span></code><span class=\"ne-text\"> 的返回值通常是一个 </span><code class=\"ne-code\"><span class=\"ne-text\">Future</span></code><span class=\"ne-text\">； 如果返回的值不是 </span><code class=\"ne-code\"><span class=\"ne-text\">Future</span></code><span class=\"ne-text\">，则 </span><code class=\"ne-code\"><span class=\"ne-text\">Dart</span></code><span class=\"ne-text\"> 会自动把该值放到 </span><code class=\"ne-code\"><span class=\"ne-text\">Future</span></code><span class=\"ne-text\"> 中返回。 </span><code class=\"ne-code\"><span class=\"ne-text\">Future</span></code><span class=\"ne-text\"> 对象代表返回一个对象的承 (</span><code class=\"ne-code\"><span class=\"ne-text\">promise</span></code><span class=\"ne-text\">)。 </span><code class=\"ne-code\"><span class=\"ne-text\">await expression</span></code><span class=\"ne-text\"> 执行的结果为这个返回的对象。 </span><code class=\"ne-code\"><span class=\"ne-text\">await expression</span></code><span class=\"ne-text\"> 会阻塞住，直到需要的对象返回为止。</span></p><p id=\"99a9f58323c0fa7215e3dc9ef7bf2e0d_p_396\" class=\"ne-p\"><br></p><p id=\"238ae757deabf29cfd92e05847a31bec_p_397\" class=\"ne-p\"><strong><span class=\"ne-text\">如果 </span></strong><code class=\"ne-code\"><strong><span class=\"ne-text\">await</span></strong></code><strong><span class=\"ne-text\"> 无法正常使用，请确保是在一个 </span></strong><code class=\"ne-code\"><strong><span class=\"ne-text\">async</span></strong></code><strong><span class=\"ne-text\"> 方法中。</span></strong><span class=\"ne-text\"> 例如要在 </span><code class=\"ne-code\"><span class=\"ne-text\">main()</span></code><span class=\"ne-text\"> 方法中使用 </span><code class=\"ne-code\"><span class=\"ne-text\">await</span></code><span class=\"ne-text\">， 则 </span><code class=\"ne-code\"><span class=\"ne-text\">main()</span></code><span class=\"ne-text\"> 方法的函数体必须标记为 </span><code class=\"ne-code\"><span class=\"ne-text\">async</span></code><span class=\"ne-text\">：</span></p><p id=\"c828dfcd964fb30f649b8d212eeb3614_p_398\" class=\"ne-p\"><br></p><pre data-language=\"dart\" id=\"dbb5fbe0\" class=\"ne-codeblock language-dart\">main() async {\n  checkVersion();\n  print('In main: version is ${await lookUpVersion()}');\n}</pre><p id=\"0da96d7a4d6a9ecb6ba79cac79fbb6ce_p_399\" class=\"ne-p\"><br></p><h3 id=\"3f70affd\"><span class=\"ne-text\">13.3 在循环中使用异步</span></h3><p id=\"f8c899a2e3c243c67cea6b300279a2f1_p_400\" class=\"ne-p\"><br></p><p id=\"e7313bc7262b5bc05e4def9a43246e2c_p_401\" class=\"ne-p\"><span class=\"ne-text\"> 异步 </span><code class=\"ne-code\"><span class=\"ne-text\">for</span></code><span class=\"ne-text\"> 循环具有如下的形式：</span></p><p id=\"f318a8b17566f6496a14f8d4c9368ba0_p_402\" class=\"ne-p\"><br></p><pre data-language=\"dart\" id=\"bc9f4bd7\" class=\"ne-codeblock language-dart\">await for (variable declaration in expression) {\n  // Executes each time the stream emits a value.\n}</pre><p id=\"da9f89f3f15f89516369a4fc8a16c33d_p_403\" class=\"ne-p\"><br></p><p id=\"5d74c704d29adb13f81f51863c302043_p_404\" class=\"ne-p\"><span class=\"ne-text\"> 上面 </span><code class=\"ne-code\"><span class=\"ne-text\">expression</span></code><span class=\"ne-text\"> 返回的值必须是 </span><code class=\"ne-code\"><span class=\"ne-text\">Stream</span></code><span class=\"ne-text\"> 类型的。 执行流程如下：</span></p><p id=\"0cfb3d5cc02b54e69ff545746d5b9af6_p_405\" class=\"ne-p\"><br></p><ol class=\"ne-ol\"><li id=\"02e6cd78bc001103d377d6728429d03a_li_154\"><span class=\"ne-text\">等待直到 </span><strong><em><span class=\"ne-text\">stream</span></em></strong><span class=\"ne-text\"> 返回一个数据</span></li></ol><ol start=\"2\" class=\"ne-ol\"><li id=\"b09279b1a47859c882e2912eb79948cb_li_155\"><span class=\"ne-text\">使用 </span><code class=\"ne-code\"><span class=\"ne-text\">stream</span></code><span class=\"ne-text\"> 返回的参数 执行 </span><code class=\"ne-code\"><span class=\"ne-text\">for</span></code><span class=\"ne-text\"> 循环代码，</span></li></ol><ol start=\"3\" class=\"ne-ol\"><li id=\"4fd938f5b276c0369596024ae825c1a8_li_156\"><span class=\"ne-text\">重复执行 </span><code class=\"ne-code\"><span class=\"ne-text\">1</span></code><span class=\"ne-text\"> 和 </span><code class=\"ne-code\"><span class=\"ne-text\">2</span></code><span class=\"ne-text\"> 直到 </span><code class=\"ne-code\"><span class=\"ne-text\">stream</span></code><span class=\"ne-text\"> 数据返回完毕。</span></li></ol><p id=\"e9a28ff0731eac4634a04d7806631887_p_406\" class=\"ne-p\"><br></p><p id=\"09a095d90cc4e33c167773dae3555a94_p_407\" class=\"ne-p\"><span class=\"ne-text\"> 使用 </span><code class=\"ne-code\"><span class=\"ne-text\">break</span></code><span class=\"ne-text\"> 或者 </span><code class=\"ne-code\"><span class=\"ne-text\">return</span></code><span class=\"ne-text\"> 语句可以 停止接收 </span><code class=\"ne-code\"><span class=\"ne-text\">stream</span></code><span class=\"ne-text\"> 的数据， 这样就跳出了 </span><code class=\"ne-code\"><span class=\"ne-text\">for</span></code><span class=\"ne-text\"> 循环并且 从 </span><code class=\"ne-code\"><span class=\"ne-text\">stream</span></code><span class=\"ne-text\"> 上取消注册了。</span></p><p id=\"a8e8a9fdbb78dc34d8754b54c6a29353_p_408\" class=\"ne-p\"><br></p><p id=\"e5e9f5ad0b309d0df8e47b9336349a59_p_409\" class=\"ne-p\"><strong><span class=\"ne-text\">如果异步 </span></strong><code class=\"ne-code\"><strong><span class=\"ne-text\">for</span></strong></code><strong><span class=\"ne-text\"> 循环不能正常工作， 确保是在一个 </span></strong><code class=\"ne-code\"><strong><span class=\"ne-text\">async</span></strong></code><strong><span class=\"ne-text\"> 方法中使用。</span></strong><span class=\"ne-text\"> 例如，要想在 </span><code class=\"ne-code\"><span class=\"ne-text\">main()</span></code><span class=\"ne-text\"> 方法中使用异步 </span><code class=\"ne-code\"><span class=\"ne-text\">for</span></code><span class=\"ne-text\"> 循环，则需要把 </span><code class=\"ne-code\"><span class=\"ne-text\">main()</span></code><span class=\"ne-text\"> 方法的函数体标记为 </span><code class=\"ne-code\"><span class=\"ne-text\">async</span></code><span class=\"ne-text\">：</span></p><p id=\"496606b332d817f291c7281922d97bf1_p_410\" class=\"ne-p\"><br></p><pre data-language=\"dart\" id=\"6edc6f01\" class=\"ne-codeblock language-dart\">main() async {\n  ...\n  await for (var request in requestServer) {\n    handleRequest(request);\n  }\n  ...\n}</pre></div>",
  "body": "<a name=\"a2578a9d\"></a>\n# Dart语言入门教程\n\n[**官方网站：https://dart.dev/**](https://dart.dev/)\n\n[**中文网站：http://dart.goodev.org/**](http://dart.goodev.org/)\n\n<a name=\"63554eb7\"></a>\n## 一、 安装\n\n获取 `dart SDK`\n\n```bash\n// 稳定版\nbrew tap dart-lang/dart\nbrew install dart\n```\n\n```bash\n// 最新版\nbrew install dart --devel\n```\n\n```bash\n// 升级\nbrew upgrade dart\n```\n\n```bash\n// 安装稳定版\nbrew unlink dart\nbrew install dart\n```\n\n```bash\n// 安装最新版\nbrew upgrade --force dart -- --level\n```\n\n```bash\n// 查看版本\nbrew info dart\n```\n\n<a name=\"4e1cfe64\"></a>\n## 二、 介绍\n\n`main` 方法：程序入口\n\n`print` 方法：可以在控制台输出内容\n\n<a name=\"93d6d18f\"></a>\n## 三、 变量与常量\n\n<a name=\"a15d0d16\"></a>\n### 3.1 变量\n\n使用 `var` 声明变量，可赋予不同类型的值。\n\n未初始化时，默认值为 `null`。\n\n使用 `final` 关键字声明一个只能赋值一次的变量。\n\n<a name=\"a2c425db\"></a>\n### 3.2 常量\n\n使用 `const` 声明常量\n\n使用 `const` 声明的必须是编译器的常量 `=&gt;` 在编译阶段就可以确定它的值\n\n<a name=\"b6691530\"></a>\n## 四、 数据类型\n\n<a name=\"23be9bf8\"></a>\n### 4.1 数值型：`Number` (简写：`num`)\n\n- 子类型：\n\n1. 整型 `Int`\n2. 浮点型 `double`\n\n- 数值型操作：\n\n**运算符：** `+`、`-`、`*`、`/`、`～/`(**取整**)、`%`(**取余**)\n\n**常用属性：** `isNaN` (**是否是非数字**)、`isEven` (**是否是偶数**)、`isOdd` (**是否是奇数**)\n\n**常用方法：**\n\n 1. `abs()` 绝对值\n\n 2. `round()` 四舍五入\n\n 3. `floor()` 取不大于它的整数，向下取整\n\n 4. `ceil()` 取不小于于它的整数，向上取整\n\n 5. `toInt()` 浮点型转整形\n\n 6. `toDouble()` 整形转浮点型\n\n**注意:** `0.0 /0.0 => NAN`\n\n<a name=\"d0c6a326\"></a>\n### 4.2 字符串：`String`\n\n- 字符串的使用\n\n1. 使用单引号，双引号创建字符串\n2. 使用三个引号或双引号创建多行字符串\n3. 使用 `r` 创建原始 `raw` 字符串. `=&gt;`\n\n```dart\nString str = 'Hello \\n World!';\nprint(str); // 输出换行形式的 Hello World\n\nString str1 = r'Hello \\n World!';\nprint(str1); // 输出 Hello \\n World\n```\n\n- 字符串操作\n\n**运算符:** `+`、`*`(**重复次数**)、`==`、`[]`(**取字符**)\n\n**插值表达式：** `${expression}`\n\n```dart\nint a = 1;\nint b = 2;\nprint('a + b = ${a + b}');\nprint('a=$a');\n```\n\n**常用属性**：`length`、`isEmpty`、`isNotEmpty`\n\n**常用方法**：\n\n1、`contains()`(是否包含)\n\n2、`subString()`(截取一段字符串，参数1:开始位置；参数2:结束位置(不包括))\n\n3、`startsWith()`(是否以一个字符串开头)\n\n4、`endsWith()`(是否以一个字符串结尾)\n\n5、`indexOf()`(是否包含一个字符，返回这个字符的下标)\n\n6、`lastIndexOf()`(是否包含一个字符，倒序返回这个字符的下标)\n\n7、`toLowerCase()`(转换小写)\n\n8、`toUpperCase()`(转换大写)\n\n9、`trim()`(截取空格)\n\n10、`trimLeft()`(截取左边空格)\n\n11、`trimRight()`(截取右边空格)\n\n12、`split()`(分割字符串)\n\n13、`replaceXXX()`(替换)\n\n<a name=\"8ca0f9f4\"></a>\n### 4.3 布尔型：`Boolean`\n\n<a name=\"7a6f4b82\"></a>\n### 4.4 列表：`List`\n\n- `**List**`**(数组)的创建**\n\n**创建 **`**List**`**：**\n\n```dart\nvar list = [1, 2, 3];\n```\n\n**创建不可变的 List：**\n\n```dart\nvar list = const [1, 2, 3];\n```\n\n**构造创建：**\n\n```dart\nvar list = new List();\n```\n\n- **常用操作**\n\n`[].length`\n\n`add()`、`insert()` **用来添加元素**\n\n`remove()`、`clear()` **用来删除元素，其中 **`**clear**`** 是清空整个 **`**list**`\n\n`indexOf()`、`lastIndexOf` **获取 **`**list**`** 中元素的位置**\n\n`sort()` **排序，可以传递参数，参数是要传递的方法，默认按照 **`**ASCII**`** 码来进行排序。**\n\n`sublist()` **获取子 **`**list**`\n\n`shuffle()` **打乱(随机打乱 )**\n\n`asMap()`  **将 **`**list**`** 转换为 **`**map**`\n\n`forEach()` **循环一个 **`**list**`**，括号中传递的是一个方法。** `list.forEach(print);`\n\n`generate` (生成集合的长度, 迭代器回调函数)**集合的生成函数**\n\n<a name=\"851523de\"></a>\n### 4.5 键值对：`Map`\n\n- `Map` 的创建\n\n> 创建 Map\n\n\n```dart\nvar language = {'first': 'Dart', 'second': 'Java'};\n```\n\n> 创建不可变 Map\n\n\n```dart\nvar language = const {'first': 'Dart', 'second': 'Java'};\n```\n\n> 构造创建\n\n\n```dart\nvar language = new Map();\n```\n\n- `Map` 常用操作\n\n1、`[].length`\n\n2、`isEmpty()`、`isNotEmpty()` **是否为空**\n\n3、`keys,values` **获取 map 所有的键和所有的值**\n\n4、`containsKey()` **是否包含某个键**\n\n5、`containsValue()` **是否包含某个值**\n\n6、`remove()` **移除某个元素**\n\n7、`forEach()` **循环，传入两个方法**\n\n```dart\nvoid main() {\n  var map = {'first': 'Dart', 'Second': 'Java', 'Third': 'Python'};\n  map.forEach(f);\n}\nvoid f(key, value) {\n  print(\"key=$key, value=$value\");\n}\n```\n\n8、 `map()` `**map**`** 的遍历方式，接受一个回调函数作为参数，返回一个新 **`**map**`\n\n```dart\nvoid main() {\n    Map age = {\"zhangsan\": 18, \"lisi\": 20};\n    Map age2 = age.map(f);\n    print(age2); // {18: \"zhangsan\", 20: \"lisi\"};\n}\nMapEntry f(k, v) {\n    return MapEntry(v, k); // 调换 k, v 的值\n}\n```\n\n<a name=\"24728d0d\"></a>\n### 4.6 `Runes, Symbols`\n\n<a name=\"8dfe3165\"></a>\n### 4.7 `dynamic =&gt`; 动态类型\n\n```dart\nvoid main() {\n  var list = new List<dynamic>();\n  list.add(1);\n  list.add(\"hello\");\n  list.add(true);\n  print(list);\n}\n```\n\n<a name=\"8e7deab9\"></a>\n### 4.8 `dynamic, var, Object` 的区别\n\n_dynamic_ 是动态类型，如果使用其声明一种类型，则仍旧可以为其声明另一种类型；通常不直接使用。\n\n_var_ 是关键字，如果使用其声明一种类型，不可为其声明另一种类型，但可改变同类型的值；\n\n_Obejct_ 是基类，用其声明的变量只能使用 _**Object**_ 类所提供的方法\n\n<a name=\"b47821f1\"></a>\n## 五、 运算符\n\n<a name=\"014f3b72\"></a>\n### 5.1 算数运算符\n\n- **加减乘除**: `+`，`-`，`*`，`/`，`～/`，`%`。\n- **递增递减:** ·`++var`，`var++`，`--var`，`var--`。\n\n<a name=\"7f1403d6\"></a>\n### 5.2 关系运算符\n\n- **运算符:** `==`，`!=`，`>`，`<`，`>=`，`<=`\n- **判断内容是否相同使用 **`**==**`\n\n<a name=\"10766857\"></a>\n### 5.3 逻辑运算符\n\n- **运算符：** `!`，`&&`，`||`\n- **针对布尔类型运算**\n\n<a name=\"34b8e337\"></a>\n### 5.4 赋值运算符\n\n- **基础运算符：** `=`，`??=`**(如果左边的变量没有值，就将右侧的值赋给它；如果左边变量有值，右边的值无效。)**\n- **复合运算符：**`+=`，`-=`，`*=`，`/=`，`%=`，`~/=`\n\n<a name=\"b18b30d3\"></a>\n### 5.5 条件表达式\n\n- **三目运算符：** `condition ? expr1 : expr2`\n- `**??**`**运算符：** `expr1 ?? expr2`(**如果第一个表达式为空，则使用第二个表达式，否则直接使用第一个表达式的值.**)\n\n<a name=\"bd3fc3e3\"></a>\n## 六、 控制流语句\n\n<a name=\"22af5e7e\"></a>\n### 6.1 条件语句\n\n- **if语句**\n- **if...else if 语句**\n- **if...else if...else 语句**\n\n<a name=\"2d6cdeb7\"></a>\n### 6.2 循环语句\n\n- **for循环**\n- **for...in 循环**\n- **while循环**\n- **do...while 循环**\n- **break 和 continue**\n   - **break 用于终止循环**\n   - **continue 用于跳出当前循环**\n- **switch...case 语句**\n   - **比较类型:** **num, String, 编译器常量, 对象, 枚举**\n   - **非空 case 必须有一个 break**\n   - **default 关键字来处理默认情况**\n   - **continue 跳转标签**\n\n<a name=\"1a05b0c4\"></a>\n## 七、 方法\n\n<a name=\"11ad6452\"></a>\n### 7.1 方法定义\n\n**方法定义：**\n\n```\n返回类型 方法名 (参数1，参数2 ...) {\n    方法体\n    return 返回值\n}\n```\n\n**方法特性：**\n\n`1、` 方法也是对象，并且有具体类型 `Function`。\n\n`2、` 返回值类型，参数类型都可以省略。\n\n`3、` 箭头语法：`=> expr` 是 `{return expr;}`缩写。只适用于 **一个表达式**。\n\n`4、` 方法都有返回值。如果没有指定，默认 `return null` 最后一句执行。\n\n<a name=\"a73dcf54\"></a>\n### 7.2 可选参数\n\n- 可选命名参数：`{param1, param2, ...}`\n\n```dart\nvoid main() {\n  printPerson(\"张三\");// name=张三, age=null, gender=null\n  printPerson(\"张三\", age: 20); // name=张三, age=20, gender=null\n  printPerson(\"张三\", age: 20, gender: \"Male\"); // name=张三, age=20, gender=\"Male\"\n  printPerson(\"张三\", gender: \"Male\"); // name=张三, age=null, gender=\"Male\"\n}\n\nprintPerson(String name, { int age, String gender }) {\n  print('name=$name, age=$age, gender=$gender'); \n}\n```\n\n- 可选位置参数：`[param1, param2, ...]`\n\n```dart\nvoid main() {\n  printPerson(\"李四\");// name=李四, age=null, gender=null\n  printPerson(\"李四\", 18);// name=李四, age=18, gender=null\n  printPerson(\"李四\", 18, \"男\"); // name=李四, age=18, gender=男\n}\n\nprintPerson(String name, [int age, String gender]) {\n  print('name=$name, age=$age, gender=$gender');\n}\n```\n\n- 如果存在具体参数，可选参数声明，必须在参数后面\n\n<a name=\"3d374fc1\"></a>\n### 7.3 默认参数值\n\n- 使用 `=` 在 **可选参数** 指定默认值\n\n```dart\nvoid main() {\n  printPerson(\"张三\"); // name=张三, age=30, gender=女\n  printPerson(\"张三\", age: 20); // name=张三, age=20, gender=女\n  printPerson(\"张三\", gender: \"男\"); // name=张三, age=30, gender=男\n}\n\nprintPerson(String name, { int age = 30, String gender = \"女\" }) {\n  print('name=$name, age=$age, gender=$gender');\n}\n```\n\n- 默认值只能是编译时常量\n\n<a name=\"da4cf90f\"></a>\n### 7.4 方法对象\n\n- 方法可以作为对象赋值给其它变量\n\n```dart\nvoid main() {\n  // var func = printHello;\n  Function func = printHello;\n  func();\n}\n\nvoid printHello() {\n  print(\"Hello\");\n}\n```\n\n- 方法可作为参数传递给其它方法\n\n```dart\nvoid main() {\n  var list = [1, 2, 3, 4];\n  list.forEach(print);\n}\n\n// 或者\nvoid main() {\n  var list1 = [\"h\", \"e\", \"l\", \"l\", \"o\"];\n  print(listTimes(list1, times));\n}\n\nList listTimes(List list, String f(str)) {\n  for(var index = 0; index < list.length; index++) {\n    list[index] = f(list[index]);\n  }\n  return list;\n}\n\nString times(str) {\n  return str * 3;\n}\n```\n\n<a name=\"588eca3a\"></a>\n### 7.5 匿名方法\n\n如何定义：\n\n```dart\n(参数1，参数2，...) {\n    方法体...\n    return 返回值\n}\n```\n\n匿名方法的特性：\n\n- 可赋值给变量，通过变量进行调用\n\n```dart\nvoid main() {\n  // 第一种\n  var func = (str) {\n    print(\"Hello---$str\");\n  };\n  func(30);\n  // 第二种\n  (() {\n      print(\"Test\");\n  })()\n}\n```\n\n- 可在其它方法中直接调用或传递给其它方法\n\n```dart\nvoid main() {\n  var list1 = [\"h\", \"e\", \"l\", \"l\", \"o\"];\n  var result = listTimes(list1, (str) {return str * 3;});\n  // var result = listTimes(list1, (str) => str * 3);\n  print(result);\n}\n\nList listTimes(List list, f(str)) {\n  for(var index = 0; index < list.length; index++) {\n    list[index] = f(list[index]);\n  }\n  return list;\n}\n```\n\n```dart\nvoid main() {\n  var list2 = [\"h\", \"e\", \"l\", \"l\", \"o\"];\n  print(listTimes2(list2));\n}\nList listTimes2(List list) {\n  var func = (str) { return str * 3; };\n  for(var i = 0; i < list.length; i++) {\n    list[i] = func(list[i]);\n  }\n  return list;\n}\n```\n\n注意：匿名方法不能直接定义在外面\n\n<a name=\"7a56f110\"></a>\n### 7.6 闭包\n\n- 闭包是一个方法(对象)\n- 闭包定义在其它方法内部\n- 闭包能够访问外部方法内的局部变量，并持有其状态\n\n```dart\nvoid main() {\n  var func = a();\n  func();\n  func();\n  func();\n  func();\n}\na() {\n  int count = 0;\n  printCount() {\n    print(count++);\n  };\n  return printCount;\n}\n```\n\n```dart\n// 使用匿名方法的闭包\nvoid main() {\n  var func = a();\n  func();\n  func();\n  func();\n  func();\n}\n\na() {\n  int count = 0;\n  return () {\n    print(count++);\n  };\n}\n```\n\n<a name=\"0e7e494d\"></a>\n## 八、 `Dart` 面向对象编程\n\n<a name=\"842be82b\"></a>\n### 8.1 类于对象\n\n1. 使用关键字 `class` 声明一个类\n2. 使用关键字 `new` 创建一个对象，`new` 可省略\n3. 所有对象都继承于 `Object` 类型\n\n<a name=\"8cadb31c\"></a>\n### 8.2 属性和方法\n\n1. 属性默认会生成 `getter` 和 `setter` 方法\n2. 使用 `final` 声明的属性只有 `getter` 方法（只可读不可写）\n3. 属性和方法是通过 `.` 访问\n4. 方法不能被重栽\n\n<a name=\"bb4c9d85\"></a>\n### 8.3 类及成员可见性\n\n1. `Dart` 中的可见性是以 `library(库)` 为单位\n2. 默认情况下，每一个 `Dart` 文件就是一个库\n3. 使用 `_` 表示库的私有性\n\n```dart\n// person.dart\nclass _Person {\n  String name;\n  int age;\n  // final String address;\n\n  void work() {\n    print(\"name is $name, age is $age\");\n  }\n}\n\n// class_and_object.dart\nimport 'person.dart';\n\nvoid main() {\n  // var person = new Person();\n  var person = _Person(); // error\n  person.name = \"Tom\";\n  person.age = 20;\n  print(person.name); \n  person.work();\n\n  // print(person.address);\n}\n```\n\n4. 使用 _**import**_ 导入库\n\n<a name=\"3d0dd0b5\"></a>\n### 8.4 计算属性\n\n1. 顾名思义，计算属性的值是通过计算而来，本身不存储值\n2. 计算属性赋值，其实是通过计算转换到其它实例变量\n\n```dart\nvoid main() {\n  var rect = new Rectangle();\n  rect.width = 10;\n  rect.height = 20;\n  print(rect.area); // 200;\n  \n  // 已知面积求宽度\n  rect.area = 200;\n  print(rect.width); // 10.0\n}\n\nclass Rectangle {\n  num width, height;\n  // 获取计算属性的值\n  num get area => width * height;\n  // num get area {\n  //   return width * height;\n  // }\n  // 设置计算属性值\n  set area(value){\n    width = value / 20;\n  }\n}\n```\n\n<a name=\"34a314fc\"></a>\n### 8.5 构造方法\n\n1. 如果没有自定义构造方法，则会有个默认构造方法\n2. 如果存在自定义构造方法，则默认构造方法无效\n\n```dart\nvoid main() {\n  var person = new Person(\"Tom\", 20);\n}\nclass Person {\n  String name;\n  int age;\n\n  // final String gender;\n  Person(String name, int age) {\n    this.name = name;\n    this.age = age;\n  }\n  void work() {\n    print(\"work...\");\n  }\n}\n```\n\n**语法糖**：在构造方法执行之前对属性进行赋值\n\n```dart\nvoid main() {\n  var person = new Person(\"Tom\", 20, \"Male\");\n}\nclass Person {\n  String name;\n  int age;\n\n  final String gender;\n  Person(this.name, this.age, this.gender); // 语法糖\n  void work() {\n    print(\"work...\");\n  }\n}\n```\n\n3. 构造方法不能重载\n\n<a name=\"28dec681\"></a>\n### 8.6 命名构造方法\n\n1. 使用命名构造方法，可以实现多个构造方法\n2. 使用 **类名.方法** 的形式实现\n\n```dart\nvoid main() {\n  var person = new Person.width(\"Tom\");\n}\nclass Person {\n  String name;\n  Person.width(String name) {\n    this.name = name;\n  }\n  void work() {\n    print(\"work...\");\n  }\n}\n```\n\n<a name=\"d6b162f0\"></a>\n### 8.7 常量构造方法\n\n1. 如果类是不可变状态，可以把对象定义为编译时常量\n2. 使用 `const` 声明构造方法，并且所有变量都为 `fianl`\n3. 使用 `const` 声明对象，可以省略\n\n```dart\nvoid main() {\n  // const person = const Person(\"张三\", 20, \"Male\");\n  const person = Person(\"张三\", 20, \"Male\");\n}\n\nclass Person {\n  final String name;\n  final int age;\n  final String gender;\n  const Person(this.name, this.age, this.gender);\n  void work() {\n    print(\"work\");\n  }\n}\n```\n\n<a name=\"1b266566\"></a>\n### 8.8 工厂构造方法\n\n1. 工厂构造方法类似于设计模式中的工厂模式\n2. 在构造方法前添加关键字 `factory` 实现一个工厂构造方法\n3. 在工厂构造方法中可返回对象\n\n```dart\nclass Logger {\n  final String name;\n  static final Map<String, Logger> _cache = <String, Logger> {};\n\n  factory Logger(String name) {\n    return Logger._internal('Dart'); // 可以返回\n  }\n  Logger._internal(this.name);\n  void log(String msg) {\n    print(msg);\n  }\n}\n```\n\n- _**命名工厂构造方法**_（_**factory 类名.方法名**_）\n\n它可以有返回值，而且不需要将类的 _**final**_ 变量作为参数，是提供一种灵活获取类对象的方式\n\n```dart\nclass Student {\n  factory Student._stu(Student stu) {\n    return Student(stu._school, stu.name, stu.age);\n  }\n}\n```\n\n<a name=\"2da81770\"></a>\n### 8.9 初始化列表常用于设置 (`fianl` 变量的值)\n\n1. 初始化列表会在构造方法体执行之前执行\n2. 使用逗号分隔初始化表达式\n3. 初始化列表常用于设置 `final` 变量的值\n\n```dart\nvoid main() {\n  var person = new Person(\"Tom\", 20, \"Male\");\n}\nclass Person {\n  String name;\n  int age;\n  final String gender;\n\n  Person(this.name, this.age, this.gender);\n  // 初始化列表\n  Person.withMap(Map map): gender = map[\"gender\"] {\n    this.name = map[\"name\"];\n    this.age = map[\"age\"];\n  }\n  // 或者\n  Person.withMap1(Map map): name = map[\"name\"], age = map[\"age\"], gender = map[\"gender\"];\n  void work() {\n    print(\"work\");\n  }\n}\n```\n\n<a name=\"0ce482f2\"></a>\n### 8.10 静态成员\n\n1. 使用 `static` 关键字来实现类级别的变量和函数（不再属于对象级别）\n2. 静态成员不能访问非静态成员，非静态成员可以访问静态成员\n3. 类中的常量需要使用 `static const` 声明\n\n```dart\nvoid main() {\n  var page = new Page();\n  // page.scrollDown();\n  Page.scrollDown();\n}\nclass Page {\n  // 添加常量\n  static const int maxAge = 10;\n  \n  static int currentPage = 1;\n  static void scrollDown() {\n    currentPage = 1;\n    print(\"scrollDown\");\n  }\n  void scrollUp() {\n    currentPage++;\n    print(\"scrollUp\");\n  }\n}\n```\n\n<a name=\"539800c4\"></a>\n### 8.11 对象操作符\n\n1. 条件成员访问：`?.`（如果该操作符前边不为空，则继续向后执行，否则不继续执行）\n2. 类型转换：`as`\n\n```dart\nvoid main() {\n  var person;\n  person = \"\";\n  person = new Person();\n  (person as Person).work();\n}\nclass Person {\n  String name;\n  int age;\n  void work() {\n    print(\"work...\"); \n  }\n}\n```\n\n3. 是否指定类型：`is`，`is!`\n\n```dart\nvoid main() {\n  var person;\n  person = \"\";\n  person = new Person();\n  if(person is Person) {\n    person.work();\n  }\n}\nclass Person {\n  String name;\n  int age;\n  void work() {\n    print(\"work...\"); \n  }\n}\n```\n\n4. 级联操作：`..`\n\n```dart\nvoid main() {\n  var person = new Person();\n  person..name = \"Tom\" ..age = 20 ..work();\n  // 等价于\n  person.name = \"Tom\";\n  person.age = 20;\n  person.work();\n}\nclass Person {\n  String name;\n  int age;\n  void work() {\n    print(\"work...\"); \n  }\n}\n```\n\n<a name=\"a3818357\"></a>\n### 8.11 对象 `call` 方法\n\n- 如果类实现了 `call()` 方法，则该类的对象可以作为方法使用\n\n```dart\nvoid main() {\n  var person = new Person();\n  // person(\"张三\", 30);\n  print(person(\"张三\", 30));\n}\nclass Person {\n  String name;\n  int age;\n  // void call(String name, int age) {\n  //   print(\"Name is $name, Age is $age\");\n  // }\n  String call(String name, int age) {\n    return \"Name is $name, Age is $age\";\n  }\n}\n```\n\n<a name=\"a58aed29\"></a>\n## 九、面向对象扩展\n\n- 继承，继承中的构造方法\n- 抽象类\n- 接口\n- `Mixins`，操作符的覆写（操作符/运算符重载）\n\n<a name=\"cd14c6c5\"></a>\n### 9.1 继承\n\n1. 使用关键字 `extends` 继承一个类\n2. 子类会继承父类可见的属性和方法（私有属性无法继承），不会继承构造方法\n3. 子类能够复写父类的方法、`getter` 和 `setter`\n4. 单继承，多态性（例如可以重写 `toString` 方法）\n\n```dart\n// person.dart\nclass Person {\n  String name;\n  int age;\n  String _birthday;\n  bool get isAudit => age > 10;\n  void run() {\n    print(\"Person run\");\n  }\n}\n```\n\n- [_**@override **_](/override )_** **_ 表示下面的计算属性或方法是从父类中复写过来的，并不是自己的\n- `**super.run();**`  `_**super**_` 表示在子类中调用父类的方法，相当于 `_**this**_`\n\n```dart\n// student.dart\nimport \"person.dart\";\n\nvoid main() {\n  var student = new Student();\n  student.study();\n  student.name = \"Tom\";\n  student.age = 16;\n  print(student.isAudit);\n  student.run();\n}\nclass Student extends Person {\n  void study() {\n    print(\"Student study...\"); \n  }\n  // @override 表示下面的计算属性或方法是从父类中复写过来的，并不是自己的\n  @override\n  bool get isAudit => age > 15;\n\n  @override\n  void run() {\n    // super.run(); // super表示在子类中调用父类的方法 \n    print(\"Student run...\");\n  }\n}\n```\n\n- 多态\n\n```dart\n// 子类的实例可以赋值给父类的一个应用\nvoid main() {\n    Person person = new Student();\n    if(person is Student) {\n      person.study();\n    }\n}\n```\n\n<a name=\"0b9e8a5f\"></a>\n### 9.2 继承中的构造方法\n\n- 继承中的构造方法\n\n1. 子类中的构造方法默认会调用父类的无名无参的构造方法\n2. 如果父类没有无名无参的构造方法，则需要显示调用父类构造方法\n3. 在构造方法参数后使用 `:` 显示调用父类构造方法\n\n```dart\nvoid main() {\n  var student = new Student(\"Tom\");\n  print(student.name);\n}\nclass Person {\n  String name;\n  Person(this.name);\n  Person.withName(this.name);\n}\nclass Student extends Person {\n  int age;\n\n//  Student(String name) : super(name);\n  Student(String name) : super.withName(name);\n}\n```\n\n- 构造方法的执行顺序\n\n1. 父类的构造方法在子类构造方法体开始执行的位置调用\n2. 如果有初始化列表，初始化列表会在父类构造方法之前执行\n\n```dart\nvoid main() {\n  var student = new Student(\"Tom\", \"Male\");\n  print(student.name);\n}\nclass Person {\n  String name;\n  Person(this.name);\n  Person.withName(this.name);\n}\nclass Student extends Person {\n  int age;\n  final String gender;\n//  Student(String name) : super(name);\n  // 初始化列表必须放在显示调用父类构造方法的前面\n  Student(String name, String genderName) : gender = genderName, super.withName(name);\n}\n```\n\n<a name=\"7fc58712\"></a>\n### 9.3 抽象类\n\n1. 抽象类使用关键字 `abstract` 表示，不能直接被实例化\n2. 抽象方法不用 `abstract` 修饰，无实现\n3. 抽象类可以没有抽象方法\n4. 有抽象方法的类一定得声明为抽象类\n\n抽象类更多用来作为接口使用\n\n```dart\nvoid main() {\n  var person = new Student();\n  person.run();\n}\nabstract class Person {\n  void run();\n}\nclass Student extends Person {\n  @override\n  void run() {\n    print(\"run...\");\n  }\n}\n```\n\n<a name=\"08f04307\"></a>\n### 9.4 接口\n\n1. 在 `dart` 中，类和接口是统一的，类就是接口\n2. 每个类都隐式的定义了一个包含所有实例成员的接口\n3. 如果是复用已有类的实现，使用继承（`extends`）\n4. 如果只是使用已有类的外在行为(一些行为)，则使用接口（`implements`）\n\n```dart\nvoid main() {\n  var student = new Student();\n}\nclass Person {\n  String name;\n  int get age => 18;\n  void run() {\n    print(\"Person run...\");\n  }\n}\nclass Student implements Person {\n  @override\n  String name;\n\n  @override\n  // TODO: implement age\n  int get age => 15;\n\n  @override\n  void run() {\n    // TODO: implement run\n  }\n}\n```\n\n- 更好的写法，利用抽象类\n\n```dart\nvoid main() {\n  var student = new Student();\n  student.run();\n}\nabstract class Person {\n  void run();\n}\nclass Student implements Person {\n  @override\n  void run() {\n    print(\"Student run...\");\n  }\n}\n```\n\n<a name=\"cc3f95f0\"></a>\n### 9.5 `Mixins`\n\n1. `Mixins` 类似于多继承，是在多类继承中重用一个类代码的方式\n\n```dart\nvoid main() {\n  var d = new D();\n  d.a();\n  d.b();\n  d.c();\n}\n\nclass A {\n  void a() {\n    print(\"A.a()...\");\n  }\n}\nclass B {\n  void a() {\n    print(\"B.a()...\");\n  }\n  void b() {\n    print(\"B.b()...\");\n  }\n}\nclass C {\n  void a() {\n    print(\"C.a()...\");\n  }\n  void b() {\n    print(\"C.b()...\");\n  }\n  void c() {\n    print(\"C.c()...\");\n  }\n}\n// 必须先有继承，才能使用 Mixins；如果使用 Mixins 的几个类中有相同的方法，则处于最后一个的方法优先被调用\nclass D extends A with B, C {\n\n}\n```\n\n2. 作为 `Mixin` 的类不能有显示声明构造方法\n3. 作为 `Mixin` 的类只能继承自 `Object`\n4. 使用关键字 `with` 连接一个或多个 `Mixin`\n\n如果是由其它类组装而来的，没有自己的属性或方法，则可以简写\n\n```dart\nvoid main() {\n\n}\nabstract class Engine {\n  void work();\n}\nclass OilEngine implements Engine {\n  @override\n  void work() {\n    print(\"Work with qil...\");\n  }\n}\nclass ElectricEngine implements Engine {\n  @override\n  void work() {\n    print(\"Work with electric...\");\n  }\n}\nclass Tyre {\n  String name;\n  void run() {}\n}\n// 如果是由其它类组装而来的，没有自己的属性或方法，则可以简写\nclass Car = Tyre with ElectricEngine;\n// 完整写法\n//class Car extends Tyre with ElectricEngine {}\nclass Bus = Tyre with OilEngine;\n```\n\n<a name=\"13db85ad\"></a>\n### 9.6 操作符覆写(重载运算符/运算符重载)\n\n1. 覆写操作符需要在类中定义\n\n```dart\n返回类型 operator 操作符 (参数1, 参数2, ...) {\n    实现体...\n    return 返回值\n}\n```\n\n2. 如果覆写 `==` ，还需要覆写对象的 `hashCode` `getter` 方法\n3. 可覆写的操作符\n| _**<**_ | _**+**_ | _**&#124;**_ | _**[]**_ |\n| --- | --- | --- | --- |\n| _**>**_ | _**/**_ | _**^**_ | _**[]=**_ |\n| _**<=**_ | _**~/**_ | _**&**_ | _**~**_ |\n| _**>=**_ | _*****_ | _**<<**_ | _**==**_ |\n| _**-**_ | _**%**_ | >> |  |\n\n\n```dart\nvoid main() {\n  var person1 = new Person(18);\n  var person2 = new Person(20);\n  var person3 = new Person(20);\n  print(person1 > person2);\n  print(person1[\"age\"]);\n  print(person2 == person3);\n}\n\nclass Person {\n  int age;\n  Person(this.age);\n\n  // 覆写 >\n  bool operator >(Person person) {\n    return this.age > person.age;\n  }\n  // 覆写 []\n  int operator [](String str) {\n    if(\"age\" == str) {\n      return age;\n    }\n    return 0;\n  }\n  // 覆写等号，重写hashCode，右键打开generate选项然后选择\n  @override\n  bool operator ==(Object other) =>\n      identical(this, other) ||\n          other is Person &&\n              runtimeType == other.runtimeType &&\n              age == other.age;\n\n  @override\n  int get hashCode => age.hashCode;\n}\n```\n\n<a name=\"65d308b2\"></a>\n## 十、枚举\n\n- 枚举\n\n1. 枚举是一种有穷序列集的数据类型\n2. 使用关键字 `enum` 定义一个枚举\n3. 常用于代替常量，控制语句等\n\n```dart\nvoid main() {\n  var currentSeason = Season.spring;\n  print(currentSeason.index);\n  switch(currentSeason) {\n    case Season.spring:\n      print(\"1-3月\");\n      break;\n    case Season.summer:\n      print(\"4-6月\");\n      break;\n    case Season.autumn:\n      print(\"7-9月\");\n      break;\n    case Season.winter:\n      print(\"10-12月\");\n      break;\n  }\n}\nenum Season {\n  spring,\n  summer,\n  autumn,\n  winter\n}\n```\n\n- `Dart` 枚举特性\n\n1. `index` 从 `0` 开始，依次累加\n2. 不能指定原始值\n3. 不能添加方法\n\n<a name=\"8f5e2369\"></a>\n## 十一、泛型\n\n- 泛型\n\n1. `Dart` 中的类型是可选的，可使用泛型限定类型\n2. 使用泛型能够有效的减少代码重复\n\n- 泛型的使用\n\n1. 类的泛型\n\n```dart\nvoid main() {\n  var utils = new Utils<String>();\n  utils.put(\"element\");\n}\nclass Utils<T> {\n  T element;\n  void put(T element) {\n    this.element = element;\n  }\n}\n```\n\n2. 方法的泛型\n\n```dart\nvoid main() {\n  var utils = new Utils();\n  utils.put<String>(\"element\");\n}\nclass Utils {\n  void put<T>(T element) {\n    print(element);\n  }\n}\n```\n\n<a name=\"87ad53d5\"></a>\n## 十二、库\n\n- 常用库\n\n1. `Dart web` 应用通常使用 `dart:html` 库\n2. `dart:core` 库定义了 `num`, `int`, 和 `double` 类，这些类 定义一些操作数字的基础功能。\n3. 异步编程通常使用回调函数，但是 `Dart` 提供了另外的 选择： [_**Future**_](https://api.dartlang.org/stable/dart-async/Future-class.html) 和 [_**Stream**_](https://api.dartlang.org/stable/dart-async/Stream-class.html) 对象。 `Future` 和 `JavaScript` 中的 `Promise` 类似，代表在将来某个时刻会返回一个 结果。`Stream` 是一种用来获取一些列数据的方式，例如 `事件流`。 `Future`, `Stream`, 以及其他异步操作的类在 [_**dart:async**_](https://api.dartlang.org/stable/dart-async/dart-async-library.html) 库中。\n4. `Math` 库提供了常见的数学运算功能，例如 `sine` 和 `cosine`， `最大值`、`最小值等`，还有各种常量 例如 `pi` 和 `e` 等。`Math` 库中 的大部分函数都是顶级方法。导入 `dart:math` 就可以使用 `Math` 库了\n\n- 如果导入的两个库具有冲突的标识符，则可以使用库的前缀来区分\n\n```dart\nimport 'package:lib1/lib1.dart';\nimport 'package:lib2/lib2.dart' as lib2;\n// ...\nElement element1 = new Element();           // Uses Element from lib1.\nlib2.Element element2 = new lib2.Element(); // Uses Element from lib2.\n```\n\n- 导入库的一部分\n\n如果你只使用库的一部分功能，则可以选择需要导入的 内容。例如：\n\n```dart\n// Import only foo.\nimport 'package:lib1/lib1.dart' show foo;\n\n// Import all names EXCEPT foo.\nimport 'package:lib2/lib2.dart' hide foo;\n```\n\n- 延迟载入库\n\n`Deferred loading` (也称之为 `lazy loading`) 可以让应用在需要的时候再 加载库。 下面是一些使用延迟加载库的场景：\n\n- 减少 `APP` 的启动时间。\n- 执行 `A/B` 测试，例如 尝试各种算法的 不同实现。\n- 加载很少使用的功能，例如可选的屏幕和对话框。\n\n要延迟加载一个库，需要先使用 `deferred as` 来 导入：\n\n```dart\nimport 'package:deferred/hello.dart' deferred as hello;\n```\n\n当需要使用的时候，使用库标识符调用 `loadLibrary()` 函数来加载库：\n\n```dart\ngreet() async {\n  await hello.loadLibrary();\n  hello.printGreeting();\n}\n```\n\n 在前面的代码， 使用 `await` 关键字暂停代码执行一直到库加载完成。 关于 `async` 和 `await` 的更多信息请参考 [_**异步支持**_](http://dart.goodev.org/guides/language/language-tour#asynchrony-support)。\n\n 在一个库上你可以多次调用 `loadLibrary()` 函数。 但是该库只是载入一次。\n\n使用延迟加载库的时候，请注意一下问题：\n\n- 延迟加载库的常量在导入的时候是不可用的。 只有当库加载完毕的时候，库中常量才可以使用。\n- 在导入文件的时候无法使用延迟库中的类型。 如果你需要使用类型，则考虑把接口类型移动到另外一个库中， 让两个库都分别导入这个接口库。\n- _**Dart**_ 隐含的把 `loadLibrary()` 函数导入到使用 `deferred as` 的命名空间中。 `loadLibrary()` 方法返回一个 [_**Future**_](http://dart.goodev.org/guides/libraries/library-tour#future)。\n\n<a name=\"be7a8956\"></a>\n## 十三、异步支持\n\n`Dart` 库中有很多返回 `Future` 或者 `Stream` 对象的方法。 这些方法是 _异步的_： 这些函数在设置完基本的操作 后就返回了， 而无需等待操作执行完成。 例如读取一个文件，在打开文件后就返回了。\n\n有两种方式可以使用 `Future` 对象中的 数据：\n\n- 使用 `async` 和 `await`\n- 使用 [_**Future API**_](http://dart.goodev.org/guides/libraries/library-tour#future)\n\n同样，从 `Stream` 中获取数据也有两种方式：\n\n- 使用 `async` 和一个 异步 `for` 循环 (`await for`)\n- 使用 [_**Stream API**_](http://dart.goodev.org/guides/libraries/library-tour#stream)\n\n**1.** 要使用 `await`，其方法必须带有 `async` 关键字：\n\n```dart\ncheckVersion() async {\n  var version = await lookUpVersion();\n  if (version == expectedVersion) {\n    // Do something.\n  } else {\n    // Do something else.\n  }\n}\n```\n\n**2.** 可以使用 `try`, `catch`, 和 `finally` 来处理使用 `await` 的异常：\n\n```dart\ntry {\n  server = await HttpServer.bind(InternetAddress.LOOPBACK_IP_V4, 4044);\n} catch (e) {\n  // React to inability to bind to the port...\n}\n```\n\n<a name=\"a1db95b8\"></a>\n### 13.1 声明异步方法\n\n 一个 `async` 方法是函数体被标记为 `async` 的方法。 虽然异步方法的执行可能需要一定时间，但是 异步方法立刻返回 - 在方法体还没执行之前就返回了。\n\n```dart\ncheckVersion() async {\n  // ...\n}\n\nlookUpVersion() async => /* ... */;\n```\n\n 在一个方法上添加 `async` 关键字，则这个方法返回值为 `Future`。 例如，下面是一个返回字符串 的同步方法：\n\n```dart\nString lookUpVersionSync() => '1.0.0';\n```\n\n 如果使用 `async` 关键字，则该方法 返回一个 `Future`，并且 认为该函数是一个耗时的操作。\n\n```dart\nFuture<String> lookUpVersion() async => '1.0.0';\n```\n\n 有时候，你的算法要求调用很多异步方法，并且等待 所有方法完成后再继续执行。使用 `[Future.wait()](https://api.dartlang.org/stable/dart-async/Future/wait.html)` 这个静态函数来管理多个 `Future` 并等待所有 `Future` 执行完成。\n\n```dart\nFuture deleteDone = deleteLotsOfFiles();\nFuture copyDone = copyLotsOfFiles();\nFuture checksumDone = checksumLotsOfOtherFiles();\n\nFuture.wait([deleteDone, copyDone, checksumDone])\n    .then((List values) {\n      print('Done with all the long steps');\n    });\n```\n\n<a name=\"172c3272\"></a>\n### 13.2 使用 `await` 表达式\n\n 在一个异步方法内可以使用多次 `await` 表达式。 例如，下面的示例使用了三次 `await` 表达式 来执行相关的功能：\n\n```dart\nvar entrypoint = await findEntrypoint();\nvar exitCode = await runExecutable(entrypoint, args);\nawait flushThenExit(exitCode);\n```\n\n 在 `await expression` 中， `expression` 的返回值通常是一个 `Future`； 如果返回的值不是 `Future`，则 `Dart` 会自动把该值放到 `Future` 中返回。 `Future` 对象代表返回一个对象的承 (`promise`)。 `await expression` 执行的结果为这个返回的对象。 `await expression` 会阻塞住，直到需要的对象返回为止。\n\n**如果 **`**await**`** 无法正常使用，请确保是在一个 **`**async**`** 方法中。** 例如要在 `main()` 方法中使用 `await`， 则 `main()` 方法的函数体必须标记为 `async`：\n\n```dart\nmain() async {\n  checkVersion();\n  print('In main: version is ${await lookUpVersion()}');\n}\n```\n\n<a name=\"3f70affd\"></a>\n### 13.3 在循环中使用异步\n\n 异步 `for` 循环具有如下的形式：\n\n```dart\nawait for (variable declaration in expression) {\n  // Executes each time the stream emits a value.\n}\n```\n\n 上面 `expression` 返回的值必须是 `Stream` 类型的。 执行流程如下：\n\n1. 等待直到 _**stream**_ 返回一个数据\n2. 使用 `stream` 返回的参数 执行 `for` 循环代码，\n3. 重复执行 `1` 和 `2` 直到 `stream` 数据返回完毕。\n\n 使用 `break` 或者 `return` 语句可以 停止接收 `stream` 的数据， 这样就跳出了 `for` 循环并且 从 `stream` 上取消注册了。\n\n**如果异步 **`**for**`** 循环不能正常工作， 确保是在一个 **`**async**`** 方法中使用。** 例如，要想在 `main()` 方法中使用异步 `for` 循环，则需要把 `main()` 方法的函数体标记为 `async`：\n\n```dart\nmain() async {\n  ...\n  await for (var request in requestServer) {\n    handleRequest(request);\n  }\n  ...\n}\n```\n",
  "body_html": "<!doctype html><div class=\"lake-content\" typography=\"traditional\"><h1 id=\"a2578a9d\"><span class=\"ne-text\">Dart语言入门教程</span></h1><p id=\"0c4d068e4aede2bc9d552ce387999b01_p_4\" class=\"ne-p\"><br></p><p id=\"6705f221661db373747186fcc0d8b368_p_5\" class=\"ne-p\"><a href=\"https://dart.dev/\" data-href=\"https://dart.dev/\" target=\"_blank\" class=\"ne-link\"><strong><span class=\"ne-text\">官方网站：https://dart.dev/</span></strong></a></p><p id=\"f23fb9c519ff30bfe03d0b2cc2cac85d_p_6\" class=\"ne-p\"><br></p><p id=\"e1ae3c4cdaff9ecb8f54a69d09000e7f_p_7\" class=\"ne-p\"><a href=\"http://dart.goodev.org/\" data-href=\"http://dart.goodev.org/\" target=\"_blank\" class=\"ne-link\"><strong><span class=\"ne-text\">中文网站：http://dart.goodev.org/</span></strong></a></p><p id=\"92c8228235b93f7cc9ced6ac90fca3a6_p_8\" class=\"ne-p\"><br></p><h2 id=\"63554eb7\"><span class=\"ne-text\">一、 安装</span></h2><p id=\"eadc4ec477465f1f239730d987d394b1_p_9\" class=\"ne-p\"><br></p><p id=\"3adfce58bc38f68773194b31cdb94195_p_10\" class=\"ne-p\"><span class=\"ne-text\">获取 </span><code class=\"ne-code\"><span class=\"ne-text\">dart SDK</span></code></p><p id=\"828bea0262f636b25c97fbef525aed20_p_11\" class=\"ne-p\"><br></p><pre data-language=\"bash\" id=\"467fb524\" class=\"ne-codeblock language-bash\">// 稳定版\nbrew tap dart-lang/dart\nbrew install dart</pre><p id=\"09a2b5671cf447a1a3529d71c89cf9e1_p_12\" class=\"ne-p\"><br></p><pre data-language=\"bash\" id=\"3a0f0fc8\" class=\"ne-codeblock language-bash\">// 最新版\nbrew install dart --devel</pre><p id=\"2369fafe89fae403079018df6f36b51b_p_13\" class=\"ne-p\"><br></p><pre data-language=\"bash\" id=\"71a442ec\" class=\"ne-codeblock language-bash\">// 升级\nbrew upgrade dart</pre><p id=\"7cf79ceeaaf91ef14264b4c55c1c8c1d_p_14\" class=\"ne-p\"><br></p><pre data-language=\"bash\" id=\"9e2519f8\" class=\"ne-codeblock language-bash\">// 安装稳定版\nbrew unlink dart\nbrew install dart</pre><p id=\"c53070088aadb43ef468f61fca8ca22a_p_15\" class=\"ne-p\"><br></p><pre data-language=\"bash\" id=\"ee7c088f\" class=\"ne-codeblock language-bash\">// 安装最新版\nbrew upgrade --force dart -- --level</pre><p id=\"42752743bc6d3f9f6c928fb47989b8c2_p_16\" class=\"ne-p\"><br></p><pre data-language=\"bash\" id=\"740b9612\" class=\"ne-codeblock language-bash\">// 查看版本\nbrew info dart</pre><p id=\"c5eaf555cee01ec836fc749258c6179d_p_17\" class=\"ne-p\"><br></p><h2 id=\"4e1cfe64\"><span class=\"ne-text\">二、 介绍</span></h2><p id=\"3f8949dd5527f0c9624c3fd3faefb76f_p_18\" class=\"ne-p\"><br></p><p id=\"73aad70cb1af7691c154b98afa7c6c13_p_19\" class=\"ne-p\"><code class=\"ne-code\"><span class=\"ne-text\">main</span></code><span class=\"ne-text\"> 方法：程序入口</span></p><p id=\"db841a6e995b001085603629a3ace379_p_20\" class=\"ne-p\"><br></p><p id=\"27632d19dfb89c756ec6ef19b4b1680c_p_21\" class=\"ne-p\"><code class=\"ne-code\"><span class=\"ne-text\">print</span></code><span class=\"ne-text\"> 方法：可以在控制台输出内容</span></p><p id=\"37928cd1f32681ee4810a9ab9d3c1104_p_22\" class=\"ne-p\"><br></p><h2 id=\"93d6d18f\"><span class=\"ne-text\">三、 变量与常量</span></h2><p id=\"4547a4b65fb57fca5301c6973643450c_p_23\" class=\"ne-p\"><br></p><h3 id=\"a15d0d16\"><span class=\"ne-text\">3.1 变量</span></h3><p id=\"1f3b4b4a4867a8b756c196b38558d0c4_p_24\" class=\"ne-p\"><br></p><p id=\"078bdfad2e546716bb6d702274e69900_p_25\" class=\"ne-p\"><span class=\"ne-text\">使用 </span><code class=\"ne-code\"><span class=\"ne-text\">var</span></code><span class=\"ne-text\"> 声明变量，可赋予不同类型的值。</span></p><p id=\"b57de0a6a045efefe71d109094be9ddc_p_26\" class=\"ne-p\"><br></p><p id=\"5959332689a9fb7853abd9b3da1fd79b_p_27\" class=\"ne-p\"><span class=\"ne-text\">未初始化时，默认值为 </span><code class=\"ne-code\"><span class=\"ne-text\">null</span></code><span class=\"ne-text\">。</span></p><p id=\"d17d837b16c49a0e5c21edc18722e410_p_28\" class=\"ne-p\"><br></p><p id=\"d3f96a37df9cae0ea34ac942ae464a54_p_29\" class=\"ne-p\"><span class=\"ne-text\">使用 </span><code class=\"ne-code\"><span class=\"ne-text\">final</span></code><span class=\"ne-text\"> 关键字声明一个只能赋值一次的变量。</span></p><p id=\"d657ac1e4c3211af4f7dcea889518735_p_30\" class=\"ne-p\"><br></p><h3 id=\"a2c425db\"><span class=\"ne-text\">3.2 常量</span></h3><p id=\"e2e9b10bfede90e88bd47291199e0b55_p_31\" class=\"ne-p\"><br></p><p id=\"aa5ef4fb9dccfd710d04f9b1cd838995_p_32\" class=\"ne-p\"><span class=\"ne-text\">使用 </span><code class=\"ne-code\"><span class=\"ne-text\">const</span></code><span class=\"ne-text\"> 声明常量</span></p><p id=\"73b74e66f7d869f94eb34b57d63eae3f_p_33\" class=\"ne-p\"><br></p><p id=\"8a852428bd1d78bb205afaebe2c0a34d_p_34\" class=\"ne-p\"><span class=\"ne-text\">使用 </span><code class=\"ne-code\"><span class=\"ne-text\">const</span></code><span class=\"ne-text\"> 声明的必须是编译器的常量 </span><code class=\"ne-code\"><span class=\"ne-text\">=&amp;gt;</span></code><span class=\"ne-text\"> 在编译阶段就可以确定它的值</span></p><p id=\"86d045d193aa7ac4616d4ea50a0dc92f_p_35\" class=\"ne-p\"><br></p><h2 id=\"b6691530\"><span class=\"ne-text\">四、 数据类型</span></h2><p id=\"6f8f966688575a1f666bafa122494f73_p_36\" class=\"ne-p\"><br></p><h3 id=\"23be9bf8\"><span class=\"ne-text\">4.1 数值型：</span><code class=\"ne-code\"><span class=\"ne-text\">Number</span></code><span class=\"ne-text\"> (简写：</span><code class=\"ne-code\"><span class=\"ne-text\">num</span></code><span class=\"ne-text\">)</span></h3><p id=\"ab57135091a86c42cc63ec67ac068a45_p_37\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"84c394ea544064f7d73c652517a1814b_li_2\"><span class=\"ne-text\">子类型：</span></li></ul><p id=\"82f45866a429f6224b2e92c65bfda254_p_38\" class=\"ne-p\"><br></p><ol class=\"ne-ol\"><li id=\"ecb3a0c72e5d389dc3397371256fc038_li_3\"><span class=\"ne-text\">整型 </span><code class=\"ne-code\"><span class=\"ne-text\">Int</span></code></li></ol><ol start=\"2\" class=\"ne-ol\"><li id=\"01e024c77bff0264be5d7cf5dc145571_li_4\"><span class=\"ne-text\">浮点型 </span><code class=\"ne-code\"><span class=\"ne-text\">double</span></code></li></ol><p id=\"faade82d6cfe8ed09f505bc5d9204fda_p_39\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"cbcbcfa84a0c5e81080258b6f8249e69_li_5\"><span class=\"ne-text\">数值型操作：</span></li></ul><p id=\"17b412f9fc3ec51ada5f566f0d09108c_p_40\" class=\"ne-p\"><br></p><p id=\"7f62102a159170d36a5cb2b841901be8_p_41\" class=\"ne-p\"><strong><span class=\"ne-text\">运算符：</span></strong><span class=\"ne-text\"> </span><code class=\"ne-code\"><span class=\"ne-text\">+</span></code><span class=\"ne-text\">、</span><code class=\"ne-code\"><span class=\"ne-text\">-</span></code><span class=\"ne-text\">、</span><code class=\"ne-code\"><span class=\"ne-text\">*</span></code><span class=\"ne-text\">、</span><code class=\"ne-code\"><span class=\"ne-text\">/</span></code><span class=\"ne-text\">、</span><code class=\"ne-code\"><span class=\"ne-text\">～/</span></code><span class=\"ne-text\">(</span><strong><span class=\"ne-text\">取整</span></strong><span class=\"ne-text\">)、</span><code class=\"ne-code\"><span class=\"ne-text\">%</span></code><span class=\"ne-text\">(</span><strong><span class=\"ne-text\">取余</span></strong><span class=\"ne-text\">)</span></p><p id=\"aebb7af96a9ee3c9b7a669f28fef1d7e_p_42\" class=\"ne-p\"><br></p><p id=\"d8cb98402c8fed5051add71eaff7c1d8_p_43\" class=\"ne-p\"><strong><span class=\"ne-text\">常用属性：</span></strong><span class=\"ne-text\"> </span><code class=\"ne-code\"><span class=\"ne-text\">isNaN</span></code><span class=\"ne-text\"> (</span><strong><span class=\"ne-text\">是否是非数字</span></strong><span class=\"ne-text\">)、</span><code class=\"ne-code\"><span class=\"ne-text\">isEven</span></code><span class=\"ne-text\"> (</span><strong><span class=\"ne-text\">是否是偶数</span></strong><span class=\"ne-text\">)、</span><code class=\"ne-code\"><span class=\"ne-text\">isOdd</span></code><span class=\"ne-text\"> (</span><strong><span class=\"ne-text\">是否是奇数</span></strong><span class=\"ne-text\">)</span></p><p id=\"157b805d005afe38c7c2d5198b31ee6e_p_44\" class=\"ne-p\"><br></p><p id=\"0e61345db0c4d82610fea33ad6549618_p_45\" class=\"ne-p\"><strong><span class=\"ne-text\">常用方法：</span></strong></p><p id=\"e81b6efc8e2153cf8aa53e3b04d7f22c_p_46\" class=\"ne-p\"><br></p><p id=\"901ad89df13f1fa8b0ed7230cc4a5f20_p_47\" class=\"ne-p\"><span class=\"ne-text\"> 1. </span><code class=\"ne-code\"><span class=\"ne-text\">abs()</span></code><span class=\"ne-text\"> 绝对值</span></p><p id=\"aa95668f5a65b03373d1b0b3f9f8d3a6_p_48\" class=\"ne-p\"><br></p><p id=\"30d09586ebab31a6f06d7323c74bceba_p_49\" class=\"ne-p\"><span class=\"ne-text\"> 2. </span><code class=\"ne-code\"><span class=\"ne-text\">round()</span></code><span class=\"ne-text\"> 四舍五入</span></p><p id=\"4108a5bc411c7547dc6876b612b07f81_p_50\" class=\"ne-p\"><br></p><p id=\"7df0a2ce0c0b7778e06fe404c42899ad_p_51\" class=\"ne-p\"><span class=\"ne-text\"> 3. </span><code class=\"ne-code\"><span class=\"ne-text\">floor()</span></code><span class=\"ne-text\"> 取不大于它的整数，向下取整</span></p><p id=\"bc2359f7bb1e32241fa27f528e60a125_p_52\" class=\"ne-p\"><br></p><p id=\"7b36ba3badabb6c5f85e8b19dc8baeac_p_53\" class=\"ne-p\"><span class=\"ne-text\"> 4. </span><code class=\"ne-code\"><span class=\"ne-text\">ceil()</span></code><span class=\"ne-text\"> 取不小于于它的整数，向上取整</span></p><p id=\"e10b5c78ee7ba45f407740af88433fc9_p_54\" class=\"ne-p\"><br></p><p id=\"fc05bb753339cca5ffc6eea670440b23_p_55\" class=\"ne-p\"><span class=\"ne-text\"> 5. </span><code class=\"ne-code\"><span class=\"ne-text\">toInt()</span></code><span class=\"ne-text\"> 浮点型转整形</span></p><p id=\"a6e7204180aba568d27cc7b95d0717fd_p_56\" class=\"ne-p\"><br></p><p id=\"2685b546b5ccfd6e48aea7e4c95c24a1_p_57\" class=\"ne-p\"><span class=\"ne-text\"> 6. </span><code class=\"ne-code\"><span class=\"ne-text\">toDouble()</span></code><span class=\"ne-text\"> 整形转浮点型</span></p><p id=\"e3c9bad72638009a374744280c63ecc6_p_58\" class=\"ne-p\"><br></p><p id=\"579486377ec4151f50ec12d2813167ca_p_59\" class=\"ne-p\"><strong><span class=\"ne-text\">注意:</span></strong><span class=\"ne-text\"> </span><code class=\"ne-code\"><span class=\"ne-text\">0.0 /0.0 =&gt; NAN</span></code></p><p id=\"daa3e859dfee1b8825cb9c219dcb2526_p_60\" class=\"ne-p\"><br></p><h3 id=\"d0c6a326\"><span class=\"ne-text\">4.2 字符串：</span><code class=\"ne-code\"><span class=\"ne-text\">String</span></code></h3><p id=\"d89d8c6a729313c0d25f9b1742c0d590_p_61\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"4807df6b1158ec79afe639aac52454d6_li_6\"><span class=\"ne-text\">字符串的使用</span></li></ul><p id=\"9b034733f43578c770243b15c945bc07_p_62\" class=\"ne-p\"><br></p><ol class=\"ne-ol\"><li id=\"4f2de47ac07855b064dff5485a44e190_li_7\"><span class=\"ne-text\">使用单引号，双引号创建字符串</span></li></ol><ol start=\"2\" class=\"ne-ol\"><li id=\"48acd77122ea45a1f8180903fb4b4595_li_8\"><span class=\"ne-text\">使用三个引号或双引号创建多行字符串</span></li></ol><ol start=\"3\" class=\"ne-ol\"><li id=\"406b9e952065106e30a26d9b40c27281_li_9\"><span class=\"ne-text\">使用 </span><code class=\"ne-code\"><span class=\"ne-text\">r</span></code><span class=\"ne-text\"> 创建原始 </span><code class=\"ne-code\"><span class=\"ne-text\">raw</span></code><span class=\"ne-text\"> 字符串. </span><code class=\"ne-code\"><span class=\"ne-text\">=&amp;gt;</span></code></li></ol><p id=\"87e34965e50e2c8e31ce44a85667e8dd_p_63\" class=\"ne-p\"><br></p><pre data-language=\"dart\" id=\"ddcffe57\" class=\"ne-codeblock language-dart\">String str = 'Hello \\n World!';\nprint(str); // 输出换行形式的 Hello World\n\nString str1 = r'Hello \\n World!';\nprint(str1); // 输出 Hello \\n World</pre><p id=\"b3add770127d8c2a5064673aa8a9731f_p_64\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"50c417f6f8aacca49cb21782e8eecbd5_li_10\"><span class=\"ne-text\">字符串操作</span></li></ul><p id=\"2a81d6eed31dfd1dc3c193bbdb75c1a1_p_65\" class=\"ne-p\"><br></p><p id=\"a3b1a8ba5f5881d907725330f1388134_p_66\" class=\"ne-p\"><strong><span class=\"ne-text\">运算符:</span></strong><span class=\"ne-text\"> </span><code class=\"ne-code\"><span class=\"ne-text\">+</span></code><span class=\"ne-text\">、</span><code class=\"ne-code\"><span class=\"ne-text\">*</span></code><span class=\"ne-text\">(</span><strong><span class=\"ne-text\">重复次数</span></strong><span class=\"ne-text\">)、</span><code class=\"ne-code\"><span class=\"ne-text\">==</span></code><span class=\"ne-text\">、</span><code class=\"ne-code\"><span class=\"ne-text\">[]</span></code><span class=\"ne-text\">(</span><strong><span class=\"ne-text\">取字符</span></strong><span class=\"ne-text\">)</span></p><p id=\"152302cc03cd3433e252fd8fbe4bade7_p_67\" class=\"ne-p\"><br></p><p id=\"4c8e762298f4de42a44d7beaa8a560d7_p_68\" class=\"ne-p\"><strong><span class=\"ne-text\">插值表达式：</span></strong><span class=\"ne-text\"> </span><code class=\"ne-code\"><span class=\"ne-text\">${expression}</span></code></p><p id=\"956e0d4312e941b77cd57ec35c294aff_p_69\" class=\"ne-p\"><br></p><pre data-language=\"dart\" id=\"cebc7176\" class=\"ne-codeblock language-dart\">int a = 1;\nint b = 2;\nprint('a + b = ${a + b}');\nprint('a=$a');</pre><p id=\"67523e0fa28fe87849ce38cd391e3347_p_70\" class=\"ne-p\"><br></p><p id=\"32901d9d2241486b0f03eeb197210d43_p_71\" class=\"ne-p\"><strong><span class=\"ne-text\">常用属性</span></strong><span class=\"ne-text\">：</span><code class=\"ne-code\"><span class=\"ne-text\">length</span></code><span class=\"ne-text\">、</span><code class=\"ne-code\"><span class=\"ne-text\">isEmpty</span></code><span class=\"ne-text\">、</span><code class=\"ne-code\"><span class=\"ne-text\">isNotEmpty</span></code></p><p id=\"200b796b4b1f5a36aa12caae6b6fa3d8_p_72\" class=\"ne-p\"><br></p><p id=\"c3824fa46270d486ccc5e4bf91047513_p_73\" class=\"ne-p\"><strong><span class=\"ne-text\">常用方法</span></strong><span class=\"ne-text\">：</span></p><p id=\"d36608d2dcf9f070081537010b5adfb3_p_74\" class=\"ne-p\"><br></p><p id=\"0e112c57c86c4738545f78f11e57db61_p_75\" class=\"ne-p\"><span class=\"ne-text\">1、</span><code class=\"ne-code\"><span class=\"ne-text\">contains()</span></code><span class=\"ne-text\">(是否包含)</span></p><p id=\"391eee0f96cca26f6e7df243706d21bf_p_76\" class=\"ne-p\"><br></p><p id=\"235db49a5621c0f65445c20861a774d3_p_77\" class=\"ne-p\"><span class=\"ne-text\">2、</span><code class=\"ne-code\"><span class=\"ne-text\">subString()</span></code><span class=\"ne-text\">(截取一段字符串，参数1:开始位置；参数2:结束位置(不包括))</span></p><p id=\"f585fed1cef9af7641b65ac1c4919258_p_78\" class=\"ne-p\"><br></p><p id=\"9672958375b123e1e3a4c4e0e8c981b0_p_79\" class=\"ne-p\"><span class=\"ne-text\">3、</span><code class=\"ne-code\"><span class=\"ne-text\">startsWith()</span></code><span class=\"ne-text\">(是否以一个字符串开头)</span></p><p id=\"cacc5e28cdefa24e262c83e0ab2a3ade_p_80\" class=\"ne-p\"><br></p><p id=\"9f8e2fa2713b39a415bd142e9d26b9ae_p_81\" class=\"ne-p\"><span class=\"ne-text\">4、</span><code class=\"ne-code\"><span class=\"ne-text\">endsWith()</span></code><span class=\"ne-text\">(是否以一个字符串结尾)</span></p><p id=\"ede07f6666baf1587414d7171c5dd877_p_82\" class=\"ne-p\"><br></p><p id=\"7eac4beb2a9933bfb57148c14dfef49a_p_83\" class=\"ne-p\"><span class=\"ne-text\">5、</span><code class=\"ne-code\"><span class=\"ne-text\">indexOf()</span></code><span class=\"ne-text\">(是否包含一个字符，返回这个字符的下标)</span></p><p id=\"470257ffbff08ad0eedbc557452f8c66_p_84\" class=\"ne-p\"><br></p><p id=\"7a449560b032be8c023c2d413f18a99c_p_85\" class=\"ne-p\"><span class=\"ne-text\">6、</span><code class=\"ne-code\"><span class=\"ne-text\">lastIndexOf()</span></code><span class=\"ne-text\">(是否包含一个字符，倒序返回这个字符的下标)</span></p><p id=\"c07d4a2054239914d4a014d7d64fcf23_p_86\" class=\"ne-p\"><br></p><p id=\"65f948928283ecdcfb33599856a7a1f9_p_87\" class=\"ne-p\"><span class=\"ne-text\">7、</span><code class=\"ne-code\"><span class=\"ne-text\">toLowerCase()</span></code><span class=\"ne-text\">(转换小写)</span></p><p id=\"ac4c0d2013d04adfac6d2e9459525ac0_p_88\" class=\"ne-p\"><br></p><p id=\"c4af109e5f9e548d8aed504aa58bdf77_p_89\" class=\"ne-p\"><span class=\"ne-text\">8、</span><code class=\"ne-code\"><span class=\"ne-text\">toUpperCase()</span></code><span class=\"ne-text\">(转换大写)</span></p><p id=\"700ece5e21ebc17eb29d438c814531fe_p_90\" class=\"ne-p\"><br></p><p id=\"d240e07c3cda8763d135a158a8868d9c_p_91\" class=\"ne-p\"><span class=\"ne-text\">9、</span><code class=\"ne-code\"><span class=\"ne-text\">trim()</span></code><span class=\"ne-text\">(截取空格)</span></p><p id=\"f82a35c2fca60d6b3bdc5c1000201985_p_92\" class=\"ne-p\"><br></p><p id=\"dd4f5705532ea3e11e67d07369fd2a2a_p_93\" class=\"ne-p\"><span class=\"ne-text\">10、</span><code class=\"ne-code\"><span class=\"ne-text\">trimLeft()</span></code><span class=\"ne-text\">(截取左边空格)</span></p><p id=\"d0973d57fdd5c28d718b374e8fa011eb_p_94\" class=\"ne-p\"><br></p><p id=\"06974f7abdfcf9aad7ed34c1efb75387_p_95\" class=\"ne-p\"><span class=\"ne-text\">11、</span><code class=\"ne-code\"><span class=\"ne-text\">trimRight()</span></code><span class=\"ne-text\">(截取右边空格)</span></p><p id=\"cd1514dfedaab485e5767b166731e116_p_96\" class=\"ne-p\"><br></p><p id=\"6e6fc016839665ac1b188eebf806ce0b_p_97\" class=\"ne-p\"><span class=\"ne-text\">12、</span><code class=\"ne-code\"><span class=\"ne-text\">split()</span></code><span class=\"ne-text\">(分割字符串)</span></p><p id=\"545db91b827f87cc9afe81c0f08a1a88_p_98\" class=\"ne-p\"><br></p><p id=\"7f071668e9a71f32f4ce84b5d6d9d99e_p_99\" class=\"ne-p\"><span class=\"ne-text\">13、</span><code class=\"ne-code\"><span class=\"ne-text\">replaceXXX()</span></code><span class=\"ne-text\">(替换)</span></p><p id=\"ec69cd8d8f73ee437722723e0adf1fa7_p_100\" class=\"ne-p\"><br></p><h3 id=\"8ca0f9f4\"><span class=\"ne-text\">4.3 布尔型：</span><code class=\"ne-code\"><span class=\"ne-text\">Boolean</span></code></h3><p id=\"01884230bc631815ce050c63d5156a8c_p_101\" class=\"ne-p\"><br></p><h3 id=\"7a6f4b82\"><span class=\"ne-text\">4.4 列表：</span><code class=\"ne-code\"><span class=\"ne-text\">List</span></code></h3><p id=\"a2c2ab33193f15adcdff2e08f718d7c2_p_102\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"bbc34005924571b22b99d435b8cc5fcc_li_11\"><code class=\"ne-code\"><strong><span class=\"ne-text\">List</span></strong></code><strong><span class=\"ne-text\">(数组)的创建</span></strong></li></ul><p id=\"c4eb78622bfacec164736bf4df40fa3b_p_103\" class=\"ne-p\"><br></p><p id=\"507710bca3293fce405d2de8337463c2_p_104\" class=\"ne-p\"><strong><span class=\"ne-text\">创建 </span></strong><code class=\"ne-code\"><strong><span class=\"ne-text\">List</span></strong></code><strong><span class=\"ne-text\">：</span></strong></p><p id=\"702e00ceee7e1a86732f5fe484305638_p_105\" class=\"ne-p\"><br></p><pre data-language=\"dart\" id=\"3e45b4fd\" class=\"ne-codeblock language-dart\">var list = [1, 2, 3];</pre><p id=\"32e4b810a1a3b020b0a0d082442d55f7_p_106\" class=\"ne-p\"><br></p><p id=\"7fde13e3572576071427149c071f3106_p_107\" class=\"ne-p\"><strong><span class=\"ne-text\">创建不可变的 List：</span></strong></p><p id=\"c6ea08d82bf830d4344bc47c75959696_p_108\" class=\"ne-p\"><br></p><pre data-language=\"dart\" id=\"84ac5242\" class=\"ne-codeblock language-dart\">var list = const [1, 2, 3];</pre><p id=\"db6a3a7f6005176b48ff149f30b21edd_p_109\" class=\"ne-p\"><br></p><p id=\"2ec24553e9f1e3274c41666eb9b18f98_p_110\" class=\"ne-p\"><strong><span class=\"ne-text\">构造创建：</span></strong></p><p id=\"7df9b20b6b924d2fc8c9e5079bc8d88d_p_111\" class=\"ne-p\"><br></p><pre data-language=\"dart\" id=\"5cf82732\" class=\"ne-codeblock language-dart\">var list = new List();</pre><p id=\"91e61ff04e041e671d1cfa701fb2f0a0_p_112\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"6cdc930b0a9bcb62ff889202652ee4a2_li_12\"><strong><span class=\"ne-text\">常用操作</span></strong></li></ul><p id=\"45e36abc53ce1dcd83cb64d5bdb2b960_p_113\" class=\"ne-p\"><br></p><p id=\"fbf5c055cc27a29000dc26ca46f6a5b2_p_114\" class=\"ne-p\"><code class=\"ne-code\"><span class=\"ne-text\">[].length</span></code></p><p id=\"bdad9f83e0239c83aaf356c272a6c0ea_p_115\" class=\"ne-p\"><br></p><p id=\"ebb6bef3211e5ba4d45cddf6700eeca8_p_116\" class=\"ne-p\"><code class=\"ne-code\"><span class=\"ne-text\">add()</span></code><span class=\"ne-text\">、</span><code class=\"ne-code\"><span class=\"ne-text\">insert()</span></code><span class=\"ne-text\"> </span><strong><span class=\"ne-text\">用来添加元素</span></strong></p><p id=\"df79537d6e51b378da87648af8c34dc2_p_117\" class=\"ne-p\"><br></p><p id=\"9e1d1d94e54dab315b967eb9cca78974_p_118\" class=\"ne-p\"><code class=\"ne-code\"><span class=\"ne-text\">remove()</span></code><span class=\"ne-text\">、</span><code class=\"ne-code\"><span class=\"ne-text\">clear()</span></code><span class=\"ne-text\"> </span><strong><span class=\"ne-text\">用来删除元素，其中 </span></strong><code class=\"ne-code\"><strong><span class=\"ne-text\">clear</span></strong></code><strong><span class=\"ne-text\"> 是清空整个 </span></strong><code class=\"ne-code\"><strong><span class=\"ne-text\">list</span></strong></code></p><p id=\"649530dfe6472825a73f37a542e2e465_p_119\" class=\"ne-p\"><br></p><p id=\"c44a782b4f97445dd1a5147d1cea57cb_p_120\" class=\"ne-p\"><code class=\"ne-code\"><span class=\"ne-text\">indexOf()</span></code><span class=\"ne-text\">、</span><code class=\"ne-code\"><span class=\"ne-text\">lastIndexOf</span></code><span class=\"ne-text\"> </span><strong><span class=\"ne-text\">获取 </span></strong><code class=\"ne-code\"><strong><span class=\"ne-text\">list</span></strong></code><strong><span class=\"ne-text\"> 中元素的位置</span></strong></p><p id=\"d0c08438d746f74145c64c20ef564288_p_121\" class=\"ne-p\"><br></p><p id=\"940e412ec8d104df799f638e9dae072a_p_122\" class=\"ne-p\"><code class=\"ne-code\"><span class=\"ne-text\">sort()</span></code><span class=\"ne-text\"> </span><strong><span class=\"ne-text\">排序，可以传递参数，参数是要传递的方法，默认按照 </span></strong><code class=\"ne-code\"><strong><span class=\"ne-text\">ASCII</span></strong></code><strong><span class=\"ne-text\"> 码来进行排序。</span></strong></p><p id=\"229af124bfdb4f72f7476a537561ed01_p_123\" class=\"ne-p\"><br></p><p id=\"0ad17f28928647e4d87741f38a742edb_p_124\" class=\"ne-p\"><code class=\"ne-code\"><span class=\"ne-text\">sublist()</span></code><span class=\"ne-text\"> </span><strong><span class=\"ne-text\">获取子 </span></strong><code class=\"ne-code\"><strong><span class=\"ne-text\">list</span></strong></code></p><p id=\"58e4bdcd35d7c4cee2e913ca95d454c8_p_125\" class=\"ne-p\"><br></p><p id=\"90ab158ab0669d472e9bce0892b494b1_p_126\" class=\"ne-p\"><code class=\"ne-code\"><span class=\"ne-text\">shuffle()</span></code><span class=\"ne-text\"> </span><strong><span class=\"ne-text\">打乱(随机打乱 )</span></strong></p><p id=\"218526f010699898c9b5afe5bee78564_p_127\" class=\"ne-p\"><br></p><p id=\"38259d4109422d7ac89903b2b931ec00_p_128\" class=\"ne-p\"><code class=\"ne-code\"><span class=\"ne-text\">asMap()</span></code><span class=\"ne-text\">  </span><strong><span class=\"ne-text\">将 </span></strong><code class=\"ne-code\"><strong><span class=\"ne-text\">list</span></strong></code><strong><span class=\"ne-text\"> 转换为 </span></strong><code class=\"ne-code\"><strong><span class=\"ne-text\">map</span></strong></code></p><p id=\"95d2789c2734df969b06fab66880adbb_p_129\" class=\"ne-p\"><br></p><p id=\"d1e49d942f29780dc2a90589abfcbd16_p_130\" class=\"ne-p\"><code class=\"ne-code\"><span class=\"ne-text\">forEach()</span></code><span class=\"ne-text\"> </span><strong><span class=\"ne-text\">循环一个 </span></strong><code class=\"ne-code\"><strong><span class=\"ne-text\">list</span></strong></code><strong><span class=\"ne-text\">，括号中传递的是一个方法。</span></strong><span class=\"ne-text\"> </span><code class=\"ne-code\"><span class=\"ne-text\">list.forEach(print);</span></code></p><p id=\"9478673e50b8f1aa6afefb8412111c6e_p_131\" class=\"ne-p\"><br></p><p id=\"2890fb7d42ad2dab771c823da10c2d83_p_132\" class=\"ne-p\"><code class=\"ne-code\"><span class=\"ne-text\">generate</span></code><span class=\"ne-text\"> (生成集合的长度, 迭代器回调函数)</span><strong><span class=\"ne-text\">集合的生成函数</span></strong></p><p id=\"ec0f52fa0be53a0503a5f45678d7af64_p_133\" class=\"ne-p\"><br></p><h3 id=\"851523de\"><span class=\"ne-text\">4.5 键值对：</span><code class=\"ne-code\"><span class=\"ne-text\">Map</span></code></h3><p id=\"6a5e5c037f52571ccd187b65a73b96f5_p_134\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"7619f286c38a1f8b13705838e4072d6c_li_13\"><code class=\"ne-code\"><span class=\"ne-text\">Map</span></code><span class=\"ne-text\"> 的创建</span></li></ul><p id=\"f8654ab62d3ffca1147edabe4e605303_p_135\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"73e63644f89cb670ef9bdb48b7cb4292_p_136\" class=\"ne-p\"><span class=\"ne-text\">创建 Map</span></p></div><p id=\"f474938634c47815c9cafa361ce29c41_p_137\" class=\"ne-p\"><br></p><pre data-language=\"dart\" id=\"5d50ed09\" class=\"ne-codeblock language-dart\">var language = {'first': 'Dart', 'second': 'Java'};</pre><p id=\"b1543dbd8d735319a0032dfd0a528e84_p_138\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"71856c5a7c4deddc6eefebb1c7f23656_p_139\" class=\"ne-p\"><span class=\"ne-text\">创建不可变 Map</span></p></div><p id=\"91cea5fb3ce029632e4cd2ba40ed2467_p_140\" class=\"ne-p\"><br></p><pre data-language=\"dart\" id=\"2460bc3e\" class=\"ne-codeblock language-dart\">var language = const {'first': 'Dart', 'second': 'Java'};</pre><p id=\"6a77d5641d799908d669ed274c8503e1_p_141\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"63bc3581ece212bbb29f4ecf97590143_p_142\" class=\"ne-p\"><span class=\"ne-text\">构造创建</span></p></div><p id=\"ecbf2a7b370d7c1f11409dc2caadd396_p_143\" class=\"ne-p\"><br></p><pre data-language=\"dart\" id=\"a6ad0cd0\" class=\"ne-codeblock language-dart\">var language = new Map();</pre><p id=\"4f67eb9790b6288e2156994dc5ad2f6e_p_144\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"363e14b7b4f572366c286c15573115f2_li_14\"><code class=\"ne-code\"><span class=\"ne-text\">Map</span></code><span class=\"ne-text\"> 常用操作</span></li></ul><p id=\"bdbce808fca59ee263677a643219090a_p_145\" class=\"ne-p\"><br></p><p id=\"5c50150ba70a9c56a561b16670294632_p_146\" class=\"ne-p\"><span class=\"ne-text\">1、</span><code class=\"ne-code\"><span class=\"ne-text\">[].length</span></code></p><p id=\"7e0f4c425a469a407bb6094b1048bd2a_p_147\" class=\"ne-p\"><br></p><p id=\"581833c2ef73158c738d8c4e5333ca21_p_148\" class=\"ne-p\"><span class=\"ne-text\">2、</span><code class=\"ne-code\"><span class=\"ne-text\">isEmpty()</span></code><span class=\"ne-text\">、</span><code class=\"ne-code\"><span class=\"ne-text\">isNotEmpty()</span></code><span class=\"ne-text\"> </span><strong><span class=\"ne-text\">是否为空</span></strong></p><p id=\"969bd2598fc33869bfe0a82878b9c62e_p_149\" class=\"ne-p\"><br></p><p id=\"56a6c5b5bb60e646eb5422731f4b7491_p_150\" class=\"ne-p\"><span class=\"ne-text\">3、</span><code class=\"ne-code\"><span class=\"ne-text\">keys,values</span></code><span class=\"ne-text\"> </span><strong><span class=\"ne-text\">获取 map 所有的键和所有的值</span></strong></p><p id=\"132b72ac11decfdb5c7171cc51240ee2_p_151\" class=\"ne-p\"><br></p><p id=\"1df5e03badd3a60f200a3b4926e6684d_p_152\" class=\"ne-p\"><span class=\"ne-text\">4、</span><code class=\"ne-code\"><span class=\"ne-text\">containsKey()</span></code><span class=\"ne-text\"> </span><strong><span class=\"ne-text\">是否包含某个键</span></strong></p><p id=\"d6aad01cce7555ee21c55669cd02505b_p_153\" class=\"ne-p\"><br></p><p id=\"040d1927073f9b26b3534a01ad54005f_p_154\" class=\"ne-p\"><span class=\"ne-text\">5、</span><code class=\"ne-code\"><span class=\"ne-text\">containsValue()</span></code><span class=\"ne-text\"> </span><strong><span class=\"ne-text\">是否包含某个值</span></strong></p><p id=\"21145fbd4b460925834eb32e00b394d5_p_155\" class=\"ne-p\"><br></p><p id=\"dca9fa670c8db031c78bfd2b0e8d44dd_p_156\" class=\"ne-p\"><span class=\"ne-text\">6、</span><code class=\"ne-code\"><span class=\"ne-text\">remove()</span></code><span class=\"ne-text\"> </span><strong><span class=\"ne-text\">移除某个元素</span></strong></p><p id=\"b68200708c960efa87d95f272f623cc5_p_157\" class=\"ne-p\"><br></p><p id=\"3ba0f2a99137cfc138d14370794cc714_p_158\" class=\"ne-p\"><span class=\"ne-text\">7、</span><code class=\"ne-code\"><span class=\"ne-text\">forEach()</span></code><span class=\"ne-text\"> </span><strong><span class=\"ne-text\">循环，传入两个方法</span></strong></p><p id=\"e2e19f3807b1a26de6bfd8d5d8f8346a_p_159\" class=\"ne-p\"><br></p><pre data-language=\"dart\" id=\"70eb2963\" class=\"ne-codeblock language-dart\">void main() {\n  var map = {'first': 'Dart', 'Second': 'Java', 'Third': 'Python'};\n  map.forEach(f);\n}\nvoid f(key, value) {\n  print(&quot;key=$key, value=$value&quot;);\n}</pre><p id=\"b0d1fb541c750b95e1b76e1c686fea12_p_160\" class=\"ne-p\"><br></p><p id=\"fddb9038a7bb3abe9bb6c5bc07581291_p_161\" class=\"ne-p\"><span class=\"ne-text\">8、 </span><code class=\"ne-code\"><span class=\"ne-text\">map()</span></code><span class=\"ne-text\"> </span><code class=\"ne-code\"><strong><span class=\"ne-text\">map</span></strong></code><strong><span class=\"ne-text\"> 的遍历方式，接受一个回调函数作为参数，返回一个新 </span></strong><code class=\"ne-code\"><strong><span class=\"ne-text\">map</span></strong></code></p><p id=\"3b53c3d38868cd3e8117384bc7b8db12_p_162\" class=\"ne-p\"><br></p><pre data-language=\"dart\" id=\"3413ddac\" class=\"ne-codeblock language-dart\">void main() {\n    Map age = {&quot;zhangsan&quot;: 18, &quot;lisi&quot;: 20};\n    Map age2 = age.map(f);\n    print(age2); // {18: &quot;zhangsan&quot;, 20: &quot;lisi&quot;};\n}\nMapEntry f(k, v) {\n    return MapEntry(v, k); // 调换 k, v 的值\n}</pre><p id=\"788cb192a755349940f6d50adab26c47_p_163\" class=\"ne-p\"><br></p><h3 id=\"24728d0d\"><span class=\"ne-text\">4.6 </span><code class=\"ne-code\"><span class=\"ne-text\">Runes, Symbols</span></code></h3><p id=\"5a4f541457331ccb8d780e99c0cac44a_p_164\" class=\"ne-p\"><br></p><h3 id=\"8dfe3165\"><span class=\"ne-text\">4.7 </span><code class=\"ne-code\"><span class=\"ne-text\">dynamic =&amp;gt</span></code><span class=\"ne-text\">; 动态类型</span></h3><p id=\"f121a14e6e189b9063748754f0838cd7_p_165\" class=\"ne-p\"><br></p><pre data-language=\"dart\" id=\"d8216917\" class=\"ne-codeblock language-dart\">void main() {\n  var list = new List&lt;dynamic&gt;();\n  list.add(1);\n  list.add(&quot;hello&quot;);\n  list.add(true);\n  print(list);\n}</pre><p id=\"a964985d3a0719f64ee67db676d49377_p_166\" class=\"ne-p\"><br></p><h3 id=\"8e7deab9\"><span class=\"ne-text\">4.8 </span><code class=\"ne-code\"><span class=\"ne-text\">dynamic, var, Object</span></code><span class=\"ne-text\"> 的区别</span></h3><p id=\"fff1d53cf87be1ed0758fa6eab740c40_p_167\" class=\"ne-p\"><br></p><p id=\"b4e753018bde7d3ee22bb43600a73a16_p_168\" class=\"ne-p\"><em><span class=\"ne-text\">dynamic</span></em><span class=\"ne-text\"> 是动态类型，如果使用其声明一种类型，则仍旧可以为其声明另一种类型；通常不直接使用。</span></p><p id=\"c05a4e07798be0757743d22bc9d5b835_p_169\" class=\"ne-p\"><br></p><p id=\"ed3fee819e4b5af5e7633e5ebcc09c78_p_170\" class=\"ne-p\"><em><span class=\"ne-text\">var</span></em><span class=\"ne-text\"> 是关键字，如果使用其声明一种类型，不可为其声明另一种类型，但可改变同类型的值；</span></p><p id=\"c82f591337f789ed81cef7d9c961abe3_p_171\" class=\"ne-p\"><br></p><p id=\"631712b2d9453063577c92e2f2c2f0c0_p_172\" class=\"ne-p\"><em><span class=\"ne-text\">Obejct</span></em><span class=\"ne-text\"> 是基类，用其声明的变量只能使用 </span><strong><em><span class=\"ne-text\">Object</span></em></strong><span class=\"ne-text\"> 类所提供的方法</span></p><p id=\"78b96904bed30c073b2e45e0e72b5f12_p_173\" class=\"ne-p\"><br></p><h2 id=\"b47821f1\"><span class=\"ne-text\">五、 运算符</span></h2><p id=\"2c47ab815ac9d02ba311a88ab630b791_p_174\" class=\"ne-p\"><br></p><h3 id=\"014f3b72\"><span class=\"ne-text\">5.1 算数运算符</span></h3><p id=\"b74861f8c214db2af20d35d849124f0d_p_175\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"d5514f734c8dc25e8be741ad13d6c27d_li_15\"><strong><span class=\"ne-text\">加减乘除</span></strong><span class=\"ne-text\">: </span><code class=\"ne-code\"><span class=\"ne-text\">+</span></code><span class=\"ne-text\">，</span><code class=\"ne-code\"><span class=\"ne-text\">-</span></code><span class=\"ne-text\">，</span><code class=\"ne-code\"><span class=\"ne-text\">*</span></code><span class=\"ne-text\">，</span><code class=\"ne-code\"><span class=\"ne-text\">/</span></code><span class=\"ne-text\">，</span><code class=\"ne-code\"><span class=\"ne-text\">～/</span></code><span class=\"ne-text\">，</span><code class=\"ne-code\"><span class=\"ne-text\">%</span></code><span class=\"ne-text\">。</span></li></ul><ul class=\"ne-ul\"><li id=\"95435fa2551c2eb17f6f4c9de9bed1bd_li_16\"><strong><span class=\"ne-text\">递增递减:</span></strong><span class=\"ne-text\"> ·</span><code class=\"ne-code\"><span class=\"ne-text\">++var</span></code><span class=\"ne-text\">，</span><code class=\"ne-code\"><span class=\"ne-text\">var++</span></code><span class=\"ne-text\">，</span><code class=\"ne-code\"><span class=\"ne-text\">--var</span></code><span class=\"ne-text\">，</span><code class=\"ne-code\"><span class=\"ne-text\">var--</span></code><span class=\"ne-text\">。</span></li></ul><p id=\"aaf6d3f54c4ea0860c4a0b47cf319be5_p_176\" class=\"ne-p\"><br></p><h3 id=\"7f1403d6\"><span class=\"ne-text\">5.2 关系运算符</span></h3><p id=\"a292c8eba1d29cc46db3dc9b759dec15_p_177\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"f4cc0d098a075a3387e496d037c400cd_li_17\"><strong><span class=\"ne-text\">运算符:</span></strong><span class=\"ne-text\"> </span><code class=\"ne-code\"><span class=\"ne-text\">==</span></code><span class=\"ne-text\">，</span><code class=\"ne-code\"><span class=\"ne-text\">!=</span></code><span class=\"ne-text\">，</span><code class=\"ne-code\"><span class=\"ne-text\">&gt;</span></code><span class=\"ne-text\">，</span><code class=\"ne-code\"><span class=\"ne-text\">&lt;</span></code><span class=\"ne-text\">，</span><code class=\"ne-code\"><span class=\"ne-text\">&gt;=</span></code><span class=\"ne-text\">，</span><code class=\"ne-code\"><span class=\"ne-text\">&lt;=</span></code></li></ul><ul class=\"ne-ul\"><li id=\"d133ab88c20b57974bf539fdb4a74f35_li_18\"><strong><span class=\"ne-text\">判断内容是否相同使用 </span></strong><code class=\"ne-code\"><strong><span class=\"ne-text\">==</span></strong></code></li></ul><p id=\"639ff39a813bac805cf1d42cf6370925_p_178\" class=\"ne-p\"><br></p><h3 id=\"10766857\"><span class=\"ne-text\">5.3 逻辑运算符</span></h3><p id=\"704e7fcf3e24f0df062f455d61ce8bf2_p_179\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"febcb62b4f5424b435c4ff8e61803d36_li_19\"><strong><span class=\"ne-text\">运算符：</span></strong><span class=\"ne-text\"> </span><code class=\"ne-code\"><span class=\"ne-text\">!</span></code><span class=\"ne-text\">，</span><code class=\"ne-code\"><span class=\"ne-text\">&amp;&amp;</span></code><span class=\"ne-text\">，</span><code class=\"ne-code\"><span class=\"ne-text\">||</span></code></li></ul><ul class=\"ne-ul\"><li id=\"8f8402239237d570dccf0fc0dd46418a_li_20\"><strong><span class=\"ne-text\">针对布尔类型运算</span></strong></li></ul><p id=\"eca7cff7c59afa2f3de403ef7621a785_p_180\" class=\"ne-p\"><br></p><h3 id=\"34b8e337\"><span class=\"ne-text\">5.4 赋值运算符</span></h3><p id=\"0efc130a474ae63eb94f94d29c0b519f_p_181\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"58212f57b94674aebb84a0d9186513ce_li_21\"><strong><span class=\"ne-text\">基础运算符：</span></strong><span class=\"ne-text\"> </span><code class=\"ne-code\"><span class=\"ne-text\">=</span></code><span class=\"ne-text\">，</span><code class=\"ne-code\"><span class=\"ne-text\">??=</span></code><strong><span class=\"ne-text\">(如果左边的变量没有值，就将右侧的值赋给它；如果左边变量有值，右边的值无效。)</span></strong></li></ul><ul class=\"ne-ul\"><li id=\"94568ed0e65593a55b9f51f0d957b7b9_li_22\"><strong><span class=\"ne-text\">复合运算符：</span></strong><code class=\"ne-code\"><span class=\"ne-text\">+=</span></code><span class=\"ne-text\">，</span><code class=\"ne-code\"><span class=\"ne-text\">-=</span></code><span class=\"ne-text\">，</span><code class=\"ne-code\"><span class=\"ne-text\">*=</span></code><span class=\"ne-text\">，</span><code class=\"ne-code\"><span class=\"ne-text\">/=</span></code><span class=\"ne-text\">，</span><code class=\"ne-code\"><span class=\"ne-text\">%=</span></code><span class=\"ne-text\">，</span><code class=\"ne-code\"><span class=\"ne-text\">~/=</span></code></li></ul><p id=\"1afec35b50202e46c8ab3d64c8b15d95_p_182\" class=\"ne-p\"><br></p><h3 id=\"b18b30d3\"><span class=\"ne-text\">5.5 条件表达式</span></h3><p id=\"bd34bbbaf941aa44b5ef63b842573764_p_183\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"b3b8fb2822b4739f29f8f338a2e2d8b5_li_23\"><strong><span class=\"ne-text\">三目运算符：</span></strong><span class=\"ne-text\"> </span><code class=\"ne-code\"><span class=\"ne-text\">condition ? expr1 : expr2</span></code></li></ul><ul class=\"ne-ul\"><li id=\"93da30f74bdf4077f04e13ecd59863d3_li_24\"><code class=\"ne-code\"><strong><span class=\"ne-text\">??</span></strong></code><strong><span class=\"ne-text\">运算符：</span></strong><span class=\"ne-text\"> </span><code class=\"ne-code\"><span class=\"ne-text\">expr1 ?? expr2</span></code><span class=\"ne-text\">(</span><strong><span class=\"ne-text\">如果第一个表达式为空，则使用第二个表达式，否则直接使用第一个表达式的值.</span></strong><span class=\"ne-text\">)</span></li></ul><p id=\"0f7c273f12939198215a96015893827f_p_184\" class=\"ne-p\"><br></p><h2 id=\"bd3fc3e3\"><span class=\"ne-text\">六、 控制流语句</span></h2><p id=\"9040129079d6c20944d5abd09137a458_p_185\" class=\"ne-p\"><br></p><h3 id=\"22af5e7e\"><span class=\"ne-text\">6.1 条件语句</span></h3><p id=\"a2e9e486493798ec13110bd7c2133490_p_186\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"085f67c8d6198adac35f2ed79d4e7c90_li_25\"><strong><span class=\"ne-text\">if语句</span></strong></li></ul><ul class=\"ne-ul\"><li id=\"97b0ed55a8e0b30763f2b63dd4d23aa0_li_26\"><strong><span class=\"ne-text\">if...else if 语句</span></strong></li></ul><ul class=\"ne-ul\"><li id=\"871605018541f47e7259e5f21cf4e545_li_27\"><strong><span class=\"ne-text\">if...else if...else 语句</span></strong></li></ul><p id=\"c7048e5640cfa0d88f49c32fad2740da_p_187\" class=\"ne-p\"><br></p><h3 id=\"2d6cdeb7\"><span class=\"ne-text\">6.2 循环语句</span></h3><p id=\"1b4147100f9b232305f6ba2db16414a4_p_188\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"78021af58cc7387d8d6fac1d050ffb56_li_28\"><strong><span class=\"ne-text\">for循环</span></strong></li></ul><ul class=\"ne-ul\"><li id=\"878a7319ea997971032ee9e252154fbf_li_29\"><strong><span class=\"ne-text\">for...in 循环</span></strong></li></ul><ul class=\"ne-ul\"><li id=\"b4cb724d74f9aed7d33451c547f6a805_li_30\"><strong><span class=\"ne-text\">while循环</span></strong></li></ul><ul class=\"ne-ul\"><li id=\"cf7429805699c96957c61f111698e4ca_li_31\"><strong><span class=\"ne-text\">do...while 循环</span></strong></li></ul><ul class=\"ne-ul\"><li id=\"a6905ccde6cf6657dfb49641491dac3d_li_32\"><strong><span class=\"ne-text\">break 和 continue</span></strong></li></ul><ul class=\"ne-list-wrap\"><ul ne-level=\"1\" class=\"ne-ul\"><li id=\"5a0d017d628d7d029d90e9802c4df17d_li_33\"><strong><span class=\"ne-text\">break 用于终止循环</span></strong></li></ul></ul><ul class=\"ne-list-wrap\"><ul ne-level=\"1\" class=\"ne-ul\"><li id=\"128653c176c857fbef19cdf72cbcaf80_li_34\"><strong><span class=\"ne-text\">continue 用于跳出当前循环</span></strong></li></ul></ul><ul class=\"ne-ul\"><li id=\"38b4885c88ac761e16cd06ebefdf8776_li_35\"><strong><span class=\"ne-text\">switch...case 语句</span></strong></li></ul><ul class=\"ne-list-wrap\"><ul ne-level=\"1\" class=\"ne-ul\"><li id=\"12920a4d6e3133f02f60521345d5b13c_li_36\"><strong><span class=\"ne-text\">比较类型:</span></strong><span class=\"ne-text\"> </span><strong><span class=\"ne-text\">num, String, 编译器常量, 对象, 枚举</span></strong></li></ul></ul><ul class=\"ne-list-wrap\"><ul ne-level=\"1\" class=\"ne-ul\"><li id=\"60a15cdaee09c5919b9e9e305750f531_li_37\"><strong><span class=\"ne-text\">非空 case 必须有一个 break</span></strong></li></ul></ul><ul class=\"ne-list-wrap\"><ul ne-level=\"1\" class=\"ne-ul\"><li id=\"8ff5df2ae9886ea5dc1958d3dce07a09_li_38\"><strong><span class=\"ne-text\">default 关键字来处理默认情况</span></strong></li></ul></ul><ul class=\"ne-list-wrap\"><ul ne-level=\"1\" class=\"ne-ul\"><li id=\"b1b4245e56500070caf0aa555ae652d7_li_39\"><strong><span class=\"ne-text\">continue 跳转标签</span></strong></li></ul></ul><p id=\"754d4d7b7f7ef59febce1379b79c5a84_p_189\" class=\"ne-p\"><br></p><h2 id=\"1a05b0c4\"><span class=\"ne-text\">七、 方法</span></h2><p id=\"a7461c86e6a9d61cb988ef01871fdc3e_p_190\" class=\"ne-p\"><br></p><h3 id=\"11ad6452\"><span class=\"ne-text\">7.1 方法定义</span></h3><p id=\"ebc5def445ee0b4a8a315ff5c89870b2_p_191\" class=\"ne-p\"><br></p><p id=\"1768844fed58d5197755a5d26c7486e7_p_192\" class=\"ne-p\"><strong><span class=\"ne-text\">方法定义：</span></strong></p><p id=\"a54598ca955746a71345e6f1c7efebc9_p_193\" class=\"ne-p\"><br></p><pre data-language=\"text\" id=\"0bb2c91c\" class=\"ne-codeblock language-text\">返回类型 方法名 (参数1，参数2 ...) {\n    方法体\n    return 返回值\n}</pre><p id=\"f9b899a2271a73dadb46fc35f51f07c4_p_194\" class=\"ne-p\"><br></p><p id=\"1aef55c1844614fee93b58b509332257_p_195\" class=\"ne-p\"><strong><span class=\"ne-text\">方法特性：</span></strong></p><p id=\"23475a21370dc3b01a4e53f8cf794c6f_p_196\" class=\"ne-p\"><br></p><p id=\"c17cc3ecf2ff1df40138a63366b4555e_p_197\" class=\"ne-p\"><code class=\"ne-code\"><span class=\"ne-text\">1、</span></code><span class=\"ne-text\"> 方法也是对象，并且有具体类型 </span><code class=\"ne-code\"><span class=\"ne-text\">Function</span></code><span class=\"ne-text\">。</span></p><p id=\"cef4f7dc7a55e7d89762a09a512d9105_p_198\" class=\"ne-p\"><br></p><p id=\"cd95284d80760a52034923bb91ba4055_p_199\" class=\"ne-p\"><code class=\"ne-code\"><span class=\"ne-text\">2、</span></code><span class=\"ne-text\"> 返回值类型，参数类型都可以省略。</span></p><p id=\"99d7f9ffd07472f73f14113da034a561_p_200\" class=\"ne-p\"><br></p><p id=\"b8bbb0c68e2db06373485621b7c5450c_p_201\" class=\"ne-p\"><code class=\"ne-code\"><span class=\"ne-text\">3、</span></code><span class=\"ne-text\"> 箭头语法：</span><code class=\"ne-code\"><span class=\"ne-text\">=&gt; expr</span></code><span class=\"ne-text\"> 是 </span><code class=\"ne-code\"><span class=\"ne-text\">{return expr;}</span></code><span class=\"ne-text\">缩写。只适用于 </span><strong><span class=\"ne-text\">一个表达式</span></strong><span class=\"ne-text\">。</span></p><p id=\"51391d7d944f941a39fd10b1691d92b8_p_202\" class=\"ne-p\"><br></p><p id=\"5b8c8d15cb12afc80a916b906ec09a21_p_203\" class=\"ne-p\"><code class=\"ne-code\"><span class=\"ne-text\">4、</span></code><span class=\"ne-text\"> 方法都有返回值。如果没有指定，默认 </span><code class=\"ne-code\"><span class=\"ne-text\">return null</span></code><span class=\"ne-text\"> 最后一句执行。</span></p><p id=\"8fbe4b2afec4087483dadb750a83b417_p_204\" class=\"ne-p\"><br></p><h3 id=\"a73dcf54\"><span class=\"ne-text\">7.2 可选参数</span></h3><p id=\"ed628da24993324917ceed9d7032667e_p_205\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"499bd242e329b6006548a778fcffecb4_li_40\"><span class=\"ne-text\">可选命名参数：</span><code class=\"ne-code\"><span class=\"ne-text\">{param1, param2, ...}</span></code></li></ul><p id=\"352f391bc738d2265b3d832a48674509_p_206\" class=\"ne-p\"><br></p><pre data-language=\"dart\" id=\"c5eb5218\" class=\"ne-codeblock language-dart\">void main() {\n  printPerson(&quot;张三&quot;);// name=张三, age=null, gender=null\n  printPerson(&quot;张三&quot;, age: 20); // name=张三, age=20, gender=null\n  printPerson(&quot;张三&quot;, age: 20, gender: &quot;Male&quot;); // name=张三, age=20, gender=&quot;Male&quot;\n  printPerson(&quot;张三&quot;, gender: &quot;Male&quot;); // name=张三, age=null, gender=&quot;Male&quot;\n}\n\nprintPerson(String name, { int age, String gender }) {\n  print('name=$name, age=$age, gender=$gender'); \n}</pre><p id=\"fa496c4be2d075776e02d4d8dd97275f_p_207\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"8a76ff15f853ed359af4b236df150ee0_li_41\"><span class=\"ne-text\">可选位置参数：</span><code class=\"ne-code\"><span class=\"ne-text\">[param1, param2, ...]</span></code></li></ul><p id=\"3c2e4ae7a4912940f2b69cc49919d5f2_p_208\" class=\"ne-p\"><br></p><pre data-language=\"dart\" id=\"990ac084\" class=\"ne-codeblock language-dart\">void main() {\n  printPerson(&quot;李四&quot;);// name=李四, age=null, gender=null\n  printPerson(&quot;李四&quot;, 18);// name=李四, age=18, gender=null\n  printPerson(&quot;李四&quot;, 18, &quot;男&quot;); // name=李四, age=18, gender=男\n}\n\nprintPerson(String name, [int age, String gender]) {\n  print('name=$name, age=$age, gender=$gender');\n}</pre><p id=\"8919573e332594403c98b16dc3707127_p_209\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"c298936632e0e0be52995bb03edf247a_li_42\"><span class=\"ne-text\">如果存在具体参数，可选参数声明，必须在参数后面</span></li></ul><p id=\"9fcc44cb3c056720422a68184834d3f8_p_210\" class=\"ne-p\"><br></p><h3 id=\"3d374fc1\"><span class=\"ne-text\">7.3 默认参数值</span></h3><p id=\"1da2a8520c15248cb5e414baf18050d4_p_211\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"dc7f33bd1c968f16cd63fa0e94b6670c_li_43\"><span class=\"ne-text\">使用 </span><code class=\"ne-code\"><span class=\"ne-text\">=</span></code><span class=\"ne-text\"> 在 </span><strong><span class=\"ne-text\">可选参数</span></strong><span class=\"ne-text\"> 指定默认值</span></li></ul><p id=\"bf526d24f704019105ff4879923c79a3_p_212\" class=\"ne-p\"><br></p><pre data-language=\"dart\" id=\"85874c44\" class=\"ne-codeblock language-dart\">void main() {\n  printPerson(&quot;张三&quot;); // name=张三, age=30, gender=女\n  printPerson(&quot;张三&quot;, age: 20); // name=张三, age=20, gender=女\n  printPerson(&quot;张三&quot;, gender: &quot;男&quot;); // name=张三, age=30, gender=男\n}\n\nprintPerson(String name, { int age = 30, String gender = &quot;女&quot; }) {\n  print('name=$name, age=$age, gender=$gender');\n}</pre><p id=\"6a4878fe05233880c9bb3f78bdfc8d68_p_213\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"6fb8356ba6122194cd710c5932646a78_li_44\"><span class=\"ne-text\">默认值只能是编译时常量</span></li></ul><p id=\"3a8029979cdf6369a743f706414be0bf_p_214\" class=\"ne-p\"><br></p><h3 id=\"da4cf90f\"><span class=\"ne-text\">7.4 方法对象</span></h3><p id=\"c2fcbb13669d3e57d1dc5c7e95ef2350_p_215\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"c638bd53eb987d0e8e4718d4947ca094_li_45\"><span class=\"ne-text\">方法可以作为对象赋值给其它变量</span></li></ul><p id=\"02630234cefdd1a3dfd9b8e850834e4e_p_216\" class=\"ne-p\"><br></p><pre data-language=\"dart\" id=\"7a8ac852\" class=\"ne-codeblock language-dart\">void main() {\n  // var func = printHello;\n  Function func = printHello;\n  func();\n}\n\nvoid printHello() {\n  print(&quot;Hello&quot;);\n}</pre><p id=\"e9b9195071b602f228ecd87131f54a09_p_217\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"c0756fc4766b82f013916a1dfc29e220_li_46\"><span class=\"ne-text\">方法可作为参数传递给其它方法</span></li></ul><p id=\"106abb71162cab57d99f22c8182baa6a_p_218\" class=\"ne-p\"><br></p><pre data-language=\"dart\" id=\"4e4e21dc\" class=\"ne-codeblock language-dart\">void main() {\n  var list = [1, 2, 3, 4];\n  list.forEach(print);\n}\n\n// 或者\nvoid main() {\n  var list1 = [&quot;h&quot;, &quot;e&quot;, &quot;l&quot;, &quot;l&quot;, &quot;o&quot;];\n  print(listTimes(list1, times));\n}\n\nList listTimes(List list, String f(str)) {\n  for(var index = 0; index &lt; list.length; index++) {\n    list[index] = f(list[index]);\n  }\n  return list;\n}\n\nString times(str) {\n  return str * 3;\n}</pre><p id=\"43756015fe654e98c2f5e26d2f231b8c_p_219\" class=\"ne-p\"><br></p><h3 id=\"588eca3a\"><span class=\"ne-text\">7.5 匿名方法</span></h3><p id=\"9c56ecf09c84a42020f1c0dd6460690c_p_220\" class=\"ne-p\"><br></p><p id=\"2ea8639b55360cd848e93d2c64e65871_p_221\" class=\"ne-p\"><span class=\"ne-text\">如何定义：</span></p><p id=\"70a1d1e1a593e58a7f63727c676411db_p_222\" class=\"ne-p\"><br></p><pre data-language=\"dart\" id=\"27d2b81f\" class=\"ne-codeblock language-dart\">(参数1，参数2，...) {\n    方法体...\n    return 返回值\n}</pre><p id=\"7daa843f6e495dd1d2c6696528cc65bd_p_223\" class=\"ne-p\"><br></p><p id=\"29aac8103521bf65bece0eb05580ca6f_p_224\" class=\"ne-p\"><span class=\"ne-text\">匿名方法的特性：</span></p><p id=\"3f2f7751b6bc6bbae810562f248d6f49_p_225\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"3acb5ad9afda68694759bf4e11913e75_li_47\"><span class=\"ne-text\">可赋值给变量，通过变量进行调用</span></li></ul><p id=\"73af83e6e31af8831621458232b96888_p_226\" class=\"ne-p\"><br></p><pre data-language=\"dart\" id=\"7a2bab7e\" class=\"ne-codeblock language-dart\">void main() {\n  // 第一种\n  var func = (str) {\n    print(&quot;Hello---$str&quot;);\n  };\n  func(30);\n  // 第二种\n  (() {\n      print(&quot;Test&quot;);\n  })()\n}</pre><p id=\"b90a99f66c0879bbc49e9b0b68e59c08_p_227\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"fb8d14069863534a0d0ee4e778cd9681_li_48\"><span class=\"ne-text\">可在其它方法中直接调用或传递给其它方法</span></li></ul><p id=\"bdc03e8bcffcbda15027382924358318_p_228\" class=\"ne-p\"><br></p><pre data-language=\"dart\" id=\"786ce608\" class=\"ne-codeblock language-dart\">void main() {\n  var list1 = [&quot;h&quot;, &quot;e&quot;, &quot;l&quot;, &quot;l&quot;, &quot;o&quot;];\n  var result = listTimes(list1, (str) {return str * 3;});\n  // var result = listTimes(list1, (str) =&gt; str * 3);\n  print(result);\n}\n\nList listTimes(List list, f(str)) {\n  for(var index = 0; index &lt; list.length; index++) {\n    list[index] = f(list[index]);\n  }\n  return list;\n}</pre><p id=\"b7e198aef6e013ece72351e474a68ffa_p_229\" class=\"ne-p\"><br></p><pre data-language=\"dart\" id=\"9ff3f424\" class=\"ne-codeblock language-dart\">void main() {\n  var list2 = [&quot;h&quot;, &quot;e&quot;, &quot;l&quot;, &quot;l&quot;, &quot;o&quot;];\n  print(listTimes2(list2));\n}\nList listTimes2(List list) {\n  var func = (str) { return str * 3; };\n  for(var i = 0; i &lt; list.length; i++) {\n    list[i] = func(list[i]);\n  }\n  return list;\n}</pre><p id=\"8cc0a1f126bf8ee201bd7f38025053c4_p_230\" class=\"ne-p\"><br></p><p id=\"acd86c7f2e14e66cf85721cbce4c8240_p_231\" class=\"ne-p\"><span class=\"ne-text\">注意：匿名方法不能直接定义在外面</span></p><p id=\"9bf8874c736b2ce6c6ef8eacb225391e_p_232\" class=\"ne-p\"><br></p><h3 id=\"7a56f110\"><span class=\"ne-text\">7.6 闭包</span></h3><p id=\"18170e7e8da575f5dcb8686e02c401e4_p_233\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"e266eebe601188904dea6ef500c7b44f_li_49\"><span class=\"ne-text\">闭包是一个方法(对象)</span></li></ul><ul class=\"ne-ul\"><li id=\"f7b535b7dde1ad7f696eb45abc626453_li_50\"><span class=\"ne-text\">闭包定义在其它方法内部</span></li></ul><ul class=\"ne-ul\"><li id=\"260a7ab323ff498d126d0665ef86e8e4_li_51\"><span class=\"ne-text\">闭包能够访问外部方法内的局部变量，并持有其状态</span></li></ul><p id=\"4948fb5770e7048a08aaf543e87b3f8d_p_234\" class=\"ne-p\"><br></p><pre data-language=\"dart\" id=\"7e10dec9\" class=\"ne-codeblock language-dart\">void main() {\n  var func = a();\n  func();\n  func();\n  func();\n  func();\n}\na() {\n  int count = 0;\n  printCount() {\n    print(count++);\n  };\n  return printCount;\n}</pre><p id=\"e138d80e1ae914d5031cbb3f3c1d8950_p_235\" class=\"ne-p\"><br></p><pre data-language=\"dart\" id=\"44aebbf3\" class=\"ne-codeblock language-dart\">// 使用匿名方法的闭包\nvoid main() {\n  var func = a();\n  func();\n  func();\n  func();\n  func();\n}\n\na() {\n  int count = 0;\n  return () {\n    print(count++);\n  };\n}</pre><p id=\"c454258df76d70059117b842caffb1bc_p_236\" class=\"ne-p\"><br></p><h2 id=\"0e7e494d\"><span class=\"ne-text\">八、 </span><code class=\"ne-code\"><span class=\"ne-text\">Dart</span></code><span class=\"ne-text\"> 面向对象编程</span></h2><p id=\"9e235b5e43f23e9011dd8415c92088fa_p_237\" class=\"ne-p\"><br></p><h3 id=\"842be82b\"><span class=\"ne-text\">8.1 类于对象</span></h3><p id=\"6033ae78638b22f9c7b1001e674f8b54_p_238\" class=\"ne-p\"><br></p><ol class=\"ne-ol\"><li id=\"d3db2da957cb8f4600c3264666cc6690_li_52\"><span class=\"ne-text\">使用关键字 </span><code class=\"ne-code\"><span class=\"ne-text\">class</span></code><span class=\"ne-text\"> 声明一个类</span></li></ol><ol start=\"2\" class=\"ne-ol\"><li id=\"a666a1ac811c0eaf27cec4ff464016fb_li_53\"><span class=\"ne-text\">使用关键字 </span><code class=\"ne-code\"><span class=\"ne-text\">new</span></code><span class=\"ne-text\"> 创建一个对象，</span><code class=\"ne-code\"><span class=\"ne-text\">new</span></code><span class=\"ne-text\"> 可省略</span></li></ol><ol start=\"3\" class=\"ne-ol\"><li id=\"c58c860595f195b151f16e1c2ede3254_li_54\"><span class=\"ne-text\">所有对象都继承于 </span><code class=\"ne-code\"><span class=\"ne-text\">Object</span></code><span class=\"ne-text\"> 类型</span></li></ol><p id=\"2a5c77aaadd212cc52fa92db4e5d7833_p_239\" class=\"ne-p\"><br></p><h3 id=\"8cadb31c\"><span class=\"ne-text\">8.2 属性和方法</span></h3><p id=\"6a64108399bd39151a0c47ad4f78419e_p_240\" class=\"ne-p\"><br></p><ol class=\"ne-ol\"><li id=\"7a8c564ee6f266e337cd3cb075bbdec4_li_55\"><span class=\"ne-text\">属性默认会生成 </span><code class=\"ne-code\"><span class=\"ne-text\">getter</span></code><span class=\"ne-text\"> 和 </span><code class=\"ne-code\"><span class=\"ne-text\">setter</span></code><span class=\"ne-text\"> 方法</span></li></ol><ol start=\"2\" class=\"ne-ol\"><li id=\"8128c4fd74858858ac3d4211addaae66_li_56\"><span class=\"ne-text\">使用 </span><code class=\"ne-code\"><span class=\"ne-text\">final</span></code><span class=\"ne-text\"> 声明的属性只有 </span><code class=\"ne-code\"><span class=\"ne-text\">getter</span></code><span class=\"ne-text\"> 方法（只可读不可写）</span></li></ol><ol start=\"3\" class=\"ne-ol\"><li id=\"f276e45d694340343e1378e2cdf66abb_li_57\"><span class=\"ne-text\">属性和方法是通过 </span><code class=\"ne-code\"><span class=\"ne-text\">.</span></code><span class=\"ne-text\"> 访问</span></li></ol><ol start=\"4\" class=\"ne-ol\"><li id=\"8d15985e499dcc99dcd287f9b418e261_li_58\"><span class=\"ne-text\">方法不能被重栽</span></li></ol><p id=\"672ca78e6355d2efd6d038cc344f6bcf_p_241\" class=\"ne-p\"><br></p><h3 id=\"bb4c9d85\"><span class=\"ne-text\">8.3 类及成员可见性</span></h3><p id=\"8205712d24d63d21d2add54ced58c376_p_242\" class=\"ne-p\"><br></p><ol class=\"ne-ol\"><li id=\"9d56613e9e047661efc01e7fabe2959c_li_59\"><code class=\"ne-code\"><span class=\"ne-text\">Dart</span></code><span class=\"ne-text\"> 中的可见性是以 </span><code class=\"ne-code\"><span class=\"ne-text\">library(库)</span></code><span class=\"ne-text\"> 为单位</span></li></ol><ol start=\"2\" class=\"ne-ol\"><li id=\"868fdf83a850e953adfdf30250d69383_li_60\"><span class=\"ne-text\">默认情况下，每一个 </span><code class=\"ne-code\"><span class=\"ne-text\">Dart</span></code><span class=\"ne-text\"> 文件就是一个库</span></li></ol><ol start=\"3\" class=\"ne-ol\"><li id=\"ed47c5405a814c09aa363c8ec3c695da_li_61\"><span class=\"ne-text\">使用 </span><code class=\"ne-code\"><span class=\"ne-text\">_</span></code><span class=\"ne-text\"> 表示库的私有性</span></li></ol><p id=\"cee8e2bf8099195a87e3ac26f9657d80_p_243\" class=\"ne-p\"><br></p><pre data-language=\"dart\" id=\"f2959bec\" class=\"ne-codeblock language-dart\">// person.dart\nclass _Person {\n  String name;\n  int age;\n  // final String address;\n\n  void work() {\n    print(&quot;name is $name, age is $age&quot;);\n  }\n}\n\n// class_and_object.dart\nimport 'person.dart';\n\nvoid main() {\n  // var person = new Person();\n  var person = _Person(); // error\n  person.name = &quot;Tom&quot;;\n  person.age = 20;\n  print(person.name); \n  person.work();\n\n  // print(person.address);\n}</pre><p id=\"6676b0fdf5d68f5dfac942cb8c232755_p_244\" class=\"ne-p\"><br></p><ol start=\"4\" class=\"ne-ol\"><li id=\"19de8a34d53225115feaabff50262d82_li_62\"><span class=\"ne-text\">使用 </span><strong><em><span class=\"ne-text\">import</span></em></strong><span class=\"ne-text\"> 导入库</span></li></ol><p id=\"2b23bc620f657a68260e8cdb7a7f2598_p_245\" class=\"ne-p\"><br></p><h3 id=\"3d0dd0b5\"><span class=\"ne-text\">8.4 计算属性</span></h3><p id=\"b4dae59027624f33efe1705e43a76835_p_246\" class=\"ne-p\"><br></p><ol class=\"ne-ol\"><li id=\"39a66c1c40ddf45833e37bf8bd5c2a66_li_63\"><span class=\"ne-text\">顾名思义，计算属性的值是通过计算而来，本身不存储值</span></li></ol><ol start=\"2\" class=\"ne-ol\"><li id=\"2e6590cabe20af477f2dc990cdf0b5cb_li_64\"><span class=\"ne-text\">计算属性赋值，其实是通过计算转换到其它实例变量</span></li></ol><p id=\"033309e021dae6cc1eabb307bcb5ba20_p_247\" class=\"ne-p\"><br></p><pre data-language=\"dart\" id=\"53b5281a\" class=\"ne-codeblock language-dart\">void main() {\n  var rect = new Rectangle();\n  rect.width = 10;\n  rect.height = 20;\n  print(rect.area); // 200;\n  \n  // 已知面积求宽度\n  rect.area = 200;\n  print(rect.width); // 10.0\n}\n\nclass Rectangle {\n  num width, height;\n  // 获取计算属性的值\n  num get area =&gt; width * height;\n  // num get area {\n  //   return width * height;\n  // }\n  // 设置计算属性值\n  set area(value){\n    width = value / 20;\n  }\n}</pre><p id=\"bea473518fba3dbf9effb067ddad4499_p_248\" class=\"ne-p\"><br></p><h3 id=\"34a314fc\"><span class=\"ne-text\">8.5 构造方法</span></h3><p id=\"f46f4fe0560ab2f40140fcdf6c76e650_p_249\" class=\"ne-p\"><br></p><ol class=\"ne-ol\"><li id=\"5b44ab71647e74e74811e8772b16d3dd_li_65\"><span class=\"ne-text\">如果没有自定义构造方法，则会有个默认构造方法</span></li></ol><ol start=\"2\" class=\"ne-ol\"><li id=\"43a1e2d44e570c63396bbe8b086b0c9c_li_66\"><span class=\"ne-text\">如果存在自定义构造方法，则默认构造方法无效</span></li></ol><p id=\"e08beadb42b714218a1b36be3f0f61c1_p_250\" class=\"ne-p\"><br></p><pre data-language=\"dart\" id=\"b67772e6\" class=\"ne-codeblock language-dart\">void main() {\n  var person = new Person(&quot;Tom&quot;, 20);\n}\nclass Person {\n  String name;\n  int age;\n\n  // final String gender;\n  Person(String name, int age) {\n    this.name = name;\n    this.age = age;\n  }\n  void work() {\n    print(&quot;work...&quot;);\n  }\n}</pre><p id=\"3d18b6b62d151c043218e7d9d07e2abe_p_251\" class=\"ne-p\"><br></p><p id=\"512aa0dafa3495b06051cb82627ded76_p_252\" class=\"ne-p\"><strong><span class=\"ne-text\">语法糖</span></strong><span class=\"ne-text\">：在构造方法执行之前对属性进行赋值</span></p><p id=\"3515d0f9ecb9499a648a8b4a3ee78839_p_253\" class=\"ne-p\"><br></p><pre data-language=\"dart\" id=\"6d961901\" class=\"ne-codeblock language-dart\">void main() {\n  var person = new Person(&quot;Tom&quot;, 20, &quot;Male&quot;);\n}\nclass Person {\n  String name;\n  int age;\n\n  final String gender;\n  Person(this.name, this.age, this.gender); // 语法糖\n  void work() {\n    print(&quot;work...&quot;);\n  }\n}</pre><p id=\"d6f5ed1b4d8d8ac6d60ab389ddb41993_p_254\" class=\"ne-p\"><br></p><ol start=\"3\" class=\"ne-ol\"><li id=\"1da4d5696ebfd959f65a0b313e29d7e1_li_67\"><span class=\"ne-text\">构造方法不能重载</span></li></ol><p id=\"97e3b88e8f1bfda10a9dde2c42a136f9_p_255\" class=\"ne-p\"><br></p><h3 id=\"28dec681\"><span class=\"ne-text\">8.6 命名构造方法</span></h3><p id=\"df7e8d3180610289b39a308b14a0a4a1_p_256\" class=\"ne-p\"><br></p><ol class=\"ne-ol\"><li id=\"30cae26e7502e9f017c84e863dc60c9a_li_68\"><span class=\"ne-text\">使用命名构造方法，可以实现多个构造方法</span></li></ol><ol start=\"2\" class=\"ne-ol\"><li id=\"801b9dbdc1ac6f4d85c9b19b4789c3fc_li_69\"><span class=\"ne-text\">使用 </span><strong><span class=\"ne-text\">类名.方法</span></strong><span class=\"ne-text\"> 的形式实现</span></li></ol><p id=\"0983ce4784ca53081c2afa97562f5bfa_p_257\" class=\"ne-p\"><br></p><pre data-language=\"dart\" id=\"494027e5\" class=\"ne-codeblock language-dart\">void main() {\n  var person = new Person.width(&quot;Tom&quot;);\n}\nclass Person {\n  String name;\n  Person.width(String name) {\n    this.name = name;\n  }\n  void work() {\n    print(&quot;work...&quot;);\n  }\n}</pre><p id=\"e1f77a305d41e8c97d8b51cc18da7968_p_258\" class=\"ne-p\"><br></p><h3 id=\"d6b162f0\"><span class=\"ne-text\">8.7 常量构造方法</span></h3><p id=\"e1752ec3be6731068aa3b2551ab39c93_p_259\" class=\"ne-p\"><br></p><ol class=\"ne-ol\"><li id=\"038eed847438de9721f00d3376029b9f_li_70\"><span class=\"ne-text\">如果类是不可变状态，可以把对象定义为编译时常量</span></li></ol><ol start=\"2\" class=\"ne-ol\"><li id=\"291c8c6c981d7dd0eb3e6796154db186_li_71\"><span class=\"ne-text\">使用 </span><code class=\"ne-code\"><span class=\"ne-text\">const</span></code><span class=\"ne-text\"> 声明构造方法，并且所有变量都为 </span><code class=\"ne-code\"><span class=\"ne-text\">fianl</span></code></li></ol><ol start=\"3\" class=\"ne-ol\"><li id=\"47e65a06005a27a9499be24fefea33e0_li_72\"><span class=\"ne-text\">使用 </span><code class=\"ne-code\"><span class=\"ne-text\">const</span></code><span class=\"ne-text\"> 声明对象，可以省略</span></li></ol><p id=\"c43279d314bb1c051d65b017ff2a7851_p_260\" class=\"ne-p\"><br></p><pre data-language=\"dart\" id=\"d4725875\" class=\"ne-codeblock language-dart\">void main() {\n  // const person = const Person(&quot;张三&quot;, 20, &quot;Male&quot;);\n  const person = Person(&quot;张三&quot;, 20, &quot;Male&quot;);\n}\n\nclass Person {\n  final String name;\n  final int age;\n  final String gender;\n  const Person(this.name, this.age, this.gender);\n  void work() {\n    print(&quot;work&quot;);\n  }\n}</pre><p id=\"0344f8f97ae50ef300797fddbaffc9a7_p_261\" class=\"ne-p\"><br></p><h3 id=\"1b266566\"><span class=\"ne-text\">8.8 工厂构造方法</span></h3><p id=\"3a5652c73375f059b90ee82b60669833_p_262\" class=\"ne-p\"><br></p><ol class=\"ne-ol\"><li id=\"f31bb8c1fbe48b6a657c8f66dc6d711d_li_73\"><span class=\"ne-text\">工厂构造方法类似于设计模式中的工厂模式</span></li></ol><ol start=\"2\" class=\"ne-ol\"><li id=\"1fa090ece2fac3ff8c9d9a4bdc6d2b0c_li_74\"><span class=\"ne-text\">在构造方法前添加关键字 </span><code class=\"ne-code\"><span class=\"ne-text\">factory</span></code><span class=\"ne-text\"> 实现一个工厂构造方法</span></li></ol><ol start=\"3\" class=\"ne-ol\"><li id=\"0b1faea7a66a54e5092eda729830a51c_li_75\"><span class=\"ne-text\">在工厂构造方法中可返回对象</span></li></ol><p id=\"e319add840b73a166328bf789b6ae09d_p_263\" class=\"ne-p\"><br></p><pre data-language=\"dart\" id=\"2d4ef080\" class=\"ne-codeblock language-dart\">class Logger {\n  final String name;\n  static final Map&lt;String, Logger&gt; _cache = &lt;String, Logger&gt; {};\n\n  factory Logger(String name) {\n    return Logger._internal('Dart'); // 可以返回\n  }\n  Logger._internal(this.name);\n  void log(String msg) {\n    print(msg);\n  }\n}</pre><p id=\"95c82bac10be325ff523b3dbe014a366_p_264\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"588b8703b820566674f1a367450a31c9_li_76\"><strong><em><span class=\"ne-text\">命名工厂构造方法</span></em></strong><span class=\"ne-text\">（</span><strong><em><span class=\"ne-text\">factory 类名.方法名</span></em></strong><span class=\"ne-text\">）</span></li></ul><p id=\"e4d5668038ec0dd0f47f3473097287e2_p_265\" class=\"ne-p\"><br></p><p id=\"a616915df2e7a11aeb5a73015b33acb5_p_266\" class=\"ne-p\"><span class=\"ne-text\">它可以有返回值，而且不需要将类的 </span><strong><em><span class=\"ne-text\">final</span></em></strong><span class=\"ne-text\"> 变量作为参数，是提供一种灵活获取类对象的方式</span></p><p id=\"c1f615bd093ec15198b28dc0cd440916_p_267\" class=\"ne-p\"><br></p><pre data-language=\"dart\" id=\"93328c4f\" class=\"ne-codeblock language-dart\">class Student {\n  factory Student._stu(Student stu) {\n    return Student(stu._school, stu.name, stu.age);\n  }\n}</pre><p id=\"1941af98e6c0fecbf8062468a010bb3c_p_268\" class=\"ne-p\"><br></p><h3 id=\"2da81770\"><span class=\"ne-text\">8.9 初始化列表常用于设置 (</span><code class=\"ne-code\"><span class=\"ne-text\">fianl</span></code><span class=\"ne-text\"> 变量的值)</span></h3><p id=\"8757c9f7854dde4a72cfc4af616e895a_p_269\" class=\"ne-p\"><br></p><ol class=\"ne-ol\"><li id=\"16bc700158d5e4e6a3b22de274b99aaa_li_77\"><span class=\"ne-text\">初始化列表会在构造方法体执行之前执行</span></li></ol><ol start=\"2\" class=\"ne-ol\"><li id=\"5b37720486515372c50de814b3501f4d_li_78\"><span class=\"ne-text\">使用逗号分隔初始化表达式</span></li></ol><ol start=\"3\" class=\"ne-ol\"><li id=\"b3519a03056fffac0dd5a06414abad78_li_79\"><span class=\"ne-text\">初始化列表常用于设置 </span><code class=\"ne-code\"><span class=\"ne-text\">final</span></code><span class=\"ne-text\"> 变量的值</span></li></ol><p id=\"f994bede262e74fa3b6f0e70c438222d_p_270\" class=\"ne-p\"><br></p><pre data-language=\"dart\" id=\"a7376f35\" class=\"ne-codeblock language-dart\">void main() {\n  var person = new Person(&quot;Tom&quot;, 20, &quot;Male&quot;);\n}\nclass Person {\n  String name;\n  int age;\n  final String gender;\n\n  Person(this.name, this.age, this.gender);\n  // 初始化列表\n  Person.withMap(Map map): gender = map[&quot;gender&quot;] {\n    this.name = map[&quot;name&quot;];\n    this.age = map[&quot;age&quot;];\n  }\n  // 或者\n  Person.withMap1(Map map): name = map[&quot;name&quot;], age = map[&quot;age&quot;], gender = map[&quot;gender&quot;];\n  void work() {\n    print(&quot;work&quot;);\n  }\n}</pre><p id=\"0ff356bd76a1afc7336643db6003559d_p_271\" class=\"ne-p\"><br></p><h3 id=\"0ce482f2\"><span class=\"ne-text\">8.10 静态成员</span></h3><p id=\"4af52400f7f68b78e0bfc22f9633493e_p_272\" class=\"ne-p\"><br></p><ol class=\"ne-ol\"><li id=\"d673ee91fb8f20e1bf0b00bd5d22f847_li_80\"><span class=\"ne-text\">使用 </span><code class=\"ne-code\"><span class=\"ne-text\">static</span></code><span class=\"ne-text\"> 关键字来实现类级别的变量和函数（不再属于对象级别）</span></li></ol><ol start=\"2\" class=\"ne-ol\"><li id=\"c9f2d60a0de1ada754f2dfcde4f660e9_li_81\"><span class=\"ne-text\">静态成员不能访问非静态成员，非静态成员可以访问静态成员</span></li></ol><ol start=\"3\" class=\"ne-ol\"><li id=\"c2e1188f5511bc87189c3927a0879808_li_82\"><span class=\"ne-text\">类中的常量需要使用 </span><code class=\"ne-code\"><span class=\"ne-text\">static const</span></code><span class=\"ne-text\"> 声明</span></li></ol><p id=\"3f2704f87d6ead87f93c1c897ce22fea_p_273\" class=\"ne-p\"><br></p><pre data-language=\"dart\" id=\"e8bcdffd\" class=\"ne-codeblock language-dart\">void main() {\n  var page = new Page();\n  // page.scrollDown();\n  Page.scrollDown();\n}\nclass Page {\n  // 添加常量\n  static const int maxAge = 10;\n  \n  static int currentPage = 1;\n  static void scrollDown() {\n    currentPage = 1;\n    print(&quot;scrollDown&quot;);\n  }\n  void scrollUp() {\n    currentPage++;\n    print(&quot;scrollUp&quot;);\n  }\n}</pre><p id=\"a57e3e87113ee096d36d0fd8d72ea1ca_p_274\" class=\"ne-p\"><br></p><h3 id=\"539800c4\"><span class=\"ne-text\">8.11 对象操作符</span></h3><p id=\"d92d21c1f221dd0504a484de03a61dd1_p_275\" class=\"ne-p\"><br></p><ol class=\"ne-ol\"><li id=\"4177dedb9a1727ab3375d8467fb6f920_li_83\"><span class=\"ne-text\">条件成员访问：</span><code class=\"ne-code\"><span class=\"ne-text\">?.</span></code><span class=\"ne-text\">（如果该操作符前边不为空，则继续向后执行，否则不继续执行）</span></li></ol><ol start=\"2\" class=\"ne-ol\"><li id=\"b133d4da2859da170c434559b5ceda34_li_84\"><span class=\"ne-text\">类型转换：</span><code class=\"ne-code\"><span class=\"ne-text\">as</span></code></li></ol><p id=\"c2f8a44a9de114d551b6cb9360b19084_p_276\" class=\"ne-p\"><br></p><pre data-language=\"dart\" id=\"b1120071\" class=\"ne-codeblock language-dart\">void main() {\n  var person;\n  person = &quot;&quot;;\n  person = new Person();\n  (person as Person).work();\n}\nclass Person {\n  String name;\n  int age;\n  void work() {\n    print(&quot;work...&quot;); \n  }\n}</pre><p id=\"5e01eae6c8e0e41c350eff7c120f6c4d_p_277\" class=\"ne-p\"><br></p><ol start=\"3\" class=\"ne-ol\"><li id=\"99f0fc24a8a7fc5b19c032ca1390eafd_li_85\"><span class=\"ne-text\">是否指定类型：</span><code class=\"ne-code\"><span class=\"ne-text\">is</span></code><span class=\"ne-text\">，</span><code class=\"ne-code\"><span class=\"ne-text\">is!</span></code></li></ol><p id=\"fef395f1663a72149f43467aba9a9f0d_p_278\" class=\"ne-p\"><br></p><pre data-language=\"dart\" id=\"57e25bcc\" class=\"ne-codeblock language-dart\">void main() {\n  var person;\n  person = &quot;&quot;;\n  person = new Person();\n  if(person is Person) {\n    person.work();\n  }\n}\nclass Person {\n  String name;\n  int age;\n  void work() {\n    print(&quot;work...&quot;); \n  }\n}</pre><p id=\"f658905930ba3ab999e81f9ca3773cdd_p_279\" class=\"ne-p\"><br></p><ol start=\"4\" class=\"ne-ol\"><li id=\"6994039d2e96fc3c3c6e16a1606542dd_li_86\"><span class=\"ne-text\">级联操作：</span><code class=\"ne-code\"><span class=\"ne-text\">..</span></code></li></ol><p id=\"f7138c4e59ae2939e7ca22b018b3177c_p_280\" class=\"ne-p\"><br></p><pre data-language=\"dart\" id=\"4381f132\" class=\"ne-codeblock language-dart\">void main() {\n  var person = new Person();\n  person..name = &quot;Tom&quot; ..age = 20 ..work();\n  // 等价于\n  person.name = &quot;Tom&quot;;\n  person.age = 20;\n  person.work();\n}\nclass Person {\n  String name;\n  int age;\n  void work() {\n    print(&quot;work...&quot;); \n  }\n}</pre><p id=\"31f48e2ab2cc1fa560bafed1287af19b_p_281\" class=\"ne-p\"><br></p><h3 id=\"a3818357\"><span class=\"ne-text\">8.11 对象 </span><code class=\"ne-code\"><span class=\"ne-text\">call</span></code><span class=\"ne-text\"> 方法</span></h3><p id=\"2315f10f54bc7e13b39e40a7ef999847_p_282\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"9aeb66d6ca76f955224aeb8c90e0dea8_li_87\"><span class=\"ne-text\">如果类实现了 </span><code class=\"ne-code\"><span class=\"ne-text\">call()</span></code><span class=\"ne-text\"> 方法，则该类的对象可以作为方法使用</span></li></ul><p id=\"d8862285fa1c5254153b79d80f836d67_p_283\" class=\"ne-p\"><br></p><pre data-language=\"dart\" id=\"8ac7d2ff\" class=\"ne-codeblock language-dart\">void main() {\n  var person = new Person();\n  // person(&quot;张三&quot;, 30);\n  print(person(&quot;张三&quot;, 30));\n}\nclass Person {\n  String name;\n  int age;\n  // void call(String name, int age) {\n  //   print(&quot;Name is $name, Age is $age&quot;);\n  // }\n  String call(String name, int age) {\n    return &quot;Name is $name, Age is $age&quot;;\n  }\n}</pre><p id=\"d643b961309916d9e6d944f2fc2ef443_p_284\" class=\"ne-p\"><br></p><h2 id=\"a58aed29\"><span class=\"ne-text\">九、面向对象扩展</span></h2><p id=\"c667c8fb4a9b06dea1ac969618387647_p_285\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"297d760a11647fd51bb42dd9febba454_li_88\"><span class=\"ne-text\">继承，继承中的构造方法</span></li></ul><ul class=\"ne-ul\"><li id=\"ecb26e731050f6c35c47ae279a616be6_li_89\"><span class=\"ne-text\">抽象类</span></li></ul><ul class=\"ne-ul\"><li id=\"9707d878adfc9f14b866140d0ef6c053_li_90\"><span class=\"ne-text\">接口</span></li></ul><ul class=\"ne-ul\"><li id=\"4639856470db88c2e16d235203384bb9_li_91\"><code class=\"ne-code\"><span class=\"ne-text\">Mixins</span></code><span class=\"ne-text\">，操作符的覆写（操作符/运算符重载）</span></li></ul><p id=\"0a119ed9fd147db9466e04386b6ded7b_p_286\" class=\"ne-p\"><br></p><h3 id=\"cd14c6c5\"><span class=\"ne-text\">9.1 继承</span></h3><p id=\"4b09dea2a885c00a614eef1d25a58513_p_287\" class=\"ne-p\"><br></p><ol class=\"ne-ol\"><li id=\"a8ff3ba3788ba80a69de7dc2ca6269b3_li_92\"><span class=\"ne-text\">使用关键字 </span><code class=\"ne-code\"><span class=\"ne-text\">extends</span></code><span class=\"ne-text\"> 继承一个类</span></li></ol><ol start=\"2\" class=\"ne-ol\"><li id=\"b7f4998e5a4070c23da43eb7be23ffec_li_93\"><span class=\"ne-text\">子类会继承父类可见的属性和方法（私有属性无法继承），不会继承构造方法</span></li></ol><ol start=\"3\" class=\"ne-ol\"><li id=\"2fcedb2fae4763694c4cc84bf7883da7_li_94\"><span class=\"ne-text\">子类能够复写父类的方法、</span><code class=\"ne-code\"><span class=\"ne-text\">getter</span></code><span class=\"ne-text\"> 和 </span><code class=\"ne-code\"><span class=\"ne-text\">setter</span></code></li></ol><ol start=\"4\" class=\"ne-ol\"><li id=\"7aecc81cfacf39d61a1b98b77dbd131f_li_95\"><span class=\"ne-text\">单继承，多态性（例如可以重写 </span><code class=\"ne-code\"><span class=\"ne-text\">toString</span></code><span class=\"ne-text\"> 方法）</span></li></ol><p id=\"6d7ea3ddda2a454c5683711790958ce9_p_288\" class=\"ne-p\"><br></p><pre data-language=\"dart\" id=\"6d7ec211\" class=\"ne-codeblock language-dart\">// person.dart\nclass Person {\n  String name;\n  int age;\n  String _birthday;\n  bool get isAudit =&gt; age &gt; 10;\n  void run() {\n    print(&quot;Person run&quot;);\n  }\n}</pre><p id=\"eaf89275095ca133033e98ed4b1e7f4f_p_289\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"41d4a0d7d9a41d898f0b1775accaa8a8_li_96\"><a href=\"/override \" data-href=\"/override \" class=\"ne-link\"><strong><em><span class=\"ne-text\">@override </span></em></strong></a><strong><em><span class=\"ne-text\"> </span></em></strong><span class=\"ne-text\"> 表示下面的计算属性或方法是从父类中复写过来的，并不是自己的</span></li></ul><ul class=\"ne-ul\"><li id=\"b8c00fb6fdf8a6c96b0e3ec9c64071df_li_97\"><code class=\"ne-code\"><strong><span class=\"ne-text\">super.run();</span></strong></code><span class=\"ne-text\">  </span><code class=\"ne-code\"><strong><em><span class=\"ne-text\">super</span></em></strong></code><span class=\"ne-text\"> 表示在子类中调用父类的方法，相当于 </span><code class=\"ne-code\"><strong><em><span class=\"ne-text\">this</span></em></strong></code></li></ul><p id=\"00b91516bf5c5ea740befa2a58c086c0_p_290\" class=\"ne-p\"><br></p><pre data-language=\"dart\" id=\"ca9f4b98\" class=\"ne-codeblock language-dart\">// student.dart\nimport &quot;person.dart&quot;;\n\nvoid main() {\n  var student = new Student();\n  student.study();\n  student.name = &quot;Tom&quot;;\n  student.age = 16;\n  print(student.isAudit);\n  student.run();\n}\nclass Student extends Person {\n  void study() {\n    print(&quot;Student study...&quot;); \n  }\n  // @override 表示下面的计算属性或方法是从父类中复写过来的，并不是自己的\n  @override\n  bool get isAudit =&gt; age &gt; 15;\n\n  @override\n  void run() {\n    // super.run(); // super表示在子类中调用父类的方法 \n    print(&quot;Student run...&quot;);\n  }\n}</pre><p id=\"ad203e3a237b08b1d0d926597eaff133_p_291\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"5e16ce9117d60001877fc595218fc97a_li_98\"><span class=\"ne-text\">多态</span></li></ul><p id=\"b97212b73dbf30e62a224a0cb8196f65_p_292\" class=\"ne-p\"><br></p><pre data-language=\"dart\" id=\"fc330c4f\" class=\"ne-codeblock language-dart\">// 子类的实例可以赋值给父类的一个应用\nvoid main() {\n    Person person = new Student();\n    if(person is Student) {\n      person.study();\n    }\n}</pre><p id=\"142a0ac02c890c3b4e4f9cecaa5f0275_p_293\" class=\"ne-p\"><br></p><h3 id=\"0b9e8a5f\"><span class=\"ne-text\">9.2 继承中的构造方法</span></h3><p id=\"fe7fc0ab45dac8012eef4e5feecabfcd_p_294\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"0dcafa4b9a3e0f2c9c87ce2ae894abca_li_99\"><span class=\"ne-text\">继承中的构造方法</span></li></ul><p id=\"77fe4e42c2d2d366d1accde6e1c1af59_p_295\" class=\"ne-p\"><br></p><ol class=\"ne-ol\"><li id=\"e57673e247e32d1ead654b853b550c1d_li_100\"><span class=\"ne-text\">子类中的构造方法默认会调用父类的无名无参的构造方法</span></li></ol><ol start=\"2\" class=\"ne-ol\"><li id=\"4bebb0d014537a2673d39404dea93244_li_101\"><span class=\"ne-text\">如果父类没有无名无参的构造方法，则需要显示调用父类构造方法</span></li></ol><ol start=\"3\" class=\"ne-ol\"><li id=\"fb8a41c7c04f0b76e665bdf052acdf19_li_102\"><span class=\"ne-text\">在构造方法参数后使用 </span><code class=\"ne-code\"><span class=\"ne-text\">:</span></code><span class=\"ne-text\"> 显示调用父类构造方法</span></li></ol><p id=\"1db0ebf876a15c92c914cf3cdc862b64_p_296\" class=\"ne-p\"><br></p><pre data-language=\"dart\" id=\"7eb8cabc\" class=\"ne-codeblock language-dart\">void main() {\n  var student = new Student(&quot;Tom&quot;);\n  print(student.name);\n}\nclass Person {\n  String name;\n  Person(this.name);\n  Person.withName(this.name);\n}\nclass Student extends Person {\n  int age;\n\n//  Student(String name) : super(name);\n  Student(String name) : super.withName(name);\n}</pre><p id=\"4d03ec137080c7a0ce05f378a2fc9078_p_297\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"5a156dfe63b514adbea020d156197a61_li_103\"><span class=\"ne-text\">构造方法的执行顺序</span></li></ul><p id=\"6b7d4d1ce5df30f76ec280811854eb6a_p_298\" class=\"ne-p\"><br></p><ol class=\"ne-ol\"><li id=\"30824f9b63253c539ba7d9115378e2db_li_104\"><span class=\"ne-text\">父类的构造方法在子类构造方法体开始执行的位置调用</span></li></ol><ol start=\"2\" class=\"ne-ol\"><li id=\"02d67090e5196c395c5cc7636dad33aa_li_105\"><span class=\"ne-text\">如果有初始化列表，初始化列表会在父类构造方法之前执行</span></li></ol><p id=\"f7dab119a6de9c02eceeeaa20c58303b_p_299\" class=\"ne-p\"><br></p><pre data-language=\"dart\" id=\"a54523c7\" class=\"ne-codeblock language-dart\">void main() {\n  var student = new Student(&quot;Tom&quot;, &quot;Male&quot;);\n  print(student.name);\n}\nclass Person {\n  String name;\n  Person(this.name);\n  Person.withName(this.name);\n}\nclass Student extends Person {\n  int age;\n  final String gender;\n//  Student(String name) : super(name);\n  // 初始化列表必须放在显示调用父类构造方法的前面\n  Student(String name, String genderName) : gender = genderName, super.withName(name);\n}</pre><p id=\"3b1704c33fc6d6f8a8da83e196debd0d_p_300\" class=\"ne-p\"><br></p><h3 id=\"7fc58712\"><span class=\"ne-text\">9.3 抽象类</span></h3><p id=\"7fcd20ea8e49dccbe59daa613949d790_p_301\" class=\"ne-p\"><br></p><ol class=\"ne-ol\"><li id=\"41fd3bf87627d65866bf92941cd574e3_li_106\"><span class=\"ne-text\">抽象类使用关键字 </span><code class=\"ne-code\"><span class=\"ne-text\">abstract</span></code><span class=\"ne-text\"> 表示，不能直接被实例化</span></li></ol><ol start=\"2\" class=\"ne-ol\"><li id=\"5f3c53c853d8deeb2fc28ee4fcc1f448_li_107\"><span class=\"ne-text\">抽象方法不用 </span><code class=\"ne-code\"><span class=\"ne-text\">abstract</span></code><span class=\"ne-text\"> 修饰，无实现</span></li></ol><ol start=\"3\" class=\"ne-ol\"><li id=\"480cd42eca8f685182d4e26287de175a_li_108\"><span class=\"ne-text\">抽象类可以没有抽象方法</span></li></ol><ol start=\"4\" class=\"ne-ol\"><li id=\"3c15fb1d7aaaf46dee81f3492f81b226_li_109\"><span class=\"ne-text\">有抽象方法的类一定得声明为抽象类</span></li></ol><p id=\"97a3a563936e81f5bef06c12d11ccafb_p_302\" class=\"ne-p\"><br></p><p id=\"32418971d5e631b9940f4ead09ebdb21_p_303\" class=\"ne-p\"><span class=\"ne-text\">抽象类更多用来作为接口使用</span></p><p id=\"19e2a238dbc7e25bbba74d975405d802_p_304\" class=\"ne-p\"><br></p><pre data-language=\"dart\" id=\"2a8264a1\" class=\"ne-codeblock language-dart\">void main() {\n  var person = new Student();\n  person.run();\n}\nabstract class Person {\n  void run();\n}\nclass Student extends Person {\n  @override\n  void run() {\n    print(&quot;run...&quot;);\n  }\n}</pre><p id=\"8a0b3cc3ee29e653e154dc38bee23f35_p_305\" class=\"ne-p\"><br></p><h3 id=\"08f04307\"><span class=\"ne-text\">9.4 接口</span></h3><p id=\"287a7991d15a9423698de5405daff209_p_306\" class=\"ne-p\"><br></p><ol class=\"ne-ol\"><li id=\"d81d35b056fd412c9308d956b09483ae_li_110\"><span class=\"ne-text\">在 </span><code class=\"ne-code\"><span class=\"ne-text\">dart</span></code><span class=\"ne-text\"> 中，类和接口是统一的，类就是接口</span></li></ol><ol start=\"2\" class=\"ne-ol\"><li id=\"b79a525d836fabf9188863a060278be5_li_111\"><span class=\"ne-text\">每个类都隐式的定义了一个包含所有实例成员的接口</span></li></ol><ol start=\"3\" class=\"ne-ol\"><li id=\"2a0970b0f2e6eb64d9299dadf63bc7e2_li_112\"><span class=\"ne-text\">如果是复用已有类的实现，使用继承（</span><code class=\"ne-code\"><span class=\"ne-text\">extends</span></code><span class=\"ne-text\">）</span></li></ol><ol start=\"4\" class=\"ne-ol\"><li id=\"489f7e97148cf7ab74e5b2e2f03bfded_li_113\"><span class=\"ne-text\">如果只是使用已有类的外在行为(一些行为)，则使用接口（</span><code class=\"ne-code\"><span class=\"ne-text\">implements</span></code><span class=\"ne-text\">）</span></li></ol><p id=\"6e083a5926a9936a23902c87e04b4686_p_307\" class=\"ne-p\"><br></p><pre data-language=\"dart\" id=\"46d3911d\" class=\"ne-codeblock language-dart\">void main() {\n  var student = new Student();\n}\nclass Person {\n  String name;\n  int get age =&gt; 18;\n  void run() {\n    print(&quot;Person run...&quot;);\n  }\n}\nclass Student implements Person {\n  @override\n  String name;\n\n  @override\n  // TODO: implement age\n  int get age =&gt; 15;\n\n  @override\n  void run() {\n    // TODO: implement run\n  }\n}</pre><p id=\"711fcb79bc202f54137cc04fb6a12e2c_p_308\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"86bcc2305929b3e26eee22f26724b85e_li_114\"><span class=\"ne-text\">更好的写法，利用抽象类</span></li></ul><p id=\"0375f6a488aa68e79b4a160ec7f8fa4d_p_309\" class=\"ne-p\"><br></p><pre data-language=\"dart\" id=\"e985592d\" class=\"ne-codeblock language-dart\">void main() {\n  var student = new Student();\n  student.run();\n}\nabstract class Person {\n  void run();\n}\nclass Student implements Person {\n  @override\n  void run() {\n    print(&quot;Student run...&quot;);\n  }\n}</pre><p id=\"a56b84e031e02e5715ff0d6aadb83c0e_p_310\" class=\"ne-p\"><br></p><h3 id=\"cc3f95f0\"><span class=\"ne-text\">9.5 </span><code class=\"ne-code\"><span class=\"ne-text\">Mixins</span></code></h3><p id=\"1539b3e1473877a8fdb76e7e9fab2f17_p_311\" class=\"ne-p\"><br></p><ol class=\"ne-ol\"><li id=\"397aef9b56499c9ee867cfc0fb371f9e_li_115\"><code class=\"ne-code\"><span class=\"ne-text\">Mixins</span></code><span class=\"ne-text\"> 类似于多继承，是在多类继承中重用一个类代码的方式</span></li></ol><p id=\"f5c413e64e1bf60658b94f4d5ffba94d_p_312\" class=\"ne-p\"><br></p><pre data-language=\"dart\" id=\"15716d08\" class=\"ne-codeblock language-dart\">void main() {\n  var d = new D();\n  d.a();\n  d.b();\n  d.c();\n}\n\nclass A {\n  void a() {\n    print(&quot;A.a()...&quot;);\n  }\n}\nclass B {\n  void a() {\n    print(&quot;B.a()...&quot;);\n  }\n  void b() {\n    print(&quot;B.b()...&quot;);\n  }\n}\nclass C {\n  void a() {\n    print(&quot;C.a()...&quot;);\n  }\n  void b() {\n    print(&quot;C.b()...&quot;);\n  }\n  void c() {\n    print(&quot;C.c()...&quot;);\n  }\n}\n// 必须先有继承，才能使用 Mixins；如果使用 Mixins 的几个类中有相同的方法，则处于最后一个的方法优先被调用\nclass D extends A with B, C {\n\n}</pre><p id=\"8ed534170f3ad30be7425327269966a1_p_313\" class=\"ne-p\"><br></p><ol start=\"2\" class=\"ne-ol\"><li id=\"20e4f6f1ff3e3b87360f3b4d36446512_li_116\"><span class=\"ne-text\">作为 </span><code class=\"ne-code\"><span class=\"ne-text\">Mixin</span></code><span class=\"ne-text\"> 的类不能有显示声明构造方法</span></li></ol><ol start=\"3\" class=\"ne-ol\"><li id=\"29ccd03d31de2c030f3fbf3b6f3bc2da_li_117\"><span class=\"ne-text\">作为 </span><code class=\"ne-code\"><span class=\"ne-text\">Mixin</span></code><span class=\"ne-text\"> 的类只能继承自 </span><code class=\"ne-code\"><span class=\"ne-text\">Object</span></code></li></ol><ol start=\"4\" class=\"ne-ol\"><li id=\"25a3f8ad808fd9a95a5ff9e3e857ce33_li_118\"><span class=\"ne-text\">使用关键字 </span><code class=\"ne-code\"><span class=\"ne-text\">with</span></code><span class=\"ne-text\"> 连接一个或多个 </span><code class=\"ne-code\"><span class=\"ne-text\">Mixin</span></code></li></ol><p id=\"723be51dabd620a0060235545593c061_p_314\" class=\"ne-p\"><br></p><p id=\"8f8c79ef270c639ad317f5c6e2b64281_p_315\" class=\"ne-p\"><span class=\"ne-text\">如果是由其它类组装而来的，没有自己的属性或方法，则可以简写</span></p><p id=\"024a8421e8afb441225906c83320d8b8_p_316\" class=\"ne-p\"><br></p><pre data-language=\"dart\" id=\"dc394d0d\" class=\"ne-codeblock language-dart\">void main() {\n\n}\nabstract class Engine {\n  void work();\n}\nclass OilEngine implements Engine {\n  @override\n  void work() {\n    print(&quot;Work with qil...&quot;);\n  }\n}\nclass ElectricEngine implements Engine {\n  @override\n  void work() {\n    print(&quot;Work with electric...&quot;);\n  }\n}\nclass Tyre {\n  String name;\n  void run() {}\n}\n// 如果是由其它类组装而来的，没有自己的属性或方法，则可以简写\nclass Car = Tyre with ElectricEngine;\n// 完整写法\n//class Car extends Tyre with ElectricEngine {}\nclass Bus = Tyre with OilEngine;</pre><p id=\"7a2d0c77d4747b965eb8ad5f6277e1bb_p_317\" class=\"ne-p\"><br></p><h3 id=\"13db85ad\"><span class=\"ne-text\">9.6 操作符覆写(重载运算符/运算符重载)</span></h3><p id=\"10c43070f7361810f0a11bc380b5c8d3_p_318\" class=\"ne-p\"><br></p><ol class=\"ne-ol\"><li id=\"159301a2d0382eedf9903cfeb63f3872_li_119\"><span class=\"ne-text\">覆写操作符需要在类中定义</span></li></ol><p id=\"4f67f2156dee24fd9a5d4af3856a8608_p_319\" class=\"ne-p\"><br></p><pre data-language=\"dart\" id=\"14ee5233\" class=\"ne-codeblock language-dart\">返回类型 operator 操作符 (参数1, 参数2, ...) {\n    实现体...\n    return 返回值\n}</pre><p id=\"d7deb648382d2e3c8fc5570428e67bdf_p_320\" class=\"ne-p\"><br></p><ol start=\"2\" class=\"ne-ol\"><li id=\"931f7d67ddff31666cc42f774b68277a_li_120\"><span class=\"ne-text\">如果覆写 </span><code class=\"ne-code\"><span class=\"ne-text\">==</span></code><span class=\"ne-text\"> ，还需要覆写对象的 </span><code class=\"ne-code\"><span class=\"ne-text\">hashCode</span></code><span class=\"ne-text\"> </span><code class=\"ne-code\"><span class=\"ne-text\">getter</span></code><span class=\"ne-text\"> 方法</span></li></ol><ol start=\"3\" class=\"ne-ol\"><li id=\"f3e19ddc3719ac1d90f0900519163aee_li_121\"><span class=\"ne-text\">可覆写的操作符</span></li></ol><table id=\"589657d9\" class=\"ne-table\" style=\"width: 748px\"><tbody><tr style=\"height: 33px\"><td width=\"187\"><p id=\"ufd9a1165\" class=\"ne-p\" style=\"text-align: left\"><strong><em><span class=\"ne-text\">&lt;</span></em></strong></p></td><td width=\"187\"><p id=\"u314356df\" class=\"ne-p\" style=\"text-align: left\"><strong><em><span class=\"ne-text\">+</span></em></strong></p></td><td width=\"187\"><p id=\"u3697954c\" class=\"ne-p\" style=\"text-align: left\"><strong><em><span class=\"ne-text\">|</span></em></strong></p></td><td width=\"187\"><p id=\"u637fe1a4\" class=\"ne-p\" style=\"text-align: left\"><strong><em><span class=\"ne-text\">[]</span></em></strong></p></td></tr><tr style=\"height: 33px\"><td width=\"187\"><p id=\"u02cb827a\" class=\"ne-p\" style=\"text-align: left\"><strong><em><span class=\"ne-text\">&gt;</span></em></strong></p></td><td width=\"187\"><p id=\"u9687a534\" class=\"ne-p\" style=\"text-align: left\"><strong><em><span class=\"ne-text\">/</span></em></strong></p></td><td width=\"187\"><p id=\"ue01fbf78\" class=\"ne-p\" style=\"text-align: left\"><strong><em><span class=\"ne-text\">^</span></em></strong></p></td><td width=\"187\"><p id=\"u21be8106\" class=\"ne-p\" style=\"text-align: left\"><strong><em><span class=\"ne-text\">[]=</span></em></strong></p></td></tr><tr style=\"height: 33px\"><td width=\"187\"><p id=\"u022afaca\" class=\"ne-p\" style=\"text-align: left\"><strong><em><span class=\"ne-text\">&lt;=</span></em></strong></p></td><td width=\"187\"><p id=\"ubcb1da3f\" class=\"ne-p\" style=\"text-align: left\"><strong><em><span class=\"ne-text\">~/</span></em></strong></p></td><td width=\"187\"><p id=\"u3c7d48f2\" class=\"ne-p\" style=\"text-align: left\"><strong><em><span class=\"ne-text\">&amp;</span></em></strong></p></td><td width=\"187\"><p id=\"u1f18bb45\" class=\"ne-p\" style=\"text-align: left\"><strong><em><span class=\"ne-text\">~</span></em></strong></p></td></tr><tr style=\"height: 33px\"><td width=\"187\"><p id=\"u6982d547\" class=\"ne-p\" style=\"text-align: left\"><strong><em><span class=\"ne-text\">&gt;=</span></em></strong></p></td><td width=\"187\"><p id=\"u8af9c0f5\" class=\"ne-p\" style=\"text-align: left\"><strong><em><span class=\"ne-text\">*</span></em></strong></p></td><td width=\"187\"><p id=\"u941fc1d8\" class=\"ne-p\" style=\"text-align: left\"><strong><em><span class=\"ne-text\">&lt;&lt;</span></em></strong></p></td><td width=\"187\"><p id=\"uea73f148\" class=\"ne-p\" style=\"text-align: left\"><strong><em><span class=\"ne-text\">==</span></em></strong></p></td></tr><tr style=\"height: 33px\"><td width=\"187\"><p id=\"u988e412c\" class=\"ne-p\" style=\"text-align: left\"><strong><em><span class=\"ne-text\">-</span></em></strong></p></td><td width=\"187\"><p id=\"u63510c35\" class=\"ne-p\" style=\"text-align: left\"><strong><em><span class=\"ne-text\">%</span></em></strong></p></td><td width=\"187\"><p id=\"ud6736d51\" class=\"ne-p\" style=\"text-align: left\"><span class=\"ne-text\">&gt;&gt;</span></p></td><td width=\"187\"></td></tr></tbody></table><p id=\"386408b19add78b5d4538676e07dc69f_p_321\" class=\"ne-p\"><br></p><pre data-language=\"dart\" id=\"ae3e4fb9\" class=\"ne-codeblock language-dart\">void main() {\n  var person1 = new Person(18);\n  var person2 = new Person(20);\n  var person3 = new Person(20);\n  print(person1 &gt; person2);\n  print(person1[&quot;age&quot;]);\n  print(person2 == person3);\n}\n\nclass Person {\n  int age;\n  Person(this.age);\n\n  // 覆写 &gt;\n  bool operator &gt;(Person person) {\n    return this.age &gt; person.age;\n  }\n  // 覆写 []\n  int operator [](String str) {\n    if(&quot;age&quot; == str) {\n      return age;\n    }\n    return 0;\n  }\n  // 覆写等号，重写hashCode，右键打开generate选项然后选择\n  @override\n  bool operator ==(Object other) =&gt;\n      identical(this, other) ||\n          other is Person &amp;&amp;\n              runtimeType == other.runtimeType &amp;&amp;\n              age == other.age;\n\n  @override\n  int get hashCode =&gt; age.hashCode;\n}</pre><p id=\"73ec4e895ea3387f14965acf6166c09a_p_322\" class=\"ne-p\"><br></p><h2 id=\"65d308b2\"><span class=\"ne-text\">十、枚举</span></h2><p id=\"8a93c62f5bf11a8467b27277718204ed_p_323\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"d2bd4251ccace6e00d7f31f03e164bd0_li_122\"><span class=\"ne-text\">枚举</span></li></ul><p id=\"deca07778d4970b7e735a77c95d1efec_p_324\" class=\"ne-p\"><br></p><ol class=\"ne-ol\"><li id=\"3b4cb8383e10f2fb13c3d1ad7f9cbf58_li_123\"><span class=\"ne-text\">枚举是一种有穷序列集的数据类型</span></li></ol><ol start=\"2\" class=\"ne-ol\"><li id=\"1599e7995111277d4eabadcab3234621_li_124\"><span class=\"ne-text\">使用关键字 </span><code class=\"ne-code\"><span class=\"ne-text\">enum</span></code><span class=\"ne-text\"> 定义一个枚举</span></li></ol><ol start=\"3\" class=\"ne-ol\"><li id=\"cd51041540e1a6b1150d4229137d1419_li_125\"><span class=\"ne-text\">常用于代替常量，控制语句等</span></li></ol><p id=\"869206ecba3f946b7a6ba2e46f91db50_p_325\" class=\"ne-p\"><br></p><pre data-language=\"dart\" id=\"2e8b3bc7\" class=\"ne-codeblock language-dart\">void main() {\n  var currentSeason = Season.spring;\n  print(currentSeason.index);\n  switch(currentSeason) {\n    case Season.spring:\n      print(&quot;1-3月&quot;);\n      break;\n    case Season.summer:\n      print(&quot;4-6月&quot;);\n      break;\n    case Season.autumn:\n      print(&quot;7-9月&quot;);\n      break;\n    case Season.winter:\n      print(&quot;10-12月&quot;);\n      break;\n  }\n}\nenum Season {\n  spring,\n  summer,\n  autumn,\n  winter\n}</pre><p id=\"47a5f0c513179a8c0b441643872a29bd_p_326\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"5822d4862081dd39ce4a7f4012d0a985_li_126\"><code class=\"ne-code\"><span class=\"ne-text\">Dart</span></code><span class=\"ne-text\"> 枚举特性</span></li></ul><p id=\"1260835a1e832a2cbb7274deda8a76af_p_327\" class=\"ne-p\"><br></p><ol class=\"ne-ol\"><li id=\"4b7c9e5586daa1631a1a4b33283fe2ab_li_127\"><code class=\"ne-code\"><span class=\"ne-text\">index</span></code><span class=\"ne-text\"> 从 </span><code class=\"ne-code\"><span class=\"ne-text\">0</span></code><span class=\"ne-text\"> 开始，依次累加</span></li></ol><ol start=\"2\" class=\"ne-ol\"><li id=\"239c258da39a5d926a220b7cefa6aeab_li_128\"><span class=\"ne-text\">不能指定原始值</span></li></ol><ol start=\"3\" class=\"ne-ol\"><li id=\"43af6b45700c65b7614508cb0961bac1_li_129\"><span class=\"ne-text\">不能添加方法</span></li></ol><p id=\"41eae880938c5eadbe95b939a2a3507a_p_328\" class=\"ne-p\"><br></p><h2 id=\"8f5e2369\"><span class=\"ne-text\">十一、泛型</span></h2><p id=\"367e571e142935bde23beca7770f783a_p_329\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"75db1dffa12aff67c71dbd97610149b5_li_130\"><span class=\"ne-text\">泛型</span></li></ul><p id=\"fcbe9387308e2fc9a13c5e4c70f82087_p_330\" class=\"ne-p\"><br></p><ol class=\"ne-ol\"><li id=\"4796b3d658a441993016bc5f15c0cd8f_li_131\"><code class=\"ne-code\"><span class=\"ne-text\">Dart</span></code><span class=\"ne-text\"> 中的类型是可选的，可使用泛型限定类型</span></li></ol><ol start=\"2\" class=\"ne-ol\"><li id=\"c9487d244be44f1ac17422dd4a03ee47_li_132\"><span class=\"ne-text\">使用泛型能够有效的减少代码重复</span></li></ol><p id=\"df5870a4b055e4cd4943273fac462f51_p_331\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"3288cb0a807727c403a185e940426f75_li_133\"><span class=\"ne-text\">泛型的使用</span></li></ul><p id=\"103e6bdcb2dcc51c8de25c5d976a9f93_p_332\" class=\"ne-p\"><br></p><ol class=\"ne-ol\"><li id=\"d0ed0dd82c573875fd8bb6c97957cdd9_li_134\"><span class=\"ne-text\">类的泛型</span></li></ol><p id=\"b4252b6b2deddfea7cfc17616ff2e148_p_333\" class=\"ne-p\"><br></p><pre data-language=\"dart\" id=\"e6da918c\" class=\"ne-codeblock language-dart\">void main() {\n  var utils = new Utils&lt;String&gt;();\n  utils.put(&quot;element&quot;);\n}\nclass Utils&lt;T&gt; {\n  T element;\n  void put(T element) {\n    this.element = element;\n  }\n}</pre><p id=\"d7e3387b899cd18519ad68c1e5005c09_p_334\" class=\"ne-p\"><br></p><ol start=\"2\" class=\"ne-ol\"><li id=\"66bc18383db18cb7bad90dea170a45e8_li_135\"><span class=\"ne-text\">方法的泛型</span></li></ol><p id=\"848d57ddbbb6aa5c588defcda9c65bc0_p_335\" class=\"ne-p\"><br></p><pre data-language=\"dart\" id=\"3a0dc9ac\" class=\"ne-codeblock language-dart\">void main() {\n  var utils = new Utils();\n  utils.put&lt;String&gt;(&quot;element&quot;);\n}\nclass Utils {\n  void put&lt;T&gt;(T element) {\n    print(element);\n  }\n}</pre><p id=\"41b79b76dff04c782ee1693f129a0de3_p_336\" class=\"ne-p\"><br></p><h2 id=\"87ad53d5\"><span class=\"ne-text\">十二、库</span></h2><p id=\"0a056e448975c60bc9085a7f02af8f3e_p_337\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"3ec995dbb7b9e41da89ba0f3770d5a31_li_136\"><span class=\"ne-text\">常用库</span></li></ul><p id=\"d8f5f3568d534b5e9cd994fed93e7e75_p_338\" class=\"ne-p\"><br></p><ol class=\"ne-ol\"><li id=\"d18678d79ab95cc02b2f66daddabac49_li_137\"><code class=\"ne-code\"><span class=\"ne-text\">Dart web</span></code><span class=\"ne-text\"> 应用通常使用 </span><code class=\"ne-code\"><span class=\"ne-text\">dart:html</span></code><span class=\"ne-text\"> 库</span></li></ol><ol start=\"2\" class=\"ne-ol\"><li id=\"e353d0d84a2918e47b3e328d13331cbe_li_138\"><code class=\"ne-code\"><span class=\"ne-text\">dart:core</span></code><span class=\"ne-text\"> 库定义了 </span><code class=\"ne-code\"><span class=\"ne-text\">num</span></code><span class=\"ne-text\">, </span><code class=\"ne-code\"><span class=\"ne-text\">int</span></code><span class=\"ne-text\">, 和 </span><code class=\"ne-code\"><span class=\"ne-text\">double</span></code><span class=\"ne-text\"> 类，这些类 定义一些操作数字的基础功能。</span></li></ol><ol start=\"3\" class=\"ne-ol\"><li id=\"8b9f468ea8cec76a487545ab6079825d_li_139\"><span class=\"ne-text\">异步编程通常使用回调函数，但是 </span><code class=\"ne-code\"><span class=\"ne-text\">Dart</span></code><span class=\"ne-text\"> 提供了另外的 选择： </span><a href=\"https://api.dartlang.org/stable/dart-async/Future-class.html\" data-href=\"https://api.dartlang.org/stable/dart-async/Future-class.html\" target=\"_blank\" class=\"ne-link\"><strong><em><span class=\"ne-text\">Future</span></em></strong></a><span class=\"ne-text\"> 和 </span><a href=\"https://api.dartlang.org/stable/dart-async/Stream-class.html\" data-href=\"https://api.dartlang.org/stable/dart-async/Stream-class.html\" target=\"_blank\" class=\"ne-link\"><strong><em><span class=\"ne-text\">Stream</span></em></strong></a><span class=\"ne-text\"> 对象。 </span><code class=\"ne-code\"><span class=\"ne-text\">Future</span></code><span class=\"ne-text\"> 和 </span><code class=\"ne-code\"><span class=\"ne-text\">JavaScript</span></code><span class=\"ne-text\"> 中的 </span><code class=\"ne-code\"><span class=\"ne-text\">Promise</span></code><span class=\"ne-text\"> 类似，代表在将来某个时刻会返回一个 结果。</span><code class=\"ne-code\"><span class=\"ne-text\">Stream</span></code><span class=\"ne-text\"> 是一种用来获取一些列数据的方式，例如 </span><code class=\"ne-code\"><span class=\"ne-text\">事件流</span></code><span class=\"ne-text\">。 </span><code class=\"ne-code\"><span class=\"ne-text\">Future</span></code><span class=\"ne-text\">, </span><code class=\"ne-code\"><span class=\"ne-text\">Stream</span></code><span class=\"ne-text\">, 以及其他异步操作的类在 </span><a href=\"https://api.dartlang.org/stable/dart-async/dart-async-library.html\" data-href=\"https://api.dartlang.org/stable/dart-async/dart-async-library.html\" target=\"_blank\" class=\"ne-link\"><strong><em><span class=\"ne-text\">dart:async</span></em></strong></a><span class=\"ne-text\"> 库中。</span></li></ol><ol start=\"4\" class=\"ne-ol\"><li id=\"a8b79ec246fe8bf47502a1426052a0dc_li_140\"><code class=\"ne-code\"><span class=\"ne-text\">Math</span></code><span class=\"ne-text\"> 库提供了常见的数学运算功能，例如 </span><code class=\"ne-code\"><span class=\"ne-text\">sine</span></code><span class=\"ne-text\"> 和 </span><code class=\"ne-code\"><span class=\"ne-text\">cosine</span></code><span class=\"ne-text\">， </span><code class=\"ne-code\"><span class=\"ne-text\">最大值</span></code><span class=\"ne-text\">、</span><code class=\"ne-code\"><span class=\"ne-text\">最小值等</span></code><span class=\"ne-text\">，还有各种常量 例如 </span><code class=\"ne-code\"><span class=\"ne-text\">pi</span></code><span class=\"ne-text\"> 和 </span><code class=\"ne-code\"><span class=\"ne-text\">e</span></code><span class=\"ne-text\"> 等。</span><code class=\"ne-code\"><span class=\"ne-text\">Math</span></code><span class=\"ne-text\"> 库中 的大部分函数都是顶级方法。导入 </span><code class=\"ne-code\"><span class=\"ne-text\">dart:math</span></code><span class=\"ne-text\"> 就可以使用 </span><code class=\"ne-code\"><span class=\"ne-text\">Math</span></code><span class=\"ne-text\"> 库了</span></li></ol><p id=\"f140694be8554ab7380456708abcd9fc_p_339\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"e403524ddb7e2f7695524618fe7ff1fe_li_141\"><span class=\"ne-text\">如果导入的两个库具有冲突的标识符，则可以使用库的前缀来区分</span></li></ul><p id=\"f9a30ee34e0f83179be8cb5e4158d0bf_p_340\" class=\"ne-p\"><br></p><pre data-language=\"dart\" id=\"36f03bec\" class=\"ne-codeblock language-dart\">import 'package:lib1/lib1.dart';\nimport 'package:lib2/lib2.dart' as lib2;\n// ...\nElement element1 = new Element();           // Uses Element from lib1.\nlib2.Element element2 = new lib2.Element(); // Uses Element from lib2.</pre><p id=\"58c8e4945e151873b2addcbc0a5ecc7b_p_341\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"dff68f143f67a15c606b57836c55588b_li_142\"><span class=\"ne-text\">导入库的一部分</span></li></ul><p id=\"b0ef2ce25375794a88fa9f52e7db5b09_p_342\" class=\"ne-p\"><br></p><p id=\"8d9552ff8b9b035d25f298a739a4e3c8_p_343\" class=\"ne-p\"><span class=\"ne-text\">如果你只使用库的一部分功能，则可以选择需要导入的 内容。例如：</span></p><p id=\"4252c262ba6e07a3ea03922001409458_p_344\" class=\"ne-p\"><br></p><pre data-language=\"dart\" id=\"46be027e\" class=\"ne-codeblock language-dart\">// Import only foo.\nimport 'package:lib1/lib1.dart' show foo;\n\n// Import all names EXCEPT foo.\nimport 'package:lib2/lib2.dart' hide foo;</pre><p id=\"907fcc622f0cb0469e548c6f5829004f_p_345\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"d077ce50b62086c2f877cfe6d0840f4d_li_143\"><span class=\"ne-text\">延迟载入库</span></li></ul><p id=\"24a645574b35969fd9fc73ce231749f5_p_346\" class=\"ne-p\"><br></p><p id=\"325d761e7972bfab2f755a1e3ed17ea0_p_347\" class=\"ne-p\"><code class=\"ne-code\"><span class=\"ne-text\">Deferred loading</span></code><span class=\"ne-text\"> (也称之为 </span><code class=\"ne-code\"><span class=\"ne-text\">lazy loading</span></code><span class=\"ne-text\">) 可以让应用在需要的时候再 加载库。 下面是一些使用延迟加载库的场景：</span></p><p id=\"8d4b271613686a2d1064c6b308ba1fa3_p_348\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"6506a4b068398aad74bdde688eed9038_li_144\"><span class=\"ne-text\">减少 </span><code class=\"ne-code\"><span class=\"ne-text\">APP</span></code><span class=\"ne-text\"> 的启动时间。</span></li></ul><ul class=\"ne-ul\"><li id=\"95d13e9d3dcbe2396f19a9f9462f998b_li_145\"><span class=\"ne-text\">执行 </span><code class=\"ne-code\"><span class=\"ne-text\">A/B</span></code><span class=\"ne-text\"> 测试，例如 尝试各种算法的 不同实现。</span></li></ul><ul class=\"ne-ul\"><li id=\"a42c3ead6b43dfe4805210f4e5eb4562_li_146\"><span class=\"ne-text\">加载很少使用的功能，例如可选的屏幕和对话框。</span></li></ul><p id=\"74ecfab27c8cf377938bc9b3d6847097_p_349\" class=\"ne-p\"><br></p><p id=\"6804417aa27587e75625564fa2f865ec_p_350\" class=\"ne-p\"><span class=\"ne-text\">要延迟加载一个库，需要先使用 </span><code class=\"ne-code\"><span class=\"ne-text\">deferred as</span></code><span class=\"ne-text\"> 来 导入：</span></p><p id=\"e79d777f0fefee41e9c01ecd95e72714_p_351\" class=\"ne-p\"><br></p><pre data-language=\"dart\" id=\"d52358e1\" class=\"ne-codeblock language-dart\">import 'package:deferred/hello.dart' deferred as hello;</pre><p id=\"ad3eb8fe3c94e7771e185a89172e7be1_p_352\" class=\"ne-p\"><br></p><p id=\"31ff2ddd806a62e186d13420e98110be_p_353\" class=\"ne-p\"><span class=\"ne-text\">当需要使用的时候，使用库标识符调用 </span><code class=\"ne-code\"><span class=\"ne-text\">loadLibrary()</span></code><span class=\"ne-text\"> 函数来加载库：</span></p><p id=\"b14ae4a1758357e04d7ee5fa01a4c0de_p_354\" class=\"ne-p\"><br></p><pre data-language=\"dart\" id=\"67293db7\" class=\"ne-codeblock language-dart\">greet() async {\n  await hello.loadLibrary();\n  hello.printGreeting();\n}</pre><p id=\"eca79acfd3f51d47aca4c006f27b136f_p_355\" class=\"ne-p\"><br></p><p id=\"9a23cd8ac183f301a2b78de75fa6efb1_p_356\" class=\"ne-p\"><span class=\"ne-text\"> 在前面的代码， 使用 </span><code class=\"ne-code\"><span class=\"ne-text\">await</span></code><span class=\"ne-text\"> 关键字暂停代码执行一直到库加载完成。 关于 </span><code class=\"ne-code\"><span class=\"ne-text\">async</span></code><span class=\"ne-text\"> 和 </span><code class=\"ne-code\"><span class=\"ne-text\">await</span></code><span class=\"ne-text\"> 的更多信息请参考 </span><a href=\"http://dart.goodev.org/guides/language/language-tour#asynchrony-support\" data-href=\"http://dart.goodev.org/guides/language/language-tour#asynchrony-support\" target=\"_blank\" class=\"ne-link\"><strong><em><span class=\"ne-text\">异步支持</span></em></strong></a><span class=\"ne-text\">。</span></p><p id=\"d714dfb89a61340ab03baf9eb7dd2748_p_357\" class=\"ne-p\"><br></p><p id=\"5052633adeafc0d3e1beb4718b4708a1_p_358\" class=\"ne-p\"><span class=\"ne-text\"> 在一个库上你可以多次调用 </span><code class=\"ne-code\"><span class=\"ne-text\">loadLibrary()</span></code><span class=\"ne-text\"> 函数。 但是该库只是载入一次。</span></p><p id=\"979969d98e3b20e665a3357f6c0ad150_p_359\" class=\"ne-p\"><br></p><p id=\"7132bb7df6e001ec359d353815cc4664_p_360\" class=\"ne-p\"><span class=\"ne-text\">使用延迟加载库的时候，请注意一下问题：</span></p><p id=\"eef98ed46c411ab61c1fa22a0e88ce37_p_361\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"5de3e33ab69837269bbf3ad6a241610d_li_147\"><span class=\"ne-text\">延迟加载库的常量在导入的时候是不可用的。 只有当库加载完毕的时候，库中常量才可以使用。</span></li></ul><ul class=\"ne-ul\"><li id=\"cdee48a0eabda493ea6f0275e5ca50e0_li_148\"><span class=\"ne-text\">在导入文件的时候无法使用延迟库中的类型。 如果你需要使用类型，则考虑把接口类型移动到另外一个库中， 让两个库都分别导入这个接口库。</span></li></ul><ul class=\"ne-ul\"><li id=\"3c1cefd698fe6e72bcc83acd93a42b0c_li_149\"><strong><em><span class=\"ne-text\">Dart</span></em></strong><span class=\"ne-text\"> 隐含的把 </span><code class=\"ne-code\"><span class=\"ne-text\">loadLibrary()</span></code><span class=\"ne-text\"> 函数导入到使用 </span><code class=\"ne-code\"><span class=\"ne-text\">deferred as</span></code><span class=\"ne-text\"> 的命名空间中。 </span><code class=\"ne-code\"><span class=\"ne-text\">loadLibrary()</span></code><span class=\"ne-text\"> 方法返回一个 </span><a href=\"http://dart.goodev.org/guides/libraries/library-tour#future\" data-href=\"http://dart.goodev.org/guides/libraries/library-tour#future\" target=\"_blank\" class=\"ne-link\"><strong><em><span class=\"ne-text\">Future</span></em></strong></a><span class=\"ne-text\">。</span></li></ul><p id=\"5a47d94bc98e6d340cdb7cccff7fa51d_p_362\" class=\"ne-p\"><br></p><h2 id=\"be7a8956\"><span class=\"ne-text\">十三、异步支持</span></h2><p id=\"b6f4d2a5c1aff0a932ad150db3ddf853_p_363\" class=\"ne-p\"><br></p><p id=\"3b58e21db61a702b2f6b865a5b5b4df4_p_364\" class=\"ne-p\"><code class=\"ne-code\"><span class=\"ne-text\">Dart</span></code><span class=\"ne-text\"> 库中有很多返回 </span><code class=\"ne-code\"><span class=\"ne-text\">Future</span></code><span class=\"ne-text\"> 或者 </span><code class=\"ne-code\"><span class=\"ne-text\">Stream</span></code><span class=\"ne-text\"> 对象的方法。 这些方法是 </span><em><span class=\"ne-text\">异步的</span></em><span class=\"ne-text\">： 这些函数在设置完基本的操作 后就返回了， 而无需等待操作执行完成。 例如读取一个文件，在打开文件后就返回了。</span></p><p id=\"ff31106e827670d9c13d04207c7807b1_p_365\" class=\"ne-p\"><br></p><p id=\"b010b79fe4c99d3ef5c42246eef16c14_p_366\" class=\"ne-p\"><span class=\"ne-text\">有两种方式可以使用 </span><code class=\"ne-code\"><span class=\"ne-text\">Future</span></code><span class=\"ne-text\"> 对象中的 数据：</span></p><p id=\"2b4048cb18fa24fbfc8c77ec5721ba52_p_367\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"31e043a6cf75578d236ec470a845322c_li_150\"><span class=\"ne-text\">使用 </span><code class=\"ne-code\"><span class=\"ne-text\">async</span></code><span class=\"ne-text\"> 和 </span><code class=\"ne-code\"><span class=\"ne-text\">await</span></code></li></ul><ul class=\"ne-ul\"><li id=\"0bbc4848def569839fe6663f48efda55_li_151\"><span class=\"ne-text\">使用 </span><a href=\"http://dart.goodev.org/guides/libraries/library-tour#future\" data-href=\"http://dart.goodev.org/guides/libraries/library-tour#future\" target=\"_blank\" class=\"ne-link\"><strong><em><span class=\"ne-text\">Future API</span></em></strong></a></li></ul><p id=\"847a4369e8d7b47263076c4ca89cd8a5_p_368\" class=\"ne-p\"><br></p><p id=\"7dd07a4d7d001ad6e35f27170519849b_p_369\" class=\"ne-p\"><span class=\"ne-text\">同样，从 </span><code class=\"ne-code\"><span class=\"ne-text\">Stream</span></code><span class=\"ne-text\"> 中获取数据也有两种方式：</span></p><p id=\"12aad13ff7b6c968d7e10183168a26f8_p_370\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"6bfd7a76669c62539f10d6db3839004d_li_152\"><span class=\"ne-text\">使用 </span><code class=\"ne-code\"><span class=\"ne-text\">async</span></code><span class=\"ne-text\"> 和一个 异步 </span><code class=\"ne-code\"><span class=\"ne-text\">for</span></code><span class=\"ne-text\"> 循环 (</span><code class=\"ne-code\"><span class=\"ne-text\">await for</span></code><span class=\"ne-text\">)</span></li></ul><ul class=\"ne-ul\"><li id=\"da6f91b71fd7b4a1e22ccfbf13b1a74a_li_153\"><span class=\"ne-text\">使用 </span><a href=\"http://dart.goodev.org/guides/libraries/library-tour#stream\" data-href=\"http://dart.goodev.org/guides/libraries/library-tour#stream\" target=\"_blank\" class=\"ne-link\"><strong><em><span class=\"ne-text\">Stream API</span></em></strong></a></li></ul><p id=\"a7a97780cb395857388ed964c5f3725c_p_371\" class=\"ne-p\"><br></p><p id=\"8a27c9c58140b994a4b84192c7335979_p_372\" class=\"ne-p\"><strong><span class=\"ne-text\">1.</span></strong><span class=\"ne-text\"> 要使用 </span><code class=\"ne-code\"><span class=\"ne-text\">await</span></code><span class=\"ne-text\">，其方法必须带有 </span><code class=\"ne-code\"><span class=\"ne-text\">async</span></code><span class=\"ne-text\"> 关键字：</span></p><p id=\"2cc7a87e0f7a623f30d3a0fbfb1815c3_p_373\" class=\"ne-p\"><br></p><pre data-language=\"dart\" id=\"7a36d06e\" class=\"ne-codeblock language-dart\">checkVersion() async {\n  var version = await lookUpVersion();\n  if (version == expectedVersion) {\n    // Do something.\n  } else {\n    // Do something else.\n  }\n}</pre><p id=\"0f62510e9876ac2b8fbef3c6abf81dba_p_374\" class=\"ne-p\"><br></p><p id=\"272124bd8713ce4596d1da7f15cab406_p_375\" class=\"ne-p\"><strong><span class=\"ne-text\">2.</span></strong><span class=\"ne-text\"> 可以使用 </span><code class=\"ne-code\"><span class=\"ne-text\">try</span></code><span class=\"ne-text\">, </span><code class=\"ne-code\"><span class=\"ne-text\">catch</span></code><span class=\"ne-text\">, 和 </span><code class=\"ne-code\"><span class=\"ne-text\">finally</span></code><span class=\"ne-text\"> 来处理使用 </span><code class=\"ne-code\"><span class=\"ne-text\">await</span></code><span class=\"ne-text\"> 的异常：</span></p><p id=\"ea7ffad04bfdbb99a8e20665fec055ff_p_376\" class=\"ne-p\"><br></p><pre data-language=\"dart\" id=\"8c5079db\" class=\"ne-codeblock language-dart\">try {\n  server = await HttpServer.bind(InternetAddress.LOOPBACK_IP_V4, 4044);\n} catch (e) {\n  // React to inability to bind to the port...\n}</pre><p id=\"f4a3c592a15de2aafcbfd6ea44b52d2e_p_377\" class=\"ne-p\"><br></p><h3 id=\"a1db95b8\"><span class=\"ne-text\">13.1 声明异步方法</span></h3><p id=\"b37407c92dd2046919e3158bff52accd_p_378\" class=\"ne-p\"><br></p><p id=\"dd4caec4acc05aaaf3b46aab2c10f914_p_379\" class=\"ne-p\"><span class=\"ne-text\"> 一个 </span><code class=\"ne-code\"><span class=\"ne-text\">async</span></code><span class=\"ne-text\"> 方法是函数体被标记为 </span><code class=\"ne-code\"><span class=\"ne-text\">async</span></code><span class=\"ne-text\"> 的方法。 虽然异步方法的执行可能需要一定时间，但是 异步方法立刻返回 - 在方法体还没执行之前就返回了。</span></p><p id=\"b2794e47279c4ed7006ea636861c4575_p_380\" class=\"ne-p\"><br></p><pre data-language=\"dart\" id=\"74345517\" class=\"ne-codeblock language-dart\">checkVersion() async {\n  // ...\n}\n\nlookUpVersion() async =&gt; /* ... */;</pre><p id=\"121b50bda08c128c3e28128057d3e46a_p_381\" class=\"ne-p\"><br></p><p id=\"e0e4afdd63438e4037151d8f05452b57_p_382\" class=\"ne-p\"><span class=\"ne-text\"> 在一个方法上添加 </span><code class=\"ne-code\"><span class=\"ne-text\">async</span></code><span class=\"ne-text\"> 关键字，则这个方法返回值为 </span><code class=\"ne-code\"><span class=\"ne-text\">Future</span></code><span class=\"ne-text\">。 例如，下面是一个返回字符串 的同步方法：</span></p><p id=\"1f3a1af4423a5f6548f92264c8ba9855_p_383\" class=\"ne-p\"><br></p><pre data-language=\"dart\" id=\"cd9d59fe\" class=\"ne-codeblock language-dart\">String lookUpVersionSync() =&gt; '1.0.0';</pre><p id=\"063a08ed2e1ff473c54a458563269e06_p_384\" class=\"ne-p\"><br></p><p id=\"5ada766efe7174b383d4ad4b53c47b54_p_385\" class=\"ne-p\"><span class=\"ne-text\"> 如果使用 </span><code class=\"ne-code\"><span class=\"ne-text\">async</span></code><span class=\"ne-text\"> 关键字，则该方法 返回一个 </span><code class=\"ne-code\"><span class=\"ne-text\">Future</span></code><span class=\"ne-text\">，并且 认为该函数是一个耗时的操作。</span></p><p id=\"e227befc343f9b09a2d440a1a01660d3_p_386\" class=\"ne-p\"><br></p><pre data-language=\"dart\" id=\"00cf361c\" class=\"ne-codeblock language-dart\">Future&lt;String&gt; lookUpVersion() async =&gt; '1.0.0';</pre><p id=\"b71763e3e4c3b4b8b22881ce7acedb8e_p_387\" class=\"ne-p\"><br></p><p id=\"3557045efc43b942f24dd99c02655986_p_388\" class=\"ne-p\"><span class=\"ne-text\"> 有时候，你的算法要求调用很多异步方法，并且等待 所有方法完成后再继续执行。使用 </span><code class=\"ne-code\"><a href=\"https://api.dartlang.org/stable/dart-async/Future/wait.html\" data-href=\"https://api.dartlang.org/stable/dart-async/Future/wait.html\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">Future.wait()</span></a></code><span class=\"ne-text\"> 这个静态函数来管理多个 </span><code class=\"ne-code\"><span class=\"ne-text\">Future</span></code><span class=\"ne-text\"> 并等待所有 </span><code class=\"ne-code\"><span class=\"ne-text\">Future</span></code><span class=\"ne-text\"> 执行完成。</span></p><p id=\"551b1052f74a2a4b4222675571b88192_p_389\" class=\"ne-p\"><br></p><pre data-language=\"dart\" id=\"758287b4\" class=\"ne-codeblock language-dart\">Future deleteDone = deleteLotsOfFiles();\nFuture copyDone = copyLotsOfFiles();\nFuture checksumDone = checksumLotsOfOtherFiles();\n\nFuture.wait([deleteDone, copyDone, checksumDone])\n    .then((List values) {\n      print('Done with all the long steps');\n    });</pre><p id=\"4bea89dfafb597e9afe4538b2bf7b1d5_p_390\" class=\"ne-p\"><br></p><h3 id=\"172c3272\"><span class=\"ne-text\">13.2 使用 </span><code class=\"ne-code\"><span class=\"ne-text\">await</span></code><span class=\"ne-text\"> 表达式</span></h3><p id=\"53af3e9f980081e358aa2e6f38131954_p_391\" class=\"ne-p\"><br></p><p id=\"7a800220ba61147f4a185169e43b3ef7_p_392\" class=\"ne-p\"><span class=\"ne-text\"> 在一个异步方法内可以使用多次 </span><code class=\"ne-code\"><span class=\"ne-text\">await</span></code><span class=\"ne-text\"> 表达式。 例如，下面的示例使用了三次 </span><code class=\"ne-code\"><span class=\"ne-text\">await</span></code><span class=\"ne-text\"> 表达式 来执行相关的功能：</span></p><p id=\"cad374bdd17b248b295bb46f1993c6ef_p_393\" class=\"ne-p\"><br></p><pre data-language=\"dart\" id=\"334b47bc\" class=\"ne-codeblock language-dart\">var entrypoint = await findEntrypoint();\nvar exitCode = await runExecutable(entrypoint, args);\nawait flushThenExit(exitCode);</pre><p id=\"13e645adec38b486b7650c768369b095_p_394\" class=\"ne-p\"><br></p><p id=\"bae33d18c5157a6737d97bede7c2bc6e_p_395\" class=\"ne-p\"><span class=\"ne-text\"> 在 </span><code class=\"ne-code\"><span class=\"ne-text\">await expression</span></code><span class=\"ne-text\"> 中， </span><code class=\"ne-code\"><span class=\"ne-text\">expression</span></code><span class=\"ne-text\"> 的返回值通常是一个 </span><code class=\"ne-code\"><span class=\"ne-text\">Future</span></code><span class=\"ne-text\">； 如果返回的值不是 </span><code class=\"ne-code\"><span class=\"ne-text\">Future</span></code><span class=\"ne-text\">，则 </span><code class=\"ne-code\"><span class=\"ne-text\">Dart</span></code><span class=\"ne-text\"> 会自动把该值放到 </span><code class=\"ne-code\"><span class=\"ne-text\">Future</span></code><span class=\"ne-text\"> 中返回。 </span><code class=\"ne-code\"><span class=\"ne-text\">Future</span></code><span class=\"ne-text\"> 对象代表返回一个对象的承 (</span><code class=\"ne-code\"><span class=\"ne-text\">promise</span></code><span class=\"ne-text\">)。 </span><code class=\"ne-code\"><span class=\"ne-text\">await expression</span></code><span class=\"ne-text\"> 执行的结果为这个返回的对象。 </span><code class=\"ne-code\"><span class=\"ne-text\">await expression</span></code><span class=\"ne-text\"> 会阻塞住，直到需要的对象返回为止。</span></p><p id=\"99a9f58323c0fa7215e3dc9ef7bf2e0d_p_396\" class=\"ne-p\"><br></p><p id=\"238ae757deabf29cfd92e05847a31bec_p_397\" class=\"ne-p\"><strong><span class=\"ne-text\">如果 </span></strong><code class=\"ne-code\"><strong><span class=\"ne-text\">await</span></strong></code><strong><span class=\"ne-text\"> 无法正常使用，请确保是在一个 </span></strong><code class=\"ne-code\"><strong><span class=\"ne-text\">async</span></strong></code><strong><span class=\"ne-text\"> 方法中。</span></strong><span class=\"ne-text\"> 例如要在 </span><code class=\"ne-code\"><span class=\"ne-text\">main()</span></code><span class=\"ne-text\"> 方法中使用 </span><code class=\"ne-code\"><span class=\"ne-text\">await</span></code><span class=\"ne-text\">， 则 </span><code class=\"ne-code\"><span class=\"ne-text\">main()</span></code><span class=\"ne-text\"> 方法的函数体必须标记为 </span><code class=\"ne-code\"><span class=\"ne-text\">async</span></code><span class=\"ne-text\">：</span></p><p id=\"c828dfcd964fb30f649b8d212eeb3614_p_398\" class=\"ne-p\"><br></p><pre data-language=\"dart\" id=\"dbb5fbe0\" class=\"ne-codeblock language-dart\">main() async {\n  checkVersion();\n  print('In main: version is ${await lookUpVersion()}');\n}</pre><p id=\"0da96d7a4d6a9ecb6ba79cac79fbb6ce_p_399\" class=\"ne-p\"><br></p><h3 id=\"3f70affd\"><span class=\"ne-text\">13.3 在循环中使用异步</span></h3><p id=\"f8c899a2e3c243c67cea6b300279a2f1_p_400\" class=\"ne-p\"><br></p><p id=\"e7313bc7262b5bc05e4def9a43246e2c_p_401\" class=\"ne-p\"><span class=\"ne-text\"> 异步 </span><code class=\"ne-code\"><span class=\"ne-text\">for</span></code><span class=\"ne-text\"> 循环具有如下的形式：</span></p><p id=\"f318a8b17566f6496a14f8d4c9368ba0_p_402\" class=\"ne-p\"><br></p><pre data-language=\"dart\" id=\"bc9f4bd7\" class=\"ne-codeblock language-dart\">await for (variable declaration in expression) {\n  // Executes each time the stream emits a value.\n}</pre><p id=\"da9f89f3f15f89516369a4fc8a16c33d_p_403\" class=\"ne-p\"><br></p><p id=\"5d74c704d29adb13f81f51863c302043_p_404\" class=\"ne-p\"><span class=\"ne-text\"> 上面 </span><code class=\"ne-code\"><span class=\"ne-text\">expression</span></code><span class=\"ne-text\"> 返回的值必须是 </span><code class=\"ne-code\"><span class=\"ne-text\">Stream</span></code><span class=\"ne-text\"> 类型的。 执行流程如下：</span></p><p id=\"0cfb3d5cc02b54e69ff545746d5b9af6_p_405\" class=\"ne-p\"><br></p><ol class=\"ne-ol\"><li id=\"02e6cd78bc001103d377d6728429d03a_li_154\"><span class=\"ne-text\">等待直到 </span><strong><em><span class=\"ne-text\">stream</span></em></strong><span class=\"ne-text\"> 返回一个数据</span></li></ol><ol start=\"2\" class=\"ne-ol\"><li id=\"b09279b1a47859c882e2912eb79948cb_li_155\"><span class=\"ne-text\">使用 </span><code class=\"ne-code\"><span class=\"ne-text\">stream</span></code><span class=\"ne-text\"> 返回的参数 执行 </span><code class=\"ne-code\"><span class=\"ne-text\">for</span></code><span class=\"ne-text\"> 循环代码，</span></li></ol><ol start=\"3\" class=\"ne-ol\"><li id=\"4fd938f5b276c0369596024ae825c1a8_li_156\"><span class=\"ne-text\">重复执行 </span><code class=\"ne-code\"><span class=\"ne-text\">1</span></code><span class=\"ne-text\"> 和 </span><code class=\"ne-code\"><span class=\"ne-text\">2</span></code><span class=\"ne-text\"> 直到 </span><code class=\"ne-code\"><span class=\"ne-text\">stream</span></code><span class=\"ne-text\"> 数据返回完毕。</span></li></ol><p id=\"e9a28ff0731eac4634a04d7806631887_p_406\" class=\"ne-p\"><br></p><p id=\"09a095d90cc4e33c167773dae3555a94_p_407\" class=\"ne-p\"><span class=\"ne-text\"> 使用 </span><code class=\"ne-code\"><span class=\"ne-text\">break</span></code><span class=\"ne-text\"> 或者 </span><code class=\"ne-code\"><span class=\"ne-text\">return</span></code><span class=\"ne-text\"> 语句可以 停止接收 </span><code class=\"ne-code\"><span class=\"ne-text\">stream</span></code><span class=\"ne-text\"> 的数据， 这样就跳出了 </span><code class=\"ne-code\"><span class=\"ne-text\">for</span></code><span class=\"ne-text\"> 循环并且 从 </span><code class=\"ne-code\"><span class=\"ne-text\">stream</span></code><span class=\"ne-text\"> 上取消注册了。</span></p><p id=\"a8e8a9fdbb78dc34d8754b54c6a29353_p_408\" class=\"ne-p\"><br></p><p id=\"e5e9f5ad0b309d0df8e47b9336349a59_p_409\" class=\"ne-p\"><strong><span class=\"ne-text\">如果异步 </span></strong><code class=\"ne-code\"><strong><span class=\"ne-text\">for</span></strong></code><strong><span class=\"ne-text\"> 循环不能正常工作， 确保是在一个 </span></strong><code class=\"ne-code\"><strong><span class=\"ne-text\">async</span></strong></code><strong><span class=\"ne-text\"> 方法中使用。</span></strong><span class=\"ne-text\"> 例如，要想在 </span><code class=\"ne-code\"><span class=\"ne-text\">main()</span></code><span class=\"ne-text\"> 方法中使用异步 </span><code class=\"ne-code\"><span class=\"ne-text\">for</span></code><span class=\"ne-text\"> 循环，则需要把 </span><code class=\"ne-code\"><span class=\"ne-text\">main()</span></code><span class=\"ne-text\"> 方法的函数体标记为 </span><code class=\"ne-code\"><span class=\"ne-text\">async</span></code><span class=\"ne-text\">：</span></p><p id=\"496606b332d817f291c7281922d97bf1_p_410\" class=\"ne-p\"><br></p><pre data-language=\"dart\" id=\"6edc6f01\" class=\"ne-codeblock language-dart\">main() async {\n  ...\n  await for (var request in requestServer) {\n    handleRequest(request);\n  }\n  ...\n}</pre></div>",
  "body_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"traditional\" /><meta name=\"viewport\" content=\"adapt\" /><h1 data-lake-id=\"a2578a9d\" id=\"a2578a9d\"><span data-lake-id=\"u7cc14056\" id=\"u7cc14056\">Dart语言入门教程</span></h1><p data-lake-id=\"0c4d068e4aede2bc9d552ce387999b01_p_4\" id=\"0c4d068e4aede2bc9d552ce387999b01_p_4\"><br></p><p data-lake-id=\"6705f221661db373747186fcc0d8b368_p_5\" id=\"6705f221661db373747186fcc0d8b368_p_5\"><a href=\"https://dart.dev/\" target=\"_blank\" data-lake-id=\"uc19dbbc2\" id=\"uc19dbbc2\"><strong><span data-lake-id=\"u73594ea9\" id=\"u73594ea9\">官方网站：https://dart.dev/</span></strong></a></p><p data-lake-id=\"f23fb9c519ff30bfe03d0b2cc2cac85d_p_6\" id=\"f23fb9c519ff30bfe03d0b2cc2cac85d_p_6\"><br></p><p data-lake-id=\"e1ae3c4cdaff9ecb8f54a69d09000e7f_p_7\" id=\"e1ae3c4cdaff9ecb8f54a69d09000e7f_p_7\"><a href=\"http://dart.goodev.org/\" target=\"_blank\" data-lake-id=\"udcfa94d8\" id=\"udcfa94d8\"><strong><span data-lake-id=\"u57426ab3\" id=\"u57426ab3\">中文网站：http://dart.goodev.org/</span></strong></a></p><p data-lake-id=\"92c8228235b93f7cc9ced6ac90fca3a6_p_8\" id=\"92c8228235b93f7cc9ced6ac90fca3a6_p_8\"><br></p><h2 data-lake-id=\"63554eb7\" id=\"63554eb7\"><span data-lake-id=\"u5cbbef21\" id=\"u5cbbef21\">一、 安装</span></h2><p data-lake-id=\"eadc4ec477465f1f239730d987d394b1_p_9\" id=\"eadc4ec477465f1f239730d987d394b1_p_9\"><br></p><p data-lake-id=\"3adfce58bc38f68773194b31cdb94195_p_10\" id=\"3adfce58bc38f68773194b31cdb94195_p_10\"><span data-lake-id=\"uda02fcbd\" id=\"uda02fcbd\">获取 </span><code data-lake-id=\"u7d000668\" id=\"u7d000668\"><span data-lake-id=\"u9aa9c8d4\" id=\"u9aa9c8d4\">dart SDK</span></code></p><p data-lake-id=\"828bea0262f636b25c97fbef525aed20_p_11\" id=\"828bea0262f636b25c97fbef525aed20_p_11\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22bash%22%2C%22code%22%3A%22%2F%2F%20%E7%A8%B3%E5%AE%9A%E7%89%88%5Cnbrew%20tap%20dart-lang%2Fdart%5Cnbrew%20install%20dart%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22467fb524%22%7D\"></card><p data-lake-id=\"09a2b5671cf447a1a3529d71c89cf9e1_p_12\" id=\"09a2b5671cf447a1a3529d71c89cf9e1_p_12\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22bash%22%2C%22code%22%3A%22%2F%2F%20%E6%9C%80%E6%96%B0%E7%89%88%5Cnbrew%20install%20dart%20--devel%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%223a0f0fc8%22%7D\"></card><p data-lake-id=\"2369fafe89fae403079018df6f36b51b_p_13\" id=\"2369fafe89fae403079018df6f36b51b_p_13\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22bash%22%2C%22code%22%3A%22%2F%2F%20%E5%8D%87%E7%BA%A7%5Cnbrew%20upgrade%20dart%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%2271a442ec%22%7D\"></card><p data-lake-id=\"7cf79ceeaaf91ef14264b4c55c1c8c1d_p_14\" id=\"7cf79ceeaaf91ef14264b4c55c1c8c1d_p_14\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22bash%22%2C%22code%22%3A%22%2F%2F%20%E5%AE%89%E8%A3%85%E7%A8%B3%E5%AE%9A%E7%89%88%5Cnbrew%20unlink%20dart%5Cnbrew%20install%20dart%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%229e2519f8%22%7D\"></card><p data-lake-id=\"c53070088aadb43ef468f61fca8ca22a_p_15\" id=\"c53070088aadb43ef468f61fca8ca22a_p_15\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22bash%22%2C%22code%22%3A%22%2F%2F%20%E5%AE%89%E8%A3%85%E6%9C%80%E6%96%B0%E7%89%88%5Cnbrew%20upgrade%20--force%20dart%20--%20--level%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22ee7c088f%22%7D\"></card><p data-lake-id=\"42752743bc6d3f9f6c928fb47989b8c2_p_16\" id=\"42752743bc6d3f9f6c928fb47989b8c2_p_16\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22bash%22%2C%22code%22%3A%22%2F%2F%20%E6%9F%A5%E7%9C%8B%E7%89%88%E6%9C%AC%5Cnbrew%20info%20dart%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22740b9612%22%7D\"></card><p data-lake-id=\"c5eaf555cee01ec836fc749258c6179d_p_17\" id=\"c5eaf555cee01ec836fc749258c6179d_p_17\"><br></p><h2 data-lake-id=\"4e1cfe64\" id=\"4e1cfe64\"><span data-lake-id=\"u6f629aab\" id=\"u6f629aab\">二、 介绍</span></h2><p data-lake-id=\"3f8949dd5527f0c9624c3fd3faefb76f_p_18\" id=\"3f8949dd5527f0c9624c3fd3faefb76f_p_18\"><br></p><p data-lake-id=\"73aad70cb1af7691c154b98afa7c6c13_p_19\" id=\"73aad70cb1af7691c154b98afa7c6c13_p_19\"><code data-lake-id=\"u6a1ef1eb\" id=\"u6a1ef1eb\"><span data-lake-id=\"u6609414b\" id=\"u6609414b\">main</span></code><span data-lake-id=\"u16f74a9a\" id=\"u16f74a9a\"> 方法：程序入口</span></p><p data-lake-id=\"db841a6e995b001085603629a3ace379_p_20\" id=\"db841a6e995b001085603629a3ace379_p_20\"><br></p><p data-lake-id=\"27632d19dfb89c756ec6ef19b4b1680c_p_21\" id=\"27632d19dfb89c756ec6ef19b4b1680c_p_21\"><code data-lake-id=\"u14f886ed\" id=\"u14f886ed\"><span data-lake-id=\"u0eb6c68e\" id=\"u0eb6c68e\">print</span></code><span data-lake-id=\"u701447b9\" id=\"u701447b9\"> 方法：可以在控制台输出内容</span></p><p data-lake-id=\"37928cd1f32681ee4810a9ab9d3c1104_p_22\" id=\"37928cd1f32681ee4810a9ab9d3c1104_p_22\"><br></p><h2 data-lake-id=\"93d6d18f\" id=\"93d6d18f\"><span data-lake-id=\"ua199f10a\" id=\"ua199f10a\">三、 变量与常量</span></h2><p data-lake-id=\"4547a4b65fb57fca5301c6973643450c_p_23\" id=\"4547a4b65fb57fca5301c6973643450c_p_23\"><br></p><h3 data-lake-id=\"a15d0d16\" id=\"a15d0d16\"><span data-lake-id=\"u80ae9e4b\" id=\"u80ae9e4b\">3.1 变量</span></h3><p data-lake-id=\"1f3b4b4a4867a8b756c196b38558d0c4_p_24\" id=\"1f3b4b4a4867a8b756c196b38558d0c4_p_24\"><br></p><p data-lake-id=\"078bdfad2e546716bb6d702274e69900_p_25\" id=\"078bdfad2e546716bb6d702274e69900_p_25\"><span data-lake-id=\"u214f43f5\" id=\"u214f43f5\">使用 </span><code data-lake-id=\"u804f7b6f\" id=\"u804f7b6f\"><span data-lake-id=\"u32a14c79\" id=\"u32a14c79\">var</span></code><span data-lake-id=\"uec5fd194\" id=\"uec5fd194\"> 声明变量，可赋予不同类型的值。</span></p><p data-lake-id=\"b57de0a6a045efefe71d109094be9ddc_p_26\" id=\"b57de0a6a045efefe71d109094be9ddc_p_26\"><br></p><p data-lake-id=\"5959332689a9fb7853abd9b3da1fd79b_p_27\" id=\"5959332689a9fb7853abd9b3da1fd79b_p_27\"><span data-lake-id=\"u2805a52e\" id=\"u2805a52e\">未初始化时，默认值为 </span><code data-lake-id=\"u045512f3\" id=\"u045512f3\"><span data-lake-id=\"uf9a620e0\" id=\"uf9a620e0\">null</span></code><span data-lake-id=\"ub6430393\" id=\"ub6430393\">。</span></p><p data-lake-id=\"d17d837b16c49a0e5c21edc18722e410_p_28\" id=\"d17d837b16c49a0e5c21edc18722e410_p_28\"><br></p><p data-lake-id=\"d3f96a37df9cae0ea34ac942ae464a54_p_29\" id=\"d3f96a37df9cae0ea34ac942ae464a54_p_29\"><span data-lake-id=\"u24594ab6\" id=\"u24594ab6\">使用 </span><code data-lake-id=\"u6ee0925f\" id=\"u6ee0925f\"><span data-lake-id=\"u17895c07\" id=\"u17895c07\">final</span></code><span data-lake-id=\"ua0440150\" id=\"ua0440150\"> 关键字声明一个只能赋值一次的变量。</span></p><p data-lake-id=\"d657ac1e4c3211af4f7dcea889518735_p_30\" id=\"d657ac1e4c3211af4f7dcea889518735_p_30\"><br></p><h3 data-lake-id=\"a2c425db\" id=\"a2c425db\"><span data-lake-id=\"u90ccf380\" id=\"u90ccf380\">3.2 常量</span></h3><p data-lake-id=\"e2e9b10bfede90e88bd47291199e0b55_p_31\" id=\"e2e9b10bfede90e88bd47291199e0b55_p_31\"><br></p><p data-lake-id=\"aa5ef4fb9dccfd710d04f9b1cd838995_p_32\" id=\"aa5ef4fb9dccfd710d04f9b1cd838995_p_32\"><span data-lake-id=\"uaf638f21\" id=\"uaf638f21\">使用 </span><code data-lake-id=\"u478dfd00\" id=\"u478dfd00\"><span data-lake-id=\"u6e8d592b\" id=\"u6e8d592b\">const</span></code><span data-lake-id=\"udb8a46c8\" id=\"udb8a46c8\"> 声明常量</span></p><p data-lake-id=\"73b74e66f7d869f94eb34b57d63eae3f_p_33\" id=\"73b74e66f7d869f94eb34b57d63eae3f_p_33\"><br></p><p data-lake-id=\"8a852428bd1d78bb205afaebe2c0a34d_p_34\" id=\"8a852428bd1d78bb205afaebe2c0a34d_p_34\"><span data-lake-id=\"u92471b09\" id=\"u92471b09\">使用 </span><code data-lake-id=\"uf03bc86c\" id=\"uf03bc86c\"><span data-lake-id=\"u1c724f5f\" id=\"u1c724f5f\">const</span></code><span data-lake-id=\"u2fd2ab60\" id=\"u2fd2ab60\"> 声明的必须是编译器的常量 </span><code data-lake-id=\"u61ec236f\" id=\"u61ec236f\"><span data-lake-id=\"u9581f677\" id=\"u9581f677\">=&amp;gt;</span></code><span data-lake-id=\"uf2a402f3\" id=\"uf2a402f3\"> 在编译阶段就可以确定它的值</span></p><p data-lake-id=\"86d045d193aa7ac4616d4ea50a0dc92f_p_35\" id=\"86d045d193aa7ac4616d4ea50a0dc92f_p_35\"><br></p><h2 data-lake-id=\"b6691530\" id=\"b6691530\"><span data-lake-id=\"u2dc5b6a6\" id=\"u2dc5b6a6\">四、 数据类型</span></h2><p data-lake-id=\"6f8f966688575a1f666bafa122494f73_p_36\" id=\"6f8f966688575a1f666bafa122494f73_p_36\"><br></p><h3 data-lake-id=\"23be9bf8\" id=\"23be9bf8\"><span data-lake-id=\"uf27449fb\" id=\"uf27449fb\">4.1 数值型：</span><code data-lake-id=\"ua7fddbb8\" id=\"ua7fddbb8\"><span data-lake-id=\"u15e67976\" id=\"u15e67976\">Number</span></code><span data-lake-id=\"u4d5606ce\" id=\"u4d5606ce\"> (简写：</span><code data-lake-id=\"u403e88d6\" id=\"u403e88d6\"><span data-lake-id=\"ua2b349aa\" id=\"ua2b349aa\">num</span></code><span data-lake-id=\"u425dde48\" id=\"u425dde48\">)</span></h3><p data-lake-id=\"ab57135091a86c42cc63ec67ac068a45_p_37\" id=\"ab57135091a86c42cc63ec67ac068a45_p_37\"><br></p><ul list=\"uf89e02e4\"><li fid=\"u4cf493ae\" data-lake-id=\"84c394ea544064f7d73c652517a1814b_li_2\" id=\"84c394ea544064f7d73c652517a1814b_li_2\"><span data-lake-id=\"u9924c4b9\" id=\"u9924c4b9\">子类型：</span></li></ul><p data-lake-id=\"82f45866a429f6224b2e92c65bfda254_p_38\" id=\"82f45866a429f6224b2e92c65bfda254_p_38\"><br></p><ol list=\"u09368a4a\"><li fid=\"u7152bf3e\" data-lake-id=\"ecb3a0c72e5d389dc3397371256fc038_li_3\" id=\"ecb3a0c72e5d389dc3397371256fc038_li_3\"><span data-lake-id=\"ucb900e4d\" id=\"ucb900e4d\">整型 </span><code data-lake-id=\"ue0f14e97\" id=\"ue0f14e97\"><span data-lake-id=\"ud49040ab\" id=\"ud49040ab\">Int</span></code></li></ol><ol list=\"u656eaa69\" start=\"2\"><li fid=\"u6c3ffa1e\" data-lake-id=\"01e024c77bff0264be5d7cf5dc145571_li_4\" id=\"01e024c77bff0264be5d7cf5dc145571_li_4\"><span data-lake-id=\"ud245d6d6\" id=\"ud245d6d6\">浮点型 </span><code data-lake-id=\"uf2a2bc5f\" id=\"uf2a2bc5f\"><span data-lake-id=\"uaca0dcdd\" id=\"uaca0dcdd\">double</span></code></li></ol><p data-lake-id=\"faade82d6cfe8ed09f505bc5d9204fda_p_39\" id=\"faade82d6cfe8ed09f505bc5d9204fda_p_39\"><br></p><ul list=\"ud2d862e9\"><li fid=\"u93ebbeef\" data-lake-id=\"cbcbcfa84a0c5e81080258b6f8249e69_li_5\" id=\"cbcbcfa84a0c5e81080258b6f8249e69_li_5\"><span data-lake-id=\"u066b5f89\" id=\"u066b5f89\">数值型操作：</span></li></ul><p data-lake-id=\"17b412f9fc3ec51ada5f566f0d09108c_p_40\" id=\"17b412f9fc3ec51ada5f566f0d09108c_p_40\"><br></p><p data-lake-id=\"7f62102a159170d36a5cb2b841901be8_p_41\" id=\"7f62102a159170d36a5cb2b841901be8_p_41\"><strong><span data-lake-id=\"u4c368a40\" id=\"u4c368a40\">运算符：</span></strong><span data-lake-id=\"ude22fa18\" id=\"ude22fa18\"> </span><code data-lake-id=\"ubda7c63f\" id=\"ubda7c63f\"><span data-lake-id=\"u104ada09\" id=\"u104ada09\">+</span></code><span data-lake-id=\"ud7d2af62\" id=\"ud7d2af62\">、</span><code data-lake-id=\"u493d611f\" id=\"u493d611f\"><span data-lake-id=\"uaca23cae\" id=\"uaca23cae\">-</span></code><span data-lake-id=\"uee1ccf52\" id=\"uee1ccf52\">、</span><code data-lake-id=\"u1aab5aa8\" id=\"u1aab5aa8\"><span data-lake-id=\"udad27587\" id=\"udad27587\">*</span></code><span data-lake-id=\"u842982e8\" id=\"u842982e8\">、</span><code data-lake-id=\"u7ca854fb\" id=\"u7ca854fb\"><span data-lake-id=\"ubcde3b9b\" id=\"ubcde3b9b\">/</span></code><span data-lake-id=\"u2b49bc0d\" id=\"u2b49bc0d\">、</span><code data-lake-id=\"u348276f3\" id=\"u348276f3\"><span data-lake-id=\"ueb5cb51b\" id=\"ueb5cb51b\">～/</span></code><span data-lake-id=\"u009fbb9b\" id=\"u009fbb9b\">(</span><strong><span data-lake-id=\"ubf7e78cc\" id=\"ubf7e78cc\">取整</span></strong><span data-lake-id=\"ued7eca4d\" id=\"ued7eca4d\">)、</span><code data-lake-id=\"u63c07ad1\" id=\"u63c07ad1\"><span data-lake-id=\"u7281b672\" id=\"u7281b672\">%</span></code><span data-lake-id=\"ue70a28f1\" id=\"ue70a28f1\">(</span><strong><span data-lake-id=\"ud68e3438\" id=\"ud68e3438\">取余</span></strong><span data-lake-id=\"u3ccaa6af\" id=\"u3ccaa6af\">)</span></p><p data-lake-id=\"aebb7af96a9ee3c9b7a669f28fef1d7e_p_42\" id=\"aebb7af96a9ee3c9b7a669f28fef1d7e_p_42\"><br></p><p data-lake-id=\"d8cb98402c8fed5051add71eaff7c1d8_p_43\" id=\"d8cb98402c8fed5051add71eaff7c1d8_p_43\"><strong><span data-lake-id=\"u539e8d74\" id=\"u539e8d74\">常用属性：</span></strong><span data-lake-id=\"u41c36212\" id=\"u41c36212\"> </span><code data-lake-id=\"u15fd0814\" id=\"u15fd0814\"><span data-lake-id=\"ue99c2679\" id=\"ue99c2679\">isNaN</span></code><span data-lake-id=\"u589cd23e\" id=\"u589cd23e\"> (</span><strong><span data-lake-id=\"u10c749f0\" id=\"u10c749f0\">是否是非数字</span></strong><span data-lake-id=\"ue34f370a\" id=\"ue34f370a\">)、</span><code data-lake-id=\"u36cdfd31\" id=\"u36cdfd31\"><span data-lake-id=\"u3516afb1\" id=\"u3516afb1\">isEven</span></code><span data-lake-id=\"u242e0aee\" id=\"u242e0aee\"> (</span><strong><span data-lake-id=\"u392b8b88\" id=\"u392b8b88\">是否是偶数</span></strong><span data-lake-id=\"u61ea7061\" id=\"u61ea7061\">)、</span><code data-lake-id=\"u2ef2995c\" id=\"u2ef2995c\"><span data-lake-id=\"uee6ff88d\" id=\"uee6ff88d\">isOdd</span></code><span data-lake-id=\"uba816809\" id=\"uba816809\"> (</span><strong><span data-lake-id=\"uccaad1e0\" id=\"uccaad1e0\">是否是奇数</span></strong><span data-lake-id=\"u49368290\" id=\"u49368290\">)</span></p><p data-lake-id=\"157b805d005afe38c7c2d5198b31ee6e_p_44\" id=\"157b805d005afe38c7c2d5198b31ee6e_p_44\"><br></p><p data-lake-id=\"0e61345db0c4d82610fea33ad6549618_p_45\" id=\"0e61345db0c4d82610fea33ad6549618_p_45\"><strong><span data-lake-id=\"ud1177d3b\" id=\"ud1177d3b\">常用方法：</span></strong></p><p data-lake-id=\"e81b6efc8e2153cf8aa53e3b04d7f22c_p_46\" id=\"e81b6efc8e2153cf8aa53e3b04d7f22c_p_46\"><br></p><p data-lake-id=\"901ad89df13f1fa8b0ed7230cc4a5f20_p_47\" id=\"901ad89df13f1fa8b0ed7230cc4a5f20_p_47\"><span data-lake-id=\"u2dd105d8\" id=\"u2dd105d8\"> 1. </span><code data-lake-id=\"u5d2d3928\" id=\"u5d2d3928\"><span data-lake-id=\"u1c1a54fa\" id=\"u1c1a54fa\">abs()</span></code><span data-lake-id=\"u7eecf194\" id=\"u7eecf194\"> 绝对值</span></p><p data-lake-id=\"aa95668f5a65b03373d1b0b3f9f8d3a6_p_48\" id=\"aa95668f5a65b03373d1b0b3f9f8d3a6_p_48\"><br></p><p data-lake-id=\"30d09586ebab31a6f06d7323c74bceba_p_49\" id=\"30d09586ebab31a6f06d7323c74bceba_p_49\"><span data-lake-id=\"u6db8e7b8\" id=\"u6db8e7b8\"> 2. </span><code data-lake-id=\"ua5cc601d\" id=\"ua5cc601d\"><span data-lake-id=\"ufbee6263\" id=\"ufbee6263\">round()</span></code><span data-lake-id=\"ued37a8eb\" id=\"ued37a8eb\"> 四舍五入</span></p><p data-lake-id=\"4108a5bc411c7547dc6876b612b07f81_p_50\" id=\"4108a5bc411c7547dc6876b612b07f81_p_50\"><br></p><p data-lake-id=\"7df0a2ce0c0b7778e06fe404c42899ad_p_51\" id=\"7df0a2ce0c0b7778e06fe404c42899ad_p_51\"><span data-lake-id=\"u920ce5dc\" id=\"u920ce5dc\"> 3. </span><code data-lake-id=\"u9a3191b3\" id=\"u9a3191b3\"><span data-lake-id=\"u87c4e19f\" id=\"u87c4e19f\">floor()</span></code><span data-lake-id=\"u2178347b\" id=\"u2178347b\"> 取不大于它的整数，向下取整</span></p><p data-lake-id=\"bc2359f7bb1e32241fa27f528e60a125_p_52\" id=\"bc2359f7bb1e32241fa27f528e60a125_p_52\"><br></p><p data-lake-id=\"7b36ba3badabb6c5f85e8b19dc8baeac_p_53\" id=\"7b36ba3badabb6c5f85e8b19dc8baeac_p_53\"><span data-lake-id=\"u4814e6b7\" id=\"u4814e6b7\"> 4. </span><code data-lake-id=\"ue7db98ef\" id=\"ue7db98ef\"><span data-lake-id=\"u09fb587c\" id=\"u09fb587c\">ceil()</span></code><span data-lake-id=\"u70a9df63\" id=\"u70a9df63\"> 取不小于于它的整数，向上取整</span></p><p data-lake-id=\"e10b5c78ee7ba45f407740af88433fc9_p_54\" id=\"e10b5c78ee7ba45f407740af88433fc9_p_54\"><br></p><p data-lake-id=\"fc05bb753339cca5ffc6eea670440b23_p_55\" id=\"fc05bb753339cca5ffc6eea670440b23_p_55\"><span data-lake-id=\"uaaf841d6\" id=\"uaaf841d6\"> 5. </span><code data-lake-id=\"u829b9e0e\" id=\"u829b9e0e\"><span data-lake-id=\"u2caf5a9e\" id=\"u2caf5a9e\">toInt()</span></code><span data-lake-id=\"ued4c5b36\" id=\"ued4c5b36\"> 浮点型转整形</span></p><p data-lake-id=\"a6e7204180aba568d27cc7b95d0717fd_p_56\" id=\"a6e7204180aba568d27cc7b95d0717fd_p_56\"><br></p><p data-lake-id=\"2685b546b5ccfd6e48aea7e4c95c24a1_p_57\" id=\"2685b546b5ccfd6e48aea7e4c95c24a1_p_57\"><span data-lake-id=\"u2b2af074\" id=\"u2b2af074\"> 6. </span><code data-lake-id=\"uafa4334a\" id=\"uafa4334a\"><span data-lake-id=\"u0867d179\" id=\"u0867d179\">toDouble()</span></code><span data-lake-id=\"u752db7d2\" id=\"u752db7d2\"> 整形转浮点型</span></p><p data-lake-id=\"e3c9bad72638009a374744280c63ecc6_p_58\" id=\"e3c9bad72638009a374744280c63ecc6_p_58\"><br></p><p data-lake-id=\"579486377ec4151f50ec12d2813167ca_p_59\" id=\"579486377ec4151f50ec12d2813167ca_p_59\"><strong><span data-lake-id=\"ue97f316f\" id=\"ue97f316f\">注意:</span></strong><span data-lake-id=\"u4ecfa7f8\" id=\"u4ecfa7f8\"> </span><code data-lake-id=\"ude70680c\" id=\"ude70680c\"><span data-lake-id=\"uf86328b0\" id=\"uf86328b0\">0.0 /0.0 =&gt; NAN</span></code></p><p data-lake-id=\"daa3e859dfee1b8825cb9c219dcb2526_p_60\" id=\"daa3e859dfee1b8825cb9c219dcb2526_p_60\"><br></p><h3 data-lake-id=\"d0c6a326\" id=\"d0c6a326\"><span data-lake-id=\"u919d66c8\" id=\"u919d66c8\">4.2 字符串：</span><code data-lake-id=\"u28710ede\" id=\"u28710ede\"><span data-lake-id=\"u86a5ab49\" id=\"u86a5ab49\">String</span></code></h3><p data-lake-id=\"d89d8c6a729313c0d25f9b1742c0d590_p_61\" id=\"d89d8c6a729313c0d25f9b1742c0d590_p_61\"><br></p><ul list=\"u7e435611\"><li fid=\"u4645b9e0\" data-lake-id=\"4807df6b1158ec79afe639aac52454d6_li_6\" id=\"4807df6b1158ec79afe639aac52454d6_li_6\"><span data-lake-id=\"u97e019e5\" id=\"u97e019e5\">字符串的使用</span></li></ul><p data-lake-id=\"9b034733f43578c770243b15c945bc07_p_62\" id=\"9b034733f43578c770243b15c945bc07_p_62\"><br></p><ol list=\"u78c9bf51\"><li fid=\"u35883252\" data-lake-id=\"4f2de47ac07855b064dff5485a44e190_li_7\" id=\"4f2de47ac07855b064dff5485a44e190_li_7\"><span data-lake-id=\"udfb59c50\" id=\"udfb59c50\">使用单引号，双引号创建字符串</span></li></ol><ol list=\"u446030d8\" start=\"2\"><li fid=\"ucc2b798d\" data-lake-id=\"48acd77122ea45a1f8180903fb4b4595_li_8\" id=\"48acd77122ea45a1f8180903fb4b4595_li_8\"><span data-lake-id=\"uc483ba24\" id=\"uc483ba24\">使用三个引号或双引号创建多行字符串</span></li></ol><ol list=\"u0ae1ca4c\" start=\"3\"><li fid=\"u51ca2188\" data-lake-id=\"406b9e952065106e30a26d9b40c27281_li_9\" id=\"406b9e952065106e30a26d9b40c27281_li_9\"><span data-lake-id=\"ufb023d97\" id=\"ufb023d97\">使用 </span><code data-lake-id=\"u3acf1bf6\" id=\"u3acf1bf6\"><span data-lake-id=\"u0786d24b\" id=\"u0786d24b\">r</span></code><span data-lake-id=\"u5bc8f165\" id=\"u5bc8f165\"> 创建原始 </span><code data-lake-id=\"u73d1f7ef\" id=\"u73d1f7ef\"><span data-lake-id=\"u4120ed4e\" id=\"u4120ed4e\">raw</span></code><span data-lake-id=\"udd7ddde6\" id=\"udd7ddde6\"> 字符串. </span><code data-lake-id=\"u8a24ae17\" id=\"u8a24ae17\"><span data-lake-id=\"u3774878e\" id=\"u3774878e\">=&amp;gt;</span></code></li></ol><p data-lake-id=\"87e34965e50e2c8e31ce44a85667e8dd_p_63\" id=\"87e34965e50e2c8e31ce44a85667e8dd_p_63\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22dart%22%2C%22code%22%3A%22String%20str%20%3D%20'Hello%20%5C%5Cn%20World!'%3B%5Cnprint(str)%3B%20%2F%2F%20%E8%BE%93%E5%87%BA%E6%8D%A2%E8%A1%8C%E5%BD%A2%E5%BC%8F%E7%9A%84%20Hello%20World%5Cn%5CnString%20str1%20%3D%20r'Hello%20%5C%5Cn%20World!'%3B%5Cnprint(str1)%3B%20%2F%2F%20%E8%BE%93%E5%87%BA%20Hello%20%5C%5Cn%20World%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22ddcffe57%22%7D\"></card><p data-lake-id=\"b3add770127d8c2a5064673aa8a9731f_p_64\" id=\"b3add770127d8c2a5064673aa8a9731f_p_64\"><br></p><ul list=\"uc2a6e30a\"><li fid=\"u0c588619\" data-lake-id=\"50c417f6f8aacca49cb21782e8eecbd5_li_10\" id=\"50c417f6f8aacca49cb21782e8eecbd5_li_10\"><span data-lake-id=\"u0e512c3f\" id=\"u0e512c3f\">字符串操作</span></li></ul><p data-lake-id=\"2a81d6eed31dfd1dc3c193bbdb75c1a1_p_65\" id=\"2a81d6eed31dfd1dc3c193bbdb75c1a1_p_65\"><br></p><p data-lake-id=\"a3b1a8ba5f5881d907725330f1388134_p_66\" id=\"a3b1a8ba5f5881d907725330f1388134_p_66\"><strong><span data-lake-id=\"uaf45c85e\" id=\"uaf45c85e\">运算符:</span></strong><span data-lake-id=\"u7e4eb581\" id=\"u7e4eb581\"> </span><code data-lake-id=\"u186b9867\" id=\"u186b9867\"><span data-lake-id=\"uf0b5cbc0\" id=\"uf0b5cbc0\">+</span></code><span data-lake-id=\"uf79d2c6b\" id=\"uf79d2c6b\">、</span><code data-lake-id=\"ud56ace76\" id=\"ud56ace76\"><span data-lake-id=\"u6fc9f6b0\" id=\"u6fc9f6b0\">*</span></code><span data-lake-id=\"u10d66142\" id=\"u10d66142\">(</span><strong><span data-lake-id=\"u559db940\" id=\"u559db940\">重复次数</span></strong><span data-lake-id=\"u9a7d3cad\" id=\"u9a7d3cad\">)、</span><code data-lake-id=\"u7d269cbf\" id=\"u7d269cbf\"><span data-lake-id=\"u16288b39\" id=\"u16288b39\">==</span></code><span data-lake-id=\"u9e6240e8\" id=\"u9e6240e8\">、</span><code data-lake-id=\"u610aa1c6\" id=\"u610aa1c6\"><span data-lake-id=\"ucfd1dc90\" id=\"ucfd1dc90\">[]</span></code><span data-lake-id=\"ucab6541c\" id=\"ucab6541c\">(</span><strong><span data-lake-id=\"u177e1733\" id=\"u177e1733\">取字符</span></strong><span data-lake-id=\"u96806c92\" id=\"u96806c92\">)</span></p><p data-lake-id=\"152302cc03cd3433e252fd8fbe4bade7_p_67\" id=\"152302cc03cd3433e252fd8fbe4bade7_p_67\"><br></p><p data-lake-id=\"4c8e762298f4de42a44d7beaa8a560d7_p_68\" id=\"4c8e762298f4de42a44d7beaa8a560d7_p_68\"><strong><span data-lake-id=\"ua117c5eb\" id=\"ua117c5eb\">插值表达式：</span></strong><span data-lake-id=\"u04ff44ac\" id=\"u04ff44ac\"> </span><code data-lake-id=\"udd9ad673\" id=\"udd9ad673\"><span data-lake-id=\"u67d07841\" id=\"u67d07841\">${expression}</span></code></p><p data-lake-id=\"956e0d4312e941b77cd57ec35c294aff_p_69\" id=\"956e0d4312e941b77cd57ec35c294aff_p_69\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22dart%22%2C%22code%22%3A%22int%20a%20%3D%201%3B%5Cnint%20b%20%3D%202%3B%5Cnprint('a%20%2B%20b%20%3D%20%24%7Ba%20%2B%20b%7D')%3B%5Cnprint('a%3D%24a')%3B%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22cebc7176%22%7D\"></card><p data-lake-id=\"67523e0fa28fe87849ce38cd391e3347_p_70\" id=\"67523e0fa28fe87849ce38cd391e3347_p_70\"><br></p><p data-lake-id=\"32901d9d2241486b0f03eeb197210d43_p_71\" id=\"32901d9d2241486b0f03eeb197210d43_p_71\"><strong><span data-lake-id=\"u2e12c3dd\" id=\"u2e12c3dd\">常用属性</span></strong><span data-lake-id=\"ua5569cba\" id=\"ua5569cba\">：</span><code data-lake-id=\"u39b33611\" id=\"u39b33611\"><span data-lake-id=\"u47160403\" id=\"u47160403\">length</span></code><span data-lake-id=\"u9674ab18\" id=\"u9674ab18\">、</span><code data-lake-id=\"u278bacd1\" id=\"u278bacd1\"><span data-lake-id=\"u2a581fc0\" id=\"u2a581fc0\">isEmpty</span></code><span data-lake-id=\"u1c546d20\" id=\"u1c546d20\">、</span><code data-lake-id=\"u86448ea5\" id=\"u86448ea5\"><span data-lake-id=\"u0245b08a\" id=\"u0245b08a\">isNotEmpty</span></code></p><p data-lake-id=\"200b796b4b1f5a36aa12caae6b6fa3d8_p_72\" id=\"200b796b4b1f5a36aa12caae6b6fa3d8_p_72\"><br></p><p data-lake-id=\"c3824fa46270d486ccc5e4bf91047513_p_73\" id=\"c3824fa46270d486ccc5e4bf91047513_p_73\"><strong><span data-lake-id=\"uf496783e\" id=\"uf496783e\">常用方法</span></strong><span data-lake-id=\"u4999cfb5\" id=\"u4999cfb5\">：</span></p><p data-lake-id=\"d36608d2dcf9f070081537010b5adfb3_p_74\" id=\"d36608d2dcf9f070081537010b5adfb3_p_74\"><br></p><p data-lake-id=\"0e112c57c86c4738545f78f11e57db61_p_75\" id=\"0e112c57c86c4738545f78f11e57db61_p_75\"><span data-lake-id=\"u03f2eeb8\" id=\"u03f2eeb8\">1、</span><code data-lake-id=\"u1bf056fd\" id=\"u1bf056fd\"><span data-lake-id=\"ufa3fe918\" id=\"ufa3fe918\">contains()</span></code><span data-lake-id=\"u7757f0e0\" id=\"u7757f0e0\">(是否包含)</span></p><p data-lake-id=\"391eee0f96cca26f6e7df243706d21bf_p_76\" id=\"391eee0f96cca26f6e7df243706d21bf_p_76\"><br></p><p data-lake-id=\"235db49a5621c0f65445c20861a774d3_p_77\" id=\"235db49a5621c0f65445c20861a774d3_p_77\"><span data-lake-id=\"ubfdbd8b9\" id=\"ubfdbd8b9\">2、</span><code data-lake-id=\"u61cfe318\" id=\"u61cfe318\"><span data-lake-id=\"ub97202dc\" id=\"ub97202dc\">subString()</span></code><span data-lake-id=\"ud41aa1d3\" id=\"ud41aa1d3\">(截取一段字符串，参数1:开始位置；参数2:结束位置(不包括))</span></p><p data-lake-id=\"f585fed1cef9af7641b65ac1c4919258_p_78\" id=\"f585fed1cef9af7641b65ac1c4919258_p_78\"><br></p><p data-lake-id=\"9672958375b123e1e3a4c4e0e8c981b0_p_79\" id=\"9672958375b123e1e3a4c4e0e8c981b0_p_79\"><span data-lake-id=\"u36886d1f\" id=\"u36886d1f\">3、</span><code data-lake-id=\"u37bc9267\" id=\"u37bc9267\"><span data-lake-id=\"u20e38212\" id=\"u20e38212\">startsWith()</span></code><span data-lake-id=\"ua9a86e0b\" id=\"ua9a86e0b\">(是否以一个字符串开头)</span></p><p data-lake-id=\"cacc5e28cdefa24e262c83e0ab2a3ade_p_80\" id=\"cacc5e28cdefa24e262c83e0ab2a3ade_p_80\"><br></p><p data-lake-id=\"9f8e2fa2713b39a415bd142e9d26b9ae_p_81\" id=\"9f8e2fa2713b39a415bd142e9d26b9ae_p_81\"><span data-lake-id=\"u513604c6\" id=\"u513604c6\">4、</span><code data-lake-id=\"uc0735666\" id=\"uc0735666\"><span data-lake-id=\"u756e21f0\" id=\"u756e21f0\">endsWith()</span></code><span data-lake-id=\"ue363038f\" id=\"ue363038f\">(是否以一个字符串结尾)</span></p><p data-lake-id=\"ede07f6666baf1587414d7171c5dd877_p_82\" id=\"ede07f6666baf1587414d7171c5dd877_p_82\"><br></p><p data-lake-id=\"7eac4beb2a9933bfb57148c14dfef49a_p_83\" id=\"7eac4beb2a9933bfb57148c14dfef49a_p_83\"><span data-lake-id=\"u290a5f91\" id=\"u290a5f91\">5、</span><code data-lake-id=\"uc3f85a58\" id=\"uc3f85a58\"><span data-lake-id=\"ub4276041\" id=\"ub4276041\">indexOf()</span></code><span data-lake-id=\"u1cfccb6e\" id=\"u1cfccb6e\">(是否包含一个字符，返回这个字符的下标)</span></p><p data-lake-id=\"470257ffbff08ad0eedbc557452f8c66_p_84\" id=\"470257ffbff08ad0eedbc557452f8c66_p_84\"><br></p><p data-lake-id=\"7a449560b032be8c023c2d413f18a99c_p_85\" id=\"7a449560b032be8c023c2d413f18a99c_p_85\"><span data-lake-id=\"u9da7051a\" id=\"u9da7051a\">6、</span><code data-lake-id=\"u3d6d4d95\" id=\"u3d6d4d95\"><span data-lake-id=\"u206b0d38\" id=\"u206b0d38\">lastIndexOf()</span></code><span data-lake-id=\"u7590f740\" id=\"u7590f740\">(是否包含一个字符，倒序返回这个字符的下标)</span></p><p data-lake-id=\"c07d4a2054239914d4a014d7d64fcf23_p_86\" id=\"c07d4a2054239914d4a014d7d64fcf23_p_86\"><br></p><p data-lake-id=\"65f948928283ecdcfb33599856a7a1f9_p_87\" id=\"65f948928283ecdcfb33599856a7a1f9_p_87\"><span data-lake-id=\"udaf741dc\" id=\"udaf741dc\">7、</span><code data-lake-id=\"u139aaeeb\" id=\"u139aaeeb\"><span data-lake-id=\"u750face7\" id=\"u750face7\">toLowerCase()</span></code><span data-lake-id=\"u55be8740\" id=\"u55be8740\">(转换小写)</span></p><p data-lake-id=\"ac4c0d2013d04adfac6d2e9459525ac0_p_88\" id=\"ac4c0d2013d04adfac6d2e9459525ac0_p_88\"><br></p><p data-lake-id=\"c4af109e5f9e548d8aed504aa58bdf77_p_89\" id=\"c4af109e5f9e548d8aed504aa58bdf77_p_89\"><span data-lake-id=\"ud8c4513c\" id=\"ud8c4513c\">8、</span><code data-lake-id=\"ue08e467b\" id=\"ue08e467b\"><span data-lake-id=\"u4bdf4ef3\" id=\"u4bdf4ef3\">toUpperCase()</span></code><span data-lake-id=\"uc9a2e515\" id=\"uc9a2e515\">(转换大写)</span></p><p data-lake-id=\"700ece5e21ebc17eb29d438c814531fe_p_90\" id=\"700ece5e21ebc17eb29d438c814531fe_p_90\"><br></p><p data-lake-id=\"d240e07c3cda8763d135a158a8868d9c_p_91\" id=\"d240e07c3cda8763d135a158a8868d9c_p_91\"><span data-lake-id=\"ud6401292\" id=\"ud6401292\">9、</span><code data-lake-id=\"u3e835759\" id=\"u3e835759\"><span data-lake-id=\"u76dc5754\" id=\"u76dc5754\">trim()</span></code><span data-lake-id=\"u33b47d54\" id=\"u33b47d54\">(截取空格)</span></p><p data-lake-id=\"f82a35c2fca60d6b3bdc5c1000201985_p_92\" id=\"f82a35c2fca60d6b3bdc5c1000201985_p_92\"><br></p><p data-lake-id=\"dd4f5705532ea3e11e67d07369fd2a2a_p_93\" id=\"dd4f5705532ea3e11e67d07369fd2a2a_p_93\"><span data-lake-id=\"u312c8026\" id=\"u312c8026\">10、</span><code data-lake-id=\"u8e23265a\" id=\"u8e23265a\"><span data-lake-id=\"uf8d8afd8\" id=\"uf8d8afd8\">trimLeft()</span></code><span data-lake-id=\"ue9ce7436\" id=\"ue9ce7436\">(截取左边空格)</span></p><p data-lake-id=\"d0973d57fdd5c28d718b374e8fa011eb_p_94\" id=\"d0973d57fdd5c28d718b374e8fa011eb_p_94\"><br></p><p data-lake-id=\"06974f7abdfcf9aad7ed34c1efb75387_p_95\" id=\"06974f7abdfcf9aad7ed34c1efb75387_p_95\"><span data-lake-id=\"u992ae07f\" id=\"u992ae07f\">11、</span><code data-lake-id=\"u2f59f354\" id=\"u2f59f354\"><span data-lake-id=\"u85dbbb24\" id=\"u85dbbb24\">trimRight()</span></code><span data-lake-id=\"uca8d0781\" id=\"uca8d0781\">(截取右边空格)</span></p><p data-lake-id=\"cd1514dfedaab485e5767b166731e116_p_96\" id=\"cd1514dfedaab485e5767b166731e116_p_96\"><br></p><p data-lake-id=\"6e6fc016839665ac1b188eebf806ce0b_p_97\" id=\"6e6fc016839665ac1b188eebf806ce0b_p_97\"><span data-lake-id=\"u63fca714\" id=\"u63fca714\">12、</span><code data-lake-id=\"ud5455437\" id=\"ud5455437\"><span data-lake-id=\"u4acc461f\" id=\"u4acc461f\">split()</span></code><span data-lake-id=\"u363164ea\" id=\"u363164ea\">(分割字符串)</span></p><p data-lake-id=\"545db91b827f87cc9afe81c0f08a1a88_p_98\" id=\"545db91b827f87cc9afe81c0f08a1a88_p_98\"><br></p><p data-lake-id=\"7f071668e9a71f32f4ce84b5d6d9d99e_p_99\" id=\"7f071668e9a71f32f4ce84b5d6d9d99e_p_99\"><span data-lake-id=\"u3d51c598\" id=\"u3d51c598\">13、</span><code data-lake-id=\"ud21ad007\" id=\"ud21ad007\"><span data-lake-id=\"u35bd4b23\" id=\"u35bd4b23\">replaceXXX()</span></code><span data-lake-id=\"u51faa020\" id=\"u51faa020\">(替换)</span></p><p data-lake-id=\"ec69cd8d8f73ee437722723e0adf1fa7_p_100\" id=\"ec69cd8d8f73ee437722723e0adf1fa7_p_100\"><br></p><h3 data-lake-id=\"8ca0f9f4\" id=\"8ca0f9f4\"><span data-lake-id=\"ufbf11a24\" id=\"ufbf11a24\">4.3 布尔型：</span><code data-lake-id=\"u4928b7a4\" id=\"u4928b7a4\"><span data-lake-id=\"uf582385d\" id=\"uf582385d\">Boolean</span></code></h3><p data-lake-id=\"01884230bc631815ce050c63d5156a8c_p_101\" id=\"01884230bc631815ce050c63d5156a8c_p_101\"><br></p><h3 data-lake-id=\"7a6f4b82\" id=\"7a6f4b82\"><span data-lake-id=\"u2b0f9db2\" id=\"u2b0f9db2\">4.4 列表：</span><code data-lake-id=\"u4319a1ee\" id=\"u4319a1ee\"><span data-lake-id=\"u20a8f2b7\" id=\"u20a8f2b7\">List</span></code></h3><p data-lake-id=\"a2c2ab33193f15adcdff2e08f718d7c2_p_102\" id=\"a2c2ab33193f15adcdff2e08f718d7c2_p_102\"><br></p><ul list=\"ufb93a12e\"><li fid=\"uea6bfb8a\" data-lake-id=\"bbc34005924571b22b99d435b8cc5fcc_li_11\" id=\"bbc34005924571b22b99d435b8cc5fcc_li_11\"><code data-lake-id=\"u566211f1\" id=\"u566211f1\"><strong><span data-lake-id=\"u7d00c686\" id=\"u7d00c686\">List</span></strong></code><strong><span data-lake-id=\"uecd832d5\" id=\"uecd832d5\">(数组)的创建</span></strong></li></ul><p data-lake-id=\"c4eb78622bfacec164736bf4df40fa3b_p_103\" id=\"c4eb78622bfacec164736bf4df40fa3b_p_103\"><br></p><p data-lake-id=\"507710bca3293fce405d2de8337463c2_p_104\" id=\"507710bca3293fce405d2de8337463c2_p_104\"><strong><span data-lake-id=\"u21cc4722\" id=\"u21cc4722\">创建 </span></strong><code data-lake-id=\"udf95c87e\" id=\"udf95c87e\"><strong><span data-lake-id=\"u5f72581b\" id=\"u5f72581b\">List</span></strong></code><strong><span data-lake-id=\"u67ba1a75\" id=\"u67ba1a75\">：</span></strong></p><p data-lake-id=\"702e00ceee7e1a86732f5fe484305638_p_105\" id=\"702e00ceee7e1a86732f5fe484305638_p_105\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22dart%22%2C%22code%22%3A%22var%20list%20%3D%20%5B1%2C%202%2C%203%5D%3B%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%223e45b4fd%22%7D\"></card><p data-lake-id=\"32e4b810a1a3b020b0a0d082442d55f7_p_106\" id=\"32e4b810a1a3b020b0a0d082442d55f7_p_106\"><br></p><p data-lake-id=\"7fde13e3572576071427149c071f3106_p_107\" id=\"7fde13e3572576071427149c071f3106_p_107\"><strong><span data-lake-id=\"u33cd0855\" id=\"u33cd0855\">创建不可变的 List：</span></strong></p><p data-lake-id=\"c6ea08d82bf830d4344bc47c75959696_p_108\" id=\"c6ea08d82bf830d4344bc47c75959696_p_108\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22dart%22%2C%22code%22%3A%22var%20list%20%3D%20const%20%5B1%2C%202%2C%203%5D%3B%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%2284ac5242%22%7D\"></card><p data-lake-id=\"db6a3a7f6005176b48ff149f30b21edd_p_109\" id=\"db6a3a7f6005176b48ff149f30b21edd_p_109\"><br></p><p data-lake-id=\"2ec24553e9f1e3274c41666eb9b18f98_p_110\" id=\"2ec24553e9f1e3274c41666eb9b18f98_p_110\"><strong><span data-lake-id=\"ud6493aba\" id=\"ud6493aba\">构造创建：</span></strong></p><p data-lake-id=\"7df9b20b6b924d2fc8c9e5079bc8d88d_p_111\" id=\"7df9b20b6b924d2fc8c9e5079bc8d88d_p_111\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22dart%22%2C%22code%22%3A%22var%20list%20%3D%20new%20List()%3B%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%225cf82732%22%7D\"></card><p data-lake-id=\"91e61ff04e041e671d1cfa701fb2f0a0_p_112\" id=\"91e61ff04e041e671d1cfa701fb2f0a0_p_112\"><br></p><ul list=\"u136a02a4\"><li fid=\"ua2e6ccd0\" data-lake-id=\"6cdc930b0a9bcb62ff889202652ee4a2_li_12\" id=\"6cdc930b0a9bcb62ff889202652ee4a2_li_12\"><strong><span data-lake-id=\"ud93882c3\" id=\"ud93882c3\">常用操作</span></strong></li></ul><p data-lake-id=\"45e36abc53ce1dcd83cb64d5bdb2b960_p_113\" id=\"45e36abc53ce1dcd83cb64d5bdb2b960_p_113\"><br></p><p data-lake-id=\"fbf5c055cc27a29000dc26ca46f6a5b2_p_114\" id=\"fbf5c055cc27a29000dc26ca46f6a5b2_p_114\"><code data-lake-id=\"u10ef0a0c\" id=\"u10ef0a0c\"><span data-lake-id=\"u7299afdd\" id=\"u7299afdd\">[].length</span></code></p><p data-lake-id=\"bdad9f83e0239c83aaf356c272a6c0ea_p_115\" id=\"bdad9f83e0239c83aaf356c272a6c0ea_p_115\"><br></p><p data-lake-id=\"ebb6bef3211e5ba4d45cddf6700eeca8_p_116\" id=\"ebb6bef3211e5ba4d45cddf6700eeca8_p_116\"><code data-lake-id=\"u3ff628c3\" id=\"u3ff628c3\"><span data-lake-id=\"ue34b9c5f\" id=\"ue34b9c5f\">add()</span></code><span data-lake-id=\"u62a3ee9b\" id=\"u62a3ee9b\">、</span><code data-lake-id=\"u8b7c376a\" id=\"u8b7c376a\"><span data-lake-id=\"u0c374618\" id=\"u0c374618\">insert()</span></code><span data-lake-id=\"ue6d38a4e\" id=\"ue6d38a4e\"> </span><strong><span data-lake-id=\"u1d903f3d\" id=\"u1d903f3d\">用来添加元素</span></strong></p><p data-lake-id=\"df79537d6e51b378da87648af8c34dc2_p_117\" id=\"df79537d6e51b378da87648af8c34dc2_p_117\"><br></p><p data-lake-id=\"9e1d1d94e54dab315b967eb9cca78974_p_118\" id=\"9e1d1d94e54dab315b967eb9cca78974_p_118\"><code data-lake-id=\"u3ed089f9\" id=\"u3ed089f9\"><span data-lake-id=\"u3d04a06a\" id=\"u3d04a06a\">remove()</span></code><span data-lake-id=\"u7561cb88\" id=\"u7561cb88\">、</span><code data-lake-id=\"uf1787a57\" id=\"uf1787a57\"><span data-lake-id=\"ubd99908e\" id=\"ubd99908e\">clear()</span></code><span data-lake-id=\"ucb4cbd9f\" id=\"ucb4cbd9f\"> </span><strong><span data-lake-id=\"ue61c0098\" id=\"ue61c0098\">用来删除元素，其中 </span></strong><code data-lake-id=\"u0cfd3d5f\" id=\"u0cfd3d5f\"><strong><span data-lake-id=\"u0318ff5c\" id=\"u0318ff5c\">clear</span></strong></code><strong><span data-lake-id=\"u8aaea878\" id=\"u8aaea878\"> 是清空整个 </span></strong><code data-lake-id=\"u8632be20\" id=\"u8632be20\"><strong><span data-lake-id=\"ufd8b453f\" id=\"ufd8b453f\">list</span></strong></code></p><p data-lake-id=\"649530dfe6472825a73f37a542e2e465_p_119\" id=\"649530dfe6472825a73f37a542e2e465_p_119\"><br></p><p data-lake-id=\"c44a782b4f97445dd1a5147d1cea57cb_p_120\" id=\"c44a782b4f97445dd1a5147d1cea57cb_p_120\"><code data-lake-id=\"u2347fb9b\" id=\"u2347fb9b\"><span data-lake-id=\"ufd57e8f0\" id=\"ufd57e8f0\">indexOf()</span></code><span data-lake-id=\"ua6cd8dd0\" id=\"ua6cd8dd0\">、</span><code data-lake-id=\"u55bf5f31\" id=\"u55bf5f31\"><span data-lake-id=\"u048090a8\" id=\"u048090a8\">lastIndexOf</span></code><span data-lake-id=\"u4e61a889\" id=\"u4e61a889\"> </span><strong><span data-lake-id=\"uabf13249\" id=\"uabf13249\">获取 </span></strong><code data-lake-id=\"u4ad6db7e\" id=\"u4ad6db7e\"><strong><span data-lake-id=\"u4a994942\" id=\"u4a994942\">list</span></strong></code><strong><span data-lake-id=\"u28a0c372\" id=\"u28a0c372\"> 中元素的位置</span></strong></p><p data-lake-id=\"d0c08438d746f74145c64c20ef564288_p_121\" id=\"d0c08438d746f74145c64c20ef564288_p_121\"><br></p><p data-lake-id=\"940e412ec8d104df799f638e9dae072a_p_122\" id=\"940e412ec8d104df799f638e9dae072a_p_122\"><code data-lake-id=\"u890c9930\" id=\"u890c9930\"><span data-lake-id=\"u05359f4b\" id=\"u05359f4b\">sort()</span></code><span data-lake-id=\"u1934cb72\" id=\"u1934cb72\"> </span><strong><span data-lake-id=\"uea1ae2dd\" id=\"uea1ae2dd\">排序，可以传递参数，参数是要传递的方法，默认按照 </span></strong><code data-lake-id=\"uac074bad\" id=\"uac074bad\"><strong><span data-lake-id=\"u0f1d2bd0\" id=\"u0f1d2bd0\">ASCII</span></strong></code><strong><span data-lake-id=\"uf8d86404\" id=\"uf8d86404\"> 码来进行排序。</span></strong></p><p data-lake-id=\"229af124bfdb4f72f7476a537561ed01_p_123\" id=\"229af124bfdb4f72f7476a537561ed01_p_123\"><br></p><p data-lake-id=\"0ad17f28928647e4d87741f38a742edb_p_124\" id=\"0ad17f28928647e4d87741f38a742edb_p_124\"><code data-lake-id=\"ua0f79260\" id=\"ua0f79260\"><span data-lake-id=\"ued17b63f\" id=\"ued17b63f\">sublist()</span></code><span data-lake-id=\"u79e3328e\" id=\"u79e3328e\"> </span><strong><span data-lake-id=\"uf3db43a0\" id=\"uf3db43a0\">获取子 </span></strong><code data-lake-id=\"ucc8364b6\" id=\"ucc8364b6\"><strong><span data-lake-id=\"ua8a89f4e\" id=\"ua8a89f4e\">list</span></strong></code></p><p data-lake-id=\"58e4bdcd35d7c4cee2e913ca95d454c8_p_125\" id=\"58e4bdcd35d7c4cee2e913ca95d454c8_p_125\"><br></p><p data-lake-id=\"90ab158ab0669d472e9bce0892b494b1_p_126\" id=\"90ab158ab0669d472e9bce0892b494b1_p_126\"><code data-lake-id=\"u30d5a5af\" id=\"u30d5a5af\"><span data-lake-id=\"uebc57d48\" id=\"uebc57d48\">shuffle()</span></code><span data-lake-id=\"u54fda887\" id=\"u54fda887\"> </span><strong><span data-lake-id=\"uc067b03b\" id=\"uc067b03b\">打乱(随机打乱 )</span></strong></p><p data-lake-id=\"218526f010699898c9b5afe5bee78564_p_127\" id=\"218526f010699898c9b5afe5bee78564_p_127\"><br></p><p data-lake-id=\"38259d4109422d7ac89903b2b931ec00_p_128\" id=\"38259d4109422d7ac89903b2b931ec00_p_128\"><code data-lake-id=\"u836651ae\" id=\"u836651ae\"><span data-lake-id=\"u9e2a2cb2\" id=\"u9e2a2cb2\">asMap()</span></code><span data-lake-id=\"u0527250a\" id=\"u0527250a\">  </span><strong><span data-lake-id=\"u28b9a178\" id=\"u28b9a178\">将 </span></strong><code data-lake-id=\"u67f9d78f\" id=\"u67f9d78f\"><strong><span data-lake-id=\"u2c0fc92d\" id=\"u2c0fc92d\">list</span></strong></code><strong><span data-lake-id=\"u1ff24910\" id=\"u1ff24910\"> 转换为 </span></strong><code data-lake-id=\"u8ef486b5\" id=\"u8ef486b5\"><strong><span data-lake-id=\"ud173dbf8\" id=\"ud173dbf8\">map</span></strong></code></p><p data-lake-id=\"95d2789c2734df969b06fab66880adbb_p_129\" id=\"95d2789c2734df969b06fab66880adbb_p_129\"><br></p><p data-lake-id=\"d1e49d942f29780dc2a90589abfcbd16_p_130\" id=\"d1e49d942f29780dc2a90589abfcbd16_p_130\"><code data-lake-id=\"ucb2cbc86\" id=\"ucb2cbc86\"><span data-lake-id=\"u9793c8a1\" id=\"u9793c8a1\">forEach()</span></code><span data-lake-id=\"u4868d6ba\" id=\"u4868d6ba\"> </span><strong><span data-lake-id=\"u5a8c5c4c\" id=\"u5a8c5c4c\">循环一个 </span></strong><code data-lake-id=\"u4b249928\" id=\"u4b249928\"><strong><span data-lake-id=\"u68e865dd\" id=\"u68e865dd\">list</span></strong></code><strong><span data-lake-id=\"ud63c8c88\" id=\"ud63c8c88\">，括号中传递的是一个方法。</span></strong><span data-lake-id=\"u2dc793b2\" id=\"u2dc793b2\"> </span><code data-lake-id=\"u5aad86b1\" id=\"u5aad86b1\"><span data-lake-id=\"u4e72ef50\" id=\"u4e72ef50\">list.forEach(print);</span></code></p><p data-lake-id=\"9478673e50b8f1aa6afefb8412111c6e_p_131\" id=\"9478673e50b8f1aa6afefb8412111c6e_p_131\"><br></p><p data-lake-id=\"2890fb7d42ad2dab771c823da10c2d83_p_132\" id=\"2890fb7d42ad2dab771c823da10c2d83_p_132\"><code data-lake-id=\"uef87e7a7\" id=\"uef87e7a7\"><span data-lake-id=\"u7c00946f\" id=\"u7c00946f\">generate</span></code><span data-lake-id=\"u36370661\" id=\"u36370661\"> (生成集合的长度, 迭代器回调函数)</span><strong><span data-lake-id=\"u53f3ccbc\" id=\"u53f3ccbc\">集合的生成函数</span></strong></p><p data-lake-id=\"ec0f52fa0be53a0503a5f45678d7af64_p_133\" id=\"ec0f52fa0be53a0503a5f45678d7af64_p_133\"><br></p><h3 data-lake-id=\"851523de\" id=\"851523de\"><span data-lake-id=\"u4ddf74bd\" id=\"u4ddf74bd\">4.5 键值对：</span><code data-lake-id=\"ue45e99ec\" id=\"ue45e99ec\"><span data-lake-id=\"u4452826c\" id=\"u4452826c\">Map</span></code></h3><p data-lake-id=\"6a5e5c037f52571ccd187b65a73b96f5_p_134\" id=\"6a5e5c037f52571ccd187b65a73b96f5_p_134\"><br></p><ul list=\"uad799139\"><li fid=\"u4372e36a\" data-lake-id=\"7619f286c38a1f8b13705838e4072d6c_li_13\" id=\"7619f286c38a1f8b13705838e4072d6c_li_13\"><code data-lake-id=\"u72e76ff1\" id=\"u72e76ff1\"><span data-lake-id=\"u314dd8f8\" id=\"u314dd8f8\">Map</span></code><span data-lake-id=\"u1904b068\" id=\"u1904b068\"> 的创建</span></li></ul><p data-lake-id=\"f8654ab62d3ffca1147edabe4e605303_p_135\" id=\"f8654ab62d3ffca1147edabe4e605303_p_135\"><br></p><blockquote data-lake-id=\"u9a5305fa\" id=\"u9a5305fa\"><p data-lake-id=\"73e63644f89cb670ef9bdb48b7cb4292_p_136\" id=\"73e63644f89cb670ef9bdb48b7cb4292_p_136\"><span data-lake-id=\"uaf0dae6e\" id=\"uaf0dae6e\">创建 Map</span></p></blockquote><p data-lake-id=\"f474938634c47815c9cafa361ce29c41_p_137\" id=\"f474938634c47815c9cafa361ce29c41_p_137\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22dart%22%2C%22code%22%3A%22var%20language%20%3D%20%7B'first'%3A%20'Dart'%2C%20'second'%3A%20'Java'%7D%3B%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%225d50ed09%22%7D\"></card><p data-lake-id=\"b1543dbd8d735319a0032dfd0a528e84_p_138\" id=\"b1543dbd8d735319a0032dfd0a528e84_p_138\"><br></p><blockquote data-lake-id=\"uef2f66bf\" id=\"uef2f66bf\"><p data-lake-id=\"71856c5a7c4deddc6eefebb1c7f23656_p_139\" id=\"71856c5a7c4deddc6eefebb1c7f23656_p_139\"><span data-lake-id=\"u5a598252\" id=\"u5a598252\">创建不可变 Map</span></p></blockquote><p data-lake-id=\"91cea5fb3ce029632e4cd2ba40ed2467_p_140\" id=\"91cea5fb3ce029632e4cd2ba40ed2467_p_140\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22dart%22%2C%22code%22%3A%22var%20language%20%3D%20const%20%7B'first'%3A%20'Dart'%2C%20'second'%3A%20'Java'%7D%3B%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%222460bc3e%22%7D\"></card><p data-lake-id=\"6a77d5641d799908d669ed274c8503e1_p_141\" id=\"6a77d5641d799908d669ed274c8503e1_p_141\"><br></p><blockquote data-lake-id=\"uc83f1f63\" id=\"uc83f1f63\"><p data-lake-id=\"63bc3581ece212bbb29f4ecf97590143_p_142\" id=\"63bc3581ece212bbb29f4ecf97590143_p_142\"><span data-lake-id=\"u6e6bd4f7\" id=\"u6e6bd4f7\">构造创建</span></p></blockquote><p data-lake-id=\"ecbf2a7b370d7c1f11409dc2caadd396_p_143\" id=\"ecbf2a7b370d7c1f11409dc2caadd396_p_143\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22dart%22%2C%22code%22%3A%22var%20language%20%3D%20new%20Map()%3B%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22a6ad0cd0%22%7D\"></card><p data-lake-id=\"4f67eb9790b6288e2156994dc5ad2f6e_p_144\" id=\"4f67eb9790b6288e2156994dc5ad2f6e_p_144\"><br></p><ul list=\"u727e631b\"><li fid=\"u2c8db841\" data-lake-id=\"363e14b7b4f572366c286c15573115f2_li_14\" id=\"363e14b7b4f572366c286c15573115f2_li_14\"><code data-lake-id=\"u4d8b4292\" id=\"u4d8b4292\"><span data-lake-id=\"u492a3222\" id=\"u492a3222\">Map</span></code><span data-lake-id=\"u2aeeb189\" id=\"u2aeeb189\"> 常用操作</span></li></ul><p data-lake-id=\"bdbce808fca59ee263677a643219090a_p_145\" id=\"bdbce808fca59ee263677a643219090a_p_145\"><br></p><p data-lake-id=\"5c50150ba70a9c56a561b16670294632_p_146\" id=\"5c50150ba70a9c56a561b16670294632_p_146\"><span data-lake-id=\"ud926622a\" id=\"ud926622a\">1、</span><code data-lake-id=\"u8314db76\" id=\"u8314db76\"><span data-lake-id=\"u405b78bc\" id=\"u405b78bc\">[].length</span></code></p><p data-lake-id=\"7e0f4c425a469a407bb6094b1048bd2a_p_147\" id=\"7e0f4c425a469a407bb6094b1048bd2a_p_147\"><br></p><p data-lake-id=\"581833c2ef73158c738d8c4e5333ca21_p_148\" id=\"581833c2ef73158c738d8c4e5333ca21_p_148\"><span data-lake-id=\"uf8256797\" id=\"uf8256797\">2、</span><code data-lake-id=\"u7864dec3\" id=\"u7864dec3\"><span data-lake-id=\"uddabfe32\" id=\"uddabfe32\">isEmpty()</span></code><span data-lake-id=\"uf4d76123\" id=\"uf4d76123\">、</span><code data-lake-id=\"u7fe0f0ae\" id=\"u7fe0f0ae\"><span data-lake-id=\"u122d001d\" id=\"u122d001d\">isNotEmpty()</span></code><span data-lake-id=\"u16b56329\" id=\"u16b56329\"> </span><strong><span data-lake-id=\"ua53cb50d\" id=\"ua53cb50d\">是否为空</span></strong></p><p data-lake-id=\"969bd2598fc33869bfe0a82878b9c62e_p_149\" id=\"969bd2598fc33869bfe0a82878b9c62e_p_149\"><br></p><p data-lake-id=\"56a6c5b5bb60e646eb5422731f4b7491_p_150\" id=\"56a6c5b5bb60e646eb5422731f4b7491_p_150\"><span data-lake-id=\"uf614f1d9\" id=\"uf614f1d9\">3、</span><code data-lake-id=\"uc41cd05a\" id=\"uc41cd05a\"><span data-lake-id=\"u92366b2e\" id=\"u92366b2e\">keys,values</span></code><span data-lake-id=\"ufdb75ef5\" id=\"ufdb75ef5\"> </span><strong><span data-lake-id=\"ue4cecf0f\" id=\"ue4cecf0f\">获取 map 所有的键和所有的值</span></strong></p><p data-lake-id=\"132b72ac11decfdb5c7171cc51240ee2_p_151\" id=\"132b72ac11decfdb5c7171cc51240ee2_p_151\"><br></p><p data-lake-id=\"1df5e03badd3a60f200a3b4926e6684d_p_152\" id=\"1df5e03badd3a60f200a3b4926e6684d_p_152\"><span data-lake-id=\"u7cbdb6c8\" id=\"u7cbdb6c8\">4、</span><code data-lake-id=\"ube9ee53f\" id=\"ube9ee53f\"><span data-lake-id=\"u3e8d75b2\" id=\"u3e8d75b2\">containsKey()</span></code><span data-lake-id=\"ud7629fb3\" id=\"ud7629fb3\"> </span><strong><span data-lake-id=\"u2cc70866\" id=\"u2cc70866\">是否包含某个键</span></strong></p><p data-lake-id=\"d6aad01cce7555ee21c55669cd02505b_p_153\" id=\"d6aad01cce7555ee21c55669cd02505b_p_153\"><br></p><p data-lake-id=\"040d1927073f9b26b3534a01ad54005f_p_154\" id=\"040d1927073f9b26b3534a01ad54005f_p_154\"><span data-lake-id=\"ua70b2cc5\" id=\"ua70b2cc5\">5、</span><code data-lake-id=\"uc54bfd4d\" id=\"uc54bfd4d\"><span data-lake-id=\"u6c4955ee\" id=\"u6c4955ee\">containsValue()</span></code><span data-lake-id=\"u40551057\" id=\"u40551057\"> </span><strong><span data-lake-id=\"u4e740fdf\" id=\"u4e740fdf\">是否包含某个值</span></strong></p><p data-lake-id=\"21145fbd4b460925834eb32e00b394d5_p_155\" id=\"21145fbd4b460925834eb32e00b394d5_p_155\"><br></p><p data-lake-id=\"dca9fa670c8db031c78bfd2b0e8d44dd_p_156\" id=\"dca9fa670c8db031c78bfd2b0e8d44dd_p_156\"><span data-lake-id=\"u2d61316e\" id=\"u2d61316e\">6、</span><code data-lake-id=\"u844b58d8\" id=\"u844b58d8\"><span data-lake-id=\"ud3e05cba\" id=\"ud3e05cba\">remove()</span></code><span data-lake-id=\"udbfebef2\" id=\"udbfebef2\"> </span><strong><span data-lake-id=\"u8ef61887\" id=\"u8ef61887\">移除某个元素</span></strong></p><p data-lake-id=\"b68200708c960efa87d95f272f623cc5_p_157\" id=\"b68200708c960efa87d95f272f623cc5_p_157\"><br></p><p data-lake-id=\"3ba0f2a99137cfc138d14370794cc714_p_158\" id=\"3ba0f2a99137cfc138d14370794cc714_p_158\"><span data-lake-id=\"u7105a1d4\" id=\"u7105a1d4\">7、</span><code data-lake-id=\"u6d44c538\" id=\"u6d44c538\"><span data-lake-id=\"ubc86a6d0\" id=\"ubc86a6d0\">forEach()</span></code><span data-lake-id=\"u31e2976f\" id=\"u31e2976f\"> </span><strong><span data-lake-id=\"ucb92b66c\" id=\"ucb92b66c\">循环，传入两个方法</span></strong></p><p data-lake-id=\"e2e19f3807b1a26de6bfd8d5d8f8346a_p_159\" id=\"e2e19f3807b1a26de6bfd8d5d8f8346a_p_159\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22dart%22%2C%22code%22%3A%22void%20main()%20%7B%5Cn%20%20var%20map%20%3D%20%7B'first'%3A%20'Dart'%2C%20'Second'%3A%20'Java'%2C%20'Third'%3A%20'Python'%7D%3B%5Cn%20%20map.forEach(f)%3B%5Cn%7D%5Cnvoid%20f(key%2C%20value)%20%7B%5Cn%20%20print(%5C%22key%3D%24key%2C%20value%3D%24value%5C%22)%3B%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%2270eb2963%22%7D\"></card><p data-lake-id=\"b0d1fb541c750b95e1b76e1c686fea12_p_160\" id=\"b0d1fb541c750b95e1b76e1c686fea12_p_160\"><br></p><p data-lake-id=\"fddb9038a7bb3abe9bb6c5bc07581291_p_161\" id=\"fddb9038a7bb3abe9bb6c5bc07581291_p_161\"><span data-lake-id=\"u8c769e88\" id=\"u8c769e88\">8、 </span><code data-lake-id=\"u76c13c30\" id=\"u76c13c30\"><span data-lake-id=\"uf38b199d\" id=\"uf38b199d\">map()</span></code><span data-lake-id=\"u1cee6f07\" id=\"u1cee6f07\"> </span><code data-lake-id=\"ucd649434\" id=\"ucd649434\"><strong><span data-lake-id=\"uc87abb4b\" id=\"uc87abb4b\">map</span></strong></code><strong><span data-lake-id=\"ub05e5177\" id=\"ub05e5177\"> 的遍历方式，接受一个回调函数作为参数，返回一个新 </span></strong><code data-lake-id=\"u35e07d13\" id=\"u35e07d13\"><strong><span data-lake-id=\"u75b68d10\" id=\"u75b68d10\">map</span></strong></code></p><p data-lake-id=\"3b53c3d38868cd3e8117384bc7b8db12_p_162\" id=\"3b53c3d38868cd3e8117384bc7b8db12_p_162\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22dart%22%2C%22code%22%3A%22void%20main()%20%7B%5Cn%20%20%20%20Map%20age%20%3D%20%7B%5C%22zhangsan%5C%22%3A%2018%2C%20%5C%22lisi%5C%22%3A%2020%7D%3B%5Cn%20%20%20%20Map%20age2%20%3D%20age.map(f)%3B%5Cn%20%20%20%20print(age2)%3B%20%2F%2F%20%7B18%3A%20%5C%22zhangsan%5C%22%2C%2020%3A%20%5C%22lisi%5C%22%7D%3B%5Cn%7D%5CnMapEntry%20f(k%2C%20v)%20%7B%5Cn%20%20%20%20return%20MapEntry(v%2C%20k)%3B%20%2F%2F%20%E8%B0%83%E6%8D%A2%20k%2C%20v%20%E7%9A%84%E5%80%BC%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%223413ddac%22%7D\"></card><p data-lake-id=\"788cb192a755349940f6d50adab26c47_p_163\" id=\"788cb192a755349940f6d50adab26c47_p_163\"><br></p><h3 data-lake-id=\"24728d0d\" id=\"24728d0d\"><span data-lake-id=\"udc260a62\" id=\"udc260a62\">4.6 </span><code data-lake-id=\"u59806607\" id=\"u59806607\"><span data-lake-id=\"u8f0c9af0\" id=\"u8f0c9af0\">Runes, Symbols</span></code></h3><p data-lake-id=\"5a4f541457331ccb8d780e99c0cac44a_p_164\" id=\"5a4f541457331ccb8d780e99c0cac44a_p_164\"><br></p><h3 data-lake-id=\"8dfe3165\" id=\"8dfe3165\"><span data-lake-id=\"u248c7af7\" id=\"u248c7af7\">4.7 </span><code data-lake-id=\"u9b004f16\" id=\"u9b004f16\"><span data-lake-id=\"ua63d5c96\" id=\"ua63d5c96\">dynamic =&amp;gt</span></code><span data-lake-id=\"u22b3f4d2\" id=\"u22b3f4d2\">; 动态类型</span></h3><p data-lake-id=\"f121a14e6e189b9063748754f0838cd7_p_165\" id=\"f121a14e6e189b9063748754f0838cd7_p_165\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22dart%22%2C%22code%22%3A%22void%20main()%20%7B%5Cn%20%20var%20list%20%3D%20new%20List%3Cdynamic%3E()%3B%5Cn%20%20list.add(1)%3B%5Cn%20%20list.add(%5C%22hello%5C%22)%3B%5Cn%20%20list.add(true)%3B%5Cn%20%20print(list)%3B%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22d8216917%22%7D\"></card><p data-lake-id=\"a964985d3a0719f64ee67db676d49377_p_166\" id=\"a964985d3a0719f64ee67db676d49377_p_166\"><br></p><h3 data-lake-id=\"8e7deab9\" id=\"8e7deab9\"><span data-lake-id=\"u8f65e022\" id=\"u8f65e022\">4.8 </span><code data-lake-id=\"u1d9c9b31\" id=\"u1d9c9b31\"><span data-lake-id=\"uccfb5977\" id=\"uccfb5977\">dynamic, var, Object</span></code><span data-lake-id=\"u990a0eb5\" id=\"u990a0eb5\"> 的区别</span></h3><p data-lake-id=\"fff1d53cf87be1ed0758fa6eab740c40_p_167\" id=\"fff1d53cf87be1ed0758fa6eab740c40_p_167\"><br></p><p data-lake-id=\"b4e753018bde7d3ee22bb43600a73a16_p_168\" id=\"b4e753018bde7d3ee22bb43600a73a16_p_168\"><em><span data-lake-id=\"ua0b22f05\" id=\"ua0b22f05\">dynamic</span></em><span data-lake-id=\"ud15aa611\" id=\"ud15aa611\"> 是动态类型，如果使用其声明一种类型，则仍旧可以为其声明另一种类型；通常不直接使用。</span></p><p data-lake-id=\"c05a4e07798be0757743d22bc9d5b835_p_169\" id=\"c05a4e07798be0757743d22bc9d5b835_p_169\"><br></p><p data-lake-id=\"ed3fee819e4b5af5e7633e5ebcc09c78_p_170\" id=\"ed3fee819e4b5af5e7633e5ebcc09c78_p_170\"><em><span data-lake-id=\"u3a38bf5c\" id=\"u3a38bf5c\">var</span></em><span data-lake-id=\"u5cb0bd76\" id=\"u5cb0bd76\"> 是关键字，如果使用其声明一种类型，不可为其声明另一种类型，但可改变同类型的值；</span></p><p data-lake-id=\"c82f591337f789ed81cef7d9c961abe3_p_171\" id=\"c82f591337f789ed81cef7d9c961abe3_p_171\"><br></p><p data-lake-id=\"631712b2d9453063577c92e2f2c2f0c0_p_172\" id=\"631712b2d9453063577c92e2f2c2f0c0_p_172\"><em><span data-lake-id=\"u339c8d31\" id=\"u339c8d31\">Obejct</span></em><span data-lake-id=\"u90ece41f\" id=\"u90ece41f\"> 是基类，用其声明的变量只能使用 </span><em><strong><span data-lake-id=\"u3a09acb6\" id=\"u3a09acb6\">Object</span></strong></em><span data-lake-id=\"uf5d9c833\" id=\"uf5d9c833\"> 类所提供的方法</span></p><p data-lake-id=\"78b96904bed30c073b2e45e0e72b5f12_p_173\" id=\"78b96904bed30c073b2e45e0e72b5f12_p_173\"><br></p><h2 data-lake-id=\"b47821f1\" id=\"b47821f1\"><span data-lake-id=\"u0f936f38\" id=\"u0f936f38\">五、 运算符</span></h2><p data-lake-id=\"2c47ab815ac9d02ba311a88ab630b791_p_174\" id=\"2c47ab815ac9d02ba311a88ab630b791_p_174\"><br></p><h3 data-lake-id=\"014f3b72\" id=\"014f3b72\"><span data-lake-id=\"ub66fee3c\" id=\"ub66fee3c\">5.1 算数运算符</span></h3><p data-lake-id=\"b74861f8c214db2af20d35d849124f0d_p_175\" id=\"b74861f8c214db2af20d35d849124f0d_p_175\"><br></p><ul list=\"ufa8d65f5\"><li fid=\"ua496a2ea\" data-lake-id=\"d5514f734c8dc25e8be741ad13d6c27d_li_15\" id=\"d5514f734c8dc25e8be741ad13d6c27d_li_15\"><strong><span data-lake-id=\"u6473d3e8\" id=\"u6473d3e8\">加减乘除</span></strong><span data-lake-id=\"ua347492e\" id=\"ua347492e\">: </span><code data-lake-id=\"u96d51da2\" id=\"u96d51da2\"><span data-lake-id=\"uc8ddd689\" id=\"uc8ddd689\">+</span></code><span data-lake-id=\"ueede1be2\" id=\"ueede1be2\">，</span><code data-lake-id=\"u595a010e\" id=\"u595a010e\"><span data-lake-id=\"uc36a006b\" id=\"uc36a006b\">-</span></code><span data-lake-id=\"u97fa4239\" id=\"u97fa4239\">，</span><code data-lake-id=\"ubc974769\" id=\"ubc974769\"><span data-lake-id=\"ua7f5b0f9\" id=\"ua7f5b0f9\">*</span></code><span data-lake-id=\"ud410bbdf\" id=\"ud410bbdf\">，</span><code data-lake-id=\"u12939749\" id=\"u12939749\"><span data-lake-id=\"ucb5cc04a\" id=\"ucb5cc04a\">/</span></code><span data-lake-id=\"u9528e2e0\" id=\"u9528e2e0\">，</span><code data-lake-id=\"ub2798dd9\" id=\"ub2798dd9\"><span data-lake-id=\"ueff11433\" id=\"ueff11433\">～/</span></code><span data-lake-id=\"u0397e280\" id=\"u0397e280\">，</span><code data-lake-id=\"uf78cd10b\" id=\"uf78cd10b\"><span data-lake-id=\"uc00602c4\" id=\"uc00602c4\">%</span></code><span data-lake-id=\"uf7454408\" id=\"uf7454408\">。</span></li></ul><ul list=\"ub1000d9c\"><li fid=\"u7c1b2ba3\" data-lake-id=\"95435fa2551c2eb17f6f4c9de9bed1bd_li_16\" id=\"95435fa2551c2eb17f6f4c9de9bed1bd_li_16\"><strong><span data-lake-id=\"u18cac8c0\" id=\"u18cac8c0\">递增递减:</span></strong><span data-lake-id=\"u557bfc2a\" id=\"u557bfc2a\"> ·</span><code data-lake-id=\"u36c97a7a\" id=\"u36c97a7a\"><span data-lake-id=\"ufab83d86\" id=\"ufab83d86\">++var</span></code><span data-lake-id=\"u3bf5f097\" id=\"u3bf5f097\">，</span><code data-lake-id=\"ucb3471ad\" id=\"ucb3471ad\"><span data-lake-id=\"u9d61443a\" id=\"u9d61443a\">var++</span></code><span data-lake-id=\"u4e25c660\" id=\"u4e25c660\">，</span><code data-lake-id=\"u69cefe05\" id=\"u69cefe05\"><span data-lake-id=\"uedcc2844\" id=\"uedcc2844\">--var</span></code><span data-lake-id=\"u8a375f79\" id=\"u8a375f79\">，</span><code data-lake-id=\"u90077394\" id=\"u90077394\"><span data-lake-id=\"uefae7324\" id=\"uefae7324\">var--</span></code><span data-lake-id=\"ubd94074a\" id=\"ubd94074a\">。</span></li></ul><p data-lake-id=\"aaf6d3f54c4ea0860c4a0b47cf319be5_p_176\" id=\"aaf6d3f54c4ea0860c4a0b47cf319be5_p_176\"><br></p><h3 data-lake-id=\"7f1403d6\" id=\"7f1403d6\"><span data-lake-id=\"ubdec1d47\" id=\"ubdec1d47\">5.2 关系运算符</span></h3><p data-lake-id=\"a292c8eba1d29cc46db3dc9b759dec15_p_177\" id=\"a292c8eba1d29cc46db3dc9b759dec15_p_177\"><br></p><ul list=\"u2762bc29\"><li fid=\"uce634430\" data-lake-id=\"f4cc0d098a075a3387e496d037c400cd_li_17\" id=\"f4cc0d098a075a3387e496d037c400cd_li_17\"><strong><span data-lake-id=\"ud125ac84\" id=\"ud125ac84\">运算符:</span></strong><span data-lake-id=\"u02b275bc\" id=\"u02b275bc\"> </span><code data-lake-id=\"u0f4a7849\" id=\"u0f4a7849\"><span data-lake-id=\"u9e7728e0\" id=\"u9e7728e0\">==</span></code><span data-lake-id=\"u750cab0b\" id=\"u750cab0b\">，</span><code data-lake-id=\"u19718d42\" id=\"u19718d42\"><span data-lake-id=\"uad09ab10\" id=\"uad09ab10\">!=</span></code><span data-lake-id=\"u9d53a293\" id=\"u9d53a293\">，</span><code data-lake-id=\"u049f8056\" id=\"u049f8056\"><span data-lake-id=\"ubfbb979e\" id=\"ubfbb979e\">&gt;</span></code><span data-lake-id=\"u73c1285a\" id=\"u73c1285a\">，</span><code data-lake-id=\"ud6022280\" id=\"ud6022280\"><span data-lake-id=\"udf50be2b\" id=\"udf50be2b\">&lt;</span></code><span data-lake-id=\"u944f29e7\" id=\"u944f29e7\">，</span><code data-lake-id=\"u33a6442c\" id=\"u33a6442c\"><span data-lake-id=\"ue3f60d85\" id=\"ue3f60d85\">&gt;=</span></code><span data-lake-id=\"u9539feb9\" id=\"u9539feb9\">，</span><code data-lake-id=\"udd9fd86f\" id=\"udd9fd86f\"><span data-lake-id=\"ubfa130a3\" id=\"ubfa130a3\">&lt;=</span></code></li></ul><ul list=\"u1e6ba1cc\"><li fid=\"u668c5d34\" data-lake-id=\"d133ab88c20b57974bf539fdb4a74f35_li_18\" id=\"d133ab88c20b57974bf539fdb4a74f35_li_18\"><strong><span data-lake-id=\"uca742998\" id=\"uca742998\">判断内容是否相同使用 </span></strong><code data-lake-id=\"u28ccd261\" id=\"u28ccd261\"><strong><span data-lake-id=\"u91769819\" id=\"u91769819\">==</span></strong></code></li></ul><p data-lake-id=\"639ff39a813bac805cf1d42cf6370925_p_178\" id=\"639ff39a813bac805cf1d42cf6370925_p_178\"><br></p><h3 data-lake-id=\"10766857\" id=\"10766857\"><span data-lake-id=\"u92c6f7a7\" id=\"u92c6f7a7\">5.3 逻辑运算符</span></h3><p data-lake-id=\"704e7fcf3e24f0df062f455d61ce8bf2_p_179\" id=\"704e7fcf3e24f0df062f455d61ce8bf2_p_179\"><br></p><ul list=\"u9de41a1a\"><li fid=\"u1ab2461b\" data-lake-id=\"febcb62b4f5424b435c4ff8e61803d36_li_19\" id=\"febcb62b4f5424b435c4ff8e61803d36_li_19\"><strong><span data-lake-id=\"ua70164fa\" id=\"ua70164fa\">运算符：</span></strong><span data-lake-id=\"ue41dba8f\" id=\"ue41dba8f\"> </span><code data-lake-id=\"u69cef342\" id=\"u69cef342\"><span data-lake-id=\"u12e9d0c4\" id=\"u12e9d0c4\">!</span></code><span data-lake-id=\"u87cd5b1a\" id=\"u87cd5b1a\">，</span><code data-lake-id=\"u21ceb4cf\" id=\"u21ceb4cf\"><span data-lake-id=\"u3cffff0d\" id=\"u3cffff0d\">&amp;&amp;</span></code><span data-lake-id=\"u31845362\" id=\"u31845362\">，</span><code data-lake-id=\"u4609d89b\" id=\"u4609d89b\"><span data-lake-id=\"u72691b66\" id=\"u72691b66\">||</span></code></li></ul><ul list=\"uebeefc96\"><li fid=\"ua0de9f06\" data-lake-id=\"8f8402239237d570dccf0fc0dd46418a_li_20\" id=\"8f8402239237d570dccf0fc0dd46418a_li_20\"><strong><span data-lake-id=\"u3617f07c\" id=\"u3617f07c\">针对布尔类型运算</span></strong></li></ul><p data-lake-id=\"eca7cff7c59afa2f3de403ef7621a785_p_180\" id=\"eca7cff7c59afa2f3de403ef7621a785_p_180\"><br></p><h3 data-lake-id=\"34b8e337\" id=\"34b8e337\"><span data-lake-id=\"ud5aa9a34\" id=\"ud5aa9a34\">5.4 赋值运算符</span></h3><p data-lake-id=\"0efc130a474ae63eb94f94d29c0b519f_p_181\" id=\"0efc130a474ae63eb94f94d29c0b519f_p_181\"><br></p><ul list=\"u188b0228\"><li fid=\"ubdf7e089\" data-lake-id=\"58212f57b94674aebb84a0d9186513ce_li_21\" id=\"58212f57b94674aebb84a0d9186513ce_li_21\"><strong><span data-lake-id=\"ufec13194\" id=\"ufec13194\">基础运算符：</span></strong><span data-lake-id=\"uaebffbf5\" id=\"uaebffbf5\"> </span><code data-lake-id=\"u4a418063\" id=\"u4a418063\"><span data-lake-id=\"uf05b46fd\" id=\"uf05b46fd\">=</span></code><span data-lake-id=\"ud29be85f\" id=\"ud29be85f\">，</span><code data-lake-id=\"uea3f14d2\" id=\"uea3f14d2\"><span data-lake-id=\"u753fa783\" id=\"u753fa783\">??=</span></code><strong><span data-lake-id=\"u7fec53e0\" id=\"u7fec53e0\">(如果左边的变量没有值，就将右侧的值赋给它；如果左边变量有值，右边的值无效。)</span></strong></li></ul><ul list=\"u276021eb\"><li fid=\"u6201ee8b\" data-lake-id=\"94568ed0e65593a55b9f51f0d957b7b9_li_22\" id=\"94568ed0e65593a55b9f51f0d957b7b9_li_22\"><strong><span data-lake-id=\"uab59a97a\" id=\"uab59a97a\">复合运算符：</span></strong><code data-lake-id=\"uc6d50fb0\" id=\"uc6d50fb0\"><span data-lake-id=\"ubf238349\" id=\"ubf238349\">+=</span></code><span data-lake-id=\"u82fda5e2\" id=\"u82fda5e2\">，</span><code data-lake-id=\"u9da1dcfb\" id=\"u9da1dcfb\"><span data-lake-id=\"uc20af1b4\" id=\"uc20af1b4\">-=</span></code><span data-lake-id=\"u6cd3af3c\" id=\"u6cd3af3c\">，</span><code data-lake-id=\"ue0d1eb17\" id=\"ue0d1eb17\"><span data-lake-id=\"u12abab77\" id=\"u12abab77\">*=</span></code><span data-lake-id=\"u26dda25a\" id=\"u26dda25a\">，</span><code data-lake-id=\"u4306e987\" id=\"u4306e987\"><span data-lake-id=\"u3f86f61f\" id=\"u3f86f61f\">/=</span></code><span data-lake-id=\"uc035506f\" id=\"uc035506f\">，</span><code data-lake-id=\"u86d76f82\" id=\"u86d76f82\"><span data-lake-id=\"ue4bed45f\" id=\"ue4bed45f\">%=</span></code><span data-lake-id=\"uab232a63\" id=\"uab232a63\">，</span><code data-lake-id=\"u37ed7f77\" id=\"u37ed7f77\"><span data-lake-id=\"ue28088ad\" id=\"ue28088ad\">~/=</span></code></li></ul><p data-lake-id=\"1afec35b50202e46c8ab3d64c8b15d95_p_182\" id=\"1afec35b50202e46c8ab3d64c8b15d95_p_182\"><br></p><h3 data-lake-id=\"b18b30d3\" id=\"b18b30d3\"><span data-lake-id=\"u12d456bb\" id=\"u12d456bb\">5.5 条件表达式</span></h3><p data-lake-id=\"bd34bbbaf941aa44b5ef63b842573764_p_183\" id=\"bd34bbbaf941aa44b5ef63b842573764_p_183\"><br></p><ul list=\"u27a27b9b\"><li fid=\"u1b3ad687\" data-lake-id=\"b3b8fb2822b4739f29f8f338a2e2d8b5_li_23\" id=\"b3b8fb2822b4739f29f8f338a2e2d8b5_li_23\"><strong><span data-lake-id=\"u82ddd5a8\" id=\"u82ddd5a8\">三目运算符：</span></strong><span data-lake-id=\"u80b8b4cd\" id=\"u80b8b4cd\"> </span><code data-lake-id=\"ub56c8ea3\" id=\"ub56c8ea3\"><span data-lake-id=\"ub7c27968\" id=\"ub7c27968\">condition ? expr1 : expr2</span></code></li></ul><ul list=\"u1e7f7e30\"><li fid=\"u8f10702b\" data-lake-id=\"93da30f74bdf4077f04e13ecd59863d3_li_24\" id=\"93da30f74bdf4077f04e13ecd59863d3_li_24\"><code data-lake-id=\"ubdf40c52\" id=\"ubdf40c52\"><strong><span data-lake-id=\"u63212fc3\" id=\"u63212fc3\">??</span></strong></code><strong><span data-lake-id=\"u9f05c8ce\" id=\"u9f05c8ce\">运算符：</span></strong><span data-lake-id=\"u47c836fd\" id=\"u47c836fd\"> </span><code data-lake-id=\"uf66a1c8d\" id=\"uf66a1c8d\"><span data-lake-id=\"u281d0bea\" id=\"u281d0bea\">expr1 ?? expr2</span></code><span data-lake-id=\"u9143a522\" id=\"u9143a522\">(</span><strong><span data-lake-id=\"ucd2833ae\" id=\"ucd2833ae\">如果第一个表达式为空，则使用第二个表达式，否则直接使用第一个表达式的值.</span></strong><span data-lake-id=\"u5f469e2d\" id=\"u5f469e2d\">)</span></li></ul><p data-lake-id=\"0f7c273f12939198215a96015893827f_p_184\" id=\"0f7c273f12939198215a96015893827f_p_184\"><br></p><h2 data-lake-id=\"bd3fc3e3\" id=\"bd3fc3e3\"><span data-lake-id=\"u4b9deedf\" id=\"u4b9deedf\">六、 控制流语句</span></h2><p data-lake-id=\"9040129079d6c20944d5abd09137a458_p_185\" id=\"9040129079d6c20944d5abd09137a458_p_185\"><br></p><h3 data-lake-id=\"22af5e7e\" id=\"22af5e7e\"><span data-lake-id=\"u3a2173c8\" id=\"u3a2173c8\">6.1 条件语句</span></h3><p data-lake-id=\"a2e9e486493798ec13110bd7c2133490_p_186\" id=\"a2e9e486493798ec13110bd7c2133490_p_186\"><br></p><ul list=\"udade7fe5\"><li fid=\"u992b5027\" data-lake-id=\"085f67c8d6198adac35f2ed79d4e7c90_li_25\" id=\"085f67c8d6198adac35f2ed79d4e7c90_li_25\"><strong><span data-lake-id=\"uebe5276d\" id=\"uebe5276d\">if语句</span></strong></li></ul><ul list=\"uf7f2f5dd\"><li fid=\"ud11a5a25\" data-lake-id=\"97b0ed55a8e0b30763f2b63dd4d23aa0_li_26\" id=\"97b0ed55a8e0b30763f2b63dd4d23aa0_li_26\"><strong><span data-lake-id=\"u7f725c03\" id=\"u7f725c03\">if...else if 语句</span></strong></li></ul><ul list=\"u23670487\"><li fid=\"u46a5b9b6\" data-lake-id=\"871605018541f47e7259e5f21cf4e545_li_27\" id=\"871605018541f47e7259e5f21cf4e545_li_27\"><strong><span data-lake-id=\"u9f07b3a3\" id=\"u9f07b3a3\">if...else if...else 语句</span></strong></li></ul><p data-lake-id=\"c7048e5640cfa0d88f49c32fad2740da_p_187\" id=\"c7048e5640cfa0d88f49c32fad2740da_p_187\"><br></p><h3 data-lake-id=\"2d6cdeb7\" id=\"2d6cdeb7\"><span data-lake-id=\"uff06c21b\" id=\"uff06c21b\">6.2 循环语句</span></h3><p data-lake-id=\"1b4147100f9b232305f6ba2db16414a4_p_188\" id=\"1b4147100f9b232305f6ba2db16414a4_p_188\"><br></p><ul list=\"u8a7b54ec\"><li fid=\"u7a2e6eaa\" data-lake-id=\"78021af58cc7387d8d6fac1d050ffb56_li_28\" id=\"78021af58cc7387d8d6fac1d050ffb56_li_28\"><strong><span data-lake-id=\"u1141bcf3\" id=\"u1141bcf3\">for循环</span></strong></li></ul><ul list=\"ud468dcfe\"><li fid=\"ud5f4c18b\" data-lake-id=\"878a7319ea997971032ee9e252154fbf_li_29\" id=\"878a7319ea997971032ee9e252154fbf_li_29\"><strong><span data-lake-id=\"u3212dc8d\" id=\"u3212dc8d\">for...in 循环</span></strong></li></ul><ul list=\"u1534e02d\"><li fid=\"uf8eed6a2\" data-lake-id=\"b4cb724d74f9aed7d33451c547f6a805_li_30\" id=\"b4cb724d74f9aed7d33451c547f6a805_li_30\"><strong><span data-lake-id=\"uc380db89\" id=\"uc380db89\">while循环</span></strong></li></ul><ul list=\"u6540e9c0\"><li fid=\"ue24e2042\" data-lake-id=\"cf7429805699c96957c61f111698e4ca_li_31\" id=\"cf7429805699c96957c61f111698e4ca_li_31\"><strong><span data-lake-id=\"u55f4f4c3\" id=\"u55f4f4c3\">do...while 循环</span></strong></li></ul><ul list=\"u1f5f6994\"><li fid=\"u1fe98767\" data-lake-id=\"a6905ccde6cf6657dfb49641491dac3d_li_32\" id=\"a6905ccde6cf6657dfb49641491dac3d_li_32\"><strong><span data-lake-id=\"ubd470bff\" id=\"ubd470bff\">break 和 continue</span></strong></li></ul><ul list=\"u72ec1d93\" data-lake-indent=\"1\"><li fid=\"u67749208\" data-lake-id=\"5a0d017d628d7d029d90e9802c4df17d_li_33\" id=\"5a0d017d628d7d029d90e9802c4df17d_li_33\"><strong><span data-lake-id=\"ub189899f\" id=\"ub189899f\">break 用于终止循环</span></strong></li></ul><ul list=\"u53ecdc0b\" data-lake-indent=\"1\"><li fid=\"u95541df5\" data-lake-id=\"128653c176c857fbef19cdf72cbcaf80_li_34\" id=\"128653c176c857fbef19cdf72cbcaf80_li_34\"><strong><span data-lake-id=\"u59a1d92d\" id=\"u59a1d92d\">continue 用于跳出当前循环</span></strong></li></ul><ul list=\"uda900dfa\"><li fid=\"u2391f5ec\" data-lake-id=\"38b4885c88ac761e16cd06ebefdf8776_li_35\" id=\"38b4885c88ac761e16cd06ebefdf8776_li_35\"><strong><span data-lake-id=\"u4a2155ff\" id=\"u4a2155ff\">switch...case 语句</span></strong></li></ul><ul list=\"u43eccfd7\" data-lake-indent=\"1\"><li fid=\"u3e130efb\" data-lake-id=\"12920a4d6e3133f02f60521345d5b13c_li_36\" id=\"12920a4d6e3133f02f60521345d5b13c_li_36\"><strong><span data-lake-id=\"u7a69cf8e\" id=\"u7a69cf8e\">比较类型:</span></strong><span data-lake-id=\"ude7af79e\" id=\"ude7af79e\"> </span><strong><span data-lake-id=\"u3669e353\" id=\"u3669e353\">num, String, 编译器常量, 对象, 枚举</span></strong></li></ul><ul list=\"u9f6d66f3\" data-lake-indent=\"1\"><li fid=\"u3c943bdd\" data-lake-id=\"60a15cdaee09c5919b9e9e305750f531_li_37\" id=\"60a15cdaee09c5919b9e9e305750f531_li_37\"><strong><span data-lake-id=\"u8fb4ca94\" id=\"u8fb4ca94\">非空 case 必须有一个 break</span></strong></li></ul><ul list=\"u74adaaed\" data-lake-indent=\"1\"><li fid=\"u44892102\" data-lake-id=\"8ff5df2ae9886ea5dc1958d3dce07a09_li_38\" id=\"8ff5df2ae9886ea5dc1958d3dce07a09_li_38\"><strong><span data-lake-id=\"u059a3bc9\" id=\"u059a3bc9\">default 关键字来处理默认情况</span></strong></li></ul><ul list=\"u234400cf\" data-lake-indent=\"1\"><li fid=\"u93c0e5cd\" data-lake-id=\"b1b4245e56500070caf0aa555ae652d7_li_39\" id=\"b1b4245e56500070caf0aa555ae652d7_li_39\"><strong><span data-lake-id=\"u2dce2ee7\" id=\"u2dce2ee7\">continue 跳转标签</span></strong></li></ul><p data-lake-id=\"754d4d7b7f7ef59febce1379b79c5a84_p_189\" id=\"754d4d7b7f7ef59febce1379b79c5a84_p_189\"><br></p><h2 data-lake-id=\"1a05b0c4\" id=\"1a05b0c4\"><span data-lake-id=\"ufc5eada9\" id=\"ufc5eada9\">七、 方法</span></h2><p data-lake-id=\"a7461c86e6a9d61cb988ef01871fdc3e_p_190\" id=\"a7461c86e6a9d61cb988ef01871fdc3e_p_190\"><br></p><h3 data-lake-id=\"11ad6452\" id=\"11ad6452\"><span data-lake-id=\"u08dd1acd\" id=\"u08dd1acd\">7.1 方法定义</span></h3><p data-lake-id=\"ebc5def445ee0b4a8a315ff5c89870b2_p_191\" id=\"ebc5def445ee0b4a8a315ff5c89870b2_p_191\"><br></p><p data-lake-id=\"1768844fed58d5197755a5d26c7486e7_p_192\" id=\"1768844fed58d5197755a5d26c7486e7_p_192\"><strong><span data-lake-id=\"uc5a7ce38\" id=\"uc5a7ce38\">方法定义：</span></strong></p><p data-lake-id=\"a54598ca955746a71345e6f1c7efebc9_p_193\" id=\"a54598ca955746a71345e6f1c7efebc9_p_193\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22text%22%2C%22code%22%3A%22%E8%BF%94%E5%9B%9E%E7%B1%BB%E5%9E%8B%20%E6%96%B9%E6%B3%95%E5%90%8D%20(%E5%8F%82%E6%95%B01%EF%BC%8C%E5%8F%82%E6%95%B02%20...)%20%7B%5Cn%20%20%20%20%E6%96%B9%E6%B3%95%E4%BD%93%5Cn%20%20%20%20return%20%E8%BF%94%E5%9B%9E%E5%80%BC%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%220bb2c91c%22%7D\"></card><p data-lake-id=\"f9b899a2271a73dadb46fc35f51f07c4_p_194\" id=\"f9b899a2271a73dadb46fc35f51f07c4_p_194\"><br></p><p data-lake-id=\"1aef55c1844614fee93b58b509332257_p_195\" id=\"1aef55c1844614fee93b58b509332257_p_195\"><strong><span data-lake-id=\"u214ea8f8\" id=\"u214ea8f8\">方法特性：</span></strong></p><p data-lake-id=\"23475a21370dc3b01a4e53f8cf794c6f_p_196\" id=\"23475a21370dc3b01a4e53f8cf794c6f_p_196\"><br></p><p data-lake-id=\"c17cc3ecf2ff1df40138a63366b4555e_p_197\" id=\"c17cc3ecf2ff1df40138a63366b4555e_p_197\"><code data-lake-id=\"uc6eab407\" id=\"uc6eab407\"><span data-lake-id=\"u493a1828\" id=\"u493a1828\">1、</span></code><span data-lake-id=\"ubbd03b02\" id=\"ubbd03b02\"> 方法也是对象，并且有具体类型 </span><code data-lake-id=\"ue379ccdb\" id=\"ue379ccdb\"><span data-lake-id=\"uc4d85ce2\" id=\"uc4d85ce2\">Function</span></code><span data-lake-id=\"ub780b7c8\" id=\"ub780b7c8\">。</span></p><p data-lake-id=\"cef4f7dc7a55e7d89762a09a512d9105_p_198\" id=\"cef4f7dc7a55e7d89762a09a512d9105_p_198\"><br></p><p data-lake-id=\"cd95284d80760a52034923bb91ba4055_p_199\" id=\"cd95284d80760a52034923bb91ba4055_p_199\"><code data-lake-id=\"uf71595e3\" id=\"uf71595e3\"><span data-lake-id=\"u80bd5873\" id=\"u80bd5873\">2、</span></code><span data-lake-id=\"ubb9d6dec\" id=\"ubb9d6dec\"> 返回值类型，参数类型都可以省略。</span></p><p data-lake-id=\"99d7f9ffd07472f73f14113da034a561_p_200\" id=\"99d7f9ffd07472f73f14113da034a561_p_200\"><br></p><p data-lake-id=\"b8bbb0c68e2db06373485621b7c5450c_p_201\" id=\"b8bbb0c68e2db06373485621b7c5450c_p_201\"><code data-lake-id=\"uca692397\" id=\"uca692397\"><span data-lake-id=\"u79ff17dc\" id=\"u79ff17dc\">3、</span></code><span data-lake-id=\"u18610947\" id=\"u18610947\"> 箭头语法：</span><code data-lake-id=\"u00e26924\" id=\"u00e26924\"><span data-lake-id=\"u4423d0af\" id=\"u4423d0af\">=&gt; expr</span></code><span data-lake-id=\"u68be387f\" id=\"u68be387f\"> 是 </span><code data-lake-id=\"u3fab62a6\" id=\"u3fab62a6\"><span data-lake-id=\"u8a49e0d5\" id=\"u8a49e0d5\">{return expr;}</span></code><span data-lake-id=\"ucbe8256d\" id=\"ucbe8256d\">缩写。只适用于 </span><strong><span data-lake-id=\"udef5ece5\" id=\"udef5ece5\">一个表达式</span></strong><span data-lake-id=\"u0c5a7498\" id=\"u0c5a7498\">。</span></p><p data-lake-id=\"51391d7d944f941a39fd10b1691d92b8_p_202\" id=\"51391d7d944f941a39fd10b1691d92b8_p_202\"><br></p><p data-lake-id=\"5b8c8d15cb12afc80a916b906ec09a21_p_203\" id=\"5b8c8d15cb12afc80a916b906ec09a21_p_203\"><code data-lake-id=\"u3e95f01a\" id=\"u3e95f01a\"><span data-lake-id=\"u5ab8a79a\" id=\"u5ab8a79a\">4、</span></code><span data-lake-id=\"u1573bdfb\" id=\"u1573bdfb\"> 方法都有返回值。如果没有指定，默认 </span><code data-lake-id=\"ucf68a22b\" id=\"ucf68a22b\"><span data-lake-id=\"u7ed2e145\" id=\"u7ed2e145\">return null</span></code><span data-lake-id=\"ufc3ff5f2\" id=\"ufc3ff5f2\"> 最后一句执行。</span></p><p data-lake-id=\"8fbe4b2afec4087483dadb750a83b417_p_204\" id=\"8fbe4b2afec4087483dadb750a83b417_p_204\"><br></p><h3 data-lake-id=\"a73dcf54\" id=\"a73dcf54\"><span data-lake-id=\"ub6852b21\" id=\"ub6852b21\">7.2 可选参数</span></h3><p data-lake-id=\"ed628da24993324917ceed9d7032667e_p_205\" id=\"ed628da24993324917ceed9d7032667e_p_205\"><br></p><ul list=\"uad7ad0f3\"><li fid=\"uf4fe5322\" data-lake-id=\"499bd242e329b6006548a778fcffecb4_li_40\" id=\"499bd242e329b6006548a778fcffecb4_li_40\"><span data-lake-id=\"uea865fc5\" id=\"uea865fc5\">可选命名参数：</span><code data-lake-id=\"u2a93c2a9\" id=\"u2a93c2a9\"><span data-lake-id=\"u295fc149\" id=\"u295fc149\">{param1, param2, ...}</span></code></li></ul><p data-lake-id=\"352f391bc738d2265b3d832a48674509_p_206\" id=\"352f391bc738d2265b3d832a48674509_p_206\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22dart%22%2C%22code%22%3A%22void%20main()%20%7B%5Cn%20%20printPerson(%5C%22%E5%BC%A0%E4%B8%89%5C%22)%3B%2F%2F%20name%3D%E5%BC%A0%E4%B8%89%2C%20age%3Dnull%2C%20gender%3Dnull%5Cn%20%20printPerson(%5C%22%E5%BC%A0%E4%B8%89%5C%22%2C%20age%3A%2020)%3B%20%2F%2F%20name%3D%E5%BC%A0%E4%B8%89%2C%20age%3D20%2C%20gender%3Dnull%5Cn%20%20printPerson(%5C%22%E5%BC%A0%E4%B8%89%5C%22%2C%20age%3A%2020%2C%20gender%3A%20%5C%22Male%5C%22)%3B%20%2F%2F%20name%3D%E5%BC%A0%E4%B8%89%2C%20age%3D20%2C%20gender%3D%5C%22Male%5C%22%5Cn%20%20printPerson(%5C%22%E5%BC%A0%E4%B8%89%5C%22%2C%20gender%3A%20%5C%22Male%5C%22)%3B%20%2F%2F%20name%3D%E5%BC%A0%E4%B8%89%2C%20age%3Dnull%2C%20gender%3D%5C%22Male%5C%22%5Cn%7D%5Cn%5CnprintPerson(String%20name%2C%20%7B%20int%20age%2C%20String%20gender%20%7D)%20%7B%5Cn%20%20print('name%3D%24name%2C%20age%3D%24age%2C%20gender%3D%24gender')%3B%20%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22c5eb5218%22%7D\"></card><p data-lake-id=\"fa496c4be2d075776e02d4d8dd97275f_p_207\" id=\"fa496c4be2d075776e02d4d8dd97275f_p_207\"><br></p><ul list=\"u9a56a4a1\"><li fid=\"ud1a5d6ac\" data-lake-id=\"8a76ff15f853ed359af4b236df150ee0_li_41\" id=\"8a76ff15f853ed359af4b236df150ee0_li_41\"><span data-lake-id=\"ud615e368\" id=\"ud615e368\">可选位置参数：</span><code data-lake-id=\"u8f78524e\" id=\"u8f78524e\"><span data-lake-id=\"ue7f3640b\" id=\"ue7f3640b\">[param1, param2, ...]</span></code></li></ul><p data-lake-id=\"3c2e4ae7a4912940f2b69cc49919d5f2_p_208\" id=\"3c2e4ae7a4912940f2b69cc49919d5f2_p_208\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22dart%22%2C%22code%22%3A%22void%20main()%20%7B%5Cn%20%20printPerson(%5C%22%E6%9D%8E%E5%9B%9B%5C%22)%3B%2F%2F%20name%3D%E6%9D%8E%E5%9B%9B%2C%20age%3Dnull%2C%20gender%3Dnull%5Cn%20%20printPerson(%5C%22%E6%9D%8E%E5%9B%9B%5C%22%2C%2018)%3B%2F%2F%20name%3D%E6%9D%8E%E5%9B%9B%2C%20age%3D18%2C%20gender%3Dnull%5Cn%20%20printPerson(%5C%22%E6%9D%8E%E5%9B%9B%5C%22%2C%2018%2C%20%5C%22%E7%94%B7%5C%22)%3B%20%2F%2F%20name%3D%E6%9D%8E%E5%9B%9B%2C%20age%3D18%2C%20gender%3D%E7%94%B7%5Cn%7D%5Cn%5CnprintPerson(String%20name%2C%20%5Bint%20age%2C%20String%20gender%5D)%20%7B%5Cn%20%20print('name%3D%24name%2C%20age%3D%24age%2C%20gender%3D%24gender')%3B%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22990ac084%22%7D\"></card><p data-lake-id=\"8919573e332594403c98b16dc3707127_p_209\" id=\"8919573e332594403c98b16dc3707127_p_209\"><br></p><ul list=\"u9b129d24\"><li fid=\"u7570754f\" data-lake-id=\"c298936632e0e0be52995bb03edf247a_li_42\" id=\"c298936632e0e0be52995bb03edf247a_li_42\"><span data-lake-id=\"uf852d283\" id=\"uf852d283\">如果存在具体参数，可选参数声明，必须在参数后面</span></li></ul><p data-lake-id=\"9fcc44cb3c056720422a68184834d3f8_p_210\" id=\"9fcc44cb3c056720422a68184834d3f8_p_210\"><br></p><h3 data-lake-id=\"3d374fc1\" id=\"3d374fc1\"><span data-lake-id=\"u711ec73c\" id=\"u711ec73c\">7.3 默认参数值</span></h3><p data-lake-id=\"1da2a8520c15248cb5e414baf18050d4_p_211\" id=\"1da2a8520c15248cb5e414baf18050d4_p_211\"><br></p><ul list=\"u34e11437\"><li fid=\"uf4ec33a3\" data-lake-id=\"dc7f33bd1c968f16cd63fa0e94b6670c_li_43\" id=\"dc7f33bd1c968f16cd63fa0e94b6670c_li_43\"><span data-lake-id=\"u0ded3c9b\" id=\"u0ded3c9b\">使用 </span><code data-lake-id=\"uc56fd0e7\" id=\"uc56fd0e7\"><span data-lake-id=\"ucf86a3aa\" id=\"ucf86a3aa\">=</span></code><span data-lake-id=\"ufad89fdc\" id=\"ufad89fdc\"> 在 </span><strong><span data-lake-id=\"u8b9482fd\" id=\"u8b9482fd\">可选参数</span></strong><span data-lake-id=\"u091baf8b\" id=\"u091baf8b\"> 指定默认值</span></li></ul><p data-lake-id=\"bf526d24f704019105ff4879923c79a3_p_212\" id=\"bf526d24f704019105ff4879923c79a3_p_212\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22dart%22%2C%22code%22%3A%22void%20main()%20%7B%5Cn%20%20printPerson(%5C%22%E5%BC%A0%E4%B8%89%5C%22)%3B%20%2F%2F%20name%3D%E5%BC%A0%E4%B8%89%2C%20age%3D30%2C%20gender%3D%E5%A5%B3%5Cn%20%20printPerson(%5C%22%E5%BC%A0%E4%B8%89%5C%22%2C%20age%3A%2020)%3B%20%2F%2F%20name%3D%E5%BC%A0%E4%B8%89%2C%20age%3D20%2C%20gender%3D%E5%A5%B3%5Cn%20%20printPerson(%5C%22%E5%BC%A0%E4%B8%89%5C%22%2C%20gender%3A%20%5C%22%E7%94%B7%5C%22)%3B%20%2F%2F%20name%3D%E5%BC%A0%E4%B8%89%2C%20age%3D30%2C%20gender%3D%E7%94%B7%5Cn%7D%5Cn%5CnprintPerson(String%20name%2C%20%7B%20int%20age%20%3D%2030%2C%20String%20gender%20%3D%20%5C%22%E5%A5%B3%5C%22%20%7D)%20%7B%5Cn%20%20print('name%3D%24name%2C%20age%3D%24age%2C%20gender%3D%24gender')%3B%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%2285874c44%22%7D\"></card><p data-lake-id=\"6a4878fe05233880c9bb3f78bdfc8d68_p_213\" id=\"6a4878fe05233880c9bb3f78bdfc8d68_p_213\"><br></p><ul list=\"u4c26b6e7\"><li fid=\"u31c7a4ff\" data-lake-id=\"6fb8356ba6122194cd710c5932646a78_li_44\" id=\"6fb8356ba6122194cd710c5932646a78_li_44\"><span data-lake-id=\"ua001192f\" id=\"ua001192f\">默认值只能是编译时常量</span></li></ul><p data-lake-id=\"3a8029979cdf6369a743f706414be0bf_p_214\" id=\"3a8029979cdf6369a743f706414be0bf_p_214\"><br></p><h3 data-lake-id=\"da4cf90f\" id=\"da4cf90f\"><span data-lake-id=\"u2eca568e\" id=\"u2eca568e\">7.4 方法对象</span></h3><p data-lake-id=\"c2fcbb13669d3e57d1dc5c7e95ef2350_p_215\" id=\"c2fcbb13669d3e57d1dc5c7e95ef2350_p_215\"><br></p><ul list=\"u8238b459\"><li fid=\"u4d19d398\" data-lake-id=\"c638bd53eb987d0e8e4718d4947ca094_li_45\" id=\"c638bd53eb987d0e8e4718d4947ca094_li_45\"><span data-lake-id=\"u73a5e2a2\" id=\"u73a5e2a2\">方法可以作为对象赋值给其它变量</span></li></ul><p data-lake-id=\"02630234cefdd1a3dfd9b8e850834e4e_p_216\" id=\"02630234cefdd1a3dfd9b8e850834e4e_p_216\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22dart%22%2C%22code%22%3A%22void%20main()%20%7B%5Cn%20%20%2F%2F%20var%20func%20%3D%20printHello%3B%5Cn%20%20Function%20func%20%3D%20printHello%3B%5Cn%20%20func()%3B%5Cn%7D%5Cn%5Cnvoid%20printHello()%20%7B%5Cn%20%20print(%5C%22Hello%5C%22)%3B%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%227a8ac852%22%7D\"></card><p data-lake-id=\"e9b9195071b602f228ecd87131f54a09_p_217\" id=\"e9b9195071b602f228ecd87131f54a09_p_217\"><br></p><ul list=\"u75e6aafe\"><li fid=\"u54ad0833\" data-lake-id=\"c0756fc4766b82f013916a1dfc29e220_li_46\" id=\"c0756fc4766b82f013916a1dfc29e220_li_46\"><span data-lake-id=\"ub5dfcc6b\" id=\"ub5dfcc6b\">方法可作为参数传递给其它方法</span></li></ul><p data-lake-id=\"106abb71162cab57d99f22c8182baa6a_p_218\" id=\"106abb71162cab57d99f22c8182baa6a_p_218\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22dart%22%2C%22code%22%3A%22void%20main()%20%7B%5Cn%20%20var%20list%20%3D%20%5B1%2C%202%2C%203%2C%204%5D%3B%5Cn%20%20list.forEach(print)%3B%5Cn%7D%5Cn%5Cn%2F%2F%20%E6%88%96%E8%80%85%5Cnvoid%20main()%20%7B%5Cn%20%20var%20list1%20%3D%20%5B%5C%22h%5C%22%2C%20%5C%22e%5C%22%2C%20%5C%22l%5C%22%2C%20%5C%22l%5C%22%2C%20%5C%22o%5C%22%5D%3B%5Cn%20%20print(listTimes(list1%2C%20times))%3B%5Cn%7D%5Cn%5CnList%20listTimes(List%20list%2C%20String%20f(str))%20%7B%5Cn%20%20for(var%20index%20%3D%200%3B%20index%20%3C%20list.length%3B%20index%2B%2B)%20%7B%5Cn%20%20%20%20list%5Bindex%5D%20%3D%20f(list%5Bindex%5D)%3B%5Cn%20%20%7D%5Cn%20%20return%20list%3B%5Cn%7D%5Cn%5CnString%20times(str)%20%7B%5Cn%20%20return%20str%20*%203%3B%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%224e4e21dc%22%7D\"></card><p data-lake-id=\"43756015fe654e98c2f5e26d2f231b8c_p_219\" id=\"43756015fe654e98c2f5e26d2f231b8c_p_219\"><br></p><h3 data-lake-id=\"588eca3a\" id=\"588eca3a\"><span data-lake-id=\"u3f3ead5a\" id=\"u3f3ead5a\">7.5 匿名方法</span></h3><p data-lake-id=\"9c56ecf09c84a42020f1c0dd6460690c_p_220\" id=\"9c56ecf09c84a42020f1c0dd6460690c_p_220\"><br></p><p data-lake-id=\"2ea8639b55360cd848e93d2c64e65871_p_221\" id=\"2ea8639b55360cd848e93d2c64e65871_p_221\"><span data-lake-id=\"u684d83ab\" id=\"u684d83ab\">如何定义：</span></p><p data-lake-id=\"70a1d1e1a593e58a7f63727c676411db_p_222\" id=\"70a1d1e1a593e58a7f63727c676411db_p_222\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22dart%22%2C%22code%22%3A%22(%E5%8F%82%E6%95%B01%EF%BC%8C%E5%8F%82%E6%95%B02%EF%BC%8C...)%20%7B%5Cn%20%20%20%20%E6%96%B9%E6%B3%95%E4%BD%93...%5Cn%20%20%20%20return%20%E8%BF%94%E5%9B%9E%E5%80%BC%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%2227d2b81f%22%7D\"></card><p data-lake-id=\"7daa843f6e495dd1d2c6696528cc65bd_p_223\" id=\"7daa843f6e495dd1d2c6696528cc65bd_p_223\"><br></p><p data-lake-id=\"29aac8103521bf65bece0eb05580ca6f_p_224\" id=\"29aac8103521bf65bece0eb05580ca6f_p_224\"><span data-lake-id=\"ub83bf179\" id=\"ub83bf179\">匿名方法的特性：</span></p><p data-lake-id=\"3f2f7751b6bc6bbae810562f248d6f49_p_225\" id=\"3f2f7751b6bc6bbae810562f248d6f49_p_225\"><br></p><ul list=\"u9795e147\"><li fid=\"u7dacdd7b\" data-lake-id=\"3acb5ad9afda68694759bf4e11913e75_li_47\" id=\"3acb5ad9afda68694759bf4e11913e75_li_47\"><span data-lake-id=\"u6208197e\" id=\"u6208197e\">可赋值给变量，通过变量进行调用</span></li></ul><p data-lake-id=\"73af83e6e31af8831621458232b96888_p_226\" id=\"73af83e6e31af8831621458232b96888_p_226\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22dart%22%2C%22code%22%3A%22void%20main()%20%7B%5Cn%20%20%2F%2F%20%E7%AC%AC%E4%B8%80%E7%A7%8D%5Cn%20%20var%20func%20%3D%20(str)%20%7B%5Cn%20%20%20%20print(%5C%22Hello---%24str%5C%22)%3B%5Cn%20%20%7D%3B%5Cn%20%20func(30)%3B%5Cn%20%20%2F%2F%20%E7%AC%AC%E4%BA%8C%E7%A7%8D%5Cn%20%20(()%20%7B%5Cn%20%20%20%20%20%20print(%5C%22Test%5C%22)%3B%5Cn%20%20%7D)()%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%227a2bab7e%22%7D\"></card><p data-lake-id=\"b90a99f66c0879bbc49e9b0b68e59c08_p_227\" id=\"b90a99f66c0879bbc49e9b0b68e59c08_p_227\"><br></p><ul list=\"u2a5ecb77\"><li fid=\"ud5d17bd8\" data-lake-id=\"fb8d14069863534a0d0ee4e778cd9681_li_48\" id=\"fb8d14069863534a0d0ee4e778cd9681_li_48\"><span data-lake-id=\"u1cc707ca\" id=\"u1cc707ca\">可在其它方法中直接调用或传递给其它方法</span></li></ul><p data-lake-id=\"bdc03e8bcffcbda15027382924358318_p_228\" id=\"bdc03e8bcffcbda15027382924358318_p_228\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22dart%22%2C%22code%22%3A%22void%20main()%20%7B%5Cn%20%20var%20list1%20%3D%20%5B%5C%22h%5C%22%2C%20%5C%22e%5C%22%2C%20%5C%22l%5C%22%2C%20%5C%22l%5C%22%2C%20%5C%22o%5C%22%5D%3B%5Cn%20%20var%20result%20%3D%20listTimes(list1%2C%20(str)%20%7Breturn%20str%20*%203%3B%7D)%3B%5Cn%20%20%2F%2F%20var%20result%20%3D%20listTimes(list1%2C%20(str)%20%3D%3E%20str%20*%203)%3B%5Cn%20%20print(result)%3B%5Cn%7D%5Cn%5CnList%20listTimes(List%20list%2C%20f(str))%20%7B%5Cn%20%20for(var%20index%20%3D%200%3B%20index%20%3C%20list.length%3B%20index%2B%2B)%20%7B%5Cn%20%20%20%20list%5Bindex%5D%20%3D%20f(list%5Bindex%5D)%3B%5Cn%20%20%7D%5Cn%20%20return%20list%3B%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22786ce608%22%7D\"></card><p data-lake-id=\"b7e198aef6e013ece72351e474a68ffa_p_229\" id=\"b7e198aef6e013ece72351e474a68ffa_p_229\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22dart%22%2C%22code%22%3A%22void%20main()%20%7B%5Cn%20%20var%20list2%20%3D%20%5B%5C%22h%5C%22%2C%20%5C%22e%5C%22%2C%20%5C%22l%5C%22%2C%20%5C%22l%5C%22%2C%20%5C%22o%5C%22%5D%3B%5Cn%20%20print(listTimes2(list2))%3B%5Cn%7D%5CnList%20listTimes2(List%20list)%20%7B%5Cn%20%20var%20func%20%3D%20(str)%20%7B%20return%20str%20*%203%3B%20%7D%3B%5Cn%20%20for(var%20i%20%3D%200%3B%20i%20%3C%20list.length%3B%20i%2B%2B)%20%7B%5Cn%20%20%20%20list%5Bi%5D%20%3D%20func(list%5Bi%5D)%3B%5Cn%20%20%7D%5Cn%20%20return%20list%3B%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%229ff3f424%22%7D\"></card><p data-lake-id=\"8cc0a1f126bf8ee201bd7f38025053c4_p_230\" id=\"8cc0a1f126bf8ee201bd7f38025053c4_p_230\"><br></p><p data-lake-id=\"acd86c7f2e14e66cf85721cbce4c8240_p_231\" id=\"acd86c7f2e14e66cf85721cbce4c8240_p_231\"><span data-lake-id=\"u8b5cb50c\" id=\"u8b5cb50c\">注意：匿名方法不能直接定义在外面</span></p><p data-lake-id=\"9bf8874c736b2ce6c6ef8eacb225391e_p_232\" id=\"9bf8874c736b2ce6c6ef8eacb225391e_p_232\"><br></p><h3 data-lake-id=\"7a56f110\" id=\"7a56f110\"><span data-lake-id=\"u6c40d160\" id=\"u6c40d160\">7.6 闭包</span></h3><p data-lake-id=\"18170e7e8da575f5dcb8686e02c401e4_p_233\" id=\"18170e7e8da575f5dcb8686e02c401e4_p_233\"><br></p><ul list=\"u89b54abc\"><li fid=\"ua7a4bedf\" data-lake-id=\"e266eebe601188904dea6ef500c7b44f_li_49\" id=\"e266eebe601188904dea6ef500c7b44f_li_49\"><span data-lake-id=\"udb4f68c3\" id=\"udb4f68c3\">闭包是一个方法(对象)</span></li></ul><ul list=\"uc54e3985\"><li fid=\"u0b4f5f45\" data-lake-id=\"f7b535b7dde1ad7f696eb45abc626453_li_50\" id=\"f7b535b7dde1ad7f696eb45abc626453_li_50\"><span data-lake-id=\"uc560f34c\" id=\"uc560f34c\">闭包定义在其它方法内部</span></li></ul><ul list=\"u9c1d2791\"><li fid=\"ub515dc09\" data-lake-id=\"260a7ab323ff498d126d0665ef86e8e4_li_51\" id=\"260a7ab323ff498d126d0665ef86e8e4_li_51\"><span data-lake-id=\"u8a2f56e3\" id=\"u8a2f56e3\">闭包能够访问外部方法内的局部变量，并持有其状态</span></li></ul><p data-lake-id=\"4948fb5770e7048a08aaf543e87b3f8d_p_234\" id=\"4948fb5770e7048a08aaf543e87b3f8d_p_234\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22dart%22%2C%22code%22%3A%22void%20main()%20%7B%5Cn%20%20var%20func%20%3D%20a()%3B%5Cn%20%20func()%3B%5Cn%20%20func()%3B%5Cn%20%20func()%3B%5Cn%20%20func()%3B%5Cn%7D%5Cna()%20%7B%5Cn%20%20int%20count%20%3D%200%3B%5Cn%20%20printCount()%20%7B%5Cn%20%20%20%20print(count%2B%2B)%3B%5Cn%20%20%7D%3B%5Cn%20%20return%20printCount%3B%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%227e10dec9%22%7D\"></card><p data-lake-id=\"e138d80e1ae914d5031cbb3f3c1d8950_p_235\" id=\"e138d80e1ae914d5031cbb3f3c1d8950_p_235\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22dart%22%2C%22code%22%3A%22%2F%2F%20%E4%BD%BF%E7%94%A8%E5%8C%BF%E5%90%8D%E6%96%B9%E6%B3%95%E7%9A%84%E9%97%AD%E5%8C%85%5Cnvoid%20main()%20%7B%5Cn%20%20var%20func%20%3D%20a()%3B%5Cn%20%20func()%3B%5Cn%20%20func()%3B%5Cn%20%20func()%3B%5Cn%20%20func()%3B%5Cn%7D%5Cn%5Cna()%20%7B%5Cn%20%20int%20count%20%3D%200%3B%5Cn%20%20return%20()%20%7B%5Cn%20%20%20%20print(count%2B%2B)%3B%5Cn%20%20%7D%3B%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%2244aebbf3%22%7D\"></card><p data-lake-id=\"c454258df76d70059117b842caffb1bc_p_236\" id=\"c454258df76d70059117b842caffb1bc_p_236\"><br></p><h2 data-lake-id=\"0e7e494d\" id=\"0e7e494d\"><span data-lake-id=\"u4218db67\" id=\"u4218db67\">八、 </span><code data-lake-id=\"ue2d76073\" id=\"ue2d76073\"><span data-lake-id=\"u14ec7e0e\" id=\"u14ec7e0e\">Dart</span></code><span data-lake-id=\"u767a2a8f\" id=\"u767a2a8f\"> 面向对象编程</span></h2><p data-lake-id=\"9e235b5e43f23e9011dd8415c92088fa_p_237\" id=\"9e235b5e43f23e9011dd8415c92088fa_p_237\"><br></p><h3 data-lake-id=\"842be82b\" id=\"842be82b\"><span data-lake-id=\"ub7fdb0ce\" id=\"ub7fdb0ce\">8.1 类于对象</span></h3><p data-lake-id=\"6033ae78638b22f9c7b1001e674f8b54_p_238\" id=\"6033ae78638b22f9c7b1001e674f8b54_p_238\"><br></p><ol list=\"uba2b2e5e\"><li fid=\"u75c0ba16\" data-lake-id=\"d3db2da957cb8f4600c3264666cc6690_li_52\" id=\"d3db2da957cb8f4600c3264666cc6690_li_52\"><span data-lake-id=\"u6cf48208\" id=\"u6cf48208\">使用关键字 </span><code data-lake-id=\"uea91fd63\" id=\"uea91fd63\"><span data-lake-id=\"u1eeaef63\" id=\"u1eeaef63\">class</span></code><span data-lake-id=\"u7690839d\" id=\"u7690839d\"> 声明一个类</span></li></ol><ol list=\"u4d49186b\" start=\"2\"><li fid=\"ucf59fc59\" data-lake-id=\"a666a1ac811c0eaf27cec4ff464016fb_li_53\" id=\"a666a1ac811c0eaf27cec4ff464016fb_li_53\"><span data-lake-id=\"u0e3153bb\" id=\"u0e3153bb\">使用关键字 </span><code data-lake-id=\"uaea0962f\" id=\"uaea0962f\"><span data-lake-id=\"uc5bcb0e8\" id=\"uc5bcb0e8\">new</span></code><span data-lake-id=\"ub0d7b4ec\" id=\"ub0d7b4ec\"> 创建一个对象，</span><code data-lake-id=\"ud7224dad\" id=\"ud7224dad\"><span data-lake-id=\"u5a13cad9\" id=\"u5a13cad9\">new</span></code><span data-lake-id=\"u1e771b10\" id=\"u1e771b10\"> 可省略</span></li></ol><ol list=\"uc632394a\" start=\"3\"><li fid=\"u6bbaa39a\" data-lake-id=\"c58c860595f195b151f16e1c2ede3254_li_54\" id=\"c58c860595f195b151f16e1c2ede3254_li_54\"><span data-lake-id=\"u5bb27091\" id=\"u5bb27091\">所有对象都继承于 </span><code data-lake-id=\"u4e3c1bec\" id=\"u4e3c1bec\"><span data-lake-id=\"uee88cca4\" id=\"uee88cca4\">Object</span></code><span data-lake-id=\"u423b3693\" id=\"u423b3693\"> 类型</span></li></ol><p data-lake-id=\"2a5c77aaadd212cc52fa92db4e5d7833_p_239\" id=\"2a5c77aaadd212cc52fa92db4e5d7833_p_239\"><br></p><h3 data-lake-id=\"8cadb31c\" id=\"8cadb31c\"><span data-lake-id=\"u17ca3b48\" id=\"u17ca3b48\">8.2 属性和方法</span></h3><p data-lake-id=\"6a64108399bd39151a0c47ad4f78419e_p_240\" id=\"6a64108399bd39151a0c47ad4f78419e_p_240\"><br></p><ol list=\"ufa36a14a\"><li fid=\"uddd85868\" data-lake-id=\"7a8c564ee6f266e337cd3cb075bbdec4_li_55\" id=\"7a8c564ee6f266e337cd3cb075bbdec4_li_55\"><span data-lake-id=\"u5e1fbd4d\" id=\"u5e1fbd4d\">属性默认会生成 </span><code data-lake-id=\"u2ba963c5\" id=\"u2ba963c5\"><span data-lake-id=\"u50302f2a\" id=\"u50302f2a\">getter</span></code><span data-lake-id=\"ua541fe89\" id=\"ua541fe89\"> 和 </span><code data-lake-id=\"u6f43944e\" id=\"u6f43944e\"><span data-lake-id=\"u004ef4e7\" id=\"u004ef4e7\">setter</span></code><span data-lake-id=\"ue28f2b17\" id=\"ue28f2b17\"> 方法</span></li></ol><ol list=\"uf42617e3\" start=\"2\"><li fid=\"u6a60faa0\" data-lake-id=\"8128c4fd74858858ac3d4211addaae66_li_56\" id=\"8128c4fd74858858ac3d4211addaae66_li_56\"><span data-lake-id=\"ueab139a5\" id=\"ueab139a5\">使用 </span><code data-lake-id=\"u0fa0c2e1\" id=\"u0fa0c2e1\"><span data-lake-id=\"u8f4462f9\" id=\"u8f4462f9\">final</span></code><span data-lake-id=\"u2e4209f7\" id=\"u2e4209f7\"> 声明的属性只有 </span><code data-lake-id=\"uf6db5f45\" id=\"uf6db5f45\"><span data-lake-id=\"ub0fb1992\" id=\"ub0fb1992\">getter</span></code><span data-lake-id=\"ub0c37f70\" id=\"ub0c37f70\"> 方法（只可读不可写）</span></li></ol><ol list=\"ub3dec60c\" start=\"3\"><li fid=\"ub9dfe041\" data-lake-id=\"f276e45d694340343e1378e2cdf66abb_li_57\" id=\"f276e45d694340343e1378e2cdf66abb_li_57\"><span data-lake-id=\"uc875a13b\" id=\"uc875a13b\">属性和方法是通过 </span><code data-lake-id=\"u4e44fd0e\" id=\"u4e44fd0e\"><span data-lake-id=\"u3ac9323e\" id=\"u3ac9323e\">.</span></code><span data-lake-id=\"u864e8024\" id=\"u864e8024\"> 访问</span></li></ol><ol list=\"u3690ccfb\" start=\"4\"><li fid=\"uffd27368\" data-lake-id=\"8d15985e499dcc99dcd287f9b418e261_li_58\" id=\"8d15985e499dcc99dcd287f9b418e261_li_58\"><span data-lake-id=\"u46dabf5f\" id=\"u46dabf5f\">方法不能被重栽</span></li></ol><p data-lake-id=\"672ca78e6355d2efd6d038cc344f6bcf_p_241\" id=\"672ca78e6355d2efd6d038cc344f6bcf_p_241\"><br></p><h3 data-lake-id=\"bb4c9d85\" id=\"bb4c9d85\"><span data-lake-id=\"uafcfc76b\" id=\"uafcfc76b\">8.3 类及成员可见性</span></h3><p data-lake-id=\"8205712d24d63d21d2add54ced58c376_p_242\" id=\"8205712d24d63d21d2add54ced58c376_p_242\"><br></p><ol list=\"uc9fa27e6\"><li fid=\"u8eac8c30\" data-lake-id=\"9d56613e9e047661efc01e7fabe2959c_li_59\" id=\"9d56613e9e047661efc01e7fabe2959c_li_59\"><code data-lake-id=\"ub377d537\" id=\"ub377d537\"><span data-lake-id=\"u61903c96\" id=\"u61903c96\">Dart</span></code><span data-lake-id=\"u5b251096\" id=\"u5b251096\"> 中的可见性是以 </span><code data-lake-id=\"ue57a471c\" id=\"ue57a471c\"><span data-lake-id=\"u8ebeecfa\" id=\"u8ebeecfa\">library(库)</span></code><span data-lake-id=\"u91df9f2d\" id=\"u91df9f2d\"> 为单位</span></li></ol><ol list=\"u5f3fed9c\" start=\"2\"><li fid=\"u3d4d3cc9\" data-lake-id=\"868fdf83a850e953adfdf30250d69383_li_60\" id=\"868fdf83a850e953adfdf30250d69383_li_60\"><span data-lake-id=\"ua74bdea2\" id=\"ua74bdea2\">默认情况下，每一个 </span><code data-lake-id=\"u910d53b3\" id=\"u910d53b3\"><span data-lake-id=\"ubc1e16d1\" id=\"ubc1e16d1\">Dart</span></code><span data-lake-id=\"u7087704c\" id=\"u7087704c\"> 文件就是一个库</span></li></ol><ol list=\"u0c9215a1\" start=\"3\"><li fid=\"ua7aefdc1\" data-lake-id=\"ed47c5405a814c09aa363c8ec3c695da_li_61\" id=\"ed47c5405a814c09aa363c8ec3c695da_li_61\"><span data-lake-id=\"u0d369d9f\" id=\"u0d369d9f\">使用 </span><code data-lake-id=\"ub5924d89\" id=\"ub5924d89\"><span data-lake-id=\"uf29ffd79\" id=\"uf29ffd79\">_</span></code><span data-lake-id=\"ue64ae35b\" id=\"ue64ae35b\"> 表示库的私有性</span></li></ol><p data-lake-id=\"cee8e2bf8099195a87e3ac26f9657d80_p_243\" id=\"cee8e2bf8099195a87e3ac26f9657d80_p_243\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22dart%22%2C%22code%22%3A%22%2F%2F%20person.dart%5Cnclass%20_Person%20%7B%5Cn%20%20String%20name%3B%5Cn%20%20int%20age%3B%5Cn%20%20%2F%2F%20final%20String%20address%3B%5Cn%5Cn%20%20void%20work()%20%7B%5Cn%20%20%20%20print(%5C%22name%20is%20%24name%2C%20age%20is%20%24age%5C%22)%3B%5Cn%20%20%7D%5Cn%7D%5Cn%5Cn%2F%2F%20class_and_object.dart%5Cnimport%20'person.dart'%3B%5Cn%5Cnvoid%20main()%20%7B%5Cn%20%20%2F%2F%20var%20person%20%3D%20new%20Person()%3B%5Cn%20%20var%20person%20%3D%20_Person()%3B%20%2F%2F%20error%5Cn%20%20person.name%20%3D%20%5C%22Tom%5C%22%3B%5Cn%20%20person.age%20%3D%2020%3B%5Cn%20%20print(person.name)%3B%20%5Cn%20%20person.work()%3B%5Cn%5Cn%20%20%2F%2F%20print(person.address)%3B%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22f2959bec%22%7D\"></card><p data-lake-id=\"6676b0fdf5d68f5dfac942cb8c232755_p_244\" id=\"6676b0fdf5d68f5dfac942cb8c232755_p_244\"><br></p><ol list=\"ud93d067c\" start=\"4\"><li fid=\"u92c085f2\" data-lake-id=\"19de8a34d53225115feaabff50262d82_li_62\" id=\"19de8a34d53225115feaabff50262d82_li_62\"><span data-lake-id=\"u1d8d13a6\" id=\"u1d8d13a6\">使用 </span><em><strong><span data-lake-id=\"u85216937\" id=\"u85216937\">import</span></strong></em><span data-lake-id=\"ucd070596\" id=\"ucd070596\"> 导入库</span></li></ol><p data-lake-id=\"2b23bc620f657a68260e8cdb7a7f2598_p_245\" id=\"2b23bc620f657a68260e8cdb7a7f2598_p_245\"><br></p><h3 data-lake-id=\"3d0dd0b5\" id=\"3d0dd0b5\"><span data-lake-id=\"u2cef6cb1\" id=\"u2cef6cb1\">8.4 计算属性</span></h3><p data-lake-id=\"b4dae59027624f33efe1705e43a76835_p_246\" id=\"b4dae59027624f33efe1705e43a76835_p_246\"><br></p><ol list=\"u5324b58f\"><li fid=\"ua7ad7b43\" data-lake-id=\"39a66c1c40ddf45833e37bf8bd5c2a66_li_63\" id=\"39a66c1c40ddf45833e37bf8bd5c2a66_li_63\"><span data-lake-id=\"uf284c946\" id=\"uf284c946\">顾名思义，计算属性的值是通过计算而来，本身不存储值</span></li></ol><ol list=\"u53454a1d\" start=\"2\"><li fid=\"u9fd7297e\" data-lake-id=\"2e6590cabe20af477f2dc990cdf0b5cb_li_64\" id=\"2e6590cabe20af477f2dc990cdf0b5cb_li_64\"><span data-lake-id=\"u8eca2f7a\" id=\"u8eca2f7a\">计算属性赋值，其实是通过计算转换到其它实例变量</span></li></ol><p data-lake-id=\"033309e021dae6cc1eabb307bcb5ba20_p_247\" id=\"033309e021dae6cc1eabb307bcb5ba20_p_247\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22dart%22%2C%22code%22%3A%22void%20main()%20%7B%5Cn%20%20var%20rect%20%3D%20new%20Rectangle()%3B%5Cn%20%20rect.width%20%3D%2010%3B%5Cn%20%20rect.height%20%3D%2020%3B%5Cn%20%20print(rect.area)%3B%20%2F%2F%20200%3B%5Cn%20%20%5Cn%20%20%2F%2F%20%E5%B7%B2%E7%9F%A5%E9%9D%A2%E7%A7%AF%E6%B1%82%E5%AE%BD%E5%BA%A6%5Cn%20%20rect.area%20%3D%20200%3B%5Cn%20%20print(rect.width)%3B%20%2F%2F%2010.0%5Cn%7D%5Cn%5Cnclass%20Rectangle%20%7B%5Cn%20%20num%20width%2C%20height%3B%5Cn%20%20%2F%2F%20%E8%8E%B7%E5%8F%96%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7%E7%9A%84%E5%80%BC%5Cn%20%20num%20get%20area%20%3D%3E%20width%20*%20height%3B%5Cn%20%20%2F%2F%20num%20get%20area%20%7B%5Cn%20%20%2F%2F%20%20%20return%20width%20*%20height%3B%5Cn%20%20%2F%2F%20%7D%5Cn%20%20%2F%2F%20%E8%AE%BE%E7%BD%AE%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7%E5%80%BC%5Cn%20%20set%20area(value)%7B%5Cn%20%20%20%20width%20%3D%20value%20%2F%2020%3B%5Cn%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%2253b5281a%22%7D\"></card><p data-lake-id=\"bea473518fba3dbf9effb067ddad4499_p_248\" id=\"bea473518fba3dbf9effb067ddad4499_p_248\"><br></p><h3 data-lake-id=\"34a314fc\" id=\"34a314fc\"><span data-lake-id=\"u8eb1bff9\" id=\"u8eb1bff9\">8.5 构造方法</span></h3><p data-lake-id=\"f46f4fe0560ab2f40140fcdf6c76e650_p_249\" id=\"f46f4fe0560ab2f40140fcdf6c76e650_p_249\"><br></p><ol list=\"u18ec2818\"><li fid=\"u96ba6710\" data-lake-id=\"5b44ab71647e74e74811e8772b16d3dd_li_65\" id=\"5b44ab71647e74e74811e8772b16d3dd_li_65\"><span data-lake-id=\"ub396441f\" id=\"ub396441f\">如果没有自定义构造方法，则会有个默认构造方法</span></li></ol><ol list=\"uab326bb6\" start=\"2\"><li fid=\"u50794165\" data-lake-id=\"43a1e2d44e570c63396bbe8b086b0c9c_li_66\" id=\"43a1e2d44e570c63396bbe8b086b0c9c_li_66\"><span data-lake-id=\"u998d3d6c\" id=\"u998d3d6c\">如果存在自定义构造方法，则默认构造方法无效</span></li></ol><p data-lake-id=\"e08beadb42b714218a1b36be3f0f61c1_p_250\" id=\"e08beadb42b714218a1b36be3f0f61c1_p_250\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22dart%22%2C%22code%22%3A%22void%20main()%20%7B%5Cn%20%20var%20person%20%3D%20new%20Person(%5C%22Tom%5C%22%2C%2020)%3B%5Cn%7D%5Cnclass%20Person%20%7B%5Cn%20%20String%20name%3B%5Cn%20%20int%20age%3B%5Cn%5Cn%20%20%2F%2F%20final%20String%20gender%3B%5Cn%20%20Person(String%20name%2C%20int%20age)%20%7B%5Cn%20%20%20%20this.name%20%3D%20name%3B%5Cn%20%20%20%20this.age%20%3D%20age%3B%5Cn%20%20%7D%5Cn%20%20void%20work()%20%7B%5Cn%20%20%20%20print(%5C%22work...%5C%22)%3B%5Cn%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22b67772e6%22%7D\"></card><p data-lake-id=\"3d18b6b62d151c043218e7d9d07e2abe_p_251\" id=\"3d18b6b62d151c043218e7d9d07e2abe_p_251\"><br></p><p data-lake-id=\"512aa0dafa3495b06051cb82627ded76_p_252\" id=\"512aa0dafa3495b06051cb82627ded76_p_252\"><strong><span data-lake-id=\"u2259e30f\" id=\"u2259e30f\">语法糖</span></strong><span data-lake-id=\"uc7314a5f\" id=\"uc7314a5f\">：在构造方法执行之前对属性进行赋值</span></p><p data-lake-id=\"3515d0f9ecb9499a648a8b4a3ee78839_p_253\" id=\"3515d0f9ecb9499a648a8b4a3ee78839_p_253\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22dart%22%2C%22code%22%3A%22void%20main()%20%7B%5Cn%20%20var%20person%20%3D%20new%20Person(%5C%22Tom%5C%22%2C%2020%2C%20%5C%22Male%5C%22)%3B%5Cn%7D%5Cnclass%20Person%20%7B%5Cn%20%20String%20name%3B%5Cn%20%20int%20age%3B%5Cn%5Cn%20%20final%20String%20gender%3B%5Cn%20%20Person(this.name%2C%20this.age%2C%20this.gender)%3B%20%2F%2F%20%E8%AF%AD%E6%B3%95%E7%B3%96%5Cn%20%20void%20work()%20%7B%5Cn%20%20%20%20print(%5C%22work...%5C%22)%3B%5Cn%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%226d961901%22%7D\"></card><p data-lake-id=\"d6f5ed1b4d8d8ac6d60ab389ddb41993_p_254\" id=\"d6f5ed1b4d8d8ac6d60ab389ddb41993_p_254\"><br></p><ol list=\"u7fc8952b\" start=\"3\"><li fid=\"u69024a62\" data-lake-id=\"1da4d5696ebfd959f65a0b313e29d7e1_li_67\" id=\"1da4d5696ebfd959f65a0b313e29d7e1_li_67\"><span data-lake-id=\"ud13752c5\" id=\"ud13752c5\">构造方法不能重载</span></li></ol><p data-lake-id=\"97e3b88e8f1bfda10a9dde2c42a136f9_p_255\" id=\"97e3b88e8f1bfda10a9dde2c42a136f9_p_255\"><br></p><h3 data-lake-id=\"28dec681\" id=\"28dec681\"><span data-lake-id=\"u33c53021\" id=\"u33c53021\">8.6 命名构造方法</span></h3><p data-lake-id=\"df7e8d3180610289b39a308b14a0a4a1_p_256\" id=\"df7e8d3180610289b39a308b14a0a4a1_p_256\"><br></p><ol list=\"ud883daec\"><li fid=\"uedb53acf\" data-lake-id=\"30cae26e7502e9f017c84e863dc60c9a_li_68\" id=\"30cae26e7502e9f017c84e863dc60c9a_li_68\"><span data-lake-id=\"u066f4c97\" id=\"u066f4c97\">使用命名构造方法，可以实现多个构造方法</span></li></ol><ol list=\"ub87d00b6\" start=\"2\"><li fid=\"u782d2382\" data-lake-id=\"801b9dbdc1ac6f4d85c9b19b4789c3fc_li_69\" id=\"801b9dbdc1ac6f4d85c9b19b4789c3fc_li_69\"><span data-lake-id=\"u39d46ee1\" id=\"u39d46ee1\">使用 </span><strong><span data-lake-id=\"ub931be14\" id=\"ub931be14\">类名.方法</span></strong><span data-lake-id=\"uc4553551\" id=\"uc4553551\"> 的形式实现</span></li></ol><p data-lake-id=\"0983ce4784ca53081c2afa97562f5bfa_p_257\" id=\"0983ce4784ca53081c2afa97562f5bfa_p_257\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22dart%22%2C%22code%22%3A%22void%20main()%20%7B%5Cn%20%20var%20person%20%3D%20new%20Person.width(%5C%22Tom%5C%22)%3B%5Cn%7D%5Cnclass%20Person%20%7B%5Cn%20%20String%20name%3B%5Cn%20%20Person.width(String%20name)%20%7B%5Cn%20%20%20%20this.name%20%3D%20name%3B%5Cn%20%20%7D%5Cn%20%20void%20work()%20%7B%5Cn%20%20%20%20print(%5C%22work...%5C%22)%3B%5Cn%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22494027e5%22%7D\"></card><p data-lake-id=\"e1f77a305d41e8c97d8b51cc18da7968_p_258\" id=\"e1f77a305d41e8c97d8b51cc18da7968_p_258\"><br></p><h3 data-lake-id=\"d6b162f0\" id=\"d6b162f0\"><span data-lake-id=\"ubb573c63\" id=\"ubb573c63\">8.7 常量构造方法</span></h3><p data-lake-id=\"e1752ec3be6731068aa3b2551ab39c93_p_259\" id=\"e1752ec3be6731068aa3b2551ab39c93_p_259\"><br></p><ol list=\"u6605c78c\"><li fid=\"u0b73a282\" data-lake-id=\"038eed847438de9721f00d3376029b9f_li_70\" id=\"038eed847438de9721f00d3376029b9f_li_70\"><span data-lake-id=\"ufbea56df\" id=\"ufbea56df\">如果类是不可变状态，可以把对象定义为编译时常量</span></li></ol><ol list=\"ub96c2b49\" start=\"2\"><li fid=\"u2210c06e\" data-lake-id=\"291c8c6c981d7dd0eb3e6796154db186_li_71\" id=\"291c8c6c981d7dd0eb3e6796154db186_li_71\"><span data-lake-id=\"uae26c607\" id=\"uae26c607\">使用 </span><code data-lake-id=\"u7dc67895\" id=\"u7dc67895\"><span data-lake-id=\"u09dc315f\" id=\"u09dc315f\">const</span></code><span data-lake-id=\"uf3ff2775\" id=\"uf3ff2775\"> 声明构造方法，并且所有变量都为 </span><code data-lake-id=\"u0ec69d3e\" id=\"u0ec69d3e\"><span data-lake-id=\"uf5b0b71e\" id=\"uf5b0b71e\">fianl</span></code></li></ol><ol list=\"ufd1a8077\" start=\"3\"><li fid=\"u20c33ec9\" data-lake-id=\"47e65a06005a27a9499be24fefea33e0_li_72\" id=\"47e65a06005a27a9499be24fefea33e0_li_72\"><span data-lake-id=\"u00efb2ef\" id=\"u00efb2ef\">使用 </span><code data-lake-id=\"u905bd6b9\" id=\"u905bd6b9\"><span data-lake-id=\"u84aa338f\" id=\"u84aa338f\">const</span></code><span data-lake-id=\"u705895dc\" id=\"u705895dc\"> 声明对象，可以省略</span></li></ol><p data-lake-id=\"c43279d314bb1c051d65b017ff2a7851_p_260\" id=\"c43279d314bb1c051d65b017ff2a7851_p_260\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22dart%22%2C%22code%22%3A%22void%20main()%20%7B%5Cn%20%20%2F%2F%20const%20person%20%3D%20const%20Person(%5C%22%E5%BC%A0%E4%B8%89%5C%22%2C%2020%2C%20%5C%22Male%5C%22)%3B%5Cn%20%20const%20person%20%3D%20Person(%5C%22%E5%BC%A0%E4%B8%89%5C%22%2C%2020%2C%20%5C%22Male%5C%22)%3B%5Cn%7D%5Cn%5Cnclass%20Person%20%7B%5Cn%20%20final%20String%20name%3B%5Cn%20%20final%20int%20age%3B%5Cn%20%20final%20String%20gender%3B%5Cn%20%20const%20Person(this.name%2C%20this.age%2C%20this.gender)%3B%5Cn%20%20void%20work()%20%7B%5Cn%20%20%20%20print(%5C%22work%5C%22)%3B%5Cn%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22d4725875%22%7D\"></card><p data-lake-id=\"0344f8f97ae50ef300797fddbaffc9a7_p_261\" id=\"0344f8f97ae50ef300797fddbaffc9a7_p_261\"><br></p><h3 data-lake-id=\"1b266566\" id=\"1b266566\"><span data-lake-id=\"u9771b0a6\" id=\"u9771b0a6\">8.8 工厂构造方法</span></h3><p data-lake-id=\"3a5652c73375f059b90ee82b60669833_p_262\" id=\"3a5652c73375f059b90ee82b60669833_p_262\"><br></p><ol list=\"u7c05e4f6\"><li fid=\"ua157a176\" data-lake-id=\"f31bb8c1fbe48b6a657c8f66dc6d711d_li_73\" id=\"f31bb8c1fbe48b6a657c8f66dc6d711d_li_73\"><span data-lake-id=\"ued9d916f\" id=\"ued9d916f\">工厂构造方法类似于设计模式中的工厂模式</span></li></ol><ol list=\"uc295b98c\" start=\"2\"><li fid=\"ube7890f3\" data-lake-id=\"1fa090ece2fac3ff8c9d9a4bdc6d2b0c_li_74\" id=\"1fa090ece2fac3ff8c9d9a4bdc6d2b0c_li_74\"><span data-lake-id=\"u8b4a4543\" id=\"u8b4a4543\">在构造方法前添加关键字 </span><code data-lake-id=\"u4ed68897\" id=\"u4ed68897\"><span data-lake-id=\"u50a1dded\" id=\"u50a1dded\">factory</span></code><span data-lake-id=\"u850512ad\" id=\"u850512ad\"> 实现一个工厂构造方法</span></li></ol><ol list=\"u67d06cb3\" start=\"3\"><li fid=\"u8f92dc92\" data-lake-id=\"0b1faea7a66a54e5092eda729830a51c_li_75\" id=\"0b1faea7a66a54e5092eda729830a51c_li_75\"><span data-lake-id=\"u0b175ff5\" id=\"u0b175ff5\">在工厂构造方法中可返回对象</span></li></ol><p data-lake-id=\"e319add840b73a166328bf789b6ae09d_p_263\" id=\"e319add840b73a166328bf789b6ae09d_p_263\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22dart%22%2C%22code%22%3A%22class%20Logger%20%7B%5Cn%20%20final%20String%20name%3B%5Cn%20%20static%20final%20Map%3CString%2C%20Logger%3E%20_cache%20%3D%20%3CString%2C%20Logger%3E%20%7B%7D%3B%5Cn%5Cn%20%20factory%20Logger(String%20name)%20%7B%5Cn%20%20%20%20return%20Logger._internal('Dart')%3B%20%2F%2F%20%E5%8F%AF%E4%BB%A5%E8%BF%94%E5%9B%9E%5Cn%20%20%7D%5Cn%20%20Logger._internal(this.name)%3B%5Cn%20%20void%20log(String%20msg)%20%7B%5Cn%20%20%20%20print(msg)%3B%5Cn%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%222d4ef080%22%7D\"></card><p data-lake-id=\"95c82bac10be325ff523b3dbe014a366_p_264\" id=\"95c82bac10be325ff523b3dbe014a366_p_264\"><br></p><ul list=\"ue9833778\"><li fid=\"ube374fc5\" data-lake-id=\"588b8703b820566674f1a367450a31c9_li_76\" id=\"588b8703b820566674f1a367450a31c9_li_76\"><em><strong><span data-lake-id=\"ue6c90661\" id=\"ue6c90661\">命名工厂构造方法</span></strong></em><span data-lake-id=\"u5fd760a7\" id=\"u5fd760a7\">（</span><em><strong><span data-lake-id=\"u77a50ece\" id=\"u77a50ece\">factory 类名.方法名</span></strong></em><span data-lake-id=\"ud81be3fe\" id=\"ud81be3fe\">）</span></li></ul><p data-lake-id=\"e4d5668038ec0dd0f47f3473097287e2_p_265\" id=\"e4d5668038ec0dd0f47f3473097287e2_p_265\"><br></p><p data-lake-id=\"a616915df2e7a11aeb5a73015b33acb5_p_266\" id=\"a616915df2e7a11aeb5a73015b33acb5_p_266\"><span data-lake-id=\"ueb6ca868\" id=\"ueb6ca868\">它可以有返回值，而且不需要将类的 </span><em><strong><span data-lake-id=\"u70dcea71\" id=\"u70dcea71\">final</span></strong></em><span data-lake-id=\"u1dcfb319\" id=\"u1dcfb319\"> 变量作为参数，是提供一种灵活获取类对象的方式</span></p><p data-lake-id=\"c1f615bd093ec15198b28dc0cd440916_p_267\" id=\"c1f615bd093ec15198b28dc0cd440916_p_267\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22dart%22%2C%22code%22%3A%22class%20Student%20%7B%5Cn%20%20factory%20Student._stu(Student%20stu)%20%7B%5Cn%20%20%20%20return%20Student(stu._school%2C%20stu.name%2C%20stu.age)%3B%5Cn%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%2293328c4f%22%7D\"></card><p data-lake-id=\"1941af98e6c0fecbf8062468a010bb3c_p_268\" id=\"1941af98e6c0fecbf8062468a010bb3c_p_268\"><br></p><h3 data-lake-id=\"2da81770\" id=\"2da81770\"><span data-lake-id=\"u01e6dae0\" id=\"u01e6dae0\">8.9 初始化列表常用于设置 (</span><code data-lake-id=\"ue85f665a\" id=\"ue85f665a\"><span data-lake-id=\"u0e738bcf\" id=\"u0e738bcf\">fianl</span></code><span data-lake-id=\"u01d06fe9\" id=\"u01d06fe9\"> 变量的值)</span></h3><p data-lake-id=\"8757c9f7854dde4a72cfc4af616e895a_p_269\" id=\"8757c9f7854dde4a72cfc4af616e895a_p_269\"><br></p><ol list=\"ua04a2030\"><li fid=\"u91c570c7\" data-lake-id=\"16bc700158d5e4e6a3b22de274b99aaa_li_77\" id=\"16bc700158d5e4e6a3b22de274b99aaa_li_77\"><span data-lake-id=\"ue923003d\" id=\"ue923003d\">初始化列表会在构造方法体执行之前执行</span></li></ol><ol list=\"u9c63032b\" start=\"2\"><li fid=\"u7a901342\" data-lake-id=\"5b37720486515372c50de814b3501f4d_li_78\" id=\"5b37720486515372c50de814b3501f4d_li_78\"><span data-lake-id=\"uf3297f7b\" id=\"uf3297f7b\">使用逗号分隔初始化表达式</span></li></ol><ol list=\"u58a187c4\" start=\"3\"><li fid=\"uea625d61\" data-lake-id=\"b3519a03056fffac0dd5a06414abad78_li_79\" id=\"b3519a03056fffac0dd5a06414abad78_li_79\"><span data-lake-id=\"u62c86a0e\" id=\"u62c86a0e\">初始化列表常用于设置 </span><code data-lake-id=\"u3cfed7b5\" id=\"u3cfed7b5\"><span data-lake-id=\"u8858d5f3\" id=\"u8858d5f3\">final</span></code><span data-lake-id=\"u7218eb68\" id=\"u7218eb68\"> 变量的值</span></li></ol><p data-lake-id=\"f994bede262e74fa3b6f0e70c438222d_p_270\" id=\"f994bede262e74fa3b6f0e70c438222d_p_270\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22dart%22%2C%22code%22%3A%22void%20main()%20%7B%5Cn%20%20var%20person%20%3D%20new%20Person(%5C%22Tom%5C%22%2C%2020%2C%20%5C%22Male%5C%22)%3B%5Cn%7D%5Cnclass%20Person%20%7B%5Cn%20%20String%20name%3B%5Cn%20%20int%20age%3B%5Cn%20%20final%20String%20gender%3B%5Cn%5Cn%20%20Person(this.name%2C%20this.age%2C%20this.gender)%3B%5Cn%20%20%2F%2F%20%E5%88%9D%E5%A7%8B%E5%8C%96%E5%88%97%E8%A1%A8%5Cn%20%20Person.withMap(Map%20map)%3A%20gender%20%3D%20map%5B%5C%22gender%5C%22%5D%20%7B%5Cn%20%20%20%20this.name%20%3D%20map%5B%5C%22name%5C%22%5D%3B%5Cn%20%20%20%20this.age%20%3D%20map%5B%5C%22age%5C%22%5D%3B%5Cn%20%20%7D%5Cn%20%20%2F%2F%20%E6%88%96%E8%80%85%5Cn%20%20Person.withMap1(Map%20map)%3A%20name%20%3D%20map%5B%5C%22name%5C%22%5D%2C%20age%20%3D%20map%5B%5C%22age%5C%22%5D%2C%20gender%20%3D%20map%5B%5C%22gender%5C%22%5D%3B%5Cn%20%20void%20work()%20%7B%5Cn%20%20%20%20print(%5C%22work%5C%22)%3B%5Cn%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22a7376f35%22%7D\"></card><p data-lake-id=\"0ff356bd76a1afc7336643db6003559d_p_271\" id=\"0ff356bd76a1afc7336643db6003559d_p_271\"><br></p><h3 data-lake-id=\"0ce482f2\" id=\"0ce482f2\"><span data-lake-id=\"u8aca716f\" id=\"u8aca716f\">8.10 静态成员</span></h3><p data-lake-id=\"4af52400f7f68b78e0bfc22f9633493e_p_272\" id=\"4af52400f7f68b78e0bfc22f9633493e_p_272\"><br></p><ol list=\"u485f9fba\"><li fid=\"u35cebfa4\" data-lake-id=\"d673ee91fb8f20e1bf0b00bd5d22f847_li_80\" id=\"d673ee91fb8f20e1bf0b00bd5d22f847_li_80\"><span data-lake-id=\"u195d7682\" id=\"u195d7682\">使用 </span><code data-lake-id=\"u03a9e4e4\" id=\"u03a9e4e4\"><span data-lake-id=\"u6b89a3d6\" id=\"u6b89a3d6\">static</span></code><span data-lake-id=\"u7d2be2be\" id=\"u7d2be2be\"> 关键字来实现类级别的变量和函数（不再属于对象级别）</span></li></ol><ol list=\"u88190b7b\" start=\"2\"><li fid=\"u7d3e29d5\" data-lake-id=\"c9f2d60a0de1ada754f2dfcde4f660e9_li_81\" id=\"c9f2d60a0de1ada754f2dfcde4f660e9_li_81\"><span data-lake-id=\"ua65c3915\" id=\"ua65c3915\">静态成员不能访问非静态成员，非静态成员可以访问静态成员</span></li></ol><ol list=\"u1b3eeab9\" start=\"3\"><li fid=\"ue05e7ece\" data-lake-id=\"c2e1188f5511bc87189c3927a0879808_li_82\" id=\"c2e1188f5511bc87189c3927a0879808_li_82\"><span data-lake-id=\"u7c16353f\" id=\"u7c16353f\">类中的常量需要使用 </span><code data-lake-id=\"u05893c76\" id=\"u05893c76\"><span data-lake-id=\"u6ecbbb78\" id=\"u6ecbbb78\">static const</span></code><span data-lake-id=\"ub1ac6c3c\" id=\"ub1ac6c3c\"> 声明</span></li></ol><p data-lake-id=\"3f2704f87d6ead87f93c1c897ce22fea_p_273\" id=\"3f2704f87d6ead87f93c1c897ce22fea_p_273\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22dart%22%2C%22code%22%3A%22void%20main()%20%7B%5Cn%20%20var%20page%20%3D%20new%20Page()%3B%5Cn%20%20%2F%2F%20page.scrollDown()%3B%5Cn%20%20Page.scrollDown()%3B%5Cn%7D%5Cnclass%20Page%20%7B%5Cn%20%20%2F%2F%20%E6%B7%BB%E5%8A%A0%E5%B8%B8%E9%87%8F%5Cn%20%20static%20const%20int%20maxAge%20%3D%2010%3B%5Cn%20%20%5Cn%20%20static%20int%20currentPage%20%3D%201%3B%5Cn%20%20static%20void%20scrollDown()%20%7B%5Cn%20%20%20%20currentPage%20%3D%201%3B%5Cn%20%20%20%20print(%5C%22scrollDown%5C%22)%3B%5Cn%20%20%7D%5Cn%20%20void%20scrollUp()%20%7B%5Cn%20%20%20%20currentPage%2B%2B%3B%5Cn%20%20%20%20print(%5C%22scrollUp%5C%22)%3B%5Cn%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22e8bcdffd%22%7D\"></card><p data-lake-id=\"a57e3e87113ee096d36d0fd8d72ea1ca_p_274\" id=\"a57e3e87113ee096d36d0fd8d72ea1ca_p_274\"><br></p><h3 data-lake-id=\"539800c4\" id=\"539800c4\"><span data-lake-id=\"u9c5038f1\" id=\"u9c5038f1\">8.11 对象操作符</span></h3><p data-lake-id=\"d92d21c1f221dd0504a484de03a61dd1_p_275\" id=\"d92d21c1f221dd0504a484de03a61dd1_p_275\"><br></p><ol list=\"u250c0c6b\"><li fid=\"uad61b696\" data-lake-id=\"4177dedb9a1727ab3375d8467fb6f920_li_83\" id=\"4177dedb9a1727ab3375d8467fb6f920_li_83\"><span data-lake-id=\"uedf20541\" id=\"uedf20541\">条件成员访问：</span><code data-lake-id=\"u4b1922fe\" id=\"u4b1922fe\"><span data-lake-id=\"u36ad39fa\" id=\"u36ad39fa\">?.</span></code><span data-lake-id=\"u28ce436a\" id=\"u28ce436a\">（如果该操作符前边不为空，则继续向后执行，否则不继续执行）</span></li></ol><ol list=\"u348895e9\" start=\"2\"><li fid=\"u5c0079d1\" data-lake-id=\"b133d4da2859da170c434559b5ceda34_li_84\" id=\"b133d4da2859da170c434559b5ceda34_li_84\"><span data-lake-id=\"u14aa410b\" id=\"u14aa410b\">类型转换：</span><code data-lake-id=\"u2b08024a\" id=\"u2b08024a\"><span data-lake-id=\"u5c9288bc\" id=\"u5c9288bc\">as</span></code></li></ol><p data-lake-id=\"c2f8a44a9de114d551b6cb9360b19084_p_276\" id=\"c2f8a44a9de114d551b6cb9360b19084_p_276\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22dart%22%2C%22code%22%3A%22void%20main()%20%7B%5Cn%20%20var%20person%3B%5Cn%20%20person%20%3D%20%5C%22%5C%22%3B%5Cn%20%20person%20%3D%20new%20Person()%3B%5Cn%20%20(person%20as%20Person).work()%3B%5Cn%7D%5Cnclass%20Person%20%7B%5Cn%20%20String%20name%3B%5Cn%20%20int%20age%3B%5Cn%20%20void%20work()%20%7B%5Cn%20%20%20%20print(%5C%22work...%5C%22)%3B%20%5Cn%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22b1120071%22%7D\"></card><p data-lake-id=\"5e01eae6c8e0e41c350eff7c120f6c4d_p_277\" id=\"5e01eae6c8e0e41c350eff7c120f6c4d_p_277\"><br></p><ol list=\"u54ab93cb\" start=\"3\"><li fid=\"u22e31b27\" data-lake-id=\"99f0fc24a8a7fc5b19c032ca1390eafd_li_85\" id=\"99f0fc24a8a7fc5b19c032ca1390eafd_li_85\"><span data-lake-id=\"u49f06077\" id=\"u49f06077\">是否指定类型：</span><code data-lake-id=\"uee9363d3\" id=\"uee9363d3\"><span data-lake-id=\"uf6dc2723\" id=\"uf6dc2723\">is</span></code><span data-lake-id=\"u58dcb1a1\" id=\"u58dcb1a1\">，</span><code data-lake-id=\"u3cbc2297\" id=\"u3cbc2297\"><span data-lake-id=\"u9ad478d7\" id=\"u9ad478d7\">is!</span></code></li></ol><p data-lake-id=\"fef395f1663a72149f43467aba9a9f0d_p_278\" id=\"fef395f1663a72149f43467aba9a9f0d_p_278\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22dart%22%2C%22code%22%3A%22void%20main()%20%7B%5Cn%20%20var%20person%3B%5Cn%20%20person%20%3D%20%5C%22%5C%22%3B%5Cn%20%20person%20%3D%20new%20Person()%3B%5Cn%20%20if(person%20is%20Person)%20%7B%5Cn%20%20%20%20person.work()%3B%5Cn%20%20%7D%5Cn%7D%5Cnclass%20Person%20%7B%5Cn%20%20String%20name%3B%5Cn%20%20int%20age%3B%5Cn%20%20void%20work()%20%7B%5Cn%20%20%20%20print(%5C%22work...%5C%22)%3B%20%5Cn%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%2257e25bcc%22%7D\"></card><p data-lake-id=\"f658905930ba3ab999e81f9ca3773cdd_p_279\" id=\"f658905930ba3ab999e81f9ca3773cdd_p_279\"><br></p><ol list=\"u49e4eb48\" start=\"4\"><li fid=\"u757e2e85\" data-lake-id=\"6994039d2e96fc3c3c6e16a1606542dd_li_86\" id=\"6994039d2e96fc3c3c6e16a1606542dd_li_86\"><span data-lake-id=\"u7dc8be3a\" id=\"u7dc8be3a\">级联操作：</span><code data-lake-id=\"uc4fd14b2\" id=\"uc4fd14b2\"><span data-lake-id=\"u1dc3d8c5\" id=\"u1dc3d8c5\">..</span></code></li></ol><p data-lake-id=\"f7138c4e59ae2939e7ca22b018b3177c_p_280\" id=\"f7138c4e59ae2939e7ca22b018b3177c_p_280\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22dart%22%2C%22code%22%3A%22void%20main()%20%7B%5Cn%20%20var%20person%20%3D%20new%20Person()%3B%5Cn%20%20person..name%20%3D%20%5C%22Tom%5C%22%20..age%20%3D%2020%20..work()%3B%5Cn%20%20%2F%2F%20%E7%AD%89%E4%BB%B7%E4%BA%8E%5Cn%20%20person.name%20%3D%20%5C%22Tom%5C%22%3B%5Cn%20%20person.age%20%3D%2020%3B%5Cn%20%20person.work()%3B%5Cn%7D%5Cnclass%20Person%20%7B%5Cn%20%20String%20name%3B%5Cn%20%20int%20age%3B%5Cn%20%20void%20work()%20%7B%5Cn%20%20%20%20print(%5C%22work...%5C%22)%3B%20%5Cn%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%224381f132%22%7D\"></card><p data-lake-id=\"31f48e2ab2cc1fa560bafed1287af19b_p_281\" id=\"31f48e2ab2cc1fa560bafed1287af19b_p_281\"><br></p><h3 data-lake-id=\"a3818357\" id=\"a3818357\"><span data-lake-id=\"u84054522\" id=\"u84054522\">8.11 对象 </span><code data-lake-id=\"u6feb8e7e\" id=\"u6feb8e7e\"><span data-lake-id=\"ucbd3a876\" id=\"ucbd3a876\">call</span></code><span data-lake-id=\"u49447d29\" id=\"u49447d29\"> 方法</span></h3><p data-lake-id=\"2315f10f54bc7e13b39e40a7ef999847_p_282\" id=\"2315f10f54bc7e13b39e40a7ef999847_p_282\"><br></p><ul list=\"u9b247aa5\"><li fid=\"u4295bf94\" data-lake-id=\"9aeb66d6ca76f955224aeb8c90e0dea8_li_87\" id=\"9aeb66d6ca76f955224aeb8c90e0dea8_li_87\"><span data-lake-id=\"ue669b6b0\" id=\"ue669b6b0\">如果类实现了 </span><code data-lake-id=\"u1114618e\" id=\"u1114618e\"><span data-lake-id=\"u92042e1c\" id=\"u92042e1c\">call()</span></code><span data-lake-id=\"u3082e6e2\" id=\"u3082e6e2\"> 方法，则该类的对象可以作为方法使用</span></li></ul><p data-lake-id=\"d8862285fa1c5254153b79d80f836d67_p_283\" id=\"d8862285fa1c5254153b79d80f836d67_p_283\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22dart%22%2C%22code%22%3A%22void%20main()%20%7B%5Cn%20%20var%20person%20%3D%20new%20Person()%3B%5Cn%20%20%2F%2F%20person(%5C%22%E5%BC%A0%E4%B8%89%5C%22%2C%2030)%3B%5Cn%20%20print(person(%5C%22%E5%BC%A0%E4%B8%89%5C%22%2C%2030))%3B%5Cn%7D%5Cnclass%20Person%20%7B%5Cn%20%20String%20name%3B%5Cn%20%20int%20age%3B%5Cn%20%20%2F%2F%20void%20call(String%20name%2C%20int%20age)%20%7B%5Cn%20%20%2F%2F%20%20%20print(%5C%22Name%20is%20%24name%2C%20Age%20is%20%24age%5C%22)%3B%5Cn%20%20%2F%2F%20%7D%5Cn%20%20String%20call(String%20name%2C%20int%20age)%20%7B%5Cn%20%20%20%20return%20%5C%22Name%20is%20%24name%2C%20Age%20is%20%24age%5C%22%3B%5Cn%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%228ac7d2ff%22%7D\"></card><p data-lake-id=\"d643b961309916d9e6d944f2fc2ef443_p_284\" id=\"d643b961309916d9e6d944f2fc2ef443_p_284\"><br></p><h2 data-lake-id=\"a58aed29\" id=\"a58aed29\"><span data-lake-id=\"u465dd953\" id=\"u465dd953\">九、面向对象扩展</span></h2><p data-lake-id=\"c667c8fb4a9b06dea1ac969618387647_p_285\" id=\"c667c8fb4a9b06dea1ac969618387647_p_285\"><br></p><ul list=\"ub117cd35\"><li fid=\"uafe58245\" data-lake-id=\"297d760a11647fd51bb42dd9febba454_li_88\" id=\"297d760a11647fd51bb42dd9febba454_li_88\"><span data-lake-id=\"u88efe2cb\" id=\"u88efe2cb\">继承，继承中的构造方法</span></li></ul><ul list=\"uf8158ab7\"><li fid=\"u6ca83e5b\" data-lake-id=\"ecb26e731050f6c35c47ae279a616be6_li_89\" id=\"ecb26e731050f6c35c47ae279a616be6_li_89\"><span data-lake-id=\"uc9122359\" id=\"uc9122359\">抽象类</span></li></ul><ul list=\"uab266f80\"><li fid=\"uad65b907\" data-lake-id=\"9707d878adfc9f14b866140d0ef6c053_li_90\" id=\"9707d878adfc9f14b866140d0ef6c053_li_90\"><span data-lake-id=\"ufdaf5616\" id=\"ufdaf5616\">接口</span></li></ul><ul list=\"ub84ee676\"><li fid=\"uc82557b3\" data-lake-id=\"4639856470db88c2e16d235203384bb9_li_91\" id=\"4639856470db88c2e16d235203384bb9_li_91\"><code data-lake-id=\"u48a739b5\" id=\"u48a739b5\"><span data-lake-id=\"u6e7c5158\" id=\"u6e7c5158\">Mixins</span></code><span data-lake-id=\"ua473c0a2\" id=\"ua473c0a2\">，操作符的覆写（操作符/运算符重载）</span></li></ul><p data-lake-id=\"0a119ed9fd147db9466e04386b6ded7b_p_286\" id=\"0a119ed9fd147db9466e04386b6ded7b_p_286\"><br></p><h3 data-lake-id=\"cd14c6c5\" id=\"cd14c6c5\"><span data-lake-id=\"uad8bf12f\" id=\"uad8bf12f\">9.1 继承</span></h3><p data-lake-id=\"4b09dea2a885c00a614eef1d25a58513_p_287\" id=\"4b09dea2a885c00a614eef1d25a58513_p_287\"><br></p><ol list=\"u8919d963\"><li fid=\"ud52f2e92\" data-lake-id=\"a8ff3ba3788ba80a69de7dc2ca6269b3_li_92\" id=\"a8ff3ba3788ba80a69de7dc2ca6269b3_li_92\"><span data-lake-id=\"u3705fbc3\" id=\"u3705fbc3\">使用关键字 </span><code data-lake-id=\"uc17f9208\" id=\"uc17f9208\"><span data-lake-id=\"uef4a0340\" id=\"uef4a0340\">extends</span></code><span data-lake-id=\"u54ee13aa\" id=\"u54ee13aa\"> 继承一个类</span></li></ol><ol list=\"uac5edd26\" start=\"2\"><li fid=\"u7455f0aa\" data-lake-id=\"b7f4998e5a4070c23da43eb7be23ffec_li_93\" id=\"b7f4998e5a4070c23da43eb7be23ffec_li_93\"><span data-lake-id=\"u2b812aa4\" id=\"u2b812aa4\">子类会继承父类可见的属性和方法（私有属性无法继承），不会继承构造方法</span></li></ol><ol list=\"uc99a83ce\" start=\"3\"><li fid=\"ude4695d0\" data-lake-id=\"2fcedb2fae4763694c4cc84bf7883da7_li_94\" id=\"2fcedb2fae4763694c4cc84bf7883da7_li_94\"><span data-lake-id=\"u923fc5d5\" id=\"u923fc5d5\">子类能够复写父类的方法、</span><code data-lake-id=\"u5f29ca63\" id=\"u5f29ca63\"><span data-lake-id=\"ufe53ec96\" id=\"ufe53ec96\">getter</span></code><span data-lake-id=\"uee04d4ca\" id=\"uee04d4ca\"> 和 </span><code data-lake-id=\"uf116b591\" id=\"uf116b591\"><span data-lake-id=\"u2e8a66f8\" id=\"u2e8a66f8\">setter</span></code></li></ol><ol list=\"u949c0720\" start=\"4\"><li fid=\"u476fb200\" data-lake-id=\"7aecc81cfacf39d61a1b98b77dbd131f_li_95\" id=\"7aecc81cfacf39d61a1b98b77dbd131f_li_95\"><span data-lake-id=\"uaffd9620\" id=\"uaffd9620\">单继承，多态性（例如可以重写 </span><code data-lake-id=\"uf4f2f1c1\" id=\"uf4f2f1c1\"><span data-lake-id=\"u7f14bc1b\" id=\"u7f14bc1b\">toString</span></code><span data-lake-id=\"ue45cb924\" id=\"ue45cb924\"> 方法）</span></li></ol><p data-lake-id=\"6d7ea3ddda2a454c5683711790958ce9_p_288\" id=\"6d7ea3ddda2a454c5683711790958ce9_p_288\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22dart%22%2C%22code%22%3A%22%2F%2F%20person.dart%5Cnclass%20Person%20%7B%5Cn%20%20String%20name%3B%5Cn%20%20int%20age%3B%5Cn%20%20String%20_birthday%3B%5Cn%20%20bool%20get%20isAudit%20%3D%3E%20age%20%3E%2010%3B%5Cn%20%20void%20run()%20%7B%5Cn%20%20%20%20print(%5C%22Person%20run%5C%22)%3B%5Cn%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%226d7ec211%22%7D\"></card><p data-lake-id=\"eaf89275095ca133033e98ed4b1e7f4f_p_289\" id=\"eaf89275095ca133033e98ed4b1e7f4f_p_289\"><br></p><ul list=\"u911ed59e\"><li fid=\"ub42ab127\" data-lake-id=\"41d4a0d7d9a41d898f0b1775accaa8a8_li_96\" id=\"41d4a0d7d9a41d898f0b1775accaa8a8_li_96\"><a href=\"/override \" data-lake-id=\"u053bdad7\" id=\"u053bdad7\"><em><strong><span data-lake-id=\"uf37a11fe\" id=\"uf37a11fe\">@override </span></strong></em></a><em><strong><span data-lake-id=\"u66c444e2\" id=\"u66c444e2\"> </span></strong></em><span data-lake-id=\"u871c90ed\" id=\"u871c90ed\"> 表示下面的计算属性或方法是从父类中复写过来的，并不是自己的</span></li></ul><ul list=\"u42192431\"><li fid=\"u381c9c03\" data-lake-id=\"b8c00fb6fdf8a6c96b0e3ec9c64071df_li_97\" id=\"b8c00fb6fdf8a6c96b0e3ec9c64071df_li_97\"><code data-lake-id=\"uf1424729\" id=\"uf1424729\"><strong><span data-lake-id=\"u8c399864\" id=\"u8c399864\">super.run();</span></strong></code><span data-lake-id=\"u45b6fc21\" id=\"u45b6fc21\">  </span><code data-lake-id=\"uc63c25a4\" id=\"uc63c25a4\"><em><strong><span data-lake-id=\"u239ae45e\" id=\"u239ae45e\">super</span></strong></em></code><span data-lake-id=\"ue15a0217\" id=\"ue15a0217\"> 表示在子类中调用父类的方法，相当于 </span><code data-lake-id=\"u61c4ae41\" id=\"u61c4ae41\"><em><strong><span data-lake-id=\"uc11b4b78\" id=\"uc11b4b78\">this</span></strong></em></code></li></ul><p data-lake-id=\"00b91516bf5c5ea740befa2a58c086c0_p_290\" id=\"00b91516bf5c5ea740befa2a58c086c0_p_290\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22dart%22%2C%22code%22%3A%22%2F%2F%20student.dart%5Cnimport%20%5C%22person.dart%5C%22%3B%5Cn%5Cnvoid%20main()%20%7B%5Cn%20%20var%20student%20%3D%20new%20Student()%3B%5Cn%20%20student.study()%3B%5Cn%20%20student.name%20%3D%20%5C%22Tom%5C%22%3B%5Cn%20%20student.age%20%3D%2016%3B%5Cn%20%20print(student.isAudit)%3B%5Cn%20%20student.run()%3B%5Cn%7D%5Cnclass%20Student%20extends%20Person%20%7B%5Cn%20%20void%20study()%20%7B%5Cn%20%20%20%20print(%5C%22Student%20study...%5C%22)%3B%20%5Cn%20%20%7D%5Cn%20%20%2F%2F%20%40override%20%E8%A1%A8%E7%A4%BA%E4%B8%8B%E9%9D%A2%E7%9A%84%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7%E6%88%96%E6%96%B9%E6%B3%95%E6%98%AF%E4%BB%8E%E7%88%B6%E7%B1%BB%E4%B8%AD%E5%A4%8D%E5%86%99%E8%BF%87%E6%9D%A5%E7%9A%84%EF%BC%8C%E5%B9%B6%E4%B8%8D%E6%98%AF%E8%87%AA%E5%B7%B1%E7%9A%84%5Cn%20%20%40override%5Cn%20%20bool%20get%20isAudit%20%3D%3E%20age%20%3E%2015%3B%5Cn%5Cn%20%20%40override%5Cn%20%20void%20run()%20%7B%5Cn%20%20%20%20%2F%2F%20super.run()%3B%20%2F%2F%20super%E8%A1%A8%E7%A4%BA%E5%9C%A8%E5%AD%90%E7%B1%BB%E4%B8%AD%E8%B0%83%E7%94%A8%E7%88%B6%E7%B1%BB%E7%9A%84%E6%96%B9%E6%B3%95%20%5Cn%20%20%20%20print(%5C%22Student%20run...%5C%22)%3B%5Cn%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22ca9f4b98%22%7D\"></card><p data-lake-id=\"ad203e3a237b08b1d0d926597eaff133_p_291\" id=\"ad203e3a237b08b1d0d926597eaff133_p_291\"><br></p><ul list=\"u675fa9a0\"><li fid=\"u52504116\" data-lake-id=\"5e16ce9117d60001877fc595218fc97a_li_98\" id=\"5e16ce9117d60001877fc595218fc97a_li_98\"><span data-lake-id=\"u1641a681\" id=\"u1641a681\">多态</span></li></ul><p data-lake-id=\"b97212b73dbf30e62a224a0cb8196f65_p_292\" id=\"b97212b73dbf30e62a224a0cb8196f65_p_292\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22dart%22%2C%22code%22%3A%22%2F%2F%20%E5%AD%90%E7%B1%BB%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%8F%AF%E4%BB%A5%E8%B5%8B%E5%80%BC%E7%BB%99%E7%88%B6%E7%B1%BB%E7%9A%84%E4%B8%80%E4%B8%AA%E5%BA%94%E7%94%A8%5Cnvoid%20main()%20%7B%5Cn%20%20%20%20Person%20person%20%3D%20new%20Student()%3B%5Cn%20%20%20%20if(person%20is%20Student)%20%7B%5Cn%20%20%20%20%20%20person.study()%3B%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22fc330c4f%22%7D\"></card><p data-lake-id=\"142a0ac02c890c3b4e4f9cecaa5f0275_p_293\" id=\"142a0ac02c890c3b4e4f9cecaa5f0275_p_293\"><br></p><h3 data-lake-id=\"0b9e8a5f\" id=\"0b9e8a5f\"><span data-lake-id=\"u16127ea1\" id=\"u16127ea1\">9.2 继承中的构造方法</span></h3><p data-lake-id=\"fe7fc0ab45dac8012eef4e5feecabfcd_p_294\" id=\"fe7fc0ab45dac8012eef4e5feecabfcd_p_294\"><br></p><ul list=\"u11b44518\"><li fid=\"ucdf953ff\" data-lake-id=\"0dcafa4b9a3e0f2c9c87ce2ae894abca_li_99\" id=\"0dcafa4b9a3e0f2c9c87ce2ae894abca_li_99\"><span data-lake-id=\"u969721cf\" id=\"u969721cf\">继承中的构造方法</span></li></ul><p data-lake-id=\"77fe4e42c2d2d366d1accde6e1c1af59_p_295\" id=\"77fe4e42c2d2d366d1accde6e1c1af59_p_295\"><br></p><ol list=\"u30f7ec22\"><li fid=\"ua7bbdd8d\" data-lake-id=\"e57673e247e32d1ead654b853b550c1d_li_100\" id=\"e57673e247e32d1ead654b853b550c1d_li_100\"><span data-lake-id=\"ue06e2b95\" id=\"ue06e2b95\">子类中的构造方法默认会调用父类的无名无参的构造方法</span></li></ol><ol list=\"uecd4cab8\" start=\"2\"><li fid=\"u422e45f9\" data-lake-id=\"4bebb0d014537a2673d39404dea93244_li_101\" id=\"4bebb0d014537a2673d39404dea93244_li_101\"><span data-lake-id=\"ufea51fc5\" id=\"ufea51fc5\">如果父类没有无名无参的构造方法，则需要显示调用父类构造方法</span></li></ol><ol list=\"u27c1a7e2\" start=\"3\"><li fid=\"u689a831e\" data-lake-id=\"fb8a41c7c04f0b76e665bdf052acdf19_li_102\" id=\"fb8a41c7c04f0b76e665bdf052acdf19_li_102\"><span data-lake-id=\"uc34ba456\" id=\"uc34ba456\">在构造方法参数后使用 </span><code data-lake-id=\"u2fe0d8d3\" id=\"u2fe0d8d3\"><span data-lake-id=\"u89fb9809\" id=\"u89fb9809\">:</span></code><span data-lake-id=\"ud1d18576\" id=\"ud1d18576\"> 显示调用父类构造方法</span></li></ol><p data-lake-id=\"1db0ebf876a15c92c914cf3cdc862b64_p_296\" id=\"1db0ebf876a15c92c914cf3cdc862b64_p_296\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22dart%22%2C%22code%22%3A%22void%20main()%20%7B%5Cn%20%20var%20student%20%3D%20new%20Student(%5C%22Tom%5C%22)%3B%5Cn%20%20print(student.name)%3B%5Cn%7D%5Cnclass%20Person%20%7B%5Cn%20%20String%20name%3B%5Cn%20%20Person(this.name)%3B%5Cn%20%20Person.withName(this.name)%3B%5Cn%7D%5Cnclass%20Student%20extends%20Person%20%7B%5Cn%20%20int%20age%3B%5Cn%5Cn%2F%2F%20%20Student(String%20name)%20%3A%20super(name)%3B%5Cn%20%20Student(String%20name)%20%3A%20super.withName(name)%3B%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%227eb8cabc%22%7D\"></card><p data-lake-id=\"4d03ec137080c7a0ce05f378a2fc9078_p_297\" id=\"4d03ec137080c7a0ce05f378a2fc9078_p_297\"><br></p><ul list=\"uc8404870\"><li fid=\"u825ba195\" data-lake-id=\"5a156dfe63b514adbea020d156197a61_li_103\" id=\"5a156dfe63b514adbea020d156197a61_li_103\"><span data-lake-id=\"u39bb1fb4\" id=\"u39bb1fb4\">构造方法的执行顺序</span></li></ul><p data-lake-id=\"6b7d4d1ce5df30f76ec280811854eb6a_p_298\" id=\"6b7d4d1ce5df30f76ec280811854eb6a_p_298\"><br></p><ol list=\"u214c9f7f\"><li fid=\"u1efa6d73\" data-lake-id=\"30824f9b63253c539ba7d9115378e2db_li_104\" id=\"30824f9b63253c539ba7d9115378e2db_li_104\"><span data-lake-id=\"u5f04207c\" id=\"u5f04207c\">父类的构造方法在子类构造方法体开始执行的位置调用</span></li></ol><ol list=\"u9ddd20be\" start=\"2\"><li fid=\"u3df99a40\" data-lake-id=\"02d67090e5196c395c5cc7636dad33aa_li_105\" id=\"02d67090e5196c395c5cc7636dad33aa_li_105\"><span data-lake-id=\"u12506e48\" id=\"u12506e48\">如果有初始化列表，初始化列表会在父类构造方法之前执行</span></li></ol><p data-lake-id=\"f7dab119a6de9c02eceeeaa20c58303b_p_299\" id=\"f7dab119a6de9c02eceeeaa20c58303b_p_299\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22dart%22%2C%22code%22%3A%22void%20main()%20%7B%5Cn%20%20var%20student%20%3D%20new%20Student(%5C%22Tom%5C%22%2C%20%5C%22Male%5C%22)%3B%5Cn%20%20print(student.name)%3B%5Cn%7D%5Cnclass%20Person%20%7B%5Cn%20%20String%20name%3B%5Cn%20%20Person(this.name)%3B%5Cn%20%20Person.withName(this.name)%3B%5Cn%7D%5Cnclass%20Student%20extends%20Person%20%7B%5Cn%20%20int%20age%3B%5Cn%20%20final%20String%20gender%3B%5Cn%2F%2F%20%20Student(String%20name)%20%3A%20super(name)%3B%5Cn%20%20%2F%2F%20%E5%88%9D%E5%A7%8B%E5%8C%96%E5%88%97%E8%A1%A8%E5%BF%85%E9%A1%BB%E6%94%BE%E5%9C%A8%E6%98%BE%E7%A4%BA%E8%B0%83%E7%94%A8%E7%88%B6%E7%B1%BB%E6%9E%84%E9%80%A0%E6%96%B9%E6%B3%95%E7%9A%84%E5%89%8D%E9%9D%A2%5Cn%20%20Student(String%20name%2C%20String%20genderName)%20%3A%20gender%20%3D%20genderName%2C%20super.withName(name)%3B%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22a54523c7%22%7D\"></card><p data-lake-id=\"3b1704c33fc6d6f8a8da83e196debd0d_p_300\" id=\"3b1704c33fc6d6f8a8da83e196debd0d_p_300\"><br></p><h3 data-lake-id=\"7fc58712\" id=\"7fc58712\"><span data-lake-id=\"u0b1bb4b4\" id=\"u0b1bb4b4\">9.3 抽象类</span></h3><p data-lake-id=\"7fcd20ea8e49dccbe59daa613949d790_p_301\" id=\"7fcd20ea8e49dccbe59daa613949d790_p_301\"><br></p><ol list=\"u5ca81bbe\"><li fid=\"u971306c0\" data-lake-id=\"41fd3bf87627d65866bf92941cd574e3_li_106\" id=\"41fd3bf87627d65866bf92941cd574e3_li_106\"><span data-lake-id=\"uc836be9c\" id=\"uc836be9c\">抽象类使用关键字 </span><code data-lake-id=\"uecc21bc4\" id=\"uecc21bc4\"><span data-lake-id=\"u3f60f9d8\" id=\"u3f60f9d8\">abstract</span></code><span data-lake-id=\"u32255fa7\" id=\"u32255fa7\"> 表示，不能直接被实例化</span></li></ol><ol list=\"ud149ada6\" start=\"2\"><li fid=\"ue0a6f03d\" data-lake-id=\"5f3c53c853d8deeb2fc28ee4fcc1f448_li_107\" id=\"5f3c53c853d8deeb2fc28ee4fcc1f448_li_107\"><span data-lake-id=\"uac845267\" id=\"uac845267\">抽象方法不用 </span><code data-lake-id=\"u2a581943\" id=\"u2a581943\"><span data-lake-id=\"ub2ac311b\" id=\"ub2ac311b\">abstract</span></code><span data-lake-id=\"u78289a2d\" id=\"u78289a2d\"> 修饰，无实现</span></li></ol><ol list=\"u325ae2ed\" start=\"3\"><li fid=\"u80cefe86\" data-lake-id=\"480cd42eca8f685182d4e26287de175a_li_108\" id=\"480cd42eca8f685182d4e26287de175a_li_108\"><span data-lake-id=\"uf1cdb93f\" id=\"uf1cdb93f\">抽象类可以没有抽象方法</span></li></ol><ol list=\"u2618c8c7\" start=\"4\"><li fid=\"u3e377e9c\" data-lake-id=\"3c15fb1d7aaaf46dee81f3492f81b226_li_109\" id=\"3c15fb1d7aaaf46dee81f3492f81b226_li_109\"><span data-lake-id=\"u681b1f6e\" id=\"u681b1f6e\">有抽象方法的类一定得声明为抽象类</span></li></ol><p data-lake-id=\"97a3a563936e81f5bef06c12d11ccafb_p_302\" id=\"97a3a563936e81f5bef06c12d11ccafb_p_302\"><br></p><p data-lake-id=\"32418971d5e631b9940f4ead09ebdb21_p_303\" id=\"32418971d5e631b9940f4ead09ebdb21_p_303\"><span data-lake-id=\"uf00162c1\" id=\"uf00162c1\">抽象类更多用来作为接口使用</span></p><p data-lake-id=\"19e2a238dbc7e25bbba74d975405d802_p_304\" id=\"19e2a238dbc7e25bbba74d975405d802_p_304\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22dart%22%2C%22code%22%3A%22void%20main()%20%7B%5Cn%20%20var%20person%20%3D%20new%20Student()%3B%5Cn%20%20person.run()%3B%5Cn%7D%5Cnabstract%20class%20Person%20%7B%5Cn%20%20void%20run()%3B%5Cn%7D%5Cnclass%20Student%20extends%20Person%20%7B%5Cn%20%20%40override%5Cn%20%20void%20run()%20%7B%5Cn%20%20%20%20print(%5C%22run...%5C%22)%3B%5Cn%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%222a8264a1%22%7D\"></card><p data-lake-id=\"8a0b3cc3ee29e653e154dc38bee23f35_p_305\" id=\"8a0b3cc3ee29e653e154dc38bee23f35_p_305\"><br></p><h3 data-lake-id=\"08f04307\" id=\"08f04307\"><span data-lake-id=\"u4ad8cab7\" id=\"u4ad8cab7\">9.4 接口</span></h3><p data-lake-id=\"287a7991d15a9423698de5405daff209_p_306\" id=\"287a7991d15a9423698de5405daff209_p_306\"><br></p><ol list=\"u3da838f5\"><li fid=\"u1dcaee88\" data-lake-id=\"d81d35b056fd412c9308d956b09483ae_li_110\" id=\"d81d35b056fd412c9308d956b09483ae_li_110\"><span data-lake-id=\"uef77a430\" id=\"uef77a430\">在 </span><code data-lake-id=\"uf92f1c82\" id=\"uf92f1c82\"><span data-lake-id=\"ub46aec2c\" id=\"ub46aec2c\">dart</span></code><span data-lake-id=\"u9ac885fd\" id=\"u9ac885fd\"> 中，类和接口是统一的，类就是接口</span></li></ol><ol list=\"u1c30147f\" start=\"2\"><li fid=\"u160e1cc8\" data-lake-id=\"b79a525d836fabf9188863a060278be5_li_111\" id=\"b79a525d836fabf9188863a060278be5_li_111\"><span data-lake-id=\"u3f9806b3\" id=\"u3f9806b3\">每个类都隐式的定义了一个包含所有实例成员的接口</span></li></ol><ol list=\"ubc814037\" start=\"3\"><li fid=\"u62cb599a\" data-lake-id=\"2a0970b0f2e6eb64d9299dadf63bc7e2_li_112\" id=\"2a0970b0f2e6eb64d9299dadf63bc7e2_li_112\"><span data-lake-id=\"ufc66669c\" id=\"ufc66669c\">如果是复用已有类的实现，使用继承（</span><code data-lake-id=\"u6cf17d6c\" id=\"u6cf17d6c\"><span data-lake-id=\"uad831e68\" id=\"uad831e68\">extends</span></code><span data-lake-id=\"u4ccec895\" id=\"u4ccec895\">）</span></li></ol><ol list=\"ue39ca913\" start=\"4\"><li fid=\"u78402bd6\" data-lake-id=\"489f7e97148cf7ab74e5b2e2f03bfded_li_113\" id=\"489f7e97148cf7ab74e5b2e2f03bfded_li_113\"><span data-lake-id=\"u88182c0c\" id=\"u88182c0c\">如果只是使用已有类的外在行为(一些行为)，则使用接口（</span><code data-lake-id=\"u1708a5ab\" id=\"u1708a5ab\"><span data-lake-id=\"u91a81073\" id=\"u91a81073\">implements</span></code><span data-lake-id=\"ubaedd77f\" id=\"ubaedd77f\">）</span></li></ol><p data-lake-id=\"6e083a5926a9936a23902c87e04b4686_p_307\" id=\"6e083a5926a9936a23902c87e04b4686_p_307\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22dart%22%2C%22code%22%3A%22void%20main()%20%7B%5Cn%20%20var%20student%20%3D%20new%20Student()%3B%5Cn%7D%5Cnclass%20Person%20%7B%5Cn%20%20String%20name%3B%5Cn%20%20int%20get%20age%20%3D%3E%2018%3B%5Cn%20%20void%20run()%20%7B%5Cn%20%20%20%20print(%5C%22Person%20run...%5C%22)%3B%5Cn%20%20%7D%5Cn%7D%5Cnclass%20Student%20implements%20Person%20%7B%5Cn%20%20%40override%5Cn%20%20String%20name%3B%5Cn%5Cn%20%20%40override%5Cn%20%20%2F%2F%20TODO%3A%20implement%20age%5Cn%20%20int%20get%20age%20%3D%3E%2015%3B%5Cn%5Cn%20%20%40override%5Cn%20%20void%20run()%20%7B%5Cn%20%20%20%20%2F%2F%20TODO%3A%20implement%20run%5Cn%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%2246d3911d%22%7D\"></card><p data-lake-id=\"711fcb79bc202f54137cc04fb6a12e2c_p_308\" id=\"711fcb79bc202f54137cc04fb6a12e2c_p_308\"><br></p><ul list=\"u73f122a8\"><li fid=\"uaf07916c\" data-lake-id=\"86bcc2305929b3e26eee22f26724b85e_li_114\" id=\"86bcc2305929b3e26eee22f26724b85e_li_114\"><span data-lake-id=\"uf3c022cb\" id=\"uf3c022cb\">更好的写法，利用抽象类</span></li></ul><p data-lake-id=\"0375f6a488aa68e79b4a160ec7f8fa4d_p_309\" id=\"0375f6a488aa68e79b4a160ec7f8fa4d_p_309\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22dart%22%2C%22code%22%3A%22void%20main()%20%7B%5Cn%20%20var%20student%20%3D%20new%20Student()%3B%5Cn%20%20student.run()%3B%5Cn%7D%5Cnabstract%20class%20Person%20%7B%5Cn%20%20void%20run()%3B%5Cn%7D%5Cnclass%20Student%20implements%20Person%20%7B%5Cn%20%20%40override%5Cn%20%20void%20run()%20%7B%5Cn%20%20%20%20print(%5C%22Student%20run...%5C%22)%3B%5Cn%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22e985592d%22%7D\"></card><p data-lake-id=\"a56b84e031e02e5715ff0d6aadb83c0e_p_310\" id=\"a56b84e031e02e5715ff0d6aadb83c0e_p_310\"><br></p><h3 data-lake-id=\"cc3f95f0\" id=\"cc3f95f0\"><span data-lake-id=\"ue2076897\" id=\"ue2076897\">9.5 </span><code data-lake-id=\"u8cd9625f\" id=\"u8cd9625f\"><span data-lake-id=\"u0bc5d869\" id=\"u0bc5d869\">Mixins</span></code></h3><p data-lake-id=\"1539b3e1473877a8fdb76e7e9fab2f17_p_311\" id=\"1539b3e1473877a8fdb76e7e9fab2f17_p_311\"><br></p><ol list=\"uaae7aa0e\"><li fid=\"ue06d1445\" data-lake-id=\"397aef9b56499c9ee867cfc0fb371f9e_li_115\" id=\"397aef9b56499c9ee867cfc0fb371f9e_li_115\"><code data-lake-id=\"uc740c58e\" id=\"uc740c58e\"><span data-lake-id=\"u03745be2\" id=\"u03745be2\">Mixins</span></code><span data-lake-id=\"u059f3836\" id=\"u059f3836\"> 类似于多继承，是在多类继承中重用一个类代码的方式</span></li></ol><p data-lake-id=\"f5c413e64e1bf60658b94f4d5ffba94d_p_312\" id=\"f5c413e64e1bf60658b94f4d5ffba94d_p_312\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22dart%22%2C%22code%22%3A%22void%20main()%20%7B%5Cn%20%20var%20d%20%3D%20new%20D()%3B%5Cn%20%20d.a()%3B%5Cn%20%20d.b()%3B%5Cn%20%20d.c()%3B%5Cn%7D%5Cn%5Cnclass%20A%20%7B%5Cn%20%20void%20a()%20%7B%5Cn%20%20%20%20print(%5C%22A.a()...%5C%22)%3B%5Cn%20%20%7D%5Cn%7D%5Cnclass%20B%20%7B%5Cn%20%20void%20a()%20%7B%5Cn%20%20%20%20print(%5C%22B.a()...%5C%22)%3B%5Cn%20%20%7D%5Cn%20%20void%20b()%20%7B%5Cn%20%20%20%20print(%5C%22B.b()...%5C%22)%3B%5Cn%20%20%7D%5Cn%7D%5Cnclass%20C%20%7B%5Cn%20%20void%20a()%20%7B%5Cn%20%20%20%20print(%5C%22C.a()...%5C%22)%3B%5Cn%20%20%7D%5Cn%20%20void%20b()%20%7B%5Cn%20%20%20%20print(%5C%22C.b()...%5C%22)%3B%5Cn%20%20%7D%5Cn%20%20void%20c()%20%7B%5Cn%20%20%20%20print(%5C%22C.c()...%5C%22)%3B%5Cn%20%20%7D%5Cn%7D%5Cn%2F%2F%20%E5%BF%85%E9%A1%BB%E5%85%88%E6%9C%89%E7%BB%A7%E6%89%BF%EF%BC%8C%E6%89%8D%E8%83%BD%E4%BD%BF%E7%94%A8%20Mixins%EF%BC%9B%E5%A6%82%E6%9E%9C%E4%BD%BF%E7%94%A8%20Mixins%20%E7%9A%84%E5%87%A0%E4%B8%AA%E7%B1%BB%E4%B8%AD%E6%9C%89%E7%9B%B8%E5%90%8C%E7%9A%84%E6%96%B9%E6%B3%95%EF%BC%8C%E5%88%99%E5%A4%84%E4%BA%8E%E6%9C%80%E5%90%8E%E4%B8%80%E4%B8%AA%E7%9A%84%E6%96%B9%E6%B3%95%E4%BC%98%E5%85%88%E8%A2%AB%E8%B0%83%E7%94%A8%5Cnclass%20D%20extends%20A%20with%20B%2C%20C%20%7B%5Cn%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%2215716d08%22%7D\"></card><p data-lake-id=\"8ed534170f3ad30be7425327269966a1_p_313\" id=\"8ed534170f3ad30be7425327269966a1_p_313\"><br></p><ol list=\"u673371e7\" start=\"2\"><li fid=\"u9c55edfa\" data-lake-id=\"20e4f6f1ff3e3b87360f3b4d36446512_li_116\" id=\"20e4f6f1ff3e3b87360f3b4d36446512_li_116\"><span data-lake-id=\"u149801da\" id=\"u149801da\">作为 </span><code data-lake-id=\"u4dafbc94\" id=\"u4dafbc94\"><span data-lake-id=\"ucdb7dab1\" id=\"ucdb7dab1\">Mixin</span></code><span data-lake-id=\"ue863a26c\" id=\"ue863a26c\"> 的类不能有显示声明构造方法</span></li></ol><ol list=\"u60935ffd\" start=\"3\"><li fid=\"u31979459\" data-lake-id=\"29ccd03d31de2c030f3fbf3b6f3bc2da_li_117\" id=\"29ccd03d31de2c030f3fbf3b6f3bc2da_li_117\"><span data-lake-id=\"u8cc5f58b\" id=\"u8cc5f58b\">作为 </span><code data-lake-id=\"u9100751c\" id=\"u9100751c\"><span data-lake-id=\"u452727b4\" id=\"u452727b4\">Mixin</span></code><span data-lake-id=\"u3d153aca\" id=\"u3d153aca\"> 的类只能继承自 </span><code data-lake-id=\"u63fceea6\" id=\"u63fceea6\"><span data-lake-id=\"u94369e64\" id=\"u94369e64\">Object</span></code></li></ol><ol list=\"u48a6e145\" start=\"4\"><li fid=\"u4df3bd21\" data-lake-id=\"25a3f8ad808fd9a95a5ff9e3e857ce33_li_118\" id=\"25a3f8ad808fd9a95a5ff9e3e857ce33_li_118\"><span data-lake-id=\"ua704dd69\" id=\"ua704dd69\">使用关键字 </span><code data-lake-id=\"u84d7d6c6\" id=\"u84d7d6c6\"><span data-lake-id=\"uf278d075\" id=\"uf278d075\">with</span></code><span data-lake-id=\"ue5e7daa3\" id=\"ue5e7daa3\"> 连接一个或多个 </span><code data-lake-id=\"u80a93cbe\" id=\"u80a93cbe\"><span data-lake-id=\"u12215437\" id=\"u12215437\">Mixin</span></code></li></ol><p data-lake-id=\"723be51dabd620a0060235545593c061_p_314\" id=\"723be51dabd620a0060235545593c061_p_314\"><br></p><p data-lake-id=\"8f8c79ef270c639ad317f5c6e2b64281_p_315\" id=\"8f8c79ef270c639ad317f5c6e2b64281_p_315\"><span data-lake-id=\"u37be5311\" id=\"u37be5311\">如果是由其它类组装而来的，没有自己的属性或方法，则可以简写</span></p><p data-lake-id=\"024a8421e8afb441225906c83320d8b8_p_316\" id=\"024a8421e8afb441225906c83320d8b8_p_316\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22dart%22%2C%22code%22%3A%22void%20main()%20%7B%5Cn%5Cn%7D%5Cnabstract%20class%20Engine%20%7B%5Cn%20%20void%20work()%3B%5Cn%7D%5Cnclass%20OilEngine%20implements%20Engine%20%7B%5Cn%20%20%40override%5Cn%20%20void%20work()%20%7B%5Cn%20%20%20%20print(%5C%22Work%20with%20qil...%5C%22)%3B%5Cn%20%20%7D%5Cn%7D%5Cnclass%20ElectricEngine%20implements%20Engine%20%7B%5Cn%20%20%40override%5Cn%20%20void%20work()%20%7B%5Cn%20%20%20%20print(%5C%22Work%20with%20electric...%5C%22)%3B%5Cn%20%20%7D%5Cn%7D%5Cnclass%20Tyre%20%7B%5Cn%20%20String%20name%3B%5Cn%20%20void%20run()%20%7B%7D%5Cn%7D%5Cn%2F%2F%20%E5%A6%82%E6%9E%9C%E6%98%AF%E7%94%B1%E5%85%B6%E5%AE%83%E7%B1%BB%E7%BB%84%E8%A3%85%E8%80%8C%E6%9D%A5%E7%9A%84%EF%BC%8C%E6%B2%A1%E6%9C%89%E8%87%AA%E5%B7%B1%E7%9A%84%E5%B1%9E%E6%80%A7%E6%88%96%E6%96%B9%E6%B3%95%EF%BC%8C%E5%88%99%E5%8F%AF%E4%BB%A5%E7%AE%80%E5%86%99%5Cnclass%20Car%20%3D%20Tyre%20with%20ElectricEngine%3B%5Cn%2F%2F%20%E5%AE%8C%E6%95%B4%E5%86%99%E6%B3%95%5Cn%2F%2Fclass%20Car%20extends%20Tyre%20with%20ElectricEngine%20%7B%7D%5Cnclass%20Bus%20%3D%20Tyre%20with%20OilEngine%3B%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22dc394d0d%22%7D\"></card><p data-lake-id=\"7a2d0c77d4747b965eb8ad5f6277e1bb_p_317\" id=\"7a2d0c77d4747b965eb8ad5f6277e1bb_p_317\"><br></p><h3 data-lake-id=\"13db85ad\" id=\"13db85ad\"><span data-lake-id=\"u1596a34d\" id=\"u1596a34d\">9.6 操作符覆写(重载运算符/运算符重载)</span></h3><p data-lake-id=\"10c43070f7361810f0a11bc380b5c8d3_p_318\" id=\"10c43070f7361810f0a11bc380b5c8d3_p_318\"><br></p><ol list=\"ue91a5ea3\"><li fid=\"u28aeb917\" data-lake-id=\"159301a2d0382eedf9903cfeb63f3872_li_119\" id=\"159301a2d0382eedf9903cfeb63f3872_li_119\"><span data-lake-id=\"uee6dc075\" id=\"uee6dc075\">覆写操作符需要在类中定义</span></li></ol><p data-lake-id=\"4f67f2156dee24fd9a5d4af3856a8608_p_319\" id=\"4f67f2156dee24fd9a5d4af3856a8608_p_319\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22dart%22%2C%22code%22%3A%22%E8%BF%94%E5%9B%9E%E7%B1%BB%E5%9E%8B%20operator%20%E6%93%8D%E4%BD%9C%E7%AC%A6%20(%E5%8F%82%E6%95%B01%2C%20%E5%8F%82%E6%95%B02%2C%20...)%20%7B%5Cn%20%20%20%20%E5%AE%9E%E7%8E%B0%E4%BD%93...%5Cn%20%20%20%20return%20%E8%BF%94%E5%9B%9E%E5%80%BC%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%2214ee5233%22%7D\"></card><p data-lake-id=\"d7deb648382d2e3c8fc5570428e67bdf_p_320\" id=\"d7deb648382d2e3c8fc5570428e67bdf_p_320\"><br></p><ol list=\"u1436dd2d\" start=\"2\"><li fid=\"ua9f91005\" data-lake-id=\"931f7d67ddff31666cc42f774b68277a_li_120\" id=\"931f7d67ddff31666cc42f774b68277a_li_120\"><span data-lake-id=\"u8a6a4622\" id=\"u8a6a4622\">如果覆写 </span><code data-lake-id=\"u7fc85721\" id=\"u7fc85721\"><span data-lake-id=\"u087ab817\" id=\"u087ab817\">==</span></code><span data-lake-id=\"ue8d7e001\" id=\"ue8d7e001\"> ，还需要覆写对象的 </span><code data-lake-id=\"uc9509582\" id=\"uc9509582\"><span data-lake-id=\"u3e9e1385\" id=\"u3e9e1385\">hashCode</span></code><span data-lake-id=\"ud1a780d5\" id=\"ud1a780d5\"> </span><code data-lake-id=\"u65ba0d25\" id=\"u65ba0d25\"><span data-lake-id=\"u4db0373a\" id=\"u4db0373a\">getter</span></code><span data-lake-id=\"ueea7c4e7\" id=\"ueea7c4e7\"> 方法</span></li></ol><ol list=\"uec655a55\" start=\"3\"><li fid=\"u7da9be0e\" data-lake-id=\"f3e19ddc3719ac1d90f0900519163aee_li_121\" id=\"f3e19ddc3719ac1d90f0900519163aee_li_121\"><span data-lake-id=\"u7aa045ce\" id=\"u7aa045ce\">可覆写的操作符</span></li></ol><card type=\"block\" name=\"table\" value=\"data:%7B%22id%22%3A%22589657d9%22%2C%22rows%22%3A5%2C%22cols%22%3A4%2C%22html%22%3A%22%3Ctable%20data-lake-id%3D%5C%22589657d9%5C%22%20id%3D%5C%22589657d9%5C%22%20class%3D%5C%22lake-table%5C%22%20style%3D%5C%22width%3A%20748px%5C%22%3E%3Ccolgroup%3E%3Ccol%20width%3D%5C%22187%5C%22%3E%3Ccol%20width%3D%5C%22187%5C%22%3E%3Ccol%20width%3D%5C%22187%5C%22%3E%3Ccol%20width%3D%5C%22187%5C%22%3E%3C%2Fcolgroup%3E%3Ctbody%3E%3Ctr%20data-lake-id%3D%5C%22uad89781e%5C%22%20id%3D%5C%22uad89781e%5C%22%3E%3Ctd%20data-lake-id%3D%5C%22u36634dc1%5C%22%20id%3D%5C%22u36634dc1%5C%22%3E%3Cp%20data-lake-id%3D%5C%22ufd9a1165%5C%22%20id%3D%5C%22ufd9a1165%5C%22%20style%3D%5C%22text-align%3A%20left%5C%22%3E%3Cem%3E%3Cstrong%3E%3Cspan%20data-lake-id%3D%5C%22u4b225080%5C%22%20id%3D%5C%22u4b225080%5C%22%3E%26lt%3B%3C%2Fspan%3E%3C%2Fstrong%3E%3C%2Fem%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20data-lake-id%3D%5C%22u28d363d5%5C%22%20id%3D%5C%22u28d363d5%5C%22%3E%3Cp%20data-lake-id%3D%5C%22u314356df%5C%22%20id%3D%5C%22u314356df%5C%22%20style%3D%5C%22text-align%3A%20left%5C%22%3E%3Cem%3E%3Cstrong%3E%3Cspan%20data-lake-id%3D%5C%22uc8400bdf%5C%22%20id%3D%5C%22uc8400bdf%5C%22%3E%2B%3C%2Fspan%3E%3C%2Fstrong%3E%3C%2Fem%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20data-lake-id%3D%5C%22uf0d668f2%5C%22%20id%3D%5C%22uf0d668f2%5C%22%3E%3Cp%20data-lake-id%3D%5C%22u3697954c%5C%22%20id%3D%5C%22u3697954c%5C%22%20style%3D%5C%22text-align%3A%20left%5C%22%3E%3Cem%3E%3Cstrong%3E%3Cspan%20data-lake-id%3D%5C%22uc6eaa022%5C%22%20id%3D%5C%22uc6eaa022%5C%22%3E%7C%3C%2Fspan%3E%3C%2Fstrong%3E%3C%2Fem%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20data-lake-id%3D%5C%22u8b50b897%5C%22%20id%3D%5C%22u8b50b897%5C%22%3E%3Cp%20data-lake-id%3D%5C%22u637fe1a4%5C%22%20id%3D%5C%22u637fe1a4%5C%22%20style%3D%5C%22text-align%3A%20left%5C%22%3E%3Cem%3E%3Cstrong%3E%3Cspan%20data-lake-id%3D%5C%22u7f5e43d2%5C%22%20id%3D%5C%22u7f5e43d2%5C%22%3E%5B%5D%3C%2Fspan%3E%3C%2Fstrong%3E%3C%2Fem%3E%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%20data-lake-id%3D%5C%22u9e32f93b%5C%22%20id%3D%5C%22u9e32f93b%5C%22%3E%3Ctd%20data-lake-id%3D%5C%22ud82bc1ec%5C%22%20id%3D%5C%22ud82bc1ec%5C%22%3E%3Cp%20data-lake-id%3D%5C%22u02cb827a%5C%22%20id%3D%5C%22u02cb827a%5C%22%20style%3D%5C%22text-align%3A%20left%5C%22%3E%3Cem%3E%3Cstrong%3E%3Cspan%20data-lake-id%3D%5C%22ua04d718c%5C%22%20id%3D%5C%22ua04d718c%5C%22%3E%26gt%3B%3C%2Fspan%3E%3C%2Fstrong%3E%3C%2Fem%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20data-lake-id%3D%5C%22u6cd22f70%5C%22%20id%3D%5C%22u6cd22f70%5C%22%3E%3Cp%20data-lake-id%3D%5C%22u9687a534%5C%22%20id%3D%5C%22u9687a534%5C%22%20style%3D%5C%22text-align%3A%20left%5C%22%3E%3Cem%3E%3Cstrong%3E%3Cspan%20data-lake-id%3D%5C%22u4c4a16fd%5C%22%20id%3D%5C%22u4c4a16fd%5C%22%3E%2F%3C%2Fspan%3E%3C%2Fstrong%3E%3C%2Fem%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20data-lake-id%3D%5C%22u11e252fd%5C%22%20id%3D%5C%22u11e252fd%5C%22%3E%3Cp%20data-lake-id%3D%5C%22ue01fbf78%5C%22%20id%3D%5C%22ue01fbf78%5C%22%20style%3D%5C%22text-align%3A%20left%5C%22%3E%3Cem%3E%3Cstrong%3E%3Cspan%20data-lake-id%3D%5C%22u9e09796e%5C%22%20id%3D%5C%22u9e09796e%5C%22%3E%5E%3C%2Fspan%3E%3C%2Fstrong%3E%3C%2Fem%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20data-lake-id%3D%5C%22ueead13b5%5C%22%20id%3D%5C%22ueead13b5%5C%22%3E%3Cp%20data-lake-id%3D%5C%22u21be8106%5C%22%20id%3D%5C%22u21be8106%5C%22%20style%3D%5C%22text-align%3A%20left%5C%22%3E%3Cem%3E%3Cstrong%3E%3Cspan%20data-lake-id%3D%5C%22u44c441b3%5C%22%20id%3D%5C%22u44c441b3%5C%22%3E%5B%5D%3D%3C%2Fspan%3E%3C%2Fstrong%3E%3C%2Fem%3E%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%20data-lake-id%3D%5C%22u5042c2b5%5C%22%20id%3D%5C%22u5042c2b5%5C%22%3E%3Ctd%20data-lake-id%3D%5C%22u7c2a2dab%5C%22%20id%3D%5C%22u7c2a2dab%5C%22%3E%3Cp%20data-lake-id%3D%5C%22u022afaca%5C%22%20id%3D%5C%22u022afaca%5C%22%20style%3D%5C%22text-align%3A%20left%5C%22%3E%3Cem%3E%3Cstrong%3E%3Cspan%20data-lake-id%3D%5C%22u22d63cdf%5C%22%20id%3D%5C%22u22d63cdf%5C%22%3E%26lt%3B%3D%3C%2Fspan%3E%3C%2Fstrong%3E%3C%2Fem%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20data-lake-id%3D%5C%22u22a2c2ab%5C%22%20id%3D%5C%22u22a2c2ab%5C%22%3E%3Cp%20data-lake-id%3D%5C%22ubcb1da3f%5C%22%20id%3D%5C%22ubcb1da3f%5C%22%20style%3D%5C%22text-align%3A%20left%5C%22%3E%3Cem%3E%3Cstrong%3E%3Cspan%20data-lake-id%3D%5C%22u578205ca%5C%22%20id%3D%5C%22u578205ca%5C%22%3E~%2F%3C%2Fspan%3E%3C%2Fstrong%3E%3C%2Fem%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20data-lake-id%3D%5C%22u27e4a148%5C%22%20id%3D%5C%22u27e4a148%5C%22%3E%3Cp%20data-lake-id%3D%5C%22u3c7d48f2%5C%22%20id%3D%5C%22u3c7d48f2%5C%22%20style%3D%5C%22text-align%3A%20left%5C%22%3E%3Cem%3E%3Cstrong%3E%3Cspan%20data-lake-id%3D%5C%22u4a7ae0df%5C%22%20id%3D%5C%22u4a7ae0df%5C%22%3E%26amp%3B%3C%2Fspan%3E%3C%2Fstrong%3E%3C%2Fem%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20data-lake-id%3D%5C%22u989fdcbb%5C%22%20id%3D%5C%22u989fdcbb%5C%22%3E%3Cp%20data-lake-id%3D%5C%22u1f18bb45%5C%22%20id%3D%5C%22u1f18bb45%5C%22%20style%3D%5C%22text-align%3A%20left%5C%22%3E%3Cem%3E%3Cstrong%3E%3Cspan%20data-lake-id%3D%5C%22u4798f1a9%5C%22%20id%3D%5C%22u4798f1a9%5C%22%3E~%3C%2Fspan%3E%3C%2Fstrong%3E%3C%2Fem%3E%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%20data-lake-id%3D%5C%22u3f29fe3f%5C%22%20id%3D%5C%22u3f29fe3f%5C%22%3E%3Ctd%20data-lake-id%3D%5C%22u72b62288%5C%22%20id%3D%5C%22u72b62288%5C%22%3E%3Cp%20data-lake-id%3D%5C%22u6982d547%5C%22%20id%3D%5C%22u6982d547%5C%22%20style%3D%5C%22text-align%3A%20left%5C%22%3E%3Cem%3E%3Cstrong%3E%3Cspan%20data-lake-id%3D%5C%22u37f4d1d0%5C%22%20id%3D%5C%22u37f4d1d0%5C%22%3E%26gt%3B%3D%3C%2Fspan%3E%3C%2Fstrong%3E%3C%2Fem%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20data-lake-id%3D%5C%22ufefefdd0%5C%22%20id%3D%5C%22ufefefdd0%5C%22%3E%3Cp%20data-lake-id%3D%5C%22u8af9c0f5%5C%22%20id%3D%5C%22u8af9c0f5%5C%22%20style%3D%5C%22text-align%3A%20left%5C%22%3E%3Cem%3E%3Cstrong%3E%3Cspan%20data-lake-id%3D%5C%22u9ec7227e%5C%22%20id%3D%5C%22u9ec7227e%5C%22%3E*%3C%2Fspan%3E%3C%2Fstrong%3E%3C%2Fem%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20data-lake-id%3D%5C%22ubd1fa40c%5C%22%20id%3D%5C%22ubd1fa40c%5C%22%3E%3Cp%20data-lake-id%3D%5C%22u941fc1d8%5C%22%20id%3D%5C%22u941fc1d8%5C%22%20style%3D%5C%22text-align%3A%20left%5C%22%3E%3Cem%3E%3Cstrong%3E%3Cspan%20data-lake-id%3D%5C%22ua045b990%5C%22%20id%3D%5C%22ua045b990%5C%22%3E%26lt%3B%26lt%3B%3C%2Fspan%3E%3C%2Fstrong%3E%3C%2Fem%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20data-lake-id%3D%5C%22u39fd325d%5C%22%20id%3D%5C%22u39fd325d%5C%22%3E%3Cp%20data-lake-id%3D%5C%22uea73f148%5C%22%20id%3D%5C%22uea73f148%5C%22%20style%3D%5C%22text-align%3A%20left%5C%22%3E%3Cem%3E%3Cstrong%3E%3Cspan%20data-lake-id%3D%5C%22uf3e1712d%5C%22%20id%3D%5C%22uf3e1712d%5C%22%3E%3D%3D%3C%2Fspan%3E%3C%2Fstrong%3E%3C%2Fem%3E%3C%2Fp%3E%3C%2Ftd%3E%3C%2Ftr%3E%3Ctr%20data-lake-id%3D%5C%22ubc865eb2%5C%22%20id%3D%5C%22ubc865eb2%5C%22%3E%3Ctd%20data-lake-id%3D%5C%22uee511ad9%5C%22%20id%3D%5C%22uee511ad9%5C%22%3E%3Cp%20data-lake-id%3D%5C%22u988e412c%5C%22%20id%3D%5C%22u988e412c%5C%22%20style%3D%5C%22text-align%3A%20left%5C%22%3E%3Cem%3E%3Cstrong%3E%3Cspan%20data-lake-id%3D%5C%22ua3a68dc3%5C%22%20id%3D%5C%22ua3a68dc3%5C%22%3E-%3C%2Fspan%3E%3C%2Fstrong%3E%3C%2Fem%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20data-lake-id%3D%5C%22u05add691%5C%22%20id%3D%5C%22u05add691%5C%22%3E%3Cp%20data-lake-id%3D%5C%22u63510c35%5C%22%20id%3D%5C%22u63510c35%5C%22%20style%3D%5C%22text-align%3A%20left%5C%22%3E%3Cem%3E%3Cstrong%3E%3Cspan%20data-lake-id%3D%5C%22ufaba5bf4%5C%22%20id%3D%5C%22ufaba5bf4%5C%22%3E%25%3C%2Fspan%3E%3C%2Fstrong%3E%3C%2Fem%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20data-lake-id%3D%5C%22u22c1f331%5C%22%20id%3D%5C%22u22c1f331%5C%22%3E%3Cp%20data-lake-id%3D%5C%22ud6736d51%5C%22%20id%3D%5C%22ud6736d51%5C%22%20style%3D%5C%22text-align%3A%20left%5C%22%3E%3Cspan%20data-lake-id%3D%5C%22ub9fd6ab5%5C%22%20id%3D%5C%22ub9fd6ab5%5C%22%3E%26gt%3B%26gt%3B%3C%2Fspan%3E%3C%2Fp%3E%3C%2Ftd%3E%3Ctd%20data-lake-id%3D%5C%22ufc0b4deb%5C%22%20id%3D%5C%22ufc0b4deb%5C%22%3E%3C%2Ftd%3E%3C%2Ftr%3E%3C%2Ftbody%3E%3C%2Ftable%3E%22%2C%22margin%22%3Atrue%7D\"></card><p data-lake-id=\"386408b19add78b5d4538676e07dc69f_p_321\" id=\"386408b19add78b5d4538676e07dc69f_p_321\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22dart%22%2C%22code%22%3A%22void%20main()%20%7B%5Cn%20%20var%20person1%20%3D%20new%20Person(18)%3B%5Cn%20%20var%20person2%20%3D%20new%20Person(20)%3B%5Cn%20%20var%20person3%20%3D%20new%20Person(20)%3B%5Cn%20%20print(person1%20%3E%20person2)%3B%5Cn%20%20print(person1%5B%5C%22age%5C%22%5D)%3B%5Cn%20%20print(person2%20%3D%3D%20person3)%3B%5Cn%7D%5Cn%5Cnclass%20Person%20%7B%5Cn%20%20int%20age%3B%5Cn%20%20Person(this.age)%3B%5Cn%5Cn%20%20%2F%2F%20%E8%A6%86%E5%86%99%20%3E%5Cn%20%20bool%20operator%20%3E(Person%20person)%20%7B%5Cn%20%20%20%20return%20this.age%20%3E%20person.age%3B%5Cn%20%20%7D%5Cn%20%20%2F%2F%20%E8%A6%86%E5%86%99%20%5B%5D%5Cn%20%20int%20operator%20%5B%5D(String%20str)%20%7B%5Cn%20%20%20%20if(%5C%22age%5C%22%20%3D%3D%20str)%20%7B%5Cn%20%20%20%20%20%20return%20age%3B%5Cn%20%20%20%20%7D%5Cn%20%20%20%20return%200%3B%5Cn%20%20%7D%5Cn%20%20%2F%2F%20%E8%A6%86%E5%86%99%E7%AD%89%E5%8F%B7%EF%BC%8C%E9%87%8D%E5%86%99hashCode%EF%BC%8C%E5%8F%B3%E9%94%AE%E6%89%93%E5%BC%80generate%E9%80%89%E9%A1%B9%E7%84%B6%E5%90%8E%E9%80%89%E6%8B%A9%5Cn%20%20%40override%5Cn%20%20bool%20operator%20%3D%3D(Object%20other)%20%3D%3E%5Cn%20%20%20%20%20%20identical(this%2C%20other)%20%7C%7C%5Cn%20%20%20%20%20%20%20%20%20%20other%20is%20Person%20%26%26%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20runtimeType%20%3D%3D%20other.runtimeType%20%26%26%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20age%20%3D%3D%20other.age%3B%5Cn%5Cn%20%20%40override%5Cn%20%20int%20get%20hashCode%20%3D%3E%20age.hashCode%3B%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22ae3e4fb9%22%7D\"></card><p data-lake-id=\"73ec4e895ea3387f14965acf6166c09a_p_322\" id=\"73ec4e895ea3387f14965acf6166c09a_p_322\"><br></p><h2 data-lake-id=\"65d308b2\" id=\"65d308b2\"><span data-lake-id=\"uc4e7241a\" id=\"uc4e7241a\">十、枚举</span></h2><p data-lake-id=\"8a93c62f5bf11a8467b27277718204ed_p_323\" id=\"8a93c62f5bf11a8467b27277718204ed_p_323\"><br></p><ul list=\"ubb86ceab\"><li fid=\"u4fa226da\" data-lake-id=\"d2bd4251ccace6e00d7f31f03e164bd0_li_122\" id=\"d2bd4251ccace6e00d7f31f03e164bd0_li_122\"><span data-lake-id=\"ub42e91e0\" id=\"ub42e91e0\">枚举</span></li></ul><p data-lake-id=\"deca07778d4970b7e735a77c95d1efec_p_324\" id=\"deca07778d4970b7e735a77c95d1efec_p_324\"><br></p><ol list=\"u65afb8e9\"><li fid=\"u541df3d4\" data-lake-id=\"3b4cb8383e10f2fb13c3d1ad7f9cbf58_li_123\" id=\"3b4cb8383e10f2fb13c3d1ad7f9cbf58_li_123\"><span data-lake-id=\"u609a1bb1\" id=\"u609a1bb1\">枚举是一种有穷序列集的数据类型</span></li></ol><ol list=\"u783af0b7\" start=\"2\"><li fid=\"u0ae03219\" data-lake-id=\"1599e7995111277d4eabadcab3234621_li_124\" id=\"1599e7995111277d4eabadcab3234621_li_124\"><span data-lake-id=\"ud843d8d3\" id=\"ud843d8d3\">使用关键字 </span><code data-lake-id=\"ub3a4fa3d\" id=\"ub3a4fa3d\"><span data-lake-id=\"u95f89e42\" id=\"u95f89e42\">enum</span></code><span data-lake-id=\"u2bb0c749\" id=\"u2bb0c749\"> 定义一个枚举</span></li></ol><ol list=\"u20091dd1\" start=\"3\"><li fid=\"u298a6532\" data-lake-id=\"cd51041540e1a6b1150d4229137d1419_li_125\" id=\"cd51041540e1a6b1150d4229137d1419_li_125\"><span data-lake-id=\"u72a6e3b4\" id=\"u72a6e3b4\">常用于代替常量，控制语句等</span></li></ol><p data-lake-id=\"869206ecba3f946b7a6ba2e46f91db50_p_325\" id=\"869206ecba3f946b7a6ba2e46f91db50_p_325\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22dart%22%2C%22code%22%3A%22void%20main()%20%7B%5Cn%20%20var%20currentSeason%20%3D%20Season.spring%3B%5Cn%20%20print(currentSeason.index)%3B%5Cn%20%20switch(currentSeason)%20%7B%5Cn%20%20%20%20case%20Season.spring%3A%5Cn%20%20%20%20%20%20print(%5C%221-3%E6%9C%88%5C%22)%3B%5Cn%20%20%20%20%20%20break%3B%5Cn%20%20%20%20case%20Season.summer%3A%5Cn%20%20%20%20%20%20print(%5C%224-6%E6%9C%88%5C%22)%3B%5Cn%20%20%20%20%20%20break%3B%5Cn%20%20%20%20case%20Season.autumn%3A%5Cn%20%20%20%20%20%20print(%5C%227-9%E6%9C%88%5C%22)%3B%5Cn%20%20%20%20%20%20break%3B%5Cn%20%20%20%20case%20Season.winter%3A%5Cn%20%20%20%20%20%20print(%5C%2210-12%E6%9C%88%5C%22)%3B%5Cn%20%20%20%20%20%20break%3B%5Cn%20%20%7D%5Cn%7D%5Cnenum%20Season%20%7B%5Cn%20%20spring%2C%5Cn%20%20summer%2C%5Cn%20%20autumn%2C%5Cn%20%20winter%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%222e8b3bc7%22%7D\"></card><p data-lake-id=\"47a5f0c513179a8c0b441643872a29bd_p_326\" id=\"47a5f0c513179a8c0b441643872a29bd_p_326\"><br></p><ul list=\"u194eb202\"><li fid=\"u06fecc91\" data-lake-id=\"5822d4862081dd39ce4a7f4012d0a985_li_126\" id=\"5822d4862081dd39ce4a7f4012d0a985_li_126\"><code data-lake-id=\"uf15a9a91\" id=\"uf15a9a91\"><span data-lake-id=\"u49fe733f\" id=\"u49fe733f\">Dart</span></code><span data-lake-id=\"u502ef46f\" id=\"u502ef46f\"> 枚举特性</span></li></ul><p data-lake-id=\"1260835a1e832a2cbb7274deda8a76af_p_327\" id=\"1260835a1e832a2cbb7274deda8a76af_p_327\"><br></p><ol list=\"uc7f9a6ab\"><li fid=\"u88091628\" data-lake-id=\"4b7c9e5586daa1631a1a4b33283fe2ab_li_127\" id=\"4b7c9e5586daa1631a1a4b33283fe2ab_li_127\"><code data-lake-id=\"u183573d6\" id=\"u183573d6\"><span data-lake-id=\"u51884549\" id=\"u51884549\">index</span></code><span data-lake-id=\"ubbd48299\" id=\"ubbd48299\"> 从 </span><code data-lake-id=\"u44a5c048\" id=\"u44a5c048\"><span data-lake-id=\"ue56f87a4\" id=\"ue56f87a4\">0</span></code><span data-lake-id=\"ua6cfeeed\" id=\"ua6cfeeed\"> 开始，依次累加</span></li></ol><ol list=\"u8e8cc57d\" start=\"2\"><li fid=\"ua9aba8c7\" data-lake-id=\"239c258da39a5d926a220b7cefa6aeab_li_128\" id=\"239c258da39a5d926a220b7cefa6aeab_li_128\"><span data-lake-id=\"ufbedcc29\" id=\"ufbedcc29\">不能指定原始值</span></li></ol><ol list=\"ub9722bb1\" start=\"3\"><li fid=\"u8bc840da\" data-lake-id=\"43af6b45700c65b7614508cb0961bac1_li_129\" id=\"43af6b45700c65b7614508cb0961bac1_li_129\"><span data-lake-id=\"u52aaf074\" id=\"u52aaf074\">不能添加方法</span></li></ol><p data-lake-id=\"41eae880938c5eadbe95b939a2a3507a_p_328\" id=\"41eae880938c5eadbe95b939a2a3507a_p_328\"><br></p><h2 data-lake-id=\"8f5e2369\" id=\"8f5e2369\"><span data-lake-id=\"u18f5daf6\" id=\"u18f5daf6\">十一、泛型</span></h2><p data-lake-id=\"367e571e142935bde23beca7770f783a_p_329\" id=\"367e571e142935bde23beca7770f783a_p_329\"><br></p><ul list=\"u3183d035\"><li fid=\"ud23df727\" data-lake-id=\"75db1dffa12aff67c71dbd97610149b5_li_130\" id=\"75db1dffa12aff67c71dbd97610149b5_li_130\"><span data-lake-id=\"u3cc3f596\" id=\"u3cc3f596\">泛型</span></li></ul><p data-lake-id=\"fcbe9387308e2fc9a13c5e4c70f82087_p_330\" id=\"fcbe9387308e2fc9a13c5e4c70f82087_p_330\"><br></p><ol list=\"uad5a5b9d\"><li fid=\"u9263f2d7\" data-lake-id=\"4796b3d658a441993016bc5f15c0cd8f_li_131\" id=\"4796b3d658a441993016bc5f15c0cd8f_li_131\"><code data-lake-id=\"u56a68090\" id=\"u56a68090\"><span data-lake-id=\"u9532e049\" id=\"u9532e049\">Dart</span></code><span data-lake-id=\"ud62ac617\" id=\"ud62ac617\"> 中的类型是可选的，可使用泛型限定类型</span></li></ol><ol list=\"u942309df\" start=\"2\"><li fid=\"ub00a9c05\" data-lake-id=\"c9487d244be44f1ac17422dd4a03ee47_li_132\" id=\"c9487d244be44f1ac17422dd4a03ee47_li_132\"><span data-lake-id=\"uac5cac98\" id=\"uac5cac98\">使用泛型能够有效的减少代码重复</span></li></ol><p data-lake-id=\"df5870a4b055e4cd4943273fac462f51_p_331\" id=\"df5870a4b055e4cd4943273fac462f51_p_331\"><br></p><ul list=\"u40fd40a9\"><li fid=\"ub8d94a4e\" data-lake-id=\"3288cb0a807727c403a185e940426f75_li_133\" id=\"3288cb0a807727c403a185e940426f75_li_133\"><span data-lake-id=\"ub725a759\" id=\"ub725a759\">泛型的使用</span></li></ul><p data-lake-id=\"103e6bdcb2dcc51c8de25c5d976a9f93_p_332\" id=\"103e6bdcb2dcc51c8de25c5d976a9f93_p_332\"><br></p><ol list=\"ude65e877\"><li fid=\"uf96078ff\" data-lake-id=\"d0ed0dd82c573875fd8bb6c97957cdd9_li_134\" id=\"d0ed0dd82c573875fd8bb6c97957cdd9_li_134\"><span data-lake-id=\"ud7daefb3\" id=\"ud7daefb3\">类的泛型</span></li></ol><p data-lake-id=\"b4252b6b2deddfea7cfc17616ff2e148_p_333\" id=\"b4252b6b2deddfea7cfc17616ff2e148_p_333\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22dart%22%2C%22code%22%3A%22void%20main()%20%7B%5Cn%20%20var%20utils%20%3D%20new%20Utils%3CString%3E()%3B%5Cn%20%20utils.put(%5C%22element%5C%22)%3B%5Cn%7D%5Cnclass%20Utils%3CT%3E%20%7B%5Cn%20%20T%20element%3B%5Cn%20%20void%20put(T%20element)%20%7B%5Cn%20%20%20%20this.element%20%3D%20element%3B%5Cn%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22e6da918c%22%7D\"></card><p data-lake-id=\"d7e3387b899cd18519ad68c1e5005c09_p_334\" id=\"d7e3387b899cd18519ad68c1e5005c09_p_334\"><br></p><ol list=\"u4affddd7\" start=\"2\"><li fid=\"u27541156\" data-lake-id=\"66bc18383db18cb7bad90dea170a45e8_li_135\" id=\"66bc18383db18cb7bad90dea170a45e8_li_135\"><span data-lake-id=\"u44303f69\" id=\"u44303f69\">方法的泛型</span></li></ol><p data-lake-id=\"848d57ddbbb6aa5c588defcda9c65bc0_p_335\" id=\"848d57ddbbb6aa5c588defcda9c65bc0_p_335\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22dart%22%2C%22code%22%3A%22void%20main()%20%7B%5Cn%20%20var%20utils%20%3D%20new%20Utils()%3B%5Cn%20%20utils.put%3CString%3E(%5C%22element%5C%22)%3B%5Cn%7D%5Cnclass%20Utils%20%7B%5Cn%20%20void%20put%3CT%3E(T%20element)%20%7B%5Cn%20%20%20%20print(element)%3B%5Cn%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%223a0dc9ac%22%7D\"></card><p data-lake-id=\"41b79b76dff04c782ee1693f129a0de3_p_336\" id=\"41b79b76dff04c782ee1693f129a0de3_p_336\"><br></p><h2 data-lake-id=\"87ad53d5\" id=\"87ad53d5\"><span data-lake-id=\"u6f441bec\" id=\"u6f441bec\">十二、库</span></h2><p data-lake-id=\"0a056e448975c60bc9085a7f02af8f3e_p_337\" id=\"0a056e448975c60bc9085a7f02af8f3e_p_337\"><br></p><ul list=\"u11a4ab1b\"><li fid=\"ud86a38da\" data-lake-id=\"3ec995dbb7b9e41da89ba0f3770d5a31_li_136\" id=\"3ec995dbb7b9e41da89ba0f3770d5a31_li_136\"><span data-lake-id=\"udade1981\" id=\"udade1981\">常用库</span></li></ul><p data-lake-id=\"d8f5f3568d534b5e9cd994fed93e7e75_p_338\" id=\"d8f5f3568d534b5e9cd994fed93e7e75_p_338\"><br></p><ol list=\"u2850289c\"><li fid=\"u4e8d590b\" data-lake-id=\"d18678d79ab95cc02b2f66daddabac49_li_137\" id=\"d18678d79ab95cc02b2f66daddabac49_li_137\"><code data-lake-id=\"ub05e1e4c\" id=\"ub05e1e4c\"><span data-lake-id=\"u20fb2ba5\" id=\"u20fb2ba5\">Dart web</span></code><span data-lake-id=\"u0ac4b26f\" id=\"u0ac4b26f\"> 应用通常使用 </span><code data-lake-id=\"u4e857bc7\" id=\"u4e857bc7\"><span data-lake-id=\"ub2e6313a\" id=\"ub2e6313a\">dart:html</span></code><span data-lake-id=\"u65f9f9b5\" id=\"u65f9f9b5\"> 库</span></li></ol><ol list=\"u627554d3\" start=\"2\"><li fid=\"u4d2309e3\" data-lake-id=\"e353d0d84a2918e47b3e328d13331cbe_li_138\" id=\"e353d0d84a2918e47b3e328d13331cbe_li_138\"><code data-lake-id=\"ud3682b61\" id=\"ud3682b61\"><span data-lake-id=\"uc22c250d\" id=\"uc22c250d\">dart:core</span></code><span data-lake-id=\"u1d519c42\" id=\"u1d519c42\"> 库定义了 </span><code data-lake-id=\"u3c28ee16\" id=\"u3c28ee16\"><span data-lake-id=\"uf015c0b3\" id=\"uf015c0b3\">num</span></code><span data-lake-id=\"u2cefb702\" id=\"u2cefb702\">, </span><code data-lake-id=\"u56b9a199\" id=\"u56b9a199\"><span data-lake-id=\"ub5fd6796\" id=\"ub5fd6796\">int</span></code><span data-lake-id=\"u5284b294\" id=\"u5284b294\">, 和 </span><code data-lake-id=\"u291cd3eb\" id=\"u291cd3eb\"><span data-lake-id=\"u1e9afa3b\" id=\"u1e9afa3b\">double</span></code><span data-lake-id=\"ued7e1bd8\" id=\"ued7e1bd8\"> 类，这些类 定义一些操作数字的基础功能。</span></li></ol><ol list=\"u92aa651e\" start=\"3\"><li fid=\"uc0a28840\" data-lake-id=\"8b9f468ea8cec76a487545ab6079825d_li_139\" id=\"8b9f468ea8cec76a487545ab6079825d_li_139\"><span data-lake-id=\"u42d58e00\" id=\"u42d58e00\">异步编程通常使用回调函数，但是 </span><code data-lake-id=\"u5e594b9b\" id=\"u5e594b9b\"><span data-lake-id=\"u21fdfb96\" id=\"u21fdfb96\">Dart</span></code><span data-lake-id=\"u2cf49192\" id=\"u2cf49192\"> 提供了另外的 选择： </span><a href=\"https://api.dartlang.org/stable/dart-async/Future-class.html\" target=\"_blank\" data-lake-id=\"ub96a70ef\" id=\"ub96a70ef\"><em><strong><span data-lake-id=\"u1d315164\" id=\"u1d315164\">Future</span></strong></em></a><span data-lake-id=\"udcfed180\" id=\"udcfed180\"> 和 </span><a href=\"https://api.dartlang.org/stable/dart-async/Stream-class.html\" target=\"_blank\" data-lake-id=\"ue32f3dad\" id=\"ue32f3dad\"><em><strong><span data-lake-id=\"u086fe1b7\" id=\"u086fe1b7\">Stream</span></strong></em></a><span data-lake-id=\"uc694c124\" id=\"uc694c124\"> 对象。 </span><code data-lake-id=\"ua40d02e4\" id=\"ua40d02e4\"><span data-lake-id=\"u43e0e9d7\" id=\"u43e0e9d7\">Future</span></code><span data-lake-id=\"u6abd2f37\" id=\"u6abd2f37\"> 和 </span><code data-lake-id=\"u573705fc\" id=\"u573705fc\"><span data-lake-id=\"ud182512a\" id=\"ud182512a\">JavaScript</span></code><span data-lake-id=\"u3cddf7c5\" id=\"u3cddf7c5\"> 中的 </span><code data-lake-id=\"ucb54a646\" id=\"ucb54a646\"><span data-lake-id=\"u9236bedf\" id=\"u9236bedf\">Promise</span></code><span data-lake-id=\"u5ab5f5e9\" id=\"u5ab5f5e9\"> 类似，代表在将来某个时刻会返回一个 结果。</span><code data-lake-id=\"u660564aa\" id=\"u660564aa\"><span data-lake-id=\"u9aee3322\" id=\"u9aee3322\">Stream</span></code><span data-lake-id=\"ue7d7e416\" id=\"ue7d7e416\"> 是一种用来获取一些列数据的方式，例如 </span><code data-lake-id=\"u2264b078\" id=\"u2264b078\"><span data-lake-id=\"u41b15ee2\" id=\"u41b15ee2\">事件流</span></code><span data-lake-id=\"uab9cfe16\" id=\"uab9cfe16\">。 </span><code data-lake-id=\"u999f56ac\" id=\"u999f56ac\"><span data-lake-id=\"u55487b29\" id=\"u55487b29\">Future</span></code><span data-lake-id=\"u31617bfd\" id=\"u31617bfd\">, </span><code data-lake-id=\"ubb5e4f46\" id=\"ubb5e4f46\"><span data-lake-id=\"u8c2457a6\" id=\"u8c2457a6\">Stream</span></code><span data-lake-id=\"uab133dc6\" id=\"uab133dc6\">, 以及其他异步操作的类在 </span><a href=\"https://api.dartlang.org/stable/dart-async/dart-async-library.html\" target=\"_blank\" data-lake-id=\"uf5fbf54d\" id=\"uf5fbf54d\"><em><strong><span data-lake-id=\"u7b6b5a1b\" id=\"u7b6b5a1b\">dart:async</span></strong></em></a><span data-lake-id=\"u4a602d2f\" id=\"u4a602d2f\"> 库中。</span></li></ol><ol list=\"ue8726f64\" start=\"4\"><li fid=\"u4785cb5f\" data-lake-id=\"a8b79ec246fe8bf47502a1426052a0dc_li_140\" id=\"a8b79ec246fe8bf47502a1426052a0dc_li_140\"><code data-lake-id=\"ud6311f43\" id=\"ud6311f43\"><span data-lake-id=\"u12dfe452\" id=\"u12dfe452\">Math</span></code><span data-lake-id=\"u01382134\" id=\"u01382134\"> 库提供了常见的数学运算功能，例如 </span><code data-lake-id=\"u74a80178\" id=\"u74a80178\"><span data-lake-id=\"u717cee84\" id=\"u717cee84\">sine</span></code><span data-lake-id=\"udcc76ff6\" id=\"udcc76ff6\"> 和 </span><code data-lake-id=\"uf0f89c2a\" id=\"uf0f89c2a\"><span data-lake-id=\"ub5017d49\" id=\"ub5017d49\">cosine</span></code><span data-lake-id=\"ue77aa83a\" id=\"ue77aa83a\">， </span><code data-lake-id=\"u8a45d8a0\" id=\"u8a45d8a0\"><span data-lake-id=\"u4d090798\" id=\"u4d090798\">最大值</span></code><span data-lake-id=\"ua2b2d8da\" id=\"ua2b2d8da\">、</span><code data-lake-id=\"u38878053\" id=\"u38878053\"><span data-lake-id=\"u7be60860\" id=\"u7be60860\">最小值等</span></code><span data-lake-id=\"u8d47632d\" id=\"u8d47632d\">，还有各种常量 例如 </span><code data-lake-id=\"u59ed076c\" id=\"u59ed076c\"><span data-lake-id=\"u5f95f4ec\" id=\"u5f95f4ec\">pi</span></code><span data-lake-id=\"u665cb54d\" id=\"u665cb54d\"> 和 </span><code data-lake-id=\"u4c1ce392\" id=\"u4c1ce392\"><span data-lake-id=\"ua812cdf9\" id=\"ua812cdf9\">e</span></code><span data-lake-id=\"u9a5976c9\" id=\"u9a5976c9\"> 等。</span><code data-lake-id=\"u45694bd6\" id=\"u45694bd6\"><span data-lake-id=\"ub09c6ba7\" id=\"ub09c6ba7\">Math</span></code><span data-lake-id=\"u35a67ed7\" id=\"u35a67ed7\"> 库中 的大部分函数都是顶级方法。导入 </span><code data-lake-id=\"u7f19fcc3\" id=\"u7f19fcc3\"><span data-lake-id=\"u57e5e425\" id=\"u57e5e425\">dart:math</span></code><span data-lake-id=\"ue87cfee8\" id=\"ue87cfee8\"> 就可以使用 </span><code data-lake-id=\"u023edc27\" id=\"u023edc27\"><span data-lake-id=\"u0b9e6f0c\" id=\"u0b9e6f0c\">Math</span></code><span data-lake-id=\"ue801cf36\" id=\"ue801cf36\"> 库了</span></li></ol><p data-lake-id=\"f140694be8554ab7380456708abcd9fc_p_339\" id=\"f140694be8554ab7380456708abcd9fc_p_339\"><br></p><ul list=\"u32051728\"><li fid=\"ubf7cb12c\" data-lake-id=\"e403524ddb7e2f7695524618fe7ff1fe_li_141\" id=\"e403524ddb7e2f7695524618fe7ff1fe_li_141\"><span data-lake-id=\"uf6ae603b\" id=\"uf6ae603b\">如果导入的两个库具有冲突的标识符，则可以使用库的前缀来区分</span></li></ul><p data-lake-id=\"f9a30ee34e0f83179be8cb5e4158d0bf_p_340\" id=\"f9a30ee34e0f83179be8cb5e4158d0bf_p_340\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22dart%22%2C%22code%22%3A%22import%20'package%3Alib1%2Flib1.dart'%3B%5Cnimport%20'package%3Alib2%2Flib2.dart'%20as%20lib2%3B%5Cn%2F%2F%20...%5CnElement%20element1%20%3D%20new%20Element()%3B%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20Uses%20Element%20from%20lib1.%5Cnlib2.Element%20element2%20%3D%20new%20lib2.Element()%3B%20%2F%2F%20Uses%20Element%20from%20lib2.%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%2236f03bec%22%7D\"></card><p data-lake-id=\"58c8e4945e151873b2addcbc0a5ecc7b_p_341\" id=\"58c8e4945e151873b2addcbc0a5ecc7b_p_341\"><br></p><ul list=\"u04124e4e\"><li fid=\"ueb7fa10f\" data-lake-id=\"dff68f143f67a15c606b57836c55588b_li_142\" id=\"dff68f143f67a15c606b57836c55588b_li_142\"><span data-lake-id=\"u10d7a9ac\" id=\"u10d7a9ac\">导入库的一部分</span></li></ul><p data-lake-id=\"b0ef2ce25375794a88fa9f52e7db5b09_p_342\" id=\"b0ef2ce25375794a88fa9f52e7db5b09_p_342\"><br></p><p data-lake-id=\"8d9552ff8b9b035d25f298a739a4e3c8_p_343\" id=\"8d9552ff8b9b035d25f298a739a4e3c8_p_343\"><span data-lake-id=\"u5e0fcda4\" id=\"u5e0fcda4\">如果你只使用库的一部分功能，则可以选择需要导入的 内容。例如：</span></p><p data-lake-id=\"4252c262ba6e07a3ea03922001409458_p_344\" id=\"4252c262ba6e07a3ea03922001409458_p_344\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22dart%22%2C%22code%22%3A%22%2F%2F%20Import%20only%20foo.%5Cnimport%20'package%3Alib1%2Flib1.dart'%20show%20foo%3B%5Cn%5Cn%2F%2F%20Import%20all%20names%20EXCEPT%20foo.%5Cnimport%20'package%3Alib2%2Flib2.dart'%20hide%20foo%3B%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%2246be027e%22%7D\"></card><p data-lake-id=\"907fcc622f0cb0469e548c6f5829004f_p_345\" id=\"907fcc622f0cb0469e548c6f5829004f_p_345\"><br></p><ul list=\"ubb4b2e7b\"><li fid=\"ucc4524a2\" data-lake-id=\"d077ce50b62086c2f877cfe6d0840f4d_li_143\" id=\"d077ce50b62086c2f877cfe6d0840f4d_li_143\"><span data-lake-id=\"ue77f5e44\" id=\"ue77f5e44\">延迟载入库</span></li></ul><p data-lake-id=\"24a645574b35969fd9fc73ce231749f5_p_346\" id=\"24a645574b35969fd9fc73ce231749f5_p_346\"><br></p><p data-lake-id=\"325d761e7972bfab2f755a1e3ed17ea0_p_347\" id=\"325d761e7972bfab2f755a1e3ed17ea0_p_347\"><code data-lake-id=\"u0379b650\" id=\"u0379b650\"><span data-lake-id=\"u8a139e55\" id=\"u8a139e55\">Deferred loading</span></code><span data-lake-id=\"ueab9c44b\" id=\"ueab9c44b\"> (也称之为 </span><code data-lake-id=\"u315b737f\" id=\"u315b737f\"><span data-lake-id=\"uc4a54579\" id=\"uc4a54579\">lazy loading</span></code><span data-lake-id=\"ucf59311f\" id=\"ucf59311f\">) 可以让应用在需要的时候再 加载库。 下面是一些使用延迟加载库的场景：</span></p><p data-lake-id=\"8d4b271613686a2d1064c6b308ba1fa3_p_348\" id=\"8d4b271613686a2d1064c6b308ba1fa3_p_348\"><br></p><ul list=\"u943c5094\"><li fid=\"ua4f2d159\" data-lake-id=\"6506a4b068398aad74bdde688eed9038_li_144\" id=\"6506a4b068398aad74bdde688eed9038_li_144\"><span data-lake-id=\"ue9e0e7d4\" id=\"ue9e0e7d4\">减少 </span><code data-lake-id=\"uf5e713a1\" id=\"uf5e713a1\"><span data-lake-id=\"u67e1ffbc\" id=\"u67e1ffbc\">APP</span></code><span data-lake-id=\"u98d3a219\" id=\"u98d3a219\"> 的启动时间。</span></li></ul><ul list=\"ue6cd11b7\"><li fid=\"ue3efec06\" data-lake-id=\"95d13e9d3dcbe2396f19a9f9462f998b_li_145\" id=\"95d13e9d3dcbe2396f19a9f9462f998b_li_145\"><span data-lake-id=\"u52a41180\" id=\"u52a41180\">执行 </span><code data-lake-id=\"ue09f1384\" id=\"ue09f1384\"><span data-lake-id=\"u5672bcfe\" id=\"u5672bcfe\">A/B</span></code><span data-lake-id=\"u2cb81af4\" id=\"u2cb81af4\"> 测试，例如 尝试各种算法的 不同实现。</span></li></ul><ul list=\"u99100c18\"><li fid=\"ud99c34db\" data-lake-id=\"a42c3ead6b43dfe4805210f4e5eb4562_li_146\" id=\"a42c3ead6b43dfe4805210f4e5eb4562_li_146\"><span data-lake-id=\"u658d155d\" id=\"u658d155d\">加载很少使用的功能，例如可选的屏幕和对话框。</span></li></ul><p data-lake-id=\"74ecfab27c8cf377938bc9b3d6847097_p_349\" id=\"74ecfab27c8cf377938bc9b3d6847097_p_349\"><br></p><p data-lake-id=\"6804417aa27587e75625564fa2f865ec_p_350\" id=\"6804417aa27587e75625564fa2f865ec_p_350\"><span data-lake-id=\"u83695e9c\" id=\"u83695e9c\">要延迟加载一个库，需要先使用 </span><code data-lake-id=\"ue1ce8f6b\" id=\"ue1ce8f6b\"><span data-lake-id=\"u91807ecd\" id=\"u91807ecd\">deferred as</span></code><span data-lake-id=\"uc7987476\" id=\"uc7987476\"> 来 导入：</span></p><p data-lake-id=\"e79d777f0fefee41e9c01ecd95e72714_p_351\" id=\"e79d777f0fefee41e9c01ecd95e72714_p_351\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22dart%22%2C%22code%22%3A%22import%20'package%3Adeferred%2Fhello.dart'%20deferred%20as%20hello%3B%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22d52358e1%22%7D\"></card><p data-lake-id=\"ad3eb8fe3c94e7771e185a89172e7be1_p_352\" id=\"ad3eb8fe3c94e7771e185a89172e7be1_p_352\"><br></p><p data-lake-id=\"31ff2ddd806a62e186d13420e98110be_p_353\" id=\"31ff2ddd806a62e186d13420e98110be_p_353\"><span data-lake-id=\"u4a25a8ee\" id=\"u4a25a8ee\">当需要使用的时候，使用库标识符调用 </span><code data-lake-id=\"u0d08d223\" id=\"u0d08d223\"><span data-lake-id=\"uccfa7343\" id=\"uccfa7343\">loadLibrary()</span></code><span data-lake-id=\"u3bf99f28\" id=\"u3bf99f28\"> 函数来加载库：</span></p><p data-lake-id=\"b14ae4a1758357e04d7ee5fa01a4c0de_p_354\" id=\"b14ae4a1758357e04d7ee5fa01a4c0de_p_354\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22dart%22%2C%22code%22%3A%22greet()%20async%20%7B%5Cn%20%20await%20hello.loadLibrary()%3B%5Cn%20%20hello.printGreeting()%3B%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%2267293db7%22%7D\"></card><p data-lake-id=\"eca79acfd3f51d47aca4c006f27b136f_p_355\" id=\"eca79acfd3f51d47aca4c006f27b136f_p_355\"><br></p><p data-lake-id=\"9a23cd8ac183f301a2b78de75fa6efb1_p_356\" id=\"9a23cd8ac183f301a2b78de75fa6efb1_p_356\"><span data-lake-id=\"ud53b5507\" id=\"ud53b5507\"> 在前面的代码， 使用 </span><code data-lake-id=\"u385c6b29\" id=\"u385c6b29\"><span data-lake-id=\"u61bba9f1\" id=\"u61bba9f1\">await</span></code><span data-lake-id=\"u7a31f26b\" id=\"u7a31f26b\"> 关键字暂停代码执行一直到库加载完成。 关于 </span><code data-lake-id=\"udde6fe57\" id=\"udde6fe57\"><span data-lake-id=\"u35e9ba28\" id=\"u35e9ba28\">async</span></code><span data-lake-id=\"u19c6cf04\" id=\"u19c6cf04\"> 和 </span><code data-lake-id=\"u506f30dd\" id=\"u506f30dd\"><span data-lake-id=\"u60934918\" id=\"u60934918\">await</span></code><span data-lake-id=\"u611d108a\" id=\"u611d108a\"> 的更多信息请参考 </span><a href=\"http://dart.goodev.org/guides/language/language-tour#asynchrony-support\" target=\"_blank\" data-lake-id=\"u7d4f34f0\" id=\"u7d4f34f0\"><em><strong><span data-lake-id=\"ub600e86a\" id=\"ub600e86a\">异步支持</span></strong></em></a><span data-lake-id=\"u51014c08\" id=\"u51014c08\">。</span></p><p data-lake-id=\"d714dfb89a61340ab03baf9eb7dd2748_p_357\" id=\"d714dfb89a61340ab03baf9eb7dd2748_p_357\"><br></p><p data-lake-id=\"5052633adeafc0d3e1beb4718b4708a1_p_358\" id=\"5052633adeafc0d3e1beb4718b4708a1_p_358\"><span data-lake-id=\"u9261774c\" id=\"u9261774c\"> 在一个库上你可以多次调用 </span><code data-lake-id=\"ud8ab7f3f\" id=\"ud8ab7f3f\"><span data-lake-id=\"u52db00be\" id=\"u52db00be\">loadLibrary()</span></code><span data-lake-id=\"uc7b1eeb1\" id=\"uc7b1eeb1\"> 函数。 但是该库只是载入一次。</span></p><p data-lake-id=\"979969d98e3b20e665a3357f6c0ad150_p_359\" id=\"979969d98e3b20e665a3357f6c0ad150_p_359\"><br></p><p data-lake-id=\"7132bb7df6e001ec359d353815cc4664_p_360\" id=\"7132bb7df6e001ec359d353815cc4664_p_360\"><span data-lake-id=\"u104cc020\" id=\"u104cc020\">使用延迟加载库的时候，请注意一下问题：</span></p><p data-lake-id=\"eef98ed46c411ab61c1fa22a0e88ce37_p_361\" id=\"eef98ed46c411ab61c1fa22a0e88ce37_p_361\"><br></p><ul list=\"uc3818f22\"><li fid=\"ufd32af66\" data-lake-id=\"5de3e33ab69837269bbf3ad6a241610d_li_147\" id=\"5de3e33ab69837269bbf3ad6a241610d_li_147\"><span data-lake-id=\"udfacd635\" id=\"udfacd635\">延迟加载库的常量在导入的时候是不可用的。 只有当库加载完毕的时候，库中常量才可以使用。</span></li></ul><ul list=\"u93e986ac\"><li fid=\"u5a31d776\" data-lake-id=\"cdee48a0eabda493ea6f0275e5ca50e0_li_148\" id=\"cdee48a0eabda493ea6f0275e5ca50e0_li_148\"><span data-lake-id=\"u992b3d9b\" id=\"u992b3d9b\">在导入文件的时候无法使用延迟库中的类型。 如果你需要使用类型，则考虑把接口类型移动到另外一个库中， 让两个库都分别导入这个接口库。</span></li></ul><ul list=\"ufe79d3db\"><li fid=\"uf889effb\" data-lake-id=\"3c1cefd698fe6e72bcc83acd93a42b0c_li_149\" id=\"3c1cefd698fe6e72bcc83acd93a42b0c_li_149\"><em><strong><span data-lake-id=\"ue561f467\" id=\"ue561f467\">Dart</span></strong></em><span data-lake-id=\"u557f3c64\" id=\"u557f3c64\"> 隐含的把 </span><code data-lake-id=\"ufa08a206\" id=\"ufa08a206\"><span data-lake-id=\"uf4fe9c42\" id=\"uf4fe9c42\">loadLibrary()</span></code><span data-lake-id=\"ubf01c684\" id=\"ubf01c684\"> 函数导入到使用 </span><code data-lake-id=\"ua8ea9ecc\" id=\"ua8ea9ecc\"><span data-lake-id=\"u91903b12\" id=\"u91903b12\">deferred as</span></code><span data-lake-id=\"u9b4990f0\" id=\"u9b4990f0\"> 的命名空间中。 </span><code data-lake-id=\"uaabcff79\" id=\"uaabcff79\"><span data-lake-id=\"ufbe3906c\" id=\"ufbe3906c\">loadLibrary()</span></code><span data-lake-id=\"u7c13e877\" id=\"u7c13e877\"> 方法返回一个 </span><a href=\"http://dart.goodev.org/guides/libraries/library-tour#future\" target=\"_blank\" data-lake-id=\"u3ad72348\" id=\"u3ad72348\"><em><strong><span data-lake-id=\"u485f01c5\" id=\"u485f01c5\">Future</span></strong></em></a><span data-lake-id=\"u490952e3\" id=\"u490952e3\">。</span></li></ul><p data-lake-id=\"5a47d94bc98e6d340cdb7cccff7fa51d_p_362\" id=\"5a47d94bc98e6d340cdb7cccff7fa51d_p_362\"><br></p><h2 data-lake-id=\"be7a8956\" id=\"be7a8956\"><span data-lake-id=\"u680d6efb\" id=\"u680d6efb\">十三、异步支持</span></h2><p data-lake-id=\"b6f4d2a5c1aff0a932ad150db3ddf853_p_363\" id=\"b6f4d2a5c1aff0a932ad150db3ddf853_p_363\"><br></p><p data-lake-id=\"3b58e21db61a702b2f6b865a5b5b4df4_p_364\" id=\"3b58e21db61a702b2f6b865a5b5b4df4_p_364\"><code data-lake-id=\"u8b33c722\" id=\"u8b33c722\"><span data-lake-id=\"ua5e4f4c3\" id=\"ua5e4f4c3\">Dart</span></code><span data-lake-id=\"u0f9528b2\" id=\"u0f9528b2\"> 库中有很多返回 </span><code data-lake-id=\"ud6a91941\" id=\"ud6a91941\"><span data-lake-id=\"u203b48ea\" id=\"u203b48ea\">Future</span></code><span data-lake-id=\"u2238fe53\" id=\"u2238fe53\"> 或者 </span><code data-lake-id=\"u12e8e3a3\" id=\"u12e8e3a3\"><span data-lake-id=\"u6ce37e36\" id=\"u6ce37e36\">Stream</span></code><span data-lake-id=\"uc52a58d1\" id=\"uc52a58d1\"> 对象的方法。 这些方法是 </span><em><span data-lake-id=\"u0bc06b2e\" id=\"u0bc06b2e\">异步的</span></em><span data-lake-id=\"u7c2bca39\" id=\"u7c2bca39\">： 这些函数在设置完基本的操作 后就返回了， 而无需等待操作执行完成。 例如读取一个文件，在打开文件后就返回了。</span></p><p data-lake-id=\"ff31106e827670d9c13d04207c7807b1_p_365\" id=\"ff31106e827670d9c13d04207c7807b1_p_365\"><br></p><p data-lake-id=\"b010b79fe4c99d3ef5c42246eef16c14_p_366\" id=\"b010b79fe4c99d3ef5c42246eef16c14_p_366\"><span data-lake-id=\"u13f04f2d\" id=\"u13f04f2d\">有两种方式可以使用 </span><code data-lake-id=\"u1e078b5e\" id=\"u1e078b5e\"><span data-lake-id=\"u10d9bf5b\" id=\"u10d9bf5b\">Future</span></code><span data-lake-id=\"ucb4a90b2\" id=\"ucb4a90b2\"> 对象中的 数据：</span></p><p data-lake-id=\"2b4048cb18fa24fbfc8c77ec5721ba52_p_367\" id=\"2b4048cb18fa24fbfc8c77ec5721ba52_p_367\"><br></p><ul list=\"u49d2161e\"><li fid=\"ua086ca8b\" data-lake-id=\"31e043a6cf75578d236ec470a845322c_li_150\" id=\"31e043a6cf75578d236ec470a845322c_li_150\"><span data-lake-id=\"u78a10289\" id=\"u78a10289\">使用 </span><code data-lake-id=\"u8b36d7a3\" id=\"u8b36d7a3\"><span data-lake-id=\"ua9936537\" id=\"ua9936537\">async</span></code><span data-lake-id=\"u5143ab7b\" id=\"u5143ab7b\"> 和 </span><code data-lake-id=\"uf1bf7712\" id=\"uf1bf7712\"><span data-lake-id=\"u9aed8983\" id=\"u9aed8983\">await</span></code></li></ul><ul list=\"u8851d234\"><li fid=\"u0479369c\" data-lake-id=\"0bbc4848def569839fe6663f48efda55_li_151\" id=\"0bbc4848def569839fe6663f48efda55_li_151\"><span data-lake-id=\"ufc3e9199\" id=\"ufc3e9199\">使用 </span><a href=\"http://dart.goodev.org/guides/libraries/library-tour#future\" target=\"_blank\" data-lake-id=\"u7a1e1339\" id=\"u7a1e1339\"><em><strong><span data-lake-id=\"u069b1507\" id=\"u069b1507\">Future API</span></strong></em></a></li></ul><p data-lake-id=\"847a4369e8d7b47263076c4ca89cd8a5_p_368\" id=\"847a4369e8d7b47263076c4ca89cd8a5_p_368\"><br></p><p data-lake-id=\"7dd07a4d7d001ad6e35f27170519849b_p_369\" id=\"7dd07a4d7d001ad6e35f27170519849b_p_369\"><span data-lake-id=\"u1b569c2e\" id=\"u1b569c2e\">同样，从 </span><code data-lake-id=\"u87d592f5\" id=\"u87d592f5\"><span data-lake-id=\"ud39332c5\" id=\"ud39332c5\">Stream</span></code><span data-lake-id=\"u990e61d4\" id=\"u990e61d4\"> 中获取数据也有两种方式：</span></p><p data-lake-id=\"12aad13ff7b6c968d7e10183168a26f8_p_370\" id=\"12aad13ff7b6c968d7e10183168a26f8_p_370\"><br></p><ul list=\"ue5663690\"><li fid=\"u44268160\" data-lake-id=\"6bfd7a76669c62539f10d6db3839004d_li_152\" id=\"6bfd7a76669c62539f10d6db3839004d_li_152\"><span data-lake-id=\"ub70cd7a1\" id=\"ub70cd7a1\">使用 </span><code data-lake-id=\"u2e40296e\" id=\"u2e40296e\"><span data-lake-id=\"u6ef05e1b\" id=\"u6ef05e1b\">async</span></code><span data-lake-id=\"u0b779a22\" id=\"u0b779a22\"> 和一个 异步 </span><code data-lake-id=\"ub3d1b29f\" id=\"ub3d1b29f\"><span data-lake-id=\"ufc7eceae\" id=\"ufc7eceae\">for</span></code><span data-lake-id=\"ucb5f1d79\" id=\"ucb5f1d79\"> 循环 (</span><code data-lake-id=\"u0ef65cc0\" id=\"u0ef65cc0\"><span data-lake-id=\"u8929e4e4\" id=\"u8929e4e4\">await for</span></code><span data-lake-id=\"u4ecdf331\" id=\"u4ecdf331\">)</span></li></ul><ul list=\"u4f9040db\"><li fid=\"u328161af\" data-lake-id=\"da6f91b71fd7b4a1e22ccfbf13b1a74a_li_153\" id=\"da6f91b71fd7b4a1e22ccfbf13b1a74a_li_153\"><span data-lake-id=\"u2b68b5d4\" id=\"u2b68b5d4\">使用 </span><a href=\"http://dart.goodev.org/guides/libraries/library-tour#stream\" target=\"_blank\" data-lake-id=\"u99d1cb9b\" id=\"u99d1cb9b\"><em><strong><span data-lake-id=\"u4b1b3412\" id=\"u4b1b3412\">Stream API</span></strong></em></a></li></ul><p data-lake-id=\"a7a97780cb395857388ed964c5f3725c_p_371\" id=\"a7a97780cb395857388ed964c5f3725c_p_371\"><br></p><p data-lake-id=\"8a27c9c58140b994a4b84192c7335979_p_372\" id=\"8a27c9c58140b994a4b84192c7335979_p_372\"><strong><span data-lake-id=\"ua8a0e269\" id=\"ua8a0e269\">1.</span></strong><span data-lake-id=\"u2e2cb510\" id=\"u2e2cb510\"> 要使用 </span><code data-lake-id=\"u3224722a\" id=\"u3224722a\"><span data-lake-id=\"u795f9fab\" id=\"u795f9fab\">await</span></code><span data-lake-id=\"u867ddb87\" id=\"u867ddb87\">，其方法必须带有 </span><code data-lake-id=\"u93c56b8b\" id=\"u93c56b8b\"><span data-lake-id=\"uf9f2abe6\" id=\"uf9f2abe6\">async</span></code><span data-lake-id=\"u25c0f0f9\" id=\"u25c0f0f9\"> 关键字：</span></p><p data-lake-id=\"2cc7a87e0f7a623f30d3a0fbfb1815c3_p_373\" id=\"2cc7a87e0f7a623f30d3a0fbfb1815c3_p_373\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22dart%22%2C%22code%22%3A%22checkVersion()%20async%20%7B%5Cn%20%20var%20version%20%3D%20await%20lookUpVersion()%3B%5Cn%20%20if%20(version%20%3D%3D%20expectedVersion)%20%7B%5Cn%20%20%20%20%2F%2F%20Do%20something.%5Cn%20%20%7D%20else%20%7B%5Cn%20%20%20%20%2F%2F%20Do%20something%20else.%5Cn%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%227a36d06e%22%7D\"></card><p data-lake-id=\"0f62510e9876ac2b8fbef3c6abf81dba_p_374\" id=\"0f62510e9876ac2b8fbef3c6abf81dba_p_374\"><br></p><p data-lake-id=\"272124bd8713ce4596d1da7f15cab406_p_375\" id=\"272124bd8713ce4596d1da7f15cab406_p_375\"><strong><span data-lake-id=\"uc460d320\" id=\"uc460d320\">2.</span></strong><span data-lake-id=\"u88a38cf0\" id=\"u88a38cf0\"> 可以使用 </span><code data-lake-id=\"uceb17e19\" id=\"uceb17e19\"><span data-lake-id=\"ueee0a938\" id=\"ueee0a938\">try</span></code><span data-lake-id=\"u4561dd1f\" id=\"u4561dd1f\">, </span><code data-lake-id=\"u43c82e20\" id=\"u43c82e20\"><span data-lake-id=\"u8016cf33\" id=\"u8016cf33\">catch</span></code><span data-lake-id=\"u6dd2784a\" id=\"u6dd2784a\">, 和 </span><code data-lake-id=\"u1e14c49f\" id=\"u1e14c49f\"><span data-lake-id=\"ufe59b7a9\" id=\"ufe59b7a9\">finally</span></code><span data-lake-id=\"ue755724b\" id=\"ue755724b\"> 来处理使用 </span><code data-lake-id=\"u9b44f12c\" id=\"u9b44f12c\"><span data-lake-id=\"ucf04838a\" id=\"ucf04838a\">await</span></code><span data-lake-id=\"udc0b26d0\" id=\"udc0b26d0\"> 的异常：</span></p><p data-lake-id=\"ea7ffad04bfdbb99a8e20665fec055ff_p_376\" id=\"ea7ffad04bfdbb99a8e20665fec055ff_p_376\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22dart%22%2C%22code%22%3A%22try%20%7B%5Cn%20%20server%20%3D%20await%20HttpServer.bind(InternetAddress.LOOPBACK_IP_V4%2C%204044)%3B%5Cn%7D%20catch%20(e)%20%7B%5Cn%20%20%2F%2F%20React%20to%20inability%20to%20bind%20to%20the%20port...%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%228c5079db%22%7D\"></card><p data-lake-id=\"f4a3c592a15de2aafcbfd6ea44b52d2e_p_377\" id=\"f4a3c592a15de2aafcbfd6ea44b52d2e_p_377\"><br></p><h3 data-lake-id=\"a1db95b8\" id=\"a1db95b8\"><span data-lake-id=\"u2053d322\" id=\"u2053d322\">13.1 声明异步方法</span></h3><p data-lake-id=\"b37407c92dd2046919e3158bff52accd_p_378\" id=\"b37407c92dd2046919e3158bff52accd_p_378\"><br></p><p data-lake-id=\"dd4caec4acc05aaaf3b46aab2c10f914_p_379\" id=\"dd4caec4acc05aaaf3b46aab2c10f914_p_379\"><span data-lake-id=\"u2fbcd37a\" id=\"u2fbcd37a\"> 一个 </span><code data-lake-id=\"ucf26baeb\" id=\"ucf26baeb\"><span data-lake-id=\"uddab4425\" id=\"uddab4425\">async</span></code><span data-lake-id=\"u5d7d9c26\" id=\"u5d7d9c26\"> 方法是函数体被标记为 </span><code data-lake-id=\"u0f4bd85c\" id=\"u0f4bd85c\"><span data-lake-id=\"uaf17a6c9\" id=\"uaf17a6c9\">async</span></code><span data-lake-id=\"u69ff8885\" id=\"u69ff8885\"> 的方法。 虽然异步方法的执行可能需要一定时间，但是 异步方法立刻返回 - 在方法体还没执行之前就返回了。</span></p><p data-lake-id=\"b2794e47279c4ed7006ea636861c4575_p_380\" id=\"b2794e47279c4ed7006ea636861c4575_p_380\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22dart%22%2C%22code%22%3A%22checkVersion()%20async%20%7B%5Cn%20%20%2F%2F%20...%5Cn%7D%5Cn%5CnlookUpVersion()%20async%20%3D%3E%20%2F*%20...%20*%2F%3B%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%2274345517%22%7D\"></card><p data-lake-id=\"121b50bda08c128c3e28128057d3e46a_p_381\" id=\"121b50bda08c128c3e28128057d3e46a_p_381\"><br></p><p data-lake-id=\"e0e4afdd63438e4037151d8f05452b57_p_382\" id=\"e0e4afdd63438e4037151d8f05452b57_p_382\"><span data-lake-id=\"u9674d338\" id=\"u9674d338\"> 在一个方法上添加 </span><code data-lake-id=\"u470c975c\" id=\"u470c975c\"><span data-lake-id=\"udbbb677a\" id=\"udbbb677a\">async</span></code><span data-lake-id=\"u263c8ac4\" id=\"u263c8ac4\"> 关键字，则这个方法返回值为 </span><code data-lake-id=\"u034db781\" id=\"u034db781\"><span data-lake-id=\"u703f827d\" id=\"u703f827d\">Future</span></code><span data-lake-id=\"u867e32a8\" id=\"u867e32a8\">。 例如，下面是一个返回字符串 的同步方法：</span></p><p data-lake-id=\"1f3a1af4423a5f6548f92264c8ba9855_p_383\" id=\"1f3a1af4423a5f6548f92264c8ba9855_p_383\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22dart%22%2C%22code%22%3A%22String%20lookUpVersionSync()%20%3D%3E%20'1.0.0'%3B%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22cd9d59fe%22%7D\"></card><p data-lake-id=\"063a08ed2e1ff473c54a458563269e06_p_384\" id=\"063a08ed2e1ff473c54a458563269e06_p_384\"><br></p><p data-lake-id=\"5ada766efe7174b383d4ad4b53c47b54_p_385\" id=\"5ada766efe7174b383d4ad4b53c47b54_p_385\"><span data-lake-id=\"ue74debf0\" id=\"ue74debf0\"> 如果使用 </span><code data-lake-id=\"u2cd43eb7\" id=\"u2cd43eb7\"><span data-lake-id=\"u2a711c4c\" id=\"u2a711c4c\">async</span></code><span data-lake-id=\"ud4fc688d\" id=\"ud4fc688d\"> 关键字，则该方法 返回一个 </span><code data-lake-id=\"u2df056e0\" id=\"u2df056e0\"><span data-lake-id=\"ud6a97da2\" id=\"ud6a97da2\">Future</span></code><span data-lake-id=\"u9e360064\" id=\"u9e360064\">，并且 认为该函数是一个耗时的操作。</span></p><p data-lake-id=\"e227befc343f9b09a2d440a1a01660d3_p_386\" id=\"e227befc343f9b09a2d440a1a01660d3_p_386\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22dart%22%2C%22code%22%3A%22Future%3CString%3E%20lookUpVersion()%20async%20%3D%3E%20'1.0.0'%3B%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%2200cf361c%22%7D\"></card><p data-lake-id=\"b71763e3e4c3b4b8b22881ce7acedb8e_p_387\" id=\"b71763e3e4c3b4b8b22881ce7acedb8e_p_387\"><br></p><p data-lake-id=\"3557045efc43b942f24dd99c02655986_p_388\" id=\"3557045efc43b942f24dd99c02655986_p_388\"><span data-lake-id=\"u76aab85e\" id=\"u76aab85e\"> 有时候，你的算法要求调用很多异步方法，并且等待 所有方法完成后再继续执行。使用 </span><code data-lake-id=\"uf80909e0\" id=\"uf80909e0\"><a href=\"https://api.dartlang.org/stable/dart-async/Future/wait.html\" target=\"_blank\" data-lake-id=\"u97979c03\" id=\"u97979c03\"><span data-lake-id=\"ue04f9df8\" id=\"ue04f9df8\">Future.wait()</span></a></code><span data-lake-id=\"uac4f9649\" id=\"uac4f9649\"> 这个静态函数来管理多个 </span><code data-lake-id=\"uedd1484d\" id=\"uedd1484d\"><span data-lake-id=\"udef91ca6\" id=\"udef91ca6\">Future</span></code><span data-lake-id=\"u0a4d7389\" id=\"u0a4d7389\"> 并等待所有 </span><code data-lake-id=\"u80ff3c29\" id=\"u80ff3c29\"><span data-lake-id=\"uf394109e\" id=\"uf394109e\">Future</span></code><span data-lake-id=\"u132becd2\" id=\"u132becd2\"> 执行完成。</span></p><p data-lake-id=\"551b1052f74a2a4b4222675571b88192_p_389\" id=\"551b1052f74a2a4b4222675571b88192_p_389\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22dart%22%2C%22code%22%3A%22Future%20deleteDone%20%3D%20deleteLotsOfFiles()%3B%5CnFuture%20copyDone%20%3D%20copyLotsOfFiles()%3B%5CnFuture%20checksumDone%20%3D%20checksumLotsOfOtherFiles()%3B%5Cn%5CnFuture.wait(%5BdeleteDone%2C%20copyDone%2C%20checksumDone%5D)%5Cn%20%20%20%20.then((List%20values)%20%7B%5Cn%20%20%20%20%20%20print('Done%20with%20all%20the%20long%20steps')%3B%5Cn%20%20%20%20%7D)%3B%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22758287b4%22%7D\"></card><p data-lake-id=\"4bea89dfafb597e9afe4538b2bf7b1d5_p_390\" id=\"4bea89dfafb597e9afe4538b2bf7b1d5_p_390\"><br></p><h3 data-lake-id=\"172c3272\" id=\"172c3272\"><span data-lake-id=\"u71f71f56\" id=\"u71f71f56\">13.2 使用 </span><code data-lake-id=\"u8a2a8097\" id=\"u8a2a8097\"><span data-lake-id=\"u72ade848\" id=\"u72ade848\">await</span></code><span data-lake-id=\"ua034df8e\" id=\"ua034df8e\"> 表达式</span></h3><p data-lake-id=\"53af3e9f980081e358aa2e6f38131954_p_391\" id=\"53af3e9f980081e358aa2e6f38131954_p_391\"><br></p><p data-lake-id=\"7a800220ba61147f4a185169e43b3ef7_p_392\" id=\"7a800220ba61147f4a185169e43b3ef7_p_392\"><span data-lake-id=\"u6c925339\" id=\"u6c925339\"> 在一个异步方法内可以使用多次 </span><code data-lake-id=\"ud11336c6\" id=\"ud11336c6\"><span data-lake-id=\"u949eff29\" id=\"u949eff29\">await</span></code><span data-lake-id=\"ubc74bcc5\" id=\"ubc74bcc5\"> 表达式。 例如，下面的示例使用了三次 </span><code data-lake-id=\"uc4baec8f\" id=\"uc4baec8f\"><span data-lake-id=\"ub537cce1\" id=\"ub537cce1\">await</span></code><span data-lake-id=\"u38e9a7bf\" id=\"u38e9a7bf\"> 表达式 来执行相关的功能：</span></p><p data-lake-id=\"cad374bdd17b248b295bb46f1993c6ef_p_393\" id=\"cad374bdd17b248b295bb46f1993c6ef_p_393\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22dart%22%2C%22code%22%3A%22var%20entrypoint%20%3D%20await%20findEntrypoint()%3B%5Cnvar%20exitCode%20%3D%20await%20runExecutable(entrypoint%2C%20args)%3B%5Cnawait%20flushThenExit(exitCode)%3B%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22334b47bc%22%7D\"></card><p data-lake-id=\"13e645adec38b486b7650c768369b095_p_394\" id=\"13e645adec38b486b7650c768369b095_p_394\"><br></p><p data-lake-id=\"bae33d18c5157a6737d97bede7c2bc6e_p_395\" id=\"bae33d18c5157a6737d97bede7c2bc6e_p_395\"><span data-lake-id=\"ua3253f15\" id=\"ua3253f15\"> 在 </span><code data-lake-id=\"uc857f4f3\" id=\"uc857f4f3\"><span data-lake-id=\"uf51e38ca\" id=\"uf51e38ca\">await expression</span></code><span data-lake-id=\"u4733fcb5\" id=\"u4733fcb5\"> 中， </span><code data-lake-id=\"ucc4b2ebe\" id=\"ucc4b2ebe\"><span data-lake-id=\"ub04781c5\" id=\"ub04781c5\">expression</span></code><span data-lake-id=\"u88c7f600\" id=\"u88c7f600\"> 的返回值通常是一个 </span><code data-lake-id=\"u1e9b3df0\" id=\"u1e9b3df0\"><span data-lake-id=\"u9e7221d4\" id=\"u9e7221d4\">Future</span></code><span data-lake-id=\"u1c11f5fb\" id=\"u1c11f5fb\">； 如果返回的值不是 </span><code data-lake-id=\"u01a0b739\" id=\"u01a0b739\"><span data-lake-id=\"u386c4959\" id=\"u386c4959\">Future</span></code><span data-lake-id=\"u1b121d71\" id=\"u1b121d71\">，则 </span><code data-lake-id=\"uad2ba0cb\" id=\"uad2ba0cb\"><span data-lake-id=\"udc48a0af\" id=\"udc48a0af\">Dart</span></code><span data-lake-id=\"u09e2fd40\" id=\"u09e2fd40\"> 会自动把该值放到 </span><code data-lake-id=\"u57a5698c\" id=\"u57a5698c\"><span data-lake-id=\"uf3ed9096\" id=\"uf3ed9096\">Future</span></code><span data-lake-id=\"uda86fdd3\" id=\"uda86fdd3\"> 中返回。 </span><code data-lake-id=\"uabd742d7\" id=\"uabd742d7\"><span data-lake-id=\"ucd0da800\" id=\"ucd0da800\">Future</span></code><span data-lake-id=\"u63f1eaa1\" id=\"u63f1eaa1\"> 对象代表返回一个对象的承 (</span><code data-lake-id=\"ua9192068\" id=\"ua9192068\"><span data-lake-id=\"u8ea95be9\" id=\"u8ea95be9\">promise</span></code><span data-lake-id=\"u6fb2c8e7\" id=\"u6fb2c8e7\">)。 </span><code data-lake-id=\"ub1cac53f\" id=\"ub1cac53f\"><span data-lake-id=\"u4a12a769\" id=\"u4a12a769\">await expression</span></code><span data-lake-id=\"u18f4410d\" id=\"u18f4410d\"> 执行的结果为这个返回的对象。 </span><code data-lake-id=\"uaa9c0def\" id=\"uaa9c0def\"><span data-lake-id=\"u62b1fc85\" id=\"u62b1fc85\">await expression</span></code><span data-lake-id=\"u6b66a4e7\" id=\"u6b66a4e7\"> 会阻塞住，直到需要的对象返回为止。</span></p><p data-lake-id=\"99a9f58323c0fa7215e3dc9ef7bf2e0d_p_396\" id=\"99a9f58323c0fa7215e3dc9ef7bf2e0d_p_396\"><br></p><p data-lake-id=\"238ae757deabf29cfd92e05847a31bec_p_397\" id=\"238ae757deabf29cfd92e05847a31bec_p_397\"><strong><span data-lake-id=\"u048d2425\" id=\"u048d2425\">如果 </span></strong><code data-lake-id=\"ud1d5cc73\" id=\"ud1d5cc73\"><strong><span data-lake-id=\"ud0abb918\" id=\"ud0abb918\">await</span></strong></code><strong><span data-lake-id=\"u4a913c5d\" id=\"u4a913c5d\"> 无法正常使用，请确保是在一个 </span></strong><code data-lake-id=\"u1819135e\" id=\"u1819135e\"><strong><span data-lake-id=\"uad3ddeb5\" id=\"uad3ddeb5\">async</span></strong></code><strong><span data-lake-id=\"u0e8bd574\" id=\"u0e8bd574\"> 方法中。</span></strong><span data-lake-id=\"uc4ab2262\" id=\"uc4ab2262\"> 例如要在 </span><code data-lake-id=\"u06b595fc\" id=\"u06b595fc\"><span data-lake-id=\"u24edc933\" id=\"u24edc933\">main()</span></code><span data-lake-id=\"u313aa62e\" id=\"u313aa62e\"> 方法中使用 </span><code data-lake-id=\"u184e2aa3\" id=\"u184e2aa3\"><span data-lake-id=\"uf187f87e\" id=\"uf187f87e\">await</span></code><span data-lake-id=\"u1d836b64\" id=\"u1d836b64\">， 则 </span><code data-lake-id=\"u74b4fd40\" id=\"u74b4fd40\"><span data-lake-id=\"u2c612851\" id=\"u2c612851\">main()</span></code><span data-lake-id=\"u3bd1861b\" id=\"u3bd1861b\"> 方法的函数体必须标记为 </span><code data-lake-id=\"u7200b289\" id=\"u7200b289\"><span data-lake-id=\"u0a1de524\" id=\"u0a1de524\">async</span></code><span data-lake-id=\"u4f52127c\" id=\"u4f52127c\">：</span></p><p data-lake-id=\"c828dfcd964fb30f649b8d212eeb3614_p_398\" id=\"c828dfcd964fb30f649b8d212eeb3614_p_398\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22dart%22%2C%22code%22%3A%22main()%20async%20%7B%5Cn%20%20checkVersion()%3B%5Cn%20%20print('In%20main%3A%20version%20is%20%24%7Bawait%20lookUpVersion()%7D')%3B%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22dbb5fbe0%22%7D\"></card><p data-lake-id=\"0da96d7a4d6a9ecb6ba79cac79fbb6ce_p_399\" id=\"0da96d7a4d6a9ecb6ba79cac79fbb6ce_p_399\"><br></p><h3 data-lake-id=\"3f70affd\" id=\"3f70affd\"><span data-lake-id=\"ud15a538a\" id=\"ud15a538a\">13.3 在循环中使用异步</span></h3><p data-lake-id=\"f8c899a2e3c243c67cea6b300279a2f1_p_400\" id=\"f8c899a2e3c243c67cea6b300279a2f1_p_400\"><br></p><p data-lake-id=\"e7313bc7262b5bc05e4def9a43246e2c_p_401\" id=\"e7313bc7262b5bc05e4def9a43246e2c_p_401\"><span data-lake-id=\"uad0f926c\" id=\"uad0f926c\"> 异步 </span><code data-lake-id=\"u399aeab8\" id=\"u399aeab8\"><span data-lake-id=\"u939d2384\" id=\"u939d2384\">for</span></code><span data-lake-id=\"ub4d6e968\" id=\"ub4d6e968\"> 循环具有如下的形式：</span></p><p data-lake-id=\"f318a8b17566f6496a14f8d4c9368ba0_p_402\" id=\"f318a8b17566f6496a14f8d4c9368ba0_p_402\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22dart%22%2C%22code%22%3A%22await%20for%20(variable%20declaration%20in%20expression)%20%7B%5Cn%20%20%2F%2F%20Executes%20each%20time%20the%20stream%20emits%20a%20value.%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22bc9f4bd7%22%7D\"></card><p data-lake-id=\"da9f89f3f15f89516369a4fc8a16c33d_p_403\" id=\"da9f89f3f15f89516369a4fc8a16c33d_p_403\"><br></p><p data-lake-id=\"5d74c704d29adb13f81f51863c302043_p_404\" id=\"5d74c704d29adb13f81f51863c302043_p_404\"><span data-lake-id=\"u5d78d962\" id=\"u5d78d962\"> 上面 </span><code data-lake-id=\"u53b1fc09\" id=\"u53b1fc09\"><span data-lake-id=\"u6441d670\" id=\"u6441d670\">expression</span></code><span data-lake-id=\"u4800450d\" id=\"u4800450d\"> 返回的值必须是 </span><code data-lake-id=\"u5244b2a8\" id=\"u5244b2a8\"><span data-lake-id=\"u249aa461\" id=\"u249aa461\">Stream</span></code><span data-lake-id=\"u413997ef\" id=\"u413997ef\"> 类型的。 执行流程如下：</span></p><p data-lake-id=\"0cfb3d5cc02b54e69ff545746d5b9af6_p_405\" id=\"0cfb3d5cc02b54e69ff545746d5b9af6_p_405\"><br></p><ol list=\"uc4b6e5a5\"><li fid=\"u179595ea\" data-lake-id=\"02e6cd78bc001103d377d6728429d03a_li_154\" id=\"02e6cd78bc001103d377d6728429d03a_li_154\"><span data-lake-id=\"uc69c1da8\" id=\"uc69c1da8\">等待直到 </span><em><strong><span data-lake-id=\"uac362006\" id=\"uac362006\">stream</span></strong></em><span data-lake-id=\"u4e48933c\" id=\"u4e48933c\"> 返回一个数据</span></li></ol><ol list=\"ua6c5a395\" start=\"2\"><li fid=\"u69062172\" data-lake-id=\"b09279b1a47859c882e2912eb79948cb_li_155\" id=\"b09279b1a47859c882e2912eb79948cb_li_155\"><span data-lake-id=\"u7db9474c\" id=\"u7db9474c\">使用 </span><code data-lake-id=\"uc96e58da\" id=\"uc96e58da\"><span data-lake-id=\"uec8a1da8\" id=\"uec8a1da8\">stream</span></code><span data-lake-id=\"uec2317fe\" id=\"uec2317fe\"> 返回的参数 执行 </span><code data-lake-id=\"ua529c856\" id=\"ua529c856\"><span data-lake-id=\"u7a89e5d2\" id=\"u7a89e5d2\">for</span></code><span data-lake-id=\"u313f0f30\" id=\"u313f0f30\"> 循环代码，</span></li></ol><ol list=\"u7c4f5911\" start=\"3\"><li fid=\"u3fbf556a\" data-lake-id=\"4fd938f5b276c0369596024ae825c1a8_li_156\" id=\"4fd938f5b276c0369596024ae825c1a8_li_156\"><span data-lake-id=\"uaf79c83d\" id=\"uaf79c83d\">重复执行 </span><code data-lake-id=\"u80d4554c\" id=\"u80d4554c\"><span data-lake-id=\"uc67b4254\" id=\"uc67b4254\">1</span></code><span data-lake-id=\"u5049d59b\" id=\"u5049d59b\"> 和 </span><code data-lake-id=\"u2665ad25\" id=\"u2665ad25\"><span data-lake-id=\"u08fb7a97\" id=\"u08fb7a97\">2</span></code><span data-lake-id=\"u07b3388d\" id=\"u07b3388d\"> 直到 </span><code data-lake-id=\"ucfa2b03d\" id=\"ucfa2b03d\"><span data-lake-id=\"u62f418f6\" id=\"u62f418f6\">stream</span></code><span data-lake-id=\"ubc4025b0\" id=\"ubc4025b0\"> 数据返回完毕。</span></li></ol><p data-lake-id=\"e9a28ff0731eac4634a04d7806631887_p_406\" id=\"e9a28ff0731eac4634a04d7806631887_p_406\"><br></p><p data-lake-id=\"09a095d90cc4e33c167773dae3555a94_p_407\" id=\"09a095d90cc4e33c167773dae3555a94_p_407\"><span data-lake-id=\"u97324dec\" id=\"u97324dec\"> 使用 </span><code data-lake-id=\"udd0ea72c\" id=\"udd0ea72c\"><span data-lake-id=\"ud1842753\" id=\"ud1842753\">break</span></code><span data-lake-id=\"u96f14083\" id=\"u96f14083\"> 或者 </span><code data-lake-id=\"u896cf40f\" id=\"u896cf40f\"><span data-lake-id=\"u4e182503\" id=\"u4e182503\">return</span></code><span data-lake-id=\"ubc1b5966\" id=\"ubc1b5966\"> 语句可以 停止接收 </span><code data-lake-id=\"u89834739\" id=\"u89834739\"><span data-lake-id=\"uc79df2f5\" id=\"uc79df2f5\">stream</span></code><span data-lake-id=\"ubbf3b38f\" id=\"ubbf3b38f\"> 的数据， 这样就跳出了 </span><code data-lake-id=\"u6d7f7bcc\" id=\"u6d7f7bcc\"><span data-lake-id=\"ufdde3119\" id=\"ufdde3119\">for</span></code><span data-lake-id=\"u1ade6150\" id=\"u1ade6150\"> 循环并且 从 </span><code data-lake-id=\"ufb4ec0de\" id=\"ufb4ec0de\"><span data-lake-id=\"ub49972ec\" id=\"ub49972ec\">stream</span></code><span data-lake-id=\"u7f52e03f\" id=\"u7f52e03f\"> 上取消注册了。</span></p><p data-lake-id=\"a8e8a9fdbb78dc34d8754b54c6a29353_p_408\" id=\"a8e8a9fdbb78dc34d8754b54c6a29353_p_408\"><br></p><p data-lake-id=\"e5e9f5ad0b309d0df8e47b9336349a59_p_409\" id=\"e5e9f5ad0b309d0df8e47b9336349a59_p_409\"><strong><span data-lake-id=\"u626ea762\" id=\"u626ea762\">如果异步 </span></strong><code data-lake-id=\"ub7ebacf8\" id=\"ub7ebacf8\"><strong><span data-lake-id=\"u92fc480d\" id=\"u92fc480d\">for</span></strong></code><strong><span data-lake-id=\"ucc0b6f45\" id=\"ucc0b6f45\"> 循环不能正常工作， 确保是在一个 </span></strong><code data-lake-id=\"u8b91e433\" id=\"u8b91e433\"><strong><span data-lake-id=\"ue6b196b6\" id=\"ue6b196b6\">async</span></strong></code><strong><span data-lake-id=\"u4e4fe96d\" id=\"u4e4fe96d\"> 方法中使用。</span></strong><span data-lake-id=\"u5272aed2\" id=\"u5272aed2\"> 例如，要想在 </span><code data-lake-id=\"u7269212f\" id=\"u7269212f\"><span data-lake-id=\"ue4ea8c6b\" id=\"ue4ea8c6b\">main()</span></code><span data-lake-id=\"ud9b7c3a7\" id=\"ud9b7c3a7\"> 方法中使用异步 </span><code data-lake-id=\"u2150ef8a\" id=\"u2150ef8a\"><span data-lake-id=\"u8d5a6bd5\" id=\"u8d5a6bd5\">for</span></code><span data-lake-id=\"uf89f1f11\" id=\"uf89f1f11\"> 循环，则需要把 </span><code data-lake-id=\"ued72d787\" id=\"ued72d787\"><span data-lake-id=\"ua4c0fb32\" id=\"ua4c0fb32\">main()</span></code><span data-lake-id=\"uc6f9686e\" id=\"uc6f9686e\"> 方法的函数体标记为 </span><code data-lake-id=\"u3296813a\" id=\"u3296813a\"><span data-lake-id=\"u2b7a3fde\" id=\"u2b7a3fde\">async</span></code><span data-lake-id=\"ued7526bb\" id=\"ued7526bb\">：</span></p><p data-lake-id=\"496606b332d817f291c7281922d97bf1_p_410\" id=\"496606b332d817f291c7281922d97bf1_p_410\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22dart%22%2C%22code%22%3A%22main()%20async%20%7B%5Cn%20%20...%5Cn%20%20await%20for%20(var%20request%20in%20requestServer)%20%7B%5Cn%20%20%20%20handleRequest(request)%3B%5Cn%20%20%7D%5Cn%20%20...%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%226edc6f01%22%7D\"></card>",
  "public": 0,
  "status": 1,
  "likes_count": 0,
  "read_count": 0,
  "hits": 0,
  "comments_count": 0,
  "word_count": 6999,
  "created_at": "2020-08-10T05:33:48.000Z",
  "updated_at": "2022-03-13T09:51:00.000Z",
  "content_updated_at": "2022-03-03T14:53:53.000Z",
  "published_at": "2022-03-03T14:53:53.000Z",
  "first_published_at": "2020-08-10T05:33:48.000Z",
  "book": {
    "id": 25332177,
    "type": "Book",
    "slug": "rddgev",
    "name": "编程语言文档索引",
    "user_id": 732231,
    "description": "编程语言索引，包括 TypeScript、Java、Go、Python、Rust 等",
    "toc_yml": "- type: META\n  count: 5\n  display_level: all\n  tail_type: UPDATED_AT\n  base_version_id: 184929216\n  published: true\n  max_level: 0\n  last_updated_at: 2022-03-13T09:52:32.300Z\n  version_id: 184929559\n- type: DOC\n  title: 编程语言-TypeScript\n  uuid: FwvX9pidpAMJn6C9\n  url: gchdc2\n  prev_uuid: ''\n  sibling_uuid: cTDEcvFz8KdXe20O\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 11431971\n  level: 0\n  id: 11431971\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 编程语言-Go\n  uuid: cTDEcvFz8KdXe20O\n  url: nfs1ot\n  prev_uuid: FwvX9pidpAMJn6C9\n  sibling_uuid: tTb_EGmxaoMx9Tgt\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 11465797\n  level: 0\n  id: 11465797\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 编程语言-Dart\n  uuid: tTb_EGmxaoMx9Tgt\n  url: thzcqg\n  prev_uuid: cTDEcvFz8KdXe20O\n  sibling_uuid: N3ArLJkkmSfG_DzQ\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 11465876\n  level: 0\n  id: 11465876\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 编程语言-Python\n  uuid: N3ArLJkkmSfG_DzQ\n  url: imkkor\n  prev_uuid: tTb_EGmxaoMx9Tgt\n  sibling_uuid: pMTkmm33plfQ2Iqz\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 68170469\n  level: 0\n  id: 68170469\n  open_window: 0\n  visible: 0\n- type: DOC\n  title: 编程语言-Rust\n  uuid: pMTkmm33plfQ2Iqz\n  url: hrfu26\n  prev_uuid: N3ArLJkkmSfG_DzQ\n  sibling_uuid: ''\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 68170489\n  level: 0\n  id: 68170489\n  open_window: 0\n  visible: 0\n",
    "creator_id": 732231,
    "public": 0,
    "items_count": 5,
    "likes_count": 0,
    "watches_count": 1,
    "content_updated_at": "2022-03-13T09:52:32.342Z",
    "created_at": "2022-03-13T09:48:44.000Z",
    "updated_at": "2022-06-08T17:51:51.000Z",
    "user": {
      "id": 732231,
      "type": "User",
      "login": "wcywxq",
      "name": "magic",
      "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/732231/1606968271774-avatar/886ad88b-d2cc-4c9e-a674-f70eb51a679c.png",
      "books_count": 21,
      "public_books_count": 0,
      "followers_count": 0,
      "following_count": 0,
      "public": 1,
      "description": null,
      "created_at": "2020-01-08T14:21:31.000Z",
      "updated_at": "2023-11-22T20:13:30.000Z",
      "work_id": "",
      "_serializer": "v2.user"
    },
    "namespace": "wcywxq/rddgev",
    "_serializer": "v2.book"
  },
  "user": {
    "id": 732231,
    "type": "User",
    "login": "wcywxq",
    "name": "magic",
    "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/732231/1606968271774-avatar/886ad88b-d2cc-4c9e-a674-f70eb51a679c.png",
    "books_count": 21,
    "public_books_count": 0,
    "followers_count": 0,
    "following_count": 0,
    "public": 1,
    "description": null,
    "created_at": "2020-01-08T14:21:31.000Z",
    "updated_at": "2023-11-22T20:13:30.000Z",
    "work_id": "",
    "_serializer": "v2.user"
  },
  "tags": [],
  "latest_version_id": 848311220,
  "creator": {
    "id": 732231,
    "type": "User",
    "login": "wcywxq",
    "name": "magic",
    "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/732231/1606968271774-avatar/886ad88b-d2cc-4c9e-a674-f70eb51a679c.png",
    "books_count": 21,
    "public_books_count": 0,
    "followers_count": 0,
    "following_count": 0,
    "public": 1,
    "description": null,
    "created_at": "2020-01-08T14:21:31.000Z",
    "updated_at": "2023-11-22T20:13:30.000Z",
    "work_id": "",
    "_serializer": "v2.user"
  },
  "_serializer": "v2.doc_detail"
}