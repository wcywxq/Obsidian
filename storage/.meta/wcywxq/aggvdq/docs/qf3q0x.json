{
  "id": 75039167,
  "slug": "qf3q0x",
  "title": "小程序包体积优化",
  "description": "背景微信对小程序包体积的要求是总体积不得超过 12M，主包及单个分包体积不得超过 2M，支付宝对与小程序包体积的计算方式虽和微信略有差别，不过整体大同小异在 18 至 19 年初，滴滴出行小程序里承载的业务只有网约车，且业务需求较少，在主包内都可以搞定。但是在下半年时，为了将微信钱包、支付宝九...",
  "cover": "https://cdn.nlark.com/yuque/0/2022/png/732231/1650900285959-8bdd0433-9c77-41d7-97dd-0ea90b5741ff.png",
  "user_id": 732231,
  "book_id": 24987782,
  "last_editor_id": 732231,
  "format": "lake",
  "body_draft": "<!doctype html><div class=\"lake-content\" typography=\"classic\"><h2 id=\"XmdX7\"><span class=\"ne-text\">背景</span></h2><p id=\"ue951cc53\" class=\"ne-p\"><span class=\"ne-text\">微信对小程序包体积的要求是总体积不得超过 12M，主包及单个分包体积不得超过 2M，支付宝对与小程序包体积的计算方式虽和微信略有差别，不过整体大同小异</span></p><p id=\"u685897af\" class=\"ne-p\"><span class=\"ne-text\"></span></p><p id=\"u9a7e880f\" class=\"ne-p\"><span class=\"ne-text\">在 18 至 19 年初，滴滴出行小程序里承载的业务只有网约车，且业务需求较少，在主包内都可以搞定。但是在下半年时，为了将</span><strong><span class=\"ne-text\">微信钱包</span></strong><span class=\"ne-text\">、</span><strong><span class=\"ne-text\">支付宝九宫格</span></strong><span class=\"ne-text\">入口迁移到小程序，小程序开始新增诸如</span><strong><span class=\"ne-text\">公交</span></strong><span class=\"ne-text\">、</span><strong><span class=\"ne-text\">代价</span></strong><span class=\"ne-text\">、</span><strong><span class=\"ne-text\">车服</span></strong><span class=\"ne-text\">、</span><strong><span class=\"ne-text\">单车</span></strong><span class=\"ne-text\">、</span><strong><span class=\"ne-text\">顺风车</span></strong><span class=\"ne-text\">等众多业务线，同时网约车的业务需求也要做全面的补齐，业务量和代码量一起呈爆炸式增长</span></p><h3 id=\"jNchT\"><span class=\"ne-text\">业务</span></h3><h4 id=\"O8X6N\"><span class=\"ne-text\">高频页面</span></h4><ul class=\"ne-ul\"><li id=\"u2beba0a0\"><span class=\"ne-text\">首页</span></li></ul><p id=\"uf9e771d8\" class=\"ne-p\"><span class=\"ne-text\">在滴滴出行的产品逻辑，所有业务线的表达逻辑都放在首页承载，为了良好的切换体验，在首页采用了</span><strong><span class=\"ne-text\">单页顶导</span></strong><span class=\"ne-text\">的方案进行业务线展示。即每个业务线在首页中提供了一个需求表达组件，当用户切换顶导业务线后，切换出对应的业务线组件。(在这种设计下，所有业务线的需求表达逻辑都几种在首页这个单一页面中，导致在业务迭代过程中，主包体积迅速增长，很快达到了 2M 上下，对后续的业务迭代与发展带来巨大阻碍)</span></p><ul class=\"ne-ul\"><li id=\"ub050e92c\"><span class=\"ne-text\">订单详情页</span></li></ul><p id=\"u9ece1667\" class=\"ne-p\"><span class=\"ne-text\">各个业务线的订单详情页则承载了具体的出行订单展示逻辑</span></p><h4 id=\"EKVtH\"><span class=\"ne-text\">功能页面</span></h4><ul class=\"ne-ul\"><li id=\"u42af44c8\"><span class=\"ne-text\">个人中心</span></li><li id=\"u344a4d22\"><span class=\"ne-text\">营销页面</span></li><li id=\"u7e6828c7\"><span class=\"ne-text\">设置</span></li><li id=\"uaee20a3d\"><span class=\"ne-text\">历史行程</span></li></ul><h4 id=\"bj8nN\"><span class=\"ne-text\">出行业务</span></h4><ul class=\"ne-ul\"><li id=\"ua34d9ee1\"><span class=\"ne-text\">快车</span></li><li id=\"udc43dd83\"><span class=\"ne-text\">专车</span></li><li id=\"u5cfd3f73\"><span class=\"ne-text\">出租车</span></li><li id=\"ubedcad5d\"><span class=\"ne-text\">豪华车</span></li><li id=\"ubd1bf9ad\"><span class=\"ne-text\">拼车</span></li><li id=\"u559cfd92\"><span class=\"ne-text\">单车</span></li><li id=\"u09af0d15\"><span class=\"ne-text\">代驾</span></li><li id=\"ua7d8358d\"><span class=\"ne-text\">顺风车</span></li><li id=\"u2cb5b545\"><span class=\"ne-text\">公交</span></li><li id=\"u7f61fb71\"><span class=\"ne-text\">车生活</span></li></ul><h2 id=\"LfXY9\"><span class=\"ne-text\">体积控制</span></h2><h3 id=\"cfbSM\"><span class=\"ne-text\">基础优化手段</span></h3><p id=\"u17ced973\" class=\"ne-p\"><span class=\"ne-text\">对于小程序来说，基础包体积优化手段包括</span></p><ul class=\"ne-ul\"><li id=\"u9c2bcf59\"><span class=\"ne-text\">资源压缩</span></li><li id=\"ub2a0b159\"><span class=\"ne-text\">去除代码冗余</span></li><li id=\"u86f33908\"><span class=\"ne-text\">资源 cdn 化</span></li><li id=\"uf4381a32\"><span class=\"ne-text\">异步加载</span></li></ul><p id=\"uee35d78f\" class=\"ne-p\"><span class=\"ne-text\"></span></p><p id=\"uf4e69ad4\" class=\"ne-p\"><span class=\"ne-text\">mpx 框架的编译构建完全基于 webpack，兼容 webpack 内部生态，天然可以使用 webpack 提供的能力对包体积进行优化</span></p><p id=\"u91236830\" class=\"ne-p\"><span class=\"ne-text\"></span></p><p id=\"ub83a7d29\" class=\"ne-p\"><span class=\"ne-text\">小程序中支持部分静态资源(如图像视频等)使用 cdn 地址加载，我们会尽可能的将相关的资源压缩后放到 cdn 上，避免这部分资源对包体积的占用</span></p><p id=\"u2aa37001\" class=\"ne-p\"><span class=\"ne-text\"></span></p><p id=\"u70fc31e6\" class=\"ne-p\"><span class=\"ne-text\">小程序场景下无法像 web 可以使用 script 标签便捷地进行异步加载，但是小程序平台后期纷纷支持了</span><strong><span class=\"ne-text\">分包加载</span></strong><span class=\"ne-text\">的方案来实现该能力，由于分包加载是小程序特有的技术规范，webpack 无法直接支持，因此 mpx 框架专门针对该技术规范进行了良好的适配支持</span></p><p id=\"uaba8f2af\" class=\"ne-p\"><span class=\"ne-text\"></span></p><p id=\"u17a8114a\" class=\"ne-p\"><span class=\"ne-text\">除此之外，mpx 框架还针对小程序场景进行了许多包体积优化的适配工作，如尽可能减少框架运行时包体积占用(压缩后占用 56kb)，对引用到的页面/组件按需进行打包构建，声明公共样式进行样式复用，分包内公共模块抽取等</span></p><p id=\"uf320156c\" class=\"ne-p\"><span class=\"ne-text\"></span></p><p id=\"u8c8d99c3\" class=\"ne-p\"><span class=\"ne-text\">在 mpx 框架的这些能力的支持下，基本不需要额外配置就能构建出一个经过初步优化的小程序包</span></p><p id=\"u10128299\" class=\"ne-p\"><span class=\"ne-text\"></span></p><h3 id=\"Br7lP\"><span class=\"ne-text\">分析体积</span></h3><p id=\"uee73bf45\" class=\"ne-p\"><span class=\"ne-text\">虽然框架已经提供了许多在体积功能方面的优化，但是随着业务迭代我们发现主包体积依然偏大。我们可以通过使用 webpack-bundle-analyzer 来查看各个模块的大小占比分析图</span></p><p id=\"uf8fd6a1d\" class=\"ne-p\"><span class=\"ne-text\"></span></p><p id=\"u506bd1a1\" class=\"ne-p\"><span class=\"ne-text\">另外，在项目中一直是采用源码编译的，这可以让整个项目里的公共依赖实现仅有一份就可一起共用。简而言之，也有助于减少项目代码体积</span></p><p id=\"u6b5333a6\" class=\"ne-p\"><br></p><p id=\"u6339c542\" class=\"ne-p\"><span class=\"ne-text\">要完美发挥源码编译的效果，需要上下游一起建立整套源码编译生态，如主项目的依赖方在声明公用依赖时，就应该使用 peerDep 或者 devDep 来声明一些公有依赖，这些共有依赖应该在主项目中统一声明，避免因版本不同装出两份公共依赖，那样反而会增大体积。由于滴滴出行主小程序设计业务线及团队众多，部分团队可能并不知道这件事情，因此代码在实际上可能出现上述劣化场景。而依照分析图，可以容易地发现这种问题，这样可以推动相关团队清楚这些重复依赖</span></p><p id=\"u0c1a3bdc\" class=\"ne-p\"><span class=\"ne-text\"></span></p><p id=\"u69f68b9b\" class=\"ne-p\"><span class=\"ne-text\">同时，我们依照体积分析图，对其中体积较大的文件重点分析，进行了一轮业务代码梳理和精简，删除了一些无用代码，精简了 websocket 的消息题描述文件等</span></p><h3 id=\"E8hIL\"><span class=\"ne-text\">配置分包</span></h3><p id=\"u2441afb5\" class=\"ne-p\"><span class=\"ne-text\">分包是小程序给出的类似 web 异步引入的一个方案，把一些初始进入时不需要的页面可以放进分包里，跳转到对应页面时才去下载分包，将这些页面及其附属资源放到分包里可以有效减少主包体积</span></p><p id=\"u121c1cca\" class=\"ne-p\"><span class=\"ne-text\"></span></p><p id=\"uc79e307c\" class=\"ne-p\"><span class=\"ne-text\">mpx 框架早期对分包规范进行了初步支持，资源访问规则保持和微信一致，主要根据资源存放的目录判断应该输入到主包还是分包。有了这个能力后，我们把行程中业务抽离到了分包，大概抽离了 200 多 kb 左右的空间</span></p><p id=\"uace124c3\" class=\"ne-p\"><span class=\"ne-text\"></span></p><p id=\"u6babe5ec\" class=\"ne-p\"><span class=\"ne-text\">有了行程中的成功拆分后，我们开始对所有的非首页代码进行分包操作，比如起终点选择和个人中心。以及部分业务线的接入是通过 npm 的方式接入，我们也尽可能地将这些业务线的所有非首页代码放到了分包</span></p><p id=\"u11114186\" class=\"ne-p\"><span class=\"ne-text\"></span></p><p id=\"u2092a11f\" class=\"ne-p\"><span class=\"ne-text\">另外，在 mpx 早期设计时，使用了 packages 形式的业务组合方案，可以很方便地让业务独立开发，也可以方便的整合，这和微信的分包 json 配置设计和 packages 很类似，因此在此基础上支持了微信的分包，用户仅需在原 packages 基础上加上 query 标记分包的名字即可</span></p><p id=\"ued99bb5e\" class=\"ne-p\"><span class=\"ne-text\"></span></p><p id=\"u09a1cea0\" class=\"ne-p\"><img src=\"https://cdn.nlark.com/yuque/0/2022/png/732231/1650900285959-8bdd0433-9c77-41d7-97dd-0ea90b5741ff.png\" width=\"850\" id=\"u339eb8ca\" class=\"ne-image\"></p><p id=\"u91915c83\" class=\"ne-p\"><span class=\"ne-text\">初期拆分工作进行完毕后，总计从主包拆分了差不多 400kb 左右的空间到分包中</span></p><h3 id=\"LJxx0\"><span class=\"ne-text\">分包资源精细化管理</span></h3><p id=\"u3ab42ce2\" class=\"ne-p\"><span class=\"ne-text\">在 mpx 框架初期的分包处理规则是完全按照微信的方式，把在分包路径下的资源收集到分包里，而 npm 管理的资源因为都在 node_modules 目录下，不属于任何分包路径，则会被全部收集进主包</span></p><p id=\"uc48586f2\" class=\"ne-p\"><span class=\"ne-text\"></span></p><p id=\"u45cf3614\" class=\"ne-p\"><span class=\"ne-text\">例如行程中模块的业务，虽然该模块自有的状态管理 store 整个都在行程中分包路径下，会被收集到行程中分包中。但是行程中还用到了封装好的 didi-socket 库，这个库是公共的 npm 包，即使它只在行程中分包内被使用，但由于它的路径是在 node_modules 下的，因此将会被收集到主包里</span></p><p id=\"uc56f8947\" class=\"ne-p\"><span class=\"ne-text\"></span></p><p id=\"ua64c26a1\" class=\"ne-p\"><span class=\"ne-text\">随着业务迭代，后续大量业务线的接入都是通过 npm 来进行的，就会有大量的 npm 资源，他们都在 node_modules 目录下，因此全部会被收集到主包中，因此 mpx 框架进行了一系列改造：</span></p><ol class=\"ne-ol\"><li id=\"uab27155d\"><span class=\"ne-text\">在构建的依赖收集过程中，我们会对收集到的依赖搭上标记，记录它是被哪些分包引入的，一旦它只有一个分包引入，那么它就会被输出到这个分包中</span></li><li id=\"uebabe96e\"><span class=\"ne-text\">我们会根据用户定义的分包配置，自动在 SplitChunksPlugin 中生成各个分包的 cacheGroups，把分包中的复用模块抽取到分包下的 bundle 中</span></li><li id=\"ubcd3de5e\"><span class=\"ne-text\">对于组件和静态资源，如果他们被多个分包所引用并且未在主包中引用，为了确保主包体积最优，这些资源将产生多份副本分别输出到对应分包中，而不占用主包体积</span></li></ol><p id=\"u194e117e\" class=\"ne-p\"><span class=\"ne-text\"></span></p><p id=\"u950e7035\" class=\"ne-p\"><span class=\"ne-text\">因此，无论分包中引用的资源原本在什么位置，最终输出时都会尽可能将其输出到 dist 的分包目录下，避免占用主包空间。最终我们可以讲业务线分包中引用的 npm 资源成功输出到其所在的分包目录下</span></p><h3 id=\"jnUMw\"><span class=\"ne-text\">封面方案</span></h3><p id=\"u6adc2024\" class=\"ne-p\"><span class=\"ne-text\">因为滴滴出行小程序需要替换微信/支付宝里原有的 webapp 入口，小程序接入的业务线迅速增加，包体积迅速增长</span></p><p id=\"uefd55d4d\" class=\"ne-p\"><span class=\"ne-text\"></span></p><p id=\"uda9eb15a\" class=\"ne-p\"><span class=\"ne-text\">这个部分体积增长的主要原因是：所有业务先都需要接入到主页来展示，这是因为业务特点所决定的，因为滴滴出行提供了丰富的出行产品线，包括快车、专车、出租车、豪华车、拼车、单车、代驾、顺风车等产品。用户可能需要反复切换选型，这个过程还需要保留起终点车型之类的信息，必须是</span><strong><span class=\"ne-text\">一个页面内切换组件 + 一整套非常复杂的大型状态管理</span></strong><span class=\"ne-text\">才能比较流畅顺滑地实现。而不能像一些电商、信息平台一样，将不同的功能拆分到不同页面，让用户通过首页的菜单进入子页面再进行操作，首页只承载入口，只有较少的业务逻辑，分包处理起来就会容易很多</span></p><p id=\"uc8a6b4bd\" class=\"ne-p\"><span class=\"ne-text\"></span></p><p id=\"u8a875f80\" class=\"ne-p\"><span class=\"ne-text\">因此各个业务线都需要提供首页组件进行接入，这个组件会在首页被用到，所以无论如何也无法拆分到分包里。最终，整个首页主包部分的体积可以分为两个部分：基础库 + 业务代码，二者的体积占比大概是 1M : 1M</span></p><p id=\"u6b2af281\" class=\"ne-p\"><span class=\"ne-text\"></span></p><p id=\"ua8143708\" class=\"ne-p\"><span class=\"ne-text\">如此庞大的基础库体积主要因为滴滴出行的业务线以及业务团队众多，各方均拥有一些自己的基础依赖，如网约车依赖的长连接通信 pb 数据描述文件，地图会赖大量计算库，顺风车会依赖 cml 框架运行时，代驾依赖了通信网关库，包括公用的组件库和 polyfill 等</span></p><p id=\"u6202efda\" class=\"ne-p\"><span class=\"ne-text\"></span></p><p id=\"uc924f634\" class=\"ne-p\"><span class=\"ne-text\">因此滴滴出行小程序在当时已经无法使用纯技术方案在短期内快速解决问题了，于是我们做了一个工程架构调整，也可以叫做</span><strong><span class=\"ne-text\">封皮页</span></strong><span class=\"ne-text\">方案，解决了主包问题</span></p><p id=\"uda758b00\" class=\"ne-p\"><span class=\"ne-text\"></span></p><p id=\"u8b9c6e00\" class=\"ne-p\"><span class=\"ne-text\">封皮页方案简单来说，就是做一个带有滴滴出行 logo 的封面作为启动页面，一旦页面加载，就会立即跳转到另一个页面，这个页面真正用来承载业务，并且它被放到分包里</span></p><p id=\"u9cc03238\" class=\"ne-p\"><span class=\"ne-text\"></span></p><p id=\"u5ae3a660\" class=\"ne-p\"><span class=\"ne-text\">这个操作的意义在于，主包里就只剩下了所有方案需要依赖的基础框架/库，而业务全部被抽离到了分包内</span></p><p id=\"u11e6b332\" class=\"ne-p\"><img src=\"https://cdn.nlark.com/yuque/0/2022/png/732231/1650901762867-6477f823-8c3d-4eef-9502-d48b6a7e1d86.png\" width=\"857\" id=\"u98d466a3\" class=\"ne-image\"></p><p id=\"ueba8d872\" class=\"ne-p\"><span class=\"ne-text\">这样一来，我们将可以有 2M 的主包空间来存放基础的公共库，有 2M 左右的分包来存放前面提出的滴滴出行集成各条业务线组件的 &quot;大首页&quot;。拆分后大概差不多有 1.2M 的主包，800k 的业务主分包</span></p><p id=\"u5e59958f\" class=\"ne-p\"><span class=\"ne-text\"></span></p><p id=\"u51f072ba\" class=\"ne-p\"><span class=\"ne-text\">这个改造最优的一点在于：后续的业务迭代产生的体积增长几乎全是在业务主分包内，剩下的 1.1M+ 的空间留给业务迭代还是比较充裕的，而主包的体积在理想条件下是可以长期保持不变的，这样就不会因为业务需求的不断开发反复导致主包体积临近超标，不再需要为主包体积感到焦虑</span></p><p id=\"ub92bf119\" class=\"ne-p\"><span class=\"ne-text\"></span></p><p id=\"u61f19528\" class=\"ne-p\"><span class=\"ne-text\">当然，可以看到，这个方案本身是没有消减任何体积的，只是把位置变换了一下。除此之外，这个封面页方案其实也存在一些缺陷，比如：首屏业务的展示会变慢，因为要加载的内容会变多，不过小程序本身有较好的缓存资源的能力，因此还算可以接受</span></p><p id=\"u7f50abef\" class=\"ne-p\"><span class=\"ne-text\"></span></p><p id=\"u8b0f64b3\" class=\"ne-p\"><span class=\"ne-text\">相比于因体积问题卡住需求迭代以及产品线的接入，目前这个方案至少能解决问题。后续也会持续跟进关注体积问题，看是否会有产品方案变更或者小程序本身给出一些解决方案来进一步优化这个部分</span></p><p id=\"ubb9dee2b\" class=\"ne-p\"><br></p><h4 id=\"JrZFv\"><span class=\"ne-text\">问题</span></h4><p id=\"ua07c2c36\" class=\"ne-p\"><span class=\"ne-text\">封皮页方案会大幅降低业务首屏展示速度，这是加载性能中最重要的指标项。新的分包异步化技术能够打破之前的分包资源访问限制，在经过充分的落地优化后，可以大幅降低必须放置在主包中的资源数量，而主包优化出来的体积则有望重新承载业务首页功能，将目前加载流程中的页面跳转和分包加载阶段完全移除，从而大幅提升业务首屏幕展示速度。(需要除微信平台外的其他平台也支持分包异步化能力)</span></p><p id=\"ub25231f1\" class=\"ne-p\"><span class=\"ne-text\"></span></p></div>",
  "body": "<a name=\"XmdX7\"></a>\n## 背景\n微信对小程序包体积的要求是总体积不得超过 12M，主包及单个分包体积不得超过 2M，支付宝对与小程序包体积的计算方式虽和微信略有差别，不过整体大同小异\n\n在 18 至 19 年初，滴滴出行小程序里承载的业务只有网约车，且业务需求较少，在主包内都可以搞定。但是在下半年时，为了将**微信钱包**、**支付宝九宫格**入口迁移到小程序，小程序开始新增诸如**公交**、**代价**、**车服**、**单车**、**顺风车**等众多业务线，同时网约车的业务需求也要做全面的补齐，业务量和代码量一起呈爆炸式增长\n<a name=\"jNchT\"></a>\n### 业务\n<a name=\"O8X6N\"></a>\n#### 高频页面\n\n- 首页\n\n在滴滴出行的产品逻辑，所有业务线的表达逻辑都放在首页承载，为了良好的切换体验，在首页采用了**单页顶导**的方案进行业务线展示。即每个业务线在首页中提供了一个需求表达组件，当用户切换顶导业务线后，切换出对应的业务线组件。(在这种设计下，所有业务线的需求表达逻辑都几种在首页这个单一页面中，导致在业务迭代过程中，主包体积迅速增长，很快达到了 2M 上下，对后续的业务迭代与发展带来巨大阻碍)\n\n- 订单详情页\n\n各个业务线的订单详情页则承载了具体的出行订单展示逻辑\n<a name=\"EKVtH\"></a>\n#### 功能页面\n\n- 个人中心\n- 营销页面\n- 设置\n- 历史行程\n<a name=\"bj8nN\"></a>\n#### 出行业务\n\n- 快车\n- 专车\n- 出租车\n- 豪华车\n- 拼车\n- 单车\n- 代驾\n- 顺风车\n- 公交\n- 车生活\n<a name=\"LfXY9\"></a>\n## 体积控制\n<a name=\"cfbSM\"></a>\n### 基础优化手段\n对于小程序来说，基础包体积优化手段包括\n\n- 资源压缩\n- 去除代码冗余\n- 资源 cdn 化\n- 异步加载\n\nmpx 框架的编译构建完全基于 webpack，兼容 webpack 内部生态，天然可以使用 webpack 提供的能力对包体积进行优化\n\n小程序中支持部分静态资源(如图像视频等)使用 cdn 地址加载，我们会尽可能的将相关的资源压缩后放到 cdn 上，避免这部分资源对包体积的占用\n\n小程序场景下无法像 web 可以使用 script 标签便捷地进行异步加载，但是小程序平台后期纷纷支持了**分包加载**的方案来实现该能力，由于分包加载是小程序特有的技术规范，webpack 无法直接支持，因此 mpx 框架专门针对该技术规范进行了良好的适配支持\n\n除此之外，mpx 框架还针对小程序场景进行了许多包体积优化的适配工作，如尽可能减少框架运行时包体积占用(压缩后占用 56kb)，对引用到的页面/组件按需进行打包构建，声明公共样式进行样式复用，分包内公共模块抽取等\n\n在 mpx 框架的这些能力的支持下，基本不需要额外配置就能构建出一个经过初步优化的小程序包\n\n<a name=\"Br7lP\"></a>\n### 分析体积\n虽然框架已经提供了许多在体积功能方面的优化，但是随着业务迭代我们发现主包体积依然偏大。我们可以通过使用 webpack-bundle-analyzer 来查看各个模块的大小占比分析图\n\n另外，在项目中一直是采用源码编译的，这可以让整个项目里的公共依赖实现仅有一份就可一起共用。简而言之，也有助于减少项目代码体积\n\n要完美发挥源码编译的效果，需要上下游一起建立整套源码编译生态，如主项目的依赖方在声明公用依赖时，就应该使用 peerDep 或者 devDep 来声明一些公有依赖，这些共有依赖应该在主项目中统一声明，避免因版本不同装出两份公共依赖，那样反而会增大体积。由于滴滴出行主小程序设计业务线及团队众多，部分团队可能并不知道这件事情，因此代码在实际上可能出现上述劣化场景。而依照分析图，可以容易地发现这种问题，这样可以推动相关团队清楚这些重复依赖\n\n同时，我们依照体积分析图，对其中体积较大的文件重点分析，进行了一轮业务代码梳理和精简，删除了一些无用代码，精简了 websocket 的消息题描述文件等\n<a name=\"E8hIL\"></a>\n### 配置分包\n分包是小程序给出的类似 web 异步引入的一个方案，把一些初始进入时不需要的页面可以放进分包里，跳转到对应页面时才去下载分包，将这些页面及其附属资源放到分包里可以有效减少主包体积\n\nmpx 框架早期对分包规范进行了初步支持，资源访问规则保持和微信一致，主要根据资源存放的目录判断应该输入到主包还是分包。有了这个能力后，我们把行程中业务抽离到了分包，大概抽离了 200 多 kb 左右的空间\n\n有了行程中的成功拆分后，我们开始对所有的非首页代码进行分包操作，比如起终点选择和个人中心。以及部分业务线的接入是通过 npm 的方式接入，我们也尽可能地将这些业务线的所有非首页代码放到了分包\n\n另外，在 mpx 早期设计时，使用了 packages 形式的业务组合方案，可以很方便地让业务独立开发，也可以方便的整合，这和微信的分包 json 配置设计和 packages 很类似，因此在此基础上支持了微信的分包，用户仅需在原 packages 基础上加上 query 标记分包的名字即可\n\n![image.png](https://cdn.nlark.com/yuque/0/2022/png/732231/1650900285959-8bdd0433-9c77-41d7-97dd-0ea90b5741ff.png#clientId=u048c0de6-e2fa-4&from=paste&height=314&id=u339eb8ca&originHeight=314&originWidth=850&originalType=binary&ratio=1&rotation=0&showTitle=false&size=253443&status=done&style=none&taskId=u3f89bbd7-0acc-4cdb-9959-b67beddb15c&title=&width=850)<br />初期拆分工作进行完毕后，总计从主包拆分了差不多 400kb 左右的空间到分包中\n<a name=\"LJxx0\"></a>\n### 分包资源精细化管理\n在 mpx 框架初期的分包处理规则是完全按照微信的方式，把在分包路径下的资源收集到分包里，而 npm 管理的资源因为都在 node_modules 目录下，不属于任何分包路径，则会被全部收集进主包\n\n例如行程中模块的业务，虽然该模块自有的状态管理 store 整个都在行程中分包路径下，会被收集到行程中分包中。但是行程中还用到了封装好的 didi-socket 库，这个库是公共的 npm 包，即使它只在行程中分包内被使用，但由于它的路径是在 node_modules 下的，因此将会被收集到主包里\n\n随着业务迭代，后续大量业务线的接入都是通过 npm 来进行的，就会有大量的 npm 资源，他们都在 node_modules 目录下，因此全部会被收集到主包中，因此 mpx 框架进行了一系列改造：\n\n1. 在构建的依赖收集过程中，我们会对收集到的依赖搭上标记，记录它是被哪些分包引入的，一旦它只有一个分包引入，那么它就会被输出到这个分包中\n2. 我们会根据用户定义的分包配置，自动在 SplitChunksPlugin 中生成各个分包的 cacheGroups，把分包中的复用模块抽取到分包下的 bundle 中\n3. 对于组件和静态资源，如果他们被多个分包所引用并且未在主包中引用，为了确保主包体积最优，这些资源将产生多份副本分别输出到对应分包中，而不占用主包体积\n\n因此，无论分包中引用的资源原本在什么位置，最终输出时都会尽可能将其输出到 dist 的分包目录下，避免占用主包空间。最终我们可以讲业务线分包中引用的 npm 资源成功输出到其所在的分包目录下\n<a name=\"jnUMw\"></a>\n### 封面方案\n因为滴滴出行小程序需要替换微信/支付宝里原有的 webapp 入口，小程序接入的业务线迅速增加，包体积迅速增长\n\n这个部分体积增长的主要原因是：所有业务先都需要接入到主页来展示，这是因为业务特点所决定的，因为滴滴出行提供了丰富的出行产品线，包括快车、专车、出租车、豪华车、拼车、单车、代驾、顺风车等产品。用户可能需要反复切换选型，这个过程还需要保留起终点车型之类的信息，必须是**一个页面内切换组件 + 一整套非常复杂的大型状态管理**才能比较流畅顺滑地实现。而不能像一些电商、信息平台一样，将不同的功能拆分到不同页面，让用户通过首页的菜单进入子页面再进行操作，首页只承载入口，只有较少的业务逻辑，分包处理起来就会容易很多\n\n因此各个业务线都需要提供首页组件进行接入，这个组件会在首页被用到，所以无论如何也无法拆分到分包里。最终，整个首页主包部分的体积可以分为两个部分：基础库 + 业务代码，二者的体积占比大概是 1M : 1M\n\n如此庞大的基础库体积主要因为滴滴出行的业务线以及业务团队众多，各方均拥有一些自己的基础依赖，如网约车依赖的长连接通信 pb 数据描述文件，地图会赖大量计算库，顺风车会依赖 cml 框架运行时，代驾依赖了通信网关库，包括公用的组件库和 polyfill 等\n\n因此滴滴出行小程序在当时已经无法使用纯技术方案在短期内快速解决问题了，于是我们做了一个工程架构调整，也可以叫做**封皮页**方案，解决了主包问题\n\n封皮页方案简单来说，就是做一个带有滴滴出行 logo 的封面作为启动页面，一旦页面加载，就会立即跳转到另一个页面，这个页面真正用来承载业务，并且它被放到分包里\n\n这个操作的意义在于，主包里就只剩下了所有方案需要依赖的基础框架/库，而业务全部被抽离到了分包内<br />![image.png](https://cdn.nlark.com/yuque/0/2022/png/732231/1650901762867-6477f823-8c3d-4eef-9502-d48b6a7e1d86.png#clientId=u048c0de6-e2fa-4&from=paste&height=320&id=u98d466a3&originHeight=320&originWidth=857&originalType=binary&ratio=1&rotation=0&showTitle=false&size=348631&status=done&style=none&taskId=u3956623e-08b6-4a23-b786-59e811c555a&title=&width=857)<br />这样一来，我们将可以有 2M 的主包空间来存放基础的公共库，有 2M 左右的分包来存放前面提出的滴滴出行集成各条业务线组件的 \"大首页\"。拆分后大概差不多有 1.2M 的主包，800k 的业务主分包\n\n这个改造最优的一点在于：后续的业务迭代产生的体积增长几乎全是在业务主分包内，剩下的 1.1M+ 的空间留给业务迭代还是比较充裕的，而主包的体积在理想条件下是可以长期保持不变的，这样就不会因为业务需求的不断开发反复导致主包体积临近超标，不再需要为主包体积感到焦虑\n\n当然，可以看到，这个方案本身是没有消减任何体积的，只是把位置变换了一下。除此之外，这个封面页方案其实也存在一些缺陷，比如：首屏业务的展示会变慢，因为要加载的内容会变多，不过小程序本身有较好的缓存资源的能力，因此还算可以接受\n\n相比于因体积问题卡住需求迭代以及产品线的接入，目前这个方案至少能解决问题。后续也会持续跟进关注体积问题，看是否会有产品方案变更或者小程序本身给出一些解决方案来进一步优化这个部分\n\n<a name=\"JrZFv\"></a>\n#### 问题\n封皮页方案会大幅降低业务首屏展示速度，这是加载性能中最重要的指标项。新的分包异步化技术能够打破之前的分包资源访问限制，在经过充分的落地优化后，可以大幅降低必须放置在主包中的资源数量，而主包优化出来的体积则有望重新承载业务首页功能，将目前加载流程中的页面跳转和分包加载阶段完全移除，从而大幅提升业务首屏幕展示速度。(需要除微信平台外的其他平台也支持分包异步化能力)\n\n",
  "body_html": "<!doctype html><div class=\"lake-content\" typography=\"classic\"><h2 id=\"XmdX7\"><span class=\"ne-text\">背景</span></h2><p id=\"ue951cc53\" class=\"ne-p\"><span class=\"ne-text\">微信对小程序包体积的要求是总体积不得超过 12M，主包及单个分包体积不得超过 2M，支付宝对与小程序包体积的计算方式虽和微信略有差别，不过整体大同小异</span></p><p id=\"u685897af\" class=\"ne-p\"><span class=\"ne-text\"></span></p><p id=\"u9a7e880f\" class=\"ne-p\"><span class=\"ne-text\">在 18 至 19 年初，滴滴出行小程序里承载的业务只有网约车，且业务需求较少，在主包内都可以搞定。但是在下半年时，为了将</span><strong><span class=\"ne-text\">微信钱包</span></strong><span class=\"ne-text\">、</span><strong><span class=\"ne-text\">支付宝九宫格</span></strong><span class=\"ne-text\">入口迁移到小程序，小程序开始新增诸如</span><strong><span class=\"ne-text\">公交</span></strong><span class=\"ne-text\">、</span><strong><span class=\"ne-text\">代价</span></strong><span class=\"ne-text\">、</span><strong><span class=\"ne-text\">车服</span></strong><span class=\"ne-text\">、</span><strong><span class=\"ne-text\">单车</span></strong><span class=\"ne-text\">、</span><strong><span class=\"ne-text\">顺风车</span></strong><span class=\"ne-text\">等众多业务线，同时网约车的业务需求也要做全面的补齐，业务量和代码量一起呈爆炸式增长</span></p><h3 id=\"jNchT\"><span class=\"ne-text\">业务</span></h3><h4 id=\"O8X6N\"><span class=\"ne-text\">高频页面</span></h4><ul class=\"ne-ul\"><li id=\"u2beba0a0\"><span class=\"ne-text\">首页</span></li></ul><p id=\"uf9e771d8\" class=\"ne-p\"><span class=\"ne-text\">在滴滴出行的产品逻辑，所有业务线的表达逻辑都放在首页承载，为了良好的切换体验，在首页采用了</span><strong><span class=\"ne-text\">单页顶导</span></strong><span class=\"ne-text\">的方案进行业务线展示。即每个业务线在首页中提供了一个需求表达组件，当用户切换顶导业务线后，切换出对应的业务线组件。(在这种设计下，所有业务线的需求表达逻辑都几种在首页这个单一页面中，导致在业务迭代过程中，主包体积迅速增长，很快达到了 2M 上下，对后续的业务迭代与发展带来巨大阻碍)</span></p><ul class=\"ne-ul\"><li id=\"ub050e92c\"><span class=\"ne-text\">订单详情页</span></li></ul><p id=\"u9ece1667\" class=\"ne-p\"><span class=\"ne-text\">各个业务线的订单详情页则承载了具体的出行订单展示逻辑</span></p><h4 id=\"EKVtH\"><span class=\"ne-text\">功能页面</span></h4><ul class=\"ne-ul\"><li id=\"u42af44c8\"><span class=\"ne-text\">个人中心</span></li><li id=\"u344a4d22\"><span class=\"ne-text\">营销页面</span></li><li id=\"u7e6828c7\"><span class=\"ne-text\">设置</span></li><li id=\"uaee20a3d\"><span class=\"ne-text\">历史行程</span></li></ul><h4 id=\"bj8nN\"><span class=\"ne-text\">出行业务</span></h4><ul class=\"ne-ul\"><li id=\"ua34d9ee1\"><span class=\"ne-text\">快车</span></li><li id=\"udc43dd83\"><span class=\"ne-text\">专车</span></li><li id=\"u5cfd3f73\"><span class=\"ne-text\">出租车</span></li><li id=\"ubedcad5d\"><span class=\"ne-text\">豪华车</span></li><li id=\"ubd1bf9ad\"><span class=\"ne-text\">拼车</span></li><li id=\"u559cfd92\"><span class=\"ne-text\">单车</span></li><li id=\"u09af0d15\"><span class=\"ne-text\">代驾</span></li><li id=\"ua7d8358d\"><span class=\"ne-text\">顺风车</span></li><li id=\"u2cb5b545\"><span class=\"ne-text\">公交</span></li><li id=\"u7f61fb71\"><span class=\"ne-text\">车生活</span></li></ul><h2 id=\"LfXY9\"><span class=\"ne-text\">体积控制</span></h2><h3 id=\"cfbSM\"><span class=\"ne-text\">基础优化手段</span></h3><p id=\"u17ced973\" class=\"ne-p\"><span class=\"ne-text\">对于小程序来说，基础包体积优化手段包括</span></p><ul class=\"ne-ul\"><li id=\"u9c2bcf59\"><span class=\"ne-text\">资源压缩</span></li><li id=\"ub2a0b159\"><span class=\"ne-text\">去除代码冗余</span></li><li id=\"u86f33908\"><span class=\"ne-text\">资源 cdn 化</span></li><li id=\"uf4381a32\"><span class=\"ne-text\">异步加载</span></li></ul><p id=\"uee35d78f\" class=\"ne-p\"><span class=\"ne-text\"></span></p><p id=\"uf4e69ad4\" class=\"ne-p\"><span class=\"ne-text\">mpx 框架的编译构建完全基于 webpack，兼容 webpack 内部生态，天然可以使用 webpack 提供的能力对包体积进行优化</span></p><p id=\"u91236830\" class=\"ne-p\"><span class=\"ne-text\"></span></p><p id=\"ub83a7d29\" class=\"ne-p\"><span class=\"ne-text\">小程序中支持部分静态资源(如图像视频等)使用 cdn 地址加载，我们会尽可能的将相关的资源压缩后放到 cdn 上，避免这部分资源对包体积的占用</span></p><p id=\"u2aa37001\" class=\"ne-p\"><span class=\"ne-text\"></span></p><p id=\"u70fc31e6\" class=\"ne-p\"><span class=\"ne-text\">小程序场景下无法像 web 可以使用 script 标签便捷地进行异步加载，但是小程序平台后期纷纷支持了</span><strong><span class=\"ne-text\">分包加载</span></strong><span class=\"ne-text\">的方案来实现该能力，由于分包加载是小程序特有的技术规范，webpack 无法直接支持，因此 mpx 框架专门针对该技术规范进行了良好的适配支持</span></p><p id=\"uaba8f2af\" class=\"ne-p\"><span class=\"ne-text\"></span></p><p id=\"u17a8114a\" class=\"ne-p\"><span class=\"ne-text\">除此之外，mpx 框架还针对小程序场景进行了许多包体积优化的适配工作，如尽可能减少框架运行时包体积占用(压缩后占用 56kb)，对引用到的页面/组件按需进行打包构建，声明公共样式进行样式复用，分包内公共模块抽取等</span></p><p id=\"uf320156c\" class=\"ne-p\"><span class=\"ne-text\"></span></p><p id=\"u8c8d99c3\" class=\"ne-p\"><span class=\"ne-text\">在 mpx 框架的这些能力的支持下，基本不需要额外配置就能构建出一个经过初步优化的小程序包</span></p><p id=\"u10128299\" class=\"ne-p\"><span class=\"ne-text\"></span></p><h3 id=\"Br7lP\"><span class=\"ne-text\">分析体积</span></h3><p id=\"uee73bf45\" class=\"ne-p\"><span class=\"ne-text\">虽然框架已经提供了许多在体积功能方面的优化，但是随着业务迭代我们发现主包体积依然偏大。我们可以通过使用 webpack-bundle-analyzer 来查看各个模块的大小占比分析图</span></p><p id=\"uf8fd6a1d\" class=\"ne-p\"><span class=\"ne-text\"></span></p><p id=\"u506bd1a1\" class=\"ne-p\"><span class=\"ne-text\">另外，在项目中一直是采用源码编译的，这可以让整个项目里的公共依赖实现仅有一份就可一起共用。简而言之，也有助于减少项目代码体积</span></p><p id=\"u6b5333a6\" class=\"ne-p\"><br></p><p id=\"u6339c542\" class=\"ne-p\"><span class=\"ne-text\">要完美发挥源码编译的效果，需要上下游一起建立整套源码编译生态，如主项目的依赖方在声明公用依赖时，就应该使用 peerDep 或者 devDep 来声明一些公有依赖，这些共有依赖应该在主项目中统一声明，避免因版本不同装出两份公共依赖，那样反而会增大体积。由于滴滴出行主小程序设计业务线及团队众多，部分团队可能并不知道这件事情，因此代码在实际上可能出现上述劣化场景。而依照分析图，可以容易地发现这种问题，这样可以推动相关团队清楚这些重复依赖</span></p><p id=\"u0c1a3bdc\" class=\"ne-p\"><span class=\"ne-text\"></span></p><p id=\"u69f68b9b\" class=\"ne-p\"><span class=\"ne-text\">同时，我们依照体积分析图，对其中体积较大的文件重点分析，进行了一轮业务代码梳理和精简，删除了一些无用代码，精简了 websocket 的消息题描述文件等</span></p><h3 id=\"E8hIL\"><span class=\"ne-text\">配置分包</span></h3><p id=\"u2441afb5\" class=\"ne-p\"><span class=\"ne-text\">分包是小程序给出的类似 web 异步引入的一个方案，把一些初始进入时不需要的页面可以放进分包里，跳转到对应页面时才去下载分包，将这些页面及其附属资源放到分包里可以有效减少主包体积</span></p><p id=\"u121c1cca\" class=\"ne-p\"><span class=\"ne-text\"></span></p><p id=\"uc79e307c\" class=\"ne-p\"><span class=\"ne-text\">mpx 框架早期对分包规范进行了初步支持，资源访问规则保持和微信一致，主要根据资源存放的目录判断应该输入到主包还是分包。有了这个能力后，我们把行程中业务抽离到了分包，大概抽离了 200 多 kb 左右的空间</span></p><p id=\"uace124c3\" class=\"ne-p\"><span class=\"ne-text\"></span></p><p id=\"u6babe5ec\" class=\"ne-p\"><span class=\"ne-text\">有了行程中的成功拆分后，我们开始对所有的非首页代码进行分包操作，比如起终点选择和个人中心。以及部分业务线的接入是通过 npm 的方式接入，我们也尽可能地将这些业务线的所有非首页代码放到了分包</span></p><p id=\"u11114186\" class=\"ne-p\"><span class=\"ne-text\"></span></p><p id=\"u2092a11f\" class=\"ne-p\"><span class=\"ne-text\">另外，在 mpx 早期设计时，使用了 packages 形式的业务组合方案，可以很方便地让业务独立开发，也可以方便的整合，这和微信的分包 json 配置设计和 packages 很类似，因此在此基础上支持了微信的分包，用户仅需在原 packages 基础上加上 query 标记分包的名字即可</span></p><p id=\"ued99bb5e\" class=\"ne-p\"><span class=\"ne-text\"></span></p><p id=\"u09a1cea0\" class=\"ne-p\"><img src=\"https://cdn.nlark.com/yuque/0/2022/png/732231/1650900285959-8bdd0433-9c77-41d7-97dd-0ea90b5741ff.png\" width=\"850\" id=\"u339eb8ca\" class=\"ne-image\"></p><p id=\"u91915c83\" class=\"ne-p\"><span class=\"ne-text\">初期拆分工作进行完毕后，总计从主包拆分了差不多 400kb 左右的空间到分包中</span></p><h3 id=\"LJxx0\"><span class=\"ne-text\">分包资源精细化管理</span></h3><p id=\"u3ab42ce2\" class=\"ne-p\"><span class=\"ne-text\">在 mpx 框架初期的分包处理规则是完全按照微信的方式，把在分包路径下的资源收集到分包里，而 npm 管理的资源因为都在 node_modules 目录下，不属于任何分包路径，则会被全部收集进主包</span></p><p id=\"uc48586f2\" class=\"ne-p\"><span class=\"ne-text\"></span></p><p id=\"u45cf3614\" class=\"ne-p\"><span class=\"ne-text\">例如行程中模块的业务，虽然该模块自有的状态管理 store 整个都在行程中分包路径下，会被收集到行程中分包中。但是行程中还用到了封装好的 didi-socket 库，这个库是公共的 npm 包，即使它只在行程中分包内被使用，但由于它的路径是在 node_modules 下的，因此将会被收集到主包里</span></p><p id=\"uc56f8947\" class=\"ne-p\"><span class=\"ne-text\"></span></p><p id=\"ua64c26a1\" class=\"ne-p\"><span class=\"ne-text\">随着业务迭代，后续大量业务线的接入都是通过 npm 来进行的，就会有大量的 npm 资源，他们都在 node_modules 目录下，因此全部会被收集到主包中，因此 mpx 框架进行了一系列改造：</span></p><ol class=\"ne-ol\"><li id=\"uab27155d\"><span class=\"ne-text\">在构建的依赖收集过程中，我们会对收集到的依赖搭上标记，记录它是被哪些分包引入的，一旦它只有一个分包引入，那么它就会被输出到这个分包中</span></li><li id=\"uebabe96e\"><span class=\"ne-text\">我们会根据用户定义的分包配置，自动在 SplitChunksPlugin 中生成各个分包的 cacheGroups，把分包中的复用模块抽取到分包下的 bundle 中</span></li><li id=\"ubcd3de5e\"><span class=\"ne-text\">对于组件和静态资源，如果他们被多个分包所引用并且未在主包中引用，为了确保主包体积最优，这些资源将产生多份副本分别输出到对应分包中，而不占用主包体积</span></li></ol><p id=\"u194e117e\" class=\"ne-p\"><span class=\"ne-text\"></span></p><p id=\"u950e7035\" class=\"ne-p\"><span class=\"ne-text\">因此，无论分包中引用的资源原本在什么位置，最终输出时都会尽可能将其输出到 dist 的分包目录下，避免占用主包空间。最终我们可以讲业务线分包中引用的 npm 资源成功输出到其所在的分包目录下</span></p><h3 id=\"jnUMw\"><span class=\"ne-text\">封面方案</span></h3><p id=\"u6adc2024\" class=\"ne-p\"><span class=\"ne-text\">因为滴滴出行小程序需要替换微信/支付宝里原有的 webapp 入口，小程序接入的业务线迅速增加，包体积迅速增长</span></p><p id=\"uefd55d4d\" class=\"ne-p\"><span class=\"ne-text\"></span></p><p id=\"uda9eb15a\" class=\"ne-p\"><span class=\"ne-text\">这个部分体积增长的主要原因是：所有业务先都需要接入到主页来展示，这是因为业务特点所决定的，因为滴滴出行提供了丰富的出行产品线，包括快车、专车、出租车、豪华车、拼车、单车、代驾、顺风车等产品。用户可能需要反复切换选型，这个过程还需要保留起终点车型之类的信息，必须是</span><strong><span class=\"ne-text\">一个页面内切换组件 + 一整套非常复杂的大型状态管理</span></strong><span class=\"ne-text\">才能比较流畅顺滑地实现。而不能像一些电商、信息平台一样，将不同的功能拆分到不同页面，让用户通过首页的菜单进入子页面再进行操作，首页只承载入口，只有较少的业务逻辑，分包处理起来就会容易很多</span></p><p id=\"uc8a6b4bd\" class=\"ne-p\"><span class=\"ne-text\"></span></p><p id=\"u8a875f80\" class=\"ne-p\"><span class=\"ne-text\">因此各个业务线都需要提供首页组件进行接入，这个组件会在首页被用到，所以无论如何也无法拆分到分包里。最终，整个首页主包部分的体积可以分为两个部分：基础库 + 业务代码，二者的体积占比大概是 1M : 1M</span></p><p id=\"u6b2af281\" class=\"ne-p\"><span class=\"ne-text\"></span></p><p id=\"ua8143708\" class=\"ne-p\"><span class=\"ne-text\">如此庞大的基础库体积主要因为滴滴出行的业务线以及业务团队众多，各方均拥有一些自己的基础依赖，如网约车依赖的长连接通信 pb 数据描述文件，地图会赖大量计算库，顺风车会依赖 cml 框架运行时，代驾依赖了通信网关库，包括公用的组件库和 polyfill 等</span></p><p id=\"u6202efda\" class=\"ne-p\"><span class=\"ne-text\"></span></p><p id=\"uc924f634\" class=\"ne-p\"><span class=\"ne-text\">因此滴滴出行小程序在当时已经无法使用纯技术方案在短期内快速解决问题了，于是我们做了一个工程架构调整，也可以叫做</span><strong><span class=\"ne-text\">封皮页</span></strong><span class=\"ne-text\">方案，解决了主包问题</span></p><p id=\"uda758b00\" class=\"ne-p\"><span class=\"ne-text\"></span></p><p id=\"u8b9c6e00\" class=\"ne-p\"><span class=\"ne-text\">封皮页方案简单来说，就是做一个带有滴滴出行 logo 的封面作为启动页面，一旦页面加载，就会立即跳转到另一个页面，这个页面真正用来承载业务，并且它被放到分包里</span></p><p id=\"u9cc03238\" class=\"ne-p\"><span class=\"ne-text\"></span></p><p id=\"u5ae3a660\" class=\"ne-p\"><span class=\"ne-text\">这个操作的意义在于，主包里就只剩下了所有方案需要依赖的基础框架/库，而业务全部被抽离到了分包内</span></p><p id=\"u11e6b332\" class=\"ne-p\"><img src=\"https://cdn.nlark.com/yuque/0/2022/png/732231/1650901762867-6477f823-8c3d-4eef-9502-d48b6a7e1d86.png\" width=\"857\" id=\"u98d466a3\" class=\"ne-image\"></p><p id=\"ueba8d872\" class=\"ne-p\"><span class=\"ne-text\">这样一来，我们将可以有 2M 的主包空间来存放基础的公共库，有 2M 左右的分包来存放前面提出的滴滴出行集成各条业务线组件的 &quot;大首页&quot;。拆分后大概差不多有 1.2M 的主包，800k 的业务主分包</span></p><p id=\"u5e59958f\" class=\"ne-p\"><span class=\"ne-text\"></span></p><p id=\"u51f072ba\" class=\"ne-p\"><span class=\"ne-text\">这个改造最优的一点在于：后续的业务迭代产生的体积增长几乎全是在业务主分包内，剩下的 1.1M+ 的空间留给业务迭代还是比较充裕的，而主包的体积在理想条件下是可以长期保持不变的，这样就不会因为业务需求的不断开发反复导致主包体积临近超标，不再需要为主包体积感到焦虑</span></p><p id=\"ub92bf119\" class=\"ne-p\"><span class=\"ne-text\"></span></p><p id=\"u61f19528\" class=\"ne-p\"><span class=\"ne-text\">当然，可以看到，这个方案本身是没有消减任何体积的，只是把位置变换了一下。除此之外，这个封面页方案其实也存在一些缺陷，比如：首屏业务的展示会变慢，因为要加载的内容会变多，不过小程序本身有较好的缓存资源的能力，因此还算可以接受</span></p><p id=\"u7f50abef\" class=\"ne-p\"><span class=\"ne-text\"></span></p><p id=\"u8b0f64b3\" class=\"ne-p\"><span class=\"ne-text\">相比于因体积问题卡住需求迭代以及产品线的接入，目前这个方案至少能解决问题。后续也会持续跟进关注体积问题，看是否会有产品方案变更或者小程序本身给出一些解决方案来进一步优化这个部分</span></p><p id=\"ubb9dee2b\" class=\"ne-p\"><br></p><h4 id=\"JrZFv\"><span class=\"ne-text\">问题</span></h4><p id=\"ua07c2c36\" class=\"ne-p\"><span class=\"ne-text\">封皮页方案会大幅降低业务首屏展示速度，这是加载性能中最重要的指标项。新的分包异步化技术能够打破之前的分包资源访问限制，在经过充分的落地优化后，可以大幅降低必须放置在主包中的资源数量，而主包优化出来的体积则有望重新承载业务首页功能，将目前加载流程中的页面跳转和分包加载阶段完全移除，从而大幅提升业务首屏幕展示速度。(需要除微信平台外的其他平台也支持分包异步化能力)</span></p><p id=\"ub25231f1\" class=\"ne-p\"><span class=\"ne-text\"></span></p></div>",
  "body_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"viewport\" content=\"fixed\" /><h2 data-lake-id=\"XmdX7\" id=\"XmdX7\"><span data-lake-id=\"u154ac2ad\" id=\"u154ac2ad\">背景</span></h2><p data-lake-id=\"ue951cc53\" id=\"ue951cc53\"><span data-lake-id=\"uc18a3bdb\" id=\"uc18a3bdb\">微信对小程序包体积的要求是总体积不得超过 12M，主包及单个分包体积不得超过 2M，支付宝对与小程序包体积的计算方式虽和微信略有差别，不过整体大同小异</span></p><p data-lake-id=\"u685897af\" id=\"u685897af\"><span data-lake-id=\"u9fb855ed\" id=\"u9fb855ed\">​</span><br></p><p data-lake-id=\"u9a7e880f\" id=\"u9a7e880f\"><span data-lake-id=\"u6b51de58\" id=\"u6b51de58\">在 18 至 19 年初，滴滴出行小程序里承载的业务只有网约车，且业务需求较少，在主包内都可以搞定。但是在下半年时，为了将</span><strong><span data-lake-id=\"u476c44b6\" id=\"u476c44b6\">微信钱包</span></strong><span data-lake-id=\"ufc33eae1\" id=\"ufc33eae1\">、</span><strong><span data-lake-id=\"u8497107b\" id=\"u8497107b\">支付宝九宫格</span></strong><span data-lake-id=\"u4b127144\" id=\"u4b127144\">入口迁移到小程序，小程序开始新增诸如</span><strong><span data-lake-id=\"u34ef10e5\" id=\"u34ef10e5\">公交</span></strong><span data-lake-id=\"u34d1e106\" id=\"u34d1e106\">、</span><strong><span data-lake-id=\"u2950f1ac\" id=\"u2950f1ac\">代价</span></strong><span data-lake-id=\"u5648c317\" id=\"u5648c317\">、</span><strong><span data-lake-id=\"u2b186fa0\" id=\"u2b186fa0\">车服</span></strong><span data-lake-id=\"ud3196755\" id=\"ud3196755\">、</span><strong><span data-lake-id=\"uabfbadca\" id=\"uabfbadca\">单车</span></strong><span data-lake-id=\"u614e93e3\" id=\"u614e93e3\">、</span><strong><span data-lake-id=\"ue95d667e\" id=\"ue95d667e\">顺风车</span></strong><span data-lake-id=\"u621e8b0b\" id=\"u621e8b0b\">等众多业务线，同时网约车的业务需求也要做全面的补齐，业务量和代码量一起呈爆炸式增长</span></p><h3 data-lake-id=\"jNchT\" id=\"jNchT\"><span data-lake-id=\"ube1b4802\" id=\"ube1b4802\">业务</span></h3><h4 data-lake-id=\"O8X6N\" id=\"O8X6N\"><span data-lake-id=\"u5bf26bb2\" id=\"u5bf26bb2\">高频页面</span></h4><ul list=\"u81fcb8be\"><li fid=\"u5d9ea1d0\" data-lake-id=\"u2beba0a0\" id=\"u2beba0a0\"><span data-lake-id=\"u66e6b1eb\" id=\"u66e6b1eb\">首页</span></li></ul><p data-lake-id=\"uf9e771d8\" id=\"uf9e771d8\"><span data-lake-id=\"uc392be9c\" id=\"uc392be9c\">在滴滴出行的产品逻辑，所有业务线的表达逻辑都放在首页承载，为了良好的切换体验，在首页采用了</span><strong><span data-lake-id=\"u422477c7\" id=\"u422477c7\">单页顶导</span></strong><span data-lake-id=\"u3dc31631\" id=\"u3dc31631\">的方案进行业务线展示。即每个业务线在首页中提供了一个需求表达组件，当用户切换顶导业务线后，切换出对应的业务线组件。(在这种设计下，所有业务线的需求表达逻辑都几种在首页这个单一页面中，导致在业务迭代过程中，主包体积迅速增长，很快达到了 2M 上下，对后续的业务迭代与发展带来巨大阻碍)</span></p><ul list=\"u81fcb8be\" start=\"2\"><li fid=\"u5d9ea1d0\" data-lake-id=\"ub050e92c\" id=\"ub050e92c\"><span data-lake-id=\"uab9bab04\" id=\"uab9bab04\">订单详情页</span></li></ul><p data-lake-id=\"u9ece1667\" id=\"u9ece1667\"><span data-lake-id=\"u650c5f31\" id=\"u650c5f31\">各个业务线的订单详情页则承载了具体的出行订单展示逻辑</span></p><h4 data-lake-id=\"EKVtH\" id=\"EKVtH\"><span data-lake-id=\"u81990942\" id=\"u81990942\">功能页面</span></h4><ul list=\"u972564a4\"><li fid=\"u91aab71f\" data-lake-id=\"u42af44c8\" id=\"u42af44c8\"><span data-lake-id=\"u14186e14\" id=\"u14186e14\">个人中心</span></li><li fid=\"u91aab71f\" data-lake-id=\"u344a4d22\" id=\"u344a4d22\"><span data-lake-id=\"u07a165db\" id=\"u07a165db\">营销页面</span></li><li fid=\"u91aab71f\" data-lake-id=\"u7e6828c7\" id=\"u7e6828c7\"><span data-lake-id=\"u6d9b2e21\" id=\"u6d9b2e21\">设置</span></li><li fid=\"u91aab71f\" data-lake-id=\"uaee20a3d\" id=\"uaee20a3d\"><span data-lake-id=\"ub34500d0\" id=\"ub34500d0\">历史行程</span></li></ul><h4 data-lake-id=\"bj8nN\" id=\"bj8nN\"><span data-lake-id=\"ua4eaa6a0\" id=\"ua4eaa6a0\">出行业务</span></h4><ul list=\"u17e09492\"><li fid=\"u479bcc6c\" data-lake-id=\"ua34d9ee1\" id=\"ua34d9ee1\"><span data-lake-id=\"ue86372dc\" id=\"ue86372dc\">快车</span></li><li fid=\"u479bcc6c\" data-lake-id=\"udc43dd83\" id=\"udc43dd83\"><span data-lake-id=\"u4cd748f6\" id=\"u4cd748f6\">专车</span></li><li fid=\"u479bcc6c\" data-lake-id=\"u5cfd3f73\" id=\"u5cfd3f73\"><span data-lake-id=\"ue560c48a\" id=\"ue560c48a\">出租车</span></li><li fid=\"u479bcc6c\" data-lake-id=\"ubedcad5d\" id=\"ubedcad5d\"><span data-lake-id=\"u5b1a1fd7\" id=\"u5b1a1fd7\">豪华车</span></li><li fid=\"u479bcc6c\" data-lake-id=\"ubd1bf9ad\" id=\"ubd1bf9ad\"><span data-lake-id=\"u7a59f6f1\" id=\"u7a59f6f1\">拼车</span></li><li fid=\"u479bcc6c\" data-lake-id=\"u559cfd92\" id=\"u559cfd92\"><span data-lake-id=\"u68705385\" id=\"u68705385\">单车</span></li><li fid=\"u479bcc6c\" data-lake-id=\"u09af0d15\" id=\"u09af0d15\"><span data-lake-id=\"u706ebd20\" id=\"u706ebd20\">代驾</span></li><li fid=\"u479bcc6c\" data-lake-id=\"ua7d8358d\" id=\"ua7d8358d\"><span data-lake-id=\"u13c17a63\" id=\"u13c17a63\">顺风车</span></li><li fid=\"u479bcc6c\" data-lake-id=\"u2cb5b545\" id=\"u2cb5b545\"><span data-lake-id=\"u6114f147\" id=\"u6114f147\">公交</span></li><li fid=\"u479bcc6c\" data-lake-id=\"u7f61fb71\" id=\"u7f61fb71\"><span data-lake-id=\"uc26b6ebf\" id=\"uc26b6ebf\">车生活</span></li></ul><h2 data-lake-id=\"LfXY9\" id=\"LfXY9\"><span data-lake-id=\"u21b8fa55\" id=\"u21b8fa55\">体积控制</span></h2><h3 data-lake-id=\"cfbSM\" id=\"cfbSM\"><span data-lake-id=\"u5d23ea44\" id=\"u5d23ea44\">基础优化手段</span></h3><p data-lake-id=\"u17ced973\" id=\"u17ced973\"><span data-lake-id=\"u940d8f29\" id=\"u940d8f29\">对于小程序来说，基础包体积优化手段包括</span></p><ul list=\"uee9cc6c1\"><li fid=\"u25b3cbce\" data-lake-id=\"u9c2bcf59\" id=\"u9c2bcf59\"><span data-lake-id=\"u2ae2788c\" id=\"u2ae2788c\">资源压缩</span></li><li fid=\"u25b3cbce\" data-lake-id=\"ub2a0b159\" id=\"ub2a0b159\"><span data-lake-id=\"u10d95519\" id=\"u10d95519\">去除代码冗余</span></li><li fid=\"u25b3cbce\" data-lake-id=\"u86f33908\" id=\"u86f33908\"><span data-lake-id=\"uf1d3ef6f\" id=\"uf1d3ef6f\">资源 cdn 化</span></li><li fid=\"u25b3cbce\" data-lake-id=\"uf4381a32\" id=\"uf4381a32\"><span data-lake-id=\"u722f43d3\" id=\"u722f43d3\">异步加载</span></li></ul><p data-lake-id=\"uee35d78f\" id=\"uee35d78f\"><span data-lake-id=\"uafd05d70\" id=\"uafd05d70\">​</span><br></p><p data-lake-id=\"uf4e69ad4\" id=\"uf4e69ad4\"><span data-lake-id=\"u2358955a\" id=\"u2358955a\">mpx 框架的编译构建完全基于 webpack，兼容 webpack 内部生态，天然可以使用 webpack 提供的能力对包体积进行优化</span></p><p data-lake-id=\"u91236830\" id=\"u91236830\"><span data-lake-id=\"u5919a2ab\" id=\"u5919a2ab\">​</span><br></p><p data-lake-id=\"ub83a7d29\" id=\"ub83a7d29\"><span data-lake-id=\"ubaa1b3cb\" id=\"ubaa1b3cb\">小程序中支持部分静态资源(如图像视频等)使用 cdn 地址加载，我们会尽可能的将相关的资源压缩后放到 cdn 上，避免这部分资源对包体积的占用</span></p><p data-lake-id=\"u2aa37001\" id=\"u2aa37001\"><span data-lake-id=\"u4c042f93\" id=\"u4c042f93\">​</span><br></p><p data-lake-id=\"u70fc31e6\" id=\"u70fc31e6\"><span data-lake-id=\"u3b43b239\" id=\"u3b43b239\">小程序场景下无法像 web 可以使用 script 标签便捷地进行异步加载，但是小程序平台后期纷纷支持了</span><strong><span data-lake-id=\"u3b569a1a\" id=\"u3b569a1a\">分包加载</span></strong><span data-lake-id=\"u4c5c5875\" id=\"u4c5c5875\">的方案来实现该能力，由于分包加载是小程序特有的技术规范，webpack 无法直接支持，因此 mpx 框架专门针对该技术规范进行了良好的适配支持</span></p><p data-lake-id=\"uaba8f2af\" id=\"uaba8f2af\"><span data-lake-id=\"u78f44939\" id=\"u78f44939\">​</span><br></p><p data-lake-id=\"u17a8114a\" id=\"u17a8114a\"><span data-lake-id=\"uda1cb0f9\" id=\"uda1cb0f9\">除此之外，mpx 框架还针对小程序场景进行了许多包体积优化的适配工作，如尽可能减少框架运行时包体积占用(压缩后占用 56kb)，对引用到的页面/组件按需进行打包构建，声明公共样式进行样式复用，分包内公共模块抽取等</span></p><p data-lake-id=\"uf320156c\" id=\"uf320156c\"><span data-lake-id=\"ub01316e4\" id=\"ub01316e4\">​</span><br></p><p data-lake-id=\"u8c8d99c3\" id=\"u8c8d99c3\"><span data-lake-id=\"uaa01c78d\" id=\"uaa01c78d\">在 mpx 框架的这些能力的支持下，基本不需要额外配置就能构建出一个经过初步优化的小程序包</span></p><p data-lake-id=\"u10128299\" id=\"u10128299\"><span data-lake-id=\"u671c9514\" id=\"u671c9514\">​</span><br></p><h3 data-lake-id=\"Br7lP\" id=\"Br7lP\"><span data-lake-id=\"u89f9406b\" id=\"u89f9406b\">分析体积</span></h3><p data-lake-id=\"uee73bf45\" id=\"uee73bf45\"><span data-lake-id=\"u1b2e9175\" id=\"u1b2e9175\">虽然框架已经提供了许多在体积功能方面的优化，但是随着业务迭代我们发现主包体积依然偏大。我们可以通过使用 webpack-bundle-analyzer 来查看各个模块的大小占比分析图</span></p><p data-lake-id=\"uf8fd6a1d\" id=\"uf8fd6a1d\"><span data-lake-id=\"udd464a84\" id=\"udd464a84\">​</span><br></p><p data-lake-id=\"u506bd1a1\" id=\"u506bd1a1\"><span data-lake-id=\"u1bcf5ebe\" id=\"u1bcf5ebe\">另外，在项目中一直是采用源码编译的，这可以让整个项目里的公共依赖实现仅有一份就可一起共用。简而言之，也有助于减少项目代码体积</span></p><p data-lake-id=\"u6b5333a6\" id=\"u6b5333a6\"><br></p><p data-lake-id=\"u6339c542\" id=\"u6339c542\"><span data-lake-id=\"u4e2e0e2f\" id=\"u4e2e0e2f\">要完美发挥源码编译的效果，需要上下游一起建立整套源码编译生态，如主项目的依赖方在声明公用依赖时，就应该使用 peerDep 或者 devDep 来声明一些公有依赖，这些共有依赖应该在主项目中统一声明，避免因版本不同装出两份公共依赖，那样反而会增大体积。由于滴滴出行主小程序设计业务线及团队众多，部分团队可能并不知道这件事情，因此代码在实际上可能出现上述劣化场景。而依照分析图，可以容易地发现这种问题，这样可以推动相关团队清楚这些重复依赖</span></p><p data-lake-id=\"u0c1a3bdc\" id=\"u0c1a3bdc\"><span data-lake-id=\"u8c0ba72d\" id=\"u8c0ba72d\">​</span><br></p><p data-lake-id=\"u69f68b9b\" id=\"u69f68b9b\"><span data-lake-id=\"u4e952ffe\" id=\"u4e952ffe\">同时，我们依照体积分析图，对其中体积较大的文件重点分析，进行了一轮业务代码梳理和精简，删除了一些无用代码，精简了 websocket 的消息题描述文件等</span></p><h3 data-lake-id=\"E8hIL\" id=\"E8hIL\"><span data-lake-id=\"u0898a7f8\" id=\"u0898a7f8\">配置分包</span></h3><p data-lake-id=\"u2441afb5\" id=\"u2441afb5\"><span data-lake-id=\"u3975d8f0\" id=\"u3975d8f0\">分包是小程序给出的类似 web 异步引入的一个方案，把一些初始进入时不需要的页面可以放进分包里，跳转到对应页面时才去下载分包，将这些页面及其附属资源放到分包里可以有效减少主包体积</span></p><p data-lake-id=\"u121c1cca\" id=\"u121c1cca\"><span data-lake-id=\"u2f7cda0a\" id=\"u2f7cda0a\">​</span><br></p><p data-lake-id=\"uc79e307c\" id=\"uc79e307c\"><span data-lake-id=\"uc8297a75\" id=\"uc8297a75\">mpx 框架早期对分包规范进行了初步支持，资源访问规则保持和微信一致，主要根据资源存放的目录判断应该输入到主包还是分包。有了这个能力后，我们把行程中业务抽离到了分包，大概抽离了 200 多 kb 左右的空间</span></p><p data-lake-id=\"uace124c3\" id=\"uace124c3\"><span data-lake-id=\"u008db934\" id=\"u008db934\">​</span><br></p><p data-lake-id=\"u6babe5ec\" id=\"u6babe5ec\"><span data-lake-id=\"u0201dc6c\" id=\"u0201dc6c\">有了行程中的成功拆分后，我们开始对所有的非首页代码进行分包操作，比如起终点选择和个人中心。以及部分业务线的接入是通过 npm 的方式接入，我们也尽可能地将这些业务线的所有非首页代码放到了分包</span></p><p data-lake-id=\"u11114186\" id=\"u11114186\"><span data-lake-id=\"u28849918\" id=\"u28849918\">​</span><br></p><p data-lake-id=\"u2092a11f\" id=\"u2092a11f\"><span data-lake-id=\"uc3c49b6b\" id=\"uc3c49b6b\">另外，在 mpx 早期设计时，使用了 packages 形式的业务组合方案，可以很方便地让业务独立开发，也可以方便的整合，这和微信的分包 json 配置设计和 packages 很类似，因此在此基础上支持了微信的分包，用户仅需在原 packages 基础上加上 query 标记分包的名字即可</span></p><p data-lake-id=\"ued99bb5e\" id=\"ued99bb5e\"><span data-lake-id=\"uc6c657b4\" id=\"uc6c657b4\">​</span><br></p><p data-lake-id=\"u09a1cea0\" id=\"u09a1cea0\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2022%2Fpng%2F732231%2F1650900285959-8bdd0433-9c77-41d7-97dd-0ea90b5741ff.png%22%2C%22taskId%22%3A%22u3f89bbd7-0acc-4cdb-9959-b67beddb15c%22%2C%22clientId%22%3A%22u048c0de6-e2fa-4%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A850%2C%22height%22%3A314%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A253443%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A850%2C%22originHeight%22%3A314%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%E5%88%86%E5%8C%85%20%E4%B8%BB%E5%8C%85%20%E7%BD%91%E7%BA%A6%E8%BD%A6%E8%A1%8C%E7%A8%8B%E9%A1%B5%20%E4%B8%9A%E5%8A%A1%E9%A6%96%E9%A1%B5%3A%E5%BF%AB%E8%BD%A6%2F%E4%B8%93%E8%BD%A6%2F%E5%87%BA%E7%A7%9F%E8%BD%A6%2F%E8%B1%AA%E5%8D%8E%E8%BD%A6%2F%20%E8%BD%A6%E6%9C%8D%2F%E9%9D%92%E6%A1%94%2F%E4%BB%A3%E9%A9%BE%2F%E5%85%AC%E4%BA%A4%2F.......%20%E4%BB%A3%E9%A9%BE%E8%A1%8C%E7%A8%8B%E9%A1%B5%20%E5%85%AC%E5%85%B1%E5%BA%93%3A%20%E5%9C%B0%E5%9B%BE%2F%E7%99%BB%E5%BD%95%2F%E5%9F%8B%E7%82%B9%2FSOCKET%20%E8%BD%A6%E7%94%9F%E6%B4%BB%E5%8A%9F%E8%83%BD%E9%A1%B5%20%E5%9F%BA%E7%A1%80%E6%A1%86%E6%9E%B6%2F%E5%BA%93%3AMPX%E6%A1%86%E6%9E%B6%2F%E8%AF%B7%E6%B1%82%E5%BA%93%20%E5%85%AC%E4%BA%A4%20%E5%AE%89%E5%85%A8%20%E7%99%BB%E5%BD%95%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A687.3055%2C%22y%22%3A27.198874%2C%22width%22%3A48.156099999999924%2C%22height%22%3A26.353646%2C%22text%22%3A%22%E5%88%86%E5%8C%85%22%7D%2C%7B%22x%22%3A270.3768%2C%22y%22%3A45.265118%2C%22width%22%3A47.74462999999997%2C%22height%22%3A24.860882000000004%2C%22text%22%3A%22%E4%B8%BB%E5%8C%85%22%7D%2C%7B%22x%22%3A642.82526%2C%22y%22%3A87.749245%2C%22width%22%3A137.36374%2C%22height%22%3A27.234314999999995%2C%22text%22%3A%22%E7%BD%91%E7%BA%A6%E8%BD%A6%E8%A1%8C%E7%A8%8B%E9%A1%B5%22%7D%2C%7B%22x%22%3A45.63564%2C%22y%22%3A99.00604%2C%22width%22%3A449.35191%2C%22height%22%3A25.26292000000001%2C%22text%22%3A%22%E4%B8%9A%E5%8A%A1%E9%A6%96%E9%A1%B5%3A%E5%BF%AB%E8%BD%A6%2F%E4%B8%93%E8%BD%A6%2F%E5%87%BA%E7%A7%9F%E8%BD%A6%2F%E8%B1%AA%E5%8D%8E%E8%BD%A6%2F%22%7D%2C%7B%22x%22%3A169.33241%2C%22y%22%3A125.85904%2C%22width%22%3A332.15206%2C%22height%22%3A26.546750000000003%2C%22text%22%3A%22%E8%BD%A6%E6%9C%8D%2F%E9%9D%92%E6%A1%94%2F%E4%BB%A3%E9%A9%BE%2F%E5%85%AC%E4%BA%A4%2F.......%22%7D%2C%7B%22x%22%3A653.8501%2C%22y%22%3A143.3473%2C%22width%22%3A114.76495%2C%22height%22%3A24.766130000000004%2C%22text%22%3A%22%E4%BB%A3%E9%A9%BE%E8%A1%8C%E7%A8%8B%E9%A1%B5%22%7D%2C%7B%22x%22%3A46.817898%2C%22y%22%3A162.11041%2C%22width%22%3A70.790562%2C%22height%22%3A24.733689999999996%2C%22text%22%3A%22%E5%85%AC%E5%85%B1%E5%BA%93%3A%22%7D%2C%7B%22x%22%3A163.77605%2C%22y%22%3A162.85626%2C%22width%22%3A292.72015%2C%22height%22%3A26.2218%2C%22text%22%3A%22%E5%9C%B0%E5%9B%BE%2F%E7%99%BB%E5%BD%95%2F%E5%9F%8B%E7%82%B9%2FSOCKET%22%7D%2C%7B%22x%22%3A643.69214%2C%22y%22%3A198.1769%2C%22width%22%3A135.94189000000006%2C%22height%22%3A25.15246000000002%2C%22text%22%3A%22%E8%BD%A6%E7%94%9F%E6%B4%BB%E5%8A%9F%E8%83%BD%E9%A1%B5%22%7D%2C%7B%22x%22%3A44.919647%2C%22y%22%3A204.487%2C%22width%22%3A333.640753%2C%22height%22%3A24.87566000000001%2C%22text%22%3A%22%E5%9F%BA%E7%A1%80%E6%A1%86%E6%9E%B6%2F%E5%BA%93%3AMPX%E6%A1%86%E6%9E%B6%2F%E8%AF%B7%E6%B1%82%E5%BA%93%22%7D%2C%7B%22x%22%3A609.7491%2C%22y%22%3A252.09276%2C%22width%22%3A52.596000000000004%2C%22height%22%3A27.665509999999983%2C%22text%22%3A%22%E5%85%AC%E4%BA%A4%22%7D%2C%7B%22x%22%3A765.5547%2C%22y%22%3A253.9312%2C%22width%22%3A49.296069999999986%2C%22height%22%3A24.79072000000002%2C%22text%22%3A%22%E5%AE%89%E5%85%A8%22%7D%2C%7B%22x%22%3A688.56976%2C%22y%22%3A253.94731%2C%22width%22%3A45.71338000000003%2C%22height%22%3A22.741749999999996%2C%22text%22%3A%22%E7%99%BB%E5%BD%95%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22id%22%3A%22u339eb8ca%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><p data-lake-id=\"u91915c83\" id=\"u91915c83\"><span data-lake-id=\"uf637af6f\" id=\"uf637af6f\">初期拆分工作进行完毕后，总计从主包拆分了差不多 400kb 左右的空间到分包中</span></p><h3 data-lake-id=\"LJxx0\" id=\"LJxx0\"><span data-lake-id=\"u0d4efcf9\" id=\"u0d4efcf9\">分包资源精细化管理</span></h3><p data-lake-id=\"u3ab42ce2\" id=\"u3ab42ce2\"><span data-lake-id=\"ub681c178\" id=\"ub681c178\">在 mpx 框架初期的分包处理规则是完全按照微信的方式，把在分包路径下的资源收集到分包里，而 npm 管理的资源因为都在 node_modules 目录下，不属于任何分包路径，则会被全部收集进主包</span></p><p data-lake-id=\"uc48586f2\" id=\"uc48586f2\"><span data-lake-id=\"uc455106a\" id=\"uc455106a\">​</span><br></p><p data-lake-id=\"u45cf3614\" id=\"u45cf3614\"><span data-lake-id=\"u5c2e5d65\" id=\"u5c2e5d65\">例如行程中模块的业务，虽然该模块自有的状态管理 store 整个都在行程中分包路径下，会被收集到行程中分包中。但是行程中还用到了封装好的 didi-socket 库，这个库是公共的 npm 包，即使它只在行程中分包内被使用，但由于它的路径是在 node_modules 下的，因此将会被收集到主包里</span></p><p data-lake-id=\"uc56f8947\" id=\"uc56f8947\"><span data-lake-id=\"u34a45995\" id=\"u34a45995\">​</span><br></p><p data-lake-id=\"ua64c26a1\" id=\"ua64c26a1\"><span data-lake-id=\"u8d096e7b\" id=\"u8d096e7b\">随着业务迭代，后续大量业务线的接入都是通过 npm 来进行的，就会有大量的 npm 资源，他们都在 node_modules 目录下，因此全部会被收集到主包中，因此 mpx 框架进行了一系列改造：</span></p><ol list=\"uf627ce4e\"><li fid=\"uff718297\" data-lake-id=\"uab27155d\" id=\"uab27155d\"><span data-lake-id=\"u98b254b7\" id=\"u98b254b7\">在构建的依赖收集过程中，我们会对收集到的依赖搭上标记，记录它是被哪些分包引入的，一旦它只有一个分包引入，那么它就会被输出到这个分包中</span></li><li fid=\"uff718297\" data-lake-id=\"uebabe96e\" id=\"uebabe96e\"><span data-lake-id=\"u965336bd\" id=\"u965336bd\">我们会根据用户定义的分包配置，自动在 SplitChunksPlugin 中生成各个分包的 cacheGroups，把分包中的复用模块抽取到分包下的 bundle 中</span></li><li fid=\"uff718297\" data-lake-id=\"ubcd3de5e\" id=\"ubcd3de5e\"><span data-lake-id=\"ub95b5afb\" id=\"ub95b5afb\">对于组件和静态资源，如果他们被多个分包所引用并且未在主包中引用，为了确保主包体积最优，这些资源将产生多份副本分别输出到对应分包中，而不占用主包体积</span></li></ol><p data-lake-id=\"u194e117e\" id=\"u194e117e\"><span data-lake-id=\"u1cf5d56c\" id=\"u1cf5d56c\">​</span><br></p><p data-lake-id=\"u950e7035\" id=\"u950e7035\"><span data-lake-id=\"ue068eca5\" id=\"ue068eca5\">因此，无论分包中引用的资源原本在什么位置，最终输出时都会尽可能将其输出到 dist 的分包目录下，避免占用主包空间。最终我们可以讲业务线分包中引用的 npm 资源成功输出到其所在的分包目录下</span></p><h3 data-lake-id=\"jnUMw\" id=\"jnUMw\"><span data-lake-id=\"u07be5825\" id=\"u07be5825\">封面方案</span></h3><p data-lake-id=\"u6adc2024\" id=\"u6adc2024\"><span data-lake-id=\"ubdaefd0c\" id=\"ubdaefd0c\">因为滴滴出行小程序需要替换微信/支付宝里原有的 webapp 入口，小程序接入的业务线迅速增加，包体积迅速增长</span></p><p data-lake-id=\"uefd55d4d\" id=\"uefd55d4d\"><span data-lake-id=\"u88c8b357\" id=\"u88c8b357\">​</span><br></p><p data-lake-id=\"uda9eb15a\" id=\"uda9eb15a\"><span data-lake-id=\"uf6e6fbb0\" id=\"uf6e6fbb0\">这个部分体积增长的主要原因是：所有业务先都需要接入到主页来展示，这是因为业务特点所决定的，因为滴滴出行提供了丰富的出行产品线，包括快车、专车、出租车、豪华车、拼车、单车、代驾、顺风车等产品。用户可能需要反复切换选型，这个过程还需要保留起终点车型之类的信息，必须是</span><strong><span data-lake-id=\"u387679cf\" id=\"u387679cf\">一个页面内切换组件 + 一整套非常复杂的大型状态管理</span></strong><span data-lake-id=\"uf482a145\" id=\"uf482a145\">才能比较流畅顺滑地实现。而不能像一些电商、信息平台一样，将不同的功能拆分到不同页面，让用户通过首页的菜单进入子页面再进行操作，首页只承载入口，只有较少的业务逻辑，分包处理起来就会容易很多</span></p><p data-lake-id=\"uc8a6b4bd\" id=\"uc8a6b4bd\"><span data-lake-id=\"ubdf69f31\" id=\"ubdf69f31\">​</span><br></p><p data-lake-id=\"u8a875f80\" id=\"u8a875f80\"><span data-lake-id=\"u6c26e85b\" id=\"u6c26e85b\">因此各个业务线都需要提供首页组件进行接入，这个组件会在首页被用到，所以无论如何也无法拆分到分包里。最终，整个首页主包部分的体积可以分为两个部分：基础库 + 业务代码，二者的体积占比大概是 1M : 1M</span></p><p data-lake-id=\"u6b2af281\" id=\"u6b2af281\"><span data-lake-id=\"u629231c5\" id=\"u629231c5\">​</span><br></p><p data-lake-id=\"ua8143708\" id=\"ua8143708\"><span data-lake-id=\"ucff4b9af\" id=\"ucff4b9af\">如此庞大的基础库体积主要因为滴滴出行的业务线以及业务团队众多，各方均拥有一些自己的基础依赖，如网约车依赖的长连接通信 pb 数据描述文件，地图会赖大量计算库，顺风车会依赖 cml 框架运行时，代驾依赖了通信网关库，包括公用的组件库和 polyfill 等</span></p><p data-lake-id=\"u6202efda\" id=\"u6202efda\"><span data-lake-id=\"u790471b9\" id=\"u790471b9\">​</span><br></p><p data-lake-id=\"uc924f634\" id=\"uc924f634\"><span data-lake-id=\"ufc32bbec\" id=\"ufc32bbec\">因此滴滴出行小程序在当时已经无法使用纯技术方案在短期内快速解决问题了，于是我们做了一个工程架构调整，也可以叫做</span><strong><span data-lake-id=\"u5933b488\" id=\"u5933b488\">封皮页</span></strong><span data-lake-id=\"u14f3409d\" id=\"u14f3409d\">方案，解决了主包问题</span></p><p data-lake-id=\"uda758b00\" id=\"uda758b00\"><span data-lake-id=\"u429a1a31\" id=\"u429a1a31\">​</span><br></p><p data-lake-id=\"u8b9c6e00\" id=\"u8b9c6e00\"><span data-lake-id=\"u8f7c1afb\" id=\"u8f7c1afb\">封皮页方案简单来说，就是做一个带有滴滴出行 logo 的封面作为启动页面，一旦页面加载，就会立即跳转到另一个页面，这个页面真正用来承载业务，并且它被放到分包里</span></p><p data-lake-id=\"u9cc03238\" id=\"u9cc03238\"><span data-lake-id=\"u5e8709cf\" id=\"u5e8709cf\">​</span><br></p><p data-lake-id=\"u5ae3a660\" id=\"u5ae3a660\"><span data-lake-id=\"u897ae1d4\" id=\"u897ae1d4\">这个操作的意义在于，主包里就只剩下了所有方案需要依赖的基础框架/库，而业务全部被抽离到了分包内</span></p><p data-lake-id=\"u11e6b332\" id=\"u11e6b332\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2022%2Fpng%2F732231%2F1650901762867-6477f823-8c3d-4eef-9502-d48b6a7e1d86.png%22%2C%22taskId%22%3A%22u3956623e-08b6-4a23-b786-59e811c555a%22%2C%22clientId%22%3A%22u048c0de6-e2fa-4%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A857%2C%22height%22%3A320%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A348631%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A857%2C%22originHeight%22%3A320%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%E5%88%86%E5%8C%85%20%E4%BB%A3%E9%A9%BE%E8%A1%8C%E7%A8%8B%E9%A1%B5%20%E9%A1%BA%E9%A3%8E%E8%BD%A6%E5%8A%9F%E8%83%BD%E9%A1%B5%20%E4%B8%BB%E5%8C%85%20%E7%9C%9F%E6%AD%A3%E4%B8%9A%E5%8A%A1%E4%B8%BB%E9%A1%B5%20%E5%BF%AB%2F%E4%B8%93%2F%E5%87%BA%2F%E8%B1%AA%20%E5%9F%BA%E7%A1%80%E6%A1%86%E6%9E%B6%2F%E5%BA%93%20%E7%BD%91%E7%BA%A6%E8%BD%A6%E8%A1%8C%E7%A8%8B%E9%A1%B5%20%E9%92%B1%E5%8C%85%E5%8A%9F%E8%83%BD%E9%A1%B5%20MPX%E6%A1%86%E6%9E%B6%2F%E8%AF%B7%E6%B1%82%E5%BA%93%E7%AD%89%20%E6%8B%BC%E6%88%90%E4%B9%90%2F%E5%85%AC%E4%BA%A4%20%E7%AC%AC%E4%B8%89%E6%96%B9%E5%85%AC%E5%85%B1%E5%BA%93%20%E9%A1%BA%E9%A3%8E%E8%BD%A6%2F%E4%BB%A3%E9%A9%BE%20%E8%BD%A6%E7%94%9F%E6%B4%BB%E5%8A%9F%E8%83%BD%E9%A1%B5%20%E8%90%A5%E9%94%80%E5%B1%95%E7%A4%BA%E9%A1%B5%20%E5%9C%B0%E5%9B%BE%2F%E7%99%BB%E5%BD%95%2F%E5%9F%8B%E7%82%B9%20%E8%BD%A6%E7%94%9F%E6%B4%BB%2F%E9%AA%91%E8%BD%A6%20%2FSOCKET%E7%AD%89%20%E5%AE%89%E5%85%A8%20%E7%99%BB%E5%BD%95%20%E5%85%AC%E4%BA%A4%20IM%E7%AD%89%E5%85%B1%E8%AE%A120%E4%B8%AA%E5%88%86%E5%8C%85%20%E5%B0%81%E9%9D%A2%2B%E5%85%B3%E9%94%AE%E9%A1%B5%E9%9D%A2%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A493.87622%2C%22y%22%3A27.067362%2C%22width%22%3A48.74072000000001%2C%22height%22%3A25.049988000000003%2C%22text%22%3A%22%E5%88%86%E5%8C%85%22%7D%2C%7B%22x%22%3A460.49753%2C%22y%22%3A82.578285%2C%22width%22%3A117.18442000000005%2C%22height%22%3A26.467369000000005%2C%22text%22%3A%22%E4%BB%A3%E9%A9%BE%E8%A1%8C%E7%A8%8B%E9%A1%B5%22%7D%2C%7B%22x%22%3A670.3443%2C%22y%22%3A83.813866%2C%22width%22%3A137.66503999999998%2C%22height%22%3A22.884084%2C%22text%22%3A%22%E9%A1%BA%E9%A3%8E%E8%BD%A6%E5%8A%9F%E8%83%BD%E9%A1%B5%22%7D%2C%7B%22x%22%3A82.38668%2C%22y%22%3A87.405655%2C%22width%22%3A46.98841%2C%22height%22%3A23.903225000000006%2C%22text%22%3A%22%E4%B8%BB%E5%8C%85%22%7D%2C%7B%22x%22%3A245.8003%2C%22y%22%3A88.47197%2C%22width%22%3A138.24184000000002%2C%22height%22%3A27.355995000000007%2C%22text%22%3A%22%E7%9C%9F%E6%AD%A3%E4%B8%9A%E5%8A%A1%E4%B8%BB%E9%A1%B5%22%7D%2C%7B%22x%22%3A250.61243%2C%22y%22%3A139.55553%2C%22width%22%3A127.33380000000002%2C%22height%22%3A29.20196999999999%2C%22text%22%3A%22%E5%BF%AB%2F%E4%B8%93%2F%E5%87%BA%2F%E8%B1%AA%22%7D%2C%7B%22x%22%3A41.52413%2C%22y%22%3A141.44028%2C%22width%22%3A126.84402000000001%2C%22height%22%3A25.41237000000001%2C%22text%22%3A%22%E5%9F%BA%E7%A1%80%E6%A1%86%E6%9E%B6%2F%E5%BA%93%22%7D%2C%7B%22x%22%3A452.0912%2C%22y%22%3A143.48892%2C%22width%22%3A136.35729999999995%2C%22height%22%3A23.75870999999998%2C%22text%22%3A%22%E7%BD%91%E7%BA%A6%E8%BD%A6%E8%A1%8C%E7%A8%8B%E9%A1%B5%22%7D%2C%7B%22x%22%3A684.03015%2C%22y%22%3A144.41144%2C%22width%22%3A112.80814999999996%2C%22height%22%3A23.62297000000001%2C%22text%22%3A%22%E9%92%B1%E5%8C%85%E5%8A%9F%E8%83%BD%E9%A1%B5%22%7D%2C%7B%22x%22%3A25.532576%2C%22y%22%3A168.43324%2C%22width%22%3A158.894704%2C%22height%22%3A19.991629999999986%2C%22text%22%3A%22MPX%E6%A1%86%E6%9E%B6%2F%E8%AF%B7%E6%B1%82%E5%BA%93%E7%AD%89%22%7D%2C%7B%22x%22%3A251.55437%2C%22y%22%3A171.03357%2C%22width%22%3A125.83600999999999%2C%22height%22%3A23.625490000000013%2C%22text%22%3A%22%E6%8B%BC%E6%88%90%E4%B9%90%2F%E5%85%AC%E4%BA%A4%22%7D%2C%7B%22x%22%3A37.075916%2C%22y%22%3A190.55377%2C%22width%22%3A136.836184%2C%22height%22%3A25.464100000000002%2C%22text%22%3A%22%E7%AC%AC%E4%B8%89%E6%96%B9%E5%85%AC%E5%85%B1%E5%BA%93%22%7D%2C%7B%22x%22%3A252.39688%2C%22y%22%3A198.58638%2C%22width%22%3A122.99061999999998%2C%22height%22%3A21.13205000000002%2C%22text%22%3A%22%E9%A1%BA%E9%A3%8E%E8%BD%A6%2F%E4%BB%A3%E9%A9%BE%22%7D%2C%7B%22x%22%3A450.2849%2C%22y%22%3A201.53773%2C%22width%22%3A137.97523%2C%22height%22%3A25.706109999999995%2C%22text%22%3A%22%E8%BD%A6%E7%94%9F%E6%B4%BB%E5%8A%9F%E8%83%BD%E9%A1%B5%22%7D%2C%7B%22x%22%3A682.8784%2C%22y%22%3A201.92023%2C%22width%22%3A115.73915%2C%22height%22%3A24.334550000000007%2C%22text%22%3A%22%E8%90%A5%E9%94%80%E5%B1%95%E7%A4%BA%E9%A1%B5%22%7D%2C%7B%22x%22%3A40.34259%2C%22y%22%3A217.81502%2C%22width%22%3A131.14921%2C%22height%22%3A19.886840000000007%2C%22text%22%3A%22%E5%9C%B0%E5%9B%BE%2F%E7%99%BB%E5%BD%95%2F%E5%9F%8B%E7%82%B9%22%7D%2C%7B%22x%22%3A252.47717%2C%22y%22%3A224.17523%2C%22width%22%3A124.23813000000001%2C%22height%22%3A22.862150000000014%2C%22text%22%3A%22%E8%BD%A6%E7%94%9F%E6%B4%BB%2F%E9%AA%91%E8%BD%A6%22%7D%2C%7B%22x%22%3A65.55836%2C%22y%22%3A240.60297%2C%22width%22%3A82.81744%2C%22height%22%3A18.038809999999984%2C%22text%22%3A%22%2FSOCKET%E7%AD%89%22%7D%2C%7B%22x%22%3A574.71484%2C%22y%22%3A257.9916%2C%22width%22%3A46.60825999999997%2C%22height%22%3A26.0034%2C%22text%22%3A%22%E5%AE%89%E5%85%A8%22%7D%2C%7B%22x%22%3A497.38235%2C%22y%22%3A258.5393%2C%22width%22%3A44.727449999999976%2C%22height%22%3A23.799499999999966%2C%22text%22%3A%22%E7%99%BB%E5%BD%95%22%7D%2C%7B%22x%22%3A419.00058%2C%22y%22%3A259.29187%2C%22width%22%3A46.83947999999998%2C%22height%22%3A24.740229999999997%2C%22text%22%3A%22%E5%85%AC%E4%BA%A4%22%7D%2C%7B%22x%22%3A653.96027%2C%22y%22%3A260.366%2C%22width%22%3A173.08983%2C%22height%22%3A22.228240000000028%2C%22text%22%3A%22IM%E7%AD%89%E5%85%B1%E8%AE%A120%E4%B8%AA%E5%88%86%E5%8C%85%22%7D%2C%7B%22x%22%3A29.854582%2C%22y%22%3A263.67487%2C%22width%22%3A150.197348%2C%22height%22%3A22.66601000000003%2C%22text%22%3A%22%E5%B0%81%E9%9D%A2%2B%E5%85%B3%E9%94%AE%E9%A1%B5%E9%9D%A2%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22id%22%3A%22u98d466a3%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><p data-lake-id=\"ueba8d872\" id=\"ueba8d872\"><span data-lake-id=\"u2d554ce0\" id=\"u2d554ce0\">这样一来，我们将可以有 2M 的主包空间来存放基础的公共库，有 2M 左右的分包来存放前面提出的滴滴出行集成各条业务线组件的 &quot;大首页&quot;。拆分后大概差不多有 1.2M 的主包，800k 的业务主分包</span></p><p data-lake-id=\"u5e59958f\" id=\"u5e59958f\"><span data-lake-id=\"u5d032f4d\" id=\"u5d032f4d\">​</span><br></p><p data-lake-id=\"u51f072ba\" id=\"u51f072ba\"><span data-lake-id=\"uefe799b0\" id=\"uefe799b0\">这个改造最优的一点在于：后续的业务迭代产生的体积增长几乎全是在业务主分包内，剩下的 1.1M+ 的空间留给业务迭代还是比较充裕的，而主包的体积在理想条件下是可以长期保持不变的，这样就不会因为业务需求的不断开发反复导致主包体积临近超标，不再需要为主包体积感到焦虑</span></p><p data-lake-id=\"ub92bf119\" id=\"ub92bf119\"><span data-lake-id=\"u1b7cf6f6\" id=\"u1b7cf6f6\">​</span><br></p><p data-lake-id=\"u61f19528\" id=\"u61f19528\"><span data-lake-id=\"u7798cb09\" id=\"u7798cb09\">当然，可以看到，这个方案本身是没有消减任何体积的，只是把位置变换了一下。除此之外，这个封面页方案其实也存在一些缺陷，比如：首屏业务的展示会变慢，因为要加载的内容会变多，不过小程序本身有较好的缓存资源的能力，因此还算可以接受</span></p><p data-lake-id=\"u7f50abef\" id=\"u7f50abef\"><span data-lake-id=\"u7a4786c7\" id=\"u7a4786c7\">​</span><br></p><p data-lake-id=\"u8b0f64b3\" id=\"u8b0f64b3\"><span data-lake-id=\"uc1adef98\" id=\"uc1adef98\">相比于因体积问题卡住需求迭代以及产品线的接入，目前这个方案至少能解决问题。后续也会持续跟进关注体积问题，看是否会有产品方案变更或者小程序本身给出一些解决方案来进一步优化这个部分</span></p><p data-lake-id=\"ubb9dee2b\" id=\"ubb9dee2b\"><br></p><h4 data-lake-id=\"JrZFv\" id=\"JrZFv\"><span data-lake-id=\"ucb6529be\" id=\"ucb6529be\">问题</span></h4><p data-lake-id=\"ua07c2c36\" id=\"ua07c2c36\"><span data-lake-id=\"u2a191e7e\" id=\"u2a191e7e\">封皮页方案会大幅降低业务首屏展示速度，这是加载性能中最重要的指标项。新的分包异步化技术能够打破之前的分包资源访问限制，在经过充分的落地优化后，可以大幅降低必须放置在主包中的资源数量，而主包优化出来的体积则有望重新承载业务首页功能，将目前加载流程中的页面跳转和分包加载阶段完全移除，从而大幅提升业务首屏幕展示速度。(需要除微信平台外的其他平台也支持分包异步化能力)</span></p><p data-lake-id=\"ub25231f1\" id=\"ub25231f1\"><span data-lake-id=\"u19732420\" id=\"u19732420\">​</span><br></p>",
  "public": 0,
  "status": 1,
  "likes_count": 0,
  "read_count": 0,
  "hits": 0,
  "comments_count": 0,
  "word_count": 3520,
  "created_at": "2022-04-25T13:44:58.000Z",
  "updated_at": "2022-04-26T16:58:21.000Z",
  "content_updated_at": "2022-04-26T16:58:21.000Z",
  "published_at": "2022-04-26T16:58:21.000Z",
  "first_published_at": "2022-04-25T13:45:12.083Z",
  "book": {
    "id": 24987782,
    "type": "Book",
    "slug": "aggvdq",
    "name": "项目梳理",
    "user_id": 732231,
    "description": "用来梳理一些项目的内容",
    "toc_yml": "- type: META\n  count: 27\n  display_level: 1\n  tail_type: UPDATED_AT\n  base_version_id: 219001536\n  published: true\n  max_level: 2\n  last_updated_at: 2022-07-05T05:31:54.296Z\n  version_id: 219001620\n- type: DOC\n  title: 自我介绍\n  uuid: czSnLwlZX5r2CJfX\n  url: nowm78\n  prev_uuid: ''\n  sibling_uuid: 0Z_QJNT6lajGoxNa\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 71314643\n  level: 0\n  id: 71314643\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 面经\n  uuid: 0Z_QJNT6lajGoxNa\n  url: uhv9t2\n  prev_uuid: czSnLwlZX5r2CJfX\n  sibling_uuid: BAls4pP-NeY80xRi\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 73218284\n  level: 0\n  id: 73218284\n  open_window: 0\n  visible: 1\n- type: TITLE\n  title: 项目\n  uuid: BAls4pP-NeY80xRi\n  url: ''\n  prev_uuid: 0Z_QJNT6lajGoxNa\n  sibling_uuid: OBIPwt2GqG4q-vpQ\n  child_uuid: iAehDOuKbi90rUiI\n  parent_uuid: ''\n  doc_id: ''\n  level: 0\n  id: ''\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: mpx\n  uuid: iAehDOuKbi90rUiI\n  url: flzwri\n  prev_uuid: BAls4pP-NeY80xRi\n  sibling_uuid: ZBy9d0lBfyBCBXpu\n  child_uuid: ''\n  parent_uuid: BAls4pP-NeY80xRi\n  doc_id: 82395946\n  level: 1\n  id: 82395946\n  open_window: 0\n  visible: 1\n- type: TITLE\n  title: 滴滴出行小程序\n  uuid: ZBy9d0lBfyBCBXpu\n  url: ''\n  prev_uuid: iAehDOuKbi90rUiI\n  sibling_uuid: GLK4TI6bZt4Xxu6b\n  child_uuid: '-dL8H8y1HcmyCKgY'\n  parent_uuid: BAls4pP-NeY80xRi\n  doc_id: ''\n  level: 1\n  id: ''\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 小程序包体积优化\n  uuid: '-dL8H8y1HcmyCKgY'\n  url: qf3q0x\n  prev_uuid: ZBy9d0lBfyBCBXpu\n  sibling_uuid: EJe2oPQpRB-N11Xb\n  child_uuid: ''\n  parent_uuid: ZBy9d0lBfyBCBXpu\n  doc_id: 75039167\n  level: 2\n  id: 75039167\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: mpx 性能优化\n  uuid: EJe2oPQpRB-N11Xb\n  url: hgoyws\n  prev_uuid: '-dL8H8y1HcmyCKgY'\n  sibling_uuid: guwD9YXgthBX_ez4\n  child_uuid: ''\n  parent_uuid: ZBy9d0lBfyBCBXpu\n  doc_id: 74717740\n  level: 2\n  id: 74717740\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 冒泡页\n  uuid: guwD9YXgthBX_ez4\n  url: mo05y7\n  prev_uuid: EJe2oPQpRB-N11Xb\n  sibling_uuid: jVVd9OODBN3wWQ5P\n  child_uuid: ''\n  parent_uuid: ZBy9d0lBfyBCBXpu\n  doc_id: 73628145\n  level: 2\n  id: 73628145\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 行程中\n  uuid: jVVd9OODBN3wWQ5P\n  url: oyxdqe\n  prev_uuid: guwD9YXgthBX_ez4\n  sibling_uuid: ''\n  child_uuid: ''\n  parent_uuid: ZBy9d0lBfyBCBXpu\n  doc_id: 73628172\n  level: 2\n  id: 73628172\n  open_window: 0\n  visible: 1\n- type: TITLE\n  title: 小程序上线管理平台\n  uuid: GLK4TI6bZt4Xxu6b\n  url: ''\n  prev_uuid: ZBy9d0lBfyBCBXpu\n  sibling_uuid: 1Y-EVaBFWkuKnN0_\n  child_uuid: xpKQHRV_K7bfp3gb\n  parent_uuid: BAls4pP-NeY80xRi\n  doc_id: ''\n  level: 1\n  id: ''\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 介绍\n  uuid: xpKQHRV_K7bfp3gb\n  url: klkzoy\n  prev_uuid: GLK4TI6bZt4Xxu6b\n  sibling_uuid: xCty9hwaaVernWqJ\n  child_uuid: ''\n  parent_uuid: GLK4TI6bZt4Xxu6b\n  doc_id: 66948082\n  level: 2\n  id: 66948082\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 发布方式\n  uuid: xCty9hwaaVernWqJ\n  url: ohsgmx\n  prev_uuid: xpKQHRV_K7bfp3gb\n  sibling_uuid: 1robqYdQQG0wFPvT\n  child_uuid: ''\n  parent_uuid: GLK4TI6bZt4Xxu6b\n  doc_id: 75212608\n  level: 2\n  id: 75212608\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 数据库表设计\n  uuid: 1robqYdQQG0wFPvT\n  url: csg8d4\n  prev_uuid: xCty9hwaaVernWqJ\n  sibling_uuid: Dvglyu8bpWNiJpBK\n  child_uuid: ''\n  parent_uuid: GLK4TI6bZt4Xxu6b\n  doc_id: 66912281\n  level: 2\n  id: 66912281\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 原型设计\n  uuid: Dvglyu8bpWNiJpBK\n  url: ktgzlc\n  prev_uuid: 1robqYdQQG0wFPvT\n  sibling_uuid: ''\n  child_uuid: ''\n  parent_uuid: GLK4TI6bZt4Xxu6b\n  doc_id: 67155542\n  level: 2\n  id: 67155542\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: webx\n  uuid: 1Y-EVaBFWkuKnN0_\n  url: yghis3\n  prev_uuid: GLK4TI6bZt4Xxu6b\n  sibling_uuid: s3s0XuEuOPAMWB6v\n  child_uuid: ''\n  parent_uuid: BAls4pP-NeY80xRi\n  doc_id: 73626184\n  level: 1\n  id: 73626184\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: TypeScript 在团队内部的实践总结\n  uuid: s3s0XuEuOPAMWB6v\n  url: bp0lie\n  prev_uuid: 1Y-EVaBFWkuKnN0_\n  sibling_uuid: cBBVzib8WHiSWbfw\n  child_uuid: ''\n  parent_uuid: BAls4pP-NeY80xRi\n  doc_id: 70125424\n  level: 1\n  id: 70125424\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 利用 ts + proxy 增强 api 类型推导功能\n  uuid: cBBVzib8WHiSWbfw\n  url: wagl2t\n  prev_uuid: s3s0XuEuOPAMWB6v\n  sibling_uuid: OSV3qUcGRRunfF_K\n  child_uuid: ''\n  parent_uuid: BAls4pP-NeY80xRi\n  doc_id: 75215879\n  level: 1\n  id: 75215879\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 人工审核系统\n  uuid: OSV3qUcGRRunfF_K\n  url: nw2hf8\n  prev_uuid: cBBVzib8WHiSWbfw\n  sibling_uuid: Z9NSZiuYLWhda8gH\n  child_uuid: ''\n  parent_uuid: BAls4pP-NeY80xRi\n  doc_id: 75041091\n  level: 1\n  id: 75041091\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 长列表性能优化\n  uuid: Z9NSZiuYLWhda8gH\n  url: gkfqwb\n  prev_uuid: OSV3qUcGRRunfF_K\n  sibling_uuid: Xkshht2CcjCCitea\n  child_uuid: ''\n  parent_uuid: BAls4pP-NeY80xRi\n  doc_id: 75286551\n  level: 1\n  id: 75286551\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 小程序体验分优化\n  uuid: Xkshht2CcjCCitea\n  url: kdytb8\n  prev_uuid: Z9NSZiuYLWhda8gH\n  sibling_uuid: ''\n  child_uuid: ''\n  parent_uuid: BAls4pP-NeY80xRi\n  doc_id: 75216281\n  level: 1\n  id: 75216281\n  open_window: 0\n  visible: 0\n- type: TITLE\n  title: 小程序接入原子化 css 样式库并支持分包输出\n  uuid: OBIPwt2GqG4q-vpQ\n  url: ''\n  prev_uuid: BAls4pP-NeY80xRi\n  sibling_uuid: aPheiwf1071mw6tU\n  child_uuid: tpFBhK_D2hlsZj9w\n  parent_uuid: ''\n  doc_id: ''\n  level: 0\n  id: ''\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 备忘录\n  uuid: tpFBhK_D2hlsZj9w\n  url: pbxykl\n  prev_uuid: OBIPwt2GqG4q-vpQ\n  sibling_uuid: iJCb_ylpdQ6AVtDy\n  child_uuid: ''\n  parent_uuid: OBIPwt2GqG4q-vpQ\n  doc_id: 67295600\n  level: 1\n  id: 67295600\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 架构设计\n  uuid: iJCb_ylpdQ6AVtDy\n  url: elafeo\n  prev_uuid: tpFBhK_D2hlsZj9w\n  sibling_uuid: ''\n  child_uuid: ''\n  parent_uuid: OBIPwt2GqG4q-vpQ\n  doc_id: 70799795\n  level: 1\n  id: 70799795\n  open_window: 0\n  visible: 0\n- type: DOC\n  title: 研发流程\n  uuid: aPheiwf1071mw6tU\n  url: rl51ig\n  prev_uuid: OBIPwt2GqG4q-vpQ\n  sibling_uuid: KiBu4V9imsSGolKk\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 70125489\n  level: 0\n  id: 70125489\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 一些分享\n  uuid: KiBu4V9imsSGolKk\n  url: guat9s\n  prev_uuid: aPheiwf1071mw6tU\n  sibling_uuid: 5AwFIGCO-4sox4yt\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 71173266\n  level: 0\n  id: 71173266\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 字节面经\n  uuid: 5AwFIGCO-4sox4yt\n  url: gq8kd3\n  prev_uuid: KiBu4V9imsSGolKk\n  sibling_uuid: 8ot1aeLekjpB9XKV\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 81937341\n  level: 0\n  id: 81937341\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: polyfill\n  uuid: 8ot1aeLekjpB9XKV\n  url: nzrear\n  prev_uuid: 5AwFIGCO-4sox4yt\n  sibling_uuid: ''\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 81938260\n  level: 0\n  id: 81938260\n  open_window: 0\n  visible: 1\n",
    "creator_id": 732231,
    "public": 0,
    "items_count": 23,
    "likes_count": 0,
    "watches_count": 1,
    "content_updated_at": "2022-12-25T07:59:52.340Z",
    "created_at": "2022-03-03T15:06:25.000Z",
    "updated_at": "2023-11-07T15:52:14.000Z",
    "user": {
      "id": 732231,
      "type": "User",
      "login": "wcywxq",
      "name": "magic",
      "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/732231/1606968271774-avatar/886ad88b-d2cc-4c9e-a674-f70eb51a679c.png",
      "books_count": 21,
      "public_books_count": 0,
      "followers_count": 0,
      "following_count": 0,
      "public": 1,
      "description": null,
      "created_at": "2020-01-08T14:21:31.000Z",
      "updated_at": "2023-11-22T20:13:30.000Z",
      "work_id": "",
      "_serializer": "v2.user"
    },
    "namespace": "wcywxq/aggvdq",
    "_serializer": "v2.book"
  },
  "user": {
    "id": 732231,
    "type": "User",
    "login": "wcywxq",
    "name": "magic",
    "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/732231/1606968271774-avatar/886ad88b-d2cc-4c9e-a674-f70eb51a679c.png",
    "books_count": 21,
    "public_books_count": 0,
    "followers_count": 0,
    "following_count": 0,
    "public": 1,
    "description": null,
    "created_at": "2020-01-08T14:21:31.000Z",
    "updated_at": "2023-11-22T20:13:30.000Z",
    "work_id": "",
    "_serializer": "v2.user"
  },
  "tags": [],
  "latest_version_id": 956092435,
  "creator": {
    "id": 732231,
    "type": "User",
    "login": "wcywxq",
    "name": "magic",
    "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/732231/1606968271774-avatar/886ad88b-d2cc-4c9e-a674-f70eb51a679c.png",
    "books_count": 21,
    "public_books_count": 0,
    "followers_count": 0,
    "following_count": 0,
    "public": 1,
    "description": null,
    "created_at": "2020-01-08T14:21:31.000Z",
    "updated_at": "2023-11-22T20:13:30.000Z",
    "work_id": "",
    "_serializer": "v2.user"
  },
  "_serializer": "v2.doc_detail"
}