{
  "id": 73218284,
  "slug": "uhv9t2",
  "title": "面经",
  "description": "项目行程中，订单流转冒泡页，发单拦截webx，任务队列，架构设计八股文mpx 框架mpx 响应式原理在构建编译过程中，将 template 模块转化为 renderFunction，提供了渲染模版时所需响应式数据的访问机制，并将 renderFunction 注入到运行时代码中在运行环节，mp...",
  "cover": "",
  "user_id": 732231,
  "book_id": 24987782,
  "last_editor_id": 732231,
  "format": "lake",
  "body_draft": "<!doctype html><div class=\"lake-content\" typography=\"classic\"><ul class=\"ne-ul\"><li id=\"u141bd141\"><span class=\"ne-text\">项目</span></li></ul><ul class=\"ne-list-wrap\"><ul ne-level=\"1\" class=\"ne-ul\"><li id=\"ucad70c01\"><span class=\"ne-text\">行程中，订单流转</span></li><li id=\"uecf9deab\"><span class=\"ne-text\">冒泡页，发单拦截</span></li><li id=\"u0696baad\"><span class=\"ne-text\">webx，任务队列，架构设计</span></li></ul></ul><ul class=\"ne-ul\"><li id=\"u517ec4d4\"><span class=\"ne-text\">八股文</span></li><li id=\"u0089674c\"><span class=\"ne-text\">mpx 框架</span></li></ul><ul class=\"ne-list-wrap\"><ul ne-level=\"1\" class=\"ne-ul\"><li id=\"u126f974b\"><span class=\"ne-text\">mpx 响应式原理</span></li></ul></ul><ul class=\"ne-list-wrap\"><ul class=\"ne-list-wrap\"><ul ne-level=\"2\" class=\"ne-ul\"><li id=\"u46819299\"><span class=\"ne-text\">在构建编译过程中，将 template 模块转化为 renderFunction，提供了渲染模版时所需响应式数据的访问机制，并将 renderFunction 注入到运行时代码中</span></li><li id=\"ubc32d58a\"><span class=\"ne-text\">在运行环节，mpx 通过创建一个小程序实例的代理对象，将小程序实例上的数据访问全部代理到 MPXProxy 实例上，而 MPXProxy 实例即 mpx 基于 mobx 去创建的一套响应式数据对象，首先将 data 数据转化为响应式数据，其次提供了 computed 计算属性，watch 方法等一些列增强的扩展属性/方法，虽然在业务代码中 page/component 实例 this 都是小程序提供的，但是最终经过代理机制，实际上访问的是 MPXProxy 所提供的增强功能，所以 mpx 也是通过这样一个代理对象去接管了小程序的实例。</span></li><li id=\"u24c5ec40\"><span class=\"ne-text\">另外，mpx 将小程序官方提供的 setData 方法同样收敛到内部，这也是响应式系统提供的基础能力，即：开发者只需要关注业务开发，而有关小程序渲染运行，在 mpx 内部已经帮我们完成了</span></li></ul></ul></ul><ul class=\"ne-list-wrap\"><ul ne-level=\"1\" class=\"ne-ul\"><li id=\"u7551b2e9\"><span class=\"ne-text\">mpx 性能优化</span></li></ul></ul><ul class=\"ne-list-wrap\"><ul class=\"ne-list-wrap\"><ul ne-level=\"2\" class=\"ne-ul\"><li id=\"uf043a8cf\"><span class=\"ne-text\">由于小程序的双线程的架构设计，逻辑层和视图层之间需要桥接 native bridge，如果要完成视图层的更新，那么逻辑层需要调用 setData 方法，数据经由 native bridge，再到渲染层，整体流程为：</span></li></ul></ul></ul><ul class=\"ne-list-wrap\"><ul class=\"ne-list-wrap\"><ul class=\"ne-list-wrap\"><ul ne-level=\"3\" class=\"ne-ul\"><li id=\"uef9c7764\"><span class=\"ne-text\">小程序逻辑层调用宿主环境的 setData 方法</span></li><li id=\"u79e748f5\"><span class=\"ne-text\">逻辑层执行 JSON.stringify 将待传输数据转换成字符串并凭借到特定的 js 脚本，并通过 evaluteJavascript 执行脚本将数据传输到渲染层</span></li><li id=\"ucb971a26\"><span class=\"ne-text\">渲染层接收后，webview js 线程会对脚本进行编译，得到待更新数据后进入渲染队列等待 webview 线程空闲时进行页面渲染</span></li><li id=\"u71d250f0\"><span class=\"ne-text\">webview 线程开始执行渲染时，待更新数据会合并到视图层并保留原始 data 数据，并将新数据套用在 wxml 片段中得到新的虚拟节点树，经过新虚拟节点树与当前节点树的 diff 对比，将差异部分更新到 ui 视图，同时将新的节点树替换旧节点树，用于下一次重渲染</span></li></ul></ul></ul></ul><ul class=\"ne-list-wrap\"><ul class=\"ne-list-wrap\"><ul ne-level=\"2\" class=\"ne-ul\"><li id=\"uac940de1\"><span class=\"ne-text\">尽可能减少 setData 传输数据</span></li><li id=\"u3a383b47\"><span class=\"ne-text\">尽可能减少 setData 调用频率</span></li></ul></ul></ul><ul class=\"ne-list-wrap\"><ul ne-level=\"1\" class=\"ne-ul\"><li id=\"u38fbe68b\"><span class=\"ne-text\">mpx 条件编译</span></li></ul></ul><ul class=\"ne-list-wrap\"><ul class=\"ne-list-wrap\"><ul ne-level=\"2\" class=\"ne-ul\"><li id=\"u7a96aaef\"><span class=\"ne-text\">mpx 跨平台编译的额原则在于，能转则转，转不了则报错提示，对于无法抹平差异的部分，我们提供了完善的跨平台条件编译机制，便于用户处理因平台差异而无法相互转换的部分，也能够用于实现具有平台差异性的业务逻辑</span></li><li id=\"ufbec25fb\"><span class=\"ne-text\">mpx 中支持了三种维度的条件编译，分别是：文件维度、区块维度和代码维度，其中，文件维度和区块维度主要用于处理一些大块的平台差异性逻辑，而代码维度主要用于处理一些局部简单的平台差异</span></li></ul></ul></ul><ul class=\"ne-list-wrap\"><ul class=\"ne-list-wrap\"><ul class=\"ne-list-wrap\"><ul ne-level=\"3\" class=\"ne-ul\"><li id=\"u754f2ffc\"><span class=\"ne-text\">文件维度：通过新建 xx.mode.mpx，使用对应平台的技术标准进行开发</span></li><li id=\"u94f3cb0f\"><span class=\"ne-text\">区块维度：只需要在区块标签中添加 mode 属性定义该区块的目标平台即可</span></li><li id=\"ud29899d2\"><span class=\"ne-text\">代码维度：使用 </span><code class=\"ne-code\"><span class=\"ne-text\">__mpx_mode__</span></code><span class=\"ne-text\"> 进行逻辑处理</span></li><li id=\"uff191d4e\"><span class=\"ne-text\">属性维度：通过在组件上使用</span><code class=\"ne-code\"><span class=\"ne-text\">@</span></code><span class=\"ne-text\">和</span><code class=\"ne-code\"><span class=\"ne-text\">｜</span></code><span class=\"ne-text\">符号来指定某个节点或属性只能在某些平台下有效</span></li><li id=\"u6ac51ee4\"><span class=\"ne-text\">env 环境维度：通过自定义 env 的形式实现在不同环境下编译产出不同代码</span></li></ul></ul></ul></ul><ul class=\"ne-list-wrap\"><ul ne-level=\"1\" class=\"ne-ul\"><li id=\"uc68ef8d0\"><span class=\"ne-text\">mpx 的 store</span></li></ul></ul><ul class=\"ne-list-wrap\"><ul class=\"ne-list-wrap\"><ul ne-level=\"2\" class=\"ne-ul\"><li id=\"u2022a7e3\"><span class=\"ne-text\">基于 mobx 重新封装实现一个符合 vuex 规范的数据管理 store，能够方便地注入组件进行全局数据管理。为了提高跨团队开发的体验，对 store</span><strong><span class=\"ne-text\"> 添加了多实例可合并</span></strong><span class=\"ne-text\">的特性，不同团队维护自己的 store，在需要时能够合并他人或者公共的 store 生成新的 store 实例，我们认为这是一种比 vuex 中 modules 更加灵活便捷的跨团队数据管理模式</span></li></ul></ul></ul><ul class=\"ne-ul\"><li id=\"u00dbf19f\"><span class=\"ne-text\">小程序</span></li></ul><ul class=\"ne-list-wrap\"><ul ne-level=\"1\" class=\"ne-tl\"><li checked=\"true\" id=\"u147f6b38\"><span class=\"ne-text\">微信小程序渲染流程</span></li><li id=\"u813b1c5f\"><span class=\"ne-text\">微信小程序自定义事件的方式</span></li><li checked=\"true\" id=\"ucf08271a\"><span class=\"ne-text\">微信小程序绑定事件的方式</span></li><li id=\"u0c1af476\"><span class=\"ne-text\">微信小程序订阅流程</span></li><li checked=\"true\" id=\"u443767d9\"><span class=\"ne-text\">微信小程序登陆流程</span></li><li checked=\"true\" id=\"ue6a72efc\"><span class=\"ne-text\">h5 如何唤醒小程序</span></li><li id=\"u160c4834\"><span class=\"ne-text\">小程序和 h5 的区别</span></li><li checked=\"true\" id=\"u2abaddfc\"><span class=\"ne-text\">scroll-view 如何进行下拉刷新</span></li><li id=\"u0cbab361\"><span class=\"ne-text\">微信小程序如何实现页面之间的数据传递</span></li><li checked=\"true\" id=\"u12a97b75\"><span class=\"ne-text\">微信小程序跳转的几种方式</span></li><li checked=\"true\" id=\"uf0a37433\"><span class=\"ne-text\">微信小程序接收参数的几种方法</span></li><li id=\"u109e208c\"><span class=\"ne-text\">wxss 和 css 的区别</span></li></ul></ul><ul class=\"ne-ul\"><li id=\"ub6bba0c4\"><span class=\"ne-text\">笔试</span></li></ul><ul class=\"ne-list-wrap\"><ul ne-level=\"1\" class=\"ne-ul\"><li id=\"u9fd52924\"><span class=\"ne-text\">输出结果</span></li></ul></ul><pre data-language=\"vue\" id=\"NFOh8\" class=\"ne-codeblock language-vue\">&lt;template&gt;\n  &lt;div id=&quot;container&quot;&gt;{{ count }}&lt;/div&gt;\n&lt;/template&gt;\n&lt;script&gt;\n  export default {\n    data() {\n      return { count: 0 }\n    },\n    watch: {\n      count(newVal, oldVal) {\n        // 打印几次，值是多少？1, 3\n        console.log(newVal)\n      }\n    },\n    mounted() {\n      for (var i = 1; i &lt;= 3; i++) {\n        this.count += 1\n      }\n      // 值是多少? 0\n      console.log(document.querySelector('#container').innerText)\n    }\n  }\n&lt;/script&gt;</pre><ul class=\"ne-list-wrap\"><ul ne-level=\"1\" class=\"ne-ul\"><li id=\"u8460f067\"><span class=\"ne-text\">原型输出</span></li></ul></ul><pre data-language=\"javascript\" id=\"Zq7bo\" class=\"ne-codeblock language-javascript\">function A() {}\nvar a = new A()\nconsole.log(a.__proto__) // f A() {}\nconsole.log(a.__proto__.__proto__) // f Object() {}\nconsole.log(A.prototype.__proto__) // f Object() {}\nconsole.log(typeof Object) // &quot;function&quot;</pre><ul class=\"ne-list-wrap\"><ul ne-level=\"1\" class=\"ne-tl\"><li checked=\"true\" id=\"uf42b47a6\"><span class=\"ne-text\">实现一个带缓存功能的请求函数</span></li><li id=\"uc37de4cc\"><span class=\"ne-text\">实现字符串计算器</span></li><li id=\"ud642128c\"><span class=\"ne-text\">处理时间，显示几分钟前</span></li><li id=\"u3e39349c\"><span class=\"ne-text\">实现 JSON.stringify</span></li><li id=\"u7f16e008\"><span class=\"ne-text\">实现 lodash.get 方法</span></li><li id=\"udf96882c\"><span class=\"ne-text\">js 格式化时间</span></li></ul></ul><ul class=\"ne-ul\"><li id=\"u687270c2\"><span class=\"ne-text\">算法</span></li></ul><ul class=\"ne-list-wrap\"><ul ne-level=\"1\" class=\"ne-tl\"><li id=\"u64547ec8\"><span class=\"ne-text\">leetcode 岛屿问题</span></li><li id=\"ua9d478e3\"><span class=\"ne-text\">leetcode 接雨水</span></li><li id=\"u99717f3e\"><span class=\"ne-text\">leetcode 无重复最长子串</span></li><li id=\"u2af179ec\"><span class=\"ne-text\">leetcode 41 缺失的第一个整数</span></li><li id=\"uc9ecf593\"><span class=\"ne-text\">leetcode 628 三个数的最大乘积</span></li><li id=\"ua54ad998\"><span class=\"ne-text\">leetcode 1249 移除无效的括号</span></li><li id=\"ubb9e1e34\"><span class=\"ne-text\">剑指 offer 50 第一个只出现一次的字符</span></li><li id=\"u20356553\"><span class=\"ne-text\">剑指 offer 1534 统计好三元组</span></li><li id=\"uf595fd67\"><span class=\"ne-text\">剑指 offer 29 顺时针螺旋矩阵</span></li></ul></ul><ul class=\"ne-ul\"><li id=\"u82a02282\"><span class=\"ne-text\">场景</span></li></ul><ul class=\"ne-list-wrap\"><ul ne-level=\"1\" class=\"ne-ul\"><li id=\"uc41b8877\"><span class=\"ne-text\">设计一个组件，该组件是一个 Input 输入框，有下拉功能，可以发请求</span></li></ul></ul><ul class=\"ne-list-wrap\"><ul class=\"ne-list-wrap\"><ul ne-level=\"2\" class=\"ne-ul\"><li id=\"u2c719f3a\"><span class=\"ne-text\">防抖</span></li><li id=\"u7dcad9fb\"><span class=\"ne-text\">控制 response 时序</span></li><li id=\"ue1801170\"><span class=\"ne-text\">大数据量处理</span></li></ul></ul></ul></div>",
  "body": "- 项目\n   - 行程中，订单流转\n   - 冒泡页，发单拦截\n   - webx，任务队列，架构设计\n- 八股文\n- mpx 框架\n   - mpx 响应式原理\n      - 在构建编译过程中，将 template 模块转化为 renderFunction，提供了渲染模版时所需响应式数据的访问机制，并将 renderFunction 注入到运行时代码中\n      - 在运行环节，mpx 通过创建一个小程序实例的代理对象，将小程序实例上的数据访问全部代理到 MPXProxy 实例上，而 MPXProxy 实例即 mpx 基于 mobx 去创建的一套响应式数据对象，首先将 data 数据转化为响应式数据，其次提供了 computed 计算属性，watch 方法等一些列增强的扩展属性/方法，虽然在业务代码中 page/component 实例 this 都是小程序提供的，但是最终经过代理机制，实际上访问的是 MPXProxy 所提供的增强功能，所以 mpx 也是通过这样一个代理对象去接管了小程序的实例。\n      - 另外，mpx 将小程序官方提供的 setData 方法同样收敛到内部，这也是响应式系统提供的基础能力，即：开发者只需要关注业务开发，而有关小程序渲染运行，在 mpx 内部已经帮我们完成了\n   - mpx 性能优化\n      - 由于小程序的双线程的架构设计，逻辑层和视图层之间需要桥接 native bridge，如果要完成视图层的更新，那么逻辑层需要调用 setData 方法，数据经由 native bridge，再到渲染层，整体流程为：\n         - 小程序逻辑层调用宿主环境的 setData 方法\n         - 逻辑层执行 JSON.stringify 将待传输数据转换成字符串并凭借到特定的 js 脚本，并通过 evaluteJavascript 执行脚本将数据传输到渲染层\n         - 渲染层接收后，webview js 线程会对脚本进行编译，得到待更新数据后进入渲染队列等待 webview 线程空闲时进行页面渲染\n         - webview 线程开始执行渲染时，待更新数据会合并到视图层并保留原始 data 数据，并将新数据套用在 wxml 片段中得到新的虚拟节点树，经过新虚拟节点树与当前节点树的 diff 对比，将差异部分更新到 ui 视图，同时将新的节点树替换旧节点树，用于下一次重渲染\n      - 尽可能减少 setData 传输数据\n      - 尽可能减少 setData 调用频率\n   - mpx 条件编译\n      - mpx 跨平台编译的额原则在于，能转则转，转不了则报错提示，对于无法抹平差异的部分，我们提供了完善的跨平台条件编译机制，便于用户处理因平台差异而无法相互转换的部分，也能够用于实现具有平台差异性的业务逻辑\n      - mpx 中支持了三种维度的条件编译，分别是：文件维度、区块维度和代码维度，其中，文件维度和区块维度主要用于处理一些大块的平台差异性逻辑，而代码维度主要用于处理一些局部简单的平台差异\n         - 文件维度：通过新建 xx.mode.mpx，使用对应平台的技术标准进行开发\n         - 区块维度：只需要在区块标签中添加 mode 属性定义该区块的目标平台即可\n         - 代码维度：使用 `__mpx_mode__` 进行逻辑处理\n         - 属性维度：通过在组件上使用`@`和`｜`符号来指定某个节点或属性只能在某些平台下有效\n         - env 环境维度：通过自定义 env 的形式实现在不同环境下编译产出不同代码\n   - mpx 的 store\n      - 基于 mobx 重新封装实现一个符合 vuex 规范的数据管理 store，能够方便地注入组件进行全局数据管理。为了提高跨团队开发的体验，对 store** 添加了多实例可合并**的特性，不同团队维护自己的 store，在需要时能够合并他人或者公共的 store 生成新的 store 实例，我们认为这是一种比 vuex 中 modules 更加灵活便捷的跨团队数据管理模式\n- 小程序\n- [x] 微信小程序渲染流程\n- [ ] 微信小程序自定义事件的方式\n- [x] 微信小程序绑定事件的方式\n- [ ] 微信小程序订阅流程\n- [x] 微信小程序登陆流程\n- [x] h5 如何唤醒小程序\n- [ ] 小程序和 h5 的区别\n- [x] scroll-view 如何进行下拉刷新\n- [ ] 微信小程序如何实现页面之间的数据传递\n- [x] 微信小程序跳转的几种方式\n- [x] 微信小程序接收参数的几种方法\n- [ ] wxss 和 css 的区别\n- 笔试\n   - 输出结果\n```vue\n<template>\n  <div id=\"container\">{{ count }}</div>\n</template>\n<script>\n  export default {\n    data() {\n      return { count: 0 }\n    },\n    watch: {\n      count(newVal, oldVal) {\n        // 打印几次，值是多少？1, 3\n        console.log(newVal)\n      }\n    },\n    mounted() {\n      for (var i = 1; i <= 3; i++) {\n        this.count += 1\n      }\n      // 值是多少? 0\n      console.log(document.querySelector('#container').innerText)\n    }\n  }\n</script>\n```\n\n   - 原型输出\n```javascript\nfunction A() {}\nvar a = new A()\nconsole.log(a.__proto__) // f A() {}\nconsole.log(a.__proto__.__proto__) // f Object() {}\nconsole.log(A.prototype.__proto__) // f Object() {}\nconsole.log(typeof Object) // \"function\"\n```\n\n- [x] 实现一个带缓存功能的请求函数\n- [ ] 实现字符串计算器\n- [ ] 处理时间，显示几分钟前\n- [ ] 实现 JSON.stringify\n- [ ] 实现 lodash.get 方法\n- [ ] js 格式化时间\n- 算法\n- [ ] leetcode 岛屿问题\n- [ ] leetcode 接雨水\n- [ ] leetcode 无重复最长子串\n- [ ] leetcode 41 缺失的第一个整数\n- [ ] leetcode 628 三个数的最大乘积\n- [ ] leetcode 1249 移除无效的括号\n- [ ] 剑指 offer 50 第一个只出现一次的字符\n- [ ] 剑指 offer 1534 统计好三元组\n- [ ] 剑指 offer 29 顺时针螺旋矩阵\n- 场景\n   - 设计一个组件，该组件是一个 Input 输入框，有下拉功能，可以发请求\n      - 防抖\n      - 控制 response 时序\n      - 大数据量处理\n",
  "body_html": "<!doctype html><div class=\"lake-content\" typography=\"classic\"><ul class=\"ne-ul\"><li id=\"u141bd141\"><span class=\"ne-text\">项目</span></li></ul><ul class=\"ne-list-wrap\"><ul ne-level=\"1\" class=\"ne-ul\"><li id=\"ucad70c01\"><span class=\"ne-text\">行程中，订单流转</span></li><li id=\"uecf9deab\"><span class=\"ne-text\">冒泡页，发单拦截</span></li><li id=\"u0696baad\"><span class=\"ne-text\">webx，任务队列，架构设计</span></li></ul></ul><ul class=\"ne-ul\"><li id=\"u517ec4d4\"><span class=\"ne-text\">八股文</span></li><li id=\"u0089674c\"><span class=\"ne-text\">mpx 框架</span></li></ul><ul class=\"ne-list-wrap\"><ul ne-level=\"1\" class=\"ne-ul\"><li id=\"u126f974b\"><span class=\"ne-text\">mpx 响应式原理</span></li></ul></ul><ul class=\"ne-list-wrap\"><ul class=\"ne-list-wrap\"><ul ne-level=\"2\" class=\"ne-ul\"><li id=\"u46819299\"><span class=\"ne-text\">在构建编译过程中，将 template 模块转化为 renderFunction，提供了渲染模版时所需响应式数据的访问机制，并将 renderFunction 注入到运行时代码中</span></li><li id=\"ubc32d58a\"><span class=\"ne-text\">在运行环节，mpx 通过创建一个小程序实例的代理对象，将小程序实例上的数据访问全部代理到 MPXProxy 实例上，而 MPXProxy 实例即 mpx 基于 mobx 去创建的一套响应式数据对象，首先将 data 数据转化为响应式数据，其次提供了 computed 计算属性，watch 方法等一些列增强的扩展属性/方法，虽然在业务代码中 page/component 实例 this 都是小程序提供的，但是最终经过代理机制，实际上访问的是 MPXProxy 所提供的增强功能，所以 mpx 也是通过这样一个代理对象去接管了小程序的实例。</span></li><li id=\"u24c5ec40\"><span class=\"ne-text\">另外，mpx 将小程序官方提供的 setData 方法同样收敛到内部，这也是响应式系统提供的基础能力，即：开发者只需要关注业务开发，而有关小程序渲染运行，在 mpx 内部已经帮我们完成了</span></li></ul></ul></ul><ul class=\"ne-list-wrap\"><ul ne-level=\"1\" class=\"ne-ul\"><li id=\"u7551b2e9\"><span class=\"ne-text\">mpx 性能优化</span></li></ul></ul><ul class=\"ne-list-wrap\"><ul class=\"ne-list-wrap\"><ul ne-level=\"2\" class=\"ne-ul\"><li id=\"uf043a8cf\"><span class=\"ne-text\">由于小程序的双线程的架构设计，逻辑层和视图层之间需要桥接 native bridge，如果要完成视图层的更新，那么逻辑层需要调用 setData 方法，数据经由 native bridge，再到渲染层，整体流程为：</span></li></ul></ul></ul><ul class=\"ne-list-wrap\"><ul class=\"ne-list-wrap\"><ul class=\"ne-list-wrap\"><ul ne-level=\"3\" class=\"ne-ul\"><li id=\"uef9c7764\"><span class=\"ne-text\">小程序逻辑层调用宿主环境的 setData 方法</span></li><li id=\"u79e748f5\"><span class=\"ne-text\">逻辑层执行 JSON.stringify 将待传输数据转换成字符串并凭借到特定的 js 脚本，并通过 evaluteJavascript 执行脚本将数据传输到渲染层</span></li><li id=\"ucb971a26\"><span class=\"ne-text\">渲染层接收后，webview js 线程会对脚本进行编译，得到待更新数据后进入渲染队列等待 webview 线程空闲时进行页面渲染</span></li><li id=\"u71d250f0\"><span class=\"ne-text\">webview 线程开始执行渲染时，待更新数据会合并到视图层并保留原始 data 数据，并将新数据套用在 wxml 片段中得到新的虚拟节点树，经过新虚拟节点树与当前节点树的 diff 对比，将差异部分更新到 ui 视图，同时将新的节点树替换旧节点树，用于下一次重渲染</span></li></ul></ul></ul></ul><ul class=\"ne-list-wrap\"><ul class=\"ne-list-wrap\"><ul ne-level=\"2\" class=\"ne-ul\"><li id=\"uac940de1\"><span class=\"ne-text\">尽可能减少 setData 传输数据</span></li><li id=\"u3a383b47\"><span class=\"ne-text\">尽可能减少 setData 调用频率</span></li></ul></ul></ul><ul class=\"ne-list-wrap\"><ul ne-level=\"1\" class=\"ne-ul\"><li id=\"u38fbe68b\"><span class=\"ne-text\">mpx 条件编译</span></li></ul></ul><ul class=\"ne-list-wrap\"><ul class=\"ne-list-wrap\"><ul ne-level=\"2\" class=\"ne-ul\"><li id=\"u7a96aaef\"><span class=\"ne-text\">mpx 跨平台编译的额原则在于，能转则转，转不了则报错提示，对于无法抹平差异的部分，我们提供了完善的跨平台条件编译机制，便于用户处理因平台差异而无法相互转换的部分，也能够用于实现具有平台差异性的业务逻辑</span></li><li id=\"ufbec25fb\"><span class=\"ne-text\">mpx 中支持了三种维度的条件编译，分别是：文件维度、区块维度和代码维度，其中，文件维度和区块维度主要用于处理一些大块的平台差异性逻辑，而代码维度主要用于处理一些局部简单的平台差异</span></li></ul></ul></ul><ul class=\"ne-list-wrap\"><ul class=\"ne-list-wrap\"><ul class=\"ne-list-wrap\"><ul ne-level=\"3\" class=\"ne-ul\"><li id=\"u754f2ffc\"><span class=\"ne-text\">文件维度：通过新建 xx.mode.mpx，使用对应平台的技术标准进行开发</span></li><li id=\"u94f3cb0f\"><span class=\"ne-text\">区块维度：只需要在区块标签中添加 mode 属性定义该区块的目标平台即可</span></li><li id=\"ud29899d2\"><span class=\"ne-text\">代码维度：使用 </span><code class=\"ne-code\"><span class=\"ne-text\">__mpx_mode__</span></code><span class=\"ne-text\"> 进行逻辑处理</span></li><li id=\"uff191d4e\"><span class=\"ne-text\">属性维度：通过在组件上使用</span><code class=\"ne-code\"><span class=\"ne-text\">@</span></code><span class=\"ne-text\">和</span><code class=\"ne-code\"><span class=\"ne-text\">｜</span></code><span class=\"ne-text\">符号来指定某个节点或属性只能在某些平台下有效</span></li><li id=\"u6ac51ee4\"><span class=\"ne-text\">env 环境维度：通过自定义 env 的形式实现在不同环境下编译产出不同代码</span></li></ul></ul></ul></ul><ul class=\"ne-list-wrap\"><ul ne-level=\"1\" class=\"ne-ul\"><li id=\"uc68ef8d0\"><span class=\"ne-text\">mpx 的 store</span></li></ul></ul><ul class=\"ne-list-wrap\"><ul class=\"ne-list-wrap\"><ul ne-level=\"2\" class=\"ne-ul\"><li id=\"u2022a7e3\"><span class=\"ne-text\">基于 mobx 重新封装实现一个符合 vuex 规范的数据管理 store，能够方便地注入组件进行全局数据管理。为了提高跨团队开发的体验，对 store</span><strong><span class=\"ne-text\"> 添加了多实例可合并</span></strong><span class=\"ne-text\">的特性，不同团队维护自己的 store，在需要时能够合并他人或者公共的 store 生成新的 store 实例，我们认为这是一种比 vuex 中 modules 更加灵活便捷的跨团队数据管理模式</span></li></ul></ul></ul><ul class=\"ne-ul\"><li id=\"u00dbf19f\"><span class=\"ne-text\">小程序</span></li></ul><ul class=\"ne-list-wrap\"><ul ne-level=\"1\" class=\"ne-tl\"><li checked=\"true\" id=\"u147f6b38\"><span class=\"ne-text\">微信小程序渲染流程</span></li><li id=\"u813b1c5f\"><span class=\"ne-text\">微信小程序自定义事件的方式</span></li><li checked=\"true\" id=\"ucf08271a\"><span class=\"ne-text\">微信小程序绑定事件的方式</span></li><li id=\"u0c1af476\"><span class=\"ne-text\">微信小程序订阅流程</span></li><li checked=\"true\" id=\"u443767d9\"><span class=\"ne-text\">微信小程序登陆流程</span></li><li checked=\"true\" id=\"ue6a72efc\"><span class=\"ne-text\">h5 如何唤醒小程序</span></li><li id=\"u160c4834\"><span class=\"ne-text\">小程序和 h5 的区别</span></li><li checked=\"true\" id=\"u2abaddfc\"><span class=\"ne-text\">scroll-view 如何进行下拉刷新</span></li><li id=\"u0cbab361\"><span class=\"ne-text\">微信小程序如何实现页面之间的数据传递</span></li><li checked=\"true\" id=\"u12a97b75\"><span class=\"ne-text\">微信小程序跳转的几种方式</span></li><li checked=\"true\" id=\"uf0a37433\"><span class=\"ne-text\">微信小程序接收参数的几种方法</span></li><li id=\"u109e208c\"><span class=\"ne-text\">wxss 和 css 的区别</span></li></ul></ul><ul class=\"ne-ul\"><li id=\"ub6bba0c4\"><span class=\"ne-text\">笔试</span></li></ul><ul class=\"ne-list-wrap\"><ul ne-level=\"1\" class=\"ne-ul\"><li id=\"u9fd52924\"><span class=\"ne-text\">输出结果</span></li></ul></ul><pre data-language=\"vue\" id=\"NFOh8\" class=\"ne-codeblock language-vue\">&lt;template&gt;\n  &lt;div id=&quot;container&quot;&gt;{{ count }}&lt;/div&gt;\n&lt;/template&gt;\n&lt;script&gt;\n  export default {\n    data() {\n      return { count: 0 }\n    },\n    watch: {\n      count(newVal, oldVal) {\n        // 打印几次，值是多少？1, 3\n        console.log(newVal)\n      }\n    },\n    mounted() {\n      for (var i = 1; i &lt;= 3; i++) {\n        this.count += 1\n      }\n      // 值是多少? 0\n      console.log(document.querySelector('#container').innerText)\n    }\n  }\n&lt;/script&gt;</pre><ul class=\"ne-list-wrap\"><ul ne-level=\"1\" class=\"ne-ul\"><li id=\"u8460f067\"><span class=\"ne-text\">原型输出</span></li></ul></ul><pre data-language=\"javascript\" id=\"Zq7bo\" class=\"ne-codeblock language-javascript\">function A() {}\nvar a = new A()\nconsole.log(a.__proto__) // f A() {}\nconsole.log(a.__proto__.__proto__) // f Object() {}\nconsole.log(A.prototype.__proto__) // f Object() {}\nconsole.log(typeof Object) // &quot;function&quot;</pre><ul class=\"ne-list-wrap\"><ul ne-level=\"1\" class=\"ne-tl\"><li checked=\"true\" id=\"uf42b47a6\"><span class=\"ne-text\">实现一个带缓存功能的请求函数</span></li><li id=\"uc37de4cc\"><span class=\"ne-text\">实现字符串计算器</span></li><li id=\"ud642128c\"><span class=\"ne-text\">处理时间，显示几分钟前</span></li><li id=\"u3e39349c\"><span class=\"ne-text\">实现 JSON.stringify</span></li><li id=\"u7f16e008\"><span class=\"ne-text\">实现 lodash.get 方法</span></li><li id=\"udf96882c\"><span class=\"ne-text\">js 格式化时间</span></li></ul></ul><ul class=\"ne-ul\"><li id=\"u687270c2\"><span class=\"ne-text\">算法</span></li></ul><ul class=\"ne-list-wrap\"><ul ne-level=\"1\" class=\"ne-tl\"><li id=\"u64547ec8\"><span class=\"ne-text\">leetcode 岛屿问题</span></li><li id=\"ua9d478e3\"><span class=\"ne-text\">leetcode 接雨水</span></li><li id=\"u99717f3e\"><span class=\"ne-text\">leetcode 无重复最长子串</span></li><li id=\"u2af179ec\"><span class=\"ne-text\">leetcode 41 缺失的第一个整数</span></li><li id=\"uc9ecf593\"><span class=\"ne-text\">leetcode 628 三个数的最大乘积</span></li><li id=\"ua54ad998\"><span class=\"ne-text\">leetcode 1249 移除无效的括号</span></li><li id=\"ubb9e1e34\"><span class=\"ne-text\">剑指 offer 50 第一个只出现一次的字符</span></li><li id=\"u20356553\"><span class=\"ne-text\">剑指 offer 1534 统计好三元组</span></li><li id=\"uf595fd67\"><span class=\"ne-text\">剑指 offer 29 顺时针螺旋矩阵</span></li></ul></ul><ul class=\"ne-ul\"><li id=\"u82a02282\"><span class=\"ne-text\">场景</span></li></ul><ul class=\"ne-list-wrap\"><ul ne-level=\"1\" class=\"ne-ul\"><li id=\"uc41b8877\"><span class=\"ne-text\">设计一个组件，该组件是一个 Input 输入框，有下拉功能，可以发请求</span></li></ul></ul><ul class=\"ne-list-wrap\"><ul class=\"ne-list-wrap\"><ul ne-level=\"2\" class=\"ne-ul\"><li id=\"u2c719f3a\"><span class=\"ne-text\">防抖</span></li><li id=\"u7dcad9fb\"><span class=\"ne-text\">控制 response 时序</span></li><li id=\"ue1801170\"><span class=\"ne-text\">大数据量处理</span></li></ul></ul></ul></div>",
  "body_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"viewport\" content=\"fixed\" /><ul list=\"u4f1e3db4\"><li fid=\"uacd1bc02\" data-lake-id=\"u141bd141\" id=\"u141bd141\"><span data-lake-id=\"uf24ce0d1\" id=\"uf24ce0d1\">项目</span></li></ul><ul list=\"u4f1e3db4\" data-lake-indent=\"1\"><li fid=\"uacd1bc02\" data-lake-id=\"ucad70c01\" id=\"ucad70c01\"><span data-lake-id=\"u072f2269\" id=\"u072f2269\">行程中，订单流转</span></li><li fid=\"uacd1bc02\" data-lake-id=\"uecf9deab\" id=\"uecf9deab\"><span data-lake-id=\"u70a08736\" id=\"u70a08736\">冒泡页，发单拦截</span></li><li fid=\"uacd1bc02\" data-lake-id=\"u0696baad\" id=\"u0696baad\"><span data-lake-id=\"u4dde4369\" id=\"u4dde4369\">webx，任务队列，架构设计</span></li></ul><ul list=\"u4f1e3db4\" start=\"2\"><li fid=\"uacd1bc02\" data-lake-id=\"u517ec4d4\" id=\"u517ec4d4\"><span data-lake-id=\"u18a0ad07\" id=\"u18a0ad07\">八股文</span></li><li fid=\"uacd1bc02\" data-lake-id=\"u0089674c\" id=\"u0089674c\"><span data-lake-id=\"u8a8167af\" id=\"u8a8167af\">mpx 框架</span></li></ul><ul list=\"u4f1e3db4\" data-lake-indent=\"1\"><li fid=\"uacd1bc02\" data-lake-id=\"u126f974b\" id=\"u126f974b\"><span data-lake-id=\"ufdcf3719\" id=\"ufdcf3719\">mpx 响应式原理</span></li></ul><ul list=\"u4f1e3db4\" data-lake-indent=\"2\"><li fid=\"uacd1bc02\" data-lake-id=\"u46819299\" id=\"u46819299\"><span data-lake-id=\"uf39a176a\" id=\"uf39a176a\">在构建编译过程中，将 template 模块转化为 renderFunction，提供了渲染模版时所需响应式数据的访问机制，并将 renderFunction 注入到运行时代码中</span></li><li fid=\"uacd1bc02\" data-lake-id=\"ubc32d58a\" id=\"ubc32d58a\"><span data-lake-id=\"u9e3e6c7a\" id=\"u9e3e6c7a\">在运行环节，mpx 通过创建一个小程序实例的代理对象，将小程序实例上的数据访问全部代理到 MPXProxy 实例上，而 MPXProxy 实例即 mpx 基于 mobx 去创建的一套响应式数据对象，首先将 data 数据转化为响应式数据，其次提供了 computed 计算属性，watch 方法等一些列增强的扩展属性/方法，虽然在业务代码中 page/component 实例 this 都是小程序提供的，但是最终经过代理机制，实际上访问的是 MPXProxy 所提供的增强功能，所以 mpx 也是通过这样一个代理对象去接管了小程序的实例。</span></li><li fid=\"uacd1bc02\" data-lake-id=\"u24c5ec40\" id=\"u24c5ec40\"><span data-lake-id=\"u4cdcedac\" id=\"u4cdcedac\">另外，mpx 将小程序官方提供的 setData 方法同样收敛到内部，这也是响应式系统提供的基础能力，即：开发者只需要关注业务开发，而有关小程序渲染运行，在 mpx 内部已经帮我们完成了</span></li></ul><ul list=\"u4f1e3db4\" start=\"2\" data-lake-indent=\"1\"><li fid=\"uacd1bc02\" data-lake-id=\"u7551b2e9\" id=\"u7551b2e9\"><span data-lake-id=\"u92676dd0\" id=\"u92676dd0\">mpx 性能优化</span></li></ul><ul list=\"u4f1e3db4\" data-lake-indent=\"2\"><li fid=\"uacd1bc02\" data-lake-id=\"uf043a8cf\" id=\"uf043a8cf\"><span data-lake-id=\"ucfde09da\" id=\"ucfde09da\">由于小程序的双线程的架构设计，逻辑层和视图层之间需要桥接 native bridge，如果要完成视图层的更新，那么逻辑层需要调用 setData 方法，数据经由 native bridge，再到渲染层，整体流程为：</span></li></ul><ul list=\"u4f1e3db4\" data-lake-indent=\"3\"><li fid=\"uacd1bc02\" data-lake-id=\"uef9c7764\" id=\"uef9c7764\"><span data-lake-id=\"u0b1d166c\" id=\"u0b1d166c\">小程序逻辑层调用宿主环境的 setData 方法</span></li><li fid=\"uacd1bc02\" data-lake-id=\"u79e748f5\" id=\"u79e748f5\"><span data-lake-id=\"u4b89357e\" id=\"u4b89357e\">逻辑层执行 JSON.stringify 将待传输数据转换成字符串并凭借到特定的 js 脚本，并通过 evaluteJavascript 执行脚本将数据传输到渲染层</span></li><li fid=\"uacd1bc02\" data-lake-id=\"ucb971a26\" id=\"ucb971a26\"><span data-lake-id=\"u26641c0c\" id=\"u26641c0c\">渲染层接收后，webview js 线程会对脚本进行编译，得到待更新数据后进入渲染队列等待 webview 线程空闲时进行页面渲染</span></li><li fid=\"uacd1bc02\" data-lake-id=\"u71d250f0\" id=\"u71d250f0\"><span data-lake-id=\"u2d01648a\" id=\"u2d01648a\">webview 线程开始执行渲染时，待更新数据会合并到视图层并保留原始 data 数据，并将新数据套用在 wxml 片段中得到新的虚拟节点树，经过新虚拟节点树与当前节点树的 diff 对比，将差异部分更新到 ui 视图，同时将新的节点树替换旧节点树，用于下一次重渲染</span></li></ul><ul list=\"u4f1e3db4\" start=\"2\" data-lake-indent=\"2\"><li fid=\"uacd1bc02\" data-lake-id=\"uac940de1\" id=\"uac940de1\"><span data-lake-id=\"ua6880a6b\" id=\"ua6880a6b\">尽可能减少 setData 传输数据</span></li><li fid=\"uacd1bc02\" data-lake-id=\"u3a383b47\" id=\"u3a383b47\"><span data-lake-id=\"ub8c96e8b\" id=\"ub8c96e8b\">尽可能减少 setData 调用频率</span></li></ul><ul list=\"u4f1e3db4\" start=\"3\" data-lake-indent=\"1\"><li fid=\"uacd1bc02\" data-lake-id=\"u38fbe68b\" id=\"u38fbe68b\"><span data-lake-id=\"u6b330784\" id=\"u6b330784\">mpx 条件编译</span></li></ul><ul list=\"u4f1e3db4\" data-lake-indent=\"2\"><li fid=\"uacd1bc02\" data-lake-id=\"u7a96aaef\" id=\"u7a96aaef\"><span data-lake-id=\"ufc400261\" id=\"ufc400261\">mpx 跨平台编译的额原则在于，能转则转，转不了则报错提示，对于无法抹平差异的部分，我们提供了完善的跨平台条件编译机制，便于用户处理因平台差异而无法相互转换的部分，也能够用于实现具有平台差异性的业务逻辑</span></li><li fid=\"uacd1bc02\" data-lake-id=\"ufbec25fb\" id=\"ufbec25fb\"><span data-lake-id=\"u7b1cebff\" id=\"u7b1cebff\">mpx 中支持了三种维度的条件编译，分别是：文件维度、区块维度和代码维度，其中，文件维度和区块维度主要用于处理一些大块的平台差异性逻辑，而代码维度主要用于处理一些局部简单的平台差异</span></li></ul><ul list=\"u4f1e3db4\" data-lake-indent=\"3\"><li fid=\"uacd1bc02\" data-lake-id=\"u754f2ffc\" id=\"u754f2ffc\"><span data-lake-id=\"u3e926d98\" id=\"u3e926d98\">文件维度：通过新建 xx.mode.mpx，使用对应平台的技术标准进行开发</span></li><li fid=\"uacd1bc02\" data-lake-id=\"u94f3cb0f\" id=\"u94f3cb0f\"><span data-lake-id=\"uccc61c63\" id=\"uccc61c63\">区块维度：只需要在区块标签中添加 mode 属性定义该区块的目标平台即可</span></li><li fid=\"uacd1bc02\" data-lake-id=\"ud29899d2\" id=\"ud29899d2\"><span data-lake-id=\"u52e2c2cc\" id=\"u52e2c2cc\">代码维度：使用 </span><code data-lake-id=\"u7336e398\" id=\"u7336e398\"><span data-lake-id=\"u758358ae\" id=\"u758358ae\">__mpx_mode__</span></code><span data-lake-id=\"u4acab1d1\" id=\"u4acab1d1\"> 进行逻辑处理</span></li><li fid=\"uacd1bc02\" data-lake-id=\"uff191d4e\" id=\"uff191d4e\"><span data-lake-id=\"u2a39bdd2\" id=\"u2a39bdd2\">属性维度：通过在组件上使用</span><code data-lake-id=\"u1f31387f\" id=\"u1f31387f\"><span data-lake-id=\"ued2c8b00\" id=\"ued2c8b00\">@</span></code><span data-lake-id=\"u57a5e6ad\" id=\"u57a5e6ad\">和</span><code data-lake-id=\"u7c7efe34\" id=\"u7c7efe34\"><span data-lake-id=\"u6e4343b4\" id=\"u6e4343b4\">｜</span></code><span data-lake-id=\"u52aed0e5\" id=\"u52aed0e5\">符号来指定某个节点或属性只能在某些平台下有效</span></li><li fid=\"uacd1bc02\" data-lake-id=\"u6ac51ee4\" id=\"u6ac51ee4\"><span data-lake-id=\"u5dae4639\" id=\"u5dae4639\">env 环境维度：通过自定义 env 的形式实现在不同环境下编译产出不同代码</span></li></ul><ul list=\"u4f1e3db4\" start=\"4\" data-lake-indent=\"1\"><li fid=\"uacd1bc02\" data-lake-id=\"uc68ef8d0\" id=\"uc68ef8d0\"><span data-lake-id=\"u8b3b5c9b\" id=\"u8b3b5c9b\">mpx 的 store</span></li></ul><ul list=\"u4f1e3db4\" data-lake-indent=\"2\"><li fid=\"uacd1bc02\" data-lake-id=\"u2022a7e3\" id=\"u2022a7e3\"><span data-lake-id=\"ud054e84e\" id=\"ud054e84e\">基于 mobx 重新封装实现一个符合 vuex 规范的数据管理 store，能够方便地注入组件进行全局数据管理。为了提高跨团队开发的体验，对 store</span><strong><span data-lake-id=\"ue5b1627d\" id=\"ue5b1627d\"> 添加了多实例可合并</span></strong><span data-lake-id=\"uc2bccf1e\" id=\"uc2bccf1e\">的特性，不同团队维护自己的 store，在需要时能够合并他人或者公共的 store 生成新的 store 实例，我们认为这是一种比 vuex 中 modules 更加灵活便捷的跨团队数据管理模式</span></li></ul><ul list=\"u4f1e3db4\" start=\"4\"><li fid=\"uacd1bc02\" data-lake-id=\"u00dbf19f\" id=\"u00dbf19f\"><span data-lake-id=\"u231be665\" id=\"u231be665\">小程序</span></li></ul><ul list=\"u350a4793\" data-lake-indent=\"1\" class=\"lake-list\"><li fid=\"uacd1bc02\" version=\"1656572133332\" data-lake-id=\"u147f6b38\" id=\"u147f6b38\" class=\"lake-list-node lake-list-task\"><card type=\"inline\" name=\"checkbox\" value=\"data:true\"></card><span data-lake-id=\"u5a0d65f4\" id=\"u5a0d65f4\">微信小程序渲染流程</span></li><li fid=\"uacd1bc02\" data-lake-id=\"u813b1c5f\" id=\"u813b1c5f\" class=\"lake-list-node lake-list-task\"><card type=\"inline\" name=\"checkbox\" value=\"data:false\"></card><span data-lake-id=\"u67e9aced\" id=\"u67e9aced\">微信小程序自定义事件的方式</span></li><li fid=\"uacd1bc02\" version=\"1656572346350\" data-lake-id=\"ucf08271a\" id=\"ucf08271a\" class=\"lake-list-node lake-list-task\"><card type=\"inline\" name=\"checkbox\" value=\"data:true\"></card><span data-lake-id=\"uef6e47d3\" id=\"uef6e47d3\">微信小程序绑定事件的方式</span></li><li fid=\"uacd1bc02\" data-lake-id=\"u0c1af476\" id=\"u0c1af476\" class=\"lake-list-node lake-list-task\"><card type=\"inline\" name=\"checkbox\" value=\"data:false\"></card><span data-lake-id=\"ufeb5e8b7\" id=\"ufeb5e8b7\">微信小程序订阅流程</span></li><li fid=\"uacd1bc02\" version=\"1656572131949\" data-lake-id=\"u443767d9\" id=\"u443767d9\" class=\"lake-list-node lake-list-task\"><card type=\"inline\" name=\"checkbox\" value=\"data:true\"></card><span data-lake-id=\"u8ca13303\" id=\"u8ca13303\">微信小程序登陆流程</span></li><li fid=\"uacd1bc02\" version=\"1656572253333\" data-lake-id=\"ue6a72efc\" id=\"ue6a72efc\" class=\"lake-list-node lake-list-task\"><card type=\"inline\" name=\"checkbox\" value=\"data:true\"></card><span data-lake-id=\"u81206c93\" id=\"u81206c93\">h5 如何唤醒小程序</span></li><li fid=\"uacd1bc02\" data-lake-id=\"u160c4834\" id=\"u160c4834\" class=\"lake-list-node lake-list-task\"><card type=\"inline\" name=\"checkbox\" value=\"data:false\"></card><span data-lake-id=\"u8523e9b5\" id=\"u8523e9b5\">小程序和 h5 的区别</span></li><li fid=\"uacd1bc02\" version=\"1656572180781\" data-lake-id=\"u2abaddfc\" id=\"u2abaddfc\" class=\"lake-list-node lake-list-task\"><card type=\"inline\" name=\"checkbox\" value=\"data:true\"></card><span data-lake-id=\"u80e24559\" id=\"u80e24559\">scroll-view 如何进行下拉刷新</span></li><li fid=\"uacd1bc02\" data-lake-id=\"u0cbab361\" id=\"u0cbab361\" class=\"lake-list-node lake-list-task\"><card type=\"inline\" name=\"checkbox\" value=\"data:false\"></card><span data-lake-id=\"u707d54e1\" id=\"u707d54e1\">微信小程序如何实现页面之间的数据传递</span></li><li fid=\"uacd1bc02\" version=\"1656572200432\" data-lake-id=\"u12a97b75\" id=\"u12a97b75\" class=\"lake-list-node lake-list-task\"><card type=\"inline\" name=\"checkbox\" value=\"data:true\"></card><span data-lake-id=\"u3d81c5b5\" id=\"u3d81c5b5\">微信小程序跳转的几种方式</span></li><li fid=\"uacd1bc02\" version=\"1656572407602\" data-lake-id=\"uf0a37433\" id=\"uf0a37433\" class=\"lake-list-node lake-list-task\"><card type=\"inline\" name=\"checkbox\" value=\"data:true\"></card><span data-lake-id=\"u5ed6e035\" id=\"u5ed6e035\">微信小程序接收参数的几种方法</span></li><li fid=\"uacd1bc02\" data-lake-id=\"u109e208c\" id=\"u109e208c\" class=\"lake-list-node lake-list-task\"><card type=\"inline\" name=\"checkbox\" value=\"data:false\"></card><span data-lake-id=\"ufe52ddbd\" id=\"ufe52ddbd\">wxss 和 css 的区别</span></li></ul><ul list=\"u4f1e3db4\" start=\"5\"><li fid=\"uacd1bc02\" data-lake-id=\"ub6bba0c4\" id=\"ub6bba0c4\"><span data-lake-id=\"uedc38ba5\" id=\"uedc38ba5\">笔试</span></li></ul><ul list=\"u4f1e3db4\" data-lake-indent=\"1\"><li fid=\"uacd1bc02\" data-lake-id=\"u9fd52924\" id=\"u9fd52924\"><span data-lake-id=\"ud25f60be\" id=\"ud25f60be\">输出结果</span></li></ul><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22vue%22%2C%22code%22%3A%22%3Ctemplate%3E%5Cn%20%20%3Cdiv%20id%3D%5C%22container%5C%22%3E%7B%7B%20count%20%7D%7D%3C%2Fdiv%3E%5Cn%3C%2Ftemplate%3E%5Cn%3Cscript%3E%5Cn%20%20export%20default%20%7B%5Cn%20%20%20%20data()%20%7B%5Cn%20%20%20%20%20%20return%20%7B%20count%3A%200%20%7D%5Cn%20%20%20%20%7D%2C%5Cn%20%20%20%20watch%3A%20%7B%5Cn%20%20%20%20%20%20count(newVal%2C%20oldVal)%20%7B%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E6%89%93%E5%8D%B0%E5%87%A0%E6%AC%A1%EF%BC%8C%E5%80%BC%E6%98%AF%E5%A4%9A%E5%B0%91%EF%BC%9F1%2C%203%5Cn%20%20%20%20%20%20%20%20console.log(newVal)%5Cn%20%20%20%20%20%20%7D%5Cn%20%20%20%20%7D%2C%5Cn%20%20%20%20mounted()%20%7B%5Cn%20%20%20%20%20%20for%20(var%20i%20%3D%201%3B%20i%20%3C%3D%203%3B%20i%2B%2B)%20%7B%5Cn%20%20%20%20%20%20%20%20this.count%20%2B%3D%201%5Cn%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%2F%2F%20%E5%80%BC%E6%98%AF%E5%A4%9A%E5%B0%91%3F%200%5Cn%20%20%20%20%20%20console.log(document.querySelector('%23container').innerText)%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%3C%2Fscript%3E%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22NFOh8%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><ul list=\"u4f1e3db4\" start=\"2\" data-lake-indent=\"1\"><li fid=\"uacd1bc02\" data-lake-id=\"u8460f067\" id=\"u8460f067\"><span data-lake-id=\"uc868fa13\" id=\"uc868fa13\">原型输出</span></li></ul><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22function%20A()%20%7B%7D%5Cnvar%20a%20%3D%20new%20A()%5Cnconsole.log(a.__proto__)%20%2F%2F%20f%20A()%20%7B%7D%5Cnconsole.log(a.__proto__.__proto__)%20%2F%2F%20f%20Object()%20%7B%7D%5Cnconsole.log(A.prototype.__proto__)%20%2F%2F%20f%20Object()%20%7B%7D%5Cnconsole.log(typeof%20Object)%20%2F%2F%20%5C%22function%5C%22%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22Zq7bo%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><ul list=\"u37a12e95\" data-lake-indent=\"1\" class=\"lake-list\"><li fid=\"uacd1bc02\" version=\"1656572128329\" data-lake-id=\"uf42b47a6\" id=\"uf42b47a6\" class=\"lake-list-node lake-list-task\"><card type=\"inline\" name=\"checkbox\" value=\"data:true\"></card><span data-lake-id=\"u75d42525\" id=\"u75d42525\">实现一个带缓存功能的请求函数</span></li><li fid=\"uacd1bc02\" data-lake-id=\"uc37de4cc\" id=\"uc37de4cc\" class=\"lake-list-node lake-list-task\"><card type=\"inline\" name=\"checkbox\" value=\"data:false\"></card><span data-lake-id=\"ue43f779b\" id=\"ue43f779b\">实现字符串计算器</span></li><li fid=\"uacd1bc02\" data-lake-id=\"ud642128c\" id=\"ud642128c\" class=\"lake-list-node lake-list-task\"><card type=\"inline\" name=\"checkbox\" value=\"data:false\"></card><span data-lake-id=\"u334142cf\" id=\"u334142cf\">处理时间，显示几分钟前</span></li><li fid=\"uacd1bc02\" data-lake-id=\"u3e39349c\" id=\"u3e39349c\" class=\"lake-list-node lake-list-task\"><card type=\"inline\" name=\"checkbox\" value=\"data:false\"></card><span data-lake-id=\"u266af42f\" id=\"u266af42f\">实现 JSON.stringify</span></li><li fid=\"uacd1bc02\" data-lake-id=\"u7f16e008\" id=\"u7f16e008\" class=\"lake-list-node lake-list-task\"><card type=\"inline\" name=\"checkbox\" value=\"data:false\"></card><span data-lake-id=\"uefb85fe6\" id=\"uefb85fe6\">实现 lodash.get 方法</span></li><li fid=\"uacd1bc02\" data-lake-id=\"udf96882c\" id=\"udf96882c\" class=\"lake-list-node lake-list-task\"><card type=\"inline\" name=\"checkbox\" value=\"data:false\"></card><span data-lake-id=\"u0b5f78b2\" id=\"u0b5f78b2\">js 格式化时间</span></li></ul><ul list=\"ue7728ca3\"><li fid=\"ucf066d6a\" data-lake-id=\"u687270c2\" id=\"u687270c2\"><span data-lake-id=\"u32c18457\" id=\"u32c18457\">算法</span></li></ul><ul list=\"u2d7e591d\" data-lake-indent=\"1\" class=\"lake-list\"><li fid=\"uf6c57ff5\" data-lake-id=\"u64547ec8\" id=\"u64547ec8\" class=\"lake-list-node lake-list-task\"><card type=\"inline\" name=\"checkbox\" value=\"data:false\"></card><span data-lake-id=\"u230e9c46\" id=\"u230e9c46\">leetcode 岛屿问题</span></li><li fid=\"uf6c57ff5\" data-lake-id=\"ua9d478e3\" id=\"ua9d478e3\" class=\"lake-list-node lake-list-task\"><card type=\"inline\" name=\"checkbox\" value=\"data:false\"></card><span data-lake-id=\"uf0376007\" id=\"uf0376007\">leetcode 接雨水</span></li><li fid=\"uf6c57ff5\" data-lake-id=\"u99717f3e\" id=\"u99717f3e\" class=\"lake-list-node lake-list-task\"><card type=\"inline\" name=\"checkbox\" value=\"data:false\"></card><span data-lake-id=\"u7d39efcf\" id=\"u7d39efcf\">leetcode 无重复最长子串</span></li><li fid=\"uf6c57ff5\" data-lake-id=\"u2af179ec\" id=\"u2af179ec\" class=\"lake-list-node lake-list-task\"><card type=\"inline\" name=\"checkbox\" value=\"data:false\"></card><span data-lake-id=\"u5a0e8fcf\" id=\"u5a0e8fcf\">leetcode 41 缺失的第一个整数</span></li><li fid=\"uf6c57ff5\" data-lake-id=\"uc9ecf593\" id=\"uc9ecf593\" class=\"lake-list-node lake-list-task\"><card type=\"inline\" name=\"checkbox\" value=\"data:false\"></card><span data-lake-id=\"ua7d7fbea\" id=\"ua7d7fbea\">leetcode 628 三个数的最大乘积</span></li><li fid=\"uf6c57ff5\" data-lake-id=\"ua54ad998\" id=\"ua54ad998\" class=\"lake-list-node lake-list-task\"><card type=\"inline\" name=\"checkbox\" value=\"data:false\"></card><span data-lake-id=\"u445d556c\" id=\"u445d556c\">leetcode 1249 移除无效的括号</span></li><li fid=\"uf6c57ff5\" data-lake-id=\"ubb9e1e34\" id=\"ubb9e1e34\" class=\"lake-list-node lake-list-task\"><card type=\"inline\" name=\"checkbox\" value=\"data:false\"></card><span data-lake-id=\"u9b49d787\" id=\"u9b49d787\">剑指 offer 50 第一个只出现一次的字符</span></li><li fid=\"uf6c57ff5\" data-lake-id=\"u20356553\" id=\"u20356553\" class=\"lake-list-node lake-list-task\"><card type=\"inline\" name=\"checkbox\" value=\"data:false\"></card><span data-lake-id=\"ub76665ec\" id=\"ub76665ec\">剑指 offer 1534 统计好三元组</span></li><li fid=\"uf6c57ff5\" data-lake-id=\"uf595fd67\" id=\"uf595fd67\" class=\"lake-list-node lake-list-task\"><card type=\"inline\" name=\"checkbox\" value=\"data:false\"></card><span data-lake-id=\"uc8e35cc2\" id=\"uc8e35cc2\">剑指 offer 29 顺时针螺旋矩阵</span></li></ul><ul list=\"u309b6fff\"><li fid=\"uf6c57ff5\" data-lake-id=\"u82a02282\" id=\"u82a02282\"><span data-lake-id=\"u41455230\" id=\"u41455230\">场景</span></li></ul><ul list=\"u309b6fff\" data-lake-indent=\"1\"><li fid=\"uf6c57ff5\" data-lake-id=\"uc41b8877\" id=\"uc41b8877\"><span data-lake-id=\"u222a5136\" id=\"u222a5136\">设计一个组件，该组件是一个 Input 输入框，有下拉功能，可以发请求</span></li></ul><ul list=\"u309b6fff\" data-lake-indent=\"2\"><li fid=\"uf6c57ff5\" data-lake-id=\"u2c719f3a\" id=\"u2c719f3a\"><span data-lake-id=\"ube8c3409\" id=\"ube8c3409\">防抖</span></li><li fid=\"uf6c57ff5\" data-lake-id=\"u7dcad9fb\" id=\"u7dcad9fb\"><span data-lake-id=\"u73b4c855\" id=\"u73b4c855\">控制 response 时序</span></li><li fid=\"uf6c57ff5\" data-lake-id=\"ue1801170\" id=\"ue1801170\"><span data-lake-id=\"ub87a1634\" id=\"ub87a1634\">大数据量处理</span></li></ul>",
  "public": 0,
  "status": 1,
  "likes_count": 0,
  "read_count": 0,
  "hits": 0,
  "comments_count": 0,
  "word_count": 1549,
  "created_at": "2022-04-12T09:01:04.000Z",
  "updated_at": "2022-06-30T07:00:11.000Z",
  "content_updated_at": "2022-06-30T07:00:11.000Z",
  "published_at": "2022-06-30T07:00:11.000Z",
  "first_published_at": "2022-04-12T09:01:54.358Z",
  "book": {
    "id": 24987782,
    "type": "Book",
    "slug": "aggvdq",
    "name": "项目梳理",
    "user_id": 732231,
    "description": "用来梳理一些项目的内容",
    "toc_yml": "- type: META\n  count: 27\n  display_level: 1\n  tail_type: UPDATED_AT\n  base_version_id: 219001536\n  published: true\n  max_level: 2\n  last_updated_at: 2022-07-05T05:31:54.296Z\n  version_id: 219001620\n- type: DOC\n  title: 自我介绍\n  uuid: czSnLwlZX5r2CJfX\n  url: nowm78\n  prev_uuid: ''\n  sibling_uuid: 0Z_QJNT6lajGoxNa\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 71314643\n  level: 0\n  id: 71314643\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 面经\n  uuid: 0Z_QJNT6lajGoxNa\n  url: uhv9t2\n  prev_uuid: czSnLwlZX5r2CJfX\n  sibling_uuid: BAls4pP-NeY80xRi\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 73218284\n  level: 0\n  id: 73218284\n  open_window: 0\n  visible: 1\n- type: TITLE\n  title: 项目\n  uuid: BAls4pP-NeY80xRi\n  url: ''\n  prev_uuid: 0Z_QJNT6lajGoxNa\n  sibling_uuid: OBIPwt2GqG4q-vpQ\n  child_uuid: iAehDOuKbi90rUiI\n  parent_uuid: ''\n  doc_id: ''\n  level: 0\n  id: ''\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: mpx\n  uuid: iAehDOuKbi90rUiI\n  url: flzwri\n  prev_uuid: BAls4pP-NeY80xRi\n  sibling_uuid: ZBy9d0lBfyBCBXpu\n  child_uuid: ''\n  parent_uuid: BAls4pP-NeY80xRi\n  doc_id: 82395946\n  level: 1\n  id: 82395946\n  open_window: 0\n  visible: 1\n- type: TITLE\n  title: 滴滴出行小程序\n  uuid: ZBy9d0lBfyBCBXpu\n  url: ''\n  prev_uuid: iAehDOuKbi90rUiI\n  sibling_uuid: GLK4TI6bZt4Xxu6b\n  child_uuid: '-dL8H8y1HcmyCKgY'\n  parent_uuid: BAls4pP-NeY80xRi\n  doc_id: ''\n  level: 1\n  id: ''\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 小程序包体积优化\n  uuid: '-dL8H8y1HcmyCKgY'\n  url: qf3q0x\n  prev_uuid: ZBy9d0lBfyBCBXpu\n  sibling_uuid: EJe2oPQpRB-N11Xb\n  child_uuid: ''\n  parent_uuid: ZBy9d0lBfyBCBXpu\n  doc_id: 75039167\n  level: 2\n  id: 75039167\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: mpx 性能优化\n  uuid: EJe2oPQpRB-N11Xb\n  url: hgoyws\n  prev_uuid: '-dL8H8y1HcmyCKgY'\n  sibling_uuid: guwD9YXgthBX_ez4\n  child_uuid: ''\n  parent_uuid: ZBy9d0lBfyBCBXpu\n  doc_id: 74717740\n  level: 2\n  id: 74717740\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 冒泡页\n  uuid: guwD9YXgthBX_ez4\n  url: mo05y7\n  prev_uuid: EJe2oPQpRB-N11Xb\n  sibling_uuid: jVVd9OODBN3wWQ5P\n  child_uuid: ''\n  parent_uuid: ZBy9d0lBfyBCBXpu\n  doc_id: 73628145\n  level: 2\n  id: 73628145\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 行程中\n  uuid: jVVd9OODBN3wWQ5P\n  url: oyxdqe\n  prev_uuid: guwD9YXgthBX_ez4\n  sibling_uuid: ''\n  child_uuid: ''\n  parent_uuid: ZBy9d0lBfyBCBXpu\n  doc_id: 73628172\n  level: 2\n  id: 73628172\n  open_window: 0\n  visible: 1\n- type: TITLE\n  title: 小程序上线管理平台\n  uuid: GLK4TI6bZt4Xxu6b\n  url: ''\n  prev_uuid: ZBy9d0lBfyBCBXpu\n  sibling_uuid: 1Y-EVaBFWkuKnN0_\n  child_uuid: xpKQHRV_K7bfp3gb\n  parent_uuid: BAls4pP-NeY80xRi\n  doc_id: ''\n  level: 1\n  id: ''\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 介绍\n  uuid: xpKQHRV_K7bfp3gb\n  url: klkzoy\n  prev_uuid: GLK4TI6bZt4Xxu6b\n  sibling_uuid: xCty9hwaaVernWqJ\n  child_uuid: ''\n  parent_uuid: GLK4TI6bZt4Xxu6b\n  doc_id: 66948082\n  level: 2\n  id: 66948082\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 发布方式\n  uuid: xCty9hwaaVernWqJ\n  url: ohsgmx\n  prev_uuid: xpKQHRV_K7bfp3gb\n  sibling_uuid: 1robqYdQQG0wFPvT\n  child_uuid: ''\n  parent_uuid: GLK4TI6bZt4Xxu6b\n  doc_id: 75212608\n  level: 2\n  id: 75212608\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 数据库表设计\n  uuid: 1robqYdQQG0wFPvT\n  url: csg8d4\n  prev_uuid: xCty9hwaaVernWqJ\n  sibling_uuid: Dvglyu8bpWNiJpBK\n  child_uuid: ''\n  parent_uuid: GLK4TI6bZt4Xxu6b\n  doc_id: 66912281\n  level: 2\n  id: 66912281\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 原型设计\n  uuid: Dvglyu8bpWNiJpBK\n  url: ktgzlc\n  prev_uuid: 1robqYdQQG0wFPvT\n  sibling_uuid: ''\n  child_uuid: ''\n  parent_uuid: GLK4TI6bZt4Xxu6b\n  doc_id: 67155542\n  level: 2\n  id: 67155542\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: webx\n  uuid: 1Y-EVaBFWkuKnN0_\n  url: yghis3\n  prev_uuid: GLK4TI6bZt4Xxu6b\n  sibling_uuid: s3s0XuEuOPAMWB6v\n  child_uuid: ''\n  parent_uuid: BAls4pP-NeY80xRi\n  doc_id: 73626184\n  level: 1\n  id: 73626184\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: TypeScript 在团队内部的实践总结\n  uuid: s3s0XuEuOPAMWB6v\n  url: bp0lie\n  prev_uuid: 1Y-EVaBFWkuKnN0_\n  sibling_uuid: cBBVzib8WHiSWbfw\n  child_uuid: ''\n  parent_uuid: BAls4pP-NeY80xRi\n  doc_id: 70125424\n  level: 1\n  id: 70125424\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 利用 ts + proxy 增强 api 类型推导功能\n  uuid: cBBVzib8WHiSWbfw\n  url: wagl2t\n  prev_uuid: s3s0XuEuOPAMWB6v\n  sibling_uuid: OSV3qUcGRRunfF_K\n  child_uuid: ''\n  parent_uuid: BAls4pP-NeY80xRi\n  doc_id: 75215879\n  level: 1\n  id: 75215879\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 人工审核系统\n  uuid: OSV3qUcGRRunfF_K\n  url: nw2hf8\n  prev_uuid: cBBVzib8WHiSWbfw\n  sibling_uuid: Z9NSZiuYLWhda8gH\n  child_uuid: ''\n  parent_uuid: BAls4pP-NeY80xRi\n  doc_id: 75041091\n  level: 1\n  id: 75041091\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 长列表性能优化\n  uuid: Z9NSZiuYLWhda8gH\n  url: gkfqwb\n  prev_uuid: OSV3qUcGRRunfF_K\n  sibling_uuid: Xkshht2CcjCCitea\n  child_uuid: ''\n  parent_uuid: BAls4pP-NeY80xRi\n  doc_id: 75286551\n  level: 1\n  id: 75286551\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 小程序体验分优化\n  uuid: Xkshht2CcjCCitea\n  url: kdytb8\n  prev_uuid: Z9NSZiuYLWhda8gH\n  sibling_uuid: ''\n  child_uuid: ''\n  parent_uuid: BAls4pP-NeY80xRi\n  doc_id: 75216281\n  level: 1\n  id: 75216281\n  open_window: 0\n  visible: 0\n- type: TITLE\n  title: 小程序接入原子化 css 样式库并支持分包输出\n  uuid: OBIPwt2GqG4q-vpQ\n  url: ''\n  prev_uuid: BAls4pP-NeY80xRi\n  sibling_uuid: aPheiwf1071mw6tU\n  child_uuid: tpFBhK_D2hlsZj9w\n  parent_uuid: ''\n  doc_id: ''\n  level: 0\n  id: ''\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 备忘录\n  uuid: tpFBhK_D2hlsZj9w\n  url: pbxykl\n  prev_uuid: OBIPwt2GqG4q-vpQ\n  sibling_uuid: iJCb_ylpdQ6AVtDy\n  child_uuid: ''\n  parent_uuid: OBIPwt2GqG4q-vpQ\n  doc_id: 67295600\n  level: 1\n  id: 67295600\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 架构设计\n  uuid: iJCb_ylpdQ6AVtDy\n  url: elafeo\n  prev_uuid: tpFBhK_D2hlsZj9w\n  sibling_uuid: ''\n  child_uuid: ''\n  parent_uuid: OBIPwt2GqG4q-vpQ\n  doc_id: 70799795\n  level: 1\n  id: 70799795\n  open_window: 0\n  visible: 0\n- type: DOC\n  title: 研发流程\n  uuid: aPheiwf1071mw6tU\n  url: rl51ig\n  prev_uuid: OBIPwt2GqG4q-vpQ\n  sibling_uuid: KiBu4V9imsSGolKk\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 70125489\n  level: 0\n  id: 70125489\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 一些分享\n  uuid: KiBu4V9imsSGolKk\n  url: guat9s\n  prev_uuid: aPheiwf1071mw6tU\n  sibling_uuid: 5AwFIGCO-4sox4yt\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 71173266\n  level: 0\n  id: 71173266\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 字节面经\n  uuid: 5AwFIGCO-4sox4yt\n  url: gq8kd3\n  prev_uuid: KiBu4V9imsSGolKk\n  sibling_uuid: 8ot1aeLekjpB9XKV\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 81937341\n  level: 0\n  id: 81937341\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: polyfill\n  uuid: 8ot1aeLekjpB9XKV\n  url: nzrear\n  prev_uuid: 5AwFIGCO-4sox4yt\n  sibling_uuid: ''\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 81938260\n  level: 0\n  id: 81938260\n  open_window: 0\n  visible: 1\n",
    "creator_id": 732231,
    "public": 0,
    "items_count": 23,
    "likes_count": 0,
    "watches_count": 1,
    "content_updated_at": "2022-12-25T07:59:52.340Z",
    "created_at": "2022-03-03T15:06:25.000Z",
    "updated_at": "2023-11-07T15:52:14.000Z",
    "user": {
      "id": 732231,
      "type": "User",
      "login": "wcywxq",
      "name": "magic",
      "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/732231/1606968271774-avatar/886ad88b-d2cc-4c9e-a674-f70eb51a679c.png",
      "books_count": 21,
      "public_books_count": 0,
      "followers_count": 0,
      "following_count": 0,
      "public": 1,
      "description": null,
      "created_at": "2020-01-08T14:21:31.000Z",
      "updated_at": "2023-11-22T20:13:30.000Z",
      "work_id": "",
      "_serializer": "v2.user"
    },
    "namespace": "wcywxq/aggvdq",
    "_serializer": "v2.book"
  },
  "user": {
    "id": 732231,
    "type": "User",
    "login": "wcywxq",
    "name": "magic",
    "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/732231/1606968271774-avatar/886ad88b-d2cc-4c9e-a674-f70eb51a679c.png",
    "books_count": 21,
    "public_books_count": 0,
    "followers_count": 0,
    "following_count": 0,
    "public": 1,
    "description": null,
    "created_at": "2020-01-08T14:21:31.000Z",
    "updated_at": "2023-11-22T20:13:30.000Z",
    "work_id": "",
    "_serializer": "v2.user"
  },
  "tags": [],
  "latest_version_id": 1076386520,
  "creator": {
    "id": 732231,
    "type": "User",
    "login": "wcywxq",
    "name": "magic",
    "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/732231/1606968271774-avatar/886ad88b-d2cc-4c9e-a674-f70eb51a679c.png",
    "books_count": 21,
    "public_books_count": 0,
    "followers_count": 0,
    "following_count": 0,
    "public": 1,
    "description": null,
    "created_at": "2020-01-08T14:21:31.000Z",
    "updated_at": "2023-11-22T20:13:30.000Z",
    "work_id": "",
    "_serializer": "v2.user"
  },
  "_serializer": "v2.doc_detail"
}