{
  "id": 146210643,
  "slug": "axtgz0utigbgne3g",
  "title": "工作量证明 Pow",
  "description": "介绍工作量证明 - Proof of Work 是一种对应服务与资源滥用、或是拒绝服务攻击的经济对策。一般要求用户进行一些耗时适当的复杂运算，并且答案能被服务方快速演算，以此耗用的时间、设备与能源作为担保成本，以确保服务与资源是被真正的需求所使用与持有量证明 Pos 的对比持有量证明 - Pr...",
  "cover": "https://cdn.nlark.com/yuque/0/2023/png/732231/1699508023913-09180d5d-288a-46c5-bfa3-69ffff7eec2d.png",
  "user_id": 732231,
  "book_id": 44126891,
  "last_editor_id": 732231,
  "format": "lake",
  "body_draft": "<!doctype html><div class=\"lake-content\" typography=\"classic\"><h2 id=\"RVZG7\"><span class=\"ne-text\">介绍</span></h2><p id=\"u0c786e8d\" class=\"ne-p\"><span class=\"ne-text\">工作量证明 - Proof of Work 是一种对应服务与资源滥用、或是拒绝服务攻击的经济对策。一般要求用户进行一些耗时适当的复杂运算，并且答案能被服务方快速演算，以此耗用的时间、设备与能源作为担保成本，以确保服务与资源是被真正的需求所使用</span></p><h2 id=\"nsBuN\"><span class=\"ne-text\">与持有量证明 Pos 的对比</span></h2><p id=\"u22d2850c\" class=\"ne-p\"><span class=\"ne-text\">持有量证明 - Proof of Stake，又名权益证明</span></p><p id=\"uf1b00ebf\" class=\"ne-p\"><img src=\"https://cdn.nlark.com/yuque/0/2023/png/732231/1699508023913-09180d5d-288a-46c5-bfa3-69ffff7eec2d.png\" width=\"700\" id=\"u01f82e82\" class=\"ne-image\"></p><h2 id=\"gA9q6\"><span class=\"ne-text\">Proof of Work 与 Bot 防护</span></h2><p id=\"ub5ee47df\" class=\"ne-p\"><span class=\"ne-text\">在 JavaScript 中，实现 Proof of Work 通常用于防止恶意 bot 的攻击，特别是在需要用户执行一些任务或工作以验证其身份的场景中。</span></p><h3 id=\"vueCD\"><span class=\"ne-text\">原理</span></h3><p id=\"u2e2dd63b\" class=\"ne-p\"><span class=\"ne-text\">基于引入一些计算密集型任务，要求客户端（正常用户）在请求资源时必须完成这些任务，而这些任务对于 bot 来说通常是非常耗时的，从而有效驱人正常用户 or 恶意 bot</span></p><h3 id=\"tlSm7\"><span class=\"ne-text\">步骤</span></h3><ol class=\"ne-ol\"><li id=\"u525e3d1f\" data-lake-index-type=\"0\"><span class=\"ne-text\">分配计算任务：在用户试图进行某些敏感操作之前，分配一个计算任务（最好是服务端生成），要求用户进行 Proof of Work，这可能涉及到计算一个 hash 或执行一些复杂的数学计算，这些任务会消耗大量的计算资源同时耗费大量时间</span></li><li id=\"uadfd30b5\" data-lake-index-type=\"0\"><span class=\"ne-text\">任务要求：当用户发起请求时，服务器要求用户在请求中执行该任务。可以通过向用户提供需要计算的数据，要求用户执行复杂操作，或者要求用户解决一个难题来实现</span></li><li id=\"u8abf7e0f\" data-lake-index-type=\"0\"><span class=\"ne-text\">随机化任务：确保计算任务是随机的，这样攻击者不能预测任务，也不能提前计算并存储答案</span></li><li id=\"u0c4a3a45\" data-lake-index-type=\"0\"><span class=\"ne-text\">限频：限制用户完成计算任务的频率，以防止机器人尝试大规模攻击，可以通过设置一个时间间隔或者其他限频措施来实现</span></li><li id=\"u8af2e810\" data-lake-index-type=\"0\"><span class=\"ne-text\">调整难度：根据需要调整计算任务的难度，如果发现机器人攻击频繁，可以增加计算任务的难度，使其更加难以完成</span></li><li id=\"u0890e125\" data-lake-index-type=\"0\"><span class=\"ne-text\">验证：一旦收到用户的请求和计算结果，服务器会验证用户执行任务的正确性。如果任务被正确地完成，服务器将响应用户的请求。否则服务器会拒绝服务或要求用户重新执行任务</span></li><li id=\"ud92213f0\" data-lake-index-type=\"0\"><span class=\"ne-text\">监控异常行为：实时监控系统，定期检查用户的行为模式，如果发现异常的高频率活动，可能是机器人攻击的迹象</span></li><li id=\"u4d26fe80\" data-lake-index-type=\"0\"><span class=\"ne-text\">成本增加：对于恶意 bot 而言，其资源时有限的，由于计算密集型任务需要耗费大量的资源和时间，所以会增加恶意 bot 发起攻击的成本，从而减少了其攻击效率和可行性</span></li></ol><div class=\"ne-quote\"><p id=\"u5406caaf\" class=\"ne-p\"><span class=\"ne-text\">注意：PoW 不是绝对安全的，因为攻击者可能利用分布式计算等技术来加速计算过程，因此它通常被视为一种附加的安全层，而不是唯一的防御手段，在实际应用中，可以考虑与其他身份验证和安全措施结合使用，以提高整体的安全性</span></p></div><h3 id=\"R5M8E\"><span class=\"ne-text\">目的</span></h3><p id=\"u62a78300\" class=\"ne-p\"><span class=\"ne-text\">使恶意 bot 难以大规模地自动化发起攻击，因为它们无法有效地完成服务器端要求的计算机密集型任务，而这些任务对于正常用户来说只是一种很小的负担，因此服务器能够有效地区分出正常用户 or 恶意 bot，并提供更好的服务保护</span></p><h3 id=\"PvPlS\"><span class=\"ne-text\">案例 1 - 纯前端</span></h3><pre data-language=\"html\" id=\"Kv9V8\" class=\"ne-codeblock language-html\"><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;Proof of Work Example&lt;/title&gt;\n    &lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/crypto-js/4.0.0/crypto-js.min.js&quot;&gt;&lt;/script&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n\n    &lt;div id=&quot;puzzle&quot;&gt;&lt;/div&gt;\n    &lt;input type=&quot;text&quot; id=&quot;solution&quot; placeholder=&quot;Enter the solution&quot;&gt;\n    &lt;button onclick=&quot;verifySolution()&quot;&gt;Verify&lt;/button&gt;\n\n    &lt;script&gt;\n      // 生成哈希值的前导 0 的个数\n      const difficulty = 4\n\n      // 生成一个包含指定数量前导 0 的字符串\n      const genHashPrefix = difficulty =&gt; Array(difficulty + 1).join('0')\n\n      // 生成谜题\n      const generatePuzzle = () =&gt; {\n        const randomString = Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15)\n        const hashPrefix = genHashPrefix(difficulty)\n        let solution = ''\n        let nonce = 0\n        \n        // 寻找符合要求的哈希值\n        while (!solution.startsWith(hashPrefix)) {\n          nonce++;\n          solution = CryptoJS.SHA256(randomString + nonce).toString()\n        }\n\n        return { randomString, nonce, solution }\n      }\n\n      // 验证用户解决方案\n      const verifySolution = () =&gt; {\n        const userSolution = document.getElementById('solution').value\n        const { randomString, nonce } = puzzle\n        const hashPrefix = genHashPrefix(difficulty)\n        const solutionAttempt = CryptoJS.SHA256(randomString + nonce + userSolution).toString()\n\n        if (solutionAttempt.startsWith(hashPrefix)) {\n          alert('Proof of Work verified, you are human!')\n        } else {\n          alert('Proof of Work verification failed, please try again.')\n        }\n      };\n\n      // 生成谜题并展示在页面上\n      const puzzle = generatePuzzle()\n      document.getElementById('puzzle').innerText = `Find a string that, when concatenated with ${puzzle.randomString} and ${puzzle.nonce}, produces a hash starting with ${generateHashPrefix(difficulty)}`\n    &lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre><h3 id=\"eDCuk\"><span class=\"ne-text\">案例 2 - 前后端</span></h3><ul class=\"ne-ul\"><li id=\"u9a666932\" data-lake-index-type=\"0\"><span class=\"ne-text\">前端</span></li></ul><pre data-language=\"jsx\" id=\"sRq2D\" class=\"ne-codeblock language-jsx\"><code>import React, { useState, useEffect } from 'react'\nimport axios from 'axios'\n\nfunction App () {\n  const [puzzle, setPuzzle] = useState('')\n  const [solution, setSolution] = useState('')\n  const [verificationResult, setVerificationResult] = useState('')\n\n  const fetchPuzzle = async () =&gt; {\n    const res = await axios.get('/puzzle')\n    setPuzzle(res.data.puzzle)\n  }\n\n  const verifySolution = async () =&gt; {\n    const res = await axios.post('verify', { solution })\n    setVerificationResult(res.data.message)\n  }\n\n  useEffect(() =&gt; {\n    fetchPuzzle()\n  }, [])\n\n  return (\n    &lt;div&gt;\n      &lt;div&gt;\n        &lt;p&gt;{puzzle}&lt;/p&gt;\n        &lt;input type=&quot;text&quot; value={solution} onChange={e =&gt; setSolution(e.target.value)} /&gt;\n        &lt;button onClick={verifySolution}&gt;Verify&lt;/button&gt;\n      &lt;/div&gt;\n      {verificationResult &amp;&amp; &lt;p&gt;{verificationResult}&lt;/p&gt;}\n    &lt;/div&gt;\n  )\n}\n\nexport default App</code></pre><ul class=\"ne-ul\"><li id=\"u55c539c8\" data-lake-index-type=\"0\"><span class=\"ne-text\">后端</span></li></ul><pre data-language=\"javascript\" id=\"h2TXa\" class=\"ne-codeblock language-javascript\"><code>const Koa = require('koa')\nconst Router = require('@koa/router')\nconst CryptoJS = require('crypto-js')\n\nconst app = new App()\nconst router = new Router()\n\n// 计算哈希值的前导 0 的个数\nconst difficulty = 4\n\n// 生成一个包含指定数量前导 0 的字符串\nconst genHashPrefix = difficulty =&gt; Array(difficulty + 1).join('0')\n\nrouter.get('/puzzle', ctx =&gt; {\n  const randomString = Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15)\n  // 生成哈希前缀\n  const hashPrefix = genHashPrefix(difficulty)\n  let solution = ''\n  let nonce = 0\n\t\n  // 持续计算哈希，直到满足难度要求 solution.substring(0, difficulty) !== hashPrefix\n  while (!solution.startsWith(hashPrefix)) {\n    nonce++\n    solution = CryptoJS.SHA256(randomString + nonce).toString()\n  }\n\n  ctx.body = {\n    puzzle: `Find a string that, when concatenated with ${randomString} and ${nonce}, produces a hash starting with ${generateHashPrefix(difficulty)}`\n  }\n})\n\nrouter.post('/verify', ctx =&gt; {\n  const { solution } = ctx.request.body\n  const { randomString, nonce } = ctx.request.body\n  const hashPrefix = genHashPrefix(difficulty)\n  const solutionAttempt = CryptoJS.SHA256(randomString + nonce + solution).toString()\n\n  if (solutionAttempt.startsWith(hashPrefix)) {\n    ctx.body = {\n      message: 'Proof of Work verified, you are human!'\n    }\n  } else {\n    ctx.body = {\n      message: 'Proof of Work verification failed, please try again.'\n    }\n  }\n})\n\napp.use(require('koa-body')())\napp.use(router.routes()).use(router.allowedMethods())\n\napp.listen(3000, () =&gt; {\n  console.log('Server is running on port 3000')\n})</code></pre><h2 id=\"UP4x7\"><span class=\"ne-text\">Proof of Work 普通用户快速验证</span></h2><ul class=\"ne-ul\"><li id=\"u0d82021b\" data-lake-index-type=\"0\"><span class=\"ne-text\">前端</span></li></ul><pre data-language=\"tsx\" id=\"dXxLj\" class=\"ne-codeblock language-tsx\"><code>import React, { useCallback, useState } from &quot;react&quot;;\nimport axios from &quot;axios&quot;;\n\nexport default function App() {\n  const [result, setResult] = useState(&quot;&quot;);\n  const [userInput, setUserInput] = useState('')\n  const [loading, setLoading] = useState(false);\n  // Generate a simple math problem for the user to solve\n  const num1 = Math.floor(Math.random() * 10);\n  const num2 = Math.floor(Math.random() * 10);\n  const answer = num1 + num2;\n\n  const performProofOfWork = useCallback(async () =&gt; {\n      setLoading(true);\n  \n      // Display the math problem to the user\n      setResult(`${num1} + ${num2} = ?`);\n  \n      // Ask the server to verify the user's solution\n      // const userInput = prompt(`What is the sum of ${num1} and ${num2}?`);\n  \n      // @ts-ignore\n      if (parseInt(userInput, 10) === answer) {\n        // Send a request to the server for further verification\n        try {\n          const response = await axios.post(&quot;/api/verify&quot;, {\n            userInput,\n          });\n          alert(response.data.message); // Display the server response\n        } catch (error) {\n          console.error(&quot;Error verifying Proof of Work:&quot;, error);\n        }\n      } else {\n        alert(&quot;Incorrect answer. Please try again.&quot;);\n        setUserInput('')\n      }\n  \n      setLoading(false);\n  }, [userInput])\n\n  return (\n    &lt;div className=&quot;p-10 h-screen space-y-4&quot;&gt;\n      &lt;input value={userInput} onInput={e =&gt; setUserInput((e.target as any).value)} placeholder={`What is the sum of ${num1} and ${num2}?`} disabled={loading} type=&quot;text&quot; className=&quot;block w-30 relative outline-none border border-gray-400 rounded py-1 px-2 w-full bg-white text-sm text-gray-700 placeholder-gray-400 focus:outline-none focus:shadow-outline&quot; /&gt;\n      &lt;button onClick={performProofOfWork} className=&quot;pointer-events-auto rounded-md bg-indigo-600 px-3 py-2 text-[0.8125rem] font-semibold leading-5 text-white hover:bg-indigo-500&quot;&gt;\n        {loading ? &quot;Verifying...&quot; : &quot;Perform Proof of Work&quot;}\n      &lt;/button&gt;\n      &lt;p&gt;{result}&lt;/p&gt;\n    &lt;/div&gt;\n  );\n}</code></pre><ul class=\"ne-ul\"><li id=\"uc1950f6d\" data-lake-index-type=\"0\"><span class=\"ne-text\">后端</span></li></ul><pre data-language=\"javascript\" id=\"Joizl\" class=\"ne-codeblock language-javascript\"><code>const Koa = require('koa')\nconst bodyParser = require('koa-bodyparser')\nconst Router = require('@koa/router')\n\nconst app = new Koa()\nconst router = new Router()\n\nconst performPoWVerification = (userInput) =&gt; {\n  // Replace this with your actual PoW verification logic\n  // For simplicity, just compare the userInput with a predefined answer\n  const answer = 5; // Change this to the correct answer\n  return userInput &gt; answer;\n}\n\nrouter.get(&quot;/&quot;, (ctx) =&gt; {\n  ctx.body = &quot;home&quot;\n});\n\nrouter.post(&quot;/verify&quot;, (ctx) =&gt; {\n  const userInput = parseInt(ctx.request.body.userInput, 10)\n\n  // Replace this with your actual PoW verification logic\n  const isProofOfWorkValid = performPoWVerification(userInput)\n\n  if (isProofOfWorkValid) {\n    ctx.body = { message: &quot;Proof of Work verified successfully!&quot; }\n  } else {\n    ctx.status = 403; // Forbidden\n    ctx.body = { message: &quot;Proof of Work verification failed.&quot; }\n  }\n});\n\napp.use(bodyParser())\napp.use(router.routes()).use(router.allowedMethods())\n\napp.listen(3001, () =&gt; {\n  console.log(`Server listening on port ${3001}`)\n});</code></pre></div>",
  "body": "<a name=\"RVZG7\"></a>\n## 介绍\n工作量证明 - Proof of Work 是一种对应服务与资源滥用、或是拒绝服务攻击的经济对策。一般要求用户进行一些耗时适当的复杂运算，并且答案能被服务方快速演算，以此耗用的时间、设备与能源作为担保成本，以确保服务与资源是被真正的需求所使用\n<a name=\"nsBuN\"></a>\n## 与持有量证明 Pos 的对比\n持有量证明 - Proof of Stake，又名权益证明<br />![image.png](https://cdn.nlark.com/yuque/0/2023/png/732231/1699508023913-09180d5d-288a-46c5-bfa3-69ffff7eec2d.png#averageHue=%23fefefe&clientId=u2f50de61-d122-4&from=paste&height=668&id=u01f82e82&originHeight=977&originWidth=1024&originalType=binary&ratio=1&rotation=0&showTitle=false&size=121623&status=done&style=none&taskId=u2d99bacc-c539-423e-a97c-cde157cc46d&title=&width=700)\n<a name=\"gA9q6\"></a>\n## Proof of Work 与 Bot 防护\n在 JavaScript 中，实现 Proof of Work 通常用于防止恶意 bot 的攻击，特别是在需要用户执行一些任务或工作以验证其身份的场景中。\n<a name=\"vueCD\"></a>\n### 原理\n基于引入一些计算密集型任务，要求客户端（正常用户）在请求资源时必须完成这些任务，而这些任务对于 bot 来说通常是非常耗时的，从而有效驱人正常用户 or 恶意 bot\n<a name=\"tlSm7\"></a>\n### 步骤\n\n1. 分配计算任务：在用户试图进行某些敏感操作之前，分配一个计算任务（最好是服务端生成），要求用户进行 Proof of Work，这可能涉及到计算一个 hash 或执行一些复杂的数学计算，这些任务会消耗大量的计算资源同时耗费大量时间\n2. 任务要求：当用户发起请求时，服务器要求用户在请求中执行该任务。可以通过向用户提供需要计算的数据，要求用户执行复杂操作，或者要求用户解决一个难题来实现\n3. 随机化任务：确保计算任务是随机的，这样攻击者不能预测任务，也不能提前计算并存储答案\n4. 限频：限制用户完成计算任务的频率，以防止机器人尝试大规模攻击，可以通过设置一个时间间隔或者其他限频措施来实现\n5. 调整难度：根据需要调整计算任务的难度，如果发现机器人攻击频繁，可以增加计算任务的难度，使其更加难以完成\n6. 验证：一旦收到用户的请求和计算结果，服务器会验证用户执行任务的正确性。如果任务被正确地完成，服务器将响应用户的请求。否则服务器会拒绝服务或要求用户重新执行任务\n7. 监控异常行为：实时监控系统，定期检查用户的行为模式，如果发现异常的高频率活动，可能是机器人攻击的迹象\n8. 成本增加：对于恶意 bot 而言，其资源时有限的，由于计算密集型任务需要耗费大量的资源和时间，所以会增加恶意 bot 发起攻击的成本，从而减少了其攻击效率和可行性\n> 注意：PoW 不是绝对安全的，因为攻击者可能利用分布式计算等技术来加速计算过程，因此它通常被视为一种附加的安全层，而不是唯一的防御手段，在实际应用中，可以考虑与其他身份验证和安全措施结合使用，以提高整体的安全性\n\n<a name=\"R5M8E\"></a>\n### 目的\n使恶意 bot 难以大规模地自动化发起攻击，因为它们无法有效地完成服务器端要求的计算机密集型任务，而这些任务对于正常用户来说只是一种很小的负担，因此服务器能够有效地区分出正常用户 or 恶意 bot，并提供更好的服务保护\n<a name=\"PvPlS\"></a>\n### 案例 1 - 纯前端\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <title>Proof of Work Example</title>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/crypto-js/4.0.0/crypto-js.min.js\"></script>\n  </head>\n  <body>\n\n    <div id=\"puzzle\"></div>\n    <input type=\"text\" id=\"solution\" placeholder=\"Enter the solution\">\n    <button onclick=\"verifySolution()\">Verify</button>\n\n    <script>\n      // 生成哈希值的前导 0 的个数\n      const difficulty = 4\n\n      // 生成一个包含指定数量前导 0 的字符串\n      const genHashPrefix = difficulty => Array(difficulty + 1).join('0')\n\n      // 生成谜题\n      const generatePuzzle = () => {\n        const randomString = Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15)\n        const hashPrefix = genHashPrefix(difficulty)\n        let solution = ''\n        let nonce = 0\n        \n        // 寻找符合要求的哈希值\n        while (!solution.startsWith(hashPrefix)) {\n          nonce++;\n          solution = CryptoJS.SHA256(randomString + nonce).toString()\n        }\n\n        return { randomString, nonce, solution }\n      }\n\n      // 验证用户解决方案\n      const verifySolution = () => {\n        const userSolution = document.getElementById('solution').value\n        const { randomString, nonce } = puzzle\n        const hashPrefix = genHashPrefix(difficulty)\n        const solutionAttempt = CryptoJS.SHA256(randomString + nonce + userSolution).toString()\n\n        if (solutionAttempt.startsWith(hashPrefix)) {\n          alert('Proof of Work verified, you are human!')\n        } else {\n          alert('Proof of Work verification failed, please try again.')\n        }\n      };\n\n      // 生成谜题并展示在页面上\n      const puzzle = generatePuzzle()\n      document.getElementById('puzzle').innerText = `Find a string that, when concatenated with ${puzzle.randomString} and ${puzzle.nonce}, produces a hash starting with ${generateHashPrefix(difficulty)}`\n    </script>\n  </body>\n</html>\n\n```\n<a name=\"eDCuk\"></a>\n### 案例 2 - 前后端\n\n- 前端\n```jsx\nimport React, { useState, useEffect } from 'react'\nimport axios from 'axios'\n\nfunction App () {\n  const [puzzle, setPuzzle] = useState('')\n  const [solution, setSolution] = useState('')\n  const [verificationResult, setVerificationResult] = useState('')\n\n  const fetchPuzzle = async () => {\n    const res = await axios.get('/puzzle')\n    setPuzzle(res.data.puzzle)\n  }\n\n  const verifySolution = async () => {\n    const res = await axios.post('verify', { solution })\n    setVerificationResult(res.data.message)\n  }\n\n  useEffect(() => {\n    fetchPuzzle()\n  }, [])\n\n  return (\n    <div>\n      <div>\n        <p>{puzzle}</p>\n        <input type=\"text\" value={solution} onChange={e => setSolution(e.target.value)} />\n        <button onClick={verifySolution}>Verify</button>\n      </div>\n      {verificationResult && <p>{verificationResult}</p>}\n    </div>\n  )\n}\n\nexport default App\n```\n\n- 后端\n```javascript\nconst Koa = require('koa')\nconst Router = require('@koa/router')\nconst CryptoJS = require('crypto-js')\n\nconst app = new App()\nconst router = new Router()\n\n// 计算哈希值的前导 0 的个数\nconst difficulty = 4\n\n// 生成一个包含指定数量前导 0 的字符串\nconst genHashPrefix = difficulty => Array(difficulty + 1).join('0')\n\nrouter.get('/puzzle', ctx => {\n  const randomString = Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15)\n  // 生成哈希前缀\n  const hashPrefix = genHashPrefix(difficulty)\n  let solution = ''\n  let nonce = 0\n\t\n  // 持续计算哈希，直到满足难度要求 solution.substring(0, difficulty) !== hashPrefix\n  while (!solution.startsWith(hashPrefix)) {\n    nonce++\n    solution = CryptoJS.SHA256(randomString + nonce).toString()\n  }\n\n  ctx.body = {\n    puzzle: `Find a string that, when concatenated with ${randomString} and ${nonce}, produces a hash starting with ${generateHashPrefix(difficulty)}`\n  }\n})\n\nrouter.post('/verify', ctx => {\n  const { solution } = ctx.request.body\n  const { randomString, nonce } = ctx.request.body\n  const hashPrefix = genHashPrefix(difficulty)\n  const solutionAttempt = CryptoJS.SHA256(randomString + nonce + solution).toString()\n\n  if (solutionAttempt.startsWith(hashPrefix)) {\n    ctx.body = {\n      message: 'Proof of Work verified, you are human!'\n    }\n  } else {\n    ctx.body = {\n      message: 'Proof of Work verification failed, please try again.'\n    }\n  }\n})\n\napp.use(require('koa-body')())\napp.use(router.routes()).use(router.allowedMethods())\n\napp.listen(3000, () => {\n  console.log('Server is running on port 3000')\n})\n```\n<a name=\"UP4x7\"></a>\n## Proof of Work 普通用户快速验证\n\n- 前端\n```tsx\nimport React, { useCallback, useState } from \"react\";\nimport axios from \"axios\";\n\nexport default function App() {\n  const [result, setResult] = useState(\"\");\n  const [userInput, setUserInput] = useState('')\n  const [loading, setLoading] = useState(false);\n  // Generate a simple math problem for the user to solve\n  const num1 = Math.floor(Math.random() * 10);\n  const num2 = Math.floor(Math.random() * 10);\n  const answer = num1 + num2;\n\n  const performProofOfWork = useCallback(async () => {\n      setLoading(true);\n  \n      // Display the math problem to the user\n      setResult(`${num1} + ${num2} = ?`);\n  \n      // Ask the server to verify the user's solution\n      // const userInput = prompt(`What is the sum of ${num1} and ${num2}?`);\n  \n      // @ts-ignore\n      if (parseInt(userInput, 10) === answer) {\n        // Send a request to the server for further verification\n        try {\n          const response = await axios.post(\"/api/verify\", {\n            userInput,\n          });\n          alert(response.data.message); // Display the server response\n        } catch (error) {\n          console.error(\"Error verifying Proof of Work:\", error);\n        }\n      } else {\n        alert(\"Incorrect answer. Please try again.\");\n        setUserInput('')\n      }\n  \n      setLoading(false);\n  }, [userInput])\n\n  return (\n    <div className=\"p-10 h-screen space-y-4\">\n      <input value={userInput} onInput={e => setUserInput((e.target as any).value)} placeholder={`What is the sum of ${num1} and ${num2}?`} disabled={loading} type=\"text\" className=\"block w-30 relative outline-none border border-gray-400 rounded py-1 px-2 w-full bg-white text-sm text-gray-700 placeholder-gray-400 focus:outline-none focus:shadow-outline\" />\n      <button onClick={performProofOfWork} className=\"pointer-events-auto rounded-md bg-indigo-600 px-3 py-2 text-[0.8125rem] font-semibold leading-5 text-white hover:bg-indigo-500\">\n        {loading ? \"Verifying...\" : \"Perform Proof of Work\"}\n      </button>\n      <p>{result}</p>\n    </div>\n  );\n}\n```\n\n- 后端\n```javascript\nconst Koa = require('koa')\nconst bodyParser = require('koa-bodyparser')\nconst Router = require('@koa/router')\n\nconst app = new Koa()\nconst router = new Router()\n\nconst performPoWVerification = (userInput) => {\n  // Replace this with your actual PoW verification logic\n  // For simplicity, just compare the userInput with a predefined answer\n  const answer = 5; // Change this to the correct answer\n  return userInput > answer;\n}\n\nrouter.get(\"/\", (ctx) => {\n  ctx.body = \"home\"\n});\n\nrouter.post(\"/verify\", (ctx) => {\n  const userInput = parseInt(ctx.request.body.userInput, 10)\n\n  // Replace this with your actual PoW verification logic\n  const isProofOfWorkValid = performPoWVerification(userInput)\n\n  if (isProofOfWorkValid) {\n    ctx.body = { message: \"Proof of Work verified successfully!\" }\n  } else {\n    ctx.status = 403; // Forbidden\n    ctx.body = { message: \"Proof of Work verification failed.\" }\n  }\n});\n\napp.use(bodyParser())\napp.use(router.routes()).use(router.allowedMethods())\n\napp.listen(3001, () => {\n  console.log(`Server listening on port ${3001}`)\n});\n```\n",
  "body_html": "<!doctype html><div class=\"lake-content\" typography=\"classic\"><h2 id=\"RVZG7\"><span class=\"ne-text\">介绍</span></h2><p id=\"u0c786e8d\" class=\"ne-p\"><span class=\"ne-text\">工作量证明 - Proof of Work 是一种对应服务与资源滥用、或是拒绝服务攻击的经济对策。一般要求用户进行一些耗时适当的复杂运算，并且答案能被服务方快速演算，以此耗用的时间、设备与能源作为担保成本，以确保服务与资源是被真正的需求所使用</span></p><h2 id=\"nsBuN\"><span class=\"ne-text\">与持有量证明 Pos 的对比</span></h2><p id=\"u22d2850c\" class=\"ne-p\"><span class=\"ne-text\">持有量证明 - Proof of Stake，又名权益证明</span></p><p id=\"uf1b00ebf\" class=\"ne-p\"><img src=\"https://cdn.nlark.com/yuque/0/2023/png/732231/1699508023913-09180d5d-288a-46c5-bfa3-69ffff7eec2d.png\" width=\"700\" id=\"u01f82e82\" class=\"ne-image\"></p><h2 id=\"gA9q6\"><span class=\"ne-text\">Proof of Work 与 Bot 防护</span></h2><p id=\"ub5ee47df\" class=\"ne-p\"><span class=\"ne-text\">在 JavaScript 中，实现 Proof of Work 通常用于防止恶意 bot 的攻击，特别是在需要用户执行一些任务或工作以验证其身份的场景中。</span></p><h3 id=\"vueCD\"><span class=\"ne-text\">原理</span></h3><p id=\"u2e2dd63b\" class=\"ne-p\"><span class=\"ne-text\">基于引入一些计算密集型任务，要求客户端（正常用户）在请求资源时必须完成这些任务，而这些任务对于 bot 来说通常是非常耗时的，从而有效驱人正常用户 or 恶意 bot</span></p><h3 id=\"tlSm7\"><span class=\"ne-text\">步骤</span></h3><ol class=\"ne-ol\"><li id=\"u525e3d1f\" data-lake-index-type=\"0\"><span class=\"ne-text\">分配计算任务：在用户试图进行某些敏感操作之前，分配一个计算任务（最好是服务端生成），要求用户进行 Proof of Work，这可能涉及到计算一个 hash 或执行一些复杂的数学计算，这些任务会消耗大量的计算资源同时耗费大量时间</span></li><li id=\"uadfd30b5\" data-lake-index-type=\"0\"><span class=\"ne-text\">任务要求：当用户发起请求时，服务器要求用户在请求中执行该任务。可以通过向用户提供需要计算的数据，要求用户执行复杂操作，或者要求用户解决一个难题来实现</span></li><li id=\"u8abf7e0f\" data-lake-index-type=\"0\"><span class=\"ne-text\">随机化任务：确保计算任务是随机的，这样攻击者不能预测任务，也不能提前计算并存储答案</span></li><li id=\"u0c4a3a45\" data-lake-index-type=\"0\"><span class=\"ne-text\">限频：限制用户完成计算任务的频率，以防止机器人尝试大规模攻击，可以通过设置一个时间间隔或者其他限频措施来实现</span></li><li id=\"u8af2e810\" data-lake-index-type=\"0\"><span class=\"ne-text\">调整难度：根据需要调整计算任务的难度，如果发现机器人攻击频繁，可以增加计算任务的难度，使其更加难以完成</span></li><li id=\"u0890e125\" data-lake-index-type=\"0\"><span class=\"ne-text\">验证：一旦收到用户的请求和计算结果，服务器会验证用户执行任务的正确性。如果任务被正确地完成，服务器将响应用户的请求。否则服务器会拒绝服务或要求用户重新执行任务</span></li><li id=\"ud92213f0\" data-lake-index-type=\"0\"><span class=\"ne-text\">监控异常行为：实时监控系统，定期检查用户的行为模式，如果发现异常的高频率活动，可能是机器人攻击的迹象</span></li><li id=\"u4d26fe80\" data-lake-index-type=\"0\"><span class=\"ne-text\">成本增加：对于恶意 bot 而言，其资源时有限的，由于计算密集型任务需要耗费大量的资源和时间，所以会增加恶意 bot 发起攻击的成本，从而减少了其攻击效率和可行性</span></li></ol><div class=\"ne-quote\"><p id=\"u5406caaf\" class=\"ne-p\"><span class=\"ne-text\">注意：PoW 不是绝对安全的，因为攻击者可能利用分布式计算等技术来加速计算过程，因此它通常被视为一种附加的安全层，而不是唯一的防御手段，在实际应用中，可以考虑与其他身份验证和安全措施结合使用，以提高整体的安全性</span></p></div><h3 id=\"R5M8E\"><span class=\"ne-text\">目的</span></h3><p id=\"u62a78300\" class=\"ne-p\"><span class=\"ne-text\">使恶意 bot 难以大规模地自动化发起攻击，因为它们无法有效地完成服务器端要求的计算机密集型任务，而这些任务对于正常用户来说只是一种很小的负担，因此服务器能够有效地区分出正常用户 or 恶意 bot，并提供更好的服务保护</span></p><h3 id=\"PvPlS\"><span class=\"ne-text\">案例 1 - 纯前端</span></h3><pre data-language=\"html\" id=\"Kv9V8\" class=\"ne-codeblock language-html\"><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;Proof of Work Example&lt;/title&gt;\n    &lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/crypto-js/4.0.0/crypto-js.min.js&quot;&gt;&lt;/script&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n\n    &lt;div id=&quot;puzzle&quot;&gt;&lt;/div&gt;\n    &lt;input type=&quot;text&quot; id=&quot;solution&quot; placeholder=&quot;Enter the solution&quot;&gt;\n    &lt;button onclick=&quot;verifySolution()&quot;&gt;Verify&lt;/button&gt;\n\n    &lt;script&gt;\n      // 生成哈希值的前导 0 的个数\n      const difficulty = 4\n\n      // 生成一个包含指定数量前导 0 的字符串\n      const genHashPrefix = difficulty =&gt; Array(difficulty + 1).join('0')\n\n      // 生成谜题\n      const generatePuzzle = () =&gt; {\n        const randomString = Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15)\n        const hashPrefix = genHashPrefix(difficulty)\n        let solution = ''\n        let nonce = 0\n        \n        // 寻找符合要求的哈希值\n        while (!solution.startsWith(hashPrefix)) {\n          nonce++;\n          solution = CryptoJS.SHA256(randomString + nonce).toString()\n        }\n\n        return { randomString, nonce, solution }\n      }\n\n      // 验证用户解决方案\n      const verifySolution = () =&gt; {\n        const userSolution = document.getElementById('solution').value\n        const { randomString, nonce } = puzzle\n        const hashPrefix = genHashPrefix(difficulty)\n        const solutionAttempt = CryptoJS.SHA256(randomString + nonce + userSolution).toString()\n\n        if (solutionAttempt.startsWith(hashPrefix)) {\n          alert('Proof of Work verified, you are human!')\n        } else {\n          alert('Proof of Work verification failed, please try again.')\n        }\n      };\n\n      // 生成谜题并展示在页面上\n      const puzzle = generatePuzzle()\n      document.getElementById('puzzle').innerText = `Find a string that, when concatenated with ${puzzle.randomString} and ${puzzle.nonce}, produces a hash starting with ${generateHashPrefix(difficulty)}`\n    &lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre><h3 id=\"eDCuk\"><span class=\"ne-text\">案例 2 - 前后端</span></h3><ul class=\"ne-ul\"><li id=\"u9a666932\" data-lake-index-type=\"0\"><span class=\"ne-text\">前端</span></li></ul><pre data-language=\"jsx\" id=\"sRq2D\" class=\"ne-codeblock language-jsx\"><code>import React, { useState, useEffect } from 'react'\nimport axios from 'axios'\n\nfunction App () {\n  const [puzzle, setPuzzle] = useState('')\n  const [solution, setSolution] = useState('')\n  const [verificationResult, setVerificationResult] = useState('')\n\n  const fetchPuzzle = async () =&gt; {\n    const res = await axios.get('/puzzle')\n    setPuzzle(res.data.puzzle)\n  }\n\n  const verifySolution = async () =&gt; {\n    const res = await axios.post('verify', { solution })\n    setVerificationResult(res.data.message)\n  }\n\n  useEffect(() =&gt; {\n    fetchPuzzle()\n  }, [])\n\n  return (\n    &lt;div&gt;\n      &lt;div&gt;\n        &lt;p&gt;{puzzle}&lt;/p&gt;\n        &lt;input type=&quot;text&quot; value={solution} onChange={e =&gt; setSolution(e.target.value)} /&gt;\n        &lt;button onClick={verifySolution}&gt;Verify&lt;/button&gt;\n      &lt;/div&gt;\n      {verificationResult &amp;&amp; &lt;p&gt;{verificationResult}&lt;/p&gt;}\n    &lt;/div&gt;\n  )\n}\n\nexport default App</code></pre><ul class=\"ne-ul\"><li id=\"u55c539c8\" data-lake-index-type=\"0\"><span class=\"ne-text\">后端</span></li></ul><pre data-language=\"javascript\" id=\"h2TXa\" class=\"ne-codeblock language-javascript\"><code>const Koa = require('koa')\nconst Router = require('@koa/router')\nconst CryptoJS = require('crypto-js')\n\nconst app = new App()\nconst router = new Router()\n\n// 计算哈希值的前导 0 的个数\nconst difficulty = 4\n\n// 生成一个包含指定数量前导 0 的字符串\nconst genHashPrefix = difficulty =&gt; Array(difficulty + 1).join('0')\n\nrouter.get('/puzzle', ctx =&gt; {\n  const randomString = Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15)\n  // 生成哈希前缀\n  const hashPrefix = genHashPrefix(difficulty)\n  let solution = ''\n  let nonce = 0\n\t\n  // 持续计算哈希，直到满足难度要求 solution.substring(0, difficulty) !== hashPrefix\n  while (!solution.startsWith(hashPrefix)) {\n    nonce++\n    solution = CryptoJS.SHA256(randomString + nonce).toString()\n  }\n\n  ctx.body = {\n    puzzle: `Find a string that, when concatenated with ${randomString} and ${nonce}, produces a hash starting with ${generateHashPrefix(difficulty)}`\n  }\n})\n\nrouter.post('/verify', ctx =&gt; {\n  const { solution } = ctx.request.body\n  const { randomString, nonce } = ctx.request.body\n  const hashPrefix = genHashPrefix(difficulty)\n  const solutionAttempt = CryptoJS.SHA256(randomString + nonce + solution).toString()\n\n  if (solutionAttempt.startsWith(hashPrefix)) {\n    ctx.body = {\n      message: 'Proof of Work verified, you are human!'\n    }\n  } else {\n    ctx.body = {\n      message: 'Proof of Work verification failed, please try again.'\n    }\n  }\n})\n\napp.use(require('koa-body')())\napp.use(router.routes()).use(router.allowedMethods())\n\napp.listen(3000, () =&gt; {\n  console.log('Server is running on port 3000')\n})</code></pre><h2 id=\"UP4x7\"><span class=\"ne-text\">Proof of Work 普通用户快速验证</span></h2><ul class=\"ne-ul\"><li id=\"u0d82021b\" data-lake-index-type=\"0\"><span class=\"ne-text\">前端</span></li></ul><pre data-language=\"tsx\" id=\"dXxLj\" class=\"ne-codeblock language-tsx\"><code>import React, { useCallback, useState } from &quot;react&quot;;\nimport axios from &quot;axios&quot;;\n\nexport default function App() {\n  const [result, setResult] = useState(&quot;&quot;);\n  const [userInput, setUserInput] = useState('')\n  const [loading, setLoading] = useState(false);\n  // Generate a simple math problem for the user to solve\n  const num1 = Math.floor(Math.random() * 10);\n  const num2 = Math.floor(Math.random() * 10);\n  const answer = num1 + num2;\n\n  const performProofOfWork = useCallback(async () =&gt; {\n      setLoading(true);\n  \n      // Display the math problem to the user\n      setResult(`${num1} + ${num2} = ?`);\n  \n      // Ask the server to verify the user's solution\n      // const userInput = prompt(`What is the sum of ${num1} and ${num2}?`);\n  \n      // @ts-ignore\n      if (parseInt(userInput, 10) === answer) {\n        // Send a request to the server for further verification\n        try {\n          const response = await axios.post(&quot;/api/verify&quot;, {\n            userInput,\n          });\n          alert(response.data.message); // Display the server response\n        } catch (error) {\n          console.error(&quot;Error verifying Proof of Work:&quot;, error);\n        }\n      } else {\n        alert(&quot;Incorrect answer. Please try again.&quot;);\n        setUserInput('')\n      }\n  \n      setLoading(false);\n  }, [userInput])\n\n  return (\n    &lt;div className=&quot;p-10 h-screen space-y-4&quot;&gt;\n      &lt;input value={userInput} onInput={e =&gt; setUserInput((e.target as any).value)} placeholder={`What is the sum of ${num1} and ${num2}?`} disabled={loading} type=&quot;text&quot; className=&quot;block w-30 relative outline-none border border-gray-400 rounded py-1 px-2 w-full bg-white text-sm text-gray-700 placeholder-gray-400 focus:outline-none focus:shadow-outline&quot; /&gt;\n      &lt;button onClick={performProofOfWork} className=&quot;pointer-events-auto rounded-md bg-indigo-600 px-3 py-2 text-[0.8125rem] font-semibold leading-5 text-white hover:bg-indigo-500&quot;&gt;\n        {loading ? &quot;Verifying...&quot; : &quot;Perform Proof of Work&quot;}\n      &lt;/button&gt;\n      &lt;p&gt;{result}&lt;/p&gt;\n    &lt;/div&gt;\n  );\n}</code></pre><ul class=\"ne-ul\"><li id=\"uc1950f6d\" data-lake-index-type=\"0\"><span class=\"ne-text\">后端</span></li></ul><pre data-language=\"javascript\" id=\"Joizl\" class=\"ne-codeblock language-javascript\"><code>const Koa = require('koa')\nconst bodyParser = require('koa-bodyparser')\nconst Router = require('@koa/router')\n\nconst app = new Koa()\nconst router = new Router()\n\nconst performPoWVerification = (userInput) =&gt; {\n  // Replace this with your actual PoW verification logic\n  // For simplicity, just compare the userInput with a predefined answer\n  const answer = 5; // Change this to the correct answer\n  return userInput &gt; answer;\n}\n\nrouter.get(&quot;/&quot;, (ctx) =&gt; {\n  ctx.body = &quot;home&quot;\n});\n\nrouter.post(&quot;/verify&quot;, (ctx) =&gt; {\n  const userInput = parseInt(ctx.request.body.userInput, 10)\n\n  // Replace this with your actual PoW verification logic\n  const isProofOfWorkValid = performPoWVerification(userInput)\n\n  if (isProofOfWorkValid) {\n    ctx.body = { message: &quot;Proof of Work verified successfully!&quot; }\n  } else {\n    ctx.status = 403; // Forbidden\n    ctx.body = { message: &quot;Proof of Work verification failed.&quot; }\n  }\n});\n\napp.use(bodyParser())\napp.use(router.routes()).use(router.allowedMethods())\n\napp.listen(3001, () =&gt; {\n  console.log(`Server listening on port ${3001}`)\n});</code></pre></div>",
  "body_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"viewport\" content=\"fixed\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"paragraphSpacing\" content=\"relax\" /><h2 data-lake-id=\"RVZG7\" id=\"RVZG7\"><span data-lake-id=\"u12dd5da1\" id=\"u12dd5da1\">介绍</span></h2><p data-lake-id=\"u0c786e8d\" id=\"u0c786e8d\"><span data-lake-id=\"uda4e79c7\" id=\"uda4e79c7\">工作量证明 - Proof of Work 是一种对应服务与资源滥用、或是拒绝服务攻击的经济对策。一般要求用户进行一些耗时适当的复杂运算，并且答案能被服务方快速演算，以此耗用的时间、设备与能源作为担保成本，以确保服务与资源是被真正的需求所使用</span></p><h2 data-lake-id=\"nsBuN\" id=\"nsBuN\"><span data-lake-id=\"u2eb51d78\" id=\"u2eb51d78\">与持有量证明 Pos 的对比</span></h2><p data-lake-id=\"u22d2850c\" id=\"u22d2850c\"><span data-lake-id=\"ubd2a6074\" id=\"ubd2a6074\">持有量证明 - Proof of Stake，又名权益证明</span></p><p data-lake-id=\"uf1b00ebf\" id=\"uf1b00ebf\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2023%2Fpng%2F732231%2F1699508023913-09180d5d-288a-46c5-bfa3-69ffff7eec2d.png%22%2C%22taskId%22%3A%22u2d99bacc-c539-423e-a97c-cde157cc46d%22%2C%22clientId%22%3A%22u2f50de61-d122-4%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A700%2C%22height%22%3A668%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A121623%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A1024%2C%22originHeight%22%3A977%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%E5%B7%A5%E4%BD%9C%E9%87%8F%E8%AF%81%E6%98%8E%20%E6%9D%83%E7%9B%8A%E8%AF%81%E6%98%8E%20VS%20%E4%BD%BF%E7%94%A8%E7%A1%AE%E5%AE%9A%E6%80%A7%E9%80%89%E6%8B%A9%E8%BF%87%E7%A8%8B.%20%E7%AC%AC%E4%B8%80%E4%B8%AA%E8%A7%A3%E5%BC%80%E4%B8%8D%E5%AF%B9%E7%A7%B0%E9%9A%BE%E9%A2%98%E7%9A%84%E7%9F%BF%E5%B7%A5%E8%8E%B7%E9%80%89.%20%E7%9F%BF%E5%B7%A5%E4%B9%8B%E9%97%B4%E7%9A%84%E7%AB%9E%E4%BA%89%E6%9C%89%E5%BE%85%E9%80%89%E6%8B%A9.%20%E7%9F%BF%E5%B7%A5%E4%B9%8B%E9%97%B4%E7%9A%84%E7%AB%9E%E4%BA%89%E6%9D%A5%E8%A7%A3%E5%86%B3%E9%9A%BE%E9%A2%98.%20%E6%A0%87%E5%87%86%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%BA%A7%E5%8D%95%E4%BD%8D%E9%80%9A%E5%B8%B8%E5%B0%B1%E8%B6%B3%E5%A4%9F%20%E4%BC%98%E5%8C%96%E5%A4%84%E7%90%86%E8%83%BD%E5%8A%9B%E7%9A%84%E4%B8%93%E7%94%A8%E8%AE%BE%E5%A4%87.%20(%E7%BB%B0%E7%BB%B0%E6%9C%89%E4%BD%99)%E4%BA%86.%20%E8%B4%AD%E4%B9%B0%E6%9D%83%E7%9B%8A%E5%92%8C%E5%BB%BA%E7%AB%8B%E5%A3%B0%E8%AA%89%E7%9A%84%E5%88%9D%E5%A7%8B%E6%8A%95%E8%B5%84.%20%E8%B4%AD%E4%B9%B0%E7%A1%AC%E4%BB%B6%E7%9A%84%E5%88%9D%E5%A7%8B%E6%8A%95%E8%B5%84.%20%E9%AB%98%E8%83%BD%E8%80%97.%20%E6%A0%87%E5%87%86%E8%83%BD%E8%80%97.%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A258%2C%22y%22%3A46%2C%22width%22%3A137%2C%22height%22%3A33%2C%22text%22%3A%22%E5%B7%A5%E4%BD%9C%E9%87%8F%E8%AF%81%E6%98%8E%22%7D%2C%7B%22x%22%3A653%2C%22y%22%3A46%2C%22width%22%3A106%2C%22height%22%3A28%2C%22text%22%3A%22%E6%9D%83%E7%9B%8A%E8%AF%81%E6%98%8E%22%7D%2C%7B%22x%22%3A500%2C%22y%22%3A53%2C%22width%22%3A31%2C%22height%22%3A22%2C%22text%22%3A%22VS%22%7D%2C%7B%22x%22%3A613%2C%22y%22%3A241%2C%22width%22%3A175%2C%22height%22%3A20%2C%22text%22%3A%22%E4%BD%BF%E7%94%A8%E7%A1%AE%E5%AE%9A%E6%80%A7%E9%80%89%E6%8B%A9%E8%BF%87%E7%A8%8B.%22%7D%2C%7B%22x%22%3A190%2C%22y%22%3A241%2C%22width%22%3A269%2C%22height%22%3A20%2C%22text%22%3A%22%E7%AC%AC%E4%B8%80%E4%B8%AA%E8%A7%A3%E5%BC%80%E4%B8%8D%E5%AF%B9%E7%A7%B0%E9%9A%BE%E9%A2%98%E7%9A%84%E7%9F%BF%E5%B7%A5%E8%8E%B7%E9%80%89.%22%7D%2C%7B%22x%22%3A595%2C%22y%22%3A263%2C%22width%22%3A212%2C%22height%22%3A20%2C%22text%22%3A%22%E7%9F%BF%E5%B7%A5%E4%B9%8B%E9%97%B4%E7%9A%84%E7%AB%9E%E4%BA%89%E6%9C%89%E5%BE%85%E9%80%89%E6%8B%A9.%22%7D%2C%7B%22x%22%3A215%2C%22y%22%3A265%2C%22width%22%3A217%2C%22height%22%3A17%2C%22text%22%3A%22%E7%9F%BF%E5%B7%A5%E4%B9%8B%E9%97%B4%E7%9A%84%E7%AB%9E%E4%BA%89%E6%9D%A5%E8%A7%A3%E5%86%B3%E9%9A%BE%E9%A2%98.%22%7D%2C%7B%22x%22%3A578%2C%22y%22%3A486%2C%22width%22%3A243%2C%22height%22%3A20%2C%22text%22%3A%22%E6%A0%87%E5%87%86%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%BA%A7%E5%8D%95%E4%BD%8D%E9%80%9A%E5%B8%B8%E5%B0%B1%E8%B6%B3%E5%A4%9F%22%7D%2C%7B%22x%22%3A218%2C%22y%22%3A498%2C%22width%22%3A214%2C%22height%22%3A21%2C%22text%22%3A%22%E4%BC%98%E5%8C%96%E5%A4%84%E7%90%86%E8%83%BD%E5%8A%9B%E7%9A%84%E4%B8%93%E7%94%A8%E8%AE%BE%E5%A4%87.%22%7D%2C%7B%22x%22%3A643%2C%22y%22%3A510%2C%22width%22%3A115%2C%22height%22%3A19%2C%22text%22%3A%22(%E7%BB%B0%E7%BB%B0%E6%9C%89%E4%BD%99)%E4%BA%86.%22%7D%2C%7B%22x%22%3A568%2C%22y%22%3A726%2C%22width%22%3A270%2C%22height%22%3A20%2C%22text%22%3A%22%E8%B4%AD%E4%B9%B0%E6%9D%83%E7%9B%8A%E5%92%8C%E5%BB%BA%E7%AB%8B%E5%A3%B0%E8%AA%89%E7%9A%84%E5%88%9D%E5%A7%8B%E6%8A%95%E8%B5%84.%22%7D%2C%7B%22x%22%3A235%2C%22y%22%3A727%2C%22width%22%3A176%2C%22height%22%3A20%2C%22text%22%3A%22%E8%B4%AD%E4%B9%B0%E7%A1%AC%E4%BB%B6%E7%9A%84%E5%88%9D%E5%A7%8B%E6%8A%95%E8%B5%84.%22%7D%2C%7B%22x%22%3A293%2C%22y%22%3A901%2C%22width%22%3A63%2C%22height%22%3A20%2C%22text%22%3A%22%E9%AB%98%E8%83%BD%E8%80%97.%22%7D%2C%7B%22x%22%3A662%2C%22y%22%3A902%2C%22width%22%3A81%2C%22height%22%3A20%2C%22text%22%3A%22%E6%A0%87%E5%87%86%E8%83%BD%E8%80%97.%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0.1609%2C0.0301%2C0.8448%2C0.9799%5D%2C%22averageHue%22%3A%22%23fefefe%22%2C%22id%22%3A%22u01f82e82%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><h2 data-lake-id=\"gA9q6\" id=\"gA9q6\"><span data-lake-id=\"u89c18924\" id=\"u89c18924\">Proof of Work 与 Bot 防护</span></h2><p data-lake-id=\"ub5ee47df\" id=\"ub5ee47df\"><span data-lake-id=\"u4d48cc31\" id=\"u4d48cc31\">在 JavaScript 中，实现 Proof of Work 通常用于防止恶意 bot 的攻击，特别是在需要用户执行一些任务或工作以验证其身份的场景中。</span></p><h3 data-lake-id=\"vueCD\" id=\"vueCD\"><span data-lake-id=\"ud6afba83\" id=\"ud6afba83\">原理</span></h3><p data-lake-id=\"u2e2dd63b\" id=\"u2e2dd63b\"><span data-lake-id=\"u9fafb764\" id=\"u9fafb764\">基于引入一些计算密集型任务，要求客户端（正常用户）在请求资源时必须完成这些任务，而这些任务对于 bot 来说通常是非常耗时的，从而有效驱人正常用户 or 恶意 bot</span></p><h3 data-lake-id=\"tlSm7\" id=\"tlSm7\"><span data-lake-id=\"uf49ddb8e\" id=\"uf49ddb8e\">步骤</span></h3><ol list=\"ubf512868\"><li fid=\"ue5d3315b\" data-lake-id=\"u525e3d1f\" id=\"u525e3d1f\"><span data-lake-id=\"ua6c65ad9\" id=\"ua6c65ad9\">分配计算任务：在用户试图进行某些敏感操作之前，分配一个计算任务（最好是服务端生成），要求用户进行 Proof of Work，这可能涉及到计算一个 hash 或执行一些复杂的数学计算，这些任务会消耗大量的计算资源同时耗费大量时间</span></li><li fid=\"ue5d3315b\" data-lake-id=\"uadfd30b5\" id=\"uadfd30b5\"><span data-lake-id=\"u58af6fd7\" id=\"u58af6fd7\">任务要求：当用户发起请求时，服务器要求用户在请求中执行该任务。可以通过向用户提供需要计算的数据，要求用户执行复杂操作，或者要求用户解决一个难题来实现</span></li><li fid=\"ue5d3315b\" data-lake-id=\"u8abf7e0f\" id=\"u8abf7e0f\"><span data-lake-id=\"u9fdc6970\" id=\"u9fdc6970\">随机化任务：确保计算任务是随机的，这样攻击者不能预测任务，也不能提前计算并存储答案</span></li><li fid=\"ue5d3315b\" data-lake-id=\"u0c4a3a45\" id=\"u0c4a3a45\"><span data-lake-id=\"u5068ecd6\" id=\"u5068ecd6\">限频：限制用户完成计算任务的频率，以防止机器人尝试大规模攻击，可以通过设置一个时间间隔或者其他限频措施来实现</span></li><li fid=\"ue5d3315b\" data-lake-id=\"u8af2e810\" id=\"u8af2e810\"><span data-lake-id=\"u5bf7df94\" id=\"u5bf7df94\">调整难度：根据需要调整计算任务的难度，如果发现机器人攻击频繁，可以增加计算任务的难度，使其更加难以完成</span></li><li fid=\"ue5d3315b\" data-lake-id=\"u0890e125\" id=\"u0890e125\"><span data-lake-id=\"ucf9f54a8\" id=\"ucf9f54a8\">验证：一旦收到用户的请求和计算结果，服务器会验证用户执行任务的正确性。如果任务被正确地完成，服务器将响应用户的请求。否则服务器会拒绝服务或要求用户重新执行任务</span></li><li fid=\"ue5d3315b\" data-lake-id=\"ud92213f0\" id=\"ud92213f0\"><span data-lake-id=\"ue551100d\" id=\"ue551100d\">监控异常行为：实时监控系统，定期检查用户的行为模式，如果发现异常的高频率活动，可能是机器人攻击的迹象</span></li><li fid=\"ue5d3315b\" data-lake-id=\"u4d26fe80\" id=\"u4d26fe80\"><span data-lake-id=\"u94b8723f\" id=\"u94b8723f\">成本增加：对于恶意 bot 而言，其资源时有限的，由于计算密集型任务需要耗费大量的资源和时间，所以会增加恶意 bot 发起攻击的成本，从而减少了其攻击效率和可行性</span></li></ol><blockquote data-lake-id=\"u5c62e385\" id=\"u5c62e385\"><p data-lake-id=\"u5406caaf\" id=\"u5406caaf\"><span data-lake-id=\"u7ce1a8cd\" id=\"u7ce1a8cd\">注意：PoW 不是绝对安全的，因为攻击者可能利用分布式计算等技术来加速计算过程，因此它通常被视为一种附加的安全层，而不是唯一的防御手段，在实际应用中，可以考虑与其他身份验证和安全措施结合使用，以提高整体的安全性</span></p></blockquote><h3 data-lake-id=\"R5M8E\" id=\"R5M8E\"><span data-lake-id=\"ub46bcda5\" id=\"ub46bcda5\">目的</span></h3><p data-lake-id=\"u62a78300\" id=\"u62a78300\"><span data-lake-id=\"u60b48b73\" id=\"u60b48b73\">使恶意 bot 难以大规模地自动化发起攻击，因为它们无法有效地完成服务器端要求的计算机密集型任务，而这些任务对于正常用户来说只是一种很小的负担，因此服务器能够有效地区分出正常用户 or 恶意 bot，并提供更好的服务保护</span></p><h3 data-lake-id=\"PvPlS\" id=\"PvPlS\"><span data-lake-id=\"ua263dd34\" id=\"ua263dd34\">案例 1 - 纯前端</span></h3><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22html%22%2C%22code%22%3A%22%3C!DOCTYPE%20html%3E%5Cn%3Chtml%3E%5Cn%20%20%3Chead%3E%5Cn%20%20%20%20%3Ctitle%3EProof%20of%20Work%20Example%3C%2Ftitle%3E%5Cn%20%20%20%20%3Cscript%20src%3D%5C%22https%3A%2F%2Fcdnjs.cloudflare.com%2Fajax%2Flibs%2Fcrypto-js%2F4.0.0%2Fcrypto-js.min.js%5C%22%3E%3C%2Fscript%3E%5Cn%20%20%3C%2Fhead%3E%5Cn%20%20%3Cbody%3E%5Cn%5Cn%20%20%20%20%3Cdiv%20id%3D%5C%22puzzle%5C%22%3E%3C%2Fdiv%3E%5Cn%20%20%20%20%3Cinput%20type%3D%5C%22text%5C%22%20id%3D%5C%22solution%5C%22%20placeholder%3D%5C%22Enter%20the%20solution%5C%22%3E%5Cn%20%20%20%20%3Cbutton%20onclick%3D%5C%22verifySolution()%5C%22%3EVerify%3C%2Fbutton%3E%5Cn%5Cn%20%20%20%20%3Cscript%3E%5Cn%20%20%20%20%20%20%2F%2F%20%E7%94%9F%E6%88%90%E5%93%88%E5%B8%8C%E5%80%BC%E7%9A%84%E5%89%8D%E5%AF%BC%200%20%E7%9A%84%E4%B8%AA%E6%95%B0%5Cn%20%20%20%20%20%20const%20difficulty%20%3D%204%5Cn%5Cn%20%20%20%20%20%20%2F%2F%20%E7%94%9F%E6%88%90%E4%B8%80%E4%B8%AA%E5%8C%85%E5%90%AB%E6%8C%87%E5%AE%9A%E6%95%B0%E9%87%8F%E5%89%8D%E5%AF%BC%200%20%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%5Cn%20%20%20%20%20%20const%20genHashPrefix%20%3D%20difficulty%20%3D%3E%20Array(difficulty%20%2B%201).join('0')%5Cn%5Cn%20%20%20%20%20%20%2F%2F%20%E7%94%9F%E6%88%90%E8%B0%9C%E9%A2%98%5Cn%20%20%20%20%20%20const%20generatePuzzle%20%3D%20()%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20%20%20const%20randomString%20%3D%20Math.random().toString(36).substring(2%2C%2015)%20%2B%20Math.random().toString(36).substring(2%2C%2015)%5Cn%20%20%20%20%20%20%20%20const%20hashPrefix%20%3D%20genHashPrefix(difficulty)%5Cn%20%20%20%20%20%20%20%20let%20solution%20%3D%20''%5Cn%20%20%20%20%20%20%20%20let%20nonce%20%3D%200%5Cn%20%20%20%20%20%20%20%20%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E5%AF%BB%E6%89%BE%E7%AC%A6%E5%90%88%E8%A6%81%E6%B1%82%E7%9A%84%E5%93%88%E5%B8%8C%E5%80%BC%5Cn%20%20%20%20%20%20%20%20while%20(!solution.startsWith(hashPrefix))%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20nonce%2B%2B%3B%5Cn%20%20%20%20%20%20%20%20%20%20solution%20%3D%20CryptoJS.SHA256(randomString%20%2B%20nonce).toString()%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%20%20%20%20return%20%7B%20randomString%2C%20nonce%2C%20solution%20%7D%5Cn%20%20%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%20%20%2F%2F%20%E9%AA%8C%E8%AF%81%E7%94%A8%E6%88%B7%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%5Cn%20%20%20%20%20%20const%20verifySolution%20%3D%20()%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20%20%20const%20userSolution%20%3D%20document.getElementById('solution').value%5Cn%20%20%20%20%20%20%20%20const%20%7B%20randomString%2C%20nonce%20%7D%20%3D%20puzzle%5Cn%20%20%20%20%20%20%20%20const%20hashPrefix%20%3D%20genHashPrefix(difficulty)%5Cn%20%20%20%20%20%20%20%20const%20solutionAttempt%20%3D%20CryptoJS.SHA256(randomString%20%2B%20nonce%20%2B%20userSolution).toString()%5Cn%5Cn%20%20%20%20%20%20%20%20if%20(solutionAttempt.startsWith(hashPrefix))%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20alert('Proof%20of%20Work%20verified%2C%20you%20are%20human!')%5Cn%20%20%20%20%20%20%20%20%7D%20else%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20alert('Proof%20of%20Work%20verification%20failed%2C%20please%20try%20again.')%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%7D%3B%5Cn%5Cn%20%20%20%20%20%20%2F%2F%20%E7%94%9F%E6%88%90%E8%B0%9C%E9%A2%98%E5%B9%B6%E5%B1%95%E7%A4%BA%E5%9C%A8%E9%A1%B5%E9%9D%A2%E4%B8%8A%5Cn%20%20%20%20%20%20const%20puzzle%20%3D%20generatePuzzle()%5Cn%20%20%20%20%20%20document.getElementById('puzzle').innerText%20%3D%20%60Find%20a%20string%20that%2C%20when%20concatenated%20with%20%24%7Bpuzzle.randomString%7D%20and%20%24%7Bpuzzle.nonce%7D%2C%20produces%20a%20hash%20starting%20with%20%24%7BgenerateHashPrefix(difficulty)%7D%60%5Cn%20%20%20%20%3C%2Fscript%3E%5Cn%20%20%3C%2Fbody%3E%5Cn%3C%2Fhtml%3E%5Cn%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22__spacing%22%3A%22both%22%2C%22__widthMode%22%3A%22normal%22%2C%22id%22%3A%22Kv9V8%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%2C%22widthMode%22%3A%22normal%22%7D\"></card><h3 data-lake-id=\"eDCuk\" id=\"eDCuk\"><span data-lake-id=\"u77101c5b\" id=\"u77101c5b\">案例 2 - 前后端</span></h3><ul list=\"u2c940e01\"><li fid=\"u68969bd8\" data-lake-id=\"u9a666932\" id=\"u9a666932\"><span data-lake-id=\"uc85d4d32\" id=\"uc85d4d32\">前端</span></li></ul><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22jsx%22%2C%22code%22%3A%22import%20React%2C%20%7B%20useState%2C%20useEffect%20%7D%20from%20'react'%5Cnimport%20axios%20from%20'axios'%5Cn%5Cnfunction%20App%20()%20%7B%5Cn%20%20const%20%5Bpuzzle%2C%20setPuzzle%5D%20%3D%20useState('')%5Cn%20%20const%20%5Bsolution%2C%20setSolution%5D%20%3D%20useState('')%5Cn%20%20const%20%5BverificationResult%2C%20setVerificationResult%5D%20%3D%20useState('')%5Cn%5Cn%20%20const%20fetchPuzzle%20%3D%20async%20()%20%3D%3E%20%7B%5Cn%20%20%20%20const%20res%20%3D%20await%20axios.get('%2Fpuzzle')%5Cn%20%20%20%20setPuzzle(res.data.puzzle)%5Cn%20%20%7D%5Cn%5Cn%20%20const%20verifySolution%20%3D%20async%20()%20%3D%3E%20%7B%5Cn%20%20%20%20const%20res%20%3D%20await%20axios.post('verify'%2C%20%7B%20solution%20%7D)%5Cn%20%20%20%20setVerificationResult(res.data.message)%5Cn%20%20%7D%5Cn%5Cn%20%20useEffect(()%20%3D%3E%20%7B%5Cn%20%20%20%20fetchPuzzle()%5Cn%20%20%7D%2C%20%5B%5D)%5Cn%5Cn%20%20return%20(%5Cn%20%20%20%20%3Cdiv%3E%5Cn%20%20%20%20%20%20%3Cdiv%3E%5Cn%20%20%20%20%20%20%20%20%3Cp%3E%7Bpuzzle%7D%3C%2Fp%3E%5Cn%20%20%20%20%20%20%20%20%3Cinput%20type%3D%5C%22text%5C%22%20value%3D%7Bsolution%7D%20onChange%3D%7Be%20%3D%3E%20setSolution(e.target.value)%7D%20%2F%3E%5Cn%20%20%20%20%20%20%20%20%3Cbutton%20onClick%3D%7BverifySolution%7D%3EVerify%3C%2Fbutton%3E%5Cn%20%20%20%20%20%20%3C%2Fdiv%3E%5Cn%20%20%20%20%20%20%7BverificationResult%20%26%26%20%3Cp%3E%7BverificationResult%7D%3C%2Fp%3E%7D%5Cn%20%20%20%20%3C%2Fdiv%3E%5Cn%20%20)%5Cn%7D%5Cn%5Cnexport%20default%20App%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Github%20Light%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22sRq2D%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><ul list=\"u2c940e01\" start=\"2\"><li fid=\"u68969bd8\" data-lake-id=\"u55c539c8\" id=\"u55c539c8\"><span data-lake-id=\"u9fe8b806\" id=\"u9fe8b806\">后端</span></li></ul><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22javascript%22%2C%22code%22%3A%22const%20Koa%20%3D%20require('koa')%5Cnconst%20Router%20%3D%20require('%40koa%2Frouter')%5Cnconst%20CryptoJS%20%3D%20require('crypto-js')%5Cn%5Cnconst%20app%20%3D%20new%20App()%5Cnconst%20router%20%3D%20new%20Router()%5Cn%5Cn%2F%2F%20%E8%AE%A1%E7%AE%97%E5%93%88%E5%B8%8C%E5%80%BC%E7%9A%84%E5%89%8D%E5%AF%BC%200%20%E7%9A%84%E4%B8%AA%E6%95%B0%5Cnconst%20difficulty%20%3D%204%5Cn%5Cn%2F%2F%20%E7%94%9F%E6%88%90%E4%B8%80%E4%B8%AA%E5%8C%85%E5%90%AB%E6%8C%87%E5%AE%9A%E6%95%B0%E9%87%8F%E5%89%8D%E5%AF%BC%200%20%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%5Cnconst%20genHashPrefix%20%3D%20difficulty%20%3D%3E%20Array(difficulty%20%2B%201).join('0')%5Cn%5Cnrouter.get('%2Fpuzzle'%2C%20ctx%20%3D%3E%20%7B%5Cn%20%20const%20randomString%20%3D%20Math.random().toString(36).substring(2%2C%2015)%20%2B%20Math.random().toString(36).substring(2%2C%2015)%5Cn%20%20%2F%2F%20%E7%94%9F%E6%88%90%E5%93%88%E5%B8%8C%E5%89%8D%E7%BC%80%5Cn%20%20const%20hashPrefix%20%3D%20genHashPrefix(difficulty)%5Cn%20%20let%20solution%20%3D%20''%5Cn%20%20let%20nonce%20%3D%200%5Cn%5Ct%5Cn%20%20%2F%2F%20%E6%8C%81%E7%BB%AD%E8%AE%A1%E7%AE%97%E5%93%88%E5%B8%8C%EF%BC%8C%E7%9B%B4%E5%88%B0%E6%BB%A1%E8%B6%B3%E9%9A%BE%E5%BA%A6%E8%A6%81%E6%B1%82%20solution.substring(0%2C%20difficulty)%20!%3D%3D%20hashPrefix%5Cn%20%20while%20(!solution.startsWith(hashPrefix))%20%7B%5Cn%20%20%20%20nonce%2B%2B%5Cn%20%20%20%20solution%20%3D%20CryptoJS.SHA256(randomString%20%2B%20nonce).toString()%5Cn%20%20%7D%5Cn%5Cn%20%20ctx.body%20%3D%20%7B%5Cn%20%20%20%20puzzle%3A%20%60Find%20a%20string%20that%2C%20when%20concatenated%20with%20%24%7BrandomString%7D%20and%20%24%7Bnonce%7D%2C%20produces%20a%20hash%20starting%20with%20%24%7BgenerateHashPrefix(difficulty)%7D%60%5Cn%20%20%7D%5Cn%7D)%5Cn%5Cnrouter.post('%2Fverify'%2C%20ctx%20%3D%3E%20%7B%5Cn%20%20const%20%7B%20solution%20%7D%20%3D%20ctx.request.body%5Cn%20%20const%20%7B%20randomString%2C%20nonce%20%7D%20%3D%20ctx.request.body%5Cn%20%20const%20hashPrefix%20%3D%20genHashPrefix(difficulty)%5Cn%20%20const%20solutionAttempt%20%3D%20CryptoJS.SHA256(randomString%20%2B%20nonce%20%2B%20solution).toString()%5Cn%5Cn%20%20if%20(solutionAttempt.startsWith(hashPrefix))%20%7B%5Cn%20%20%20%20ctx.body%20%3D%20%7B%5Cn%20%20%20%20%20%20message%3A%20'Proof%20of%20Work%20verified%2C%20you%20are%20human!'%5Cn%20%20%20%20%7D%5Cn%20%20%7D%20else%20%7B%5Cn%20%20%20%20ctx.body%20%3D%20%7B%5Cn%20%20%20%20%20%20message%3A%20'Proof%20of%20Work%20verification%20failed%2C%20please%20try%20again.'%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%7D)%5Cn%5Cnapp.use(require('koa-body')())%5Cnapp.use(router.routes()).use(router.allowedMethods())%5Cn%5Cnapp.listen(3000%2C%20()%20%3D%3E%20%7B%5Cn%20%20console.log('Server%20is%20running%20on%20port%203000')%5Cn%7D)%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Bracket%20Lights%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22h2TXa%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h2 data-lake-id=\"UP4x7\" id=\"UP4x7\"><span data-lake-id=\"u7850d3fe\" id=\"u7850d3fe\">Proof of Work 普通用户快速验证</span></h2><ul list=\"u987ec39a\"><li fid=\"u2219623a\" data-lake-id=\"u0d82021b\" id=\"u0d82021b\"><span data-lake-id=\"uecfcb322\" id=\"uecfcb322\">前端</span></li></ul><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22tsx%22%2C%22code%22%3A%22import%20React%2C%20%7B%20useCallback%2C%20useState%20%7D%20from%20%5C%22react%5C%22%3B%5Cnimport%20axios%20from%20%5C%22axios%5C%22%3B%5Cn%5Cnexport%20default%20function%20App()%20%7B%5Cn%20%20const%20%5Bresult%2C%20setResult%5D%20%3D%20useState(%5C%22%5C%22)%3B%5Cn%20%20const%20%5BuserInput%2C%20setUserInput%5D%20%3D%20useState('')%5Cn%20%20const%20%5Bloading%2C%20setLoading%5D%20%3D%20useState(false)%3B%5Cn%20%20%2F%2F%20Generate%20a%20simple%20math%20problem%20for%20the%20user%20to%20solve%5Cn%20%20const%20num1%20%3D%20Math.floor(Math.random()%20*%2010)%3B%5Cn%20%20const%20num2%20%3D%20Math.floor(Math.random()%20*%2010)%3B%5Cn%20%20const%20answer%20%3D%20num1%20%2B%20num2%3B%5Cn%5Cn%20%20const%20performProofOfWork%20%3D%20useCallback(async%20()%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20setLoading(true)%3B%5Cn%20%20%5Cn%20%20%20%20%20%20%2F%2F%20Display%20the%20math%20problem%20to%20the%20user%5Cn%20%20%20%20%20%20setResult(%60%24%7Bnum1%7D%20%2B%20%24%7Bnum2%7D%20%3D%20%3F%60)%3B%5Cn%20%20%5Cn%20%20%20%20%20%20%2F%2F%20Ask%20the%20server%20to%20verify%20the%20user's%20solution%5Cn%20%20%20%20%20%20%2F%2F%20const%20userInput%20%3D%20prompt(%60What%20is%20the%20sum%20of%20%24%7Bnum1%7D%20and%20%24%7Bnum2%7D%3F%60)%3B%5Cn%20%20%5Cn%20%20%20%20%20%20%2F%2F%20%40ts-ignore%5Cn%20%20%20%20%20%20if%20(parseInt(userInput%2C%2010)%20%3D%3D%3D%20answer)%20%7B%5Cn%20%20%20%20%20%20%20%20%2F%2F%20Send%20a%20request%20to%20the%20server%20for%20further%20verification%5Cn%20%20%20%20%20%20%20%20try%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20const%20response%20%3D%20await%20axios.post(%5C%22%2Fapi%2Fverify%5C%22%2C%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20userInput%2C%5Cn%20%20%20%20%20%20%20%20%20%20%7D)%3B%5Cn%20%20%20%20%20%20%20%20%20%20alert(response.data.message)%3B%20%2F%2F%20Display%20the%20server%20response%5Cn%20%20%20%20%20%20%20%20%7D%20catch%20(error)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20console.error(%5C%22Error%20verifying%20Proof%20of%20Work%3A%5C%22%2C%20error)%3B%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%7D%20else%20%7B%5Cn%20%20%20%20%20%20%20%20alert(%5C%22Incorrect%20answer.%20Please%20try%20again.%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20setUserInput('')%5Cn%20%20%20%20%20%20%7D%5Cn%20%20%5Cn%20%20%20%20%20%20setLoading(false)%3B%5Cn%20%20%7D%2C%20%5BuserInput%5D)%5Cn%5Cn%20%20return%20(%5Cn%20%20%20%20%3Cdiv%20className%3D%5C%22p-10%20h-screen%20space-y-4%5C%22%3E%5Cn%20%20%20%20%20%20%3Cinput%20value%3D%7BuserInput%7D%20onInput%3D%7Be%20%3D%3E%20setUserInput((e.target%20as%20any).value)%7D%20placeholder%3D%7B%60What%20is%20the%20sum%20of%20%24%7Bnum1%7D%20and%20%24%7Bnum2%7D%3F%60%7D%20disabled%3D%7Bloading%7D%20type%3D%5C%22text%5C%22%20className%3D%5C%22block%20w-30%20relative%20outline-none%20border%20border-gray-400%20rounded%20py-1%20px-2%20w-full%20bg-white%20text-sm%20text-gray-700%20placeholder-gray-400%20focus%3Aoutline-none%20focus%3Ashadow-outline%5C%22%20%2F%3E%5Cn%20%20%20%20%20%20%3Cbutton%20onClick%3D%7BperformProofOfWork%7D%20className%3D%5C%22pointer-events-auto%20rounded-md%20bg-indigo-600%20px-3%20py-2%20text-%5B0.8125rem%5D%20font-semibold%20leading-5%20text-white%20hover%3Abg-indigo-500%5C%22%3E%5Cn%20%20%20%20%20%20%20%20%7Bloading%20%3F%20%5C%22Verifying...%5C%22%20%3A%20%5C%22Perform%20Proof%20of%20Work%5C%22%7D%5Cn%20%20%20%20%20%20%3C%2Fbutton%3E%5Cn%20%20%20%20%20%20%3Cp%3E%7Bresult%7D%3C%2Fp%3E%5Cn%20%20%20%20%3C%2Fdiv%3E%5Cn%20%20)%3B%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Bracket%20Lights%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22dXxLj%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><ul list=\"u987ec39a\" start=\"2\"><li fid=\"u2219623a\" data-lake-id=\"uc1950f6d\" id=\"uc1950f6d\"><span data-lake-id=\"uf1cd5722\" id=\"uf1cd5722\">后端</span></li></ul><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22javascript%22%2C%22code%22%3A%22const%20Koa%20%3D%20require('koa')%5Cnconst%20bodyParser%20%3D%20require('koa-bodyparser')%5Cnconst%20Router%20%3D%20require('%40koa%2Frouter')%5Cn%5Cnconst%20app%20%3D%20new%20Koa()%5Cnconst%20router%20%3D%20new%20Router()%5Cn%5Cnconst%20performPoWVerification%20%3D%20(userInput)%20%3D%3E%20%7B%5Cn%20%20%2F%2F%20Replace%20this%20with%20your%20actual%20PoW%20verification%20logic%5Cn%20%20%2F%2F%20For%20simplicity%2C%20just%20compare%20the%20userInput%20with%20a%20predefined%20answer%5Cn%20%20const%20answer%20%3D%205%3B%20%2F%2F%20Change%20this%20to%20the%20correct%20answer%5Cn%20%20return%20userInput%20%3E%20answer%3B%5Cn%7D%5Cn%5Cnrouter.get(%5C%22%2F%5C%22%2C%20(ctx)%20%3D%3E%20%7B%5Cn%20%20ctx.body%20%3D%20%5C%22home%5C%22%5Cn%7D)%3B%5Cn%5Cnrouter.post(%5C%22%2Fverify%5C%22%2C%20(ctx)%20%3D%3E%20%7B%5Cn%20%20const%20userInput%20%3D%20parseInt(ctx.request.body.userInput%2C%2010)%5Cn%5Cn%20%20%2F%2F%20Replace%20this%20with%20your%20actual%20PoW%20verification%20logic%5Cn%20%20const%20isProofOfWorkValid%20%3D%20performPoWVerification(userInput)%5Cn%5Cn%20%20if%20(isProofOfWorkValid)%20%7B%5Cn%20%20%20%20ctx.body%20%3D%20%7B%20message%3A%20%5C%22Proof%20of%20Work%20verified%20successfully!%5C%22%20%7D%5Cn%20%20%7D%20else%20%7B%5Cn%20%20%20%20ctx.status%20%3D%20403%3B%20%2F%2F%20Forbidden%5Cn%20%20%20%20ctx.body%20%3D%20%7B%20message%3A%20%5C%22Proof%20of%20Work%20verification%20failed.%5C%22%20%7D%5Cn%20%20%7D%5Cn%7D)%3B%5Cn%5Cnapp.use(bodyParser())%5Cnapp.use(router.routes()).use(router.allowedMethods())%5Cn%5Cnapp.listen(3001%2C%20()%20%3D%3E%20%7B%5Cn%20%20console.log(%60Server%20listening%20on%20port%20%24%7B3001%7D%60)%5Cn%7D)%3B%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Bracket%20Lights%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22Joizl%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card>",
  "public": 0,
  "status": 1,
  "likes_count": 0,
  "read_count": 0,
  "hits": 0,
  "comments_count": 0,
  "word_count": 1930,
  "created_at": "2023-11-07T15:55:57.000Z",
  "updated_at": "2023-11-12T12:38:19.000Z",
  "content_updated_at": "2023-11-12T11:12:01.000Z",
  "published_at": "2023-11-12T11:12:01.000Z",
  "first_published_at": "2023-11-08T18:47:34.049Z",
  "book": {
    "id": 44126891,
    "type": "Book",
    "slug": "nq5tpp",
    "name": "项目 project",
    "user_id": 732231,
    "description": "1. 工作项目\n2. 个人项目",
    "toc_yml": "- type: META\n  count: 7\n  display_level: 1\n  tail_type: UPDATED_AT\n  base_version_id: 369968752\n  published: true\n  max_level: 1\n  last_updated_at: 2023-11-11T12:55:16.203Z\n  version_id: 369968759\n- type: DOC\n  title: 流式检测\n  uuid: 4i0nLvEAa4jJ1ri-\n  url: mb82ytug1tvwyp9g\n  prev_uuid: ''\n  sibling_uuid: kbeiVni8OJ7u0n1m\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 146617532\n  level: 0\n  id: 146617532\n  open_window: 1\n  visible: 0\n- type: TITLE\n  title: GeoJSON 和 TopoJSON 转换\n  uuid: kbeiVni8OJ7u0n1m\n  url: ''\n  prev_uuid: 4i0nLvEAa4jJ1ri-\n  sibling_uuid: gzCcSfsimBBJmqIt\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: ''\n  level: 0\n  id: ''\n  open_window: 1\n  visible: 1\n- type: TITLE\n  title: BOT 防护\n  uuid: gzCcSfsimBBJmqIt\n  url: ''\n  prev_uuid: kbeiVni8OJ7u0n1m\n  sibling_uuid: lDP70wg6kuiFKGuX\n  child_uuid: xYauwP7W0TBK_njT\n  parent_uuid: ''\n  doc_id: ''\n  level: 0\n  id: ''\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 工作量证明 Pow\n  uuid: xYauwP7W0TBK_njT\n  url: axtgz0utigbgne3g\n  prev_uuid: gzCcSfsimBBJmqIt\n  sibling_uuid: GvC-rRXKjB0Sl9Fu\n  child_uuid: ''\n  parent_uuid: gzCcSfsimBBJmqIt\n  doc_id: 146210643\n  level: 1\n  id: 146210643\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 浏览器指纹验证\n  uuid: GvC-rRXKjB0Sl9Fu\n  url: gba6hm82b2s58zf7\n  prev_uuid: xYauwP7W0TBK_njT\n  sibling_uuid: ''\n  child_uuid: ''\n  parent_uuid: gzCcSfsimBBJmqIt\n  doc_id: 146617596\n  level: 1\n  id: 146617596\n  open_window: 1\n  visible: 0\n- type: TITLE\n  title: 性能优化\n  uuid: lDP70wg6kuiFKGuX\n  url: ''\n  prev_uuid: gzCcSfsimBBJmqIt\n  sibling_uuid: aFiFdSmFx-04_uGN\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: ''\n  level: 0\n  id: ''\n  open_window: 1\n  visible: 1\n- type: TITLE\n  title: RBAC\n  uuid: aFiFdSmFx-04_uGN\n  url: ''\n  prev_uuid: lDP70wg6kuiFKGuX\n  sibling_uuid: ''\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: ''\n  level: 0\n  id: ''\n  open_window: 1\n  visible: 1\n",
    "creator_id": 732231,
    "public": 0,
    "items_count": 3,
    "likes_count": 0,
    "watches_count": 0,
    "content_updated_at": "2023-11-12T11:12:00.638Z",
    "created_at": "2023-11-07T15:54:13.000Z",
    "updated_at": "2023-11-12T11:12:01.000Z",
    "user": {
      "id": 732231,
      "type": "User",
      "login": "wcywxq",
      "name": "magic",
      "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/732231/1606968271774-avatar/886ad88b-d2cc-4c9e-a674-f70eb51a679c.png",
      "books_count": 21,
      "public_books_count": 0,
      "followers_count": 0,
      "following_count": 0,
      "public": 1,
      "description": null,
      "created_at": "2020-01-08T14:21:31.000Z",
      "updated_at": "2023-11-22T20:13:30.000Z",
      "work_id": "",
      "_serializer": "v2.user"
    },
    "namespace": "wcywxq/nq5tpp",
    "_serializer": "v2.book"
  },
  "user": {
    "id": 732231,
    "type": "User",
    "login": "wcywxq",
    "name": "magic",
    "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/732231/1606968271774-avatar/886ad88b-d2cc-4c9e-a674-f70eb51a679c.png",
    "books_count": 21,
    "public_books_count": 0,
    "followers_count": 0,
    "following_count": 0,
    "public": 1,
    "description": null,
    "created_at": "2020-01-08T14:21:31.000Z",
    "updated_at": "2023-11-22T20:13:30.000Z",
    "work_id": "",
    "_serializer": "v2.user"
  },
  "tags": [],
  "latest_version_id": 2110397761,
  "creator": {
    "id": 732231,
    "type": "User",
    "login": "wcywxq",
    "name": "magic",
    "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/732231/1606968271774-avatar/886ad88b-d2cc-4c9e-a674-f70eb51a679c.png",
    "books_count": 21,
    "public_books_count": 0,
    "followers_count": 0,
    "following_count": 0,
    "public": 1,
    "description": null,
    "created_at": "2020-01-08T14:21:31.000Z",
    "updated_at": "2023-11-22T20:13:30.000Z",
    "work_id": "",
    "_serializer": "v2.user"
  },
  "_serializer": "v2.doc_detail"
}