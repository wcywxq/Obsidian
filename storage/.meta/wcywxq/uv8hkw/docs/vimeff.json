{
  "id": 69427440,
  "slug": "vimeff",
  "title": "大型项目管理 - Monorepo",
  "description": "MonorepoMonorepo 是管理项目代码的一个方式，指在一个项目仓库 (repo) 中管理多个模块/包 (package)，不同于常见的每个模块建一个 repo。monorepo 好处是统一的工作流和 Code Sharing。搭建一套脚手架，就能管理（构建、测试、发布）多个 pack...",
  "cover": "https://cdn.nlark.com/yuque/0/2022/png/732231/1647255992316-6ff97f3b-f508-4c5a-81c8-0c637654f015.png",
  "user_id": 732231,
  "book_id": 24866785,
  "last_editor_id": 732231,
  "format": "lake",
  "body_draft": "<!doctype html><div class=\"lake-content\" typography=\"classic\"><h2 id=\"HnhiM\"><span class=\"ne-text\">Monorepo</span></h2><p id=\"u452bb90e\" class=\"ne-p\"><span class=\"ne-text\">Monorepo 是管理项目代码的一个方式，指在一个项目仓库 (repo) 中管理多个模块/包 (package)，不同于常见的每个模块建一个 repo。</span></p><p id=\"u8caf9371\" class=\"ne-p\"><span class=\"ne-text\"><br /></span><span class=\"ne-text\">monorepo 好处是统一的工作流和 Code Sharing。搭建一套脚手架，就能管理（构建、测试、发布）多个 package,统一测试、统一发版。</span></p><p id=\"uc9c4341e\" class=\"ne-p\"><span class=\"ne-text\"><br /></span><span class=\"ne-text\">坏处也很明显，就是 repo 的体积会比较大，由于每个 package 都有自己的 package.json，会安装自己的 node_modules,但是大概率会有很多包是重复的，这就使本来就很大的 node_modues 变得更大。</span></p><p id=\"uab260703\" class=\"ne-p\"><span class=\"ne-text\"><br /></span><span class=\"ne-text\">目前常见的 monorepo 解决方案是 </span><a href=\"https://github.com/lerna/lerna\" data-href=\"https://github.com/lerna/lerna\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">Lerna</span></a><span class=\"ne-text\"> 和 yarn 的 workspaces 特性</span></p><p id=\"u9fdd6b75\" class=\"ne-p\"><span class=\"ne-text\"><br /></span><span class=\"ne-text\">对于 node_modules 包重复安装的问题，lerna 提供了--hoist 选项，相同的依赖，会「提升」到 repo 根目录下安装，但……太鸡肋了，lerna 直接以字符串对比 dependency 的版本号，完全相同才提升，semver 约定在这并不起作用。</span></p><p id=\"uc83b3fd4\" class=\"ne-p\"><span class=\"ne-text\"><br /></span><span class=\"ne-text\">yarn 作为包管理器很好的解决了这个问题，只需要在根 package.json 中以 workspaces 字段声明 packages 目录和 </span><code class=\"ne-code\"><span class=\"ne-text\">&quot;private&quot;: true</span></code><span class=\"ne-text\">，yarn 就会以 monorepo 的方式管理 packages。yarn 会以 semver 约定来分析 dependencies 的版本，安装依赖时更快、占用体积更小；</span></p><p id=\"u5ca8e3de\" class=\"ne-p\"><span class=\"ne-text\"><br /></span><span class=\"ne-text\">启用了 yarn workspace 的项目，使用 yarn 安装依赖时，yarn 会为工作区的所有包创建符号链接，在根目录的 node_modules 可以看到<br /></span><span class=\"ne-text\">我们可以结合 lerna yarn 来用</span></p><h3 id=\"KA0aa\"><span class=\"ne-text\">yarn workspace 相关命令</span></h3><ul class=\"ne-ul\"><li id=\"u6d04f180\" data-lake-index-type=\"0\"><code class=\"ne-code\"><span class=\"ne-text\">yarn workspace &lt;workspace_name&gt;</span></code><span class=\"ne-text\"> 在指定工作区执行命令</span></li></ul><p id=\"ub5a9dc77\" class=\"ne-p\"><span class=\"ne-text\">注意: workspace_name 取包名(package.json 的 name 属性值)，add 或 remove 内部包时带上版本号；<br /></span><span class=\"ne-text\">下面命令会将 react 、react-dmo 添加到 packages/awesome-package/package.json 的 devDependencies</span></p><pre data-language=\"shell\" id=\"AxBG8\" class=\"ne-codeblock language-shell\"><code>yarn workspace awesome-package add react react-dom --dev</code></pre><p id=\"u508f84b9\" class=\"ne-p\"><img src=\"https://cdn.nlark.com/yuque/0/2022/png/732231/1647255992316-6ff97f3b-f508-4c5a-81c8-0c637654f015.png\" width=\"596\" id=\"ue5b29296\" class=\"ne-image\"></p><ul class=\"ne-ul\"><li id=\"ua200c2d3\" data-lake-index-type=\"0\"><code class=\"ne-code\"><span class=\"ne-text\">yarn workspaces run</span></code><span class=\"ne-text\"> 为所有工作区运行命令(lerna run 命令有同样功能),如：<br /></span><span class=\"ne-text\">将会在每个工作区运行 test 脚本</span></li></ul><pre data-language=\"shell\" id=\"I6pPr\" class=\"ne-codeblock language-shell\"><code>yarn workspaces run test</code></pre><ul class=\"ne-ul\"><li id=\"u428e35b2\" data-lake-index-type=\"0\"><code class=\"ne-code\"><span class=\"ne-text\">yarn workspaces info [--json]</span></code><span class=\"ne-text\"> 显示当前项目的工作区依赖关系</span></li></ul><pre data-language=\"shell\" id=\"DtSkk\" class=\"ne-codeblock language-shell\"><code>yarn workspaces info</code></pre><p id=\"u294e7937\" class=\"ne-p\"><span class=\"ne-text\">vue-next 项目下打印结果： 显示了工作区的相互依赖关系</span></p><p id=\"u33893eb6\" class=\"ne-p\"><img src=\"https://cdn.nlark.com/yuque/0/2022/png/732231/1647255846474-df3be7a3-9fb5-45f9-b02a-32eb642547e5.png\" width=\"317\" id=\"uc1ef6287\" class=\"ne-image\"><span class=\"ne-text\"><br /></span></p><h3 id=\"HfS6H\"><span class=\"ne-text\">lerna 常用 commands</span></h3><ul class=\"ne-ul\"><li id=\"u56228229\" data-lake-index-type=\"0\"><span class=\"ne-text\">lerna init 初始化 lerna 管理项目，生成如下目录：</span></li></ul><div data-type=\"info\" class=\"ne-alert\"><p id=\"u4d2eb544\" class=\"ne-p\"><span class=\"ne-text\">packages/<br /></span><span class=\"ne-text\">package.json<br /></span><span class=\"ne-text\">lerna.json</span></p></div><ul class=\"ne-ul\"><li id=\"ud26aea90\" data-lake-index-type=\"0\"><span class=\"ne-text\">lerna bootstrap --hoist 为所有项目安装依赖，并链接所有依赖包，类似于 npm i<br /></span><span class=\"ne-text\">使用--hoist 选项后，所有公共的依赖都只会安装在根目录的 node_modules 目录中去,而不会在每个包目录下的 node_modules 中都保留各自的依赖包。</span></li><li id=\"ua7e80eb9\" data-lake-index-type=\"0\"><span class=\"ne-text\">lerna clean 删除所有项目的 node_modules 目录</span></li><li id=\"ua163dc27\" data-lake-index-type=\"0\"><span class=\"ne-text\">lerna run [script] 默认为所有的项目运行 npm run [script]脚本，可以指定项目；</span></li><li id=\"u2b81b98e\" data-lake-index-type=\"0\"><span class=\"ne-text\">lerna changed 列出下次发版 lerna publish 要更新的包。</span></li><li id=\"u1f2f485d\" data-lake-index-type=\"0\"><span class=\"ne-text\">lerna publish 版本发布，按提示选择版本号(递增，或自定义)，将会执行以下步骤：</span></li></ul><ul class=\"ne-list-wrap\"><ul ne-level=\"1\" class=\"ne-ul\"><li id=\"u215f4efe\" data-lake-index-type=\"0\"><span class=\"ne-text\">运行 lerna updated 来决定哪一个包需要被 publish</span></li><li id=\"u75e46789\" data-lake-index-type=\"0\"><span class=\"ne-text\">如果有必要，将会更新 lerna.json 中的 version</span></li><li id=\"u863db64c\" data-lake-index-type=\"0\"><span class=\"ne-text\">将所有更新过的的包中的 package.json 的 version 字段更新</span></li><li id=\"u06710d39\" data-lake-index-type=\"0\"><span class=\"ne-text\">将所有更新过的包中的依赖更新</span></li><li id=\"udd1363f7\" data-lake-index-type=\"0\"><span class=\"ne-text\">为新版本创建一个 git commit 或 tag</span></li><li id=\"u7e972dc0\" data-lake-index-type=\"0\"><span class=\"ne-text\">将包 publish 到 npm 上；注意要先用 npm adduser 登录 npm 源，否则会失败；</span></li></ul></ul><ul class=\"ne-ul\"><li id=\"ub1724b6c\" data-lake-index-type=\"0\"><span class=\"ne-text\">lerna add [@version] [--dev] [--exact] [--peer] ：可以指定为某一个或所有的包安装依赖，依赖可以是外部(npm i 安装的)也可以是内部依赖(packages/下的包，会创建符号链接)，example：</span></li></ul><ul class=\"ne-list-wrap\"><ul ne-level=\"1\" class=\"ne-ul\"><li id=\"ubb0369d9\" data-lake-index-type=\"0\"><span class=\"ne-text\">lerna add babel , 该命令会在 package-1 和 package-2 下安装 babel</span></li><li id=\"u62a42391\" data-lake-index-type=\"0\"><span class=\"ne-text\">lerna add react --scope=package-1 ,该命令会在 package-1 下安装 react</span></li><li id=\"u746ec85d\" data-lake-index-type=\"0\"><span class=\"ne-text\">lerna add package-2 --scope=package-1，该命令会在 package-1 下安装 package-2</span></li></ul></ul><ul class=\"ne-ul\"><li id=\"ucbfb9f1d\" data-lake-index-type=\"0\"><span class=\"ne-text\">lerna create [loc] 创建一个 lerna 管理的包</span></li><li id=\"ua7b98b64\" data-lake-index-type=\"0\"><span class=\"ne-text\">lerna ls 控制台打印 packages 下的包名</span></li><li id=\"u506742c9\" data-lake-index-type=\"0\"><span class=\"ne-text\">lerna link 类似 npm link,创建软连接 ,但是实测怎么不起作用？(lerna version:v3.22.0)</span></li></ul><h3 id=\"a8Wgt\"><span class=\"ne-text\">lerna 工作的两种模式</span></h3><ul class=\"ne-ul\"><li id=\"u59d83329\" data-lake-index-type=\"0\"><span class=\"ne-text\">Fixed/Locked mode (default)</span></li></ul><p id=\"u0d38664a\" class=\"ne-p\"><span class=\"ne-text\">vue,babel 都是用这种，在 publish 的时候,会在 lerna.json 文件里面&quot;version&quot;: &quot;0.1.5&quot;,,依据这个号，进行增加，只选择一次，其他有改动的包自动更新版本号。</span></p><ul class=\"ne-ul\"><li id=\"uf5bf5bd7\" data-lake-index-type=\"0\"><span class=\"ne-text\">Independent mode</span></li></ul><p id=\"uddf7dc3e\" class=\"ne-p\"><span class=\"ne-text\">lerna init --independent 初始化项目,lerna.json 文件里面&quot;version&quot;: &quot;independent&quot;,<br /></span><span class=\"ne-text\">每次 publish 时，都将得到一个提示符，提示每个已更改的包，以指定是补丁、次要更改、主要更改还是自定义更改。</span></p><p id=\"u2a71352b\" class=\"ne-p\"><br></p><h3 id=\"veIMH\"><span class=\"ne-text\">启用 yarn 的 workspaces 模式</span></h3><div data-type=\"info\" class=\"ne-alert\"><p id=\"u1ea18667\" class=\"ne-p\"><span class=\"ne-text\">默认是 npm, 而且每个子 package 都有自己的 node_modules，通过这样设置后，只有顶层有一个 node_modules</span></p></div><p id=\"ua3c537da\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"u897cacb3\" data-lake-index-type=\"0\"><span class=\"ne-text\">修改顶层 package.json and lerna.json</span></li></ul><p id=\"uf0b4611e\" class=\"ne-p\"><span class=\"ne-text\"></span></p><pre data-language=\"json\" id=\"Pyi62\" class=\"ne-codeblock language-json\"><code>package.json 文件加入\n\n&quot;private&quot;: true,\n&quot;workspaces&quot;: [\n&quot;packages/*&quot;\n],\n\nlerna.json 文件加入\n\n&quot;useWorkspaces&quot;: true,\n&quot;npmClient&quot;: &quot;yarn&quot;</code></pre><h3 id=\"Eozdy\"><span class=\"ne-text\">说了那么多，接下来实战演示一把</span></h3><p id=\"ue9008c1d\" class=\"ne-p\"><br></p><h4 id=\"akEJz\"><span class=\"ne-text\">初始化项目</span></h4><pre data-language=\"shell\" id=\"fnnNb\" class=\"ne-codeblock language-shell\"><code>npm intall lerna -g\nmkdir lernaProject &amp;&amp; cd $_\ngit init\nlerna init\ngit add .\ngit commit -m &quot;Initial Commit&quot;\ngit remote add origin http://github.com/renbuzhudek/lernaProject .git\ngit push -u origin master</code></pre><p id=\"uaad099c8\" class=\"ne-p\"><span class=\"ne-text\">上述命令执行完成后，生成如下目录：</span></p><div data-type=\"info\" class=\"ne-alert\"><p id=\"ud032e8f8\" class=\"ne-p\"><span class=\"ne-text\">packages/<br /></span><span class=\"ne-text\">package.json<br /></span><span class=\"ne-text\">lerna.json</span></p></div><h4 id=\"TnaW9\"><span class=\"ne-text\">新建两个模块</span></h4><p id=\"u95ccd0ba\" class=\"ne-p\"><span class=\"ne-text\">为了演示方便，我们新建两个模块， moduleA 和 moduleB， 并让 moduleA 依赖 moduleB：</span></p><pre data-language=\"shell\" id=\"EpstM\" class=\"ne-codeblock language-shell\"><code>lerna create module-a\nlerna create module-b\n# 将本地包链接起来，可以直接引用\nlerna add module-b --scope=module-a</code></pre><p id=\"u1046831c\" class=\"ne-p\"><span class=\"ne-text\">修改 module-b 的入口文件：</span></p><pre data-language=\"javascript\" id=\"fztRG\" class=\"ne-codeblock language-javascript\"><code>module.exports = moduleB;\nfunction moduleB() {\n    return &quot;hello world&quot;;\n}</code></pre><p id=\"uf1c186ec\" class=\"ne-p\"><span class=\"ne-text\">修改 module-a 的入口文件:</span></p><pre data-language=\"javascript\" id=\"z9FGN\" class=\"ne-codeblock language-javascript\"><code>const moduleB = require('module-b');\nconst moduleA = function() {\n    console.log(moduleB());\n}\nmodule.exports = moduleA;\nmoduleA()</code></pre><p id=\"u776e4feb\" class=\"ne-p\"><span class=\"ne-text\">node 调用模块 a：</span></p><p id=\"udd8ff447\" class=\"ne-p\"><img src=\"https://cdn.nlark.com/yuque/0/2022/png/732231/1647256446014-4d82c484-8a39-4d00-a65d-7e963e159ffc.png\" width=\"518\" id=\"u7317fe0e\" class=\"ne-image\"></p><p id=\"u1755ab3b\" class=\"ne-p\"><br></p><h4 id=\"gU3L3\"><span class=\"ne-text\">发布新模块</span></h4><p id=\"u57e71fae\" class=\"ne-p\"><span class=\"ne-text\">完成修改后，git 提交完代码，我们就可以直接发布新的模块,记得要先登录 npm 源<br /></span><span class=\"ne-text\">然后运行下面命令，根据提示输入版本号等，lerna 会自动帮我们给包加上 tag,并上传到对应的仓库中去。</span></p><pre data-language=\"shell\" id=\"jhjIa\" class=\"ne-codeblock language-shell\"><code>lerna publish</code></pre><h3 id=\"sSAun\"><span class=\"ne-text\">依赖包的值可以提供一个 url</span></h3><div data-type=\"info\" class=\"ne-alert\"><p id=\"ue8ebf764\" class=\"ne-p\"><span class=\"ne-text\">会下载到 node_modules 里面<br /></span><span class=\"ne-text\">作用：内网部署 npm 镜像时，可用于下载内部包</span></p></div><p id=\"uca8b27f1\" class=\"ne-p\"><img src=\"https://cdn.nlark.com/yuque/0/2022/png/732231/1647256512379-41d70f43-033b-47d3-ac77-610f1705a264.png\" width=\"531\" id=\"u9e768f94\" class=\"ne-image\"></p></div>",
  "body": "<a name=\"HnhiM\"></a>\n## Monorepo\nMonorepo 是管理项目代码的一个方式，指在一个项目仓库 (repo) 中管理多个模块/包 (package)，不同于常见的每个模块建一个 repo。\n\nmonorepo 好处是统一的工作流和 Code Sharing。搭建一套脚手架，就能管理（构建、测试、发布）多个 package,统一测试、统一发版。\n\n坏处也很明显，就是 repo 的体积会比较大，由于每个 package 都有自己的 package.json，会安装自己的 node_modules,但是大概率会有很多包是重复的，这就使本来就很大的 node_modues 变得更大。\n\n目前常见的 monorepo 解决方案是 [Lerna](https://github.com/lerna/lerna) 和 yarn 的 workspaces 特性\n\n对于 node_modules 包重复安装的问题，lerna 提供了--hoist 选项，相同的依赖，会「提升」到 repo 根目录下安装，但……太鸡肋了，lerna 直接以字符串对比 dependency 的版本号，完全相同才提升，semver 约定在这并不起作用。\n\nyarn 作为包管理器很好的解决了这个问题，只需要在根 package.json 中以 workspaces 字段声明 packages 目录和 `\"private\": true`，yarn 就会以 monorepo 的方式管理 packages。yarn 会以 semver 约定来分析 dependencies 的版本，安装依赖时更快、占用体积更小；\n\n启用了 yarn workspace 的项目，使用 yarn 安装依赖时，yarn 会为工作区的所有包创建符号链接，在根目录的 node_modules 可以看到<br />我们可以结合 lerna yarn 来用\n<a name=\"KA0aa\"></a>\n### yarn workspace 相关命令\n\n- `yarn workspace <workspace_name>` 在指定工作区执行命令\n\n注意: workspace_name 取包名(package.json 的 name 属性值)，add 或 remove 内部包时带上版本号；<br />下面命令会将 react 、react-dmo 添加到 packages/awesome-package/package.json 的 devDependencies\n```shell\nyarn workspace awesome-package add react react-dom --dev\n```\n![image.png](https://cdn.nlark.com/yuque/0/2022/png/732231/1647255992316-6ff97f3b-f508-4c5a-81c8-0c637654f015.png#averageHue=%23353930&clientId=u580c557c-2f85-4&from=paste&height=29&id=ue5b29296&originHeight=29&originWidth=596&originalType=binary&ratio=1&rotation=0&showTitle=false&size=25844&status=done&style=none&taskId=ufa4c8377-de75-46a7-98fe-4d64ec52816&title=&width=596)\n\n- `yarn workspaces run` 为所有工作区运行命令(lerna run 命令有同样功能),如：<br />将会在每个工作区运行 test 脚本\n```shell\nyarn workspaces run test\n```\n\n- `yarn workspaces info [--json]` 显示当前项目的工作区依赖关系\n```shell\nyarn workspaces info\n```\nvue-next 项目下打印结果： 显示了工作区的相互依赖关系<br />![image.png](https://cdn.nlark.com/yuque/0/2022/png/732231/1647255846474-df3be7a3-9fb5-45f9-b02a-32eb642547e5.png#averageHue=%2338392c&clientId=u580c557c-2f85-4&from=paste&height=482&id=uc1ef6287&originHeight=482&originWidth=317&originalType=binary&ratio=1&rotation=0&showTitle=false&size=198910&status=done&style=none&taskId=u64cf2933-656f-4550-973b-98760534c9b&title=&width=317)\n\n<a name=\"HfS6H\"></a>\n### lerna 常用 commands\n\n- lerna init 初始化 lerna 管理项目，生成如下目录：\n:::info\npackages/<br />package.json<br />lerna.json\n:::\n\n- lerna bootstrap --hoist 为所有项目安装依赖，并链接所有依赖包，类似于 npm i<br />使用--hoist 选项后，所有公共的依赖都只会安装在根目录的 node_modules 目录中去,而不会在每个包目录下的 node_modules 中都保留各自的依赖包。\n- lerna clean 删除所有项目的 node_modules 目录\n- lerna run [script] 默认为所有的项目运行 npm run [script]脚本，可以指定项目；\n- lerna changed 列出下次发版 lerna publish 要更新的包。\n- lerna publish 版本发布，按提示选择版本号(递增，或自定义)，将会执行以下步骤：\n   - 运行 lerna updated 来决定哪一个包需要被 publish\n   - 如果有必要，将会更新 lerna.json 中的 version\n   - 将所有更新过的的包中的 package.json 的 version 字段更新\n   - 将所有更新过的包中的依赖更新\n   - 为新版本创建一个 git commit 或 tag\n   - 将包 publish 到 npm 上；注意要先用 npm adduser 登录 npm 源，否则会失败；\n- lerna add [@version] [--dev] [--exact] [--peer] ：可以指定为某一个或所有的包安装依赖，依赖可以是外部(npm i 安装的)也可以是内部依赖(packages/下的包，会创建符号链接)，example：\n   - lerna add babel , 该命令会在 package-1 和 package-2 下安装 babel\n   - lerna add react --scope=package-1 ,该命令会在 package-1 下安装 react\n   - lerna add package-2 --scope=package-1，该命令会在 package-1 下安装 package-2\n- lerna create [loc] 创建一个 lerna 管理的包\n- lerna ls 控制台打印 packages 下的包名\n- lerna link 类似 npm link,创建软连接 ,但是实测怎么不起作用？(lerna version:v3.22.0)\n<a name=\"a8Wgt\"></a>\n### lerna 工作的两种模式\n\n- Fixed/Locked mode (default)\n\nvue,babel 都是用这种，在 publish 的时候,会在 lerna.json 文件里面\"version\": \"0.1.5\",,依据这个号，进行增加，只选择一次，其他有改动的包自动更新版本号。\n\n- Independent mode\n\nlerna init --independent 初始化项目,lerna.json 文件里面\"version\": \"independent\",<br />每次 publish 时，都将得到一个提示符，提示每个已更改的包，以指定是补丁、次要更改、主要更改还是自定义更改。\n\n<a name=\"veIMH\"></a>\n### 启用 yarn 的 workspaces 模式\n:::info\n默认是 npm, 而且每个子 package 都有自己的 node_modules，通过这样设置后，只有顶层有一个 node_modules\n:::\n\n- 修改顶层 package.json and lerna.json\n\n```json\npackage.json 文件加入\n\n\"private\": true,\n\"workspaces\": [\n\"packages/*\"\n],\n\nlerna.json 文件加入\n\n\"useWorkspaces\": true,\n\"npmClient\": \"yarn\"\n```\n<a name=\"Eozdy\"></a>\n### 说了那么多，接下来实战演示一把\n\n<a name=\"akEJz\"></a>\n#### 初始化项目\n```shell\nnpm intall lerna -g\nmkdir lernaProject && cd $_\ngit init\nlerna init\ngit add .\ngit commit -m \"Initial Commit\"\ngit remote add origin http://github.com/renbuzhudek/lernaProject .git\ngit push -u origin master\n```\n上述命令执行完成后，生成如下目录：\n:::info\npackages/<br />package.json<br />lerna.json\n:::\n<a name=\"TnaW9\"></a>\n#### 新建两个模块\n为了演示方便，我们新建两个模块， moduleA 和 moduleB， 并让 moduleA 依赖 moduleB：\n```shell\nlerna create module-a\nlerna create module-b\n# 将本地包链接起来，可以直接引用\nlerna add module-b --scope=module-a\n```\n修改 module-b 的入口文件：\n```javascript\nmodule.exports = moduleB;\nfunction moduleB() {\n    return \"hello world\";\n}\n```\n修改 module-a 的入口文件:\n```javascript\nconst moduleB = require('module-b');\nconst moduleA = function() {\n    console.log(moduleB());\n}\nmodule.exports = moduleA;\nmoduleA()\n```\nnode 调用模块 a：<br />![image.png](https://cdn.nlark.com/yuque/0/2022/png/732231/1647256446014-4d82c484-8a39-4d00-a65d-7e963e159ffc.png#averageHue=%2341401b&clientId=u580c557c-2f85-4&from=paste&height=79&id=u7317fe0e&originHeight=79&originWidth=518&originalType=binary&ratio=1&rotation=0&showTitle=false&size=38386&status=done&style=none&taskId=u362b1e45-6f4d-4bcd-bb40-f39873814da&title=&width=518)\n\n<a name=\"gU3L3\"></a>\n#### 发布新模块\n完成修改后，git 提交完代码，我们就可以直接发布新的模块,记得要先登录 npm 源<br />然后运行下面命令，根据提示输入版本号等，lerna 会自动帮我们给包加上 tag,并上传到对应的仓库中去。\n```shell\nlerna publish\n```\n<a name=\"sSAun\"></a>\n### 依赖包的值可以提供一个 url\n:::info\n会下载到 node_modules 里面<br />作用：内网部署 npm 镜像时，可用于下载内部包\n:::\n![image.png](https://cdn.nlark.com/yuque/0/2022/png/732231/1647256512379-41d70f43-033b-47d3-ac77-610f1705a264.png#averageHue=%23202219&clientId=u580c557c-2f85-4&from=paste&height=251&id=u9e768f94&originHeight=251&originWidth=531&originalType=binary&ratio=1&rotation=0&showTitle=false&size=121803&status=done&style=none&taskId=u2298ec48-fc9d-4851-9024-16874430806&title=&width=531)\n",
  "body_html": "<!doctype html><div class=\"lake-content\" typography=\"classic\"><h2 id=\"HnhiM\"><span class=\"ne-text\">Monorepo</span></h2><p id=\"u452bb90e\" class=\"ne-p\"><span class=\"ne-text\">Monorepo 是管理项目代码的一个方式，指在一个项目仓库 (repo) 中管理多个模块/包 (package)，不同于常见的每个模块建一个 repo。</span></p><p id=\"u8caf9371\" class=\"ne-p\"><span class=\"ne-text\"><br /></span><span class=\"ne-text\">monorepo 好处是统一的工作流和 Code Sharing。搭建一套脚手架，就能管理（构建、测试、发布）多个 package,统一测试、统一发版。</span></p><p id=\"uc9c4341e\" class=\"ne-p\"><span class=\"ne-text\"><br /></span><span class=\"ne-text\">坏处也很明显，就是 repo 的体积会比较大，由于每个 package 都有自己的 package.json，会安装自己的 node_modules,但是大概率会有很多包是重复的，这就使本来就很大的 node_modues 变得更大。</span></p><p id=\"uab260703\" class=\"ne-p\"><span class=\"ne-text\"><br /></span><span class=\"ne-text\">目前常见的 monorepo 解决方案是 </span><a href=\"https://github.com/lerna/lerna\" data-href=\"https://github.com/lerna/lerna\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">Lerna</span></a><span class=\"ne-text\"> 和 yarn 的 workspaces 特性</span></p><p id=\"u9fdd6b75\" class=\"ne-p\"><span class=\"ne-text\"><br /></span><span class=\"ne-text\">对于 node_modules 包重复安装的问题，lerna 提供了--hoist 选项，相同的依赖，会「提升」到 repo 根目录下安装，但……太鸡肋了，lerna 直接以字符串对比 dependency 的版本号，完全相同才提升，semver 约定在这并不起作用。</span></p><p id=\"uc83b3fd4\" class=\"ne-p\"><span class=\"ne-text\"><br /></span><span class=\"ne-text\">yarn 作为包管理器很好的解决了这个问题，只需要在根 package.json 中以 workspaces 字段声明 packages 目录和 </span><code class=\"ne-code\"><span class=\"ne-text\">&quot;private&quot;: true</span></code><span class=\"ne-text\">，yarn 就会以 monorepo 的方式管理 packages。yarn 会以 semver 约定来分析 dependencies 的版本，安装依赖时更快、占用体积更小；</span></p><p id=\"u5ca8e3de\" class=\"ne-p\"><span class=\"ne-text\"><br /></span><span class=\"ne-text\">启用了 yarn workspace 的项目，使用 yarn 安装依赖时，yarn 会为工作区的所有包创建符号链接，在根目录的 node_modules 可以看到<br /></span><span class=\"ne-text\">我们可以结合 lerna yarn 来用</span></p><h3 id=\"KA0aa\"><span class=\"ne-text\">yarn workspace 相关命令</span></h3><ul class=\"ne-ul\"><li id=\"u6d04f180\" data-lake-index-type=\"0\"><code class=\"ne-code\"><span class=\"ne-text\">yarn workspace &lt;workspace_name&gt;</span></code><span class=\"ne-text\"> 在指定工作区执行命令</span></li></ul><p id=\"ub5a9dc77\" class=\"ne-p\"><span class=\"ne-text\">注意: workspace_name 取包名(package.json 的 name 属性值)，add 或 remove 内部包时带上版本号；<br /></span><span class=\"ne-text\">下面命令会将 react 、react-dmo 添加到 packages/awesome-package/package.json 的 devDependencies</span></p><pre data-language=\"shell\" id=\"AxBG8\" class=\"ne-codeblock language-shell\"><code>yarn workspace awesome-package add react react-dom --dev</code></pre><p id=\"u508f84b9\" class=\"ne-p\"><img src=\"https://cdn.nlark.com/yuque/0/2022/png/732231/1647255992316-6ff97f3b-f508-4c5a-81c8-0c637654f015.png\" width=\"596\" id=\"ue5b29296\" class=\"ne-image\"></p><ul class=\"ne-ul\"><li id=\"ua200c2d3\" data-lake-index-type=\"0\"><code class=\"ne-code\"><span class=\"ne-text\">yarn workspaces run</span></code><span class=\"ne-text\"> 为所有工作区运行命令(lerna run 命令有同样功能),如：<br /></span><span class=\"ne-text\">将会在每个工作区运行 test 脚本</span></li></ul><pre data-language=\"shell\" id=\"I6pPr\" class=\"ne-codeblock language-shell\"><code>yarn workspaces run test</code></pre><ul class=\"ne-ul\"><li id=\"u428e35b2\" data-lake-index-type=\"0\"><code class=\"ne-code\"><span class=\"ne-text\">yarn workspaces info [--json]</span></code><span class=\"ne-text\"> 显示当前项目的工作区依赖关系</span></li></ul><pre data-language=\"shell\" id=\"DtSkk\" class=\"ne-codeblock language-shell\"><code>yarn workspaces info</code></pre><p id=\"u294e7937\" class=\"ne-p\"><span class=\"ne-text\">vue-next 项目下打印结果： 显示了工作区的相互依赖关系</span></p><p id=\"u33893eb6\" class=\"ne-p\"><img src=\"https://cdn.nlark.com/yuque/0/2022/png/732231/1647255846474-df3be7a3-9fb5-45f9-b02a-32eb642547e5.png\" width=\"317\" id=\"uc1ef6287\" class=\"ne-image\"><span class=\"ne-text\"><br /></span></p><h3 id=\"HfS6H\"><span class=\"ne-text\">lerna 常用 commands</span></h3><ul class=\"ne-ul\"><li id=\"u56228229\" data-lake-index-type=\"0\"><span class=\"ne-text\">lerna init 初始化 lerna 管理项目，生成如下目录：</span></li></ul><div data-type=\"info\" class=\"ne-alert\"><p id=\"u4d2eb544\" class=\"ne-p\"><span class=\"ne-text\">packages/<br /></span><span class=\"ne-text\">package.json<br /></span><span class=\"ne-text\">lerna.json</span></p></div><ul class=\"ne-ul\"><li id=\"ud26aea90\" data-lake-index-type=\"0\"><span class=\"ne-text\">lerna bootstrap --hoist 为所有项目安装依赖，并链接所有依赖包，类似于 npm i<br /></span><span class=\"ne-text\">使用--hoist 选项后，所有公共的依赖都只会安装在根目录的 node_modules 目录中去,而不会在每个包目录下的 node_modules 中都保留各自的依赖包。</span></li><li id=\"ua7e80eb9\" data-lake-index-type=\"0\"><span class=\"ne-text\">lerna clean 删除所有项目的 node_modules 目录</span></li><li id=\"ua163dc27\" data-lake-index-type=\"0\"><span class=\"ne-text\">lerna run [script] 默认为所有的项目运行 npm run [script]脚本，可以指定项目；</span></li><li id=\"u2b81b98e\" data-lake-index-type=\"0\"><span class=\"ne-text\">lerna changed 列出下次发版 lerna publish 要更新的包。</span></li><li id=\"u1f2f485d\" data-lake-index-type=\"0\"><span class=\"ne-text\">lerna publish 版本发布，按提示选择版本号(递增，或自定义)，将会执行以下步骤：</span></li></ul><ul class=\"ne-list-wrap\"><ul ne-level=\"1\" class=\"ne-ul\"><li id=\"u215f4efe\" data-lake-index-type=\"0\"><span class=\"ne-text\">运行 lerna updated 来决定哪一个包需要被 publish</span></li><li id=\"u75e46789\" data-lake-index-type=\"0\"><span class=\"ne-text\">如果有必要，将会更新 lerna.json 中的 version</span></li><li id=\"u863db64c\" data-lake-index-type=\"0\"><span class=\"ne-text\">将所有更新过的的包中的 package.json 的 version 字段更新</span></li><li id=\"u06710d39\" data-lake-index-type=\"0\"><span class=\"ne-text\">将所有更新过的包中的依赖更新</span></li><li id=\"udd1363f7\" data-lake-index-type=\"0\"><span class=\"ne-text\">为新版本创建一个 git commit 或 tag</span></li><li id=\"u7e972dc0\" data-lake-index-type=\"0\"><span class=\"ne-text\">将包 publish 到 npm 上；注意要先用 npm adduser 登录 npm 源，否则会失败；</span></li></ul></ul><ul class=\"ne-ul\"><li id=\"ub1724b6c\" data-lake-index-type=\"0\"><span class=\"ne-text\">lerna add [@version] [--dev] [--exact] [--peer] ：可以指定为某一个或所有的包安装依赖，依赖可以是外部(npm i 安装的)也可以是内部依赖(packages/下的包，会创建符号链接)，example：</span></li></ul><ul class=\"ne-list-wrap\"><ul ne-level=\"1\" class=\"ne-ul\"><li id=\"ubb0369d9\" data-lake-index-type=\"0\"><span class=\"ne-text\">lerna add babel , 该命令会在 package-1 和 package-2 下安装 babel</span></li><li id=\"u62a42391\" data-lake-index-type=\"0\"><span class=\"ne-text\">lerna add react --scope=package-1 ,该命令会在 package-1 下安装 react</span></li><li id=\"u746ec85d\" data-lake-index-type=\"0\"><span class=\"ne-text\">lerna add package-2 --scope=package-1，该命令会在 package-1 下安装 package-2</span></li></ul></ul><ul class=\"ne-ul\"><li id=\"ucbfb9f1d\" data-lake-index-type=\"0\"><span class=\"ne-text\">lerna create [loc] 创建一个 lerna 管理的包</span></li><li id=\"ua7b98b64\" data-lake-index-type=\"0\"><span class=\"ne-text\">lerna ls 控制台打印 packages 下的包名</span></li><li id=\"u506742c9\" data-lake-index-type=\"0\"><span class=\"ne-text\">lerna link 类似 npm link,创建软连接 ,但是实测怎么不起作用？(lerna version:v3.22.0)</span></li></ul><h3 id=\"a8Wgt\"><span class=\"ne-text\">lerna 工作的两种模式</span></h3><ul class=\"ne-ul\"><li id=\"u59d83329\" data-lake-index-type=\"0\"><span class=\"ne-text\">Fixed/Locked mode (default)</span></li></ul><p id=\"u0d38664a\" class=\"ne-p\"><span class=\"ne-text\">vue,babel 都是用这种，在 publish 的时候,会在 lerna.json 文件里面&quot;version&quot;: &quot;0.1.5&quot;,,依据这个号，进行增加，只选择一次，其他有改动的包自动更新版本号。</span></p><ul class=\"ne-ul\"><li id=\"uf5bf5bd7\" data-lake-index-type=\"0\"><span class=\"ne-text\">Independent mode</span></li></ul><p id=\"uddf7dc3e\" class=\"ne-p\"><span class=\"ne-text\">lerna init --independent 初始化项目,lerna.json 文件里面&quot;version&quot;: &quot;independent&quot;,<br /></span><span class=\"ne-text\">每次 publish 时，都将得到一个提示符，提示每个已更改的包，以指定是补丁、次要更改、主要更改还是自定义更改。</span></p><p id=\"u2a71352b\" class=\"ne-p\"><br></p><h3 id=\"veIMH\"><span class=\"ne-text\">启用 yarn 的 workspaces 模式</span></h3><div data-type=\"info\" class=\"ne-alert\"><p id=\"u1ea18667\" class=\"ne-p\"><span class=\"ne-text\">默认是 npm, 而且每个子 package 都有自己的 node_modules，通过这样设置后，只有顶层有一个 node_modules</span></p></div><p id=\"ua3c537da\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"u897cacb3\" data-lake-index-type=\"0\"><span class=\"ne-text\">修改顶层 package.json and lerna.json</span></li></ul><p id=\"uf0b4611e\" class=\"ne-p\"><span class=\"ne-text\"></span></p><pre data-language=\"json\" id=\"Pyi62\" class=\"ne-codeblock language-json\"><code>package.json 文件加入\n\n&quot;private&quot;: true,\n&quot;workspaces&quot;: [\n&quot;packages/*&quot;\n],\n\nlerna.json 文件加入\n\n&quot;useWorkspaces&quot;: true,\n&quot;npmClient&quot;: &quot;yarn&quot;</code></pre><h3 id=\"Eozdy\"><span class=\"ne-text\">说了那么多，接下来实战演示一把</span></h3><p id=\"ue9008c1d\" class=\"ne-p\"><br></p><h4 id=\"akEJz\"><span class=\"ne-text\">初始化项目</span></h4><pre data-language=\"shell\" id=\"fnnNb\" class=\"ne-codeblock language-shell\"><code>npm intall lerna -g\nmkdir lernaProject &amp;&amp; cd $_\ngit init\nlerna init\ngit add .\ngit commit -m &quot;Initial Commit&quot;\ngit remote add origin http://github.com/renbuzhudek/lernaProject .git\ngit push -u origin master</code></pre><p id=\"uaad099c8\" class=\"ne-p\"><span class=\"ne-text\">上述命令执行完成后，生成如下目录：</span></p><div data-type=\"info\" class=\"ne-alert\"><p id=\"ud032e8f8\" class=\"ne-p\"><span class=\"ne-text\">packages/<br /></span><span class=\"ne-text\">package.json<br /></span><span class=\"ne-text\">lerna.json</span></p></div><h4 id=\"TnaW9\"><span class=\"ne-text\">新建两个模块</span></h4><p id=\"u95ccd0ba\" class=\"ne-p\"><span class=\"ne-text\">为了演示方便，我们新建两个模块， moduleA 和 moduleB， 并让 moduleA 依赖 moduleB：</span></p><pre data-language=\"shell\" id=\"EpstM\" class=\"ne-codeblock language-shell\"><code>lerna create module-a\nlerna create module-b\n# 将本地包链接起来，可以直接引用\nlerna add module-b --scope=module-a</code></pre><p id=\"u1046831c\" class=\"ne-p\"><span class=\"ne-text\">修改 module-b 的入口文件：</span></p><pre data-language=\"javascript\" id=\"fztRG\" class=\"ne-codeblock language-javascript\"><code>module.exports = moduleB;\nfunction moduleB() {\n    return &quot;hello world&quot;;\n}</code></pre><p id=\"uf1c186ec\" class=\"ne-p\"><span class=\"ne-text\">修改 module-a 的入口文件:</span></p><pre data-language=\"javascript\" id=\"z9FGN\" class=\"ne-codeblock language-javascript\"><code>const moduleB = require('module-b');\nconst moduleA = function() {\n    console.log(moduleB());\n}\nmodule.exports = moduleA;\nmoduleA()</code></pre><p id=\"u776e4feb\" class=\"ne-p\"><span class=\"ne-text\">node 调用模块 a：</span></p><p id=\"udd8ff447\" class=\"ne-p\"><img src=\"https://cdn.nlark.com/yuque/0/2022/png/732231/1647256446014-4d82c484-8a39-4d00-a65d-7e963e159ffc.png\" width=\"518\" id=\"u7317fe0e\" class=\"ne-image\"></p><p id=\"u1755ab3b\" class=\"ne-p\"><br></p><h4 id=\"gU3L3\"><span class=\"ne-text\">发布新模块</span></h4><p id=\"u57e71fae\" class=\"ne-p\"><span class=\"ne-text\">完成修改后，git 提交完代码，我们就可以直接发布新的模块,记得要先登录 npm 源<br /></span><span class=\"ne-text\">然后运行下面命令，根据提示输入版本号等，lerna 会自动帮我们给包加上 tag,并上传到对应的仓库中去。</span></p><pre data-language=\"shell\" id=\"jhjIa\" class=\"ne-codeblock language-shell\"><code>lerna publish</code></pre><h3 id=\"sSAun\"><span class=\"ne-text\">依赖包的值可以提供一个 url</span></h3><div data-type=\"info\" class=\"ne-alert\"><p id=\"ue8ebf764\" class=\"ne-p\"><span class=\"ne-text\">会下载到 node_modules 里面<br /></span><span class=\"ne-text\">作用：内网部署 npm 镜像时，可用于下载内部包</span></p></div><p id=\"uca8b27f1\" class=\"ne-p\"><img src=\"https://cdn.nlark.com/yuque/0/2022/png/732231/1647256512379-41d70f43-033b-47d3-ac77-610f1705a264.png\" width=\"531\" id=\"u9e768f94\" class=\"ne-image\"></p></div>",
  "body_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"viewport\" content=\"fixed\" /><meta name=\"typography\" content=\"classic\" /><h2 data-lake-id=\"HnhiM\" id=\"HnhiM\"><span data-lake-id=\"u13af597e\" id=\"u13af597e\">Monorepo</span></h2><p data-lake-id=\"u452bb90e\" id=\"u452bb90e\"><span data-lake-id=\"u5a600610\" id=\"u5a600610\">Monorepo 是管理项目代码的一个方式，指在一个项目仓库 (repo) 中管理多个模块/包 (package)，不同于常见的每个模块建一个 repo。</span></p><p data-lake-id=\"u8caf9371\" id=\"u8caf9371\"><span data-lake-id=\"u5da50ece\" id=\"u5da50ece\"><br /></span><span data-lake-id=\"u91b0785f\" id=\"u91b0785f\">monorepo 好处是统一的工作流和 Code Sharing。搭建一套脚手架，就能管理（构建、测试、发布）多个 package,统一测试、统一发版。</span></p><p data-lake-id=\"uc9c4341e\" id=\"uc9c4341e\"><span data-lake-id=\"u194945ee\" id=\"u194945ee\"><br /></span><span data-lake-id=\"ub26fb7cf\" id=\"ub26fb7cf\">坏处也很明显，就是 repo 的体积会比较大，由于每个 package 都有自己的 package.json，会安装自己的 node_modules,但是大概率会有很多包是重复的，这就使本来就很大的 node_modues 变得更大。</span></p><p data-lake-id=\"uab260703\" id=\"uab260703\"><span data-lake-id=\"u1925fbb4\" id=\"u1925fbb4\"><br /></span><span data-lake-id=\"u295a7a62\" id=\"u295a7a62\">目前常见的 monorepo 解决方案是 </span><a href=\"https://github.com/lerna/lerna\" target=\"_blank\" data-lake-id=\"u78eb45df\" id=\"u78eb45df\"><span data-lake-id=\"u1b54be08\" id=\"u1b54be08\">Lerna</span></a><span data-lake-id=\"ud34b0010\" id=\"ud34b0010\"> 和 yarn 的 workspaces 特性</span></p><p data-lake-id=\"u9fdd6b75\" id=\"u9fdd6b75\"><span data-lake-id=\"u86279b67\" id=\"u86279b67\"><br /></span><span data-lake-id=\"uf87bc9ce\" id=\"uf87bc9ce\">对于 node_modules 包重复安装的问题，lerna 提供了--hoist 选项，相同的依赖，会「提升」到 repo 根目录下安装，但……太鸡肋了，lerna 直接以字符串对比 dependency 的版本号，完全相同才提升，semver 约定在这并不起作用。</span></p><p data-lake-id=\"uc83b3fd4\" id=\"uc83b3fd4\"><span data-lake-id=\"u2b4eebd6\" id=\"u2b4eebd6\"><br /></span><span data-lake-id=\"ub0e82aad\" id=\"ub0e82aad\">yarn 作为包管理器很好的解决了这个问题，只需要在根 package.json 中以 workspaces 字段声明 packages 目录和 </span><code data-lake-id=\"u3be82f6b\" id=\"u3be82f6b\"><span data-lake-id=\"ua0b6953b\" id=\"ua0b6953b\">&quot;private&quot;: true</span></code><span data-lake-id=\"u6726a0fc\" id=\"u6726a0fc\">，yarn 就会以 monorepo 的方式管理 packages。yarn 会以 semver 约定来分析 dependencies 的版本，安装依赖时更快、占用体积更小；</span></p><p data-lake-id=\"u5ca8e3de\" id=\"u5ca8e3de\"><span data-lake-id=\"u4753943a\" id=\"u4753943a\"><br /></span><span data-lake-id=\"ud5c41e2f\" id=\"ud5c41e2f\">启用了 yarn workspace 的项目，使用 yarn 安装依赖时，yarn 会为工作区的所有包创建符号链接，在根目录的 node_modules 可以看到<br /></span><span data-lake-id=\"u065cf0af\" id=\"u065cf0af\">我们可以结合 lerna yarn 来用</span></p><h3 data-lake-id=\"KA0aa\" id=\"KA0aa\"><span data-lake-id=\"ub46e2136\" id=\"ub46e2136\">yarn workspace 相关命令</span></h3><ul list=\"u8fd418ba\"><li fid=\"u4cc3a974\" data-lake-id=\"u6d04f180\" id=\"u6d04f180\"><code data-lake-id=\"u975e93be\" id=\"u975e93be\"><span data-lake-id=\"ufdf769da\" id=\"ufdf769da\">yarn workspace &lt;workspace_name&gt;</span></code><span data-lake-id=\"ue7b8f0b8\" id=\"ue7b8f0b8\"> 在指定工作区执行命令</span></li></ul><p data-lake-id=\"ub5a9dc77\" id=\"ub5a9dc77\"><span data-lake-id=\"u41e31025\" id=\"u41e31025\">注意: workspace_name 取包名(package.json 的 name 属性值)，add 或 remove 内部包时带上版本号；<br /></span><span data-lake-id=\"uc8482f25\" id=\"uc8482f25\">下面命令会将 react 、react-dmo 添加到 packages/awesome-package/package.json 的 devDependencies</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22shell%22%2C%22code%22%3A%22yarn%20workspace%20awesome-package%20add%20react%20react-dom%20--dev%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22AxBG8%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u508f84b9\" id=\"u508f84b9\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2022%2Fpng%2F732231%2F1647255992316-6ff97f3b-f508-4c5a-81c8-0c637654f015.png%22%2C%22taskId%22%3A%22ufa4c8377-de75-46a7-98fe-4d64ec52816%22%2C%22clientId%22%3A%22u580c557c-2f85-4%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A596%2C%22height%22%3A29%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A25844%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A596%2C%22originHeight%22%3A29%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22YARN%20WORKSPACE%20%40RENBUZHUDEK%2FJSONP%20%40RENBUZHUDEK%2FQS%400.0%20ADD%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A22.048273%2C%22y%22%3A1.8689677%2C%22width%22%3A235.35107700000003%2C%22height%22%3A16.767566300000002%2C%22text%22%3A%22YARN%20WORKSPACE%20%40RENBUZHUDEK%2FJSONP%22%7D%2C%7B%22x%22%3A299.30786%2C%22y%22%3A3.4998016%2C%22width%22%3A148.6293%2C%22height%22%3A13.144170400000002%2C%22text%22%3A%22%40RENBUZHUDEK%2FQS%400.0%22%7D%2C%7B%22x%22%3A270.34964%2C%22y%22%3A4.383887%2C%22width%22%3A21.808439999999962%2C%22height%22%3A12.040618%2C%22text%22%3A%22ADD%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23353930%22%2C%22id%22%3A%22ue5b29296%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><ul list=\"u8fd418ba\" start=\"2\"><li fid=\"u4cc3a974\" data-lake-id=\"ua200c2d3\" id=\"ua200c2d3\"><code data-lake-id=\"ubb3a13b2\" id=\"ubb3a13b2\"><span data-lake-id=\"ufb511381\" id=\"ufb511381\">yarn workspaces run</span></code><span data-lake-id=\"u7b21576a\" id=\"u7b21576a\"> 为所有工作区运行命令(lerna run 命令有同样功能),如：<br /></span><span data-lake-id=\"uc944cfa8\" id=\"uc944cfa8\">将会在每个工作区运行 test 脚本</span></li></ul><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22shell%22%2C%22code%22%3A%22yarn%20workspaces%20run%20test%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22I6pPr%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><ul list=\"u8fd418ba\" start=\"3\"><li fid=\"u4cc3a974\" data-lake-id=\"u428e35b2\" id=\"u428e35b2\"><code data-lake-id=\"u1b6e4df6\" id=\"u1b6e4df6\"><span data-lake-id=\"u539a5528\" id=\"u539a5528\">yarn workspaces info [--json]</span></code><span data-lake-id=\"u9f757b47\" id=\"u9f757b47\"> 显示当前项目的工作区依赖关系</span></li></ul><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22shell%22%2C%22code%22%3A%22yarn%20workspaces%20info%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22DtSkk%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u294e7937\" id=\"u294e7937\"><span data-lake-id=\"u7b8fe160\" id=\"u7b8fe160\">vue-next 项目下打印结果： 显示了工作区的相互依赖关系</span></p><p data-lake-id=\"u33893eb6\" id=\"u33893eb6\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2022%2Fpng%2F732231%2F1647255846474-df3be7a3-9fb5-45f9-b02a-32eb642547e5.png%22%2C%22taskId%22%3A%22u64cf2933-656f-4550-973b-98760534c9b%22%2C%22clientId%22%3A%22u580c557c-2f85-4%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A317%2C%22height%22%3A482%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A198910%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A317%2C%22originHeight%22%3A482%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22YARN%20WORKSPACES%20INFO%20YARN%20WORKSPACES%20V1.22.4%20%40VUE%2FCOMPILER-CORE%5C%22%3A%20%5C%22LOCATION%5C%22%3A%5C%22PACKAGES%2FCOMPILER-CORE%5C%22%2C%20WORKSPACEDEPENDENCIES%5C%22%3A%5B%20%40VUE%2FSHARED%20%5C%22MISMATCHEDWORKSPACEDEPENDENCIES%5C%22%3A%5B%5D%20%40VUE%2FCOMPILER-DOM'%3A%20%5C%22LOCATION%5C%22%3A%5C%22PACKAGES%2FCOMPILER-DOM%5C%22%2C%20%5C%22WORKSPACEDENDENCIES%5C%22%3A%20%40VUE%2FSHARED%5C%22.%20%40VUE%2FCOMPILER-CORE%20%5C%22MISMATCHEDWORKSPACEDEPENDENCIES%5C%22%3A%5B%5D%20%40VUE%2FCOMPILER-SFC%3A%20%5C%22LOCATION%5C%22%3A%5C%22PACKAGES%2FCOMPILER-SFC%5C%22%2C%20WORKSPACEDEPENDENCIES%5C%22%3A%20%40VUE%2FCOMPILER-CORE%5C%22%2C%20%40VUE%2FCOMPILER-DOM%20%40VUE%2FCOMPILER-SSR%5C%22%2C%20%40VUE%2FSHARED%5C%22%20%5C%22MISMATCHEDWORKSPACEDEPENDENCIES%5C%22%3A%5B%5D%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A18.822046%2C%22y%22%3A11.845822%2C%22width%22%3A144.430864%2C%22height%22%3A12.454143%2C%22text%22%3A%22YARN%20WORKSPACES%20INFO%22%7D%2C%7B%22x%22%3A6.7610526%2C%22y%22%3A28.500738%2C%22width%22%3A163.7546774%2C%22height%22%3A13.638442000000005%2C%22text%22%3A%22YARN%20WORKSPACES%20V1.22.4%22%7D%2C%7B%22x%22%3A23.6288%2C%22y%22%3A61.311787%2C%22width%22%3A154.25707999999997%2C%22height%22%3A14.811592999999995%2C%22text%22%3A%22%40VUE%2FCOMPILER-CORE%5C%22%3A%22%7D%2C%7B%22x%22%3A39.4872%2C%22y%22%3A76.6492%2C%22width%22%3A255.44000000000003%2C%22height%22%3A16.861460000000008%2C%22text%22%3A%22%5C%22LOCATION%5C%22%3A%5C%22PACKAGES%2FCOMPILER-CORE%5C%22%2C%22%7D%2C%7B%22x%22%3A40.312023%2C%22y%22%3A96.69687%2C%22width%22%3A178.08246699999998%2C%22height%22%3A13.41033999999999%2C%22text%22%3A%22WORKSPACEDEPENDENCIES%5C%22%3A%5B%22%7D%2C%7B%22x%22%3A55.345367%2C%22y%22%3A113.674736%2C%22width%22%3A84.12738299999998%2C%22height%22%3A13.021194000000008%2C%22text%22%3A%22%40VUE%2FSHARED%22%7D%2C%7B%22x%22%3A39.399403%2C%22y%22%3A141.80817%2C%22width%22%3A255.574997%2C%22height%22%3A22.426530000000014%2C%22text%22%3A%22%5C%22MISMATCHEDWORKSPACEDEPENDENCIES%5C%22%3A%5B%5D%22%7D%2C%7B%22x%22%3A23.91273%2C%22y%22%3A179.47986%2C%22width%22%3A157.02929%2C%22height%22%3A16.298090000000002%2C%22text%22%3A%22%40VUE%2FCOMPILER-DOM'%3A%22%7D%2C%7B%22x%22%3A39.94292%2C%22y%22%3A196.87782%2C%22width%22%3A247.17600999999996%2C%22height%22%3A16.822069999999997%2C%22text%22%3A%22%5C%22LOCATION%5C%22%3A%5C%22PACKAGES%2FCOMPILER-DOM%5C%22%2C%22%7D%2C%7B%22x%22%3A41.17494%2C%22y%22%3A214.06207%2C%22width%22%3A175.48224000000002%2C%22height%22%3A16.267629999999997%2C%22text%22%3A%22%5C%22WORKSPACEDENDENCIES%5C%22%3A%22%7D%2C%7B%22x%22%3A51.655003%2C%22y%22%3A232.66084%2C%22width%22%3A92.715057%2C%22height%22%3A12.69450999999998%2C%22text%22%3A%22%40VUE%2FSHARED%5C%22.%22%7D%2C%7B%22x%22%3A50.92306%2C%22y%22%3A248.6945%2C%22width%22%3A137.00576%2C%22height%22%3A14.112419999999986%2C%22text%22%3A%22%40VUE%2FCOMPILER-CORE%22%7D%2C%7B%22x%22%3A39.005604%2C%22y%22%3A279.37607%2C%22width%22%3A256.854046%2C%22height%22%3A18.326929999999948%2C%22text%22%3A%22%5C%22MISMATCHEDWORKSPACEDEPENDENCIES%5C%22%3A%5B%5D%22%7D%2C%7B%22x%22%3A19.824451%2C%22y%22%3A307.66556%2C%22width%22%3A159.662849%2C%22height%22%3A32.162559999999985%2C%22text%22%3A%22%40VUE%2FCOMPILER-SFC%3A%22%7D%2C%7B%22x%22%3A38.912434%2C%22y%22%3A333.72083%2C%22width%22%3A244.61774599999998%2C%22height%22%3A13.239530000000002%2C%22text%22%3A%22%5C%22LOCATION%5C%22%3A%5C%22PACKAGES%2FCOMPILER-SFC%5C%22%2C%22%7D%2C%7B%22x%22%3A40.076504%2C%22y%22%3A351.14172%2C%22width%22%3A172.744256%2C%22height%22%3A13.621429999999975%2C%22text%22%3A%22WORKSPACEDEPENDENCIES%5C%22%3A%22%7D%2C%7B%22x%22%3A53.146526%2C%22y%22%3A368.5211%2C%22width%22%3A139.751304%2C%22height%22%3A13.263080000000002%2C%22text%22%3A%22%40VUE%2FCOMPILER-CORE%5C%22%2C%22%7D%2C%7B%22x%22%3A56.14828%2C%22y%22%3A385.48093%2C%22width%22%3A124.34397999999999%2C%22height%22%3A13.248040000000003%2C%22text%22%3A%22%40VUE%2FCOMPILER-DOM%22%7D%2C%7B%22x%22%3A53.907513%2C%22y%22%3A401.85898%2C%22width%22%3A136.050247%2C%22height%22%3A13.68667000000005%2C%22text%22%3A%22%40VUE%2FCOMPILER-SSR%5C%22%2C%22%7D%2C%7B%22x%22%3A51.9593%2C%22y%22%3A419.47006%2C%22width%22%3A86.85119999999999%2C%22height%22%3A13.144839999999988%2C%22text%22%3A%22%40VUE%2FSHARED%5C%22%22%7D%2C%7B%22x%22%3A41.157543%2C%22y%22%3A451.38425%2C%22width%22%3A251.26355700000002%2C%22height%22%3A15.82071000000002%2C%22text%22%3A%22%5C%22MISMATCHEDWORKSPACEDEPENDENCIES%5C%22%3A%5B%5D%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%2338392c%22%2C%22id%22%3A%22uc1ef6287%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><span data-lake-id=\"u9de27395\" id=\"u9de27395\"><br /><br /></span></p><h3 data-lake-id=\"HfS6H\" id=\"HfS6H\"><span data-lake-id=\"u62d6f2b9\" id=\"u62d6f2b9\">lerna 常用 commands</span></h3><ul list=\"udabad0b4\"><li fid=\"u6d80e49d\" data-lake-id=\"u56228229\" id=\"u56228229\"><span data-lake-id=\"u3b283583\" id=\"u3b283583\">lerna init 初始化 lerna 管理项目，生成如下目录：</span></li></ul><blockquote data-lake-id=\"u6ba74114\" id=\"u6ba74114\" class=\"lake-alert lake-alert-info\"><p data-lake-id=\"u4d2eb544\" id=\"u4d2eb544\"><span data-lake-id=\"u274ef083\" id=\"u274ef083\">packages/<br /></span><span data-lake-id=\"u980ed34a\" id=\"u980ed34a\">package.json<br /></span><span data-lake-id=\"u9a2ffff8\" id=\"u9a2ffff8\">lerna.json</span></p></blockquote><ul list=\"ub12dba9b\"><li fid=\"ub41c1773\" data-lake-id=\"ud26aea90\" id=\"ud26aea90\"><span data-lake-id=\"ub723ad3a\" id=\"ub723ad3a\">lerna bootstrap --hoist 为所有项目安装依赖，并链接所有依赖包，类似于 npm i<br /></span><span data-lake-id=\"ua9f1bf2c\" id=\"ua9f1bf2c\">使用--hoist 选项后，所有公共的依赖都只会安装在根目录的 node_modules 目录中去,而不会在每个包目录下的 node_modules 中都保留各自的依赖包。</span></li><li fid=\"ub41c1773\" data-lake-id=\"ua7e80eb9\" id=\"ua7e80eb9\"><span data-lake-id=\"u5988f58e\" id=\"u5988f58e\">lerna clean 删除所有项目的 node_modules 目录</span></li><li fid=\"ub41c1773\" data-lake-id=\"ua163dc27\" id=\"ua163dc27\"><span data-lake-id=\"u83063e1f\" id=\"u83063e1f\">lerna run [script] 默认为所有的项目运行 npm run [script]脚本，可以指定项目；</span></li><li fid=\"ub41c1773\" data-lake-id=\"u2b81b98e\" id=\"u2b81b98e\"><span data-lake-id=\"u150e4e6a\" id=\"u150e4e6a\">lerna changed 列出下次发版 lerna publish 要更新的包。</span></li><li fid=\"ub41c1773\" data-lake-id=\"u1f2f485d\" id=\"u1f2f485d\"><span data-lake-id=\"u704cecb5\" id=\"u704cecb5\">lerna publish 版本发布，按提示选择版本号(递增，或自定义)，将会执行以下步骤：</span></li></ul><ul list=\"ub12dba9b\" data-lake-indent=\"1\"><li fid=\"ub41c1773\" data-lake-id=\"u215f4efe\" id=\"u215f4efe\"><span data-lake-id=\"uf479d210\" id=\"uf479d210\">运行 lerna updated 来决定哪一个包需要被 publish</span></li><li fid=\"ub41c1773\" data-lake-id=\"u75e46789\" id=\"u75e46789\"><span data-lake-id=\"uc96cb637\" id=\"uc96cb637\">如果有必要，将会更新 lerna.json 中的 version</span></li><li fid=\"ub41c1773\" data-lake-id=\"u863db64c\" id=\"u863db64c\"><span data-lake-id=\"u3827a0ac\" id=\"u3827a0ac\">将所有更新过的的包中的 package.json 的 version 字段更新</span></li><li fid=\"ub41c1773\" data-lake-id=\"u06710d39\" id=\"u06710d39\"><span data-lake-id=\"u98278d93\" id=\"u98278d93\">将所有更新过的包中的依赖更新</span></li><li fid=\"ub41c1773\" data-lake-id=\"udd1363f7\" id=\"udd1363f7\"><span data-lake-id=\"uc53fc03b\" id=\"uc53fc03b\">为新版本创建一个 git commit 或 tag</span></li><li fid=\"ub41c1773\" data-lake-id=\"u7e972dc0\" id=\"u7e972dc0\"><span data-lake-id=\"u37dab2ae\" id=\"u37dab2ae\">将包 publish 到 npm 上；注意要先用 npm adduser 登录 npm 源，否则会失败；</span></li></ul><ul list=\"ub12dba9b\" start=\"6\"><li fid=\"ub41c1773\" data-lake-id=\"ub1724b6c\" id=\"ub1724b6c\"><span data-lake-id=\"ub188aaa6\" id=\"ub188aaa6\">lerna add [@version] [--dev] [--exact] [--peer] ：可以指定为某一个或所有的包安装依赖，依赖可以是外部(npm i 安装的)也可以是内部依赖(packages/下的包，会创建符号链接)，example：</span></li></ul><ul list=\"ub12dba9b\" data-lake-indent=\"1\"><li fid=\"ub41c1773\" data-lake-id=\"ubb0369d9\" id=\"ubb0369d9\"><span data-lake-id=\"u89c7a3ea\" id=\"u89c7a3ea\">lerna add babel , 该命令会在 package-1 和 package-2 下安装 babel</span></li><li fid=\"ub41c1773\" data-lake-id=\"u62a42391\" id=\"u62a42391\"><span data-lake-id=\"u093d2aee\" id=\"u093d2aee\">lerna add react --scope=package-1 ,该命令会在 package-1 下安装 react</span></li><li fid=\"ub41c1773\" data-lake-id=\"u746ec85d\" id=\"u746ec85d\"><span data-lake-id=\"ua4037e4e\" id=\"ua4037e4e\">lerna add package-2 --scope=package-1，该命令会在 package-1 下安装 package-2</span></li></ul><ul list=\"ub12dba9b\" start=\"7\"><li fid=\"ub41c1773\" data-lake-id=\"ucbfb9f1d\" id=\"ucbfb9f1d\"><span data-lake-id=\"ub4f28339\" id=\"ub4f28339\">lerna create [loc] 创建一个 lerna 管理的包</span></li><li fid=\"ub41c1773\" data-lake-id=\"ua7b98b64\" id=\"ua7b98b64\"><span data-lake-id=\"u803da5ed\" id=\"u803da5ed\">lerna ls 控制台打印 packages 下的包名</span></li><li fid=\"ub41c1773\" data-lake-id=\"u506742c9\" id=\"u506742c9\"><span data-lake-id=\"ud060d499\" id=\"ud060d499\">lerna link 类似 npm link,创建软连接 ,但是实测怎么不起作用？(lerna version:v3.22.0)</span></li></ul><h3 data-lake-id=\"a8Wgt\" id=\"a8Wgt\"><span data-lake-id=\"u1e735eb1\" id=\"u1e735eb1\">lerna 工作的两种模式</span></h3><ul list=\"ub79c774e\"><li fid=\"ucdea7658\" data-lake-id=\"u59d83329\" id=\"u59d83329\"><span data-lake-id=\"u7c8f399b\" id=\"u7c8f399b\">Fixed/Locked mode (default)</span></li></ul><p data-lake-id=\"u0d38664a\" id=\"u0d38664a\"><span data-lake-id=\"ue5815743\" id=\"ue5815743\">vue,babel 都是用这种，在 publish 的时候,会在 lerna.json 文件里面&quot;version&quot;: &quot;0.1.5&quot;,,依据这个号，进行增加，只选择一次，其他有改动的包自动更新版本号。</span></p><ul list=\"ub79c774e\" start=\"2\"><li fid=\"ucdea7658\" data-lake-id=\"uf5bf5bd7\" id=\"uf5bf5bd7\"><span data-lake-id=\"u583dc9d4\" id=\"u583dc9d4\">Independent mode</span></li></ul><p data-lake-id=\"uddf7dc3e\" id=\"uddf7dc3e\"><span data-lake-id=\"u50a04b51\" id=\"u50a04b51\">lerna init --independent 初始化项目,lerna.json 文件里面&quot;version&quot;: &quot;independent&quot;,<br /></span><span data-lake-id=\"ubf539670\" id=\"ubf539670\">每次 publish 时，都将得到一个提示符，提示每个已更改的包，以指定是补丁、次要更改、主要更改还是自定义更改。</span></p><p data-lake-id=\"u2a71352b\" id=\"u2a71352b\"><br></p><h3 data-lake-id=\"veIMH\" id=\"veIMH\"><span data-lake-id=\"u4f5ff72c\" id=\"u4f5ff72c\">启用 yarn 的 workspaces 模式</span></h3><blockquote data-lake-id=\"u6caeb9fc\" id=\"u6caeb9fc\" class=\"lake-alert lake-alert-info\"><p data-lake-id=\"u1ea18667\" id=\"u1ea18667\"><span data-lake-id=\"ucb06c311\" id=\"ucb06c311\">默认是 npm, 而且每个子 package 都有自己的 node_modules，通过这样设置后，只有顶层有一个 node_modules</span></p></blockquote><p data-lake-id=\"ua3c537da\" id=\"ua3c537da\"><br></p><ul list=\"u69b8bb52\"><li fid=\"ue945740b\" data-lake-id=\"u897cacb3\" id=\"u897cacb3\"><span data-lake-id=\"u30ab696c\" id=\"u30ab696c\">修改顶层 package.json and lerna.json</span></li></ul><p data-lake-id=\"uf0b4611e\" id=\"uf0b4611e\"><span data-lake-id=\"u28aebf1e\" id=\"u28aebf1e\">​</span><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22json%22%2C%22code%22%3A%22package.json%20%E6%96%87%E4%BB%B6%E5%8A%A0%E5%85%A5%5Cn%5Cn%5C%22private%5C%22%3A%20true%2C%5Cn%5C%22workspaces%5C%22%3A%20%5B%5Cn%5C%22packages%2F*%5C%22%5Cn%5D%2C%5Cn%5Cnlerna.json%20%E6%96%87%E4%BB%B6%E5%8A%A0%E5%85%A5%5Cn%5Cn%5C%22useWorkspaces%5C%22%3A%20true%2C%5Cn%5C%22npmClient%5C%22%3A%20%5C%22yarn%5C%22%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22Pyi62%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h3 data-lake-id=\"Eozdy\" id=\"Eozdy\"><span data-lake-id=\"u293de835\" id=\"u293de835\">说了那么多，接下来实战演示一把</span></h3><p data-lake-id=\"ue9008c1d\" id=\"ue9008c1d\"><br></p><h4 data-lake-id=\"akEJz\" id=\"akEJz\"><span data-lake-id=\"uec86f483\" id=\"uec86f483\">初始化项目</span></h4><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22shell%22%2C%22code%22%3A%22npm%20intall%20lerna%20-g%5Cnmkdir%20lernaProject%20%26%26%20cd%20%24_%5Cngit%20init%5Cnlerna%20init%5Cngit%20add%20.%5Cngit%20commit%20-m%20%5C%22Initial%20Commit%5C%22%5Cngit%20remote%20add%20origin%20http%3A%2F%2Fgithub.com%2Frenbuzhudek%2FlernaProject%20.git%5Cngit%20push%20-u%20origin%20master%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22fnnNb%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"uaad099c8\" id=\"uaad099c8\"><span data-lake-id=\"uabf91375\" id=\"uabf91375\">上述命令执行完成后，生成如下目录：</span></p><blockquote data-lake-id=\"ue29ea4ae\" id=\"ue29ea4ae\" class=\"lake-alert lake-alert-info\"><p data-lake-id=\"ud032e8f8\" id=\"ud032e8f8\"><span data-lake-id=\"ucfa7bf5a\" id=\"ucfa7bf5a\">packages/<br /></span><span data-lake-id=\"ue7273fe9\" id=\"ue7273fe9\">package.json<br /></span><span data-lake-id=\"ude0227aa\" id=\"ude0227aa\">lerna.json</span></p></blockquote><h4 data-lake-id=\"TnaW9\" id=\"TnaW9\"><span data-lake-id=\"uf14dcbdd\" id=\"uf14dcbdd\">新建两个模块</span></h4><p data-lake-id=\"u95ccd0ba\" id=\"u95ccd0ba\"><span data-lake-id=\"ubbfd85d9\" id=\"ubbfd85d9\">为了演示方便，我们新建两个模块， moduleA 和 moduleB， 并让 moduleA 依赖 moduleB：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22shell%22%2C%22code%22%3A%22lerna%20create%20module-a%5Cnlerna%20create%20module-b%5Cn%23%20%E5%B0%86%E6%9C%AC%E5%9C%B0%E5%8C%85%E9%93%BE%E6%8E%A5%E8%B5%B7%E6%9D%A5%EF%BC%8C%E5%8F%AF%E4%BB%A5%E7%9B%B4%E6%8E%A5%E5%BC%95%E7%94%A8%5Cnlerna%20add%20module-b%20--scope%3Dmodule-a%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22EpstM%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u1046831c\" id=\"u1046831c\"><span data-lake-id=\"u05d3d6ea\" id=\"u05d3d6ea\">修改 module-b 的入口文件：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22javascript%22%2C%22code%22%3A%22module.exports%20%3D%20moduleB%3B%5Cnfunction%20moduleB()%20%7B%5Cn%20%20%20%20return%20%5C%22hello%20world%5C%22%3B%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22fztRG%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"uf1c186ec\" id=\"uf1c186ec\"><span data-lake-id=\"u7a3cadb7\" id=\"u7a3cadb7\">修改 module-a 的入口文件:</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22javascript%22%2C%22code%22%3A%22const%20moduleB%20%3D%20require('module-b')%3B%5Cnconst%20moduleA%20%3D%20function()%20%7B%5Cn%20%20%20%20console.log(moduleB())%3B%5Cn%7D%5Cnmodule.exports%20%3D%20moduleA%3B%5CnmoduleA()%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22z9FGN%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u776e4feb\" id=\"u776e4feb\"><span data-lake-id=\"u3ce9a11c\" id=\"u3ce9a11c\">node 调用模块 a：</span></p><p data-lake-id=\"udd8ff447\" id=\"udd8ff447\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2022%2Fpng%2F732231%2F1647256446014-4d82c484-8a39-4d00-a65d-7e963e159ffc.png%22%2C%22taskId%22%3A%22u362b1e45-6f4d-4bcd-bb40-f39873814da%22%2C%22clientId%22%3A%22u580c557c-2f85-4%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A518%2C%22height%22%3A79%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A38386%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A518%2C%22originHeight%22%3A79%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%220266000454%40G04062719830492%20MINGW32%20%2FF%2FOWERPROJECT%2FLERNAPROJECT%20(MASTER)%20%24%20NODE%20PACKAGES%2FMODULE-A%20HELLO%20WORLD%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A14.458324%2C%22y%22%3A19.364151%2C%22width%22%3A496.677906%2C%22height%22%3A13.363697000000002%2C%22text%22%3A%220266000454%40G04062719830492%20MINGW32%20%2FF%2FOWERPROJECT%2FLERNAPROJECT%20(MASTER)%22%7D%2C%7B%22x%22%3A14.919667%2C%22y%22%3A35.720245%2C%22width%22%3A170.269863%2C%22height%22%3A14.522015000000003%2C%22text%22%3A%22%24%20NODE%20PACKAGES%2FMODULE-A%22%7D%2C%7B%22x%22%3A14.495309%2C%22y%22%3A52.995743%2C%22width%22%3A79.35179099999999%2C%22height%22%3A12.725697000000004%2C%22text%22%3A%22HELLO%20WORLD%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%2341401b%22%2C%22id%22%3A%22u7317fe0e%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><p data-lake-id=\"u1755ab3b\" id=\"u1755ab3b\"><br></p><h4 data-lake-id=\"gU3L3\" id=\"gU3L3\"><span data-lake-id=\"ue9a50717\" id=\"ue9a50717\">发布新模块</span></h4><p data-lake-id=\"u57e71fae\" id=\"u57e71fae\"><span data-lake-id=\"u65d4cdf2\" id=\"u65d4cdf2\">完成修改后，git 提交完代码，我们就可以直接发布新的模块,记得要先登录 npm 源<br /></span><span data-lake-id=\"u98e8b053\" id=\"u98e8b053\">然后运行下面命令，根据提示输入版本号等，lerna 会自动帮我们给包加上 tag,并上传到对应的仓库中去。</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22shell%22%2C%22code%22%3A%22lerna%20publish%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22jhjIa%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h3 data-lake-id=\"sSAun\" id=\"sSAun\"><span data-lake-id=\"u52f54cb5\" id=\"u52f54cb5\">依赖包的值可以提供一个 url</span></h3><blockquote data-lake-id=\"u77bfe018\" id=\"u77bfe018\" class=\"lake-alert lake-alert-info\"><p data-lake-id=\"ue8ebf764\" id=\"ue8ebf764\"><span data-lake-id=\"u7c0c7ae7\" id=\"u7c0c7ae7\">会下载到 node_modules 里面<br /></span><span data-lake-id=\"uc429d4a9\" id=\"uc429d4a9\">作用：内网部署 npm 镜像时，可用于下载内部包</span></p></blockquote><p data-lake-id=\"uca8b27f1\" id=\"uca8b27f1\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2022%2Fpng%2F732231%2F1647256512379-41d70f43-033b-47d3-ac77-610f1705a264.png%22%2C%22taskId%22%3A%22u2298ec48-fc9d-4851-9024-16874430806%22%2C%22clientId%22%3A%22u580c557c-2f85-4%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A531%2C%22height%22%3A251%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A121803%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A531%2C%22originHeight%22%3A251%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%5C%22DEPENDENCIES%20ASYNC%5C%22%3A%20%5C%22C1.0.0-RC.2%5C%22%20%5C%22CHEERIO%5C%22%20CO%5C%22%3A%5C%22A4.6.0%5C%22%20%5C%22%3A%5C%2201.4.5%5C%22%2C%20COOKIE-PARSER%5C%22%3A%204.16.4%5C%22%2C%20EXPRESS%202.88.2%5C%22%20REQUEST%5C%22%20%5C%2224.0.0%5C%22.%20SUPERAGENT%5C%22%3A%20%5C%22.2.1.2%5C%22.%20%5C%22THUNKIFY%20%5C%22A3.4.3%5C%22%20WEB-PUSH%202%20HTTPS%3A%2F%2FGITHUB.COM%2FRENBUZHUDEK%2FVUE-DEMO.GIT%5C%22%20'VUE-DEMO%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A46.060772%2C%22y%22%3A4.1745963%2C%22width%22%3A95.16284800000001%2C%22height%22%3A16.1842237%2C%22text%22%3A%22%5C%22DEPENDENCIES%22%7D%2C%7B%22x%22%3A64.194405%2C%22y%22%3A25.201643%2C%22width%22%3A53.401534999999996%2C%22height%22%3A12.366927%2C%22text%22%3A%22ASYNC%5C%22%3A%22%7D%2C%7B%22x%22%3A141.54922%2C%22y%22%3A42.686604%2C%22width%22%3A106.39468000000002%2C%22height%22%3A14.754210999999998%2C%22text%22%3A%22%5C%22C1.0.0-RC.2%5C%22%22%7D%2C%7B%22x%22%3A62.900967%2C%22y%22%3A43.841015%2C%22width%22%3A61.725433%2C%22height%22%3A13.433625%2C%22text%22%3A%22%5C%22CHEERIO%5C%22%22%7D%2C%7B%22x%22%3A67.20821%2C%22y%22%3A60.48001%2C%22width%22%3A99.01672%2C%22height%22%3A14.184059999999995%2C%22text%22%3A%22CO%5C%22%3A%5C%22A4.6.0%5C%22%22%7D%2C%7B%22x%22%3A168.06323%2C%22y%22%3A79.223694%2C%22width%22%3A87.6635%2C%22height%22%3A16.793886%2C%22text%22%3A%22%5C%22%3A%5C%2201.4.5%5C%22%2C%22%7D%2C%7B%22x%22%3A64.43172%2C%22y%22%3A82.87391%2C%22width%22%3A114.62488%2C%22height%22%3A11.954830000000001%2C%22text%22%3A%22COOKIE-PARSER%5C%22%3A%22%7D%2C%7B%22x%22%3A156.18132%2C%22y%22%3A100.555885%2C%22width%22%3A59.82825%2C%22height%22%3A13.849834999999999%2C%22text%22%3A%224.16.4%5C%22%2C%22%7D%2C%7B%22x%22%3A63.622574%2C%22y%22%3A102.091125%2C%22width%22%3A54.160976000000005%2C%22height%22%3A12.232484999999997%2C%22text%22%3A%22EXPRESS%22%7D%2C%7B%22x%22%3A152.55157%2C%22y%22%3A119.75204%2C%22width%22%3A60.12017%2C%22height%22%3A13.169479999999993%2C%22text%22%3A%222.88.2%5C%22%22%7D%2C%7B%22x%22%3A62.947784%2C%22y%22%3A120.66303%2C%22width%22%3A63.831115999999994%2C%22height%22%3A12.530829999999995%2C%22text%22%3A%22REQUEST%5C%22%22%7D%2C%7B%22x%22%3A166.49045%2C%22y%22%3A138.07733%2C%22width%22%3A66.31818999999999%2C%22height%22%3A13.98979%2C%22text%22%3A%22%5C%2224.0.0%5C%22.%22%7D%2C%7B%22x%22%3A65.808395%2C%22y%22%3A139.79036%2C%22width%22%3A89.58984499999998%2C%22height%22%3A12.353319999999997%2C%22text%22%3A%22SUPERAGENT%5C%22%3A%22%7D%2C%7B%22x%22%3A149.25418%2C%22y%22%3A154.8521%2C%22width%22%3A70.95688000000001%2C%22height%22%3A16.513559999999984%2C%22text%22%3A%22%5C%22.2.1.2%5C%22.%22%7D%2C%7B%22x%22%3A62.833607%2C%22y%22%3A157.16104%2C%22width%22%3A68.13592299999999%2C%22height%22%3A13.50524999999999%2C%22text%22%3A%22%5C%22THUNKIFY%22%7D%2C%7B%22x%22%3A146.91838%2C%22y%22%3A174.28351%2C%22width%22%3A71.40176%2C%22height%22%3A15.856809999999996%2C%22text%22%3A%22%5C%22A3.4.3%5C%22%22%7D%2C%7B%22x%22%3A64.315895%2C%22y%22%3A178.00038%2C%22width%22%3A66.38980500000001%2C%22height%22%3A12.072509999999994%2C%22text%22%3A%22WEB-PUSH%22%7D%2C%7B%22x%22%3A146.29305%2C%22y%22%3A196.70374%2C%22width%22%3A22.167429999999996%2C%22height%22%3A13.528639999999996%2C%22text%22%3A%222%22%7D%2C%7B%22x%22%3A150.78784%2C%22y%22%3A213.31145%2C%22width%22%3A346.88193%2C%22height%22%3A16.673849999999987%2C%22text%22%3A%22HTTPS%3A%2F%2FGITHUB.COM%2FRENBUZHUDEK%2FVUE-DEMO.GIT%5C%22%22%7D%2C%7B%22x%22%3A64.01444%2C%22y%22%3A216.05737%2C%22width%22%3A63.68047%2C%22height%22%3A11.908739999999995%2C%22text%22%3A%22'VUE-DEMO%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23202219%22%2C%22id%22%3A%22u9e768f94%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p>",
  "public": 0,
  "status": 1,
  "likes_count": 0,
  "read_count": 0,
  "hits": 0,
  "comments_count": 0,
  "word_count": 1518,
  "created_at": "2022-03-14T10:50:29.000Z",
  "updated_at": "2023-11-11T18:12:32.000Z",
  "content_updated_at": "2023-11-11T18:12:31.000Z",
  "published_at": "2023-11-11T18:12:31.000Z",
  "first_published_at": "2022-03-14T10:52:08.000Z",
  "book": {
    "id": 24866785,
    "type": "Book",
    "slug": "uv8hkw",
    "name": "Git 知识库",
    "user_id": 732231,
    "description": "Git 常用命令备忘录",
    "toc_yml": "- type: META\n  count: 8\n  display_level: 1\n  tail_type: UPDATED_AT\n  base_version_id: 230465622\n  published: true\n  max_level: 1\n  last_updated_at: 2022-08-03T07:40:36.780Z\n  version_id: 230469205\n- type: DOC\n  title: 常用 git 命令\n  uuid: P_1gejxGimmvpzbc\n  url: bis7pd\n  prev_uuid: ''\n  sibling_uuid: cdTHYIpRN54mvm0Q\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 67271247\n  level: 0\n  id: 67271247\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: merge request 规范\n  uuid: cdTHYIpRN54mvm0Q\n  url: ghu8c2\n  prev_uuid: P_1gejxGimmvpzbc\n  sibling_uuid: A9Eck7FJaS4IvBiS\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 88410893\n  level: 0\n  id: 88410893\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: code review 规范\n  uuid: A9Eck7FJaS4IvBiS\n  url: chwoy6\n  prev_uuid: cdTHYIpRN54mvm0Q\n  sibling_uuid: EA31UHlTK46AMZle\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 88411780\n  level: 0\n  id: 88411780\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: commit message 代码提交信息规范\n  uuid: EA31UHlTK46AMZle\n  url: th227e\n  prev_uuid: A9Eck7FJaS4IvBiS\n  sibling_uuid: wJK9Heyb7x016eyJ\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 88403770\n  level: 0\n  id: 88403770\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: commit history 代码提交历史规范\n  uuid: wJK9Heyb7x016eyJ\n  url: exfxs9\n  prev_uuid: EA31UHlTK46AMZle\n  sibling_uuid: 4H-uh42j90iXCx8m\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 88405135\n  level: 0\n  id: 88405135\n  open_window: 0\n  visible: 1\n- type: TITLE\n  title: Monorepo\n  uuid: 4H-uh42j90iXCx8m\n  url: ''\n  prev_uuid: wJK9Heyb7x016eyJ\n  sibling_uuid: ''\n  child_uuid: DiZpG7pmb0K3WigO\n  parent_uuid: ''\n  doc_id: ''\n  level: 0\n  id: ''\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 大型项目管理 - Monorepo\n  uuid: DiZpG7pmb0K3WigO\n  url: vimeff\n  prev_uuid: 4H-uh42j90iXCx8m\n  sibling_uuid: FwK-DzXGBSwMWcEt\n  child_uuid: ''\n  parent_uuid: 4H-uh42j90iXCx8m\n  doc_id: 69427440\n  level: 1\n  id: 69427440\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 项目级 monorepo 策略最佳实践\n  uuid: FwK-DzXGBSwMWcEt\n  url: xt5sda\n  prev_uuid: DiZpG7pmb0K3WigO\n  sibling_uuid: ''\n  child_uuid: ''\n  parent_uuid: 4H-uh42j90iXCx8m\n  doc_id: 69430861\n  level: 1\n  id: 69430861\n  open_window: 0\n  visible: 1\n",
    "creator_id": 732231,
    "public": 0,
    "items_count": 7,
    "likes_count": 0,
    "watches_count": 1,
    "content_updated_at": "2023-11-11T18:12:42.469Z",
    "created_at": "2022-02-22T07:00:14.000Z",
    "updated_at": "2023-11-11T18:12:42.000Z",
    "user": {
      "id": 732231,
      "type": "User",
      "login": "wcywxq",
      "name": "magic",
      "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/732231/1606968271774-avatar/886ad88b-d2cc-4c9e-a674-f70eb51a679c.png",
      "books_count": 21,
      "public_books_count": 0,
      "followers_count": 0,
      "following_count": 0,
      "public": 1,
      "description": null,
      "created_at": "2020-01-08T14:21:31.000Z",
      "updated_at": "2023-11-23T19:11:28.000Z",
      "work_id": "",
      "_serializer": "v2.user"
    },
    "namespace": "wcywxq/uv8hkw",
    "_serializer": "v2.book"
  },
  "user": {
    "id": 732231,
    "type": "User",
    "login": "wcywxq",
    "name": "magic",
    "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/732231/1606968271774-avatar/886ad88b-d2cc-4c9e-a674-f70eb51a679c.png",
    "books_count": 21,
    "public_books_count": 0,
    "followers_count": 0,
    "following_count": 0,
    "public": 1,
    "description": null,
    "created_at": "2020-01-08T14:21:31.000Z",
    "updated_at": "2023-11-23T19:11:28.000Z",
    "work_id": "",
    "_serializer": "v2.user"
  },
  "tags": [],
  "latest_version_id": 2109667494,
  "creator": {
    "id": 732231,
    "type": "User",
    "login": "wcywxq",
    "name": "magic",
    "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/732231/1606968271774-avatar/886ad88b-d2cc-4c9e-a674-f70eb51a679c.png",
    "books_count": 21,
    "public_books_count": 0,
    "followers_count": 0,
    "following_count": 0,
    "public": 1,
    "description": null,
    "created_at": "2020-01-08T14:21:31.000Z",
    "updated_at": "2023-11-23T19:11:28.000Z",
    "work_id": "",
    "_serializer": "v2.user"
  },
  "_serializer": "v2.doc_detail"
}