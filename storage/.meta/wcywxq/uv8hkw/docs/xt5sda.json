{
  "id": 69430861,
  "slug": "xt5sda",
  "title": "项目级 monorepo 策略最佳实践",
  "description": "0. 🧉 前言在最近的项目开发中，出现了一个令我困扰的状况。我正在开发的项目 A，依赖了已经线上发布的项目 B，但是随着项目 A 的不断开发，又需要不时修改项目 B 的代码（这些修改暂时不必发布线上），如何能够在修改项目 B 代码后及时将改动后在项目 A 中同步？ 在项目 A 发布上线后，如...",
  "cover": "https://cdn.nlark.com/yuque/0/2022/png/732231/1647256879439-9a659711-4588-4201-80d6-730a1f1f1693.png",
  "user_id": 732231,
  "book_id": 24866785,
  "last_editor_id": 732231,
  "format": "lake",
  "body_draft": "<!doctype html><div class=\"lake-content\" typography=\"classic\"><h2 id=\"y7Xha\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80)\">0. 🧉 前言</span></h2><p id=\"u63b365a1\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">在最近的项目开发中，出现了一个令我困扰的状况。我正在开发的项目 A，依赖了已经线上发布的项目 B，但是随着项目 A 的不断开发，又需要不时修改项目 B 的代码（这些修改暂时不必发布线上），</span><strong><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">如何能够在修改项目 B 代码后及时将改动后在项目 A 中同步？</span></strong><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> </span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">在项目 A 发布上线后，</span><strong><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">如何以一种优雅的方式解决项目 A，B 版本升级后的版本同步问题？</span></strong><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> </span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">经过一番调研，我发现解决这些问题的最佳方案便是本篇要介绍的 monorepo 策略。</span></p><h2 id=\"L7RVD\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80)\">1. 🤔 什么是 monorepo 策略？</span></h2><p id=\"u1a9edb50\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">monorepo 是一种</span><strong><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">将多个项目代码存储在一个仓库里的软件开发策略</span></strong><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">（&quot;mono&quot; 来源于希腊语 μόνος 意味</span><strong><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">单个的</span></strong><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">，而 &quot;repo&quot;，显而易见地，是 repository 的缩写）。将不同的项目的代码放在同一个代码仓库中，这种「把鸡蛋放在同一个篮子里」的做法可能乍看之下有些奇怪，但实际上，这种代码管理方式有很多好处，无论是世界一流的互联网企业 Google，Facebook，还是社区知名的开源项目团队 Babel （如下图）都使用了 monorepo 策略管理他们的代码。</span></p><p id=\"ud30eecf9\" class=\"ne-p\"><img src=\"https://cdn.nlark.com/yuque/0/2022/png/732231/1647256879439-9a659711-4588-4201-80d6-730a1f1f1693.png\" width=\"1080\" id=\"ub5cf2a21\" class=\"ne-image\"></p><p id=\"uef73b521\" class=\"ne-p\" style=\"text-align: center\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">babel 使用 monorepo 策略管理代码</span></p><p id=\"udf974a30\" class=\"ne-p\"><strong><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">使用 monorepo 策略究竟会给代码管理者和程序开发者带来哪些好处？</span></strong><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> </span><strong><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">我们又该如何在工作中尝试实践 monorepo 策略？</span></strong><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">这正是本文想要探讨的话题。希望通过我的一番介绍，您能够对 monorepo 策略有更完整的认知，文章中介绍的工具和思想可以切实帮助到您和您所在的团队。</span></p><h2 id=\"PYzo6\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80)\">2. 🌗 monorepo 策略的优劣</span></h2><p id=\"ub61018d1\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">通过 monorepo 策略组织代码，您代码仓库的目录结构看起来会是这样：</span></p><pre data-language=\"markdown\" id=\"K3rF8\" class=\"ne-codeblock language-markdown\"><code>.\n├── lerna.json\n├── package.json\n└── packages/ # 这里将存放所有子 repo 目录\n    ├── project_1/\n    │   ├── index.js\n    │   ├── node_modules/\n    │   └── package.json\n    ├── project_2/\n    │   ├── index.js\n    │   ├── node_module/\n    │   └── package.json\n    ...</code></pre><p id=\"u1f9b5225\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">乍看起来，所谓的 monorepo 策略就只是将不同项目的目录汇集到一个目录之下，但实际上操作起来所要考虑的事情则远比看起来要复杂得多。通过分析使用 monorepo 策略的优劣，我们可以更直观的感受到这里面所隐晦涉及的知识点。</span></p><h3 id=\"AdDAF\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80)\">2.1 monorepo 方案的优势</span></h3><ol class=\"ne-ol\"><li id=\"u914e2851\" data-lake-index-type=\"0\"><strong><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">代码重用将变得非常容易</span></strong><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">：由于所有的项目代码都集中于一个代码仓库，我们将很容易抽离出各个项目共用的业务组件或工具，并通过 TypeScript，Lerna 或其他工具进行代码内引用；</span></li><li id=\"u8cd9ea44\" data-lake-index-type=\"0\"><strong><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">依赖管理将变得非常简单</span></strong><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">：同理，由于项目之间的引用路径内化在同一个仓库之中，我们很容易追踪当某个项目的代码修改后，会影响到其他哪些项目。通过使用一些工具，我们将很容易地做到版本依赖管理和版本号自动升级；</span></li><li id=\"ucfe69ff5\" data-lake-index-type=\"0\"><strong><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">代码重构将变得非常便捷</span></strong><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">：想想究竟是什么在阻止您进行代码重构，很多时候，原因来自于「不确定性」，您不确定对某个项目的修改是否对于其他项目而言是「致命的」，出于对未知的恐惧，您会倾向于不重构代码，这将导致整个项目代码的腐烂度会以惊人的速度增长。而在 monorepo 策略的指导下，您能够明确知道您的代码的影响范围，并且能够对被影响的项目可以进行统一的测试，这会鼓励您不断优化代码；</span></li><li id=\"ud5e982df\" data-lake-index-type=\"0\"><strong><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">它倡导了一种开放，透明，共享的组织文化，这有利于开发者成长，代码质量的提升</span></strong><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">：在 monorepo 策略下，每个开发者都被鼓励去查看，修改他人的代码（只要有必要），同时，也会激起开发者维护代码，和编写单元测试的责任心（毕竟朋友来访之前，我们从不介意自己的房子究竟有多乱），这将会形成一种良性的技术氛围，从而保障整个组织的代码质量。</span></li></ol><h3 id=\"exmaS\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80)\">2.2 monorepo 方案的劣势</span></h3><ol class=\"ne-ol\"><li id=\"u2b65e375\" data-lake-index-type=\"0\"><strong><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">项目粒度的权限管理变得非常复杂</span></strong><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">：无论是 Git 还是其他 VCS 系统，在支持 monorepo 策略中项目粒度的权限管理上都没有令人满意的方案，这意味着 A 部门的 a 项目若是不想被 B 部门的开发者看到就很难了。（好在我们可以将 monorepo 策略实践在「项目级」这个层次上，这才是我们这篇文章的主题，我们后面会再次明确它）；</span></li><li id=\"u99341738\" data-lake-index-type=\"0\"><strong><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">新员工的学习成本变高</span></strong><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">：不同于一个项目一个代码仓库这种模式下，组织新人只要熟悉特定代码仓库下的代码逻辑，在 monorepo 策略下，新人可能不得不花更多精力来理清各个代码仓库之间的相互逻辑，当然这个成本可以通过新人文档的方式来解决，但维护文档的新鲜又需要消耗额外的人力；</span></li><li id=\"u2f9d68bc\" data-lake-index-type=\"0\"><strong><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">对于公司级别的 monorepo 策略而言，需要专门的 VFS 系统，自动重构工具的支持</span></strong><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">：设想一下 Google 这样的企业是如何将十亿行的代码存储在一个仓库之中的？开发人员每次拉取代码需要等待多久？各个项目代码之间又如何实现权限管理，敏捷发布？任何简单的策略乘以足够的规模量级都会产生一个奇迹（不管是好是坏），对于中小企业而言，如果没有像 Google，Facebook 这样雄厚的人力资源，把所有项目代码放在同一个仓库里这个美好的愿望就只能是个空中楼阁。</span></li></ol><h3 id=\"f8oq1\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80)\">2.3 小结：如何取舍？</span></h3><p id=\"u6f25f1c4\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">没错，软件开发领域从来没有「银弹」。monorepo 策略也并不完美，并且，我在实践中发现，要想完美在组织中运用 monorepo 策略，所需要的不仅是出色的编程技巧和耐心。</span><strong><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">团队日程</span></strong><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">，</span><strong><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">组织文化</span></strong><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">和</span><strong><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">个人影响力</span></strong><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">相互碰撞的最终结果才决定了想法最终是否能被实现。</span></p><p id=\"u465bbf05\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"></span></p><p id=\"u81c89532\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">但是请别灰心的太早，因为虽然让组织作出改变，统一施行 monorepo 策略困难重重，但这却并不意味着我们需要彻底跟 monorepo 策略说再见（否则我这篇文章就该到此为止了）。我们还可以</span><strong><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">把 monorepo 策略实践在「项目」这个级别</span></strong><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">，即从逻辑上确定项目与项目之间的关联性，然后把相关联的项目整合在同一个仓库下，通常情况下，我们不会有太多相互关联的项目，这意味着我们能够免费得到 monorepo 策略的所有好处，并且可以拒绝支付大型 monorepo 架构的利息。</span></p><p id=\"u54a6587b\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"></span></p><p id=\"u738eb388\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">本文的剩余篇幅就是对「项目级别 monorepo 实践」的一些总结，即使您最终没有选择 monorepo 策略组织您的代码，相信文章中提供的一些工程化工具或思路也一样会对您产生帮助。</span></p><h2 id=\"HgfwO\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80)\">3. 🧑🏻‍💻 monorepo 方案实践</span></h2><h3 id=\"X3AbB\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80)\">3.1 锁定环境：Volta</span></h3><p id=\"u39c52a79\" class=\"ne-p\"><img src=\"https://cdn.nlark.com/yuque/0/2022/png/732231/1647256879064-51b0ea9d-4fae-414a-9daa-25d2b8636bbe.png\" width=\"606\" id=\"u51dc6b27\" class=\"ne-image\"></p><p id=\"ub9af2a2e\" class=\"ne-p\"><a href=\"https://volta.sh/\" data-href=\"https://volta.sh/\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">Volta</span></a><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> </span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">是一个 JavaScript 工具管理器，它可以让我们轻松地在项目中锁定 node，npm 和 yarn 的版本。你只需在安装完 Volta 后，在项目的根目录中执行</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> </span><span class=\"ne-text\" style=\"color: rgb(71, 101, 130); font-size: 16px\">volta pin</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> </span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">命令，那么无论您当前使用的 node 或 npm（yarn）版本是什么，volta 都会自动切换为您指定的版本。</span></p><p id=\"u27b08639\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"></span></p><p id=\"uda2bfaf6\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">因此，除了使用 Docker 和显示在文档中声明 node 和 npm（yarn）的版本之外，您就有了另一个锁定环境的强力工具。</span></p><p id=\"u95ef6475\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"></span></p><p id=\"u8bfa757a\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">而且相较于 nvm，Volta 还具有一个诱人的特性：当您项目的 CLI 工具与全局 CLI 工具不一致时，Volta 可以做到在项目根目录下自动识别，切换到项目指定的版本，这一切都是由 Volta 默默做到的，开发者不必关心任何事情。</span></p><h3 id=\"LD202\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80)\">3.2 复用 packages：workspace</span></h3><p id=\"ua493dc71\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">使用 monorepo 策略后，收益最大的两点是：</span></p><ol class=\"ne-ol\"><li id=\"ua8fe2baf\" data-lake-index-type=\"0\"><strong><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">避免重复安装包，因此减少了磁盘空间的占用，并降低了构建时间</span></strong><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">；</span></li><li id=\"u9b1733f2\" data-lake-index-type=\"0\"><strong><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">内部代码可以彼此相互引用</span></strong><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">；</span></li></ol><p id=\"u4a5d6344\" class=\"ne-p\"><br></p><p id=\"ud8c4315f\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">这两项好处全部都可以由一个成熟的包管理工具来完成，对前端开发而言，即是</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> </span><span class=\"ne-text\" style=\"color: rgb(71, 101, 130); font-size: 16px\">yarn</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">（1.0 以上）或</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> </span><span class=\"ne-text\" style=\"color: rgb(71, 101, 130); font-size: 16px\">npm</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">（7.0 以上）通过名为</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> </span><span class=\"ne-text\" style=\"color: rgb(71, 101, 130); font-size: 16px\">workspaces</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> </span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">的特性实现的（⚠️ 注意，支持 workspaces 特性的 npm 目前依旧不是 TLS 版本）。</span></p><p id=\"u85ddeb7c\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"></span></p><p id=\"u243ab284\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">为了实现前面提到的两点收益，您需要在代码中做三件事：</span></p><ol class=\"ne-ol\"><li id=\"u4a0cbee6\" data-lake-index-type=\"0\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">调整目录结构，将相互关联的项目放置在同一个目录，推荐命名为 </span><code class=\"ne-code\"><span class=\"ne-text\" style=\"color: rgb(71, 101, 130); font-size: 16px\">packages</span></code><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">；</span></li><li id=\"u6722b056\" data-lake-index-type=\"0\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">在项目根目录里的 </span><code class=\"ne-code\"><span class=\"ne-text\" style=\"color: rgb(71, 101, 130); font-size: 16px\">package.json</span></code><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> 文件中，设置 </span><code class=\"ne-code\"><span class=\"ne-text\" style=\"color: rgb(71, 101, 130); font-size: 16px\">workspaces</span></code><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> 属性，属性值为之前创建的目录；</span></li><li id=\"ue81d7c17\" data-lake-index-type=\"0\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">同样，在 </span><code class=\"ne-code\"><span class=\"ne-text\" style=\"color: rgb(71, 101, 130); font-size: 16px\">package.json</span></code><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> 文件中，设置 </span><code class=\"ne-code\"><span class=\"ne-text\" style=\"color: rgb(71, 101, 130); font-size: 16px\">private</span></code><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> 属性为 </span><code class=\"ne-code\"><span class=\"ne-text\" style=\"color: rgb(71, 101, 130); font-size: 16px\">true</span></code><span class=\"ne-text\" style=\"color: rgb(71, 101, 130); font-size: 16px\"> </span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">(为了避免我们误操作将仓库发布)；</span></li></ol><p id=\"ue99788a3\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"></span></p><p id=\"u3e3bc81d\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">经过修改，您的项目目录看起来应该是这样：</span></p><pre data-language=\"markdown\" id=\"el38t\" class=\"ne-codeblock language-markdown\"><code>.\n├── package.json\n└── packages/\n    ├── @mono/project_1/ # 推荐使用 `@&lt;项目名&gt;/&lt;子项目名&gt;` 的方式命名\n    │   ├── index.js\n    │   └── package.json\n    └── @mono/project_2/\n        ├── index.js\n        └── package.json</code></pre><p id=\"u6f513765\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">而当您在项目根目录中执行</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> </span><span class=\"ne-text\" style=\"color: rgb(71, 101, 130); font-size: 16px\">npm install</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> </span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">或</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> </span><span class=\"ne-text\" style=\"color: rgb(71, 101, 130); font-size: 16px\">yarn install</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">后，您会发现在项目根目录中出现了</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> </span><span class=\"ne-text\" style=\"color: rgb(71, 101, 130); font-size: 16px\">node_modules</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> </span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">目录，并且该目录不仅拥有所有子项目共用的 npm 包，还包含了我们的子项目。因此，我们可以在子项目中通过各种模块引入机制，像引入一般的 npm 模块一样引入其他子项目的代码。</span></p><p id=\"ucd5633a0\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"></span></p><p id=\"u96363688\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">请注意我们对子项目的命名，统一以</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> </span><span class=\"ne-text\" style=\"color: rgb(71, 101, 130); font-size: 16px\">@&lt;repo_name&gt;/</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> </span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">开头，这是一种社区最佳实践，不仅可以让用户更容易了解整个应用的架构，也方便您在项目中更快捷的找到所需的子项目。</span></p><p id=\"u30f5279b\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"></span></p><p id=\"u70ecb25d\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">至此，我们已经完成了 monorepo 策略的核心部分，实在是很容易不是吗？但是老话说「行百里者半九十」，距离优雅的搭建一个 monorepo 项目，我们还有一些路要走。</span></p><h3 id=\"T9loK\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80)\">3.3 统一配置：合并同类项 - Eslint，Typescript 与 Babel</span></h3><p id=\"u829dc752\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">您一定同意，编写代码要遵循 DRY 原则（Don't Repeat Yourself 的缩写）。那么，理所当然地，我们应该尽量避免在多个子项目中放置重复的 eslintrc，tsconfig 等配置文件。幸运的是，Babel，Eslint 和 Typescript 都提供了相应的功能让我们减少自我重复。</span></p><h4 id=\"AqDWx\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80)\">3.3.1 TypeScript</span></h4><p id=\"ued64d495\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">我们可以在</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> </span><span class=\"ne-text\" style=\"color: rgb(71, 101, 130); font-size: 16px\">packages</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> </span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">目录中放置</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> </span><span class=\"ne-text\" style=\"color: rgb(71, 101, 130); font-size: 16px\">tsconfig.settting.json</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> </span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">文件，并在文件中定义通用的 ts 配置，然后，在每个子项目中，我们可以通过</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> </span><span class=\"ne-text\" style=\"color: rgb(71, 101, 130); font-size: 16px\">extends</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> </span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">属性，引入通用配置，并设置</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> </span><span class=\"ne-text\" style=\"color: rgb(71, 101, 130); font-size: 16px\">compilerOptions.composite</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> </span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">的值为</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> </span><span class=\"ne-text\" style=\"color: rgb(71, 101, 130); font-size: 16px\">true</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">，理想情况下，子项目中的</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> </span><span class=\"ne-text\" style=\"color: rgb(71, 101, 130); font-size: 16px\">tsconfig</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> </span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">文件应该仅包含下述内容：</span></p><pre data-language=\"json\" id=\"W4ZV7\" class=\"ne-codeblock language-json\"><code>{\n  &quot;extends&quot;: &quot;../tsconfig.setting.json&quot;, // 继承 packages 目录下通用配置\n  &quot;compilerOptions&quot;: {\n    &quot;composite&quot;: true, // 用于帮助 TypeScript 快速确定引用工程的输出文件位置\n    &quot;outDir&quot;: &quot;dist&quot;,\n    &quot;rootDir&quot;: &quot;src&quot;\n  },\n  &quot;include&quot;: [&quot;src&quot;]\n}</code></pre><h4 id=\"aP7kn\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80)\">3.3.2 Eslint</span></h4><p id=\"ufbaf1710\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">对于 Eslint 配置文件，我们也可以如法炮制，这样定义子项目的</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> </span><span class=\"ne-text\" style=\"color: rgb(71, 101, 130); font-size: 16px\">.eslintrc</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> </span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">文件内容：</span></p><pre data-language=\"json\" id=\"YVJEd\" class=\"ne-codeblock language-json\"><code>{\n  &quot;extends&quot;: &quot;../../.eslintrc&quot;, // 注意这里的不同\n  &quot;parserOptions&quot;: {\n    &quot;project&quot;: &quot;tsconfig.json&quot;\n  }\n}</code></pre><p id=\"ufbd711a3\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">注意到了吗，对于通用的 eslint 配置，我们并没有将其放置在 </span><span class=\"ne-text\" style=\"color: rgb(71, 101, 130); font-size: 16px\">packages</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> 目录中，而是放在整个项目的根目录下，这样做是因为一些编辑器插件只会在项目根目录寻找 </span><span class=\"ne-text\" style=\"color: rgb(71, 101, 130); font-size: 16px\">.eslintrc</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> 文件，因此为了我们的项目能够保持良好的「开发环境一致性」，请务必将通用配置文件放置在项目的根目录中。</span></p><h4 id=\"x0oWt\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80)\">3.3.3 Babel</span></h4><p id=\"u4c371e9e\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">Babel 配置文件合并的方式与 TypeScript 如出一辙，甚至更加简单，我们只需在子项目中的 </span><span class=\"ne-text\" style=\"color: rgb(71, 101, 130); font-size: 16px\">.babelrc</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> 文件中这样声明即可：</span></p><pre data-language=\"json\" id=\"LuM0N\" class=\"ne-codeblock language-json\"><code>{\n  &quot;extends&quot;: &quot;../.babelrc&quot;\n}</code></pre><p id=\"u6179ad7f\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">当一切准备就绪后，我们的项目目录应该大致呈如下所示的结构：</span></p><pre data-language=\"markdown\" id=\"Rat1Z\" class=\"ne-codeblock language-markdown\"><code>.\n├── package.json\n├── .eslintrc\n└── packages/\n    │   ├── tsconfig.settings.json\n    │   ├── .babelrc\n    ├── @mono/project_1/\n    │   ├── index.js\n    │   ├── .eslintrc\n    │   ├── .babelrc\n    │   ├── tsconfig.json\n    │   └── package.json\n    └───@mono/project_2/\n        ├── index.js\n        ├── .eslintrc\n        ├── .babelrc\n        ├── tsconfig.json\n        └── package.json</code></pre><h3 id=\"hBZeX\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80)\">3.4 统一命令脚本：scripty</span></h3><p id=\"u71c7f7a9\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">在上一步中，我们尽可能的将所有配置文件进行抽象，从而精简了代码，并提高了整个项目的一致性。我们的整个仓库也因此有了「更浓郁的 monorepo 风味 ☕️」。但如果仔细审视我们的整个工程文件，还有一处存在着明显的瑕疵和一些恼人的坏味道，当您仔细审视您的众多</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> </span><span class=\"ne-text\" style=\"color: rgb(71, 101, 130); font-size: 16px\">package.json</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> </span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">文件时，您就知道我在说什么了 -- scripts 脚本。</span></p><p id=\"ub834fdb1\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"></span></p><p id=\"u35e8dab9\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">如果您的子项目足够多，您可能会发现，每个</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> </span><span class=\"ne-text\" style=\"color: rgb(71, 101, 130); font-size: 16px\">package.json</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> </span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">文件中的</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> </span><span class=\"ne-text\" style=\"color: rgb(71, 101, 130); font-size: 16px\">scripts</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> </span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">属性都大同小异，并且一些</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> </span><span class=\"ne-text\" style=\"color: rgb(71, 101, 130); font-size: 16px\">scripts</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> </span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">充斥着各种 Linux 语法，例如管道操作符，重定向或目录生成。</span><strong><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">重复带来低效，复杂则使人难以理解</span></strong><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">，这都是需要我们解决的问题。</span></p><p id=\"u588a17bc\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"></span></p><p id=\"u90dc71a8\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">这里给出的解决方案是，使用</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> </span><a href=\"https://www.npmjs.com/package/scripty\" data-href=\"https://www.npmjs.com/package/scripty\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">scripty</span></a><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> </span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">管理您的脚本命令，简单来说，scripty 允许您将脚本命令定义在文件中，并在</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> </span><span class=\"ne-text\" style=\"color: rgb(71, 101, 130); font-size: 16px\">package.json</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> </span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">文件中直接通过文件名来引用。这使我们可以实现如下目的：</span></p><ol class=\"ne-ol\"><li id=\"uad44ff18\" data-lake-index-type=\"0\"><strong><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">子项目间复用脚本命令</span></strong><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">；</span></li><li id=\"u8a5717f5\" data-lake-index-type=\"0\"><strong><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">像写代码一样编写脚本命令，无论它有多复杂，而在调用时，像调用函数一样调用</span></strong><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">；</span></li></ol><p id=\"u0d0c578c\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"></span></p><p id=\"u1c39c020\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">通过使用 scripty 管理我们的 monorepo 应用，目录结构看起来将会是这样：</span></p><pre data-language=\"markdown\" id=\"ieiaT\" class=\"ne-codeblock language-markdown\"><code>.\n├── package.json\n├── .eslintrc\n├── scirpts/ # 这里存放所有的脚本\n│   │   ├── packages/ # 包级别脚本\n│   │   │   ├── build.sh\n│   │   │   └── test.sh\n│   └───└── workspaces/ # 全局脚本\n│           ├── build.sh\n│           └── test.sh\n└── packages/\n    │   ├── tsconfig.settings.json\n    │   ├── .babelrc\n    ├── @mono/project_1/\n    │   ├── index.js\n    │   ├── .eslintrc\n    │   ├── .babelrc\n    │   ├── tsconfig.json\n    │   └── package.json\n    └── @mono/project_2/\n        ├── index.js\n        ├── .eslintrc\n        ├── .babelrc\n        ├── tsconfig.json\n        └── package.json</code></pre><p id=\"uffb12674\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">注意，我们脚本分为两类「package 级别」与「workspace 级别」，并且分别放在两个文件夹内。这样做的好处在于，我们既可以在项目根目录执行全局脚本，也可以针对单个项目执行特定的脚本。</span></p><p id=\"u2986ff87\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"></span></p><p id=\"u6a689a35\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">通过使用 scripty，子项目的 </span><span class=\"ne-text\" style=\"color: rgb(71, 101, 130); font-size: 16px\">package.json</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> 文件中的 </span><span class=\"ne-text\" style=\"color: rgb(71, 101, 130); font-size: 16px\">scripts</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> 属性将变得非常精简：</span></p><pre data-language=\"json\" id=\"XoV5L\" class=\"ne-codeblock language-json\"><code>{\n  ...\n  &quot;scripts&quot;: {\n    &quot;test&quot;: &quot;scripty&quot;,\n    &quot;lint&quot;: &quot;scripty&quot;,\n    &quot;build&quot;: &quot;scripty&quot;\n  },\n  &quot;scripty&quot;: {\n    &quot;path&quot;: &quot;../../scripts/packages&quot; // 注意这里我们指定了 scripty 的路径\n  },\n  ...\n}</code></pre><p id=\"ud89c47c5\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">大功告成！🎉 至此，我们尽己所能地删除了整个项目中的重复代码，让整个项目变得干净，清爽并且有极强的复用性。</span></p><div data-type=\"info\" class=\"ne-alert\"><p id=\"u48cf5b3f\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">🧉 小贴士：</span></p><p id=\"ufd40322e\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(153, 153, 153); font-size: 16px\">别忘了使用 chmod -R u+x scripts 命令使所有的 shell 脚本具备可执行权限，也千万别忘了把这条贴士写在您的 README.md 文件中！</span></p></div><h3 id=\"ofYMs\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80)\">3.5 统一包管理：Lerna</span></h3><p id=\"ue9cecd86\" class=\"ne-p\"><img src=\"https://cdn.nlark.com/yuque/0/2022/png/732231/1647256879285-b37f124c-5c57-402f-aa35-654d7e9a5b09.png\" width=\"960\" id=\"ue5da8ee4\" class=\"ne-image\"></p><p id=\"u1192ca46\" class=\"ne-p\" style=\"text-align: center\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">图片来源：https://github.com/lerna/lerna</span></p><p id=\"u1e433263\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">我有时会感慨自己的灵感匮乏，怎么就想不到 Lerna 这样既有神话色彩又能自我释义的好名字。您可以大胆想象，九头龙的每只龙头都在帮您管理着一个子项目，而您只需要骑在龙身上发号施令的场景，这基本上就是我们使用 Lerna 时的直观感受。</span></p><p id=\"ued055ae9\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"></span></p><p id=\"ubbeb37d6\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">这也是为什么当我们提起 monorepo 策略，就几乎不得不提到 Lerna 的原因了，它的确提供了一种非常便捷的方式供我们管理 monorepo 项目。当子项目越多时，Lerna 就越能显示其威力。</span></p><p id=\"u3ebdd90c\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"></span></p><p id=\"u777b0f5a\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">当多个子项目放在一个代码仓库，并且子项目之间又相互依赖时，我们面临的棘手问题有两个：</span></p><ol class=\"ne-ol\"><li id=\"u27c47ae8\" data-lake-index-type=\"0\"><strong><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">如果我们需要在多个子目录执行相同的命令，我们需要手动进入各个目录，并执行命令</span></strong><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">；</span></li><li id=\"udead62d3\" data-lake-index-type=\"0\"><strong><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">当一个子项目更新后，我们只能手动追踪依赖该项目的其他子项目，并升级其版本</span></strong><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">。</span></li></ol><p id=\"u56c53fac\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">通过使用 Lerna，这些棘手的问题都将不复存在。</span></p><p id=\"ua2b12287\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"></span></p><p id=\"ua81c0076\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">当在项目根目录使用 </span><span class=\"ne-text\" style=\"color: rgb(71, 101, 130); font-size: 16px\">npx lerna init</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> 初始化后，我们的根目录会新增一个 </span><span class=\"ne-text\" style=\"color: rgb(71, 101, 130); font-size: 16px\">lerna.json</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> 文件，默认内容为：</span></p><pre data-language=\"json\" id=\"o4gUB\" class=\"ne-codeblock language-json\"><code>{\n  &quot;packages&quot;: [&quot;packages/*&quot;],\n  &quot;version&quot;: &quot;0.0.0&quot;\n}</code></pre><p id=\"u1b3b572e\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">让我们稍稍改动这个文件，使其变为：</span></p><pre data-language=\"json\" id=\"bniQ9\" class=\"ne-codeblock language-json\"><code>{\n  &quot;packages&quot;: [&quot;packages/*&quot;],\n  &quot;npmClient&quot;: &quot;yarn&quot;,\n  &quot;version&quot;: &quot;independent&quot;,\n  &quot;useWorkspaces&quot;: true,\n}</code></pre><p id=\"ub3daaa1a\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">可以注意到，我们显示声明了我们的包客户端（</span><span class=\"ne-text\" style=\"color: rgb(71, 101, 130); font-size: 16px\">npmClient</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">）为</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> </span><span class=\"ne-text\" style=\"color: rgb(71, 101, 130); font-size: 16px\">yarn</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">，并且让 Lerna 追踪我们 workspaces 设置的目录，这样我们就依旧保留了之前</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> </span><span class=\"ne-text\" style=\"color: rgb(71, 101, 130); font-size: 16px\">workspaces</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> </span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">的所有特性（</span><strong><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">子项目引用</span></strong><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">和</span><strong><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">通用包提升</span></strong><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">）。</span></p><p id=\"u89c66570\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"></span></p><p id=\"ub429bda9\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">除此之外一个有趣的改动在于我们将 </span><span class=\"ne-text\" style=\"color: rgb(71, 101, 130); font-size: 16px\">version</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> 属性指定为一个关键字 </span><span class=\"ne-text\" style=\"color: rgb(71, 101, 130); font-size: 16px\">independent</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">，这将告诉 lerna 应该</span><strong><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">将每个子项目的版本号看作是相互独立的</span></strong><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">。当某个子项目代码更新后，运行 </span><span class=\"ne-text\" style=\"color: rgb(71, 101, 130); font-size: 16px\">lerna publish</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> 时，Lerna 将监听到代码变化的子项目并以交互式 CLI 方式让开发者决定需要升级的版本号，关联的子项目版本号不会自动升级，反之，当我们填入固定的版本号时，则任一子项目的代码变动，都会导致所有子项目的版本号基于当前指定的版本号升级。</span></p><p id=\"u0e61fc9c\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"></span></p><p id=\"u52cf8053\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">Lerna 提供了很多 CLI 命令以满足我们的各种需求，但根据 2/8 法则，您应该首先关注以下这些命令：</span></p><ul class=\"ne-ul\"><li id=\"u6c700d82\" data-lake-index-type=\"0\"><span class=\"ne-text\" style=\"color: rgb(71, 101, 130); font-size: 16px\">lerna bootstrap</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">：等同于</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> </span><span class=\"ne-text\" style=\"color: rgb(71, 101, 130); font-size: 16px\">lerna link</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> </span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">+</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> </span><span class=\"ne-text\" style=\"color: rgb(71, 101, 130); font-size: 16px\">yarn install</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">，用于创建符合链接并安装依赖包；</span></li><li id=\"uf9469c10\" data-lake-index-type=\"0\"><span class=\"ne-text\" style=\"color: rgb(71, 101, 130); font-size: 16px\">lerna run</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">：会像执行一个 for 循环一样，在所有子项目中执行 npm script 脚本，并且，它会非常智能的识别依赖关系，并从根依赖开始执行命令；</span></li><li id=\"u932e5cfe\" data-lake-index-type=\"0\"><span class=\"ne-text\" style=\"color: rgb(71, 101, 130); font-size: 16px\">lerna exec</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">：像</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> </span><span class=\"ne-text\" style=\"color: rgb(71, 101, 130); font-size: 16px\">lerna run</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> </span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">一样，会按照依赖顺序执行命令，不同的是，它可以执行任何命令，例如 shell 脚本；</span></li><li id=\"ub06c4bdf\" data-lake-index-type=\"0\"><span class=\"ne-text\" style=\"color: rgb(71, 101, 130); font-size: 16px\">lerna publish</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">：发布代码有变动的 package，因此首先您需要在使用 Lerna 前使用</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> </span><span class=\"ne-text\" style=\"color: rgb(71, 101, 130); font-size: 16px\">git commit</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> </span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">命令提交代码，好让 Lerna 有一个 baseline；</span></li><li id=\"u06b01b17\" data-lake-index-type=\"0\"><span class=\"ne-text\" style=\"color: rgb(71, 101, 130); font-size: 16px\">lerna add</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">：将本地或远程的包作为依赖添加至当前的 monorepo 仓库中，该命令让 Lerna 可以识别并追踪包之间的依赖关系，因此非常重要；</span></li></ul><pre data-language=\"shell\" id=\"bdAcZ\" class=\"ne-codeblock language-shell\"><code># 向 @mono/project2 和 @mono/project3 中添加 @mono/project1\nlerna add @mono/project1 '@mono/project{2,3}'</code></pre><h4 id=\"RVo0W\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80)\">3.5.1 Lerna 高级命令</span></h4><p id=\"u8dce5a89\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">除了上面介绍到的常用命令外，Lerna 还提供了一些参数满足我们更灵活的需求，例如：</span></p><ul class=\"ne-ul\"><li id=\"ua122680d\" data-lake-index-type=\"0\"><code class=\"ne-code\"><span class=\"ne-text\" style=\"color: rgb(71, 101, 130); font-size: 16px\">--concurrency &lt;number&gt;</span></code><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">：参数可以使 Lerna 利用计算机上的多个核心，并发运行，从而提升构建速度；</span></li><li id=\"u5d330b31\" data-lake-index-type=\"0\"><code class=\"ne-code\"><span class=\"ne-text\" style=\"color: rgb(71, 101, 130); font-size: 16px\">--scope '@mono/{pkg1,pkg2}'</span></code><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">：</span><code class=\"ne-code\"><span class=\"ne-text\" style=\"color: rgb(71, 101, 130); font-size: 16px\">--scope</span></code><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> 参数可以指定 Lerna 命令的运行环境，通过使用该参数，Lerna 将不再是一把梭的在所有仓库中执行命令，而是可以精准地在我们所指定的仓库中执行命令，并且还支持示例中的模版语法；</span></li><li id=\"ucbcd7067\" data-lake-index-type=\"0\"><code class=\"ne-code\"><span class=\"ne-text\" style=\"color: rgb(71, 101, 130); font-size: 16px\">--stream</span></code><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">：该参数可使我们查看 Lerna 运行时的命令执行信息；</span></li></ul><h4 id=\"H2jG7\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80)\">3.5.2 npm 包本地发布：Verdaccio</span></h4><p id=\"uc70122c1\" class=\"ne-p\"><img src=\"https://cdn.nlark.com/yuque/0/2022/png/732231/1647256879198-723cfae0-eff1-4e23-badf-d72662510765.png\" width=\"602\" id=\"uf92c71f3\" class=\"ne-image\"></p><p id=\"ud727d4c5\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">看到这里，您可能想要亲自体验一把使用 Lerna 管理/发布 monorepo 项目的感觉。可是很快您会发现，将示例代码发布到真实世界的 npm 仓库并非一个好主意，这多少有些令人沮丧，但是别担心，您可以使用</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> </span><a href=\"https://verdaccio.org/\" data-href=\"https://verdaccio.org/\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">Verdaccio</span></a><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> </span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">在本地创建一个 npm 仓库作为代理，然后尽情体验 Lerna 的种种强大之处。</span></p><p id=\"u8fce2d9a\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"></span></p><p id=\"u06ffb147\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">安装运行 Verdaccio 非常简单，您只需运行：</span></p><pre data-language=\"shell\" id=\"OYbOG\" class=\"ne-codeblock language-shell\"><code>npm install --global verdaccio</code></pre><p id=\"ub231eabd\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">在全局安装 Verdaccio 应用，然后在 shell 中输入：</span></p><pre data-language=\"shell\" id=\"Ha0Mi\" class=\"ne-codeblock language-shell\"><code>verdaccio</code></pre><p id=\"u5dc97380\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">即可通过 </span><span class=\"ne-text\" style=\"color: rgb(71, 101, 130); font-size: 16px\">localhost:4837</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> 访问您的本地代理 npm 仓库，别忘了在您的项目根目录创建 </span><span class=\"ne-text\" style=\"color: rgb(71, 101, 130); font-size: 16px\">.npmrc</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> 文件，并在文件中将 npm 仓库地址改写为您的本地代理地址：</span></p><pre data-language=\"shell\" id=\"tHFHj\" class=\"ne-codeblock language-shell\"><code>registry=&quot;http://localhost:4873/&quot;</code></pre><p id=\"ucf137b08\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">大功告成 🙌！每当您执行 </span><code class=\"ne-code\"><span class=\"ne-text\" style=\"color: rgb(71, 101, 130); font-size: 16px\">lerna publish</span></code><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> 时，子项目所构建成的 package 将会发布在本地 npm 仓库中，而当您执行 </span><span class=\"ne-text\" style=\"color: rgb(71, 101, 130); font-size: 16px\">lerna bootstrap</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> 时，Verdaccio 将会放行，让您成功从远程 npm 仓库中拉取相应的代码。</span></p><h3 id=\"PBkdJ\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80)\">3.6 格式化 commit 信息</span></h3><p id=\"u59df7bed\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">至此，我们已经掌握了组织一个项目级 monorepo 仓库的所有前沿技巧，最后，让我们看看最后一个可以优化的地方：</span><strong><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">代码提交时，约束 commit 信息</span></strong><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">。</span></p><p id=\"u43c1bb9b\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"></span></p><p id=\"u20f94032\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">一个 monorepo 仓库可能被</span><strong><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">不同的开发者提交不同子项目</span></strong><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">的代码，如果没有规范化的 commit 信息，在故障排查或版本回滚时毫无意外会遭遇灾难。因此，千万不要小看 commit 信息格式化的重要性（当然，同样重要的还有代码注释！）。</span></p><p id=\"u0f6d9481\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"></span></p><p id=\"ub83c335b\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">为了我们能够一目了然的追踪每次代码变更的信息，我们使用 </span><a href=\"https://github.com/conventional-changelog/commitlint/#what-is-commitlint\" data-href=\"https://github.com/conventional-changelog/commitlint/#what-is-commitlint\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">commitlint</span></a><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> 工具作为格式化 commit 信息的不二之选。</span></p><p id=\"udfabd56a\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"></span></p><p id=\"ub23f9896\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">顾名思义，</span><code class=\"ne-code\"><span class=\"ne-text\" style=\"color: rgb(71, 101, 130); font-size: 16px\">commitlint</span></code><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> 可以帮助我们检查提交的 commit 信息，它强制约束我们的 commit 信息必须在开头附加指定类型，用于标示本次提交的大致意图，支持的类型关键字有：</span></p><ul class=\"ne-ul\"><li id=\"u26ab9e73\" data-lake-index-type=\"0\"><code class=\"ne-code\"><span class=\"ne-text\" style=\"color: rgb(71, 101, 130); font-size: 16px\">feat</span></code><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">：表示添加一个新特性；</span></li><li id=\"u8f5d8328\" data-lake-index-type=\"0\"><code class=\"ne-code\"><span class=\"ne-text\" style=\"color: rgb(71, 101, 130); font-size: 16px\">chore</span></code><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">：表示做了一些与特性和修复无关的「家务事」；</span></li><li id=\"ua1b40293\" data-lake-index-type=\"0\"><code class=\"ne-code\"><span class=\"ne-text\" style=\"color: rgb(71, 101, 130); font-size: 16px\">fix</span></code><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">：表示修复了一个 Bug；</span></li><li id=\"ue7db7ec0\" data-lake-index-type=\"0\"><code class=\"ne-code\"><span class=\"ne-text\" style=\"color: rgb(71, 101, 130); font-size: 16px\">refactor</span></code><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">：表示本次提交是因为重构了代码；</span></li><li id=\"u9a4f7abc\" data-lake-index-type=\"0\"><code class=\"ne-code\"><span class=\"ne-text\" style=\"color: rgb(71, 101, 130); font-size: 16px\">style</span></code><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">：表示代码美化或格式化；</span></li><li id=\"uc24c75fc\" data-lake-index-type=\"0\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">...</span></li></ul><p id=\"u896e216b\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"></span></p><p id=\"u886f7219\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">我强烈建议您遵循该规范编写您的 commit 信息，不要偷懒，坚持下去，您的 git 日志将会显得整齐，有条理，富有表现力，同时，您也会收到同行的交口称赞，人人都会以和您这样优雅的工程师合作为荣。</span></p><p id=\"uea56f20e\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"></span></p><p id=\"u557fd3ea\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">除了限定 commit 信息类型外，commitlint 还支持（虽然不是必须的）显示指定我们本次提交所对应的子项目名称。假如我们有一个名为 </span><code class=\"ne-code\"><span class=\"ne-text\" style=\"color: rgb(71, 101, 130); font-size: 16px\">@mono/project1</span></code><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> 的子项目，我们针对该项目提交的 commit 信息可以写为：</span></p><pre data-language=\"shell\" id=\"KGVER\" class=\"ne-codeblock language-shell\"><code>git commit -m &quot;feat(project1): add a attractive button&quot; # 注意，我们省略了 @mono 的项目前缀</code></pre><p id=\"ud4cd07a6\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">毫无疑问，这将会使我们的 commit 信息更具表现力。</span></p><p id=\"u1142642d\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"></span></p><p id=\"uff98ac97\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">我们可以通过下面的命令安装 </span><span class=\"ne-text\" style=\"color: rgb(71, 101, 130); font-size: 16px\">commitlint</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> 以及周边依赖：</span></p><pre data-language=\"shell\" id=\"Ypfzy\" class=\"ne-codeblock language-shell\"><code>npm i -D @commitlint/cli @commitlint/config-conventional @commitlint/config-lerna-scopes commitlint husky lerna-changelog</code></pre><p id=\"u43ab1ae3\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">注意到了吗？我偷偷安装了 </span><a href=\"https://www.npmjs.com/package/husky\" data-href=\"https://www.npmjs.com/package/husky\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">husky</span></a><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">，它能够帮助我们在提交 commit 信息时自动运行 </span><span class=\"ne-text\" style=\"color: rgb(71, 101, 130); font-size: 16px\">commitlint</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> 进行检查，但在这之前，我们需要再在根目录下的 </span><code class=\"ne-code\"><span class=\"ne-text\" style=\"color: rgb(71, 101, 130); font-size: 16px\">package.json</span></code><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> 文件里加点料，像这样：</span></p><pre data-language=\"json\" id=\"eixF4\" class=\"ne-codeblock language-json\"><code>{\n ...\n &quot;husky&quot;: {\n    &quot;hooks&quot;: {\n      &quot;commit-msg&quot;: &quot;commitlint -E HUSKY_GIT_PARAMS&quot;\n    }\n  }\n ...\n}</code></pre><p id=\"ufa5475ce\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">为了能够让 </span><span class=\"ne-text\" style=\"color: rgb(71, 101, 130); font-size: 16px\">commitlint</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> 感知我们的子项目名称，我们还需在项目根目录中增加 </span><span class=\"ne-text\" style=\"color: rgb(71, 101, 130); font-size: 16px\">commitlint.config.js</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> 文件，并设置文件内容为：</span></p><pre data-language=\"javascript\" id=\"xgzoX\" class=\"ne-codeblock language-javascript\"><code>module.exports = {\n  extends: [\n    &quot;@commitlint/config-conventional&quot;,\n    &quot;@commitlint/config-lerna-scopes&quot;,\n  ],\n};</code></pre><p id=\"uaafcda09\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">至此，我们统一并规范化了 monorepo 项目的 commit 信息，终于整个 monorepo 工程化的最后一块拼图被我们拼上了！</span></p><p id=\"u76a2a263\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">（顺便一提，您可以通过在命令行执行 </span><code class=\"ne-code\"><span class=\"ne-text\" style=\"color: rgb(71, 101, 130); font-size: 16px\">echo &quot;build(project1): change something&quot; | npx commitlint</span></code><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> 命令即可验证您的 commit 信息是否通过 commitlint 的检查。）</span></p><h2 id=\"tkldY\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80)\">4. 🚚 如何从 multirepo 迁移至使用 monorepo 策略？</span></h2><p id=\"u0017bb3b\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">至此，我们学会了如何采用 monorepo 策略组织项目代码的最佳实践，或许您已经开始跃跃欲试想要尝试前文提到的种种技巧。从 0 搭建一个 monorepo 项目，当然没问题！可是如果要基于已有的项目，将其转化为一个使用 monorepo 策略的项目呢？</span></p><p id=\"u051d34a3\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"></span></p><p id=\"u8ee1994f\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">还记得吗？成百里者半九十，您还有一些坑要踩。不过好在您在这里还能够得到我的帮助，不必客气！</span></p><p id=\"u5cd4765a\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"></span></p><p id=\"ue64e3c84\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">或许您注意到了，Lerna 为我们提供了</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> </span><span class=\"ne-text\" style=\"color: rgb(71, 101, 130); font-size: 16px\">lerna import</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> </span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">命令，用来将我们已有的包导入到 monorepo 仓库，并且还会保留该仓库的所有 commit 信息。然而实际上，该命令仅支持</span><strong><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">导入本地项目</span></strong><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">，并且</span><strong><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">不支持</span></strong><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">导入项目的分支和标签 🙃。</span></p><p id=\"uf09235a1\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"></span></p><p id=\"u9c2a3081\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">那么如果我们想要导入远程仓库，或是要获取某个分支或标签该怎么做呢？答案是使用</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> </span><a href=\"https://github.com/hraban/tomono\" data-href=\"https://github.com/hraban/tomono\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">tomono</span></a><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">，其内容是一个 shell 脚本。</span></p><p id=\"u01a010c2\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"></span></p><p id=\"u32cfe396\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">使用 tomono 导入远程仓库，您所需要做的只有两件事：</span></p><ol class=\"ne-ol\"><li id=\"u710520b8\" data-lake-index-type=\"0\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">创建一个包含所有需要导入 repo 地址的文本文件；</span></li><li id=\"uc0a5fd2c\" data-lake-index-type=\"0\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">执行 shell 命令：</span><code class=\"ne-code\"><span class=\"ne-text\" style=\"color: rgb(71, 101, 130); font-size: 16px\">cat repos.txt | ~/tomono/tomono.sh</span></code><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">（这里我们假定您的文本文件名为 </span><code class=\"ne-code\"><span class=\"ne-text\" style=\"color: rgb(71, 101, 130); font-size: 16px\">repos.txt</span></code><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">，且您将 tomono 下载在用户根目录；</span></li></ol><p id=\"ud479edce\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">repo 文件内容示例如下：</span></p><pre data-language=\"shell\" id=\"e5Nnt\" class=\"ne-codeblock language-shell\"><code>// 1. Git仓库地址  2. 子项目名称  3. 迁移后的路径\ngit@github.com/backend.git @mono/backend packages/backend\ngit@github.com/frontend.git @mono/frontend packages/frontend\ngit@github.com/mobile.git @mono/mobile packages/mobile</code></pre><p id=\"u5ac796dc\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">至此，我们也掌握了将现有项目迁移至 </span><code class=\"ne-code\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">monorepo</span></code><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> 项目的方法。到这时候，您已绝非再是 </span><code class=\"ne-code\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">monorepo</span></code><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> 界的门外汉！</span></p><p id=\"uc6fb1696\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">恭喜您 ！！🎉</span></p><h2 id=\"btmKj\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80)\">5. 🎓 小结</span></h2><p id=\"ub3a616dc\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">在本篇文章中，我们共同了解了「</span><strong><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">什么是 monorepo 策略</span></strong><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">」以及「</span><strong><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">monorepo 策略的优劣</span></strong><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">」，并且一起学习实践了 monorepo 策略的一些最佳实践。您一定也意识到，即使您的工作场景暂时无法实践 monorepo 策略，阅读本篇文章所学习到的种种方法，工具和思想也可以运用到您当下的工作之中。</span></p><p id=\"u36fb3f71\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"></span></p><p id=\"uf97e19b0\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">当然，本文所介绍的这些方法和思想总有过时的一天，并且社区也从未停止对更好地实践 monorepo 策略的探索，说不定您过一阵子就会有更好的想法 ，填补某个领域的空白。希望到时候您也能总结出一篇文章，为 JavaScript 社区贡献一份力量。到时候请千万别忘了回到我的评论区留言，让我分享您的成就。</span></p><p id=\"udf622c48\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"></span></p><p id=\"u0668076a\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">关于 monorepo 这个主题，我就暂且带您探索到这里，后会有期：）</span></p><h2 id=\"AH3k4\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80)\">6. 📝 参考文献</span></h2><ol class=\"ne-ol\"><li id=\"ub40d25d9\" data-lake-index-type=\"0\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">📹</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> </span><a href=\"https://frontendmasters.com/courses/monorepos/\" data-href=\"https://frontendmasters.com/courses/monorepos/\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">JavaScript and TypeScript Monorepos</span></a></li><li id=\"uab3e7a44\" data-lake-index-type=\"0\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">📄</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> </span><a href=\"https://www.drmaciver.com/2016/10/why-you-should-use-a-single-repository-for-all-your-companys-projects/\" data-href=\"https://www.drmaciver.com/2016/10/why-you-should-use-a-single-repository-for-all-your-companys-projects/\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">Why you should use a single repository for all your company’s projects</span></a></li><li id=\"u40055e8f\" data-lake-index-type=\"0\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">📄</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> </span><a href=\"https://danluu.com/monorepo/\" data-href=\"https://danluu.com/monorepo/\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">Advantages of monorepos</span></a></li><li id=\"u52725076\" data-lake-index-type=\"0\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">📄</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> </span><a href=\"http://www.sosout.com/2018/07/21/lerna-repo.html\" data-href=\"http://www.sosout.com/2018/07/21/lerna-repo.html\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">lerna管理前端packages的最佳实践</span></a></li><li id=\"ub8abaa01\" data-lake-index-type=\"0\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">📄</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> </span><a href=\"https://zhuanlan.zhihu.com/p/71385053\" data-href=\"https://zhuanlan.zhihu.com/p/71385053\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">基于lerna和yarn workspace的monorepo工作流</span></a></li><li id=\"ud23ae13f\" data-lake-index-type=\"0\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">📄</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> </span><a href=\"https://medium.com/@maoberlehner/monorepos-in-the-wild-33c6eb246cb9\" data-href=\"https://medium.com/@maoberlehner/monorepos-in-the-wild-33c6eb246cb9\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">Monorepos in the Wild</span></a></li><li id=\"ud0ee2495\" data-lake-index-type=\"0\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">📄</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> </span><a href=\"https://medium.com/@mattklein123/monorepos-please-dont-e9a279be011b\" data-href=\"https://medium.com/@mattklein123/monorepos-please-dont-e9a279be011b\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">Monorepos: Please don’t!</span></a></li><li id=\"u7e29b3f5\" data-lake-index-type=\"0\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">📄</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> </span><a href=\"https://medium.com/@adamhjk/monorepo-please-do-3657e08a4b70\" data-href=\"https://medium.com/@adamhjk/monorepo-please-do-3657e08a4b70\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">Monorepo: please do!</span></a></li><li id=\"u27e4c89d\" data-lake-index-type=\"0\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">📄</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> </span><a href=\"https://medium.com/@rachitabansal/introduction-to-lerna-3fb7382a4d4e\" data-href=\"https://medium.com/@rachitabansal/introduction-to-lerna-3fb7382a4d4e\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">Introduction to Lerna</span></a></li><li id=\"u78e07250\" data-lake-index-type=\"0\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">📄</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> </span><a href=\"https://medium.com/@banyudu/mono-repo-%E8%BF%81%E7%A7%BB%E5%AE%9E%E8%B7%B5-eaf955aaf4d7\" data-href=\"https://medium.com/@banyudu/mono-repo-%E8%BF%81%E7%A7%BB%E5%AE%9E%E8%B7%B5-eaf955aaf4d7\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">monorepo 迁移实践</span></a></li></ol><h2 id=\"rr72b\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80)\">7. 👀 扩展阅读</span></h2><ol class=\"ne-ol\"><li id=\"ud8d9e37a\" data-lake-index-type=\"0\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">介绍实践 monorepo 生态：</span><a href=\"https://github.com/korfuri/awesome-monorepo\" data-href=\"https://github.com/korfuri/awesome-monorepo\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">awesome-monorepo</span></a></li><li id=\"u8add4bda\" data-lake-index-type=\"0\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">一篇介绍 Google 如何将数十亿代码通过 monorepo 方式组织的论文：</span><a href=\"https://dl.acm.org/doi/pdf/10.1145/2854146\" data-href=\"https://dl.acm.org/doi/pdf/10.1145/2854146\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">Why Google Stores Billions of Lines of Code in a Single Repository</span></a></li><li id=\"u357be918\" data-lake-index-type=\"0\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">一篇针对 Google 的调研报告，详尽地分析了 monorepo 的优劣：</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> </span><a href=\"https://people.engr.ncsu.edu/ermurph3/papers/seip18.pdf\" data-href=\"https://people.engr.ncsu.edu/ermurph3/papers/seip18.pdf\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">Advantages and Disadvantages of a Monolithic Repository</span></a></li></ol><p id=\"u2d660185\" class=\"ne-p\"><a href=\"https://fed.taobao.org/blog/taofed/do71ct/fc3cy0/\" data-href=\"https://fed.taobao.org/blog/taofed/do71ct/fc3cy0/\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">← 业务系统的稳定性建设</span></a><a href=\"https://fed.taobao.org/blog/taofed/do71ct/mvd9lw/\" data-href=\"https://fed.taobao.org/blog/taofed/do71ct/mvd9lw/\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">Midway Serverless 发布 2.0，一体化让前端研发再次提效 →</span></a></p></div>",
  "body": "<a name=\"y7Xha\"></a>\n## 0. 🧉 前言\n在最近的项目开发中，出现了一个令我困扰的状况。我正在开发的项目 A，依赖了已经线上发布的项目 B，但是随着项目 A 的不断开发，又需要不时修改项目 B 的代码（这些修改暂时不必发布线上），**如何能够在修改项目 B 代码后及时将改动后在项目 A 中同步？** 在项目 A 发布上线后，**如何以一种优雅的方式解决项目 A，B 版本升级后的版本同步问题？** 经过一番调研，我发现解决这些问题的最佳方案便是本篇要介绍的 monorepo 策略。\n<a name=\"L7RVD\"></a>\n## 1. 🤔 什么是 monorepo 策略？\nmonorepo 是一种**将多个项目代码存储在一个仓库里的软件开发策略**（\"mono\" 来源于希腊语 μόνος 意味**单个的**，而 \"repo\"，显而易见地，是 repository 的缩写）。将不同的项目的代码放在同一个代码仓库中，这种「把鸡蛋放在同一个篮子里」的做法可能乍看之下有些奇怪，但实际上，这种代码管理方式有很多好处，无论是世界一流的互联网企业 Google，Facebook，还是社区知名的开源项目团队 Babel （如下图）都使用了 monorepo 策略管理他们的代码。<br />![image.png](https://cdn.nlark.com/yuque/0/2022/png/732231/1647256879439-9a659711-4588-4201-80d6-730a1f1f1693.png#averageHue=%231b212c&clientId=u6e488e0c-be68-4&from=paste&id=ub5cf2a21&originHeight=505&originWidth=1080&originalType=url&ratio=1&rotation=0&showTitle=false&size=444141&status=done&style=none&taskId=uf08fc90e-1b70-4c17-8653-ff5b3a4eb2d&title=)<br />babel 使用 monorepo 策略管理代码<br />**使用 monorepo 策略究竟会给代码管理者和程序开发者带来哪些好处？** **我们又该如何在工作中尝试实践 monorepo 策略？**这正是本文想要探讨的话题。希望通过我的一番介绍，您能够对 monorepo 策略有更完整的认知，文章中介绍的工具和思想可以切实帮助到您和您所在的团队。\n<a name=\"PYzo6\"></a>\n## 2. 🌗 monorepo 策略的优劣\n通过 monorepo 策略组织代码，您代码仓库的目录结构看起来会是这样：\n```markdown\n.\n├── lerna.json\n├── package.json\n└── packages/ # 这里将存放所有子 repo 目录\n    ├── project_1/\n    │   ├── index.js\n    │   ├── node_modules/\n    │   └── package.json\n    ├── project_2/\n    │   ├── index.js\n    │   ├── node_module/\n    │   └── package.json\n    ...\n```\n乍看起来，所谓的 monorepo 策略就只是将不同项目的目录汇集到一个目录之下，但实际上操作起来所要考虑的事情则远比看起来要复杂得多。通过分析使用 monorepo 策略的优劣，我们可以更直观的感受到这里面所隐晦涉及的知识点。\n<a name=\"AdDAF\"></a>\n### 2.1 monorepo 方案的优势\n\n1. **代码重用将变得非常容易**：由于所有的项目代码都集中于一个代码仓库，我们将很容易抽离出各个项目共用的业务组件或工具，并通过 TypeScript，Lerna 或其他工具进行代码内引用；\n2. **依赖管理将变得非常简单**：同理，由于项目之间的引用路径内化在同一个仓库之中，我们很容易追踪当某个项目的代码修改后，会影响到其他哪些项目。通过使用一些工具，我们将很容易地做到版本依赖管理和版本号自动升级；\n3. **代码重构将变得非常便捷**：想想究竟是什么在阻止您进行代码重构，很多时候，原因来自于「不确定性」，您不确定对某个项目的修改是否对于其他项目而言是「致命的」，出于对未知的恐惧，您会倾向于不重构代码，这将导致整个项目代码的腐烂度会以惊人的速度增长。而在 monorepo 策略的指导下，您能够明确知道您的代码的影响范围，并且能够对被影响的项目可以进行统一的测试，这会鼓励您不断优化代码；\n4. **它倡导了一种开放，透明，共享的组织文化，这有利于开发者成长，代码质量的提升**：在 monorepo 策略下，每个开发者都被鼓励去查看，修改他人的代码（只要有必要），同时，也会激起开发者维护代码，和编写单元测试的责任心（毕竟朋友来访之前，我们从不介意自己的房子究竟有多乱），这将会形成一种良性的技术氛围，从而保障整个组织的代码质量。\n<a name=\"exmaS\"></a>\n### 2.2 monorepo 方案的劣势\n\n1. **项目粒度的权限管理变得非常复杂**：无论是 Git 还是其他 VCS 系统，在支持 monorepo 策略中项目粒度的权限管理上都没有令人满意的方案，这意味着 A 部门的 a 项目若是不想被 B 部门的开发者看到就很难了。（好在我们可以将 monorepo 策略实践在「项目级」这个层次上，这才是我们这篇文章的主题，我们后面会再次明确它）；\n2. **新员工的学习成本变高**：不同于一个项目一个代码仓库这种模式下，组织新人只要熟悉特定代码仓库下的代码逻辑，在 monorepo 策略下，新人可能不得不花更多精力来理清各个代码仓库之间的相互逻辑，当然这个成本可以通过新人文档的方式来解决，但维护文档的新鲜又需要消耗额外的人力；\n3. **对于公司级别的 monorepo 策略而言，需要专门的 VFS 系统，自动重构工具的支持**：设想一下 Google 这样的企业是如何将十亿行的代码存储在一个仓库之中的？开发人员每次拉取代码需要等待多久？各个项目代码之间又如何实现权限管理，敏捷发布？任何简单的策略乘以足够的规模量级都会产生一个奇迹（不管是好是坏），对于中小企业而言，如果没有像 Google，Facebook 这样雄厚的人力资源，把所有项目代码放在同一个仓库里这个美好的愿望就只能是个空中楼阁。\n<a name=\"f8oq1\"></a>\n### 2.3 小结：如何取舍？\n没错，软件开发领域从来没有「银弹」。monorepo 策略也并不完美，并且，我在实践中发现，要想完美在组织中运用 monorepo 策略，所需要的不仅是出色的编程技巧和耐心。**团队日程**，**组织文化**和**个人影响力**相互碰撞的最终结果才决定了想法最终是否能被实现。\n\n但是请别灰心的太早，因为虽然让组织作出改变，统一施行 monorepo 策略困难重重，但这却并不意味着我们需要彻底跟 monorepo 策略说再见（否则我这篇文章就该到此为止了）。我们还可以**把 monorepo 策略实践在「项目」这个级别**，即从逻辑上确定项目与项目之间的关联性，然后把相关联的项目整合在同一个仓库下，通常情况下，我们不会有太多相互关联的项目，这意味着我们能够免费得到 monorepo 策略的所有好处，并且可以拒绝支付大型 monorepo 架构的利息。\n\n本文的剩余篇幅就是对「项目级别 monorepo 实践」的一些总结，即使您最终没有选择 monorepo 策略组织您的代码，相信文章中提供的一些工程化工具或思路也一样会对您产生帮助。\n<a name=\"HgfwO\"></a>\n## 3. 🧑🏻‍💻 monorepo 方案实践\n<a name=\"X3AbB\"></a>\n### 3.1 锁定环境：Volta\n![image.png](https://cdn.nlark.com/yuque/0/2022/png/732231/1647256879064-51b0ea9d-4fae-414a-9daa-25d2b8636bbe.png#averageHue=%23e2e2e2&clientId=u6e488e0c-be68-4&from=paste&id=u51dc6b27&originHeight=288&originWidth=606&originalType=url&ratio=1&rotation=0&showTitle=false&size=42541&status=done&style=none&taskId=uade973cc-b970-4792-9626-f96d2cf89fd&title=)<br />[Volta](https://volta.sh/) 是一个 JavaScript 工具管理器，它可以让我们轻松地在项目中锁定 node，npm 和 yarn 的版本。你只需在安装完 Volta 后，在项目的根目录中执行 volta pin 命令，那么无论您当前使用的 node 或 npm（yarn）版本是什么，volta 都会自动切换为您指定的版本。\n\n因此，除了使用 Docker 和显示在文档中声明 node 和 npm（yarn）的版本之外，您就有了另一个锁定环境的强力工具。\n\n而且相较于 nvm，Volta 还具有一个诱人的特性：当您项目的 CLI 工具与全局 CLI 工具不一致时，Volta 可以做到在项目根目录下自动识别，切换到项目指定的版本，这一切都是由 Volta 默默做到的，开发者不必关心任何事情。\n<a name=\"LD202\"></a>\n### 3.2 复用 packages：workspace\n使用 monorepo 策略后，收益最大的两点是：\n\n1. **避免重复安装包，因此减少了磁盘空间的占用，并降低了构建时间**；\n2. **内部代码可以彼此相互引用**；\n\n这两项好处全部都可以由一个成熟的包管理工具来完成，对前端开发而言，即是 yarn（1.0 以上）或 npm（7.0 以上）通过名为 workspaces 的特性实现的（⚠️ 注意，支持 workspaces 特性的 npm 目前依旧不是 TLS 版本）。\n\n为了实现前面提到的两点收益，您需要在代码中做三件事：\n\n1. 调整目录结构，将相互关联的项目放置在同一个目录，推荐命名为 `packages`；\n2. 在项目根目录里的 `package.json` 文件中，设置 `workspaces` 属性，属性值为之前创建的目录；\n3. 同样，在 `package.json` 文件中，设置 `private` 属性为 `true` (为了避免我们误操作将仓库发布)；\n\n经过修改，您的项目目录看起来应该是这样：\n```markdown\n.\n├── package.json\n└── packages/\n    ├── @mono/project_1/ # 推荐使用 `@<项目名>/<子项目名>` 的方式命名\n    │   ├── index.js\n    │   └── package.json\n    └── @mono/project_2/\n        ├── index.js\n        └── package.json\n```\n而当您在项目根目录中执行 npm install 或 yarn install后，您会发现在项目根目录中出现了 node_modules 目录，并且该目录不仅拥有所有子项目共用的 npm 包，还包含了我们的子项目。因此，我们可以在子项目中通过各种模块引入机制，像引入一般的 npm 模块一样引入其他子项目的代码。\n\n请注意我们对子项目的命名，统一以 @<repo_name>/ 开头，这是一种社区最佳实践，不仅可以让用户更容易了解整个应用的架构，也方便您在项目中更快捷的找到所需的子项目。\n\n至此，我们已经完成了 monorepo 策略的核心部分，实在是很容易不是吗？但是老话说「行百里者半九十」，距离优雅的搭建一个 monorepo 项目，我们还有一些路要走。\n<a name=\"T9loK\"></a>\n### 3.3 统一配置：合并同类项 - Eslint，Typescript 与 Babel\n您一定同意，编写代码要遵循 DRY 原则（Don't Repeat Yourself 的缩写）。那么，理所当然地，我们应该尽量避免在多个子项目中放置重复的 eslintrc，tsconfig 等配置文件。幸运的是，Babel，Eslint 和 Typescript 都提供了相应的功能让我们减少自我重复。\n<a name=\"AqDWx\"></a>\n#### 3.3.1 TypeScript\n我们可以在 packages 目录中放置 tsconfig.settting.json 文件，并在文件中定义通用的 ts 配置，然后，在每个子项目中，我们可以通过 extends 属性，引入通用配置，并设置 compilerOptions.composite 的值为 true，理想情况下，子项目中的 tsconfig 文件应该仅包含下述内容：\n```json\n{\n  \"extends\": \"../tsconfig.setting.json\", // 继承 packages 目录下通用配置\n  \"compilerOptions\": {\n    \"composite\": true, // 用于帮助 TypeScript 快速确定引用工程的输出文件位置\n    \"outDir\": \"dist\",\n    \"rootDir\": \"src\"\n  },\n  \"include\": [\"src\"]\n}\n```\n<a name=\"aP7kn\"></a>\n#### 3.3.2 Eslint\n对于 Eslint 配置文件，我们也可以如法炮制，这样定义子项目的 .eslintrc 文件内容：\n```json\n{\n  \"extends\": \"../../.eslintrc\", // 注意这里的不同\n  \"parserOptions\": {\n    \"project\": \"tsconfig.json\"\n  }\n}\n```\n注意到了吗，对于通用的 eslint 配置，我们并没有将其放置在 packages 目录中，而是放在整个项目的根目录下，这样做是因为一些编辑器插件只会在项目根目录寻找 .eslintrc 文件，因此为了我们的项目能够保持良好的「开发环境一致性」，请务必将通用配置文件放置在项目的根目录中。\n<a name=\"x0oWt\"></a>\n#### 3.3.3 Babel\nBabel 配置文件合并的方式与 TypeScript 如出一辙，甚至更加简单，我们只需在子项目中的 .babelrc 文件中这样声明即可：\n```json\n{\n  \"extends\": \"../.babelrc\"\n}\n```\n当一切准备就绪后，我们的项目目录应该大致呈如下所示的结构：\n```markdown\n.\n├── package.json\n├── .eslintrc\n└── packages/\n    │   ├── tsconfig.settings.json\n    │   ├── .babelrc\n    ├── @mono/project_1/\n    │   ├── index.js\n    │   ├── .eslintrc\n    │   ├── .babelrc\n    │   ├── tsconfig.json\n    │   └── package.json\n    └───@mono/project_2/\n        ├── index.js\n        ├── .eslintrc\n        ├── .babelrc\n        ├── tsconfig.json\n        └── package.json\n```\n<a name=\"hBZeX\"></a>\n### 3.4 统一命令脚本：scripty\n在上一步中，我们尽可能的将所有配置文件进行抽象，从而精简了代码，并提高了整个项目的一致性。我们的整个仓库也因此有了「更浓郁的 monorepo 风味 ☕️」。但如果仔细审视我们的整个工程文件，还有一处存在着明显的瑕疵和一些恼人的坏味道，当您仔细审视您的众多 package.json 文件时，您就知道我在说什么了 -- scripts 脚本。\n\n如果您的子项目足够多，您可能会发现，每个 package.json 文件中的 scripts 属性都大同小异，并且一些 scripts 充斥着各种 Linux 语法，例如管道操作符，重定向或目录生成。**重复带来低效，复杂则使人难以理解**，这都是需要我们解决的问题。\n\n这里给出的解决方案是，使用 [scripty](https://www.npmjs.com/package/scripty) 管理您的脚本命令，简单来说，scripty 允许您将脚本命令定义在文件中，并在 package.json 文件中直接通过文件名来引用。这使我们可以实现如下目的：\n\n1. **子项目间复用脚本命令**；\n2. **像写代码一样编写脚本命令，无论它有多复杂，而在调用时，像调用函数一样调用**；\n\n通过使用 scripty 管理我们的 monorepo 应用，目录结构看起来将会是这样：\n```markdown\n.\n├── package.json\n├── .eslintrc\n├── scirpts/ # 这里存放所有的脚本\n│   │   ├── packages/ # 包级别脚本\n│   │   │   ├── build.sh\n│   │   │   └── test.sh\n│   └───└── workspaces/ # 全局脚本\n│           ├── build.sh\n│           └── test.sh\n└── packages/\n    │   ├── tsconfig.settings.json\n    │   ├── .babelrc\n    ├── @mono/project_1/\n    │   ├── index.js\n    │   ├── .eslintrc\n    │   ├── .babelrc\n    │   ├── tsconfig.json\n    │   └── package.json\n    └── @mono/project_2/\n        ├── index.js\n        ├── .eslintrc\n        ├── .babelrc\n        ├── tsconfig.json\n        └── package.json\n```\n注意，我们脚本分为两类「package 级别」与「workspace 级别」，并且分别放在两个文件夹内。这样做的好处在于，我们既可以在项目根目录执行全局脚本，也可以针对单个项目执行特定的脚本。\n\n通过使用 scripty，子项目的 package.json 文件中的 scripts 属性将变得非常精简：\n```json\n{\n  ...\n  \"scripts\": {\n    \"test\": \"scripty\",\n    \"lint\": \"scripty\",\n    \"build\": \"scripty\"\n  },\n  \"scripty\": {\n    \"path\": \"../../scripts/packages\" // 注意这里我们指定了 scripty 的路径\n  },\n  ...\n}\n```\n大功告成！🎉 至此，我们尽己所能地删除了整个项目中的重复代码，让整个项目变得干净，清爽并且有极强的复用性。\n:::info\n🧉 小贴士：<br />别忘了使用 chmod -R u+x scripts 命令使所有的 shell 脚本具备可执行权限，也千万别忘了把这条贴士写在您的 README.md 文件中！\n:::\n<a name=\"ofYMs\"></a>\n### 3.5 统一包管理：Lerna\n![image.png](https://cdn.nlark.com/yuque/0/2022/png/732231/1647256879285-b37f124c-5c57-402f-aa35-654d7e9a5b09.png#clientId=u6e488e0c-be68-4&from=paste&id=ue5da8ee4&originHeight=868&originWidth=960&originalType=url&ratio=1&rotation=0&showTitle=false&size=198846&status=done&style=none&taskId=uf6bcf63b-6c9a-4f2d-a53e-9f2cafc258e&title=)<br />图片来源：https://github.com/lerna/lerna<br />我有时会感慨自己的灵感匮乏，怎么就想不到 Lerna 这样既有神话色彩又能自我释义的好名字。您可以大胆想象，九头龙的每只龙头都在帮您管理着一个子项目，而您只需要骑在龙身上发号施令的场景，这基本上就是我们使用 Lerna 时的直观感受。\n\n这也是为什么当我们提起 monorepo 策略，就几乎不得不提到 Lerna 的原因了，它的确提供了一种非常便捷的方式供我们管理 monorepo 项目。当子项目越多时，Lerna 就越能显示其威力。\n\n当多个子项目放在一个代码仓库，并且子项目之间又相互依赖时，我们面临的棘手问题有两个：\n\n1. **如果我们需要在多个子目录执行相同的命令，我们需要手动进入各个目录，并执行命令**；\n2. **当一个子项目更新后，我们只能手动追踪依赖该项目的其他子项目，并升级其版本**。\n\n通过使用 Lerna，这些棘手的问题都将不复存在。\n\n当在项目根目录使用 npx lerna init 初始化后，我们的根目录会新增一个 lerna.json 文件，默认内容为：\n```json\n{\n  \"packages\": [\"packages/*\"],\n  \"version\": \"0.0.0\"\n}\n```\n让我们稍稍改动这个文件，使其变为：\n```json\n{\n  \"packages\": [\"packages/*\"],\n  \"npmClient\": \"yarn\",\n  \"version\": \"independent\",\n  \"useWorkspaces\": true,\n}\n```\n可以注意到，我们显示声明了我们的包客户端（npmClient）为 yarn，并且让 Lerna 追踪我们 workspaces 设置的目录，这样我们就依旧保留了之前 workspaces 的所有特性（**子项目引用**和**通用包提升**）。\n\n除此之外一个有趣的改动在于我们将 version 属性指定为一个关键字 independent，这将告诉 lerna 应该**将每个子项目的版本号看作是相互独立的**。当某个子项目代码更新后，运行 lerna publish 时，Lerna 将监听到代码变化的子项目并以交互式 CLI 方式让开发者决定需要升级的版本号，关联的子项目版本号不会自动升级，反之，当我们填入固定的版本号时，则任一子项目的代码变动，都会导致所有子项目的版本号基于当前指定的版本号升级。\n\nLerna 提供了很多 CLI 命令以满足我们的各种需求，但根据 2/8 法则，您应该首先关注以下这些命令：\n\n- lerna bootstrap：等同于 lerna link + yarn install，用于创建符合链接并安装依赖包；\n- lerna run：会像执行一个 for 循环一样，在所有子项目中执行 npm script 脚本，并且，它会非常智能的识别依赖关系，并从根依赖开始执行命令；\n- lerna exec：像 lerna run 一样，会按照依赖顺序执行命令，不同的是，它可以执行任何命令，例如 shell 脚本；\n- lerna publish：发布代码有变动的 package，因此首先您需要在使用 Lerna 前使用 git commit 命令提交代码，好让 Lerna 有一个 baseline；\n- lerna add：将本地或远程的包作为依赖添加至当前的 monorepo 仓库中，该命令让 Lerna 可以识别并追踪包之间的依赖关系，因此非常重要；\n```shell\n# 向 @mono/project2 和 @mono/project3 中添加 @mono/project1\nlerna add @mono/project1 '@mono/project{2,3}'\n```\n<a name=\"RVo0W\"></a>\n#### 3.5.1 Lerna 高级命令\n除了上面介绍到的常用命令外，Lerna 还提供了一些参数满足我们更灵活的需求，例如：\n\n- `--concurrency <number>`：参数可以使 Lerna 利用计算机上的多个核心，并发运行，从而提升构建速度；\n- `--scope '@mono/{pkg1,pkg2}'`：`--scope` 参数可以指定 Lerna 命令的运行环境，通过使用该参数，Lerna 将不再是一把梭的在所有仓库中执行命令，而是可以精准地在我们所指定的仓库中执行命令，并且还支持示例中的模版语法；\n- `--stream`：该参数可使我们查看 Lerna 运行时的命令执行信息；\n<a name=\"H2jG7\"></a>\n#### 3.5.2 npm 包本地发布：Verdaccio\n![image.png](https://cdn.nlark.com/yuque/0/2022/png/732231/1647256879198-723cfae0-eff1-4e23-badf-d72662510765.png#clientId=u6e488e0c-be68-4&from=paste&id=uf92c71f3&originHeight=200&originWidth=602&originalType=url&ratio=1&rotation=0&showTitle=false&size=19855&status=done&style=none&taskId=ua7005d7d-7f74-48b0-bbb9-2c669bd2556&title=)<br />看到这里，您可能想要亲自体验一把使用 Lerna 管理/发布 monorepo 项目的感觉。可是很快您会发现，将示例代码发布到真实世界的 npm 仓库并非一个好主意，这多少有些令人沮丧，但是别担心，您可以使用 [Verdaccio](https://verdaccio.org/) 在本地创建一个 npm 仓库作为代理，然后尽情体验 Lerna 的种种强大之处。\n\n安装运行 Verdaccio 非常简单，您只需运行：\n```shell\nnpm install --global verdaccio\n```\n在全局安装 Verdaccio 应用，然后在 shell 中输入：\n```shell\nverdaccio\n```\n即可通过 localhost:4837 访问您的本地代理 npm 仓库，别忘了在您的项目根目录创建 .npmrc 文件，并在文件中将 npm 仓库地址改写为您的本地代理地址：\n```shell\nregistry=\"http://localhost:4873/\"\n```\n大功告成 🙌！每当您执行 `lerna publish` 时，子项目所构建成的 package 将会发布在本地 npm 仓库中，而当您执行 lerna bootstrap 时，Verdaccio 将会放行，让您成功从远程 npm 仓库中拉取相应的代码。\n<a name=\"PBkdJ\"></a>\n### 3.6 格式化 commit 信息\n至此，我们已经掌握了组织一个项目级 monorepo 仓库的所有前沿技巧，最后，让我们看看最后一个可以优化的地方：**代码提交时，约束 commit 信息**。\n\n一个 monorepo 仓库可能被**不同的开发者提交不同子项目**的代码，如果没有规范化的 commit 信息，在故障排查或版本回滚时毫无意外会遭遇灾难。因此，千万不要小看 commit 信息格式化的重要性（当然，同样重要的还有代码注释！）。\n\n为了我们能够一目了然的追踪每次代码变更的信息，我们使用 [commitlint](https://github.com/conventional-changelog/commitlint/#what-is-commitlint) 工具作为格式化 commit 信息的不二之选。\n\n顾名思义，`commitlint` 可以帮助我们检查提交的 commit 信息，它强制约束我们的 commit 信息必须在开头附加指定类型，用于标示本次提交的大致意图，支持的类型关键字有：\n\n- `feat`：表示添加一个新特性；\n- `chore`：表示做了一些与特性和修复无关的「家务事」；\n- `fix`：表示修复了一个 Bug；\n- `refactor`：表示本次提交是因为重构了代码；\n- `style`：表示代码美化或格式化；\n- ...\n\n我强烈建议您遵循该规范编写您的 commit 信息，不要偷懒，坚持下去，您的 git 日志将会显得整齐，有条理，富有表现力，同时，您也会收到同行的交口称赞，人人都会以和您这样优雅的工程师合作为荣。\n\n除了限定 commit 信息类型外，commitlint 还支持（虽然不是必须的）显示指定我们本次提交所对应的子项目名称。假如我们有一个名为 `@mono/project1` 的子项目，我们针对该项目提交的 commit 信息可以写为：\n```shell\ngit commit -m \"feat(project1): add a attractive button\" # 注意，我们省略了 @mono 的项目前缀\n```\n毫无疑问，这将会使我们的 commit 信息更具表现力。\n\n我们可以通过下面的命令安装 commitlint 以及周边依赖：\n```shell\nnpm i -D @commitlint/cli @commitlint/config-conventional @commitlint/config-lerna-scopes commitlint husky lerna-changelog\n```\n注意到了吗？我偷偷安装了 [husky](https://www.npmjs.com/package/husky)，它能够帮助我们在提交 commit 信息时自动运行 commitlint 进行检查，但在这之前，我们需要再在根目录下的 `package.json` 文件里加点料，像这样：\n```json\n{\n ...\n \"husky\": {\n    \"hooks\": {\n      \"commit-msg\": \"commitlint -E HUSKY_GIT_PARAMS\"\n    }\n  }\n ...\n}\n```\n为了能够让 commitlint 感知我们的子项目名称，我们还需在项目根目录中增加 commitlint.config.js 文件，并设置文件内容为：\n```javascript\nmodule.exports = {\n  extends: [\n    \"@commitlint/config-conventional\",\n    \"@commitlint/config-lerna-scopes\",\n  ],\n};\n```\n至此，我们统一并规范化了 monorepo 项目的 commit 信息，终于整个 monorepo 工程化的最后一块拼图被我们拼上了！<br />（顺便一提，您可以通过在命令行执行 `echo \"build(project1): change something\" | npx commitlint` 命令即可验证您的 commit 信息是否通过 commitlint 的检查。）\n<a name=\"tkldY\"></a>\n## 4. 🚚 如何从 multirepo 迁移至使用 monorepo 策略？\n至此，我们学会了如何采用 monorepo 策略组织项目代码的最佳实践，或许您已经开始跃跃欲试想要尝试前文提到的种种技巧。从 0 搭建一个 monorepo 项目，当然没问题！可是如果要基于已有的项目，将其转化为一个使用 monorepo 策略的项目呢？\n\n还记得吗？成百里者半九十，您还有一些坑要踩。不过好在您在这里还能够得到我的帮助，不必客气！\n\n或许您注意到了，Lerna 为我们提供了 lerna import 命令，用来将我们已有的包导入到 monorepo 仓库，并且还会保留该仓库的所有 commit 信息。然而实际上，该命令仅支持**导入本地项目**，并且**不支持**导入项目的分支和标签 🙃。\n\n那么如果我们想要导入远程仓库，或是要获取某个分支或标签该怎么做呢？答案是使用 [tomono](https://github.com/hraban/tomono)，其内容是一个 shell 脚本。\n\n使用 tomono 导入远程仓库，您所需要做的只有两件事：\n\n1. 创建一个包含所有需要导入 repo 地址的文本文件；\n2. 执行 shell 命令：`cat repos.txt | ~/tomono/tomono.sh`（这里我们假定您的文本文件名为 `repos.txt`，且您将 tomono 下载在用户根目录；\n\nrepo 文件内容示例如下：\n```shell\n// 1. Git仓库地址  2. 子项目名称  3. 迁移后的路径\ngit@github.com/backend.git @mono/backend packages/backend\ngit@github.com/frontend.git @mono/frontend packages/frontend\ngit@github.com/mobile.git @mono/mobile packages/mobile\n```\n至此，我们也掌握了将现有项目迁移至 `monorepo` 项目的方法。到这时候，您已绝非再是 `monorepo` 界的门外汉！<br />恭喜您 ！！🎉\n<a name=\"btmKj\"></a>\n## 5. 🎓 小结\n在本篇文章中，我们共同了解了「**什么是 monorepo 策略**」以及「**monorepo 策略的优劣**」，并且一起学习实践了 monorepo 策略的一些最佳实践。您一定也意识到，即使您的工作场景暂时无法实践 monorepo 策略，阅读本篇文章所学习到的种种方法，工具和思想也可以运用到您当下的工作之中。\n\n当然，本文所介绍的这些方法和思想总有过时的一天，并且社区也从未停止对更好地实践 monorepo 策略的探索，说不定您过一阵子就会有更好的想法 ，填补某个领域的空白。希望到时候您也能总结出一篇文章，为 JavaScript 社区贡献一份力量。到时候请千万别忘了回到我的评论区留言，让我分享您的成就。\n\n关于 monorepo 这个主题，我就暂且带您探索到这里，后会有期：）\n<a name=\"AH3k4\"></a>\n## 6. 📝 参考文献\n\n1. 📹 [JavaScript and TypeScript Monorepos](https://frontendmasters.com/courses/monorepos/)\n2. 📄 [Why you should use a single repository for all your company’s projects](https://www.drmaciver.com/2016/10/why-you-should-use-a-single-repository-for-all-your-companys-projects/)\n3. 📄 [Advantages of monorepos](https://danluu.com/monorepo/)\n4. 📄 [lerna管理前端packages的最佳实践](http://www.sosout.com/2018/07/21/lerna-repo.html)\n5. 📄 [基于lerna和yarn workspace的monorepo工作流](https://zhuanlan.zhihu.com/p/71385053)\n6. 📄 [Monorepos in the Wild](https://medium.com/@maoberlehner/monorepos-in-the-wild-33c6eb246cb9)\n7. 📄 [Monorepos: Please don’t!](https://medium.com/@mattklein123/monorepos-please-dont-e9a279be011b)\n8. 📄 [Monorepo: please do!](https://medium.com/@adamhjk/monorepo-please-do-3657e08a4b70)\n9. 📄 [Introduction to Lerna](https://medium.com/@rachitabansal/introduction-to-lerna-3fb7382a4d4e)\n10. 📄 [monorepo 迁移实践](https://medium.com/@banyudu/mono-repo-%E8%BF%81%E7%A7%BB%E5%AE%9E%E8%B7%B5-eaf955aaf4d7)\n<a name=\"rr72b\"></a>\n## 7. 👀 扩展阅读\n\n1. 介绍实践 monorepo 生态：[awesome-monorepo](https://github.com/korfuri/awesome-monorepo)\n2. 一篇介绍 Google 如何将数十亿代码通过 monorepo 方式组织的论文：[Why Google Stores Billions of Lines of Code in a Single Repository](https://dl.acm.org/doi/pdf/10.1145/2854146)\n3. 一篇针对 Google 的调研报告，详尽地分析了 monorepo 的优劣： [Advantages and Disadvantages of a Monolithic Repository](https://people.engr.ncsu.edu/ermurph3/papers/seip18.pdf)\n\n[← 业务系统的稳定性建设](https://fed.taobao.org/blog/taofed/do71ct/fc3cy0/)[Midway Serverless 发布 2.0，一体化让前端研发再次提效 →](https://fed.taobao.org/blog/taofed/do71ct/mvd9lw/)\n",
  "body_html": "<!doctype html><div class=\"lake-content\" typography=\"classic\"><h2 id=\"y7Xha\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80)\">0. 🧉 前言</span></h2><p id=\"u63b365a1\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">在最近的项目开发中，出现了一个令我困扰的状况。我正在开发的项目 A，依赖了已经线上发布的项目 B，但是随着项目 A 的不断开发，又需要不时修改项目 B 的代码（这些修改暂时不必发布线上），</span><strong><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">如何能够在修改项目 B 代码后及时将改动后在项目 A 中同步？</span></strong><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> </span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">在项目 A 发布上线后，</span><strong><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">如何以一种优雅的方式解决项目 A，B 版本升级后的版本同步问题？</span></strong><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> </span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">经过一番调研，我发现解决这些问题的最佳方案便是本篇要介绍的 monorepo 策略。</span></p><h2 id=\"L7RVD\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80)\">1. 🤔 什么是 monorepo 策略？</span></h2><p id=\"u1a9edb50\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">monorepo 是一种</span><strong><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">将多个项目代码存储在一个仓库里的软件开发策略</span></strong><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">（&quot;mono&quot; 来源于希腊语 μόνος 意味</span><strong><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">单个的</span></strong><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">，而 &quot;repo&quot;，显而易见地，是 repository 的缩写）。将不同的项目的代码放在同一个代码仓库中，这种「把鸡蛋放在同一个篮子里」的做法可能乍看之下有些奇怪，但实际上，这种代码管理方式有很多好处，无论是世界一流的互联网企业 Google，Facebook，还是社区知名的开源项目团队 Babel （如下图）都使用了 monorepo 策略管理他们的代码。</span></p><p id=\"ud30eecf9\" class=\"ne-p\"><img src=\"https://cdn.nlark.com/yuque/0/2022/png/732231/1647256879439-9a659711-4588-4201-80d6-730a1f1f1693.png\" width=\"1080\" id=\"ub5cf2a21\" class=\"ne-image\"></p><p id=\"uef73b521\" class=\"ne-p\" style=\"text-align: center\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">babel 使用 monorepo 策略管理代码</span></p><p id=\"udf974a30\" class=\"ne-p\"><strong><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">使用 monorepo 策略究竟会给代码管理者和程序开发者带来哪些好处？</span></strong><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> </span><strong><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">我们又该如何在工作中尝试实践 monorepo 策略？</span></strong><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">这正是本文想要探讨的话题。希望通过我的一番介绍，您能够对 monorepo 策略有更完整的认知，文章中介绍的工具和思想可以切实帮助到您和您所在的团队。</span></p><h2 id=\"PYzo6\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80)\">2. 🌗 monorepo 策略的优劣</span></h2><p id=\"ub61018d1\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">通过 monorepo 策略组织代码，您代码仓库的目录结构看起来会是这样：</span></p><pre data-language=\"markdown\" id=\"K3rF8\" class=\"ne-codeblock language-markdown\"><code>.\n├── lerna.json\n├── package.json\n└── packages/ # 这里将存放所有子 repo 目录\n    ├── project_1/\n    │   ├── index.js\n    │   ├── node_modules/\n    │   └── package.json\n    ├── project_2/\n    │   ├── index.js\n    │   ├── node_module/\n    │   └── package.json\n    ...</code></pre><p id=\"u1f9b5225\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">乍看起来，所谓的 monorepo 策略就只是将不同项目的目录汇集到一个目录之下，但实际上操作起来所要考虑的事情则远比看起来要复杂得多。通过分析使用 monorepo 策略的优劣，我们可以更直观的感受到这里面所隐晦涉及的知识点。</span></p><h3 id=\"AdDAF\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80)\">2.1 monorepo 方案的优势</span></h3><ol class=\"ne-ol\"><li id=\"u914e2851\" data-lake-index-type=\"0\"><strong><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">代码重用将变得非常容易</span></strong><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">：由于所有的项目代码都集中于一个代码仓库，我们将很容易抽离出各个项目共用的业务组件或工具，并通过 TypeScript，Lerna 或其他工具进行代码内引用；</span></li><li id=\"u8cd9ea44\" data-lake-index-type=\"0\"><strong><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">依赖管理将变得非常简单</span></strong><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">：同理，由于项目之间的引用路径内化在同一个仓库之中，我们很容易追踪当某个项目的代码修改后，会影响到其他哪些项目。通过使用一些工具，我们将很容易地做到版本依赖管理和版本号自动升级；</span></li><li id=\"ucfe69ff5\" data-lake-index-type=\"0\"><strong><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">代码重构将变得非常便捷</span></strong><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">：想想究竟是什么在阻止您进行代码重构，很多时候，原因来自于「不确定性」，您不确定对某个项目的修改是否对于其他项目而言是「致命的」，出于对未知的恐惧，您会倾向于不重构代码，这将导致整个项目代码的腐烂度会以惊人的速度增长。而在 monorepo 策略的指导下，您能够明确知道您的代码的影响范围，并且能够对被影响的项目可以进行统一的测试，这会鼓励您不断优化代码；</span></li><li id=\"ud5e982df\" data-lake-index-type=\"0\"><strong><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">它倡导了一种开放，透明，共享的组织文化，这有利于开发者成长，代码质量的提升</span></strong><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">：在 monorepo 策略下，每个开发者都被鼓励去查看，修改他人的代码（只要有必要），同时，也会激起开发者维护代码，和编写单元测试的责任心（毕竟朋友来访之前，我们从不介意自己的房子究竟有多乱），这将会形成一种良性的技术氛围，从而保障整个组织的代码质量。</span></li></ol><h3 id=\"exmaS\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80)\">2.2 monorepo 方案的劣势</span></h3><ol class=\"ne-ol\"><li id=\"u2b65e375\" data-lake-index-type=\"0\"><strong><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">项目粒度的权限管理变得非常复杂</span></strong><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">：无论是 Git 还是其他 VCS 系统，在支持 monorepo 策略中项目粒度的权限管理上都没有令人满意的方案，这意味着 A 部门的 a 项目若是不想被 B 部门的开发者看到就很难了。（好在我们可以将 monorepo 策略实践在「项目级」这个层次上，这才是我们这篇文章的主题，我们后面会再次明确它）；</span></li><li id=\"u99341738\" data-lake-index-type=\"0\"><strong><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">新员工的学习成本变高</span></strong><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">：不同于一个项目一个代码仓库这种模式下，组织新人只要熟悉特定代码仓库下的代码逻辑，在 monorepo 策略下，新人可能不得不花更多精力来理清各个代码仓库之间的相互逻辑，当然这个成本可以通过新人文档的方式来解决，但维护文档的新鲜又需要消耗额外的人力；</span></li><li id=\"u2f9d68bc\" data-lake-index-type=\"0\"><strong><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">对于公司级别的 monorepo 策略而言，需要专门的 VFS 系统，自动重构工具的支持</span></strong><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">：设想一下 Google 这样的企业是如何将十亿行的代码存储在一个仓库之中的？开发人员每次拉取代码需要等待多久？各个项目代码之间又如何实现权限管理，敏捷发布？任何简单的策略乘以足够的规模量级都会产生一个奇迹（不管是好是坏），对于中小企业而言，如果没有像 Google，Facebook 这样雄厚的人力资源，把所有项目代码放在同一个仓库里这个美好的愿望就只能是个空中楼阁。</span></li></ol><h3 id=\"f8oq1\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80)\">2.3 小结：如何取舍？</span></h3><p id=\"u6f25f1c4\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">没错，软件开发领域从来没有「银弹」。monorepo 策略也并不完美，并且，我在实践中发现，要想完美在组织中运用 monorepo 策略，所需要的不仅是出色的编程技巧和耐心。</span><strong><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">团队日程</span></strong><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">，</span><strong><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">组织文化</span></strong><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">和</span><strong><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">个人影响力</span></strong><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">相互碰撞的最终结果才决定了想法最终是否能被实现。</span></p><p id=\"u465bbf05\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"></span></p><p id=\"u81c89532\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">但是请别灰心的太早，因为虽然让组织作出改变，统一施行 monorepo 策略困难重重，但这却并不意味着我们需要彻底跟 monorepo 策略说再见（否则我这篇文章就该到此为止了）。我们还可以</span><strong><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">把 monorepo 策略实践在「项目」这个级别</span></strong><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">，即从逻辑上确定项目与项目之间的关联性，然后把相关联的项目整合在同一个仓库下，通常情况下，我们不会有太多相互关联的项目，这意味着我们能够免费得到 monorepo 策略的所有好处，并且可以拒绝支付大型 monorepo 架构的利息。</span></p><p id=\"u54a6587b\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"></span></p><p id=\"u738eb388\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">本文的剩余篇幅就是对「项目级别 monorepo 实践」的一些总结，即使您最终没有选择 monorepo 策略组织您的代码，相信文章中提供的一些工程化工具或思路也一样会对您产生帮助。</span></p><h2 id=\"HgfwO\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80)\">3. 🧑🏻‍💻 monorepo 方案实践</span></h2><h3 id=\"X3AbB\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80)\">3.1 锁定环境：Volta</span></h3><p id=\"u39c52a79\" class=\"ne-p\"><img src=\"https://cdn.nlark.com/yuque/0/2022/png/732231/1647256879064-51b0ea9d-4fae-414a-9daa-25d2b8636bbe.png\" width=\"606\" id=\"u51dc6b27\" class=\"ne-image\"></p><p id=\"ub9af2a2e\" class=\"ne-p\"><a href=\"https://volta.sh/\" data-href=\"https://volta.sh/\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">Volta</span></a><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> </span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">是一个 JavaScript 工具管理器，它可以让我们轻松地在项目中锁定 node，npm 和 yarn 的版本。你只需在安装完 Volta 后，在项目的根目录中执行</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> </span><span class=\"ne-text\" style=\"color: rgb(71, 101, 130); font-size: 16px\">volta pin</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> </span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">命令，那么无论您当前使用的 node 或 npm（yarn）版本是什么，volta 都会自动切换为您指定的版本。</span></p><p id=\"u27b08639\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"></span></p><p id=\"uda2bfaf6\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">因此，除了使用 Docker 和显示在文档中声明 node 和 npm（yarn）的版本之外，您就有了另一个锁定环境的强力工具。</span></p><p id=\"u95ef6475\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"></span></p><p id=\"u8bfa757a\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">而且相较于 nvm，Volta 还具有一个诱人的特性：当您项目的 CLI 工具与全局 CLI 工具不一致时，Volta 可以做到在项目根目录下自动识别，切换到项目指定的版本，这一切都是由 Volta 默默做到的，开发者不必关心任何事情。</span></p><h3 id=\"LD202\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80)\">3.2 复用 packages：workspace</span></h3><p id=\"ua493dc71\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">使用 monorepo 策略后，收益最大的两点是：</span></p><ol class=\"ne-ol\"><li id=\"ua8fe2baf\" data-lake-index-type=\"0\"><strong><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">避免重复安装包，因此减少了磁盘空间的占用，并降低了构建时间</span></strong><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">；</span></li><li id=\"u9b1733f2\" data-lake-index-type=\"0\"><strong><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">内部代码可以彼此相互引用</span></strong><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">；</span></li></ol><p id=\"u4a5d6344\" class=\"ne-p\"><br></p><p id=\"ud8c4315f\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">这两项好处全部都可以由一个成熟的包管理工具来完成，对前端开发而言，即是</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> </span><span class=\"ne-text\" style=\"color: rgb(71, 101, 130); font-size: 16px\">yarn</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">（1.0 以上）或</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> </span><span class=\"ne-text\" style=\"color: rgb(71, 101, 130); font-size: 16px\">npm</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">（7.0 以上）通过名为</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> </span><span class=\"ne-text\" style=\"color: rgb(71, 101, 130); font-size: 16px\">workspaces</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> </span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">的特性实现的（⚠️ 注意，支持 workspaces 特性的 npm 目前依旧不是 TLS 版本）。</span></p><p id=\"u85ddeb7c\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"></span></p><p id=\"u243ab284\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">为了实现前面提到的两点收益，您需要在代码中做三件事：</span></p><ol class=\"ne-ol\"><li id=\"u4a0cbee6\" data-lake-index-type=\"0\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">调整目录结构，将相互关联的项目放置在同一个目录，推荐命名为 </span><code class=\"ne-code\"><span class=\"ne-text\" style=\"color: rgb(71, 101, 130); font-size: 16px\">packages</span></code><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">；</span></li><li id=\"u6722b056\" data-lake-index-type=\"0\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">在项目根目录里的 </span><code class=\"ne-code\"><span class=\"ne-text\" style=\"color: rgb(71, 101, 130); font-size: 16px\">package.json</span></code><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> 文件中，设置 </span><code class=\"ne-code\"><span class=\"ne-text\" style=\"color: rgb(71, 101, 130); font-size: 16px\">workspaces</span></code><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> 属性，属性值为之前创建的目录；</span></li><li id=\"ue81d7c17\" data-lake-index-type=\"0\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">同样，在 </span><code class=\"ne-code\"><span class=\"ne-text\" style=\"color: rgb(71, 101, 130); font-size: 16px\">package.json</span></code><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> 文件中，设置 </span><code class=\"ne-code\"><span class=\"ne-text\" style=\"color: rgb(71, 101, 130); font-size: 16px\">private</span></code><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> 属性为 </span><code class=\"ne-code\"><span class=\"ne-text\" style=\"color: rgb(71, 101, 130); font-size: 16px\">true</span></code><span class=\"ne-text\" style=\"color: rgb(71, 101, 130); font-size: 16px\"> </span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">(为了避免我们误操作将仓库发布)；</span></li></ol><p id=\"ue99788a3\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"></span></p><p id=\"u3e3bc81d\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">经过修改，您的项目目录看起来应该是这样：</span></p><pre data-language=\"markdown\" id=\"el38t\" class=\"ne-codeblock language-markdown\"><code>.\n├── package.json\n└── packages/\n    ├── @mono/project_1/ # 推荐使用 `@&lt;项目名&gt;/&lt;子项目名&gt;` 的方式命名\n    │   ├── index.js\n    │   └── package.json\n    └── @mono/project_2/\n        ├── index.js\n        └── package.json</code></pre><p id=\"u6f513765\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">而当您在项目根目录中执行</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> </span><span class=\"ne-text\" style=\"color: rgb(71, 101, 130); font-size: 16px\">npm install</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> </span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">或</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> </span><span class=\"ne-text\" style=\"color: rgb(71, 101, 130); font-size: 16px\">yarn install</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">后，您会发现在项目根目录中出现了</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> </span><span class=\"ne-text\" style=\"color: rgb(71, 101, 130); font-size: 16px\">node_modules</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> </span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">目录，并且该目录不仅拥有所有子项目共用的 npm 包，还包含了我们的子项目。因此，我们可以在子项目中通过各种模块引入机制，像引入一般的 npm 模块一样引入其他子项目的代码。</span></p><p id=\"ucd5633a0\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"></span></p><p id=\"u96363688\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">请注意我们对子项目的命名，统一以</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> </span><span class=\"ne-text\" style=\"color: rgb(71, 101, 130); font-size: 16px\">@&lt;repo_name&gt;/</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> </span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">开头，这是一种社区最佳实践，不仅可以让用户更容易了解整个应用的架构，也方便您在项目中更快捷的找到所需的子项目。</span></p><p id=\"u30f5279b\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"></span></p><p id=\"u70ecb25d\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">至此，我们已经完成了 monorepo 策略的核心部分，实在是很容易不是吗？但是老话说「行百里者半九十」，距离优雅的搭建一个 monorepo 项目，我们还有一些路要走。</span></p><h3 id=\"T9loK\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80)\">3.3 统一配置：合并同类项 - Eslint，Typescript 与 Babel</span></h3><p id=\"u829dc752\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">您一定同意，编写代码要遵循 DRY 原则（Don't Repeat Yourself 的缩写）。那么，理所当然地，我们应该尽量避免在多个子项目中放置重复的 eslintrc，tsconfig 等配置文件。幸运的是，Babel，Eslint 和 Typescript 都提供了相应的功能让我们减少自我重复。</span></p><h4 id=\"AqDWx\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80)\">3.3.1 TypeScript</span></h4><p id=\"ued64d495\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">我们可以在</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> </span><span class=\"ne-text\" style=\"color: rgb(71, 101, 130); font-size: 16px\">packages</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> </span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">目录中放置</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> </span><span class=\"ne-text\" style=\"color: rgb(71, 101, 130); font-size: 16px\">tsconfig.settting.json</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> </span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">文件，并在文件中定义通用的 ts 配置，然后，在每个子项目中，我们可以通过</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> </span><span class=\"ne-text\" style=\"color: rgb(71, 101, 130); font-size: 16px\">extends</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> </span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">属性，引入通用配置，并设置</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> </span><span class=\"ne-text\" style=\"color: rgb(71, 101, 130); font-size: 16px\">compilerOptions.composite</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> </span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">的值为</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> </span><span class=\"ne-text\" style=\"color: rgb(71, 101, 130); font-size: 16px\">true</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">，理想情况下，子项目中的</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> </span><span class=\"ne-text\" style=\"color: rgb(71, 101, 130); font-size: 16px\">tsconfig</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> </span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">文件应该仅包含下述内容：</span></p><pre data-language=\"json\" id=\"W4ZV7\" class=\"ne-codeblock language-json\"><code>{\n  &quot;extends&quot;: &quot;../tsconfig.setting.json&quot;, // 继承 packages 目录下通用配置\n  &quot;compilerOptions&quot;: {\n    &quot;composite&quot;: true, // 用于帮助 TypeScript 快速确定引用工程的输出文件位置\n    &quot;outDir&quot;: &quot;dist&quot;,\n    &quot;rootDir&quot;: &quot;src&quot;\n  },\n  &quot;include&quot;: [&quot;src&quot;]\n}</code></pre><h4 id=\"aP7kn\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80)\">3.3.2 Eslint</span></h4><p id=\"ufbaf1710\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">对于 Eslint 配置文件，我们也可以如法炮制，这样定义子项目的</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> </span><span class=\"ne-text\" style=\"color: rgb(71, 101, 130); font-size: 16px\">.eslintrc</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> </span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">文件内容：</span></p><pre data-language=\"json\" id=\"YVJEd\" class=\"ne-codeblock language-json\"><code>{\n  &quot;extends&quot;: &quot;../../.eslintrc&quot;, // 注意这里的不同\n  &quot;parserOptions&quot;: {\n    &quot;project&quot;: &quot;tsconfig.json&quot;\n  }\n}</code></pre><p id=\"ufbd711a3\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">注意到了吗，对于通用的 eslint 配置，我们并没有将其放置在 </span><span class=\"ne-text\" style=\"color: rgb(71, 101, 130); font-size: 16px\">packages</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> 目录中，而是放在整个项目的根目录下，这样做是因为一些编辑器插件只会在项目根目录寻找 </span><span class=\"ne-text\" style=\"color: rgb(71, 101, 130); font-size: 16px\">.eslintrc</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> 文件，因此为了我们的项目能够保持良好的「开发环境一致性」，请务必将通用配置文件放置在项目的根目录中。</span></p><h4 id=\"x0oWt\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80)\">3.3.3 Babel</span></h4><p id=\"u4c371e9e\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">Babel 配置文件合并的方式与 TypeScript 如出一辙，甚至更加简单，我们只需在子项目中的 </span><span class=\"ne-text\" style=\"color: rgb(71, 101, 130); font-size: 16px\">.babelrc</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> 文件中这样声明即可：</span></p><pre data-language=\"json\" id=\"LuM0N\" class=\"ne-codeblock language-json\"><code>{\n  &quot;extends&quot;: &quot;../.babelrc&quot;\n}</code></pre><p id=\"u6179ad7f\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">当一切准备就绪后，我们的项目目录应该大致呈如下所示的结构：</span></p><pre data-language=\"markdown\" id=\"Rat1Z\" class=\"ne-codeblock language-markdown\"><code>.\n├── package.json\n├── .eslintrc\n└── packages/\n    │   ├── tsconfig.settings.json\n    │   ├── .babelrc\n    ├── @mono/project_1/\n    │   ├── index.js\n    │   ├── .eslintrc\n    │   ├── .babelrc\n    │   ├── tsconfig.json\n    │   └── package.json\n    └───@mono/project_2/\n        ├── index.js\n        ├── .eslintrc\n        ├── .babelrc\n        ├── tsconfig.json\n        └── package.json</code></pre><h3 id=\"hBZeX\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80)\">3.4 统一命令脚本：scripty</span></h3><p id=\"u71c7f7a9\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">在上一步中，我们尽可能的将所有配置文件进行抽象，从而精简了代码，并提高了整个项目的一致性。我们的整个仓库也因此有了「更浓郁的 monorepo 风味 ☕️」。但如果仔细审视我们的整个工程文件，还有一处存在着明显的瑕疵和一些恼人的坏味道，当您仔细审视您的众多</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> </span><span class=\"ne-text\" style=\"color: rgb(71, 101, 130); font-size: 16px\">package.json</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> </span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">文件时，您就知道我在说什么了 -- scripts 脚本。</span></p><p id=\"ub834fdb1\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"></span></p><p id=\"u35e8dab9\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">如果您的子项目足够多，您可能会发现，每个</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> </span><span class=\"ne-text\" style=\"color: rgb(71, 101, 130); font-size: 16px\">package.json</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> </span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">文件中的</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> </span><span class=\"ne-text\" style=\"color: rgb(71, 101, 130); font-size: 16px\">scripts</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> </span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">属性都大同小异，并且一些</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> </span><span class=\"ne-text\" style=\"color: rgb(71, 101, 130); font-size: 16px\">scripts</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> </span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">充斥着各种 Linux 语法，例如管道操作符，重定向或目录生成。</span><strong><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">重复带来低效，复杂则使人难以理解</span></strong><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">，这都是需要我们解决的问题。</span></p><p id=\"u588a17bc\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"></span></p><p id=\"u90dc71a8\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">这里给出的解决方案是，使用</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> </span><a href=\"https://www.npmjs.com/package/scripty\" data-href=\"https://www.npmjs.com/package/scripty\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">scripty</span></a><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> </span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">管理您的脚本命令，简单来说，scripty 允许您将脚本命令定义在文件中，并在</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> </span><span class=\"ne-text\" style=\"color: rgb(71, 101, 130); font-size: 16px\">package.json</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> </span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">文件中直接通过文件名来引用。这使我们可以实现如下目的：</span></p><ol class=\"ne-ol\"><li id=\"uad44ff18\" data-lake-index-type=\"0\"><strong><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">子项目间复用脚本命令</span></strong><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">；</span></li><li id=\"u8a5717f5\" data-lake-index-type=\"0\"><strong><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">像写代码一样编写脚本命令，无论它有多复杂，而在调用时，像调用函数一样调用</span></strong><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">；</span></li></ol><p id=\"u0d0c578c\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"></span></p><p id=\"u1c39c020\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">通过使用 scripty 管理我们的 monorepo 应用，目录结构看起来将会是这样：</span></p><pre data-language=\"markdown\" id=\"ieiaT\" class=\"ne-codeblock language-markdown\"><code>.\n├── package.json\n├── .eslintrc\n├── scirpts/ # 这里存放所有的脚本\n│   │   ├── packages/ # 包级别脚本\n│   │   │   ├── build.sh\n│   │   │   └── test.sh\n│   └───└── workspaces/ # 全局脚本\n│           ├── build.sh\n│           └── test.sh\n└── packages/\n    │   ├── tsconfig.settings.json\n    │   ├── .babelrc\n    ├── @mono/project_1/\n    │   ├── index.js\n    │   ├── .eslintrc\n    │   ├── .babelrc\n    │   ├── tsconfig.json\n    │   └── package.json\n    └── @mono/project_2/\n        ├── index.js\n        ├── .eslintrc\n        ├── .babelrc\n        ├── tsconfig.json\n        └── package.json</code></pre><p id=\"uffb12674\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">注意，我们脚本分为两类「package 级别」与「workspace 级别」，并且分别放在两个文件夹内。这样做的好处在于，我们既可以在项目根目录执行全局脚本，也可以针对单个项目执行特定的脚本。</span></p><p id=\"u2986ff87\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"></span></p><p id=\"u6a689a35\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">通过使用 scripty，子项目的 </span><span class=\"ne-text\" style=\"color: rgb(71, 101, 130); font-size: 16px\">package.json</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> 文件中的 </span><span class=\"ne-text\" style=\"color: rgb(71, 101, 130); font-size: 16px\">scripts</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> 属性将变得非常精简：</span></p><pre data-language=\"json\" id=\"XoV5L\" class=\"ne-codeblock language-json\"><code>{\n  ...\n  &quot;scripts&quot;: {\n    &quot;test&quot;: &quot;scripty&quot;,\n    &quot;lint&quot;: &quot;scripty&quot;,\n    &quot;build&quot;: &quot;scripty&quot;\n  },\n  &quot;scripty&quot;: {\n    &quot;path&quot;: &quot;../../scripts/packages&quot; // 注意这里我们指定了 scripty 的路径\n  },\n  ...\n}</code></pre><p id=\"ud89c47c5\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">大功告成！🎉 至此，我们尽己所能地删除了整个项目中的重复代码，让整个项目变得干净，清爽并且有极强的复用性。</span></p><div data-type=\"info\" class=\"ne-alert\"><p id=\"u48cf5b3f\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">🧉 小贴士：</span></p><p id=\"ufd40322e\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(153, 153, 153); font-size: 16px\">别忘了使用 chmod -R u+x scripts 命令使所有的 shell 脚本具备可执行权限，也千万别忘了把这条贴士写在您的 README.md 文件中！</span></p></div><h3 id=\"ofYMs\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80)\">3.5 统一包管理：Lerna</span></h3><p id=\"ue9cecd86\" class=\"ne-p\"><img src=\"https://cdn.nlark.com/yuque/0/2022/png/732231/1647256879285-b37f124c-5c57-402f-aa35-654d7e9a5b09.png\" width=\"960\" id=\"ue5da8ee4\" class=\"ne-image\"></p><p id=\"u1192ca46\" class=\"ne-p\" style=\"text-align: center\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">图片来源：https://github.com/lerna/lerna</span></p><p id=\"u1e433263\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">我有时会感慨自己的灵感匮乏，怎么就想不到 Lerna 这样既有神话色彩又能自我释义的好名字。您可以大胆想象，九头龙的每只龙头都在帮您管理着一个子项目，而您只需要骑在龙身上发号施令的场景，这基本上就是我们使用 Lerna 时的直观感受。</span></p><p id=\"ued055ae9\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"></span></p><p id=\"ubbeb37d6\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">这也是为什么当我们提起 monorepo 策略，就几乎不得不提到 Lerna 的原因了，它的确提供了一种非常便捷的方式供我们管理 monorepo 项目。当子项目越多时，Lerna 就越能显示其威力。</span></p><p id=\"u3ebdd90c\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"></span></p><p id=\"u777b0f5a\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">当多个子项目放在一个代码仓库，并且子项目之间又相互依赖时，我们面临的棘手问题有两个：</span></p><ol class=\"ne-ol\"><li id=\"u27c47ae8\" data-lake-index-type=\"0\"><strong><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">如果我们需要在多个子目录执行相同的命令，我们需要手动进入各个目录，并执行命令</span></strong><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">；</span></li><li id=\"udead62d3\" data-lake-index-type=\"0\"><strong><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">当一个子项目更新后，我们只能手动追踪依赖该项目的其他子项目，并升级其版本</span></strong><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">。</span></li></ol><p id=\"u56c53fac\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">通过使用 Lerna，这些棘手的问题都将不复存在。</span></p><p id=\"ua2b12287\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"></span></p><p id=\"ua81c0076\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">当在项目根目录使用 </span><span class=\"ne-text\" style=\"color: rgb(71, 101, 130); font-size: 16px\">npx lerna init</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> 初始化后，我们的根目录会新增一个 </span><span class=\"ne-text\" style=\"color: rgb(71, 101, 130); font-size: 16px\">lerna.json</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> 文件，默认内容为：</span></p><pre data-language=\"json\" id=\"o4gUB\" class=\"ne-codeblock language-json\"><code>{\n  &quot;packages&quot;: [&quot;packages/*&quot;],\n  &quot;version&quot;: &quot;0.0.0&quot;\n}</code></pre><p id=\"u1b3b572e\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">让我们稍稍改动这个文件，使其变为：</span></p><pre data-language=\"json\" id=\"bniQ9\" class=\"ne-codeblock language-json\"><code>{\n  &quot;packages&quot;: [&quot;packages/*&quot;],\n  &quot;npmClient&quot;: &quot;yarn&quot;,\n  &quot;version&quot;: &quot;independent&quot;,\n  &quot;useWorkspaces&quot;: true,\n}</code></pre><p id=\"ub3daaa1a\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">可以注意到，我们显示声明了我们的包客户端（</span><span class=\"ne-text\" style=\"color: rgb(71, 101, 130); font-size: 16px\">npmClient</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">）为</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> </span><span class=\"ne-text\" style=\"color: rgb(71, 101, 130); font-size: 16px\">yarn</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">，并且让 Lerna 追踪我们 workspaces 设置的目录，这样我们就依旧保留了之前</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> </span><span class=\"ne-text\" style=\"color: rgb(71, 101, 130); font-size: 16px\">workspaces</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> </span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">的所有特性（</span><strong><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">子项目引用</span></strong><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">和</span><strong><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">通用包提升</span></strong><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">）。</span></p><p id=\"u89c66570\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"></span></p><p id=\"ub429bda9\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">除此之外一个有趣的改动在于我们将 </span><span class=\"ne-text\" style=\"color: rgb(71, 101, 130); font-size: 16px\">version</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> 属性指定为一个关键字 </span><span class=\"ne-text\" style=\"color: rgb(71, 101, 130); font-size: 16px\">independent</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">，这将告诉 lerna 应该</span><strong><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">将每个子项目的版本号看作是相互独立的</span></strong><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">。当某个子项目代码更新后，运行 </span><span class=\"ne-text\" style=\"color: rgb(71, 101, 130); font-size: 16px\">lerna publish</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> 时，Lerna 将监听到代码变化的子项目并以交互式 CLI 方式让开发者决定需要升级的版本号，关联的子项目版本号不会自动升级，反之，当我们填入固定的版本号时，则任一子项目的代码变动，都会导致所有子项目的版本号基于当前指定的版本号升级。</span></p><p id=\"u0e61fc9c\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"></span></p><p id=\"u52cf8053\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">Lerna 提供了很多 CLI 命令以满足我们的各种需求，但根据 2/8 法则，您应该首先关注以下这些命令：</span></p><ul class=\"ne-ul\"><li id=\"u6c700d82\" data-lake-index-type=\"0\"><span class=\"ne-text\" style=\"color: rgb(71, 101, 130); font-size: 16px\">lerna bootstrap</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">：等同于</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> </span><span class=\"ne-text\" style=\"color: rgb(71, 101, 130); font-size: 16px\">lerna link</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> </span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">+</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> </span><span class=\"ne-text\" style=\"color: rgb(71, 101, 130); font-size: 16px\">yarn install</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">，用于创建符合链接并安装依赖包；</span></li><li id=\"uf9469c10\" data-lake-index-type=\"0\"><span class=\"ne-text\" style=\"color: rgb(71, 101, 130); font-size: 16px\">lerna run</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">：会像执行一个 for 循环一样，在所有子项目中执行 npm script 脚本，并且，它会非常智能的识别依赖关系，并从根依赖开始执行命令；</span></li><li id=\"u932e5cfe\" data-lake-index-type=\"0\"><span class=\"ne-text\" style=\"color: rgb(71, 101, 130); font-size: 16px\">lerna exec</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">：像</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> </span><span class=\"ne-text\" style=\"color: rgb(71, 101, 130); font-size: 16px\">lerna run</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> </span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">一样，会按照依赖顺序执行命令，不同的是，它可以执行任何命令，例如 shell 脚本；</span></li><li id=\"ub06c4bdf\" data-lake-index-type=\"0\"><span class=\"ne-text\" style=\"color: rgb(71, 101, 130); font-size: 16px\">lerna publish</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">：发布代码有变动的 package，因此首先您需要在使用 Lerna 前使用</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> </span><span class=\"ne-text\" style=\"color: rgb(71, 101, 130); font-size: 16px\">git commit</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> </span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">命令提交代码，好让 Lerna 有一个 baseline；</span></li><li id=\"u06b01b17\" data-lake-index-type=\"0\"><span class=\"ne-text\" style=\"color: rgb(71, 101, 130); font-size: 16px\">lerna add</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">：将本地或远程的包作为依赖添加至当前的 monorepo 仓库中，该命令让 Lerna 可以识别并追踪包之间的依赖关系，因此非常重要；</span></li></ul><pre data-language=\"shell\" id=\"bdAcZ\" class=\"ne-codeblock language-shell\"><code># 向 @mono/project2 和 @mono/project3 中添加 @mono/project1\nlerna add @mono/project1 '@mono/project{2,3}'</code></pre><h4 id=\"RVo0W\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80)\">3.5.1 Lerna 高级命令</span></h4><p id=\"u8dce5a89\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">除了上面介绍到的常用命令外，Lerna 还提供了一些参数满足我们更灵活的需求，例如：</span></p><ul class=\"ne-ul\"><li id=\"ua122680d\" data-lake-index-type=\"0\"><code class=\"ne-code\"><span class=\"ne-text\" style=\"color: rgb(71, 101, 130); font-size: 16px\">--concurrency &lt;number&gt;</span></code><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">：参数可以使 Lerna 利用计算机上的多个核心，并发运行，从而提升构建速度；</span></li><li id=\"u5d330b31\" data-lake-index-type=\"0\"><code class=\"ne-code\"><span class=\"ne-text\" style=\"color: rgb(71, 101, 130); font-size: 16px\">--scope '@mono/{pkg1,pkg2}'</span></code><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">：</span><code class=\"ne-code\"><span class=\"ne-text\" style=\"color: rgb(71, 101, 130); font-size: 16px\">--scope</span></code><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> 参数可以指定 Lerna 命令的运行环境，通过使用该参数，Lerna 将不再是一把梭的在所有仓库中执行命令，而是可以精准地在我们所指定的仓库中执行命令，并且还支持示例中的模版语法；</span></li><li id=\"ucbcd7067\" data-lake-index-type=\"0\"><code class=\"ne-code\"><span class=\"ne-text\" style=\"color: rgb(71, 101, 130); font-size: 16px\">--stream</span></code><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">：该参数可使我们查看 Lerna 运行时的命令执行信息；</span></li></ul><h4 id=\"H2jG7\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80)\">3.5.2 npm 包本地发布：Verdaccio</span></h4><p id=\"uc70122c1\" class=\"ne-p\"><img src=\"https://cdn.nlark.com/yuque/0/2022/png/732231/1647256879198-723cfae0-eff1-4e23-badf-d72662510765.png\" width=\"602\" id=\"uf92c71f3\" class=\"ne-image\"></p><p id=\"ud727d4c5\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">看到这里，您可能想要亲自体验一把使用 Lerna 管理/发布 monorepo 项目的感觉。可是很快您会发现，将示例代码发布到真实世界的 npm 仓库并非一个好主意，这多少有些令人沮丧，但是别担心，您可以使用</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> </span><a href=\"https://verdaccio.org/\" data-href=\"https://verdaccio.org/\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">Verdaccio</span></a><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> </span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">在本地创建一个 npm 仓库作为代理，然后尽情体验 Lerna 的种种强大之处。</span></p><p id=\"u8fce2d9a\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"></span></p><p id=\"u06ffb147\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">安装运行 Verdaccio 非常简单，您只需运行：</span></p><pre data-language=\"shell\" id=\"OYbOG\" class=\"ne-codeblock language-shell\"><code>npm install --global verdaccio</code></pre><p id=\"ub231eabd\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">在全局安装 Verdaccio 应用，然后在 shell 中输入：</span></p><pre data-language=\"shell\" id=\"Ha0Mi\" class=\"ne-codeblock language-shell\"><code>verdaccio</code></pre><p id=\"u5dc97380\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">即可通过 </span><span class=\"ne-text\" style=\"color: rgb(71, 101, 130); font-size: 16px\">localhost:4837</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> 访问您的本地代理 npm 仓库，别忘了在您的项目根目录创建 </span><span class=\"ne-text\" style=\"color: rgb(71, 101, 130); font-size: 16px\">.npmrc</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> 文件，并在文件中将 npm 仓库地址改写为您的本地代理地址：</span></p><pre data-language=\"shell\" id=\"tHFHj\" class=\"ne-codeblock language-shell\"><code>registry=&quot;http://localhost:4873/&quot;</code></pre><p id=\"ucf137b08\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">大功告成 🙌！每当您执行 </span><code class=\"ne-code\"><span class=\"ne-text\" style=\"color: rgb(71, 101, 130); font-size: 16px\">lerna publish</span></code><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> 时，子项目所构建成的 package 将会发布在本地 npm 仓库中，而当您执行 </span><span class=\"ne-text\" style=\"color: rgb(71, 101, 130); font-size: 16px\">lerna bootstrap</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> 时，Verdaccio 将会放行，让您成功从远程 npm 仓库中拉取相应的代码。</span></p><h3 id=\"PBkdJ\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80)\">3.6 格式化 commit 信息</span></h3><p id=\"u59df7bed\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">至此，我们已经掌握了组织一个项目级 monorepo 仓库的所有前沿技巧，最后，让我们看看最后一个可以优化的地方：</span><strong><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">代码提交时，约束 commit 信息</span></strong><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">。</span></p><p id=\"u43c1bb9b\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"></span></p><p id=\"u20f94032\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">一个 monorepo 仓库可能被</span><strong><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">不同的开发者提交不同子项目</span></strong><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">的代码，如果没有规范化的 commit 信息，在故障排查或版本回滚时毫无意外会遭遇灾难。因此，千万不要小看 commit 信息格式化的重要性（当然，同样重要的还有代码注释！）。</span></p><p id=\"u0f6d9481\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"></span></p><p id=\"ub83c335b\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">为了我们能够一目了然的追踪每次代码变更的信息，我们使用 </span><a href=\"https://github.com/conventional-changelog/commitlint/#what-is-commitlint\" data-href=\"https://github.com/conventional-changelog/commitlint/#what-is-commitlint\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">commitlint</span></a><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> 工具作为格式化 commit 信息的不二之选。</span></p><p id=\"udfabd56a\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"></span></p><p id=\"ub23f9896\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">顾名思义，</span><code class=\"ne-code\"><span class=\"ne-text\" style=\"color: rgb(71, 101, 130); font-size: 16px\">commitlint</span></code><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> 可以帮助我们检查提交的 commit 信息，它强制约束我们的 commit 信息必须在开头附加指定类型，用于标示本次提交的大致意图，支持的类型关键字有：</span></p><ul class=\"ne-ul\"><li id=\"u26ab9e73\" data-lake-index-type=\"0\"><code class=\"ne-code\"><span class=\"ne-text\" style=\"color: rgb(71, 101, 130); font-size: 16px\">feat</span></code><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">：表示添加一个新特性；</span></li><li id=\"u8f5d8328\" data-lake-index-type=\"0\"><code class=\"ne-code\"><span class=\"ne-text\" style=\"color: rgb(71, 101, 130); font-size: 16px\">chore</span></code><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">：表示做了一些与特性和修复无关的「家务事」；</span></li><li id=\"ua1b40293\" data-lake-index-type=\"0\"><code class=\"ne-code\"><span class=\"ne-text\" style=\"color: rgb(71, 101, 130); font-size: 16px\">fix</span></code><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">：表示修复了一个 Bug；</span></li><li id=\"ue7db7ec0\" data-lake-index-type=\"0\"><code class=\"ne-code\"><span class=\"ne-text\" style=\"color: rgb(71, 101, 130); font-size: 16px\">refactor</span></code><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">：表示本次提交是因为重构了代码；</span></li><li id=\"u9a4f7abc\" data-lake-index-type=\"0\"><code class=\"ne-code\"><span class=\"ne-text\" style=\"color: rgb(71, 101, 130); font-size: 16px\">style</span></code><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">：表示代码美化或格式化；</span></li><li id=\"uc24c75fc\" data-lake-index-type=\"0\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">...</span></li></ul><p id=\"u896e216b\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"></span></p><p id=\"u886f7219\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">我强烈建议您遵循该规范编写您的 commit 信息，不要偷懒，坚持下去，您的 git 日志将会显得整齐，有条理，富有表现力，同时，您也会收到同行的交口称赞，人人都会以和您这样优雅的工程师合作为荣。</span></p><p id=\"uea56f20e\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"></span></p><p id=\"u557fd3ea\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">除了限定 commit 信息类型外，commitlint 还支持（虽然不是必须的）显示指定我们本次提交所对应的子项目名称。假如我们有一个名为 </span><code class=\"ne-code\"><span class=\"ne-text\" style=\"color: rgb(71, 101, 130); font-size: 16px\">@mono/project1</span></code><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> 的子项目，我们针对该项目提交的 commit 信息可以写为：</span></p><pre data-language=\"shell\" id=\"KGVER\" class=\"ne-codeblock language-shell\"><code>git commit -m &quot;feat(project1): add a attractive button&quot; # 注意，我们省略了 @mono 的项目前缀</code></pre><p id=\"ud4cd07a6\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">毫无疑问，这将会使我们的 commit 信息更具表现力。</span></p><p id=\"u1142642d\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"></span></p><p id=\"uff98ac97\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">我们可以通过下面的命令安装 </span><span class=\"ne-text\" style=\"color: rgb(71, 101, 130); font-size: 16px\">commitlint</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> 以及周边依赖：</span></p><pre data-language=\"shell\" id=\"Ypfzy\" class=\"ne-codeblock language-shell\"><code>npm i -D @commitlint/cli @commitlint/config-conventional @commitlint/config-lerna-scopes commitlint husky lerna-changelog</code></pre><p id=\"u43ab1ae3\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">注意到了吗？我偷偷安装了 </span><a href=\"https://www.npmjs.com/package/husky\" data-href=\"https://www.npmjs.com/package/husky\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">husky</span></a><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">，它能够帮助我们在提交 commit 信息时自动运行 </span><span class=\"ne-text\" style=\"color: rgb(71, 101, 130); font-size: 16px\">commitlint</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> 进行检查，但在这之前，我们需要再在根目录下的 </span><code class=\"ne-code\"><span class=\"ne-text\" style=\"color: rgb(71, 101, 130); font-size: 16px\">package.json</span></code><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> 文件里加点料，像这样：</span></p><pre data-language=\"json\" id=\"eixF4\" class=\"ne-codeblock language-json\"><code>{\n ...\n &quot;husky&quot;: {\n    &quot;hooks&quot;: {\n      &quot;commit-msg&quot;: &quot;commitlint -E HUSKY_GIT_PARAMS&quot;\n    }\n  }\n ...\n}</code></pre><p id=\"ufa5475ce\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">为了能够让 </span><span class=\"ne-text\" style=\"color: rgb(71, 101, 130); font-size: 16px\">commitlint</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> 感知我们的子项目名称，我们还需在项目根目录中增加 </span><span class=\"ne-text\" style=\"color: rgb(71, 101, 130); font-size: 16px\">commitlint.config.js</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> 文件，并设置文件内容为：</span></p><pre data-language=\"javascript\" id=\"xgzoX\" class=\"ne-codeblock language-javascript\"><code>module.exports = {\n  extends: [\n    &quot;@commitlint/config-conventional&quot;,\n    &quot;@commitlint/config-lerna-scopes&quot;,\n  ],\n};</code></pre><p id=\"uaafcda09\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">至此，我们统一并规范化了 monorepo 项目的 commit 信息，终于整个 monorepo 工程化的最后一块拼图被我们拼上了！</span></p><p id=\"u76a2a263\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">（顺便一提，您可以通过在命令行执行 </span><code class=\"ne-code\"><span class=\"ne-text\" style=\"color: rgb(71, 101, 130); font-size: 16px\">echo &quot;build(project1): change something&quot; | npx commitlint</span></code><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> 命令即可验证您的 commit 信息是否通过 commitlint 的检查。）</span></p><h2 id=\"tkldY\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80)\">4. 🚚 如何从 multirepo 迁移至使用 monorepo 策略？</span></h2><p id=\"u0017bb3b\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">至此，我们学会了如何采用 monorepo 策略组织项目代码的最佳实践，或许您已经开始跃跃欲试想要尝试前文提到的种种技巧。从 0 搭建一个 monorepo 项目，当然没问题！可是如果要基于已有的项目，将其转化为一个使用 monorepo 策略的项目呢？</span></p><p id=\"u051d34a3\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"></span></p><p id=\"u8ee1994f\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">还记得吗？成百里者半九十，您还有一些坑要踩。不过好在您在这里还能够得到我的帮助，不必客气！</span></p><p id=\"u5cd4765a\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"></span></p><p id=\"ue64e3c84\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">或许您注意到了，Lerna 为我们提供了</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> </span><span class=\"ne-text\" style=\"color: rgb(71, 101, 130); font-size: 16px\">lerna import</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> </span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">命令，用来将我们已有的包导入到 monorepo 仓库，并且还会保留该仓库的所有 commit 信息。然而实际上，该命令仅支持</span><strong><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">导入本地项目</span></strong><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">，并且</span><strong><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">不支持</span></strong><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">导入项目的分支和标签 🙃。</span></p><p id=\"uf09235a1\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"></span></p><p id=\"u9c2a3081\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">那么如果我们想要导入远程仓库，或是要获取某个分支或标签该怎么做呢？答案是使用</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> </span><a href=\"https://github.com/hraban/tomono\" data-href=\"https://github.com/hraban/tomono\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">tomono</span></a><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">，其内容是一个 shell 脚本。</span></p><p id=\"u01a010c2\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"></span></p><p id=\"u32cfe396\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">使用 tomono 导入远程仓库，您所需要做的只有两件事：</span></p><ol class=\"ne-ol\"><li id=\"u710520b8\" data-lake-index-type=\"0\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">创建一个包含所有需要导入 repo 地址的文本文件；</span></li><li id=\"uc0a5fd2c\" data-lake-index-type=\"0\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">执行 shell 命令：</span><code class=\"ne-code\"><span class=\"ne-text\" style=\"color: rgb(71, 101, 130); font-size: 16px\">cat repos.txt | ~/tomono/tomono.sh</span></code><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">（这里我们假定您的文本文件名为 </span><code class=\"ne-code\"><span class=\"ne-text\" style=\"color: rgb(71, 101, 130); font-size: 16px\">repos.txt</span></code><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">，且您将 tomono 下载在用户根目录；</span></li></ol><p id=\"ud479edce\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">repo 文件内容示例如下：</span></p><pre data-language=\"shell\" id=\"e5Nnt\" class=\"ne-codeblock language-shell\"><code>// 1. Git仓库地址  2. 子项目名称  3. 迁移后的路径\ngit@github.com/backend.git @mono/backend packages/backend\ngit@github.com/frontend.git @mono/frontend packages/frontend\ngit@github.com/mobile.git @mono/mobile packages/mobile</code></pre><p id=\"u5ac796dc\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">至此，我们也掌握了将现有项目迁移至 </span><code class=\"ne-code\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">monorepo</span></code><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> 项目的方法。到这时候，您已绝非再是 </span><code class=\"ne-code\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">monorepo</span></code><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> 界的门外汉！</span></p><p id=\"uc6fb1696\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">恭喜您 ！！🎉</span></p><h2 id=\"btmKj\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80)\">5. 🎓 小结</span></h2><p id=\"ub3a616dc\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">在本篇文章中，我们共同了解了「</span><strong><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">什么是 monorepo 策略</span></strong><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">」以及「</span><strong><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">monorepo 策略的优劣</span></strong><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">」，并且一起学习实践了 monorepo 策略的一些最佳实践。您一定也意识到，即使您的工作场景暂时无法实践 monorepo 策略，阅读本篇文章所学习到的种种方法，工具和思想也可以运用到您当下的工作之中。</span></p><p id=\"u36fb3f71\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"></span></p><p id=\"uf97e19b0\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">当然，本文所介绍的这些方法和思想总有过时的一天，并且社区也从未停止对更好地实践 monorepo 策略的探索，说不定您过一阵子就会有更好的想法 ，填补某个领域的空白。希望到时候您也能总结出一篇文章，为 JavaScript 社区贡献一份力量。到时候请千万别忘了回到我的评论区留言，让我分享您的成就。</span></p><p id=\"udf622c48\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"></span></p><p id=\"u0668076a\" class=\"ne-p\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">关于 monorepo 这个主题，我就暂且带您探索到这里，后会有期：）</span></p><h2 id=\"AH3k4\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80)\">6. 📝 参考文献</span></h2><ol class=\"ne-ol\"><li id=\"ub40d25d9\" data-lake-index-type=\"0\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">📹</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> </span><a href=\"https://frontendmasters.com/courses/monorepos/\" data-href=\"https://frontendmasters.com/courses/monorepos/\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">JavaScript and TypeScript Monorepos</span></a></li><li id=\"uab3e7a44\" data-lake-index-type=\"0\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">📄</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> </span><a href=\"https://www.drmaciver.com/2016/10/why-you-should-use-a-single-repository-for-all-your-companys-projects/\" data-href=\"https://www.drmaciver.com/2016/10/why-you-should-use-a-single-repository-for-all-your-companys-projects/\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">Why you should use a single repository for all your company’s projects</span></a></li><li id=\"u40055e8f\" data-lake-index-type=\"0\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">📄</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> </span><a href=\"https://danluu.com/monorepo/\" data-href=\"https://danluu.com/monorepo/\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">Advantages of monorepos</span></a></li><li id=\"u52725076\" data-lake-index-type=\"0\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">📄</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> </span><a href=\"http://www.sosout.com/2018/07/21/lerna-repo.html\" data-href=\"http://www.sosout.com/2018/07/21/lerna-repo.html\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">lerna管理前端packages的最佳实践</span></a></li><li id=\"ub8abaa01\" data-lake-index-type=\"0\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">📄</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> </span><a href=\"https://zhuanlan.zhihu.com/p/71385053\" data-href=\"https://zhuanlan.zhihu.com/p/71385053\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">基于lerna和yarn workspace的monorepo工作流</span></a></li><li id=\"ud23ae13f\" data-lake-index-type=\"0\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">📄</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> </span><a href=\"https://medium.com/@maoberlehner/monorepos-in-the-wild-33c6eb246cb9\" data-href=\"https://medium.com/@maoberlehner/monorepos-in-the-wild-33c6eb246cb9\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">Monorepos in the Wild</span></a></li><li id=\"ud0ee2495\" data-lake-index-type=\"0\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">📄</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> </span><a href=\"https://medium.com/@mattklein123/monorepos-please-dont-e9a279be011b\" data-href=\"https://medium.com/@mattklein123/monorepos-please-dont-e9a279be011b\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">Monorepos: Please don’t!</span></a></li><li id=\"u7e29b3f5\" data-lake-index-type=\"0\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">📄</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> </span><a href=\"https://medium.com/@adamhjk/monorepo-please-do-3657e08a4b70\" data-href=\"https://medium.com/@adamhjk/monorepo-please-do-3657e08a4b70\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">Monorepo: please do!</span></a></li><li id=\"u27e4c89d\" data-lake-index-type=\"0\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">📄</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> </span><a href=\"https://medium.com/@rachitabansal/introduction-to-lerna-3fb7382a4d4e\" data-href=\"https://medium.com/@rachitabansal/introduction-to-lerna-3fb7382a4d4e\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">Introduction to Lerna</span></a></li><li id=\"u78e07250\" data-lake-index-type=\"0\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">📄</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> </span><a href=\"https://medium.com/@banyudu/mono-repo-%E8%BF%81%E7%A7%BB%E5%AE%9E%E8%B7%B5-eaf955aaf4d7\" data-href=\"https://medium.com/@banyudu/mono-repo-%E8%BF%81%E7%A7%BB%E5%AE%9E%E8%B7%B5-eaf955aaf4d7\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">monorepo 迁移实践</span></a></li></ol><h2 id=\"rr72b\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80)\">7. 👀 扩展阅读</span></h2><ol class=\"ne-ol\"><li id=\"ud8d9e37a\" data-lake-index-type=\"0\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">介绍实践 monorepo 生态：</span><a href=\"https://github.com/korfuri/awesome-monorepo\" data-href=\"https://github.com/korfuri/awesome-monorepo\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">awesome-monorepo</span></a></li><li id=\"u8add4bda\" data-lake-index-type=\"0\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">一篇介绍 Google 如何将数十亿代码通过 monorepo 方式组织的论文：</span><a href=\"https://dl.acm.org/doi/pdf/10.1145/2854146\" data-href=\"https://dl.acm.org/doi/pdf/10.1145/2854146\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">Why Google Stores Billions of Lines of Code in a Single Repository</span></a></li><li id=\"u357be918\" data-lake-index-type=\"0\"><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\">一篇针对 Google 的调研报告，详尽地分析了 monorepo 的优劣：</span><span class=\"ne-text\" style=\"color: rgb(44, 62, 80); font-size: 16px\"> </span><a href=\"https://people.engr.ncsu.edu/ermurph3/papers/seip18.pdf\" data-href=\"https://people.engr.ncsu.edu/ermurph3/papers/seip18.pdf\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">Advantages and Disadvantages of a Monolithic Repository</span></a></li></ol><p id=\"u2d660185\" class=\"ne-p\"><a href=\"https://fed.taobao.org/blog/taofed/do71ct/fc3cy0/\" data-href=\"https://fed.taobao.org/blog/taofed/do71ct/fc3cy0/\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">← 业务系统的稳定性建设</span></a><a href=\"https://fed.taobao.org/blog/taofed/do71ct/mvd9lw/\" data-href=\"https://fed.taobao.org/blog/taofed/do71ct/mvd9lw/\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">Midway Serverless 发布 2.0，一体化让前端研发再次提效 →</span></a></p></div>",
  "body_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"viewport\" content=\"fixed\" /><meta name=\"typography\" content=\"classic\" /><h2 data-lake-id=\"y7Xha\" id=\"y7Xha\"><span data-lake-id=\"uf34f2947\" id=\"uf34f2947\" style=\"color: rgb(44, 62, 80)\">0. 🧉 前言</span></h2><p data-lake-id=\"u63b365a1\" id=\"u63b365a1\"><span data-lake-id=\"u20184026\" id=\"u20184026\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">在最近的项目开发中，出现了一个令我困扰的状况。我正在开发的项目 A，依赖了已经线上发布的项目 B，但是随着项目 A 的不断开发，又需要不时修改项目 B 的代码（这些修改暂时不必发布线上），</span><strong><span data-lake-id=\"u0fce0f63\" id=\"u0fce0f63\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">如何能够在修改项目 B 代码后及时将改动后在项目 A 中同步？</span></strong><span data-lake-id=\"u3a6ce249\" id=\"u3a6ce249\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\"> </span><span data-lake-id=\"u096ec3cc\" id=\"u096ec3cc\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">在项目 A 发布上线后，</span><strong><span data-lake-id=\"u48a582a8\" id=\"u48a582a8\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">如何以一种优雅的方式解决项目 A，B 版本升级后的版本同步问题？</span></strong><span data-lake-id=\"u7bcfaa42\" id=\"u7bcfaa42\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\"> </span><span data-lake-id=\"ub68d1c0c\" id=\"ub68d1c0c\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">经过一番调研，我发现解决这些问题的最佳方案便是本篇要介绍的 monorepo 策略。</span></p><h2 data-lake-id=\"L7RVD\" id=\"L7RVD\"><span data-lake-id=\"u857409f5\" id=\"u857409f5\" style=\"color: rgb(44, 62, 80)\">1. 🤔 什么是 monorepo 策略？</span></h2><p data-lake-id=\"u1a9edb50\" id=\"u1a9edb50\"><span data-lake-id=\"u7d48082f\" id=\"u7d48082f\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">monorepo 是一种</span><strong><span data-lake-id=\"u7c41fb25\" id=\"u7c41fb25\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">将多个项目代码存储在一个仓库里的软件开发策略</span></strong><span data-lake-id=\"u293d2ff8\" id=\"u293d2ff8\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">（&quot;mono&quot; 来源于希腊语 μόνος 意味</span><strong><span data-lake-id=\"u3935284d\" id=\"u3935284d\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">单个的</span></strong><span data-lake-id=\"ud7cdf2a6\" id=\"ud7cdf2a6\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">，而 &quot;repo&quot;，显而易见地，是 repository 的缩写）。将不同的项目的代码放在同一个代码仓库中，这种「把鸡蛋放在同一个篮子里」的做法可能乍看之下有些奇怪，但实际上，这种代码管理方式有很多好处，无论是世界一流的互联网企业 Google，Facebook，还是社区知名的开源项目团队 Babel （如下图）都使用了 monorepo 策略管理他们的代码。</span></p><p data-lake-id=\"ud30eecf9\" id=\"ud30eecf9\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2022%2Fpng%2F732231%2F1647256879439-9a659711-4588-4201-80d6-730a1f1f1693.png%22%2C%22taskId%22%3A%22uf08fc90e-1b70-4c17-8653-ff5b3a4eb2d%22%2C%22clientId%22%3A%22u6e488e0c-be68-4%22%2C%22originalType%22%3A%22url%22%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A444141%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A1080%2C%22originHeight%22%3A505%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22BABEL%2FBABEL%20PACKAGES%20MAIN%20X%20FILES%20SYMBOLS%20PACKAGES%20LIB%20PACKAGES%20FILES%20AND%20DIRECTORIES%20BABEL-CLI%2F%20BABEL-PLUGIN-SYNTAX-JSX%2F%20BABEL-CLI%20BABEL-CODE-FRAME%2F%20BABEL-PLUGIN-SYNTAX-MODULE-STRING-NAMES%20BABEL-CODE-FRAME%20BABEL-COMPAT-DATA%2F%20BABEL-PLUGIN-SYNTAX-PARTIAL-APPLICATION%2F%20BABEL-COMPAT-DATA%20BABEL-PLUGIN-SYNTAX-PIPELINE-OPERATOR%2F%20BABEL-CORE%2F%20BABEL-CORE%20BABEL-PLUGIN-SYNTAX-RECORD-AND-TUPLE%2F%20BABEL-GENERATOR%2F%20BABEL-HELPER-ANNOTATE-AS-PURE%2F%20BABEL-PLUGIN-SYNTAX-THROW-EXPRESSIONS%2F%20BABEL-GENERATOR%20BABEL-HELPER-BINDIFY-DECORATORS%2F%20BABEL-PLUGIN-SYNTAX-TOP-LEVEL-AWAIT%2F%20BABEL-HELPER-ANNOTATE-AS-PUR%20BABEL-HELPER-BUILDER-BINARY-ASSIGNMENT-OL%20BABEL-PLUGIN-SYNTAX-TYPESCRIPT%2F%20BABEL-HELPER-BINDIFY-DECORATO%20BABEL-HELPER-BUILDER-REACT-JSX%2F%20BABEL-PLUGIN-TRANSFORM-ARROW-FUNCTIONS%2F%20BABEL-HELPER-BUILDER-BINARY-A%20BABEL-PLUGIN-TRANSFORM-ASYNC-TO-GENERATC%20BABEL-HELPER-CALL-DELEGATE%2F%20BABEL-HELPER-BUILDER-REACT-JSX%20BABEL-PLUGIN-TRANSFORM-BLOCK-SCOPED-FUN%20BABEL-HELPER-COMPILATION-TARGETS%20BABEL-HELPER-CREATE-CLASS-FEATURES-PLUGIN%20BABEL-PLUGIN-TRANSFORM-BLOCK-SCOPING%2F%20BABEL-HELPER-CALL-DELEGATE%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A39.089714%2C%22y%22%3A15.788699%2C%22width%22%3A101.02680600000001%2C%22height%22%3A14.742551%2C%22text%22%3A%22BABEL%2FBABEL%22%7D%2C%7B%22x%22%3A259.71085%2C%22y%22%3A15.888045%2C%22width%22%3A82.93155000000002%2C%22height%22%3A16.371122%2C%22text%22%3A%22PACKAGES%22%7D%2C%7B%22x%22%3A176.8142%2C%22y%22%3A16.183344%2C%22width%22%3A39.828599999999994%2C%22height%22%3A14.700375999999999%2C%22text%22%3A%22MAIN%22%7D%2C%7B%22x%22%3A280.00937%2C%22y%22%3A50.07461%2C%22width%22%3A18.415729999999996%2C%22height%22%3A18.87928%2C%22text%22%3A%22X%22%7D%2C%7B%22x%22%3A5.2535625%2C%22y%22%3A53.089573%2C%22width%22%3A45.3251375%2C%22height%22%3A13.759167000000005%2C%22text%22%3A%22FILES%22%7D%2C%7B%22x%22%3A68.17688%2C%22y%22%3A53.152756%2C%22width%22%3A76.8376%2C%22height%22%3A13.355764000000008%2C%22text%22%3A%22SYMBOLS%22%7D%2C%7B%22x%22%3A372.89154%2C%22y%22%3A71.678474%2C%22width%22%3A128.77520999999996%2C%22height%22%3A30.78608600000001%2C%22text%22%3A%22PACKAGES%22%7D%2C%7B%22x%22%3A29.236212%2C%22y%22%3A89.54076%2C%22width%22%3A26.016578%2C%22height%22%3A15.35105999999999%2C%22text%22%3A%22LIB%22%7D%2C%7B%22x%22%3A35.77667%2C%22y%22%3A126.93186%2C%22width%22%3A76.29683%2C%22height%22%3A16.118920000000003%2C%22text%22%3A%22PACKAGES%22%7D%2C%7B%22x%22%3A337.89716%2C%22y%22%3A127.82797%2C%22width%22%3A183.50603999999998%2C%22height%22%3A18.81880000000001%2C%22text%22%3A%22FILES%20AND%20DIRECTORIES%22%7D%2C%7B%22x%22%3A337.4358%2C%22y%22%3A158.56358%2C%22width%22%3A84.30090000000001%2C%22height%22%3A20.490250000000003%2C%22text%22%3A%22BABEL-CLI%2F%22%7D%2C%7B%22x%22%3A718.67053%2C%22y%22%3A159.85756%2C%22width%22%3A209.12970000000007%2C%22height%22%3A19.17295999999999%2C%22text%22%3A%22BABEL-PLUGIN-SYNTAX-JSX%2F%22%7D%2C%7B%22x%22%3A49.62638%2C%22y%22%3A163.36066%2C%22width%22%3A71.391915%2C%22height%22%3A15.653379999999999%2C%22text%22%3A%22BABEL-CLI%22%7D%2C%7B%22x%22%3A337.0093%2C%22y%22%3A186.72224%2C%22width%22%3A159.58033%2C%22height%22%3A19.140780000000007%2C%22text%22%3A%22BABEL-CODE-FRAME%2F%22%7D%2C%7B%22x%22%3A717.84607%2C%22y%22%3A189.0072%2C%22width%22%3A356.19322999999986%2C%22height%22%3A17.620319999999992%2C%22text%22%3A%22BABEL-PLUGIN-SYNTAX-MODULE-STRING-NAMES%22%7D%2C%7B%22x%22%3A50.403893%2C%22y%22%3A200.44554%2C%22width%22%3A142.946957%2C%22height%22%3A14.66846000000001%2C%22text%22%3A%22BABEL-CODE-FRAME%22%7D%2C%7B%22x%22%3A337.96127%2C%22y%22%3A215.99825%2C%22width%22%3A169.73143%2C%22height%22%3A19.608379999999983%2C%22text%22%3A%22BABEL-COMPAT-DATA%2F%22%7D%2C%7B%22x%22%3A717.8125%2C%22y%22%3A216.50226%2C%22width%22%3A336.8073999999999%2C%22height%22%3A19.24109999999999%2C%22text%22%3A%22BABEL-PLUGIN-SYNTAX-PARTIAL-APPLICATION%2F%22%7D%2C%7B%22x%22%3A50.697334%2C%22y%22%3A235.05426%2C%22width%22%3A151.58655600000003%2C%22height%22%3A15.973720000000014%2C%22text%22%3A%22BABEL-COMPAT-DATA%22%7D%2C%7B%22x%22%3A717.0967%2C%22y%22%3A244.34015%2C%22width%22%3A329.74739999999997%2C%22height%22%3A21.216049999999996%2C%22text%22%3A%22BABEL-PLUGIN-SYNTAX-PIPELINE-OPERATOR%2F%22%7D%2C%7B%22x%22%3A338.51096%2C%22y%22%3A245.43759%2C%22width%22%3A100.25459999999998%2C%22height%22%3A17.17941000000002%2C%22text%22%3A%22BABEL-CORE%2F%22%7D%2C%7B%22x%22%3A50.17338%2C%22y%22%3A271.14423%2C%22width%22%3A87.26038%2C%22height%22%3A14.760040000000004%2C%22text%22%3A%22BABEL-CORE%22%7D%2C%7B%22x%22%3A717.5363%2C%22y%22%3A272.05374%2C%22width%22%3A328.06449999999995%2C%22height%22%3A19.802919999999972%2C%22text%22%3A%22BABEL-PLUGIN-SYNTAX-RECORD-AND-TUPLE%2F%22%7D%2C%7B%22x%22%3A338.10226%2C%22y%22%3A272.36493%2C%22width%22%3A144.56124%2C%22height%22%3A19.93844999999999%2C%22text%22%3A%22BABEL-GENERATOR%2F%22%7D%2C%7B%22x%22%3A337.99805%2C%22y%22%3A300.71793%2C%22width%22%3A268.11915000000005%2C%22height%22%3A19.506869999999992%2C%22text%22%3A%22BABEL-HELPER-ANNOTATE-AS-PURE%2F%22%7D%2C%7B%22x%22%3A718.037%2C%22y%22%3A301.4609%2C%22width%22%3A338.49700000000007%2C%22height%22%3A19.062540000000013%2C%22text%22%3A%22BABEL-PLUGIN-SYNTAX-THROW-EXPRESSIONS%2F%22%7D%2C%7B%22x%22%3A46.231155%2C%22y%22%3A306.41595%2C%22width%22%3A131.631845%2C%22height%22%3A16.29717999999997%2C%22text%22%3A%22BABEL-GENERATOR%22%7D%2C%7B%22x%22%3A337.61688%2C%22y%22%3A330.55405%2C%22width%22%3A278.41309000000007%2C%22height%22%3A18.188199999999995%2C%22text%22%3A%22BABEL-HELPER-BINDIFY-DECORATORS%2F%22%7D%2C%7B%22x%22%3A718.6135%2C%22y%22%3A330.7434%2C%22width%22%3A308.98979999999995%2C%22height%22%3A18.159220000000005%2C%22text%22%3A%22BABEL-PLUGIN-SYNTAX-TOP-LEVEL-AWAIT%2F%22%7D%2C%7B%22x%22%3A49.53583%2C%22y%22%3A341.79965%2C%22width%22%3A234.32521999999997%2C%22height%22%3A18.136149999999986%2C%22text%22%3A%22BABEL-HELPER-ANNOTATE-AS-PUR%22%7D%2C%7B%22x%22%3A338.3212%2C%22y%22%3A359.00333%2C%22width%22%3A360.54820000000007%2C%22height%22%3A17.857050000000015%2C%22text%22%3A%22BABEL-HELPER-BUILDER-BINARY-ASSIGNMENT-OL%22%7D%2C%7B%22x%22%3A717.3302%2C%22y%22%3A359.00363%2C%22width%22%3A272.07214%2C%22height%22%3A19.164250000000038%2C%22text%22%3A%22BABEL-PLUGIN-SYNTAX-TYPESCRIPT%2F%22%7D%2C%7B%22x%22%3A49.79885%2C%22y%22%3A376.82352%2C%22width%22%3A234.99584999999996%2C%22height%22%3A18.659050000000036%2C%22text%22%3A%22BABEL-HELPER-BINDIFY-DECORATO%22%7D%2C%7B%22x%22%3A338.57297%2C%22y%22%3A386.54578%2C%22width%22%3A261.64078%2C%22height%22%3A20.49472000000003%2C%22text%22%3A%22BABEL-HELPER-BUILDER-REACT-JSX%2F%22%7D%2C%7B%22x%22%3A718.0706%2C%22y%22%3A388.435%2C%22width%22%3A343.461%2C%22height%22%3A17.52303999999998%2C%22text%22%3A%22BABEL-PLUGIN-TRANSFORM-ARROW-FUNCTIONS%2F%22%7D%2C%7B%22x%22%3A37.87307%2C%22y%22%3A412.2754%2C%22width%22%3A245.79523%2C%22height%22%3A18.762100000000032%2C%22text%22%3A%22BABEL-HELPER-BUILDER-BINARY-A%22%7D%2C%7B%22x%22%3A718.55457%2C%22y%22%3A416.96652%2C%22width%22%3A357.71642999999995%2C%22height%22%3A18.224429999999984%2C%22text%22%3A%22BABEL-PLUGIN-TRANSFORM-ASYNC-TO-GENERATC%22%7D%2C%7B%22x%22%3A338.6162%2C%22y%22%3A417.0908%2C%22width%22%3A229.52106999999995%2C%22height%22%3A16.68394999999998%2C%22text%22%3A%22BABEL-HELPER-CALL-DELEGATE%2F%22%7D%2C%7B%22x%22%3A39.112373%2C%22y%22%3A445.52084%2C%22width%22%3A245.639977%2C%22height%22%3A24.097559999999987%2C%22text%22%3A%22BABEL-HELPER-BUILDER-REACT-JSX%22%7D%2C%7B%22x%22%3A718.3334%2C%22y%22%3A445.42825%2C%22width%22%3A359.83040000000005%2C%22height%22%3A16.936590000000024%2C%22text%22%3A%22BABEL-PLUGIN-TRANSFORM-BLOCK-SCOPED-FUN%22%7D%2C%7B%22x%22%3A338.2727%2C%22y%22%3A446.30698%2C%22width%22%3A285.96717%2C%22height%22%3A17.420379999999966%2C%22text%22%3A%22BABEL-HELPER-COMPILATION-TARGETS%22%7D%2C%7B%22x%22%3A339.26126%2C%22y%22%3A474.11566%2C%22width%22%3A354.9664%2C%22height%22%3A16.707940000000008%2C%22text%22%3A%22BABEL-HELPER-CREATE-CLASS-FEATURES-PLUGIN%22%7D%2C%7B%22x%22%3A717.6789%2C%22y%22%3A474.23688%2C%22width%22%3A328.9123000000001%2C%22height%22%3A18.722350000000006%2C%22text%22%3A%22BABEL-PLUGIN-TRANSFORM-BLOCK-SCOPING%2F%22%7D%2C%7B%22x%22%3A48.338936%2C%22y%22%3A484.08136%2C%22width%22%3A210.50746400000003%2C%22height%22%3A18.485469999999964%2C%22text%22%3A%22BABEL-HELPER-CALL-DELEGATE%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%231b212c%22%2C%22id%22%3A%22ub5cf2a21%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><p data-lake-id=\"uef73b521\" id=\"uef73b521\" style=\"text-align: center\"><span data-lake-id=\"u669907b2\" id=\"u669907b2\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">babel 使用 monorepo 策略管理代码</span></p><p data-lake-id=\"udf974a30\" id=\"udf974a30\"><strong><span data-lake-id=\"u6738642c\" id=\"u6738642c\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">使用 monorepo 策略究竟会给代码管理者和程序开发者带来哪些好处？</span></strong><span data-lake-id=\"u692f3792\" id=\"u692f3792\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\"> </span><strong><span data-lake-id=\"u413bcbe2\" id=\"u413bcbe2\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">我们又该如何在工作中尝试实践 monorepo 策略？</span></strong><span data-lake-id=\"ua61b60bb\" id=\"ua61b60bb\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">这正是本文想要探讨的话题。希望通过我的一番介绍，您能够对 monorepo 策略有更完整的认知，文章中介绍的工具和思想可以切实帮助到您和您所在的团队。</span></p><h2 data-lake-id=\"PYzo6\" id=\"PYzo6\"><span data-lake-id=\"u7bc3af6d\" id=\"u7bc3af6d\" style=\"color: rgb(44, 62, 80)\">2. 🌗 monorepo 策略的优劣</span></h2><p data-lake-id=\"ub61018d1\" id=\"ub61018d1\"><span data-lake-id=\"u2ff4615f\" id=\"u2ff4615f\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">通过 monorepo 策略组织代码，您代码仓库的目录结构看起来会是这样：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22markdown%22%2C%22code%22%3A%22.%5Cn%E2%94%9C%E2%94%80%E2%94%80%20lerna.json%5Cn%E2%94%9C%E2%94%80%E2%94%80%20package.json%5Cn%E2%94%94%E2%94%80%E2%94%80%20packages%2F%20%23%20%E8%BF%99%E9%87%8C%E5%B0%86%E5%AD%98%E6%94%BE%E6%89%80%E6%9C%89%E5%AD%90%20repo%20%E7%9B%AE%E5%BD%95%5Cn%20%20%20%20%E2%94%9C%E2%94%80%E2%94%80%20project_1%2F%5Cn%20%20%20%20%E2%94%82%20%20%20%E2%94%9C%E2%94%80%E2%94%80%20index.js%5Cn%20%20%20%20%E2%94%82%20%20%20%E2%94%9C%E2%94%80%E2%94%80%20node_modules%2F%5Cn%20%20%20%20%E2%94%82%20%20%20%E2%94%94%E2%94%80%E2%94%80%20package.json%5Cn%20%20%20%20%E2%94%9C%E2%94%80%E2%94%80%20project_2%2F%5Cn%20%20%20%20%E2%94%82%20%20%20%E2%94%9C%E2%94%80%E2%94%80%20index.js%5Cn%20%20%20%20%E2%94%82%20%20%20%E2%94%9C%E2%94%80%E2%94%80%20node_module%2F%5Cn%20%20%20%20%E2%94%82%20%20%20%E2%94%94%E2%94%80%E2%94%80%20package.json%5Cn%20%20%20%20...%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22K3rF8%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u1f9b5225\" id=\"u1f9b5225\"><span data-lake-id=\"u0351ac53\" id=\"u0351ac53\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">乍看起来，所谓的 monorepo 策略就只是将不同项目的目录汇集到一个目录之下，但实际上操作起来所要考虑的事情则远比看起来要复杂得多。通过分析使用 monorepo 策略的优劣，我们可以更直观的感受到这里面所隐晦涉及的知识点。</span></p><h3 data-lake-id=\"AdDAF\" id=\"AdDAF\"><span data-lake-id=\"ue1472442\" id=\"ue1472442\" style=\"color: rgb(44, 62, 80)\">2.1 monorepo 方案的优势</span></h3><ol list=\"u4b45c886\"><li fid=\"u21f3a31f\" data-lake-id=\"u914e2851\" id=\"u914e2851\"><strong><span data-lake-id=\"uc476756b\" id=\"uc476756b\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">代码重用将变得非常容易</span></strong><span data-lake-id=\"u4ae0cd67\" id=\"u4ae0cd67\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">：由于所有的项目代码都集中于一个代码仓库，我们将很容易抽离出各个项目共用的业务组件或工具，并通过 TypeScript，Lerna 或其他工具进行代码内引用；</span></li><li fid=\"u21f3a31f\" data-lake-id=\"u8cd9ea44\" id=\"u8cd9ea44\"><strong><span data-lake-id=\"u91d3bf5f\" id=\"u91d3bf5f\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">依赖管理将变得非常简单</span></strong><span data-lake-id=\"u118ee030\" id=\"u118ee030\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">：同理，由于项目之间的引用路径内化在同一个仓库之中，我们很容易追踪当某个项目的代码修改后，会影响到其他哪些项目。通过使用一些工具，我们将很容易地做到版本依赖管理和版本号自动升级；</span></li><li fid=\"u21f3a31f\" data-lake-id=\"ucfe69ff5\" id=\"ucfe69ff5\"><strong><span data-lake-id=\"u4abdcae5\" id=\"u4abdcae5\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">代码重构将变得非常便捷</span></strong><span data-lake-id=\"u791695d1\" id=\"u791695d1\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">：想想究竟是什么在阻止您进行代码重构，很多时候，原因来自于「不确定性」，您不确定对某个项目的修改是否对于其他项目而言是「致命的」，出于对未知的恐惧，您会倾向于不重构代码，这将导致整个项目代码的腐烂度会以惊人的速度增长。而在 monorepo 策略的指导下，您能够明确知道您的代码的影响范围，并且能够对被影响的项目可以进行统一的测试，这会鼓励您不断优化代码；</span></li><li fid=\"u21f3a31f\" data-lake-id=\"ud5e982df\" id=\"ud5e982df\"><strong><span data-lake-id=\"uc5dacf77\" id=\"uc5dacf77\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">它倡导了一种开放，透明，共享的组织文化，这有利于开发者成长，代码质量的提升</span></strong><span data-lake-id=\"u49037a9f\" id=\"u49037a9f\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">：在 monorepo 策略下，每个开发者都被鼓励去查看，修改他人的代码（只要有必要），同时，也会激起开发者维护代码，和编写单元测试的责任心（毕竟朋友来访之前，我们从不介意自己的房子究竟有多乱），这将会形成一种良性的技术氛围，从而保障整个组织的代码质量。</span></li></ol><h3 data-lake-id=\"exmaS\" id=\"exmaS\"><span data-lake-id=\"u8c452176\" id=\"u8c452176\" style=\"color: rgb(44, 62, 80)\">2.2 monorepo 方案的劣势</span></h3><ol list=\"u60a4e857\"><li fid=\"u6841ff16\" data-lake-id=\"u2b65e375\" id=\"u2b65e375\"><strong><span data-lake-id=\"ud1ed56a5\" id=\"ud1ed56a5\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">项目粒度的权限管理变得非常复杂</span></strong><span data-lake-id=\"u531769f5\" id=\"u531769f5\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">：无论是 Git 还是其他 VCS 系统，在支持 monorepo 策略中项目粒度的权限管理上都没有令人满意的方案，这意味着 A 部门的 a 项目若是不想被 B 部门的开发者看到就很难了。（好在我们可以将 monorepo 策略实践在「项目级」这个层次上，这才是我们这篇文章的主题，我们后面会再次明确它）；</span></li><li fid=\"u6841ff16\" data-lake-id=\"u99341738\" id=\"u99341738\"><strong><span data-lake-id=\"u9d40aa17\" id=\"u9d40aa17\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">新员工的学习成本变高</span></strong><span data-lake-id=\"u4b1d6006\" id=\"u4b1d6006\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">：不同于一个项目一个代码仓库这种模式下，组织新人只要熟悉特定代码仓库下的代码逻辑，在 monorepo 策略下，新人可能不得不花更多精力来理清各个代码仓库之间的相互逻辑，当然这个成本可以通过新人文档的方式来解决，但维护文档的新鲜又需要消耗额外的人力；</span></li><li fid=\"u6841ff16\" data-lake-id=\"u2f9d68bc\" id=\"u2f9d68bc\"><strong><span data-lake-id=\"u44625739\" id=\"u44625739\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">对于公司级别的 monorepo 策略而言，需要专门的 VFS 系统，自动重构工具的支持</span></strong><span data-lake-id=\"u3a032835\" id=\"u3a032835\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">：设想一下 Google 这样的企业是如何将十亿行的代码存储在一个仓库之中的？开发人员每次拉取代码需要等待多久？各个项目代码之间又如何实现权限管理，敏捷发布？任何简单的策略乘以足够的规模量级都会产生一个奇迹（不管是好是坏），对于中小企业而言，如果没有像 Google，Facebook 这样雄厚的人力资源，把所有项目代码放在同一个仓库里这个美好的愿望就只能是个空中楼阁。</span></li></ol><h3 data-lake-id=\"f8oq1\" id=\"f8oq1\"><span data-lake-id=\"u3841e2e4\" id=\"u3841e2e4\" style=\"color: rgb(44, 62, 80)\">2.3 小结：如何取舍？</span></h3><p data-lake-id=\"u6f25f1c4\" id=\"u6f25f1c4\"><span data-lake-id=\"ue6723760\" id=\"ue6723760\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">没错，软件开发领域从来没有「银弹」。monorepo 策略也并不完美，并且，我在实践中发现，要想完美在组织中运用 monorepo 策略，所需要的不仅是出色的编程技巧和耐心。</span><strong><span data-lake-id=\"u762f71a1\" id=\"u762f71a1\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">团队日程</span></strong><span data-lake-id=\"ude808cd2\" id=\"ude808cd2\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">，</span><strong><span data-lake-id=\"ua3a040bf\" id=\"ua3a040bf\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">组织文化</span></strong><span data-lake-id=\"u564703c4\" id=\"u564703c4\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">和</span><strong><span data-lake-id=\"uac456392\" id=\"uac456392\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">个人影响力</span></strong><span data-lake-id=\"udda8c002\" id=\"udda8c002\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">相互碰撞的最终结果才决定了想法最终是否能被实现。</span></p><p data-lake-id=\"u465bbf05\" id=\"u465bbf05\"><span data-lake-id=\"u81a87ce9\" id=\"u81a87ce9\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">​</span><br></p><p data-lake-id=\"u81c89532\" id=\"u81c89532\"><span data-lake-id=\"u2cb420af\" id=\"u2cb420af\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">但是请别灰心的太早，因为虽然让组织作出改变，统一施行 monorepo 策略困难重重，但这却并不意味着我们需要彻底跟 monorepo 策略说再见（否则我这篇文章就该到此为止了）。我们还可以</span><strong><span data-lake-id=\"uc07a83c4\" id=\"uc07a83c4\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">把 monorepo 策略实践在「项目」这个级别</span></strong><span data-lake-id=\"u3afe0d8a\" id=\"u3afe0d8a\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">，即从逻辑上确定项目与项目之间的关联性，然后把相关联的项目整合在同一个仓库下，通常情况下，我们不会有太多相互关联的项目，这意味着我们能够免费得到 monorepo 策略的所有好处，并且可以拒绝支付大型 monorepo 架构的利息。</span></p><p data-lake-id=\"u54a6587b\" id=\"u54a6587b\"><span data-lake-id=\"u64108542\" id=\"u64108542\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">​</span><br></p><p data-lake-id=\"u738eb388\" id=\"u738eb388\"><span data-lake-id=\"u47f78110\" id=\"u47f78110\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">本文的剩余篇幅就是对「项目级别 monorepo 实践」的一些总结，即使您最终没有选择 monorepo 策略组织您的代码，相信文章中提供的一些工程化工具或思路也一样会对您产生帮助。</span></p><h2 data-lake-id=\"HgfwO\" id=\"HgfwO\"><span data-lake-id=\"u2285e3a6\" id=\"u2285e3a6\" style=\"color: rgb(44, 62, 80)\">3. 🧑🏻‍💻 monorepo 方案实践</span></h2><h3 data-lake-id=\"X3AbB\" id=\"X3AbB\"><span data-lake-id=\"ucc0996b1\" id=\"ucc0996b1\" style=\"color: rgb(44, 62, 80)\">3.1 锁定环境：Volta</span></h3><p data-lake-id=\"u39c52a79\" id=\"u39c52a79\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2022%2Fpng%2F732231%2F1647256879064-51b0ea9d-4fae-414a-9daa-25d2b8636bbe.png%22%2C%22taskId%22%3A%22uade973cc-b970-4792-9626-f96d2cf89fd%22%2C%22clientId%22%3A%22u6e488e0c-be68-4%22%2C%22originalType%22%3A%22url%22%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A42541%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A606%2C%22originHeight%22%3A288%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22VOLTA%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A58.46657%2C%22y%22%3A122.0861%2C%22width%22%3A529.5013899999999%2C%22height%22%3A131.64175999999998%2C%22text%22%3A%22VOLTA%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23e2e2e2%22%2C%22id%22%3A%22u51dc6b27%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><p data-lake-id=\"ub9af2a2e\" id=\"ub9af2a2e\"><a href=\"https://volta.sh/\" target=\"_blank\" data-lake-id=\"u80cdc94b\" id=\"u80cdc94b\"><span data-lake-id=\"ufbec241f\" id=\"ufbec241f\">Volta</span></a><span data-lake-id=\"u56401b6b\" id=\"u56401b6b\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\"> </span><span data-lake-id=\"u2ecc918d\" id=\"u2ecc918d\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">是一个 JavaScript 工具管理器，它可以让我们轻松地在项目中锁定 node，npm 和 yarn 的版本。你只需在安装完 Volta 后，在项目的根目录中执行</span><span data-lake-id=\"u8d3e3e9d\" id=\"u8d3e3e9d\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\"> </span><span data-lake-id=\"uc5f62314\" id=\"uc5f62314\" class=\"lake-fontsize-12\" style=\"color: rgb(71, 101, 130)\">volta pin</span><span data-lake-id=\"ue031a7dd\" id=\"ue031a7dd\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\"> </span><span data-lake-id=\"u3faab5e3\" id=\"u3faab5e3\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">命令，那么无论您当前使用的 node 或 npm（yarn）版本是什么，volta 都会自动切换为您指定的版本。</span></p><p data-lake-id=\"u27b08639\" id=\"u27b08639\"><span data-lake-id=\"u65eb9ab2\" id=\"u65eb9ab2\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">​</span><br></p><p data-lake-id=\"uda2bfaf6\" id=\"uda2bfaf6\"><span data-lake-id=\"u7c56dfda\" id=\"u7c56dfda\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">因此，除了使用 Docker 和显示在文档中声明 node 和 npm（yarn）的版本之外，您就有了另一个锁定环境的强力工具。</span></p><p data-lake-id=\"u95ef6475\" id=\"u95ef6475\"><span data-lake-id=\"u205194cb\" id=\"u205194cb\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">​</span><br></p><p data-lake-id=\"u8bfa757a\" id=\"u8bfa757a\"><span data-lake-id=\"ud5ee87d4\" id=\"ud5ee87d4\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">而且相较于 nvm，Volta 还具有一个诱人的特性：当您项目的 CLI 工具与全局 CLI 工具不一致时，Volta 可以做到在项目根目录下自动识别，切换到项目指定的版本，这一切都是由 Volta 默默做到的，开发者不必关心任何事情。</span></p><h3 data-lake-id=\"LD202\" id=\"LD202\"><span data-lake-id=\"u99a9e942\" id=\"u99a9e942\" style=\"color: rgb(44, 62, 80)\">3.2 复用 packages：workspace</span></h3><p data-lake-id=\"ua493dc71\" id=\"ua493dc71\"><span data-lake-id=\"u84c618b4\" id=\"u84c618b4\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">使用 monorepo 策略后，收益最大的两点是：</span></p><ol list=\"ua84a47fe\"><li fid=\"uf1b4985e\" data-lake-id=\"ua8fe2baf\" id=\"ua8fe2baf\"><strong><span data-lake-id=\"uce22f40d\" id=\"uce22f40d\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">避免重复安装包，因此减少了磁盘空间的占用，并降低了构建时间</span></strong><span data-lake-id=\"u2dec9739\" id=\"u2dec9739\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">；</span></li><li fid=\"uf1b4985e\" data-lake-id=\"u9b1733f2\" id=\"u9b1733f2\"><strong><span data-lake-id=\"u9a6b1881\" id=\"u9a6b1881\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">内部代码可以彼此相互引用</span></strong><span data-lake-id=\"u3b16a021\" id=\"u3b16a021\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">；</span></li></ol><p data-lake-id=\"u4a5d6344\" id=\"u4a5d6344\"><br></p><p data-lake-id=\"ud8c4315f\" id=\"ud8c4315f\"><span data-lake-id=\"u72bd5155\" id=\"u72bd5155\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">这两项好处全部都可以由一个成熟的包管理工具来完成，对前端开发而言，即是</span><span data-lake-id=\"u2f3cebf5\" id=\"u2f3cebf5\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\"> </span><span data-lake-id=\"u532d1274\" id=\"u532d1274\" class=\"lake-fontsize-12\" style=\"color: rgb(71, 101, 130)\">yarn</span><span data-lake-id=\"ued4a082d\" id=\"ued4a082d\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">（1.0 以上）或</span><span data-lake-id=\"u5f615b20\" id=\"u5f615b20\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\"> </span><span data-lake-id=\"u78d1f159\" id=\"u78d1f159\" class=\"lake-fontsize-12\" style=\"color: rgb(71, 101, 130)\">npm</span><span data-lake-id=\"uee786983\" id=\"uee786983\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">（7.0 以上）通过名为</span><span data-lake-id=\"u88c42afa\" id=\"u88c42afa\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\"> </span><span data-lake-id=\"u921d47a8\" id=\"u921d47a8\" class=\"lake-fontsize-12\" style=\"color: rgb(71, 101, 130)\">workspaces</span><span data-lake-id=\"u4f4b4f25\" id=\"u4f4b4f25\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\"> </span><span data-lake-id=\"u3ed9caba\" id=\"u3ed9caba\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">的特性实现的（⚠️ 注意，支持 workspaces 特性的 npm 目前依旧不是 TLS 版本）。</span></p><p data-lake-id=\"u85ddeb7c\" id=\"u85ddeb7c\"><span data-lake-id=\"u4982bff5\" id=\"u4982bff5\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">​</span><br></p><p data-lake-id=\"u243ab284\" id=\"u243ab284\"><span data-lake-id=\"u516601c1\" id=\"u516601c1\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">为了实现前面提到的两点收益，您需要在代码中做三件事：</span></p><ol list=\"u68ab8ca1\"><li fid=\"uec3573e9\" data-lake-id=\"u4a0cbee6\" id=\"u4a0cbee6\"><span data-lake-id=\"u282f9e42\" id=\"u282f9e42\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">调整目录结构，将相互关联的项目放置在同一个目录，推荐命名为 </span><code data-lake-id=\"u9f3fadeb\" id=\"u9f3fadeb\"><span data-lake-id=\"u640ab08f\" id=\"u640ab08f\" class=\"lake-fontsize-12\" style=\"color: rgb(71, 101, 130)\">packages</span></code><span data-lake-id=\"u8bea9ee6\" id=\"u8bea9ee6\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">；</span></li><li fid=\"uec3573e9\" data-lake-id=\"u6722b056\" id=\"u6722b056\"><span data-lake-id=\"u6534bb9d\" id=\"u6534bb9d\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">在项目根目录里的 </span><code data-lake-id=\"u66a242ca\" id=\"u66a242ca\"><span data-lake-id=\"ud04637d0\" id=\"ud04637d0\" class=\"lake-fontsize-12\" style=\"color: rgb(71, 101, 130)\">package.json</span></code><span data-lake-id=\"u69e70938\" id=\"u69e70938\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\"> 文件中，设置 </span><code data-lake-id=\"u5fe989ee\" id=\"u5fe989ee\"><span data-lake-id=\"u2a808af9\" id=\"u2a808af9\" class=\"lake-fontsize-12\" style=\"color: rgb(71, 101, 130)\">workspaces</span></code><span data-lake-id=\"u9f92bbee\" id=\"u9f92bbee\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\"> 属性，属性值为之前创建的目录；</span></li><li fid=\"uec3573e9\" data-lake-id=\"ue81d7c17\" id=\"ue81d7c17\"><span data-lake-id=\"u4fd8c5c8\" id=\"u4fd8c5c8\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">同样，在 </span><code data-lake-id=\"ub94c3b9b\" id=\"ub94c3b9b\"><span data-lake-id=\"ucec1f188\" id=\"ucec1f188\" class=\"lake-fontsize-12\" style=\"color: rgb(71, 101, 130)\">package.json</span></code><span data-lake-id=\"u530be199\" id=\"u530be199\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\"> 文件中，设置 </span><code data-lake-id=\"udb29af29\" id=\"udb29af29\"><span data-lake-id=\"u186f4902\" id=\"u186f4902\" class=\"lake-fontsize-12\" style=\"color: rgb(71, 101, 130)\">private</span></code><span data-lake-id=\"u62f9e6be\" id=\"u62f9e6be\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\"> 属性为 </span><code data-lake-id=\"u7968bd43\" id=\"u7968bd43\"><span data-lake-id=\"u7dc18e52\" id=\"u7dc18e52\" class=\"lake-fontsize-12\" style=\"color: rgb(71, 101, 130)\">true</span></code><span data-lake-id=\"ud0eafc18\" id=\"ud0eafc18\" class=\"lake-fontsize-12\" style=\"color: rgb(71, 101, 130)\"> </span><span data-lake-id=\"ucd14a4e0\" id=\"ucd14a4e0\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">(为了避免我们误操作将仓库发布)；</span></li></ol><p data-lake-id=\"ue99788a3\" id=\"ue99788a3\"><span data-lake-id=\"ud157b4b2\" id=\"ud157b4b2\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">​</span><br></p><p data-lake-id=\"u3e3bc81d\" id=\"u3e3bc81d\"><span data-lake-id=\"uf8cbf136\" id=\"uf8cbf136\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">经过修改，您的项目目录看起来应该是这样：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22markdown%22%2C%22code%22%3A%22.%5Cn%E2%94%9C%E2%94%80%E2%94%80%20package.json%5Cn%E2%94%94%E2%94%80%E2%94%80%20packages%2F%5Cn%20%20%20%20%E2%94%9C%E2%94%80%E2%94%80%20%40mono%2Fproject_1%2F%20%23%20%E6%8E%A8%E8%8D%90%E4%BD%BF%E7%94%A8%20%60%40%3C%E9%A1%B9%E7%9B%AE%E5%90%8D%3E%2F%3C%E5%AD%90%E9%A1%B9%E7%9B%AE%E5%90%8D%3E%60%20%E7%9A%84%E6%96%B9%E5%BC%8F%E5%91%BD%E5%90%8D%5Cn%20%20%20%20%E2%94%82%20%20%20%E2%94%9C%E2%94%80%E2%94%80%20index.js%5Cn%20%20%20%20%E2%94%82%20%20%20%E2%94%94%E2%94%80%E2%94%80%20package.json%5Cn%20%20%20%20%E2%94%94%E2%94%80%E2%94%80%20%40mono%2Fproject_2%2F%5Cn%20%20%20%20%20%20%20%20%E2%94%9C%E2%94%80%E2%94%80%20index.js%5Cn%20%20%20%20%20%20%20%20%E2%94%94%E2%94%80%E2%94%80%20package.json%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22el38t%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u6f513765\" id=\"u6f513765\"><span data-lake-id=\"ube9901c8\" id=\"ube9901c8\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">而当您在项目根目录中执行</span><span data-lake-id=\"u42135760\" id=\"u42135760\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\"> </span><span data-lake-id=\"u45fd5c6c\" id=\"u45fd5c6c\" class=\"lake-fontsize-12\" style=\"color: rgb(71, 101, 130)\">npm install</span><span data-lake-id=\"u31a4b5d1\" id=\"u31a4b5d1\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\"> </span><span data-lake-id=\"u1b3cd946\" id=\"u1b3cd946\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">或</span><span data-lake-id=\"u8f5c4f32\" id=\"u8f5c4f32\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\"> </span><span data-lake-id=\"u3f106956\" id=\"u3f106956\" class=\"lake-fontsize-12\" style=\"color: rgb(71, 101, 130)\">yarn install</span><span data-lake-id=\"ueb6a52ba\" id=\"ueb6a52ba\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">后，您会发现在项目根目录中出现了</span><span data-lake-id=\"ua60e2f9e\" id=\"ua60e2f9e\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\"> </span><span data-lake-id=\"ucd881e1b\" id=\"ucd881e1b\" class=\"lake-fontsize-12\" style=\"color: rgb(71, 101, 130)\">node_modules</span><span data-lake-id=\"ubc052d1b\" id=\"ubc052d1b\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\"> </span><span data-lake-id=\"ua3c336bb\" id=\"ua3c336bb\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">目录，并且该目录不仅拥有所有子项目共用的 npm 包，还包含了我们的子项目。因此，我们可以在子项目中通过各种模块引入机制，像引入一般的 npm 模块一样引入其他子项目的代码。</span></p><p data-lake-id=\"ucd5633a0\" id=\"ucd5633a0\"><span data-lake-id=\"ua5d363e0\" id=\"ua5d363e0\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">​</span><br></p><p data-lake-id=\"u96363688\" id=\"u96363688\"><span data-lake-id=\"u4840bfcd\" id=\"u4840bfcd\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">请注意我们对子项目的命名，统一以</span><span data-lake-id=\"u0844534c\" id=\"u0844534c\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\"> </span><span data-lake-id=\"u929b82d5\" id=\"u929b82d5\" class=\"lake-fontsize-12\" style=\"color: rgb(71, 101, 130)\">@&lt;repo_name&gt;/</span><span data-lake-id=\"u1e2e1012\" id=\"u1e2e1012\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\"> </span><span data-lake-id=\"u85e9c643\" id=\"u85e9c643\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">开头，这是一种社区最佳实践，不仅可以让用户更容易了解整个应用的架构，也方便您在项目中更快捷的找到所需的子项目。</span></p><p data-lake-id=\"u30f5279b\" id=\"u30f5279b\"><span data-lake-id=\"u51868e46\" id=\"u51868e46\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">​</span><br></p><p data-lake-id=\"u70ecb25d\" id=\"u70ecb25d\"><span data-lake-id=\"u53b20289\" id=\"u53b20289\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">至此，我们已经完成了 monorepo 策略的核心部分，实在是很容易不是吗？但是老话说「行百里者半九十」，距离优雅的搭建一个 monorepo 项目，我们还有一些路要走。</span></p><h3 data-lake-id=\"T9loK\" id=\"T9loK\"><span data-lake-id=\"u0172bcac\" id=\"u0172bcac\" style=\"color: rgb(44, 62, 80)\">3.3 统一配置：合并同类项 - Eslint，Typescript 与 Babel</span></h3><p data-lake-id=\"u829dc752\" id=\"u829dc752\"><span data-lake-id=\"u2c5dad52\" id=\"u2c5dad52\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">您一定同意，编写代码要遵循 DRY 原则（Don't Repeat Yourself 的缩写）。那么，理所当然地，我们应该尽量避免在多个子项目中放置重复的 eslintrc，tsconfig 等配置文件。幸运的是，Babel，Eslint 和 Typescript 都提供了相应的功能让我们减少自我重复。</span></p><h4 data-lake-id=\"AqDWx\" id=\"AqDWx\"><span data-lake-id=\"ue6b5ea04\" id=\"ue6b5ea04\" style=\"color: rgb(44, 62, 80)\">3.3.1 TypeScript</span></h4><p data-lake-id=\"ued64d495\" id=\"ued64d495\"><span data-lake-id=\"u2b43ba35\" id=\"u2b43ba35\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">我们可以在</span><span data-lake-id=\"u7005ce6d\" id=\"u7005ce6d\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\"> </span><span data-lake-id=\"uba2d8589\" id=\"uba2d8589\" class=\"lake-fontsize-12\" style=\"color: rgb(71, 101, 130)\">packages</span><span data-lake-id=\"ufbea41cb\" id=\"ufbea41cb\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\"> </span><span data-lake-id=\"u1ed84a60\" id=\"u1ed84a60\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">目录中放置</span><span data-lake-id=\"u81bd0aa3\" id=\"u81bd0aa3\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\"> </span><span data-lake-id=\"u29b31ee8\" id=\"u29b31ee8\" class=\"lake-fontsize-12\" style=\"color: rgb(71, 101, 130)\">tsconfig.settting.json</span><span data-lake-id=\"ud9c1314b\" id=\"ud9c1314b\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\"> </span><span data-lake-id=\"ufcb0483f\" id=\"ufcb0483f\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">文件，并在文件中定义通用的 ts 配置，然后，在每个子项目中，我们可以通过</span><span data-lake-id=\"u50fd51f3\" id=\"u50fd51f3\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\"> </span><span data-lake-id=\"ufab88216\" id=\"ufab88216\" class=\"lake-fontsize-12\" style=\"color: rgb(71, 101, 130)\">extends</span><span data-lake-id=\"uc22a9806\" id=\"uc22a9806\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\"> </span><span data-lake-id=\"ua4ccc01e\" id=\"ua4ccc01e\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">属性，引入通用配置，并设置</span><span data-lake-id=\"u5cb5871c\" id=\"u5cb5871c\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\"> </span><span data-lake-id=\"u3533eb3c\" id=\"u3533eb3c\" class=\"lake-fontsize-12\" style=\"color: rgb(71, 101, 130)\">compilerOptions.composite</span><span data-lake-id=\"ue58aa9ef\" id=\"ue58aa9ef\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\"> </span><span data-lake-id=\"ud7374023\" id=\"ud7374023\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">的值为</span><span data-lake-id=\"u0997c691\" id=\"u0997c691\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\"> </span><span data-lake-id=\"u557013d9\" id=\"u557013d9\" class=\"lake-fontsize-12\" style=\"color: rgb(71, 101, 130)\">true</span><span data-lake-id=\"u6bf7d80d\" id=\"u6bf7d80d\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">，理想情况下，子项目中的</span><span data-lake-id=\"u31ccbc40\" id=\"u31ccbc40\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\"> </span><span data-lake-id=\"ue1956031\" id=\"ue1956031\" class=\"lake-fontsize-12\" style=\"color: rgb(71, 101, 130)\">tsconfig</span><span data-lake-id=\"u790b76bd\" id=\"u790b76bd\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\"> </span><span data-lake-id=\"ud4dc4b93\" id=\"ud4dc4b93\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">文件应该仅包含下述内容：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22json%22%2C%22code%22%3A%22%7B%5Cn%20%20%5C%22extends%5C%22%3A%20%5C%22..%2Ftsconfig.setting.json%5C%22%2C%20%2F%2F%20%E7%BB%A7%E6%89%BF%20packages%20%E7%9B%AE%E5%BD%95%E4%B8%8B%E9%80%9A%E7%94%A8%E9%85%8D%E7%BD%AE%5Cn%20%20%5C%22compilerOptions%5C%22%3A%20%7B%5Cn%20%20%20%20%5C%22composite%5C%22%3A%20true%2C%20%2F%2F%20%E7%94%A8%E4%BA%8E%E5%B8%AE%E5%8A%A9%20TypeScript%20%E5%BF%AB%E9%80%9F%E7%A1%AE%E5%AE%9A%E5%BC%95%E7%94%A8%E5%B7%A5%E7%A8%8B%E7%9A%84%E8%BE%93%E5%87%BA%E6%96%87%E4%BB%B6%E4%BD%8D%E7%BD%AE%5Cn%20%20%20%20%5C%22outDir%5C%22%3A%20%5C%22dist%5C%22%2C%5Cn%20%20%20%20%5C%22rootDir%5C%22%3A%20%5C%22src%5C%22%5Cn%20%20%7D%2C%5Cn%20%20%5C%22include%5C%22%3A%20%5B%5C%22src%5C%22%5D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22W4ZV7%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h4 data-lake-id=\"aP7kn\" id=\"aP7kn\"><span data-lake-id=\"u98f4bc18\" id=\"u98f4bc18\" style=\"color: rgb(44, 62, 80)\">3.3.2 Eslint</span></h4><p data-lake-id=\"ufbaf1710\" id=\"ufbaf1710\"><span data-lake-id=\"u4177da19\" id=\"u4177da19\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">对于 Eslint 配置文件，我们也可以如法炮制，这样定义子项目的</span><span data-lake-id=\"u9d45f4fc\" id=\"u9d45f4fc\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\"> </span><span data-lake-id=\"udb278d02\" id=\"udb278d02\" class=\"lake-fontsize-12\" style=\"color: rgb(71, 101, 130)\">.eslintrc</span><span data-lake-id=\"ub5fc631c\" id=\"ub5fc631c\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\"> </span><span data-lake-id=\"u89e0f440\" id=\"u89e0f440\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">文件内容：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22json%22%2C%22code%22%3A%22%7B%5Cn%20%20%5C%22extends%5C%22%3A%20%5C%22..%2F..%2F.eslintrc%5C%22%2C%20%2F%2F%20%E6%B3%A8%E6%84%8F%E8%BF%99%E9%87%8C%E7%9A%84%E4%B8%8D%E5%90%8C%5Cn%20%20%5C%22parserOptions%5C%22%3A%20%7B%5Cn%20%20%20%20%5C%22project%5C%22%3A%20%5C%22tsconfig.json%5C%22%5Cn%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22YVJEd%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"ufbd711a3\" id=\"ufbd711a3\"><span data-lake-id=\"u7ebff796\" id=\"u7ebff796\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">注意到了吗，对于通用的 eslint 配置，我们并没有将其放置在 </span><span data-lake-id=\"u22dcd6d1\" id=\"u22dcd6d1\" class=\"lake-fontsize-12\" style=\"color: rgb(71, 101, 130)\">packages</span><span data-lake-id=\"ue55780c9\" id=\"ue55780c9\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\"> 目录中，而是放在整个项目的根目录下，这样做是因为一些编辑器插件只会在项目根目录寻找 </span><span data-lake-id=\"u91584388\" id=\"u91584388\" class=\"lake-fontsize-12\" style=\"color: rgb(71, 101, 130)\">.eslintrc</span><span data-lake-id=\"u7fe687d5\" id=\"u7fe687d5\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\"> 文件，因此为了我们的项目能够保持良好的「开发环境一致性」，请务必将通用配置文件放置在项目的根目录中。</span></p><h4 data-lake-id=\"x0oWt\" id=\"x0oWt\"><span data-lake-id=\"u021e8597\" id=\"u021e8597\" style=\"color: rgb(44, 62, 80)\">3.3.3 Babel</span></h4><p data-lake-id=\"u4c371e9e\" id=\"u4c371e9e\"><span data-lake-id=\"u5bd59e57\" id=\"u5bd59e57\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">Babel 配置文件合并的方式与 TypeScript 如出一辙，甚至更加简单，我们只需在子项目中的 </span><span data-lake-id=\"uc7440f02\" id=\"uc7440f02\" class=\"lake-fontsize-12\" style=\"color: rgb(71, 101, 130)\">.babelrc</span><span data-lake-id=\"u0e1db3fc\" id=\"u0e1db3fc\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\"> 文件中这样声明即可：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22json%22%2C%22code%22%3A%22%7B%5Cn%20%20%5C%22extends%5C%22%3A%20%5C%22..%2F.babelrc%5C%22%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22LuM0N%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u6179ad7f\" id=\"u6179ad7f\"><span data-lake-id=\"u520ec81d\" id=\"u520ec81d\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">当一切准备就绪后，我们的项目目录应该大致呈如下所示的结构：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22markdown%22%2C%22code%22%3A%22.%5Cn%E2%94%9C%E2%94%80%E2%94%80%20package.json%5Cn%E2%94%9C%E2%94%80%E2%94%80%20.eslintrc%5Cn%E2%94%94%E2%94%80%E2%94%80%20packages%2F%5Cn%20%20%20%20%E2%94%82%20%20%20%E2%94%9C%E2%94%80%E2%94%80%20tsconfig.settings.json%5Cn%20%20%20%20%E2%94%82%20%20%20%E2%94%9C%E2%94%80%E2%94%80%20.babelrc%5Cn%20%20%20%20%E2%94%9C%E2%94%80%E2%94%80%20%40mono%2Fproject_1%2F%5Cn%20%20%20%20%E2%94%82%20%20%20%E2%94%9C%E2%94%80%E2%94%80%20index.js%5Cn%20%20%20%20%E2%94%82%20%20%20%E2%94%9C%E2%94%80%E2%94%80%20.eslintrc%5Cn%20%20%20%20%E2%94%82%20%20%20%E2%94%9C%E2%94%80%E2%94%80%20.babelrc%5Cn%20%20%20%20%E2%94%82%20%20%20%E2%94%9C%E2%94%80%E2%94%80%20tsconfig.json%5Cn%20%20%20%20%E2%94%82%20%20%20%E2%94%94%E2%94%80%E2%94%80%20package.json%5Cn%20%20%20%20%E2%94%94%E2%94%80%E2%94%80%E2%94%80%40mono%2Fproject_2%2F%5Cn%20%20%20%20%20%20%20%20%E2%94%9C%E2%94%80%E2%94%80%20index.js%5Cn%20%20%20%20%20%20%20%20%E2%94%9C%E2%94%80%E2%94%80%20.eslintrc%5Cn%20%20%20%20%20%20%20%20%E2%94%9C%E2%94%80%E2%94%80%20.babelrc%5Cn%20%20%20%20%20%20%20%20%E2%94%9C%E2%94%80%E2%94%80%20tsconfig.json%5Cn%20%20%20%20%20%20%20%20%E2%94%94%E2%94%80%E2%94%80%20package.json%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22Rat1Z%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h3 data-lake-id=\"hBZeX\" id=\"hBZeX\"><span data-lake-id=\"ubeb49af5\" id=\"ubeb49af5\" style=\"color: rgb(44, 62, 80)\">3.4 统一命令脚本：scripty</span></h3><p data-lake-id=\"u71c7f7a9\" id=\"u71c7f7a9\"><span data-lake-id=\"ucaf4ae4a\" id=\"ucaf4ae4a\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">在上一步中，我们尽可能的将所有配置文件进行抽象，从而精简了代码，并提高了整个项目的一致性。我们的整个仓库也因此有了「更浓郁的 monorepo 风味 ☕️」。但如果仔细审视我们的整个工程文件，还有一处存在着明显的瑕疵和一些恼人的坏味道，当您仔细审视您的众多</span><span data-lake-id=\"u14e11e83\" id=\"u14e11e83\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\"> </span><span data-lake-id=\"u38ae9635\" id=\"u38ae9635\" class=\"lake-fontsize-12\" style=\"color: rgb(71, 101, 130)\">package.json</span><span data-lake-id=\"u9e86718a\" id=\"u9e86718a\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\"> </span><span data-lake-id=\"u06aad40b\" id=\"u06aad40b\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">文件时，您就知道我在说什么了 -- scripts 脚本。</span></p><p data-lake-id=\"ub834fdb1\" id=\"ub834fdb1\"><span data-lake-id=\"u605bb520\" id=\"u605bb520\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">​</span><br></p><p data-lake-id=\"u35e8dab9\" id=\"u35e8dab9\"><span data-lake-id=\"u31221121\" id=\"u31221121\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">如果您的子项目足够多，您可能会发现，每个</span><span data-lake-id=\"u03d25a96\" id=\"u03d25a96\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\"> </span><span data-lake-id=\"ua8ebb21c\" id=\"ua8ebb21c\" class=\"lake-fontsize-12\" style=\"color: rgb(71, 101, 130)\">package.json</span><span data-lake-id=\"u0887dfce\" id=\"u0887dfce\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\"> </span><span data-lake-id=\"u6214b31d\" id=\"u6214b31d\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">文件中的</span><span data-lake-id=\"uf37d0726\" id=\"uf37d0726\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\"> </span><span data-lake-id=\"ud22c33dd\" id=\"ud22c33dd\" class=\"lake-fontsize-12\" style=\"color: rgb(71, 101, 130)\">scripts</span><span data-lake-id=\"u8cdc37a5\" id=\"u8cdc37a5\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\"> </span><span data-lake-id=\"u6eca3510\" id=\"u6eca3510\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">属性都大同小异，并且一些</span><span data-lake-id=\"ubb8b3ffc\" id=\"ubb8b3ffc\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\"> </span><span data-lake-id=\"u1dd50128\" id=\"u1dd50128\" class=\"lake-fontsize-12\" style=\"color: rgb(71, 101, 130)\">scripts</span><span data-lake-id=\"ue8434546\" id=\"ue8434546\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\"> </span><span data-lake-id=\"u0bde1442\" id=\"u0bde1442\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">充斥着各种 Linux 语法，例如管道操作符，重定向或目录生成。</span><strong><span data-lake-id=\"u0d11de24\" id=\"u0d11de24\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">重复带来低效，复杂则使人难以理解</span></strong><span data-lake-id=\"u4b2c6da3\" id=\"u4b2c6da3\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">，这都是需要我们解决的问题。</span></p><p data-lake-id=\"u588a17bc\" id=\"u588a17bc\"><span data-lake-id=\"u27f1b072\" id=\"u27f1b072\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">​</span><br></p><p data-lake-id=\"u90dc71a8\" id=\"u90dc71a8\"><span data-lake-id=\"uc4eadc3f\" id=\"uc4eadc3f\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">这里给出的解决方案是，使用</span><span data-lake-id=\"u8f5deed0\" id=\"u8f5deed0\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\"> </span><a href=\"https://www.npmjs.com/package/scripty\" target=\"_blank\" data-lake-id=\"u70097baa\" id=\"u70097baa\"><span data-lake-id=\"u58df6aac\" id=\"u58df6aac\">scripty</span></a><span data-lake-id=\"u1615da9c\" id=\"u1615da9c\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\"> </span><span data-lake-id=\"uf2a5a49a\" id=\"uf2a5a49a\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">管理您的脚本命令，简单来说，scripty 允许您将脚本命令定义在文件中，并在</span><span data-lake-id=\"uc550bfbd\" id=\"uc550bfbd\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\"> </span><span data-lake-id=\"u6ce59fa6\" id=\"u6ce59fa6\" class=\"lake-fontsize-12\" style=\"color: rgb(71, 101, 130)\">package.json</span><span data-lake-id=\"u8c75dd0b\" id=\"u8c75dd0b\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\"> </span><span data-lake-id=\"uebea7973\" id=\"uebea7973\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">文件中直接通过文件名来引用。这使我们可以实现如下目的：</span></p><ol list=\"u4fd8f64e\"><li fid=\"ucf9dcdc3\" data-lake-id=\"uad44ff18\" id=\"uad44ff18\"><strong><span data-lake-id=\"u38712623\" id=\"u38712623\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">子项目间复用脚本命令</span></strong><span data-lake-id=\"u358cc353\" id=\"u358cc353\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">；</span></li><li fid=\"ucf9dcdc3\" data-lake-id=\"u8a5717f5\" id=\"u8a5717f5\"><strong><span data-lake-id=\"u2f876db2\" id=\"u2f876db2\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">像写代码一样编写脚本命令，无论它有多复杂，而在调用时，像调用函数一样调用</span></strong><span data-lake-id=\"ue1455ec8\" id=\"ue1455ec8\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">；</span></li></ol><p data-lake-id=\"u0d0c578c\" id=\"u0d0c578c\"><span data-lake-id=\"uca51a93d\" id=\"uca51a93d\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">​</span><br></p><p data-lake-id=\"u1c39c020\" id=\"u1c39c020\"><span data-lake-id=\"u685bc387\" id=\"u685bc387\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">通过使用 scripty 管理我们的 monorepo 应用，目录结构看起来将会是这样：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22markdown%22%2C%22code%22%3A%22.%5Cn%E2%94%9C%E2%94%80%E2%94%80%20package.json%5Cn%E2%94%9C%E2%94%80%E2%94%80%20.eslintrc%5Cn%E2%94%9C%E2%94%80%E2%94%80%20scirpts%2F%20%23%20%E8%BF%99%E9%87%8C%E5%AD%98%E6%94%BE%E6%89%80%E6%9C%89%E7%9A%84%E8%84%9A%E6%9C%AC%5Cn%E2%94%82%20%20%20%E2%94%82%20%20%20%E2%94%9C%E2%94%80%E2%94%80%20packages%2F%20%23%20%E5%8C%85%E7%BA%A7%E5%88%AB%E8%84%9A%E6%9C%AC%5Cn%E2%94%82%20%20%20%E2%94%82%20%20%20%E2%94%82%20%20%20%E2%94%9C%E2%94%80%E2%94%80%20build.sh%5Cn%E2%94%82%20%20%20%E2%94%82%20%20%20%E2%94%82%20%20%20%E2%94%94%E2%94%80%E2%94%80%20test.sh%5Cn%E2%94%82%20%20%20%E2%94%94%E2%94%80%E2%94%80%E2%94%80%E2%94%94%E2%94%80%E2%94%80%20workspaces%2F%20%23%20%E5%85%A8%E5%B1%80%E8%84%9A%E6%9C%AC%5Cn%E2%94%82%20%20%20%20%20%20%20%20%20%20%20%E2%94%9C%E2%94%80%E2%94%80%20build.sh%5Cn%E2%94%82%20%20%20%20%20%20%20%20%20%20%20%E2%94%94%E2%94%80%E2%94%80%20test.sh%5Cn%E2%94%94%E2%94%80%E2%94%80%20packages%2F%5Cn%20%20%20%20%E2%94%82%20%20%20%E2%94%9C%E2%94%80%E2%94%80%20tsconfig.settings.json%5Cn%20%20%20%20%E2%94%82%20%20%20%E2%94%9C%E2%94%80%E2%94%80%20.babelrc%5Cn%20%20%20%20%E2%94%9C%E2%94%80%E2%94%80%20%40mono%2Fproject_1%2F%5Cn%20%20%20%20%E2%94%82%20%20%20%E2%94%9C%E2%94%80%E2%94%80%20index.js%5Cn%20%20%20%20%E2%94%82%20%20%20%E2%94%9C%E2%94%80%E2%94%80%20.eslintrc%5Cn%20%20%20%20%E2%94%82%20%20%20%E2%94%9C%E2%94%80%E2%94%80%20.babelrc%5Cn%20%20%20%20%E2%94%82%20%20%20%E2%94%9C%E2%94%80%E2%94%80%20tsconfig.json%5Cn%20%20%20%20%E2%94%82%20%20%20%E2%94%94%E2%94%80%E2%94%80%20package.json%5Cn%20%20%20%20%E2%94%94%E2%94%80%E2%94%80%20%40mono%2Fproject_2%2F%5Cn%20%20%20%20%20%20%20%20%E2%94%9C%E2%94%80%E2%94%80%20index.js%5Cn%20%20%20%20%20%20%20%20%E2%94%9C%E2%94%80%E2%94%80%20.eslintrc%5Cn%20%20%20%20%20%20%20%20%E2%94%9C%E2%94%80%E2%94%80%20.babelrc%5Cn%20%20%20%20%20%20%20%20%E2%94%9C%E2%94%80%E2%94%80%20tsconfig.json%5Cn%20%20%20%20%20%20%20%20%E2%94%94%E2%94%80%E2%94%80%20package.json%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22ieiaT%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"uffb12674\" id=\"uffb12674\"><span data-lake-id=\"u3e886601\" id=\"u3e886601\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">注意，我们脚本分为两类「package 级别」与「workspace 级别」，并且分别放在两个文件夹内。这样做的好处在于，我们既可以在项目根目录执行全局脚本，也可以针对单个项目执行特定的脚本。</span></p><p data-lake-id=\"u2986ff87\" id=\"u2986ff87\"><span data-lake-id=\"uf04928bb\" id=\"uf04928bb\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">​</span><br></p><p data-lake-id=\"u6a689a35\" id=\"u6a689a35\"><span data-lake-id=\"uf83ffad8\" id=\"uf83ffad8\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">通过使用 scripty，子项目的 </span><span data-lake-id=\"u5d81e401\" id=\"u5d81e401\" class=\"lake-fontsize-12\" style=\"color: rgb(71, 101, 130)\">package.json</span><span data-lake-id=\"ub788d8ff\" id=\"ub788d8ff\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\"> 文件中的 </span><span data-lake-id=\"uf722fd12\" id=\"uf722fd12\" class=\"lake-fontsize-12\" style=\"color: rgb(71, 101, 130)\">scripts</span><span data-lake-id=\"uc68af86e\" id=\"uc68af86e\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\"> 属性将变得非常精简：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22json%22%2C%22code%22%3A%22%7B%5Cn%20%20...%5Cn%20%20%5C%22scripts%5C%22%3A%20%7B%5Cn%20%20%20%20%5C%22test%5C%22%3A%20%5C%22scripty%5C%22%2C%5Cn%20%20%20%20%5C%22lint%5C%22%3A%20%5C%22scripty%5C%22%2C%5Cn%20%20%20%20%5C%22build%5C%22%3A%20%5C%22scripty%5C%22%5Cn%20%20%7D%2C%5Cn%20%20%5C%22scripty%5C%22%3A%20%7B%5Cn%20%20%20%20%5C%22path%5C%22%3A%20%5C%22..%2F..%2Fscripts%2Fpackages%5C%22%20%2F%2F%20%E6%B3%A8%E6%84%8F%E8%BF%99%E9%87%8C%E6%88%91%E4%BB%AC%E6%8C%87%E5%AE%9A%E4%BA%86%20scripty%20%E7%9A%84%E8%B7%AF%E5%BE%84%5Cn%20%20%7D%2C%5Cn%20%20...%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22XoV5L%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"ud89c47c5\" id=\"ud89c47c5\"><span data-lake-id=\"u96f8f3b5\" id=\"u96f8f3b5\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">大功告成！🎉 至此，我们尽己所能地删除了整个项目中的重复代码，让整个项目变得干净，清爽并且有极强的复用性。</span></p><blockquote data-lake-id=\"u71b62422\" id=\"u71b62422\" class=\"lake-alert lake-alert-info\"><p data-lake-id=\"u48cf5b3f\" id=\"u48cf5b3f\"><span data-lake-id=\"uaa7dd6c0\" id=\"uaa7dd6c0\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">🧉 小贴士：</span></p><p data-lake-id=\"ufd40322e\" id=\"ufd40322e\"><span data-lake-id=\"u708a705e\" id=\"u708a705e\" class=\"lake-fontsize-12\" style=\"color: rgb(153, 153, 153)\">别忘了使用 chmod -R u+x scripts 命令使所有的 shell 脚本具备可执行权限，也千万别忘了把这条贴士写在您的 README.md 文件中！</span></p></blockquote><h3 data-lake-id=\"ofYMs\" id=\"ofYMs\"><span data-lake-id=\"u720fff22\" id=\"u720fff22\" style=\"color: rgb(44, 62, 80)\">3.5 统一包管理：Lerna</span></h3><p data-lake-id=\"ue9cecd86\" id=\"ue9cecd86\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2022%2Fpng%2F732231%2F1647256879285-b37f124c-5c57-402f-aa35-654d7e9a5b09.png%22%2C%22taskId%22%3A%22uf6bcf63b-6c9a-4f2d-a53e-9f2cafc258e%22%2C%22clientId%22%3A%22u6e488e0c-be68-4%22%2C%22originalType%22%3A%22url%22%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A198846%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A960%2C%22originHeight%22%3A868%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%22%2C%22ocrLocations%22%3A%5B%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22id%22%3A%22ue5da8ee4%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><p data-lake-id=\"u1192ca46\" id=\"u1192ca46\" style=\"text-align: center\"><span data-lake-id=\"u534de67d\" id=\"u534de67d\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">图片来源：https://github.com/lerna/lerna</span></p><p data-lake-id=\"u1e433263\" id=\"u1e433263\"><span data-lake-id=\"u28b43c85\" id=\"u28b43c85\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">我有时会感慨自己的灵感匮乏，怎么就想不到 Lerna 这样既有神话色彩又能自我释义的好名字。您可以大胆想象，九头龙的每只龙头都在帮您管理着一个子项目，而您只需要骑在龙身上发号施令的场景，这基本上就是我们使用 Lerna 时的直观感受。</span></p><p data-lake-id=\"ued055ae9\" id=\"ued055ae9\"><span data-lake-id=\"ufa6b5dd8\" id=\"ufa6b5dd8\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">​</span><br></p><p data-lake-id=\"ubbeb37d6\" id=\"ubbeb37d6\"><span data-lake-id=\"u38d31832\" id=\"u38d31832\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">这也是为什么当我们提起 monorepo 策略，就几乎不得不提到 Lerna 的原因了，它的确提供了一种非常便捷的方式供我们管理 monorepo 项目。当子项目越多时，Lerna 就越能显示其威力。</span></p><p data-lake-id=\"u3ebdd90c\" id=\"u3ebdd90c\"><span data-lake-id=\"u00fb7213\" id=\"u00fb7213\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">​</span><br></p><p data-lake-id=\"u777b0f5a\" id=\"u777b0f5a\"><span data-lake-id=\"u9534a6b9\" id=\"u9534a6b9\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">当多个子项目放在一个代码仓库，并且子项目之间又相互依赖时，我们面临的棘手问题有两个：</span></p><ol list=\"u3d5d3e7e\"><li fid=\"u9b90fcda\" data-lake-id=\"u27c47ae8\" id=\"u27c47ae8\"><strong><span data-lake-id=\"u7148c07c\" id=\"u7148c07c\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">如果我们需要在多个子目录执行相同的命令，我们需要手动进入各个目录，并执行命令</span></strong><span data-lake-id=\"u86895ccb\" id=\"u86895ccb\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">；</span></li><li fid=\"u9b90fcda\" data-lake-id=\"udead62d3\" id=\"udead62d3\"><strong><span data-lake-id=\"u12de36ea\" id=\"u12de36ea\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">当一个子项目更新后，我们只能手动追踪依赖该项目的其他子项目，并升级其版本</span></strong><span data-lake-id=\"u902c24cf\" id=\"u902c24cf\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">。</span></li></ol><p data-lake-id=\"u56c53fac\" id=\"u56c53fac\"><span data-lake-id=\"uc9fe530c\" id=\"uc9fe530c\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">通过使用 Lerna，这些棘手的问题都将不复存在。</span></p><p data-lake-id=\"ua2b12287\" id=\"ua2b12287\"><span data-lake-id=\"ufa049638\" id=\"ufa049638\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">​</span><br></p><p data-lake-id=\"ua81c0076\" id=\"ua81c0076\"><span data-lake-id=\"u82136600\" id=\"u82136600\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">当在项目根目录使用 </span><span data-lake-id=\"uddf748c6\" id=\"uddf748c6\" class=\"lake-fontsize-12\" style=\"color: rgb(71, 101, 130)\">npx lerna init</span><span data-lake-id=\"u86c6956e\" id=\"u86c6956e\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\"> 初始化后，我们的根目录会新增一个 </span><span data-lake-id=\"u618c39b7\" id=\"u618c39b7\" class=\"lake-fontsize-12\" style=\"color: rgb(71, 101, 130)\">lerna.json</span><span data-lake-id=\"u3e3e3abe\" id=\"u3e3e3abe\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\"> 文件，默认内容为：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22json%22%2C%22code%22%3A%22%7B%5Cn%20%20%5C%22packages%5C%22%3A%20%5B%5C%22packages%2F*%5C%22%5D%2C%5Cn%20%20%5C%22version%5C%22%3A%20%5C%220.0.0%5C%22%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22o4gUB%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u1b3b572e\" id=\"u1b3b572e\"><span data-lake-id=\"u952ccb46\" id=\"u952ccb46\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">让我们稍稍改动这个文件，使其变为：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22json%22%2C%22code%22%3A%22%7B%5Cn%20%20%5C%22packages%5C%22%3A%20%5B%5C%22packages%2F*%5C%22%5D%2C%5Cn%20%20%5C%22npmClient%5C%22%3A%20%5C%22yarn%5C%22%2C%5Cn%20%20%5C%22version%5C%22%3A%20%5C%22independent%5C%22%2C%5Cn%20%20%5C%22useWorkspaces%5C%22%3A%20true%2C%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22bniQ9%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"ub3daaa1a\" id=\"ub3daaa1a\"><span data-lake-id=\"u7389423e\" id=\"u7389423e\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">可以注意到，我们显示声明了我们的包客户端（</span><span data-lake-id=\"ud161c1b6\" id=\"ud161c1b6\" class=\"lake-fontsize-12\" style=\"color: rgb(71, 101, 130)\">npmClient</span><span data-lake-id=\"uaff1619f\" id=\"uaff1619f\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">）为</span><span data-lake-id=\"u77c55708\" id=\"u77c55708\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\"> </span><span data-lake-id=\"u81b647ec\" id=\"u81b647ec\" class=\"lake-fontsize-12\" style=\"color: rgb(71, 101, 130)\">yarn</span><span data-lake-id=\"udfb8caaf\" id=\"udfb8caaf\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">，并且让 Lerna 追踪我们 workspaces 设置的目录，这样我们就依旧保留了之前</span><span data-lake-id=\"u2e9f22de\" id=\"u2e9f22de\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\"> </span><span data-lake-id=\"u03a32039\" id=\"u03a32039\" class=\"lake-fontsize-12\" style=\"color: rgb(71, 101, 130)\">workspaces</span><span data-lake-id=\"ub1c6ab71\" id=\"ub1c6ab71\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\"> </span><span data-lake-id=\"u79e12f71\" id=\"u79e12f71\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">的所有特性（</span><strong><span data-lake-id=\"ua5b19ce1\" id=\"ua5b19ce1\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">子项目引用</span></strong><span data-lake-id=\"ue405e434\" id=\"ue405e434\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">和</span><strong><span data-lake-id=\"u94f228d8\" id=\"u94f228d8\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">通用包提升</span></strong><span data-lake-id=\"u268ad2e1\" id=\"u268ad2e1\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">）。</span></p><p data-lake-id=\"u89c66570\" id=\"u89c66570\"><span data-lake-id=\"u26130be0\" id=\"u26130be0\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">​</span><br></p><p data-lake-id=\"ub429bda9\" id=\"ub429bda9\"><span data-lake-id=\"ue3438871\" id=\"ue3438871\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">除此之外一个有趣的改动在于我们将 </span><span data-lake-id=\"u731a4841\" id=\"u731a4841\" class=\"lake-fontsize-12\" style=\"color: rgb(71, 101, 130)\">version</span><span data-lake-id=\"ue7af5ab8\" id=\"ue7af5ab8\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\"> 属性指定为一个关键字 </span><span data-lake-id=\"u8454867f\" id=\"u8454867f\" class=\"lake-fontsize-12\" style=\"color: rgb(71, 101, 130)\">independent</span><span data-lake-id=\"u66c5383b\" id=\"u66c5383b\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">，这将告诉 lerna 应该</span><strong><span data-lake-id=\"u687e0d56\" id=\"u687e0d56\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">将每个子项目的版本号看作是相互独立的</span></strong><span data-lake-id=\"u83ed6d86\" id=\"u83ed6d86\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">。当某个子项目代码更新后，运行 </span><span data-lake-id=\"ua51a9496\" id=\"ua51a9496\" class=\"lake-fontsize-12\" style=\"color: rgb(71, 101, 130)\">lerna publish</span><span data-lake-id=\"u5418c5c1\" id=\"u5418c5c1\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\"> 时，Lerna 将监听到代码变化的子项目并以交互式 CLI 方式让开发者决定需要升级的版本号，关联的子项目版本号不会自动升级，反之，当我们填入固定的版本号时，则任一子项目的代码变动，都会导致所有子项目的版本号基于当前指定的版本号升级。</span></p><p data-lake-id=\"u0e61fc9c\" id=\"u0e61fc9c\"><span data-lake-id=\"u93cfe941\" id=\"u93cfe941\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">​</span><br></p><p data-lake-id=\"u52cf8053\" id=\"u52cf8053\"><span data-lake-id=\"u457c28b1\" id=\"u457c28b1\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">Lerna 提供了很多 CLI 命令以满足我们的各种需求，但根据 2/8 法则，您应该首先关注以下这些命令：</span></p><ul list=\"ub4173239\"><li fid=\"u96c14c3c\" data-lake-id=\"u6c700d82\" id=\"u6c700d82\"><span data-lake-id=\"u51c8f6e5\" id=\"u51c8f6e5\" class=\"lake-fontsize-12\" style=\"color: rgb(71, 101, 130)\">lerna bootstrap</span><span data-lake-id=\"u65e44626\" id=\"u65e44626\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">：等同于</span><span data-lake-id=\"u9fa25063\" id=\"u9fa25063\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\"> </span><span data-lake-id=\"u31d19382\" id=\"u31d19382\" class=\"lake-fontsize-12\" style=\"color: rgb(71, 101, 130)\">lerna link</span><span data-lake-id=\"u447bbea3\" id=\"u447bbea3\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\"> </span><span data-lake-id=\"u98bd1ede\" id=\"u98bd1ede\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">+</span><span data-lake-id=\"uc83c73ef\" id=\"uc83c73ef\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\"> </span><span data-lake-id=\"u5c6c3375\" id=\"u5c6c3375\" class=\"lake-fontsize-12\" style=\"color: rgb(71, 101, 130)\">yarn install</span><span data-lake-id=\"u9b82d917\" id=\"u9b82d917\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">，用于创建符合链接并安装依赖包；</span></li><li fid=\"u96c14c3c\" data-lake-id=\"uf9469c10\" id=\"uf9469c10\"><span data-lake-id=\"u0a912e06\" id=\"u0a912e06\" class=\"lake-fontsize-12\" style=\"color: rgb(71, 101, 130)\">lerna run</span><span data-lake-id=\"u46369e44\" id=\"u46369e44\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">：会像执行一个 for 循环一样，在所有子项目中执行 npm script 脚本，并且，它会非常智能的识别依赖关系，并从根依赖开始执行命令；</span></li><li fid=\"u96c14c3c\" data-lake-id=\"u932e5cfe\" id=\"u932e5cfe\"><span data-lake-id=\"u8e84e0e6\" id=\"u8e84e0e6\" class=\"lake-fontsize-12\" style=\"color: rgb(71, 101, 130)\">lerna exec</span><span data-lake-id=\"u9cb2abdc\" id=\"u9cb2abdc\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">：像</span><span data-lake-id=\"u9e28d29f\" id=\"u9e28d29f\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\"> </span><span data-lake-id=\"u638cb916\" id=\"u638cb916\" class=\"lake-fontsize-12\" style=\"color: rgb(71, 101, 130)\">lerna run</span><span data-lake-id=\"u66e15f30\" id=\"u66e15f30\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\"> </span><span data-lake-id=\"u74f60a5a\" id=\"u74f60a5a\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">一样，会按照依赖顺序执行命令，不同的是，它可以执行任何命令，例如 shell 脚本；</span></li><li fid=\"u96c14c3c\" data-lake-id=\"ub06c4bdf\" id=\"ub06c4bdf\"><span data-lake-id=\"uded6cbf2\" id=\"uded6cbf2\" class=\"lake-fontsize-12\" style=\"color: rgb(71, 101, 130)\">lerna publish</span><span data-lake-id=\"ub3021ef0\" id=\"ub3021ef0\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">：发布代码有变动的 package，因此首先您需要在使用 Lerna 前使用</span><span data-lake-id=\"u89a85df5\" id=\"u89a85df5\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\"> </span><span data-lake-id=\"ud48463b8\" id=\"ud48463b8\" class=\"lake-fontsize-12\" style=\"color: rgb(71, 101, 130)\">git commit</span><span data-lake-id=\"u1cf9423d\" id=\"u1cf9423d\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\"> </span><span data-lake-id=\"u54d4719d\" id=\"u54d4719d\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">命令提交代码，好让 Lerna 有一个 baseline；</span></li><li fid=\"u96c14c3c\" data-lake-id=\"u06b01b17\" id=\"u06b01b17\"><span data-lake-id=\"ube0b3a5c\" id=\"ube0b3a5c\" class=\"lake-fontsize-12\" style=\"color: rgb(71, 101, 130)\">lerna add</span><span data-lake-id=\"u0ee17864\" id=\"u0ee17864\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">：将本地或远程的包作为依赖添加至当前的 monorepo 仓库中，该命令让 Lerna 可以识别并追踪包之间的依赖关系，因此非常重要；</span></li></ul><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22shell%22%2C%22code%22%3A%22%23%20%E5%90%91%20%40mono%2Fproject2%20%E5%92%8C%20%40mono%2Fproject3%20%E4%B8%AD%E6%B7%BB%E5%8A%A0%20%40mono%2Fproject1%5Cnlerna%20add%20%40mono%2Fproject1%20'%40mono%2Fproject%7B2%2C3%7D'%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22bdAcZ%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h4 data-lake-id=\"RVo0W\" id=\"RVo0W\"><span data-lake-id=\"u68add26d\" id=\"u68add26d\" style=\"color: rgb(44, 62, 80)\">3.5.1 Lerna 高级命令</span></h4><p data-lake-id=\"u8dce5a89\" id=\"u8dce5a89\"><span data-lake-id=\"u14d58dd6\" id=\"u14d58dd6\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">除了上面介绍到的常用命令外，Lerna 还提供了一些参数满足我们更灵活的需求，例如：</span></p><ul list=\"ufa8c3a19\"><li fid=\"u6bb8a866\" data-lake-id=\"ua122680d\" id=\"ua122680d\"><code data-lake-id=\"u144593c4\" id=\"u144593c4\"><span data-lake-id=\"ud02523dd\" id=\"ud02523dd\" class=\"lake-fontsize-12\" style=\"color: rgb(71, 101, 130)\">--concurrency &lt;number&gt;</span></code><span data-lake-id=\"ue2b878ae\" id=\"ue2b878ae\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">：参数可以使 Lerna 利用计算机上的多个核心，并发运行，从而提升构建速度；</span></li><li fid=\"u6bb8a866\" data-lake-id=\"u5d330b31\" id=\"u5d330b31\"><code data-lake-id=\"uaa8e5a88\" id=\"uaa8e5a88\"><span data-lake-id=\"ua8d01620\" id=\"ua8d01620\" class=\"lake-fontsize-12\" style=\"color: rgb(71, 101, 130)\">--scope '@mono/{pkg1,pkg2}'</span></code><span data-lake-id=\"u95304184\" id=\"u95304184\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">：</span><code data-lake-id=\"u430bd131\" id=\"u430bd131\"><span data-lake-id=\"u2a0865ba\" id=\"u2a0865ba\" class=\"lake-fontsize-12\" style=\"color: rgb(71, 101, 130)\">--scope</span></code><span data-lake-id=\"ua40ceba6\" id=\"ua40ceba6\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\"> 参数可以指定 Lerna 命令的运行环境，通过使用该参数，Lerna 将不再是一把梭的在所有仓库中执行命令，而是可以精准地在我们所指定的仓库中执行命令，并且还支持示例中的模版语法；</span></li><li fid=\"u6bb8a866\" data-lake-id=\"ucbcd7067\" id=\"ucbcd7067\"><code data-lake-id=\"ua2a90836\" id=\"ua2a90836\"><span data-lake-id=\"u2658498e\" id=\"u2658498e\" class=\"lake-fontsize-12\" style=\"color: rgb(71, 101, 130)\">--stream</span></code><span data-lake-id=\"ubfd50d58\" id=\"ubfd50d58\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">：该参数可使我们查看 Lerna 运行时的命令执行信息；</span></li></ul><h4 data-lake-id=\"H2jG7\" id=\"H2jG7\"><span data-lake-id=\"u944d1e87\" id=\"u944d1e87\" style=\"color: rgb(44, 62, 80)\">3.5.2 npm 包本地发布：Verdaccio</span></h4><p data-lake-id=\"uc70122c1\" id=\"uc70122c1\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2022%2Fpng%2F732231%2F1647256879198-723cfae0-eff1-4e23-badf-d72662510765.png%22%2C%22taskId%22%3A%22ua7005d7d-7f74-48b0-bbb9-2c669bd2556%22%2C%22clientId%22%3A%22u6e488e0c-be68-4%22%2C%22originalType%22%3A%22url%22%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A19855%2C%22from%22%3A%22paste%22%2C%22originWidth%22%3A602%2C%22originHeight%22%3A200%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22V%20VERDACCIO%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A48.902042%2C%22y%22%3A49.563244%2C%22width%22%3A513.340388%2C%22height%22%3A102.25673599999999%2C%22text%22%3A%22V%20VERDACCIO%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22id%22%3A%22uf92c71f3%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><p data-lake-id=\"ud727d4c5\" id=\"ud727d4c5\"><span data-lake-id=\"u1571b825\" id=\"u1571b825\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">看到这里，您可能想要亲自体验一把使用 Lerna 管理/发布 monorepo 项目的感觉。可是很快您会发现，将示例代码发布到真实世界的 npm 仓库并非一个好主意，这多少有些令人沮丧，但是别担心，您可以使用</span><span data-lake-id=\"u04bea2d3\" id=\"u04bea2d3\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\"> </span><a href=\"https://verdaccio.org/\" target=\"_blank\" data-lake-id=\"u00abb48a\" id=\"u00abb48a\"><span data-lake-id=\"u4ae64066\" id=\"u4ae64066\">Verdaccio</span></a><span data-lake-id=\"ub7bf4c51\" id=\"ub7bf4c51\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\"> </span><span data-lake-id=\"u4f51679c\" id=\"u4f51679c\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">在本地创建一个 npm 仓库作为代理，然后尽情体验 Lerna 的种种强大之处。</span></p><p data-lake-id=\"u8fce2d9a\" id=\"u8fce2d9a\"><span data-lake-id=\"u2b75d4e3\" id=\"u2b75d4e3\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">​</span><br></p><p data-lake-id=\"u06ffb147\" id=\"u06ffb147\"><span data-lake-id=\"u6f24c6fb\" id=\"u6f24c6fb\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">安装运行 Verdaccio 非常简单，您只需运行：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22shell%22%2C%22code%22%3A%22npm%20install%20--global%20verdaccio%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22OYbOG%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"ub231eabd\" id=\"ub231eabd\"><span data-lake-id=\"u087818ac\" id=\"u087818ac\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">在全局安装 Verdaccio 应用，然后在 shell 中输入：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22shell%22%2C%22code%22%3A%22verdaccio%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22Ha0Mi%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u5dc97380\" id=\"u5dc97380\"><span data-lake-id=\"ucd9c15a8\" id=\"ucd9c15a8\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">即可通过 </span><span data-lake-id=\"u0df16382\" id=\"u0df16382\" class=\"lake-fontsize-12\" style=\"color: rgb(71, 101, 130)\">localhost:4837</span><span data-lake-id=\"u7c6fdde0\" id=\"u7c6fdde0\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\"> 访问您的本地代理 npm 仓库，别忘了在您的项目根目录创建 </span><span data-lake-id=\"ue1797cb5\" id=\"ue1797cb5\" class=\"lake-fontsize-12\" style=\"color: rgb(71, 101, 130)\">.npmrc</span><span data-lake-id=\"u69333eb3\" id=\"u69333eb3\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\"> 文件，并在文件中将 npm 仓库地址改写为您的本地代理地址：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22shell%22%2C%22code%22%3A%22registry%3D%5C%22http%3A%2F%2Flocalhost%3A4873%2F%5C%22%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22tHFHj%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"ucf137b08\" id=\"ucf137b08\"><span data-lake-id=\"ub2b96da2\" id=\"ub2b96da2\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">大功告成 🙌！每当您执行 </span><code data-lake-id=\"ufdf45c57\" id=\"ufdf45c57\"><span data-lake-id=\"ucce1fb3e\" id=\"ucce1fb3e\" class=\"lake-fontsize-12\" style=\"color: rgb(71, 101, 130)\">lerna publish</span></code><span data-lake-id=\"u77cfe6e1\" id=\"u77cfe6e1\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\"> 时，子项目所构建成的 package 将会发布在本地 npm 仓库中，而当您执行 </span><span data-lake-id=\"uedf807a5\" id=\"uedf807a5\" class=\"lake-fontsize-12\" style=\"color: rgb(71, 101, 130)\">lerna bootstrap</span><span data-lake-id=\"u6ca3a6d1\" id=\"u6ca3a6d1\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\"> 时，Verdaccio 将会放行，让您成功从远程 npm 仓库中拉取相应的代码。</span></p><h3 data-lake-id=\"PBkdJ\" id=\"PBkdJ\"><span data-lake-id=\"uccb278e8\" id=\"uccb278e8\" style=\"color: rgb(44, 62, 80)\">3.6 格式化 commit 信息</span></h3><p data-lake-id=\"u59df7bed\" id=\"u59df7bed\"><span data-lake-id=\"u81563063\" id=\"u81563063\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">至此，我们已经掌握了组织一个项目级 monorepo 仓库的所有前沿技巧，最后，让我们看看最后一个可以优化的地方：</span><strong><span data-lake-id=\"u0e60278f\" id=\"u0e60278f\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">代码提交时，约束 commit 信息</span></strong><span data-lake-id=\"u2df1a75d\" id=\"u2df1a75d\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">。</span></p><p data-lake-id=\"u43c1bb9b\" id=\"u43c1bb9b\"><span data-lake-id=\"u9c6dc5b4\" id=\"u9c6dc5b4\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">​</span><br></p><p data-lake-id=\"u20f94032\" id=\"u20f94032\"><span data-lake-id=\"u88934c42\" id=\"u88934c42\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">一个 monorepo 仓库可能被</span><strong><span data-lake-id=\"ubed37f81\" id=\"ubed37f81\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">不同的开发者提交不同子项目</span></strong><span data-lake-id=\"u74065034\" id=\"u74065034\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">的代码，如果没有规范化的 commit 信息，在故障排查或版本回滚时毫无意外会遭遇灾难。因此，千万不要小看 commit 信息格式化的重要性（当然，同样重要的还有代码注释！）。</span></p><p data-lake-id=\"u0f6d9481\" id=\"u0f6d9481\"><span data-lake-id=\"uf6888164\" id=\"uf6888164\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">​</span><br></p><p data-lake-id=\"ub83c335b\" id=\"ub83c335b\"><span data-lake-id=\"u2b020c05\" id=\"u2b020c05\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">为了我们能够一目了然的追踪每次代码变更的信息，我们使用 </span><a href=\"https://github.com/conventional-changelog/commitlint/#what-is-commitlint\" target=\"_blank\" data-lake-id=\"u44f1f5cd\" id=\"u44f1f5cd\"><span data-lake-id=\"u6c155042\" id=\"u6c155042\">commitlint</span></a><span data-lake-id=\"u12699166\" id=\"u12699166\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\"> 工具作为格式化 commit 信息的不二之选。</span></p><p data-lake-id=\"udfabd56a\" id=\"udfabd56a\"><span data-lake-id=\"u6f16f447\" id=\"u6f16f447\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">​</span><br></p><p data-lake-id=\"ub23f9896\" id=\"ub23f9896\"><span data-lake-id=\"uce5c7a2d\" id=\"uce5c7a2d\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">顾名思义，</span><code data-lake-id=\"u51131993\" id=\"u51131993\"><span data-lake-id=\"u7800d0f5\" id=\"u7800d0f5\" class=\"lake-fontsize-12\" style=\"color: rgb(71, 101, 130)\">commitlint</span></code><span data-lake-id=\"u5203ff6e\" id=\"u5203ff6e\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\"> 可以帮助我们检查提交的 commit 信息，它强制约束我们的 commit 信息必须在开头附加指定类型，用于标示本次提交的大致意图，支持的类型关键字有：</span></p><ul list=\"uf5b26ec4\"><li fid=\"udab148e1\" data-lake-id=\"u26ab9e73\" id=\"u26ab9e73\"><code data-lake-id=\"uab675aba\" id=\"uab675aba\"><span data-lake-id=\"u17d40b48\" id=\"u17d40b48\" class=\"lake-fontsize-12\" style=\"color: rgb(71, 101, 130)\">feat</span></code><span data-lake-id=\"u0df73a16\" id=\"u0df73a16\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">：表示添加一个新特性；</span></li><li fid=\"udab148e1\" data-lake-id=\"u8f5d8328\" id=\"u8f5d8328\"><code data-lake-id=\"uf449fc7b\" id=\"uf449fc7b\"><span data-lake-id=\"u906705da\" id=\"u906705da\" class=\"lake-fontsize-12\" style=\"color: rgb(71, 101, 130)\">chore</span></code><span data-lake-id=\"uf96feb40\" id=\"uf96feb40\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">：表示做了一些与特性和修复无关的「家务事」；</span></li><li fid=\"udab148e1\" data-lake-id=\"ua1b40293\" id=\"ua1b40293\"><code data-lake-id=\"u7052cd39\" id=\"u7052cd39\"><span data-lake-id=\"uf8f839e6\" id=\"uf8f839e6\" class=\"lake-fontsize-12\" style=\"color: rgb(71, 101, 130)\">fix</span></code><span data-lake-id=\"u6022e015\" id=\"u6022e015\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">：表示修复了一个 Bug；</span></li><li fid=\"udab148e1\" data-lake-id=\"ue7db7ec0\" id=\"ue7db7ec0\"><code data-lake-id=\"u0beb9cd6\" id=\"u0beb9cd6\"><span data-lake-id=\"ud71fd52e\" id=\"ud71fd52e\" class=\"lake-fontsize-12\" style=\"color: rgb(71, 101, 130)\">refactor</span></code><span data-lake-id=\"ue92e2f47\" id=\"ue92e2f47\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">：表示本次提交是因为重构了代码；</span></li><li fid=\"udab148e1\" data-lake-id=\"u9a4f7abc\" id=\"u9a4f7abc\"><code data-lake-id=\"u53b33b0b\" id=\"u53b33b0b\"><span data-lake-id=\"uacc5c097\" id=\"uacc5c097\" class=\"lake-fontsize-12\" style=\"color: rgb(71, 101, 130)\">style</span></code><span data-lake-id=\"u64c3ddc7\" id=\"u64c3ddc7\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">：表示代码美化或格式化；</span></li><li fid=\"udab148e1\" data-lake-id=\"uc24c75fc\" id=\"uc24c75fc\"><span data-lake-id=\"u1bd134f3\" id=\"u1bd134f3\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">...</span></li></ul><p data-lake-id=\"u896e216b\" id=\"u896e216b\"><span data-lake-id=\"u86f947ce\" id=\"u86f947ce\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">​</span><br></p><p data-lake-id=\"u886f7219\" id=\"u886f7219\"><span data-lake-id=\"u135b2527\" id=\"u135b2527\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">我强烈建议您遵循该规范编写您的 commit 信息，不要偷懒，坚持下去，您的 git 日志将会显得整齐，有条理，富有表现力，同时，您也会收到同行的交口称赞，人人都会以和您这样优雅的工程师合作为荣。</span></p><p data-lake-id=\"uea56f20e\" id=\"uea56f20e\"><span data-lake-id=\"u0de74706\" id=\"u0de74706\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">​</span><br></p><p data-lake-id=\"u557fd3ea\" id=\"u557fd3ea\"><span data-lake-id=\"ua80ae608\" id=\"ua80ae608\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">除了限定 commit 信息类型外，commitlint 还支持（虽然不是必须的）显示指定我们本次提交所对应的子项目名称。假如我们有一个名为 </span><code data-lake-id=\"u46c10ca8\" id=\"u46c10ca8\"><span data-lake-id=\"udbd013d5\" id=\"udbd013d5\" class=\"lake-fontsize-12\" style=\"color: rgb(71, 101, 130)\">@mono/project1</span></code><span data-lake-id=\"u350d476e\" id=\"u350d476e\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\"> 的子项目，我们针对该项目提交的 commit 信息可以写为：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22shell%22%2C%22code%22%3A%22git%20commit%20-m%20%5C%22feat(project1)%3A%20add%20a%20attractive%20button%5C%22%20%23%20%E6%B3%A8%E6%84%8F%EF%BC%8C%E6%88%91%E4%BB%AC%E7%9C%81%E7%95%A5%E4%BA%86%20%40mono%20%E7%9A%84%E9%A1%B9%E7%9B%AE%E5%89%8D%E7%BC%80%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22KGVER%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"ud4cd07a6\" id=\"ud4cd07a6\"><span data-lake-id=\"u39ee78d7\" id=\"u39ee78d7\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">毫无疑问，这将会使我们的 commit 信息更具表现力。</span></p><p data-lake-id=\"u1142642d\" id=\"u1142642d\"><span data-lake-id=\"u00d85ab4\" id=\"u00d85ab4\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">​</span><br></p><p data-lake-id=\"uff98ac97\" id=\"uff98ac97\"><span data-lake-id=\"u69aed614\" id=\"u69aed614\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">我们可以通过下面的命令安装 </span><span data-lake-id=\"u6d45d21c\" id=\"u6d45d21c\" class=\"lake-fontsize-12\" style=\"color: rgb(71, 101, 130)\">commitlint</span><span data-lake-id=\"u9a623526\" id=\"u9a623526\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\"> 以及周边依赖：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22shell%22%2C%22code%22%3A%22npm%20i%20-D%20%40commitlint%2Fcli%20%40commitlint%2Fconfig-conventional%20%40commitlint%2Fconfig-lerna-scopes%20commitlint%20husky%20lerna-changelog%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22Ypfzy%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u43ab1ae3\" id=\"u43ab1ae3\"><span data-lake-id=\"u602e0852\" id=\"u602e0852\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">注意到了吗？我偷偷安装了 </span><a href=\"https://www.npmjs.com/package/husky\" target=\"_blank\" data-lake-id=\"u34a95f1f\" id=\"u34a95f1f\"><span data-lake-id=\"u236da9b2\" id=\"u236da9b2\">husky</span></a><span data-lake-id=\"u997d1eca\" id=\"u997d1eca\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">，它能够帮助我们在提交 commit 信息时自动运行 </span><span data-lake-id=\"uc2f0ea27\" id=\"uc2f0ea27\" class=\"lake-fontsize-12\" style=\"color: rgb(71, 101, 130)\">commitlint</span><span data-lake-id=\"u0e78a2f1\" id=\"u0e78a2f1\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\"> 进行检查，但在这之前，我们需要再在根目录下的 </span><code data-lake-id=\"uad4c2104\" id=\"uad4c2104\"><span data-lake-id=\"u8c580867\" id=\"u8c580867\" class=\"lake-fontsize-12\" style=\"color: rgb(71, 101, 130)\">package.json</span></code><span data-lake-id=\"u72fa236b\" id=\"u72fa236b\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\"> 文件里加点料，像这样：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22json%22%2C%22code%22%3A%22%7B%5Cn%20...%5Cn%20%5C%22husky%5C%22%3A%20%7B%5Cn%20%20%20%20%5C%22hooks%5C%22%3A%20%7B%5Cn%20%20%20%20%20%20%5C%22commit-msg%5C%22%3A%20%5C%22commitlint%20-E%20HUSKY_GIT_PARAMS%5C%22%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%20...%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22eixF4%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"ufa5475ce\" id=\"ufa5475ce\"><span data-lake-id=\"uea2c0720\" id=\"uea2c0720\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">为了能够让 </span><span data-lake-id=\"ua83cab61\" id=\"ua83cab61\" class=\"lake-fontsize-12\" style=\"color: rgb(71, 101, 130)\">commitlint</span><span data-lake-id=\"u5dd05dbd\" id=\"u5dd05dbd\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\"> 感知我们的子项目名称，我们还需在项目根目录中增加 </span><span data-lake-id=\"ud84d7b1b\" id=\"ud84d7b1b\" class=\"lake-fontsize-12\" style=\"color: rgb(71, 101, 130)\">commitlint.config.js</span><span data-lake-id=\"u930d1e34\" id=\"u930d1e34\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\"> 文件，并设置文件内容为：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22javascript%22%2C%22code%22%3A%22module.exports%20%3D%20%7B%5Cn%20%20extends%3A%20%5B%5Cn%20%20%20%20%5C%22%40commitlint%2Fconfig-conventional%5C%22%2C%5Cn%20%20%20%20%5C%22%40commitlint%2Fconfig-lerna-scopes%5C%22%2C%5Cn%20%20%5D%2C%5Cn%7D%3B%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22xgzoX%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"uaafcda09\" id=\"uaafcda09\"><span data-lake-id=\"u0709ea10\" id=\"u0709ea10\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">至此，我们统一并规范化了 monorepo 项目的 commit 信息，终于整个 monorepo 工程化的最后一块拼图被我们拼上了！</span></p><p data-lake-id=\"u76a2a263\" id=\"u76a2a263\"><span data-lake-id=\"u144eb853\" id=\"u144eb853\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">（顺便一提，您可以通过在命令行执行 </span><code data-lake-id=\"u92212ec6\" id=\"u92212ec6\"><span data-lake-id=\"uebc2ce2c\" id=\"uebc2ce2c\" class=\"lake-fontsize-12\" style=\"color: rgb(71, 101, 130)\">echo &quot;build(project1): change something&quot; | npx commitlint</span></code><span data-lake-id=\"u2114bc23\" id=\"u2114bc23\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\"> 命令即可验证您的 commit 信息是否通过 commitlint 的检查。）</span></p><h2 data-lake-id=\"tkldY\" id=\"tkldY\"><span data-lake-id=\"u64cd5e6f\" id=\"u64cd5e6f\" style=\"color: rgb(44, 62, 80)\">4. 🚚 如何从 multirepo 迁移至使用 monorepo 策略？</span></h2><p data-lake-id=\"u0017bb3b\" id=\"u0017bb3b\"><span data-lake-id=\"u13ecb497\" id=\"u13ecb497\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">至此，我们学会了如何采用 monorepo 策略组织项目代码的最佳实践，或许您已经开始跃跃欲试想要尝试前文提到的种种技巧。从 0 搭建一个 monorepo 项目，当然没问题！可是如果要基于已有的项目，将其转化为一个使用 monorepo 策略的项目呢？</span></p><p data-lake-id=\"u051d34a3\" id=\"u051d34a3\"><span data-lake-id=\"u8108c4b2\" id=\"u8108c4b2\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">​</span><br></p><p data-lake-id=\"u8ee1994f\" id=\"u8ee1994f\"><span data-lake-id=\"uc0c725f5\" id=\"uc0c725f5\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">还记得吗？成百里者半九十，您还有一些坑要踩。不过好在您在这里还能够得到我的帮助，不必客气！</span></p><p data-lake-id=\"u5cd4765a\" id=\"u5cd4765a\"><span data-lake-id=\"ub7eb6b99\" id=\"ub7eb6b99\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">​</span><br></p><p data-lake-id=\"ue64e3c84\" id=\"ue64e3c84\"><span data-lake-id=\"u33d4948b\" id=\"u33d4948b\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">或许您注意到了，Lerna 为我们提供了</span><span data-lake-id=\"ucb66d4d2\" id=\"ucb66d4d2\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\"> </span><span data-lake-id=\"u984e470c\" id=\"u984e470c\" class=\"lake-fontsize-12\" style=\"color: rgb(71, 101, 130)\">lerna import</span><span data-lake-id=\"ua6fddf76\" id=\"ua6fddf76\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\"> </span><span data-lake-id=\"ud06b2863\" id=\"ud06b2863\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">命令，用来将我们已有的包导入到 monorepo 仓库，并且还会保留该仓库的所有 commit 信息。然而实际上，该命令仅支持</span><strong><span data-lake-id=\"u14470846\" id=\"u14470846\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">导入本地项目</span></strong><span data-lake-id=\"u0d9d9760\" id=\"u0d9d9760\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">，并且</span><strong><span data-lake-id=\"ub01f4843\" id=\"ub01f4843\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">不支持</span></strong><span data-lake-id=\"u55b9d41a\" id=\"u55b9d41a\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">导入项目的分支和标签 🙃。</span></p><p data-lake-id=\"uf09235a1\" id=\"uf09235a1\"><span data-lake-id=\"u2ce4f41f\" id=\"u2ce4f41f\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">​</span><br></p><p data-lake-id=\"u9c2a3081\" id=\"u9c2a3081\"><span data-lake-id=\"u6f749620\" id=\"u6f749620\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">那么如果我们想要导入远程仓库，或是要获取某个分支或标签该怎么做呢？答案是使用</span><span data-lake-id=\"u5ca10221\" id=\"u5ca10221\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\"> </span><a href=\"https://github.com/hraban/tomono\" target=\"_blank\" data-lake-id=\"ue0290b33\" id=\"ue0290b33\"><span data-lake-id=\"u9e4ffefe\" id=\"u9e4ffefe\">tomono</span></a><span data-lake-id=\"ube2d9bd1\" id=\"ube2d9bd1\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">，其内容是一个 shell 脚本。</span></p><p data-lake-id=\"u01a010c2\" id=\"u01a010c2\"><span data-lake-id=\"u77e67f48\" id=\"u77e67f48\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">​</span><br></p><p data-lake-id=\"u32cfe396\" id=\"u32cfe396\"><span data-lake-id=\"u76b20121\" id=\"u76b20121\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">使用 tomono 导入远程仓库，您所需要做的只有两件事：</span></p><ol list=\"u5f7889f8\"><li fid=\"u6caa3b43\" data-lake-id=\"u710520b8\" id=\"u710520b8\"><span data-lake-id=\"u68cf612e\" id=\"u68cf612e\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">创建一个包含所有需要导入 repo 地址的文本文件；</span></li><li fid=\"u6caa3b43\" data-lake-id=\"uc0a5fd2c\" id=\"uc0a5fd2c\"><span data-lake-id=\"ub4dc72d8\" id=\"ub4dc72d8\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">执行 shell 命令：</span><code data-lake-id=\"u874205e9\" id=\"u874205e9\"><span data-lake-id=\"u1ed350df\" id=\"u1ed350df\" class=\"lake-fontsize-12\" style=\"color: rgb(71, 101, 130)\">cat repos.txt | ~/tomono/tomono.sh</span></code><span data-lake-id=\"u2290af74\" id=\"u2290af74\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">（这里我们假定您的文本文件名为 </span><code data-lake-id=\"u9d626ee3\" id=\"u9d626ee3\"><span data-lake-id=\"ud5a34da2\" id=\"ud5a34da2\" class=\"lake-fontsize-12\" style=\"color: rgb(71, 101, 130)\">repos.txt</span></code><span data-lake-id=\"uadfaf3a4\" id=\"uadfaf3a4\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">，且您将 tomono 下载在用户根目录；</span></li></ol><p data-lake-id=\"ud479edce\" id=\"ud479edce\"><span data-lake-id=\"ub0b928c3\" id=\"ub0b928c3\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">repo 文件内容示例如下：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22shell%22%2C%22code%22%3A%22%2F%2F%201.%20Git%E4%BB%93%E5%BA%93%E5%9C%B0%E5%9D%80%20%202.%20%E5%AD%90%E9%A1%B9%E7%9B%AE%E5%90%8D%E7%A7%B0%20%203.%20%E8%BF%81%E7%A7%BB%E5%90%8E%E7%9A%84%E8%B7%AF%E5%BE%84%5Cngit%40github.com%2Fbackend.git%20%40mono%2Fbackend%20packages%2Fbackend%5Cngit%40github.com%2Ffrontend.git%20%40mono%2Ffrontend%20packages%2Ffrontend%5Cngit%40github.com%2Fmobile.git%20%40mono%2Fmobile%20packages%2Fmobile%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22e5Nnt%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u5ac796dc\" id=\"u5ac796dc\"><span data-lake-id=\"uc0db37ee\" id=\"uc0db37ee\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">至此，我们也掌握了将现有项目迁移至 </span><code data-lake-id=\"u2da657fd\" id=\"u2da657fd\"><span data-lake-id=\"uda0a5fe3\" id=\"uda0a5fe3\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">monorepo</span></code><span data-lake-id=\"u3f7aabb3\" id=\"u3f7aabb3\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\"> 项目的方法。到这时候，您已绝非再是 </span><code data-lake-id=\"uba0c4ac1\" id=\"uba0c4ac1\"><span data-lake-id=\"u9ffde751\" id=\"u9ffde751\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">monorepo</span></code><span data-lake-id=\"u060944df\" id=\"u060944df\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\"> 界的门外汉！</span></p><p data-lake-id=\"uc6fb1696\" id=\"uc6fb1696\"><span data-lake-id=\"u86240fea\" id=\"u86240fea\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">恭喜您 ！！🎉</span></p><h2 data-lake-id=\"btmKj\" id=\"btmKj\"><span data-lake-id=\"uf7cc2291\" id=\"uf7cc2291\" style=\"color: rgb(44, 62, 80)\">5. 🎓 小结</span></h2><p data-lake-id=\"ub3a616dc\" id=\"ub3a616dc\"><span data-lake-id=\"uc935d135\" id=\"uc935d135\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">在本篇文章中，我们共同了解了「</span><strong><span data-lake-id=\"u1f9e714d\" id=\"u1f9e714d\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">什么是 monorepo 策略</span></strong><span data-lake-id=\"u5b76de99\" id=\"u5b76de99\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">」以及「</span><strong><span data-lake-id=\"u627c093b\" id=\"u627c093b\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">monorepo 策略的优劣</span></strong><span data-lake-id=\"u039a75c1\" id=\"u039a75c1\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">」，并且一起学习实践了 monorepo 策略的一些最佳实践。您一定也意识到，即使您的工作场景暂时无法实践 monorepo 策略，阅读本篇文章所学习到的种种方法，工具和思想也可以运用到您当下的工作之中。</span></p><p data-lake-id=\"u36fb3f71\" id=\"u36fb3f71\"><span data-lake-id=\"u12105902\" id=\"u12105902\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">​</span><br></p><p data-lake-id=\"uf97e19b0\" id=\"uf97e19b0\"><span data-lake-id=\"u5f903667\" id=\"u5f903667\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">当然，本文所介绍的这些方法和思想总有过时的一天，并且社区也从未停止对更好地实践 monorepo 策略的探索，说不定您过一阵子就会有更好的想法 ，填补某个领域的空白。希望到时候您也能总结出一篇文章，为 JavaScript 社区贡献一份力量。到时候请千万别忘了回到我的评论区留言，让我分享您的成就。</span></p><p data-lake-id=\"udf622c48\" id=\"udf622c48\"><span data-lake-id=\"u996f6afc\" id=\"u996f6afc\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">​</span><br></p><p data-lake-id=\"u0668076a\" id=\"u0668076a\"><span data-lake-id=\"u75800489\" id=\"u75800489\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">关于 monorepo 这个主题，我就暂且带您探索到这里，后会有期：）</span></p><h2 data-lake-id=\"AH3k4\" id=\"AH3k4\"><span data-lake-id=\"uebb8c710\" id=\"uebb8c710\" style=\"color: rgb(44, 62, 80)\">6. 📝 参考文献</span></h2><ol list=\"u0c9a6507\"><li fid=\"u8b01a80f\" data-lake-id=\"ub40d25d9\" id=\"ub40d25d9\"><span data-lake-id=\"u0ac6d6cb\" id=\"u0ac6d6cb\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">📹</span><span data-lake-id=\"u2a7aa505\" id=\"u2a7aa505\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\"> </span><a href=\"https://frontendmasters.com/courses/monorepos/\" target=\"_blank\" data-lake-id=\"u9edf1f8f\" id=\"u9edf1f8f\"><span data-lake-id=\"ub0e9b220\" id=\"ub0e9b220\">JavaScript and TypeScript Monorepos</span></a></li><li fid=\"u8b01a80f\" data-lake-id=\"uab3e7a44\" id=\"uab3e7a44\"><span data-lake-id=\"uf340963d\" id=\"uf340963d\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">📄</span><span data-lake-id=\"u06be23ba\" id=\"u06be23ba\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\"> </span><a href=\"https://www.drmaciver.com/2016/10/why-you-should-use-a-single-repository-for-all-your-companys-projects/\" target=\"_blank\" data-lake-id=\"ucffbe153\" id=\"ucffbe153\"><span data-lake-id=\"ucb4802b8\" id=\"ucb4802b8\">Why you should use a single repository for all your company’s projects</span></a></li><li fid=\"u8b01a80f\" data-lake-id=\"u40055e8f\" id=\"u40055e8f\"><span data-lake-id=\"u03cc5429\" id=\"u03cc5429\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">📄</span><span data-lake-id=\"u07e8a9ae\" id=\"u07e8a9ae\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\"> </span><a href=\"https://danluu.com/monorepo/\" target=\"_blank\" data-lake-id=\"u1bc9f157\" id=\"u1bc9f157\"><span data-lake-id=\"u1d363176\" id=\"u1d363176\">Advantages of monorepos</span></a></li><li fid=\"u8b01a80f\" data-lake-id=\"u52725076\" id=\"u52725076\"><span data-lake-id=\"u54ef7445\" id=\"u54ef7445\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">📄</span><span data-lake-id=\"ua24d9fd3\" id=\"ua24d9fd3\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\"> </span><a href=\"http://www.sosout.com/2018/07/21/lerna-repo.html\" target=\"_blank\" data-lake-id=\"u6d733d89\" id=\"u6d733d89\"><span data-lake-id=\"ub4eeeaae\" id=\"ub4eeeaae\">lerna管理前端packages的最佳实践</span></a></li><li fid=\"u8b01a80f\" data-lake-id=\"ub8abaa01\" id=\"ub8abaa01\"><span data-lake-id=\"ufdbc457f\" id=\"ufdbc457f\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">📄</span><span data-lake-id=\"ub9f51a95\" id=\"ub9f51a95\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\"> </span><a href=\"https://zhuanlan.zhihu.com/p/71385053\" target=\"_blank\" data-lake-id=\"u3f47908f\" id=\"u3f47908f\"><span data-lake-id=\"ube9065f4\" id=\"ube9065f4\">基于lerna和yarn workspace的monorepo工作流</span></a></li><li fid=\"u8b01a80f\" data-lake-id=\"ud23ae13f\" id=\"ud23ae13f\"><span data-lake-id=\"u7fafe976\" id=\"u7fafe976\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">📄</span><span data-lake-id=\"u5b8be296\" id=\"u5b8be296\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\"> </span><a href=\"https://medium.com/@maoberlehner/monorepos-in-the-wild-33c6eb246cb9\" target=\"_blank\" data-lake-id=\"ue82e1b08\" id=\"ue82e1b08\"><span data-lake-id=\"u23277b5e\" id=\"u23277b5e\">Monorepos in the Wild</span></a></li><li fid=\"u8b01a80f\" data-lake-id=\"ud0ee2495\" id=\"ud0ee2495\"><span data-lake-id=\"u11a90e67\" id=\"u11a90e67\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">📄</span><span data-lake-id=\"u3d20495e\" id=\"u3d20495e\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\"> </span><a href=\"https://medium.com/@mattklein123/monorepos-please-dont-e9a279be011b\" target=\"_blank\" data-lake-id=\"udef4906d\" id=\"udef4906d\"><span data-lake-id=\"u0bdf228f\" id=\"u0bdf228f\">Monorepos: Please don’t!</span></a></li><li fid=\"u8b01a80f\" data-lake-id=\"u7e29b3f5\" id=\"u7e29b3f5\"><span data-lake-id=\"ua3288a3e\" id=\"ua3288a3e\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">📄</span><span data-lake-id=\"u27610c29\" id=\"u27610c29\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\"> </span><a href=\"https://medium.com/@adamhjk/monorepo-please-do-3657e08a4b70\" target=\"_blank\" data-lake-id=\"uc33946a4\" id=\"uc33946a4\"><span data-lake-id=\"u77353489\" id=\"u77353489\">Monorepo: please do!</span></a></li><li fid=\"u8b01a80f\" data-lake-id=\"u27e4c89d\" id=\"u27e4c89d\"><span data-lake-id=\"u98003613\" id=\"u98003613\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">📄</span><span data-lake-id=\"u5974bc56\" id=\"u5974bc56\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\"> </span><a href=\"https://medium.com/@rachitabansal/introduction-to-lerna-3fb7382a4d4e\" target=\"_blank\" data-lake-id=\"ua23f88ae\" id=\"ua23f88ae\"><span data-lake-id=\"u9f167b18\" id=\"u9f167b18\">Introduction to Lerna</span></a></li><li fid=\"u8b01a80f\" data-lake-id=\"u78e07250\" id=\"u78e07250\"><span data-lake-id=\"u9ee52d04\" id=\"u9ee52d04\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">📄</span><span data-lake-id=\"ue7e037e9\" id=\"ue7e037e9\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\"> </span><a href=\"https://medium.com/@banyudu/mono-repo-%E8%BF%81%E7%A7%BB%E5%AE%9E%E8%B7%B5-eaf955aaf4d7\" target=\"_blank\" data-lake-id=\"ueb308b8d\" id=\"ueb308b8d\"><span data-lake-id=\"u7ad75ea6\" id=\"u7ad75ea6\">monorepo 迁移实践</span></a></li></ol><h2 data-lake-id=\"rr72b\" id=\"rr72b\"><span data-lake-id=\"u0de27077\" id=\"u0de27077\" style=\"color: rgb(44, 62, 80)\">7. 👀 扩展阅读</span></h2><ol list=\"uc857f75d\"><li fid=\"u3a6f632e\" data-lake-id=\"ud8d9e37a\" id=\"ud8d9e37a\"><span data-lake-id=\"ubc74e3ff\" id=\"ubc74e3ff\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">介绍实践 monorepo 生态：</span><a href=\"https://github.com/korfuri/awesome-monorepo\" target=\"_blank\" data-lake-id=\"ua37154ca\" id=\"ua37154ca\"><span data-lake-id=\"u14d95ff3\" id=\"u14d95ff3\">awesome-monorepo</span></a></li><li fid=\"u3a6f632e\" data-lake-id=\"u8add4bda\" id=\"u8add4bda\"><span data-lake-id=\"ufc30b915\" id=\"ufc30b915\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">一篇介绍 Google 如何将数十亿代码通过 monorepo 方式组织的论文：</span><a href=\"https://dl.acm.org/doi/pdf/10.1145/2854146\" target=\"_blank\" data-lake-id=\"u5ff442a6\" id=\"u5ff442a6\"><span data-lake-id=\"u5db16135\" id=\"u5db16135\">Why Google Stores Billions of Lines of Code in a Single Repository</span></a></li><li fid=\"u3a6f632e\" data-lake-id=\"u357be918\" id=\"u357be918\"><span data-lake-id=\"ucfa04701\" id=\"ucfa04701\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\">一篇针对 Google 的调研报告，详尽地分析了 monorepo 的优劣：</span><span data-lake-id=\"u81ffea87\" id=\"u81ffea87\" class=\"lake-fontsize-12\" style=\"color: rgb(44, 62, 80)\"> </span><a href=\"https://people.engr.ncsu.edu/ermurph3/papers/seip18.pdf\" target=\"_blank\" data-lake-id=\"u638cd33c\" id=\"u638cd33c\"><span data-lake-id=\"uae2d45ba\" id=\"uae2d45ba\">Advantages and Disadvantages of a Monolithic Repository</span></a></li></ol><p data-lake-id=\"u2d660185\" id=\"u2d660185\"><a href=\"https://fed.taobao.org/blog/taofed/do71ct/fc3cy0/\" target=\"_blank\" data-lake-id=\"u7149b4b1\" id=\"u7149b4b1\"><span data-lake-id=\"u6305918f\" id=\"u6305918f\">← 业务系统的稳定性建设</span></a><a href=\"https://fed.taobao.org/blog/taofed/do71ct/mvd9lw/\" target=\"_blank\" data-lake-id=\"u171118aa\" id=\"u171118aa\"><span data-lake-id=\"udf8616bc\" id=\"udf8616bc\">Midway Serverless 发布 2.0，一体化让前端研发再次提效 →</span></a></p>",
  "public": 0,
  "status": 1,
  "likes_count": 0,
  "read_count": 0,
  "hits": 0,
  "comments_count": 0,
  "word_count": 7400,
  "created_at": "2022-03-14T11:20:44.000Z",
  "updated_at": "2023-11-11T18:12:43.000Z",
  "content_updated_at": "2023-11-11T18:12:42.000Z",
  "published_at": "2023-11-11T18:12:42.000Z",
  "first_published_at": "2022-03-14T11:21:51.000Z",
  "book": {
    "id": 24866785,
    "type": "Book",
    "slug": "uv8hkw",
    "name": "Git 知识库",
    "user_id": 732231,
    "description": "Git 常用命令备忘录",
    "toc_yml": "- type: META\n  count: 8\n  display_level: 1\n  tail_type: UPDATED_AT\n  base_version_id: 230465622\n  published: true\n  max_level: 1\n  last_updated_at: 2022-08-03T07:40:36.780Z\n  version_id: 230469205\n- type: DOC\n  title: 常用 git 命令\n  uuid: P_1gejxGimmvpzbc\n  url: bis7pd\n  prev_uuid: ''\n  sibling_uuid: cdTHYIpRN54mvm0Q\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 67271247\n  level: 0\n  id: 67271247\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: merge request 规范\n  uuid: cdTHYIpRN54mvm0Q\n  url: ghu8c2\n  prev_uuid: P_1gejxGimmvpzbc\n  sibling_uuid: A9Eck7FJaS4IvBiS\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 88410893\n  level: 0\n  id: 88410893\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: code review 规范\n  uuid: A9Eck7FJaS4IvBiS\n  url: chwoy6\n  prev_uuid: cdTHYIpRN54mvm0Q\n  sibling_uuid: EA31UHlTK46AMZle\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 88411780\n  level: 0\n  id: 88411780\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: commit message 代码提交信息规范\n  uuid: EA31UHlTK46AMZle\n  url: th227e\n  prev_uuid: A9Eck7FJaS4IvBiS\n  sibling_uuid: wJK9Heyb7x016eyJ\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 88403770\n  level: 0\n  id: 88403770\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: commit history 代码提交历史规范\n  uuid: wJK9Heyb7x016eyJ\n  url: exfxs9\n  prev_uuid: EA31UHlTK46AMZle\n  sibling_uuid: 4H-uh42j90iXCx8m\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 88405135\n  level: 0\n  id: 88405135\n  open_window: 0\n  visible: 1\n- type: TITLE\n  title: Monorepo\n  uuid: 4H-uh42j90iXCx8m\n  url: ''\n  prev_uuid: wJK9Heyb7x016eyJ\n  sibling_uuid: ''\n  child_uuid: DiZpG7pmb0K3WigO\n  parent_uuid: ''\n  doc_id: ''\n  level: 0\n  id: ''\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 大型项目管理 - Monorepo\n  uuid: DiZpG7pmb0K3WigO\n  url: vimeff\n  prev_uuid: 4H-uh42j90iXCx8m\n  sibling_uuid: FwK-DzXGBSwMWcEt\n  child_uuid: ''\n  parent_uuid: 4H-uh42j90iXCx8m\n  doc_id: 69427440\n  level: 1\n  id: 69427440\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 项目级 monorepo 策略最佳实践\n  uuid: FwK-DzXGBSwMWcEt\n  url: xt5sda\n  prev_uuid: DiZpG7pmb0K3WigO\n  sibling_uuid: ''\n  child_uuid: ''\n  parent_uuid: 4H-uh42j90iXCx8m\n  doc_id: 69430861\n  level: 1\n  id: 69430861\n  open_window: 0\n  visible: 1\n",
    "creator_id": 732231,
    "public": 0,
    "items_count": 7,
    "likes_count": 0,
    "watches_count": 1,
    "content_updated_at": "2023-11-11T18:12:42.469Z",
    "created_at": "2022-02-22T07:00:14.000Z",
    "updated_at": "2023-11-11T18:12:42.000Z",
    "user": {
      "id": 732231,
      "type": "User",
      "login": "wcywxq",
      "name": "magic",
      "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/732231/1606968271774-avatar/886ad88b-d2cc-4c9e-a674-f70eb51a679c.png",
      "books_count": 21,
      "public_books_count": 0,
      "followers_count": 0,
      "following_count": 0,
      "public": 1,
      "description": null,
      "created_at": "2020-01-08T14:21:31.000Z",
      "updated_at": "2023-11-22T20:13:30.000Z",
      "work_id": "",
      "_serializer": "v2.user"
    },
    "namespace": "wcywxq/uv8hkw",
    "_serializer": "v2.book"
  },
  "user": {
    "id": 732231,
    "type": "User",
    "login": "wcywxq",
    "name": "magic",
    "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/732231/1606968271774-avatar/886ad88b-d2cc-4c9e-a674-f70eb51a679c.png",
    "books_count": 21,
    "public_books_count": 0,
    "followers_count": 0,
    "following_count": 0,
    "public": 1,
    "description": null,
    "created_at": "2020-01-08T14:21:31.000Z",
    "updated_at": "2023-11-22T20:13:30.000Z",
    "work_id": "",
    "_serializer": "v2.user"
  },
  "tags": [],
  "latest_version_id": 2109667523,
  "creator": {
    "id": 732231,
    "type": "User",
    "login": "wcywxq",
    "name": "magic",
    "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/732231/1606968271774-avatar/886ad88b-d2cc-4c9e-a674-f70eb51a679c.png",
    "books_count": 21,
    "public_books_count": 0,
    "followers_count": 0,
    "following_count": 0,
    "public": 1,
    "description": null,
    "created_at": "2020-01-08T14:21:31.000Z",
    "updated_at": "2023-11-22T20:13:30.000Z",
    "work_id": "",
    "_serializer": "v2.user"
  },
  "_serializer": "v2.doc_detail"
}