{
  "id": 11416847,
  "slug": "mtz77i",
  "title": "3 无重复字符的最长子串",
  "description": "给定一个字符串，请你找出其中不含有重复字符的 最长子串 的长度。示例 1:输入: \"abcabcbb\" 输出: 3  解释: 因为无重复字符的最长子串是 \"abc\"，所以其长度为 3。示例 2:输入: \"bbbbb\" 输出: 1 解释: 因为无重复字符的最长子串是 \"b\"，所以其长度为 1。示...",
  "cover": "https://cdn.nlark.com/yuque/0/2023/png/732231/1700756601061-2de2f5ad-e03c-42df-9a61-c91206ffd17b.png",
  "user_id": 732231,
  "book_id": 44292824,
  "last_editor_id": 732231,
  "format": "lake",
  "body_draft": "<!doctype html><div class=\"lake-content\" typography=\"classic\"><p id=\"u013377c1\" class=\"ne-p\"><a href=\"https://leetcode.cn/problems/longest-substring-without-repeating-characters\" data-href=\"https://leetcode.cn/problems/longest-substring-without-repeating-characters\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">3. 无重复字符的最长子串</span></a></p><p id=\"u8f69e626\" class=\"ne-p\"><span class=\"ne-text\"></span></p><p id=\"d6d5dca8f15cb7675fa5d2bbb943d42d_p_1\" class=\"ne-p\"><span class=\"ne-text\">给定一个字符串，请你找出其中不含有重复字符的 </span><strong><span class=\"ne-text\">最长子串</span></strong><span class=\"ne-text\"> 的长度。</span></p><p id=\"0c4d068e4aede2bc9d552ce387999b01_p_4\" class=\"ne-p\"><br></p><p id=\"cbc547fa7bd7b424be7d91a4c74a0c7f_p_5\" class=\"ne-p\"><span class=\"ne-text\">示例 1:</span></p><p id=\"f23fb9c519ff30bfe03d0b2cc2cac85d_p_6\" class=\"ne-p\"><br></p><pre data-language=\"javascript\" id=\"e2d7f5fb\" class=\"ne-codeblock language-javascript\"><code>输入: &quot;abcabcbb&quot;\n输出: 3 \n解释: 因为无重复字符的最长子串是 &quot;abc&quot;，所以其长度为 3。</code></pre><p id=\"e1b0979b54c1fb29acc1d92ad2159922_p_7\" class=\"ne-p\"><br></p><p id=\"f5f88401e649c5c949b2437195fd7480_p_8\" class=\"ne-p\"><span class=\"ne-text\">示例 2:</span></p><p id=\"eadc4ec477465f1f239730d987d394b1_p_9\" class=\"ne-p\"><br></p><pre data-language=\"javascript\" id=\"21a5eb7d\" class=\"ne-codeblock language-javascript\"><code>输入: &quot;bbbbb&quot;\n输出: 1\n解释: 因为无重复字符的最长子串是 &quot;b&quot;，所以其长度为 1。</code></pre><p id=\"042da541aac17f869693ba89ebd10d8e_p_10\" class=\"ne-p\"><br></p><p id=\"7fa3d4f661e827cbfe37079546442ed8_p_11\" class=\"ne-p\"><span class=\"ne-text\">示例 3:</span></p><p id=\"09a2b5671cf447a1a3529d71c89cf9e1_p_12\" class=\"ne-p\"><br></p><pre data-language=\"javascript\" id=\"2c8dc786\" class=\"ne-codeblock language-javascript\"><code>输入: &quot;pwwkew&quot;\n输出: 3\n解释: 因为无重复字符的最长子串是 &quot;wke&quot;，所以其长度为 3。\n     请注意，你的答案必须是 子串 的长度，&quot;pwke&quot; 是一个子序列，不是子串。</code></pre><h2 id=\"0c223e18\"><span class=\"ne-text\">解题思路</span></h2><p id=\"2369fafe89fae403079018df6f36b51b_p_13\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"caa724d4c23c04bc636312935c7ea63c_p_14\" class=\"ne-p\"><span class=\"ne-text\">通过图解法进行判定，每当出现新的重复字符时，将重新截取子字符串。</span></p><p id=\"65cbb62bfbdd76454f9d2a50a8fd57f4_p_15\" class=\"ne-p\"><span class=\"ne-text\">截取的位置为该字符串第一次出现重复字符的位置。</span></p><p id=\"676e7d283eb00353d0679e385220a19c_p_16\" class=\"ne-p\"><span class=\"ne-text\">字符串长度为 0 则直接返回</span></p></div><p id=\"c5eaf555cee01ec836fc749258c6179d_p_17\" class=\"ne-p\"><br></p><h2 id=\"571f6dbc\"><span class=\"ne-text\">图解</span></h2><p id=\"c4c8cf8a26b55060e684fc9733b06494_p_19\" class=\"ne-p\"><img src=\"https://cdn.nlark.com/yuque/0/2020/png/732231/1608705746422-bc6ae42d-4e42-4012-b984-b85746b53b21.png\" width=\"700\" id=\"CrKNU\" class=\"ne-image\"></p><h3 id=\"Nm6k0\"><span class=\"ne-text\">游标法</span></h3><p id=\"u994d11f8\" class=\"ne-p\"><br></p><pre data-language=\"javascript\" id=\"cadaee71\" class=\"ne-codeblock language-javascript\"><code>/**\n * 构造子串法\n * @param {string} s\n * @return {number}\n */\nvar lengthOfLongestSubstring = function(s) {\n    let substr = ''\n    let maxLen = substr.length\n    for (let i = 0; i &lt; s.length; i++) {\n      const index = substr.indexOf(s[i])\n      if (index === -1) {\n        substr += s[i]\n      } else {\n        substr = substr.substring(index + 1) + s[i]\n      }\n      maxLen = Math.max(maxLen, substr.length)\n    }\n    return maxLen\n}</code></pre><p id=\"ua08f1ddc\" class=\"ne-p\"><br></p><h3 id=\"zv5Wo\"><span class=\"ne-text\">滑动窗口 + hash</span></h3><pre data-language=\"javascript\" id=\"a7H57\" class=\"ne-codeblock language-javascript\"><code>/**\n * 滑动窗口 + hash\n * @param {string} s\n * @return {number}\n */\nvar lengthOfLongestSubstring = function(s) {\n    let map = new Map()\n    let maxLen = 0\n    let l = 0\n    let r = 0\n    for (; r &lt; s.length; r++) {\n      if (map.has(s[r])) {\n        l = Math.max(l, map.get(s[r]) + 1)\n      }\n      maxLen = Math.max(maxLen, r - l + 1)\n      map.set(s[r], r)\n    }\n    return maxLen\n}</code></pre><p id=\"ud54d1595\" class=\"ne-p\"><br></p></div>",
  "body": "[3. 无重复字符的最长子串](https://leetcode.cn/problems/longest-substring-without-repeating-characters)\n\n给定一个字符串，请你找出其中不含有重复字符的 **最长子串** 的长度。\n\n示例 1:\n\n```javascript\n输入: \"abcabcbb\"\n输出: 3 \n解释: 因为无重复字符的最长子串是 \"abc\"，所以其长度为 3。\n```\n\n示例 2:\n\n```javascript\n输入: \"bbbbb\"\n输出: 1\n解释: 因为无重复字符的最长子串是 \"b\"，所以其长度为 1。\n```\n\n示例 3:\n\n```javascript\n输入: \"pwwkew\"\n输出: 3\n解释: 因为无重复字符的最长子串是 \"wke\"，所以其长度为 3。\n     请注意，你的答案必须是 子串 的长度，\"pwke\" 是一个子序列，不是子串。\n```\n<a name=\"0c223e18\"></a>\n## 解题思路\n\n> 通过图解法进行判定，每当出现新的重复字符时，将重新截取子字符串。\n> 截取的位置为该字符串第一次出现重复字符的位置。\n> 字符串长度为 0 则直接返回\n\n\n<a name=\"571f6dbc\"></a>\n## 图解\n![无重复字符最长子串.png](https://cdn.nlark.com/yuque/0/2020/png/732231/1608705746422-bc6ae42d-4e42-4012-b984-b85746b53b21.png#averageHue=%230b0707&height=587&id=CrKNU&originHeight=587&originWidth=700&originalType=binary&ratio=1&rotation=0&showTitle=false&size=23925&status=done&style=none&title=&width=700)\n<a name=\"Nm6k0\"></a>\n### 游标法\n\n```javascript\n/**\n * 构造子串法\n * @param {string} s\n * @return {number}\n */\nvar lengthOfLongestSubstring = function(s) {\n    let substr = ''\n    let maxLen = substr.length\n    for (let i = 0; i < s.length; i++) {\n      const index = substr.indexOf(s[i])\n      if (index === -1) {\n        substr += s[i]\n      } else {\n        substr = substr.substring(index + 1) + s[i]\n      }\n      maxLen = Math.max(maxLen, substr.length)\n    }\n    return maxLen\n}\n```\n\n<a name=\"zv5Wo\"></a>\n### 滑动窗口 + hash\n```javascript\n/**\n * 滑动窗口 + hash\n * @param {string} s\n * @return {number}\n */\nvar lengthOfLongestSubstring = function(s) {\n    let map = new Map()\n    let maxLen = 0\n    let l = 0\n    let r = 0\n    for (; r < s.length; r++) {\n      if (map.has(s[r])) {\n        l = Math.max(l, map.get(s[r]) + 1)\n      }\n      maxLen = Math.max(maxLen, r - l + 1)\n      map.set(s[r], r)\n    }\n    return maxLen\n}\n```\n\n",
  "body_html": "<!doctype html><div class=\"lake-content\" typography=\"classic\"><p id=\"u013377c1\" class=\"ne-p\"><a href=\"https://leetcode.cn/problems/longest-substring-without-repeating-characters\" data-href=\"https://leetcode.cn/problems/longest-substring-without-repeating-characters\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">3. 无重复字符的最长子串</span></a></p><p id=\"u8f69e626\" class=\"ne-p\"><span class=\"ne-text\"></span></p><p id=\"d6d5dca8f15cb7675fa5d2bbb943d42d_p_1\" class=\"ne-p\"><span class=\"ne-text\">给定一个字符串，请你找出其中不含有重复字符的 </span><strong><span class=\"ne-text\">最长子串</span></strong><span class=\"ne-text\"> 的长度。</span></p><p id=\"0c4d068e4aede2bc9d552ce387999b01_p_4\" class=\"ne-p\"><br></p><p id=\"cbc547fa7bd7b424be7d91a4c74a0c7f_p_5\" class=\"ne-p\"><span class=\"ne-text\">示例 1:</span></p><p id=\"f23fb9c519ff30bfe03d0b2cc2cac85d_p_6\" class=\"ne-p\"><br></p><pre data-language=\"javascript\" id=\"e2d7f5fb\" class=\"ne-codeblock language-javascript\"><code>输入: &quot;abcabcbb&quot;\n输出: 3 \n解释: 因为无重复字符的最长子串是 &quot;abc&quot;，所以其长度为 3。</code></pre><p id=\"e1b0979b54c1fb29acc1d92ad2159922_p_7\" class=\"ne-p\"><br></p><p id=\"f5f88401e649c5c949b2437195fd7480_p_8\" class=\"ne-p\"><span class=\"ne-text\">示例 2:</span></p><p id=\"eadc4ec477465f1f239730d987d394b1_p_9\" class=\"ne-p\"><br></p><pre data-language=\"javascript\" id=\"21a5eb7d\" class=\"ne-codeblock language-javascript\"><code>输入: &quot;bbbbb&quot;\n输出: 1\n解释: 因为无重复字符的最长子串是 &quot;b&quot;，所以其长度为 1。</code></pre><p id=\"042da541aac17f869693ba89ebd10d8e_p_10\" class=\"ne-p\"><br></p><p id=\"7fa3d4f661e827cbfe37079546442ed8_p_11\" class=\"ne-p\"><span class=\"ne-text\">示例 3:</span></p><p id=\"09a2b5671cf447a1a3529d71c89cf9e1_p_12\" class=\"ne-p\"><br></p><pre data-language=\"javascript\" id=\"2c8dc786\" class=\"ne-codeblock language-javascript\"><code>输入: &quot;pwwkew&quot;\n输出: 3\n解释: 因为无重复字符的最长子串是 &quot;wke&quot;，所以其长度为 3。\n     请注意，你的答案必须是 子串 的长度，&quot;pwke&quot; 是一个子序列，不是子串。</code></pre><h2 id=\"0c223e18\"><span class=\"ne-text\">解题思路</span></h2><p id=\"2369fafe89fae403079018df6f36b51b_p_13\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"caa724d4c23c04bc636312935c7ea63c_p_14\" class=\"ne-p\"><span class=\"ne-text\">通过图解法进行判定，每当出现新的重复字符时，将重新截取子字符串。</span></p><p id=\"65cbb62bfbdd76454f9d2a50a8fd57f4_p_15\" class=\"ne-p\"><span class=\"ne-text\">截取的位置为该字符串第一次出现重复字符的位置。</span></p><p id=\"676e7d283eb00353d0679e385220a19c_p_16\" class=\"ne-p\"><span class=\"ne-text\">字符串长度为 0 则直接返回</span></p></div><p id=\"c5eaf555cee01ec836fc749258c6179d_p_17\" class=\"ne-p\"><br></p><h2 id=\"571f6dbc\"><span class=\"ne-text\">图解</span></h2><p id=\"c4c8cf8a26b55060e684fc9733b06494_p_19\" class=\"ne-p\"><img src=\"https://cdn.nlark.com/yuque/0/2020/png/732231/1608705746422-bc6ae42d-4e42-4012-b984-b85746b53b21.png\" width=\"700\" id=\"CrKNU\" class=\"ne-image\"></p><h3 id=\"Nm6k0\"><span class=\"ne-text\">游标法</span></h3><p id=\"u994d11f8\" class=\"ne-p\"><br></p><pre data-language=\"javascript\" id=\"cadaee71\" class=\"ne-codeblock language-javascript\"><code>/**\n * 构造子串法\n * @param {string} s\n * @return {number}\n */\nvar lengthOfLongestSubstring = function(s) {\n    let substr = ''\n    let maxLen = substr.length\n    for (let i = 0; i &lt; s.length; i++) {\n      const index = substr.indexOf(s[i])\n      if (index === -1) {\n        substr += s[i]\n      } else {\n        substr = substr.substring(index + 1) + s[i]\n      }\n      maxLen = Math.max(maxLen, substr.length)\n    }\n    return maxLen\n}</code></pre><p id=\"ua08f1ddc\" class=\"ne-p\"><br></p><h3 id=\"zv5Wo\"><span class=\"ne-text\">滑动窗口 + hash</span></h3><pre data-language=\"javascript\" id=\"a7H57\" class=\"ne-codeblock language-javascript\"><code>/**\n * 滑动窗口 + hash\n * @param {string} s\n * @return {number}\n */\nvar lengthOfLongestSubstring = function(s) {\n    let map = new Map()\n    let maxLen = 0\n    let l = 0\n    let r = 0\n    for (; r &lt; s.length; r++) {\n      if (map.has(s[r])) {\n        l = Math.max(l, map.get(s[r]) + 1)\n      }\n      maxLen = Math.max(maxLen, r - l + 1)\n      map.set(s[r], r)\n    }\n    return maxLen\n}</code></pre><p id=\"ud54d1595\" class=\"ne-p\"><br></p></div>",
  "body_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"viewport\" content=\"adapt\" /><p data-lake-id=\"u013377c1\" id=\"u013377c1\"><a href=\"https://leetcode.cn/problems/longest-substring-without-repeating-characters\" target=\"_blank\" data-lake-id=\"u6fdda484\" id=\"u6fdda484\"><span data-lake-id=\"u85f129d1\" id=\"u85f129d1\">3. 无重复字符的最长子串</span></a></p><p data-lake-id=\"u8f69e626\" id=\"u8f69e626\"><span data-lake-id=\"ue4d6b045\" id=\"ue4d6b045\">​</span><br></p><p data-lake-id=\"d6d5dca8f15cb7675fa5d2bbb943d42d_p_1\" id=\"d6d5dca8f15cb7675fa5d2bbb943d42d_p_1\"><span data-lake-id=\"u57de94bb\" id=\"u57de94bb\">给定一个字符串，请你找出其中不含有重复字符的 </span><strong><span data-lake-id=\"u3019c1b6\" id=\"u3019c1b6\">最长子串</span></strong><span data-lake-id=\"u22aad17f\" id=\"u22aad17f\"> 的长度。</span></p><p data-lake-id=\"0c4d068e4aede2bc9d552ce387999b01_p_4\" id=\"0c4d068e4aede2bc9d552ce387999b01_p_4\"><br></p><p data-lake-id=\"cbc547fa7bd7b424be7d91a4c74a0c7f_p_5\" id=\"cbc547fa7bd7b424be7d91a4c74a0c7f_p_5\"><span data-lake-id=\"u9ee110da\" id=\"u9ee110da\">示例 1:</span></p><p data-lake-id=\"f23fb9c519ff30bfe03d0b2cc2cac85d_p_6\" id=\"f23fb9c519ff30bfe03d0b2cc2cac85d_p_6\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%E8%BE%93%E5%85%A5%3A%20%5C%22abcabcbb%5C%22%5Cn%E8%BE%93%E5%87%BA%3A%203%20%5Cn%E8%A7%A3%E9%87%8A%3A%20%E5%9B%A0%E4%B8%BA%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2%E6%98%AF%20%5C%22abc%5C%22%EF%BC%8C%E6%89%80%E4%BB%A5%E5%85%B6%E9%95%BF%E5%BA%A6%E4%B8%BA%203%E3%80%82%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22id%22%3A%22e2d7f5fb%22%7D\"></card><p data-lake-id=\"e1b0979b54c1fb29acc1d92ad2159922_p_7\" id=\"e1b0979b54c1fb29acc1d92ad2159922_p_7\"><br></p><p data-lake-id=\"f5f88401e649c5c949b2437195fd7480_p_8\" id=\"f5f88401e649c5c949b2437195fd7480_p_8\"><span data-lake-id=\"u344f9fd4\" id=\"u344f9fd4\">示例 2:</span></p><p data-lake-id=\"eadc4ec477465f1f239730d987d394b1_p_9\" id=\"eadc4ec477465f1f239730d987d394b1_p_9\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%E8%BE%93%E5%85%A5%3A%20%5C%22bbbbb%5C%22%5Cn%E8%BE%93%E5%87%BA%3A%201%5Cn%E8%A7%A3%E9%87%8A%3A%20%E5%9B%A0%E4%B8%BA%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2%E6%98%AF%20%5C%22b%5C%22%EF%BC%8C%E6%89%80%E4%BB%A5%E5%85%B6%E9%95%BF%E5%BA%A6%E4%B8%BA%201%E3%80%82%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22id%22%3A%2221a5eb7d%22%7D\"></card><p data-lake-id=\"042da541aac17f869693ba89ebd10d8e_p_10\" id=\"042da541aac17f869693ba89ebd10d8e_p_10\"><br></p><p data-lake-id=\"7fa3d4f661e827cbfe37079546442ed8_p_11\" id=\"7fa3d4f661e827cbfe37079546442ed8_p_11\"><span data-lake-id=\"uc85b018f\" id=\"uc85b018f\">示例 3:</span></p><p data-lake-id=\"09a2b5671cf447a1a3529d71c89cf9e1_p_12\" id=\"09a2b5671cf447a1a3529d71c89cf9e1_p_12\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%E8%BE%93%E5%85%A5%3A%20%5C%22pwwkew%5C%22%5Cn%E8%BE%93%E5%87%BA%3A%203%5Cn%E8%A7%A3%E9%87%8A%3A%20%E5%9B%A0%E4%B8%BA%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2%E6%98%AF%20%5C%22wke%5C%22%EF%BC%8C%E6%89%80%E4%BB%A5%E5%85%B6%E9%95%BF%E5%BA%A6%E4%B8%BA%203%E3%80%82%5Cn%20%20%20%20%20%E8%AF%B7%E6%B3%A8%E6%84%8F%EF%BC%8C%E4%BD%A0%E7%9A%84%E7%AD%94%E6%A1%88%E5%BF%85%E9%A1%BB%E6%98%AF%20%E5%AD%90%E4%B8%B2%20%E7%9A%84%E9%95%BF%E5%BA%A6%EF%BC%8C%5C%22pwke%5C%22%20%E6%98%AF%E4%B8%80%E4%B8%AA%E5%AD%90%E5%BA%8F%E5%88%97%EF%BC%8C%E4%B8%8D%E6%98%AF%E5%AD%90%E4%B8%B2%E3%80%82%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22id%22%3A%222c8dc786%22%7D\"></card><h2 data-lake-id=\"0c223e18\" id=\"0c223e18\"><span data-lake-id=\"udd9a8287\" id=\"udd9a8287\">解题思路</span></h2><p data-lake-id=\"2369fafe89fae403079018df6f36b51b_p_13\" id=\"2369fafe89fae403079018df6f36b51b_p_13\"><br></p><blockquote data-lake-id=\"ue48d4dcb\" id=\"ue48d4dcb\"><p data-lake-id=\"caa724d4c23c04bc636312935c7ea63c_p_14\" id=\"caa724d4c23c04bc636312935c7ea63c_p_14\"><span data-lake-id=\"u0d5d04af\" id=\"u0d5d04af\">通过图解法进行判定，每当出现新的重复字符时，将重新截取子字符串。</span></p><p data-lake-id=\"65cbb62bfbdd76454f9d2a50a8fd57f4_p_15\" id=\"65cbb62bfbdd76454f9d2a50a8fd57f4_p_15\"><span data-lake-id=\"ua2b8d76a\" id=\"ua2b8d76a\">截取的位置为该字符串第一次出现重复字符的位置。</span></p><p data-lake-id=\"676e7d283eb00353d0679e385220a19c_p_16\" id=\"676e7d283eb00353d0679e385220a19c_p_16\"><span data-lake-id=\"u35f62788\" id=\"u35f62788\">字符串长度为 0 则直接返回</span></p></blockquote><p data-lake-id=\"c5eaf555cee01ec836fc749258c6179d_p_17\" id=\"c5eaf555cee01ec836fc749258c6179d_p_17\"><br></p><h2 data-lake-id=\"571f6dbc\" id=\"571f6dbc\"><span data-lake-id=\"ub81d8ce9\" id=\"ub81d8ce9\">图解</span></h2><p data-lake-id=\"c4c8cf8a26b55060e684fc9733b06494_p_19\" id=\"c4c8cf8a26b55060e684fc9733b06494_p_19\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2020%2Fpng%2F732231%2F1608705746422-bc6ae42d-4e42-4012-b984-b85746b53b21.png%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A700%2C%22height%22%3A587%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2.png%22%2C%22size%22%3A23925%2C%22originWidth%22%3A700%2C%22originHeight%22%3A587%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%22%2C%22ocrLocations%22%3A%5B%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%230b0707%22%2C%22id%22%3A%22CrKNU%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><h3 data-lake-id=\"Nm6k0\" id=\"Nm6k0\"><span data-lake-id=\"ube96ded8\" id=\"ube96ded8\">游标法</span></h3><p data-lake-id=\"u994d11f8\" id=\"u994d11f8\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F**%5Cn%20*%20%E6%9E%84%E9%80%A0%E5%AD%90%E4%B8%B2%E6%B3%95%5Cn%20*%20%40param%20%7Bstring%7D%20s%5Cn%20*%20%40return%20%7Bnumber%7D%5Cn%20*%2F%5Cnvar%20lengthOfLongestSubstring%20%3D%20function(s)%20%7B%5Cn%20%20%20%20let%20substr%20%3D%20''%5Cn%20%20%20%20let%20maxLen%20%3D%20substr.length%5Cn%20%20%20%20for%20(let%20i%20%3D%200%3B%20i%20%3C%20s.length%3B%20i%2B%2B)%20%7B%5Cn%20%20%20%20%20%20const%20index%20%3D%20substr.indexOf(s%5Bi%5D)%5Cn%20%20%20%20%20%20if%20(index%20%3D%3D%3D%20-1)%20%7B%5Cn%20%20%20%20%20%20%20%20substr%20%2B%3D%20s%5Bi%5D%5Cn%20%20%20%20%20%20%7D%20else%20%7B%5Cn%20%20%20%20%20%20%20%20substr%20%3D%20substr.substring(index%20%2B%201)%20%2B%20s%5Bi%5D%5Cn%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20maxLen%20%3D%20Math.max(maxLen%2C%20substr.length)%5Cn%20%20%20%20%7D%5Cn%20%20%20%20return%20maxLen%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Bracket%20Lights%20Pro%22%2C%22id%22%3A%22cadaee71%22%7D\"></card><p data-lake-id=\"ua08f1ddc\" id=\"ua08f1ddc\"><br></p><h3 data-lake-id=\"zv5Wo\" id=\"zv5Wo\"><span data-lake-id=\"u0622f24f\" id=\"u0622f24f\">滑动窗口 + hash</span></h3><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F**%5Cn%20*%20%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%20%2B%20hash%5Cn%20*%20%40param%20%7Bstring%7D%20s%5Cn%20*%20%40return%20%7Bnumber%7D%5Cn%20*%2F%5Cnvar%20lengthOfLongestSubstring%20%3D%20function(s)%20%7B%5Cn%20%20%20%20let%20map%20%3D%20new%20Map()%5Cn%20%20%20%20let%20maxLen%20%3D%200%5Cn%20%20%20%20let%20l%20%3D%200%5Cn%20%20%20%20let%20r%20%3D%200%5Cn%20%20%20%20for%20(%3B%20r%20%3C%20s.length%3B%20r%2B%2B)%20%7B%5Cn%20%20%20%20%20%20if%20(map.has(s%5Br%5D))%20%7B%5Cn%20%20%20%20%20%20%20%20l%20%3D%20Math.max(l%2C%20map.get(s%5Br%5D)%20%2B%201)%5Cn%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20maxLen%20%3D%20Math.max(maxLen%2C%20r%20-%20l%20%2B%201)%5Cn%20%20%20%20%20%20map.set(s%5Br%5D%2C%20r)%5Cn%20%20%20%20%7D%5Cn%20%20%20%20return%20maxLen%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Bracket%20Lights%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22a7H57%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"ud54d1595\" id=\"ud54d1595\"><br></p>",
  "public": 0,
  "status": 1,
  "likes_count": 0,
  "read_count": 0,
  "hits": 0,
  "comments_count": 0,
  "word_count": 402,
  "created_at": "2020-08-08T11:41:18.000Z",
  "updated_at": "2023-11-23T18:57:37.000Z",
  "content_updated_at": "2023-11-23T16:47:34.000Z",
  "published_at": "2023-11-23T16:47:34.000Z",
  "first_published_at": "2020-08-08T11:41:18.000Z",
  "book": {
    "id": 44292824,
    "type": "Book",
    "slug": "gklbh2",
    "name": "Leetcode",
    "user_id": 732231,
    "description": "",
    "toc_yml": "- type: META\n  count: 51\n  display_level: 1\n  tail_type: UPDATED_AT\n  base_version_id: 374208920\n  published: true\n  max_level: 0\n  last_updated_at: 2023-11-23T19:01:45.930Z\n  version_id: 374208922\n- type: DOC\n  title: LCR 140 训练计划 II (链表中倒数第 k 个节点)\n  uuid: 4gkpTMCOXa9Lm_3y\n  url: gu578y56irbrv7ba\n  prev_uuid: ''\n  sibling_uuid: D9fjaj4GAhOJB3EG\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147992663\n  level: 0\n  id: 147992663\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 1 两数之和\n  uuid: D9fjaj4GAhOJB3EG\n  url: vi0b1e\n  prev_uuid: 4gkpTMCOXa9Lm_3y\n  sibling_uuid: 0yhcscQD-WvS4GPZ\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 11416831\n  level: 0\n  id: 11416831\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 2 两数相加\n  uuid: 0yhcscQD-WvS4GPZ\n  url: ffmgi1\n  prev_uuid: D9fjaj4GAhOJB3EG\n  sibling_uuid: vFsn4Bf4Jh4U32mI\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 11416844\n  level: 0\n  id: 11416844\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 3 无重复字符的最长子串\n  uuid: vFsn4Bf4Jh4U32mI\n  url: mtz77i\n  prev_uuid: 0yhcscQD-WvS4GPZ\n  sibling_uuid: 1t7bsJe3J4tNFVZL\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 11416847\n  level: 0\n  id: 11416847\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 4 寻找两个正序数组的中位数\n  uuid: 1t7bsJe3J4tNFVZL\n  url: gva8o4geqcng2pvt\n  prev_uuid: vFsn4Bf4Jh4U32mI\n  sibling_uuid: 6TorxGBvvbeYOpXd\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147991624\n  level: 0\n  id: 147991624\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 5 最长回文子串\n  uuid: 6TorxGBvvbeYOpXd\n  url: oyeiiunxxy1q8p7r\n  prev_uuid: 1t7bsJe3J4tNFVZL\n  sibling_uuid: Q64oWkEJyWN9W6HA\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147876484\n  level: 0\n  id: 147876484\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 15 三数之和\n  uuid: Q64oWkEJyWN9W6HA\n  url: nkcuzy8lgqbobw49\n  prev_uuid: 6TorxGBvvbeYOpXd\n  sibling_uuid: ZYKfuY36K6GG3JCQ\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147451556\n  level: 0\n  id: 147451556\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 20 有效的括号\n  uuid: ZYKfuY36K6GG3JCQ\n  url: cszxgc1xg44499b7\n  prev_uuid: Q64oWkEJyWN9W6HA\n  sibling_uuid: DUB0D9AKK0likFPP\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147991949\n  level: 0\n  id: 147991949\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 21 合并两个有序链表\n  uuid: DUB0D9AKK0likFPP\n  url: dcidazawmep66kvf\n  prev_uuid: ZYKfuY36K6GG3JCQ\n  sibling_uuid: JGz8qO7-UCqfmKRQ\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147991981\n  level: 0\n  id: 147991981\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 31 下一个排列\n  uuid: JGz8qO7-UCqfmKRQ\n  url: bzdwvakyt0q7h55f\n  prev_uuid: DUB0D9AKK0likFPP\n  sibling_uuid: hJybbEKV2Okjvfrc\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147992039\n  level: 0\n  id: 147992039\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 32 最长有效括号\n  uuid: hJybbEKV2Okjvfrc\n  url: gkx2i4kcuqsp62q3\n  prev_uuid: JGz8qO7-UCqfmKRQ\n  sibling_uuid: P-POKc-Eq_5qhdtz\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147992075\n  level: 0\n  id: 147992075\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 39 组合总和\n  uuid: P-POKc-Eq_5qhdtz\n  url: gii9er6dcbq51d04\n  prev_uuid: hJybbEKV2Okjvfrc\n  sibling_uuid: HMcs-WNiT1LU5pVk\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147992119\n  level: 0\n  id: 147992119\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 42 接雨水\n  uuid: HMcs-WNiT1LU5pVk\n  url: kxktgivrkdl6wz5z\n  prev_uuid: P-POKc-Eq_5qhdtz\n  sibling_uuid: 7gA8hFWs4G74fr6W\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147992139\n  level: 0\n  id: 147992139\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 46 全排列\n  uuid: 7gA8hFWs4G74fr6W\n  url: xxua341nz98mow62\n  prev_uuid: HMcs-WNiT1LU5pVk\n  sibling_uuid: 6SInaQv7zqTeQYUG\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147992165\n  level: 0\n  id: 147992165\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 53 最大子序和\n  uuid: 6SInaQv7zqTeQYUG\n  url: wrfwwaild6gqpi22\n  prev_uuid: 7gA8hFWs4G74fr6W\n  sibling_uuid: zbwrvrvQZhDpHcKC\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147992175\n  level: 0\n  id: 147992175\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 56 合并区间\n  uuid: zbwrvrvQZhDpHcKC\n  url: xr8llnbke55x4fkg\n  prev_uuid: 6SInaQv7zqTeQYUG\n  sibling_uuid: eBOqa-7ikOmOtO9r\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147992185\n  level: 0\n  id: 147992185\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 67 二进制求和\n  uuid: eBOqa-7ikOmOtO9r\n  url: zd7gktt83m37uc1q\n  prev_uuid: zbwrvrvQZhDpHcKC\n  sibling_uuid: lDvlUWzwCFyaopLw\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147992190\n  level: 0\n  id: 147992190\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 70 爬楼梯\n  uuid: lDvlUWzwCFyaopLw\n  url: ru99qh59e3y5cia2\n  prev_uuid: eBOqa-7ikOmOtO9r\n  sibling_uuid: rrwD5FgxzKY4Gpwr\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147992201\n  level: 0\n  id: 147992201\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 88 合并两个有序数组\n  uuid: rrwD5FgxzKY4Gpwr\n  url: szusblg76edira1c\n  prev_uuid: lDvlUWzwCFyaopLw\n  sibling_uuid: 6QxpLgzCGRMJc-J6\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147992021\n  level: 0\n  id: 147992021\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 94 二叉树的中序遍历\n  uuid: 6QxpLgzCGRMJc-J6\n  url: knlpiyei2hl9rzt3\n  prev_uuid: rrwD5FgxzKY4Gpwr\n  sibling_uuid: aFtiTAdnF7CKhtgt\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147992224\n  level: 0\n  id: 147992224\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 101 对称二叉树\n  uuid: aFtiTAdnF7CKhtgt\n  url: aoxk7rmkecx7z4ge\n  prev_uuid: 6QxpLgzCGRMJc-J6\n  sibling_uuid: T603eLVmpywbRmGU\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147992241\n  level: 0\n  id: 147992241\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 102 二叉树的层序遍历\n  uuid: T603eLVmpywbRmGU\n  url: zffm0kp0s6wve8bh\n  prev_uuid: aFtiTAdnF7CKhtgt\n  sibling_uuid: jmy47wNGCp0OMDBw\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147992251\n  level: 0\n  id: 147992251\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 104 二叉树的最大深度\n  uuid: jmy47wNGCp0OMDBw\n  url: xvcbss1txad8x08f\n  prev_uuid: T603eLVmpywbRmGU\n  sibling_uuid: TbQVp_I6xpqwIknG\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147992262\n  level: 0\n  id: 147992262\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 111 二叉树的最小深度\n  uuid: TbQVp_I6xpqwIknG\n  url: gfu8qrvtcc3a60vi\n  prev_uuid: jmy47wNGCp0OMDBw\n  sibling_uuid: 84vPb9Z8OKiDHJgZ\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147992282\n  level: 0\n  id: 147992282\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 112 路径总和\n  uuid: 84vPb9Z8OKiDHJgZ\n  url: lizcps0saeod0pey\n  prev_uuid: TbQVp_I6xpqwIknG\n  sibling_uuid: gsgwoclNI27-MYBk\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147992298\n  level: 0\n  id: 147992298\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 121 买卖股票的最佳时机\n  uuid: gsgwoclNI27-MYBk\n  url: eqag967oiizb6p3i\n  prev_uuid: 84vPb9Z8OKiDHJgZ\n  sibling_uuid: KlLSis2eG5DamkCt\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147992309\n  level: 0\n  id: 147992309\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 129 求根到叶子节点数字之和\n  uuid: KlLSis2eG5DamkCt\n  url: hpwmmdrcgd8zvtmh\n  prev_uuid: gsgwoclNI27-MYBk\n  sibling_uuid: 80Okgq3-oE8vSpC4\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147992322\n  level: 0\n  id: 147992322\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 141 环型链表\n  uuid: 80Okgq3-oE8vSpC4\n  url: drdzvh5hf9g1kmak\n  prev_uuid: KlLSis2eG5DamkCt\n  sibling_uuid: 4xSu26xVAWy5Bhq5\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147992330\n  level: 0\n  id: 147992330\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 146 LRU缓存机制\n  uuid: 4xSu26xVAWy5Bhq5\n  url: pzx6s6b15eoogm9h\n  prev_uuid: 80Okgq3-oE8vSpC4\n  sibling_uuid: cgBOZtnI9VLErmqr\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147992342\n  level: 0\n  id: 147992342\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 151 反转字符串中的单词\n  uuid: cgBOZtnI9VLErmqr\n  url: fqoogl0zhx7wttrd\n  prev_uuid: 4xSu26xVAWy5Bhq5\n  sibling_uuid: 3L1GJnf7HpSxz9a5\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147751033\n  level: 0\n  id: 147751033\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 155 最小栈\n  uuid: 3L1GJnf7HpSxz9a5\n  url: ywtlc7gvif4kuckp\n  prev_uuid: cgBOZtnI9VLErmqr\n  sibling_uuid: g40aZbGc0NtScNSt\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147992376\n  level: 0\n  id: 147992376\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 160 相交链表\n  uuid: g40aZbGc0NtScNSt\n  url: dtfon507inu95297\n  prev_uuid: 3L1GJnf7HpSxz9a5\n  sibling_uuid: VY4pQ951swxUHN4N\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147992387\n  level: 0\n  id: 147992387\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 162 寻找峰值\n  uuid: VY4pQ951swxUHN4N\n  url: csbwdm6dx7o922us\n  prev_uuid: g40aZbGc0NtScNSt\n  sibling_uuid: jRFXsVO2auHn3mBK\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147718381\n  level: 0\n  id: 147718381\n  open_window: 1\n  visible: 0\n- type: DOC\n  title: 169 多数元素\n  uuid: jRFXsVO2auHn3mBK\n  url: gbwgs8281hrgu2p5\n  prev_uuid: VY4pQ951swxUHN4N\n  sibling_uuid: M-IW-4k9BYGmwE5A\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147992418\n  level: 0\n  id: 147992418\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 200 岛屿数量\n  uuid: M-IW-4k9BYGmwE5A\n  url: hhrm6w6r9fm90ugh\n  prev_uuid: jRFXsVO2auHn3mBK\n  sibling_uuid: UumAIFlOK6KlxrXu\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147992427\n  level: 0\n  id: 147992427\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 206 反转链表\n  uuid: UumAIFlOK6KlxrXu\n  url: gprthzske3qs9xdi\n  prev_uuid: M-IW-4k9BYGmwE5A\n  sibling_uuid: _ggJN2LjLAazwCEb\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147992433\n  level: 0\n  id: 147992433\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 209 长度最小的子数组\n  uuid: _ggJN2LjLAazwCEb\n  url: dsz8vf1e2w1ui24m\n  prev_uuid: UumAIFlOK6KlxrXu\n  sibling_uuid: '-D0BIBDk_G03exTI'\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147451598\n  level: 0\n  id: 147451598\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 215 数组中的第K个最大元素\n  uuid: '-D0BIBDk_G03exTI'\n  url: idavgg7e0ry9gawk\n  prev_uuid: _ggJN2LjLAazwCEb\n  sibling_uuid: LyX62bT4EPTpESlc\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147876068\n  level: 0\n  id: 147876068\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 226 翻转二叉树\n  uuid: LyX62bT4EPTpESlc\n  url: ss2ir5pkqhohctlb\n  prev_uuid: '-D0BIBDk_G03exTI'\n  sibling_uuid: ASAC50CVabAnrfR5\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147992479\n  level: 0\n  id: 147992479\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 238 除自身以外数组的乘积\n  uuid: ASAC50CVabAnrfR5\n  url: pnbw26bnt40vohxk\n  prev_uuid: LyX62bT4EPTpESlc\n  sibling_uuid: 4ajZIEKjwOjpC_Ri\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147751162\n  level: 0\n  id: 147751162\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 322 零钱兑换\n  uuid: 4ajZIEKjwOjpC_Ri\n  url: evzdsp8i9z9iz1m9\n  prev_uuid: ASAC50CVabAnrfR5\n  sibling_uuid: ybNfKJP90CNQ95up\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147992508\n  level: 0\n  id: 147992508\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 334 递增的三元子序列\n  uuid: ybNfKJP90CNQ95up\n  url: dkktq1ez0d5no8b5\n  prev_uuid: 4ajZIEKjwOjpC_Ri\n  sibling_uuid: izCSq4UA7udwUgGS\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147853149\n  level: 0\n  id: 147853149\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 345 反转字符串中的元音字母\n  uuid: izCSq4UA7udwUgGS\n  url: gqccwkdpgo04oeaf\n  prev_uuid: ybNfKJP90CNQ95up\n  sibling_uuid: 4nNqqOCjAxtgfryN\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147750802\n  level: 0\n  id: 147750802\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 415 字符串相加\n  uuid: 4nNqqOCjAxtgfryN\n  url: sw165ohocfoif7g3\n  prev_uuid: izCSq4UA7udwUgGS\n  sibling_uuid: eUwbAk5ZESHOdwCJ\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147992529\n  level: 0\n  id: 147992529\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 443 压缩字符串\n  uuid: eUwbAk5ZESHOdwCJ\n  url: xzyrc9xgzo0aiu10\n  prev_uuid: 4nNqqOCjAxtgfryN\n  sibling_uuid: 5isNHBjoZWJY0rqG\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147875594\n  level: 0\n  id: 147875594\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 509 斐波那契数\n  uuid: 5isNHBjoZWJY0rqG\n  url: vpk2fcb8bc2r1ad5\n  prev_uuid: eUwbAk5ZESHOdwCJ\n  sibling_uuid: hEHSMukKLz8LgdJ4\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147992568\n  level: 0\n  id: 147992568\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 605 种花问题\n  uuid: hEHSMukKLz8LgdJ4\n  url: gtlqi9gf62em4cr1\n  prev_uuid: 5isNHBjoZWJY0rqG\n  sibling_uuid: O8NsEdUMxID6uArM\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147745513\n  level: 0\n  id: 147745513\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 1071 字符串的最大公因子\n  uuid: O8NsEdUMxID6uArM\n  url: rd4ob184gdlope5a\n  prev_uuid: hEHSMukKLz8LgdJ4\n  sibling_uuid: cmYeCXTaXQ4HAG6S\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147740806\n  level: 0\n  id: 147740806\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 1143 最长公共子序列\n  uuid: cmYeCXTaXQ4HAG6S\n  url: kbtwmpzch9x5aqku\n  prev_uuid: O8NsEdUMxID6uArM\n  sibling_uuid: '-YscIPwThxhY7WAF'\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147718465\n  level: 0\n  id: 147718465\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 1431 拥有最多糖果的孩子\n  uuid: '-YscIPwThxhY7WAF'\n  url: dxn5xdxqh1ggc326\n  prev_uuid: cmYeCXTaXQ4HAG6S\n  sibling_uuid: 0oXS9Rh1T3xKhIW5\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147742194\n  level: 0\n  id: 147742194\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 1768 交替合并字符串\n  uuid: 0oXS9Rh1T3xKhIW5\n  url: mzu6pzt99ofgmdyg\n  prev_uuid: '-YscIPwThxhY7WAF'\n  sibling_uuid: ''\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147717947\n  level: 0\n  id: 147717947\n  open_window: 1\n  visible: 1\n",
    "creator_id": 732231,
    "public": 0,
    "items_count": 51,
    "likes_count": 0,
    "watches_count": 0,
    "content_updated_at": "2023-11-23T19:05:02.254Z",
    "created_at": "2023-11-19T17:46:55.000Z",
    "updated_at": "2023-11-23T19:05:02.000Z",
    "user": {
      "id": 732231,
      "type": "User",
      "login": "wcywxq",
      "name": "magic",
      "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/732231/1606968271774-avatar/886ad88b-d2cc-4c9e-a674-f70eb51a679c.png",
      "books_count": 21,
      "public_books_count": 0,
      "followers_count": 0,
      "following_count": 0,
      "public": 1,
      "description": null,
      "created_at": "2020-01-08T14:21:31.000Z",
      "updated_at": "2023-11-22T20:13:30.000Z",
      "work_id": "",
      "_serializer": "v2.user"
    },
    "namespace": "wcywxq/gklbh2",
    "_serializer": "v2.book"
  },
  "user": {
    "id": 732231,
    "type": "User",
    "login": "wcywxq",
    "name": "magic",
    "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/732231/1606968271774-avatar/886ad88b-d2cc-4c9e-a674-f70eb51a679c.png",
    "books_count": 21,
    "public_books_count": 0,
    "followers_count": 0,
    "following_count": 0,
    "public": 1,
    "description": null,
    "created_at": "2020-01-08T14:21:31.000Z",
    "updated_at": "2023-11-22T20:13:30.000Z",
    "work_id": "",
    "_serializer": "v2.user"
  },
  "tags": [
    {
      "id": 17002556,
      "title": "中等",
      "doc_id": 11416847,
      "book_id": 44292824,
      "user_id": 732231,
      "created_at": "2023-11-23T16:23:20.000Z",
      "updated_at": "2023-11-23T16:23:20.000Z",
      "_serializer": "v2.tag"
    }
  ],
  "latest_version_id": 2137272824,
  "creator": {
    "id": 732231,
    "type": "User",
    "login": "wcywxq",
    "name": "magic",
    "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/732231/1606968271774-avatar/886ad88b-d2cc-4c9e-a674-f70eb51a679c.png",
    "books_count": 21,
    "public_books_count": 0,
    "followers_count": 0,
    "following_count": 0,
    "public": 1,
    "description": null,
    "created_at": "2020-01-08T14:21:31.000Z",
    "updated_at": "2023-11-22T20:13:30.000Z",
    "work_id": "",
    "_serializer": "v2.user"
  },
  "_serializer": "v2.doc_detail"
}