{
  "id": 147740806,
  "slug": "rd4ob184gdlope5a",
  "title": "1071 字符串的最大公因子",
  "description": "1071. 字符串的最大公因子//对于字符串 s 和 t，只有在 s = t + ... + t（t 自身连接 1 次或多次）时，我们才认定 “t 能除尽 s”。  // // 给定两个字符串 str1 和 str2 。返回 最长字符串 x，要求满足 x 能除尽 str1 且 x 能除尽 st...",
  "cover": "",
  "user_id": 732231,
  "book_id": 44292824,
  "last_editor_id": 732231,
  "format": "lake",
  "body_draft": "<!doctype html><div class=\"lake-content\" typography=\"classic\"><p id=\"uf9caacc3\" class=\"ne-p\"><a href=\"https://leetcode.cn/problems/greatest-common-divisor-of-strings\" data-href=\"https://leetcode.cn/problems/greatest-common-divisor-of-strings\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">1071. 字符串的最大公因子</span></a></p><pre data-language=\"javascript\" id=\"yalhX\" class=\"ne-codeblock language-javascript\"><code>//对于字符串 s 和 t，只有在 s = t + ... + t（t 自身连接 1 次或多次）时，我们才认定 “t 能除尽 s”。 \n//\n// 给定两个字符串 str1 和 str2 。返回 最长字符串 x，要求满足 x 能除尽 str1 且 x 能除尽 str2 。 \n//\n// \n//\n// 示例 1： \n//\n// \n//输入：str1 = &quot;ABCABC&quot;, str2 = &quot;ABC&quot;\n//输出：&quot;ABC&quot;\n// \n//\n// 示例 2： \n//\n// \n//输入：str1 = &quot;ABABAB&quot;, str2 = &quot;ABAB&quot;\n//输出：&quot;AB&quot;\n// \n//\n// 示例 3： \n//\n// \n//输入：str1 = &quot;LEET&quot;, str2 = &quot;CODE&quot;\n//输出：&quot;&quot;\n// \n//\n// \n//\n// 提示： \n//\n// \n// 1 &lt;= str1.length, str2.length &lt;= 1000 \n// str1 和 str2 由大写英文字母组成 \n// \n//\n// Related Topics 数学 字符串 👍 371 👎 0\n\n\n//leetcode submit region begin(Prohibit modification and deletion)\n/**\n * 最大公约数 + 数学法，计算前缀串，若 str1 + str2 = str2 + str1，那么一定存在符合条件的 x\n * @param {string} str1\n * @param {string} str2\n * @return {string}\n */\nvar gcdOfStrings = function(str1, str2) {\n  // 求最大公约数\n  function gcd (a, b) {\n    // 完整\n    // let rest = a % b\n    // while (rest !== 0) {\n    //   a = b\n    //   b = rest\n    //   rest = a % b\n    // }\n    // return b\n    // 简化\n    let [x, y] = [a, b]\n    while (y !== 0) {\n      [x, y] = [y, x % y]\n    }\n    return x\n  }\n  if (str1 + str2 !== str2 + str1) {\n    return ''\n  }\n  return str1.substring(0, gcd(str1.length, str2.length))\n}\n//leetcode submit region end(Prohibit modification and deletion)\n</code></pre></div>",
  "body": "[1071. 字符串的最大公因子](https://leetcode.cn/problems/greatest-common-divisor-of-strings)\n```javascript\n//对于字符串 s 和 t，只有在 s = t + ... + t（t 自身连接 1 次或多次）时，我们才认定 “t 能除尽 s”。 \n//\n// 给定两个字符串 str1 和 str2 。返回 最长字符串 x，要求满足 x 能除尽 str1 且 x 能除尽 str2 。 \n//\n// \n//\n// 示例 1： \n//\n// \n//输入：str1 = \"ABCABC\", str2 = \"ABC\"\n//输出：\"ABC\"\n// \n//\n// 示例 2： \n//\n// \n//输入：str1 = \"ABABAB\", str2 = \"ABAB\"\n//输出：\"AB\"\n// \n//\n// 示例 3： \n//\n// \n//输入：str1 = \"LEET\", str2 = \"CODE\"\n//输出：\"\"\n// \n//\n// \n//\n// 提示： \n//\n// \n// 1 <= str1.length, str2.length <= 1000 \n// str1 和 str2 由大写英文字母组成 \n// \n//\n// Related Topics 数学 字符串 👍 371 👎 0\n\n\n//leetcode submit region begin(Prohibit modification and deletion)\n/**\n * 最大公约数 + 数学法，计算前缀串，若 str1 + str2 = str2 + str1，那么一定存在符合条件的 x\n * @param {string} str1\n * @param {string} str2\n * @return {string}\n */\nvar gcdOfStrings = function(str1, str2) {\n  // 求最大公约数\n  function gcd (a, b) {\n    // 完整\n    // let rest = a % b\n    // while (rest !== 0) {\n    //   a = b\n    //   b = rest\n    //   rest = a % b\n    // }\n    // return b\n    // 简化\n    let [x, y] = [a, b]\n    while (y !== 0) {\n      [x, y] = [y, x % y]\n    }\n    return x\n  }\n  if (str1 + str2 !== str2 + str1) {\n    return ''\n  }\n  return str1.substring(0, gcd(str1.length, str2.length))\n}\n//leetcode submit region end(Prohibit modification and deletion)\n\n```\n",
  "body_html": "<!doctype html><div class=\"lake-content\" typography=\"classic\"><p id=\"uf9caacc3\" class=\"ne-p\"><a href=\"https://leetcode.cn/problems/greatest-common-divisor-of-strings\" data-href=\"https://leetcode.cn/problems/greatest-common-divisor-of-strings\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">1071. 字符串的最大公因子</span></a></p><pre data-language=\"javascript\" id=\"yalhX\" class=\"ne-codeblock language-javascript\"><code>//对于字符串 s 和 t，只有在 s = t + ... + t（t 自身连接 1 次或多次）时，我们才认定 “t 能除尽 s”。 \n//\n// 给定两个字符串 str1 和 str2 。返回 最长字符串 x，要求满足 x 能除尽 str1 且 x 能除尽 str2 。 \n//\n// \n//\n// 示例 1： \n//\n// \n//输入：str1 = &quot;ABCABC&quot;, str2 = &quot;ABC&quot;\n//输出：&quot;ABC&quot;\n// \n//\n// 示例 2： \n//\n// \n//输入：str1 = &quot;ABABAB&quot;, str2 = &quot;ABAB&quot;\n//输出：&quot;AB&quot;\n// \n//\n// 示例 3： \n//\n// \n//输入：str1 = &quot;LEET&quot;, str2 = &quot;CODE&quot;\n//输出：&quot;&quot;\n// \n//\n// \n//\n// 提示： \n//\n// \n// 1 &lt;= str1.length, str2.length &lt;= 1000 \n// str1 和 str2 由大写英文字母组成 \n// \n//\n// Related Topics 数学 字符串 👍 371 👎 0\n\n\n//leetcode submit region begin(Prohibit modification and deletion)\n/**\n * 最大公约数 + 数学法，计算前缀串，若 str1 + str2 = str2 + str1，那么一定存在符合条件的 x\n * @param {string} str1\n * @param {string} str2\n * @return {string}\n */\nvar gcdOfStrings = function(str1, str2) {\n  // 求最大公约数\n  function gcd (a, b) {\n    // 完整\n    // let rest = a % b\n    // while (rest !== 0) {\n    //   a = b\n    //   b = rest\n    //   rest = a % b\n    // }\n    // return b\n    // 简化\n    let [x, y] = [a, b]\n    while (y !== 0) {\n      [x, y] = [y, x % y]\n    }\n    return x\n  }\n  if (str1 + str2 !== str2 + str1) {\n    return ''\n  }\n  return str1.substring(0, gcd(str1.length, str2.length))\n}\n//leetcode submit region end(Prohibit modification and deletion)\n</code></pre></div>",
  "body_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"viewport\" content=\"adapt\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"paragraphSpacing\" content=\"relax\" /><p data-lake-id=\"uf9caacc3\" id=\"uf9caacc3\"><a href=\"https://leetcode.cn/problems/greatest-common-divisor-of-strings\" target=\"_blank\" data-lake-id=\"ubf415b5e\" id=\"ubf415b5e\"><span data-lake-id=\"ua02c4d4a\" id=\"ua02c4d4a\">1071. 字符串的最大公因子</span></a></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%E5%AF%B9%E4%BA%8E%E5%AD%97%E7%AC%A6%E4%B8%B2%20s%20%E5%92%8C%20t%EF%BC%8C%E5%8F%AA%E6%9C%89%E5%9C%A8%20s%20%3D%20t%20%2B%20...%20%2B%20t%EF%BC%88t%20%E8%87%AA%E8%BA%AB%E8%BF%9E%E6%8E%A5%201%20%E6%AC%A1%E6%88%96%E5%A4%9A%E6%AC%A1%EF%BC%89%E6%97%B6%EF%BC%8C%E6%88%91%E4%BB%AC%E6%89%8D%E8%AE%A4%E5%AE%9A%20%E2%80%9Ct%20%E8%83%BD%E9%99%A4%E5%B0%BD%20s%E2%80%9D%E3%80%82%20%5Cn%2F%2F%5Cn%2F%2F%20%E7%BB%99%E5%AE%9A%E4%B8%A4%E4%B8%AA%E5%AD%97%E7%AC%A6%E4%B8%B2%20str1%20%E5%92%8C%20str2%20%E3%80%82%E8%BF%94%E5%9B%9E%20%E6%9C%80%E9%95%BF%E5%AD%97%E7%AC%A6%E4%B8%B2%20x%EF%BC%8C%E8%A6%81%E6%B1%82%E6%BB%A1%E8%B6%B3%20x%20%E8%83%BD%E9%99%A4%E5%B0%BD%20str1%20%E4%B8%94%20x%20%E8%83%BD%E9%99%A4%E5%B0%BD%20str2%20%E3%80%82%20%5Cn%2F%2F%5Cn%2F%2F%20%5Cn%2F%2F%5Cn%2F%2F%20%E7%A4%BA%E4%BE%8B%201%EF%BC%9A%20%5Cn%2F%2F%5Cn%2F%2F%20%5Cn%2F%2F%E8%BE%93%E5%85%A5%EF%BC%9Astr1%20%3D%20%5C%22ABCABC%5C%22%2C%20str2%20%3D%20%5C%22ABC%5C%22%5Cn%2F%2F%E8%BE%93%E5%87%BA%EF%BC%9A%5C%22ABC%5C%22%5Cn%2F%2F%20%5Cn%2F%2F%5Cn%2F%2F%20%E7%A4%BA%E4%BE%8B%202%EF%BC%9A%20%5Cn%2F%2F%5Cn%2F%2F%20%5Cn%2F%2F%E8%BE%93%E5%85%A5%EF%BC%9Astr1%20%3D%20%5C%22ABABAB%5C%22%2C%20str2%20%3D%20%5C%22ABAB%5C%22%5Cn%2F%2F%E8%BE%93%E5%87%BA%EF%BC%9A%5C%22AB%5C%22%5Cn%2F%2F%20%5Cn%2F%2F%5Cn%2F%2F%20%E7%A4%BA%E4%BE%8B%203%EF%BC%9A%20%5Cn%2F%2F%5Cn%2F%2F%20%5Cn%2F%2F%E8%BE%93%E5%85%A5%EF%BC%9Astr1%20%3D%20%5C%22LEET%5C%22%2C%20str2%20%3D%20%5C%22CODE%5C%22%5Cn%2F%2F%E8%BE%93%E5%87%BA%EF%BC%9A%5C%22%5C%22%5Cn%2F%2F%20%5Cn%2F%2F%5Cn%2F%2F%20%5Cn%2F%2F%5Cn%2F%2F%20%E6%8F%90%E7%A4%BA%EF%BC%9A%20%5Cn%2F%2F%5Cn%2F%2F%20%5Cn%2F%2F%201%20%3C%3D%20str1.length%2C%20str2.length%20%3C%3D%201000%20%5Cn%2F%2F%20str1%20%E5%92%8C%20str2%20%E7%94%B1%E5%A4%A7%E5%86%99%E8%8B%B1%E6%96%87%E5%AD%97%E6%AF%8D%E7%BB%84%E6%88%90%20%5Cn%2F%2F%20%5Cn%2F%2F%5Cn%2F%2F%20Related%20Topics%20%E6%95%B0%E5%AD%A6%20%E5%AD%97%E7%AC%A6%E4%B8%B2%20%F0%9F%91%8D%20371%20%F0%9F%91%8E%200%5Cn%5Cn%5Cn%2F%2Fleetcode%20submit%20region%20begin(Prohibit%20modification%20and%20deletion)%5Cn%2F**%5Cn%20*%20%E6%9C%80%E5%A4%A7%E5%85%AC%E7%BA%A6%E6%95%B0%20%2B%20%E6%95%B0%E5%AD%A6%E6%B3%95%EF%BC%8C%E8%AE%A1%E7%AE%97%E5%89%8D%E7%BC%80%E4%B8%B2%EF%BC%8C%E8%8B%A5%20str1%20%2B%20str2%20%3D%20str2%20%2B%20str1%EF%BC%8C%E9%82%A3%E4%B9%88%E4%B8%80%E5%AE%9A%E5%AD%98%E5%9C%A8%E7%AC%A6%E5%90%88%E6%9D%A1%E4%BB%B6%E7%9A%84%20x%5Cn%20*%20%40param%20%7Bstring%7D%20str1%5Cn%20*%20%40param%20%7Bstring%7D%20str2%5Cn%20*%20%40return%20%7Bstring%7D%5Cn%20*%2F%5Cnvar%20gcdOfStrings%20%3D%20function(str1%2C%20str2)%20%7B%5Cn%20%20%2F%2F%20%E6%B1%82%E6%9C%80%E5%A4%A7%E5%85%AC%E7%BA%A6%E6%95%B0%5Cn%20%20function%20gcd%20(a%2C%20b)%20%7B%5Cn%20%20%20%20%2F%2F%20%E5%AE%8C%E6%95%B4%5Cn%20%20%20%20%2F%2F%20let%20rest%20%3D%20a%20%25%20b%5Cn%20%20%20%20%2F%2F%20while%20(rest%20!%3D%3D%200)%20%7B%5Cn%20%20%20%20%2F%2F%20%20%20a%20%3D%20b%5Cn%20%20%20%20%2F%2F%20%20%20b%20%3D%20rest%5Cn%20%20%20%20%2F%2F%20%20%20rest%20%3D%20a%20%25%20b%5Cn%20%20%20%20%2F%2F%20%7D%5Cn%20%20%20%20%2F%2F%20return%20b%5Cn%20%20%20%20%2F%2F%20%E7%AE%80%E5%8C%96%5Cn%20%20%20%20let%20%5Bx%2C%20y%5D%20%3D%20%5Ba%2C%20b%5D%5Cn%20%20%20%20while%20(y%20!%3D%3D%200)%20%7B%5Cn%20%20%20%20%20%20%5Bx%2C%20y%5D%20%3D%20%5By%2C%20x%20%25%20y%5D%5Cn%20%20%20%20%7D%5Cn%20%20%20%20return%20x%5Cn%20%20%7D%5Cn%20%20if%20(str1%20%2B%20str2%20!%3D%3D%20str2%20%2B%20str1)%20%7B%5Cn%20%20%20%20return%20''%5Cn%20%20%7D%5Cn%20%20return%20str1.substring(0%2C%20gcd(str1.length%2C%20str2.length))%5Cn%7D%5Cn%2F%2Fleetcode%20submit%20region%20end(Prohibit%20modification%20and%20deletion)%5Cn%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Bracket%20Lights%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22yalhX%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card>",
  "public": 0,
  "status": 1,
  "likes_count": 0,
  "read_count": 0,
  "hits": 0,
  "comments_count": 0,
  "word_count": 372,
  "created_at": "2023-11-21T14:21:06.000Z",
  "updated_at": "2023-11-23T19:00:17.000Z",
  "content_updated_at": "2023-11-23T16:42:27.000Z",
  "published_at": "2023-11-23T16:42:27.000Z",
  "first_published_at": "2023-11-21T14:21:16.516Z",
  "book": {
    "id": 44292824,
    "type": "Book",
    "slug": "gklbh2",
    "name": "Leetcode",
    "user_id": 732231,
    "description": "",
    "toc_yml": "- type: META\n  count: 51\n  display_level: 1\n  tail_type: UPDATED_AT\n  base_version_id: 374208920\n  published: true\n  max_level: 0\n  last_updated_at: 2023-11-23T19:01:45.930Z\n  version_id: 374208922\n- type: DOC\n  title: LCR 140 训练计划 II (链表中倒数第 k 个节点)\n  uuid: 4gkpTMCOXa9Lm_3y\n  url: gu578y56irbrv7ba\n  prev_uuid: ''\n  sibling_uuid: D9fjaj4GAhOJB3EG\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147992663\n  level: 0\n  id: 147992663\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 1 两数之和\n  uuid: D9fjaj4GAhOJB3EG\n  url: vi0b1e\n  prev_uuid: 4gkpTMCOXa9Lm_3y\n  sibling_uuid: 0yhcscQD-WvS4GPZ\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 11416831\n  level: 0\n  id: 11416831\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 2 两数相加\n  uuid: 0yhcscQD-WvS4GPZ\n  url: ffmgi1\n  prev_uuid: D9fjaj4GAhOJB3EG\n  sibling_uuid: vFsn4Bf4Jh4U32mI\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 11416844\n  level: 0\n  id: 11416844\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 3 无重复字符的最长子串\n  uuid: vFsn4Bf4Jh4U32mI\n  url: mtz77i\n  prev_uuid: 0yhcscQD-WvS4GPZ\n  sibling_uuid: 1t7bsJe3J4tNFVZL\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 11416847\n  level: 0\n  id: 11416847\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 4 寻找两个正序数组的中位数\n  uuid: 1t7bsJe3J4tNFVZL\n  url: gva8o4geqcng2pvt\n  prev_uuid: vFsn4Bf4Jh4U32mI\n  sibling_uuid: 6TorxGBvvbeYOpXd\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147991624\n  level: 0\n  id: 147991624\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 5 最长回文子串\n  uuid: 6TorxGBvvbeYOpXd\n  url: oyeiiunxxy1q8p7r\n  prev_uuid: 1t7bsJe3J4tNFVZL\n  sibling_uuid: Q64oWkEJyWN9W6HA\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147876484\n  level: 0\n  id: 147876484\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 15 三数之和\n  uuid: Q64oWkEJyWN9W6HA\n  url: nkcuzy8lgqbobw49\n  prev_uuid: 6TorxGBvvbeYOpXd\n  sibling_uuid: ZYKfuY36K6GG3JCQ\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147451556\n  level: 0\n  id: 147451556\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 20 有效的括号\n  uuid: ZYKfuY36K6GG3JCQ\n  url: cszxgc1xg44499b7\n  prev_uuid: Q64oWkEJyWN9W6HA\n  sibling_uuid: DUB0D9AKK0likFPP\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147991949\n  level: 0\n  id: 147991949\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 21 合并两个有序链表\n  uuid: DUB0D9AKK0likFPP\n  url: dcidazawmep66kvf\n  prev_uuid: ZYKfuY36K6GG3JCQ\n  sibling_uuid: JGz8qO7-UCqfmKRQ\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147991981\n  level: 0\n  id: 147991981\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 31 下一个排列\n  uuid: JGz8qO7-UCqfmKRQ\n  url: bzdwvakyt0q7h55f\n  prev_uuid: DUB0D9AKK0likFPP\n  sibling_uuid: hJybbEKV2Okjvfrc\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147992039\n  level: 0\n  id: 147992039\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 32 最长有效括号\n  uuid: hJybbEKV2Okjvfrc\n  url: gkx2i4kcuqsp62q3\n  prev_uuid: JGz8qO7-UCqfmKRQ\n  sibling_uuid: P-POKc-Eq_5qhdtz\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147992075\n  level: 0\n  id: 147992075\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 39 组合总和\n  uuid: P-POKc-Eq_5qhdtz\n  url: gii9er6dcbq51d04\n  prev_uuid: hJybbEKV2Okjvfrc\n  sibling_uuid: HMcs-WNiT1LU5pVk\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147992119\n  level: 0\n  id: 147992119\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 42 接雨水\n  uuid: HMcs-WNiT1LU5pVk\n  url: kxktgivrkdl6wz5z\n  prev_uuid: P-POKc-Eq_5qhdtz\n  sibling_uuid: 7gA8hFWs4G74fr6W\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147992139\n  level: 0\n  id: 147992139\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 46 全排列\n  uuid: 7gA8hFWs4G74fr6W\n  url: xxua341nz98mow62\n  prev_uuid: HMcs-WNiT1LU5pVk\n  sibling_uuid: 6SInaQv7zqTeQYUG\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147992165\n  level: 0\n  id: 147992165\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 53 最大子序和\n  uuid: 6SInaQv7zqTeQYUG\n  url: wrfwwaild6gqpi22\n  prev_uuid: 7gA8hFWs4G74fr6W\n  sibling_uuid: zbwrvrvQZhDpHcKC\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147992175\n  level: 0\n  id: 147992175\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 56 合并区间\n  uuid: zbwrvrvQZhDpHcKC\n  url: xr8llnbke55x4fkg\n  prev_uuid: 6SInaQv7zqTeQYUG\n  sibling_uuid: eBOqa-7ikOmOtO9r\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147992185\n  level: 0\n  id: 147992185\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 67 二进制求和\n  uuid: eBOqa-7ikOmOtO9r\n  url: zd7gktt83m37uc1q\n  prev_uuid: zbwrvrvQZhDpHcKC\n  sibling_uuid: lDvlUWzwCFyaopLw\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147992190\n  level: 0\n  id: 147992190\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 70 爬楼梯\n  uuid: lDvlUWzwCFyaopLw\n  url: ru99qh59e3y5cia2\n  prev_uuid: eBOqa-7ikOmOtO9r\n  sibling_uuid: rrwD5FgxzKY4Gpwr\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147992201\n  level: 0\n  id: 147992201\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 88 合并两个有序数组\n  uuid: rrwD5FgxzKY4Gpwr\n  url: szusblg76edira1c\n  prev_uuid: lDvlUWzwCFyaopLw\n  sibling_uuid: 6QxpLgzCGRMJc-J6\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147992021\n  level: 0\n  id: 147992021\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 94 二叉树的中序遍历\n  uuid: 6QxpLgzCGRMJc-J6\n  url: knlpiyei2hl9rzt3\n  prev_uuid: rrwD5FgxzKY4Gpwr\n  sibling_uuid: aFtiTAdnF7CKhtgt\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147992224\n  level: 0\n  id: 147992224\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 101 对称二叉树\n  uuid: aFtiTAdnF7CKhtgt\n  url: aoxk7rmkecx7z4ge\n  prev_uuid: 6QxpLgzCGRMJc-J6\n  sibling_uuid: T603eLVmpywbRmGU\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147992241\n  level: 0\n  id: 147992241\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 102 二叉树的层序遍历\n  uuid: T603eLVmpywbRmGU\n  url: zffm0kp0s6wve8bh\n  prev_uuid: aFtiTAdnF7CKhtgt\n  sibling_uuid: jmy47wNGCp0OMDBw\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147992251\n  level: 0\n  id: 147992251\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 104 二叉树的最大深度\n  uuid: jmy47wNGCp0OMDBw\n  url: xvcbss1txad8x08f\n  prev_uuid: T603eLVmpywbRmGU\n  sibling_uuid: TbQVp_I6xpqwIknG\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147992262\n  level: 0\n  id: 147992262\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 111 二叉树的最小深度\n  uuid: TbQVp_I6xpqwIknG\n  url: gfu8qrvtcc3a60vi\n  prev_uuid: jmy47wNGCp0OMDBw\n  sibling_uuid: 84vPb9Z8OKiDHJgZ\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147992282\n  level: 0\n  id: 147992282\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 112 路径总和\n  uuid: 84vPb9Z8OKiDHJgZ\n  url: lizcps0saeod0pey\n  prev_uuid: TbQVp_I6xpqwIknG\n  sibling_uuid: gsgwoclNI27-MYBk\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147992298\n  level: 0\n  id: 147992298\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 121 买卖股票的最佳时机\n  uuid: gsgwoclNI27-MYBk\n  url: eqag967oiizb6p3i\n  prev_uuid: 84vPb9Z8OKiDHJgZ\n  sibling_uuid: KlLSis2eG5DamkCt\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147992309\n  level: 0\n  id: 147992309\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 129 求根到叶子节点数字之和\n  uuid: KlLSis2eG5DamkCt\n  url: hpwmmdrcgd8zvtmh\n  prev_uuid: gsgwoclNI27-MYBk\n  sibling_uuid: 80Okgq3-oE8vSpC4\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147992322\n  level: 0\n  id: 147992322\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 141 环型链表\n  uuid: 80Okgq3-oE8vSpC4\n  url: drdzvh5hf9g1kmak\n  prev_uuid: KlLSis2eG5DamkCt\n  sibling_uuid: 4xSu26xVAWy5Bhq5\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147992330\n  level: 0\n  id: 147992330\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 146 LRU缓存机制\n  uuid: 4xSu26xVAWy5Bhq5\n  url: pzx6s6b15eoogm9h\n  prev_uuid: 80Okgq3-oE8vSpC4\n  sibling_uuid: cgBOZtnI9VLErmqr\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147992342\n  level: 0\n  id: 147992342\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 151 反转字符串中的单词\n  uuid: cgBOZtnI9VLErmqr\n  url: fqoogl0zhx7wttrd\n  prev_uuid: 4xSu26xVAWy5Bhq5\n  sibling_uuid: 3L1GJnf7HpSxz9a5\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147751033\n  level: 0\n  id: 147751033\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 155 最小栈\n  uuid: 3L1GJnf7HpSxz9a5\n  url: ywtlc7gvif4kuckp\n  prev_uuid: cgBOZtnI9VLErmqr\n  sibling_uuid: g40aZbGc0NtScNSt\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147992376\n  level: 0\n  id: 147992376\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 160 相交链表\n  uuid: g40aZbGc0NtScNSt\n  url: dtfon507inu95297\n  prev_uuid: 3L1GJnf7HpSxz9a5\n  sibling_uuid: VY4pQ951swxUHN4N\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147992387\n  level: 0\n  id: 147992387\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 162 寻找峰值\n  uuid: VY4pQ951swxUHN4N\n  url: csbwdm6dx7o922us\n  prev_uuid: g40aZbGc0NtScNSt\n  sibling_uuid: jRFXsVO2auHn3mBK\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147718381\n  level: 0\n  id: 147718381\n  open_window: 1\n  visible: 0\n- type: DOC\n  title: 169 多数元素\n  uuid: jRFXsVO2auHn3mBK\n  url: gbwgs8281hrgu2p5\n  prev_uuid: VY4pQ951swxUHN4N\n  sibling_uuid: M-IW-4k9BYGmwE5A\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147992418\n  level: 0\n  id: 147992418\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 200 岛屿数量\n  uuid: M-IW-4k9BYGmwE5A\n  url: hhrm6w6r9fm90ugh\n  prev_uuid: jRFXsVO2auHn3mBK\n  sibling_uuid: UumAIFlOK6KlxrXu\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147992427\n  level: 0\n  id: 147992427\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 206 反转链表\n  uuid: UumAIFlOK6KlxrXu\n  url: gprthzske3qs9xdi\n  prev_uuid: M-IW-4k9BYGmwE5A\n  sibling_uuid: _ggJN2LjLAazwCEb\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147992433\n  level: 0\n  id: 147992433\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 209 长度最小的子数组\n  uuid: _ggJN2LjLAazwCEb\n  url: dsz8vf1e2w1ui24m\n  prev_uuid: UumAIFlOK6KlxrXu\n  sibling_uuid: '-D0BIBDk_G03exTI'\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147451598\n  level: 0\n  id: 147451598\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 215 数组中的第K个最大元素\n  uuid: '-D0BIBDk_G03exTI'\n  url: idavgg7e0ry9gawk\n  prev_uuid: _ggJN2LjLAazwCEb\n  sibling_uuid: LyX62bT4EPTpESlc\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147876068\n  level: 0\n  id: 147876068\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 226 翻转二叉树\n  uuid: LyX62bT4EPTpESlc\n  url: ss2ir5pkqhohctlb\n  prev_uuid: '-D0BIBDk_G03exTI'\n  sibling_uuid: ASAC50CVabAnrfR5\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147992479\n  level: 0\n  id: 147992479\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 238 除自身以外数组的乘积\n  uuid: ASAC50CVabAnrfR5\n  url: pnbw26bnt40vohxk\n  prev_uuid: LyX62bT4EPTpESlc\n  sibling_uuid: 4ajZIEKjwOjpC_Ri\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147751162\n  level: 0\n  id: 147751162\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 322 零钱兑换\n  uuid: 4ajZIEKjwOjpC_Ri\n  url: evzdsp8i9z9iz1m9\n  prev_uuid: ASAC50CVabAnrfR5\n  sibling_uuid: ybNfKJP90CNQ95up\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147992508\n  level: 0\n  id: 147992508\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 334 递增的三元子序列\n  uuid: ybNfKJP90CNQ95up\n  url: dkktq1ez0d5no8b5\n  prev_uuid: 4ajZIEKjwOjpC_Ri\n  sibling_uuid: izCSq4UA7udwUgGS\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147853149\n  level: 0\n  id: 147853149\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 345 反转字符串中的元音字母\n  uuid: izCSq4UA7udwUgGS\n  url: gqccwkdpgo04oeaf\n  prev_uuid: ybNfKJP90CNQ95up\n  sibling_uuid: 4nNqqOCjAxtgfryN\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147750802\n  level: 0\n  id: 147750802\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 415 字符串相加\n  uuid: 4nNqqOCjAxtgfryN\n  url: sw165ohocfoif7g3\n  prev_uuid: izCSq4UA7udwUgGS\n  sibling_uuid: eUwbAk5ZESHOdwCJ\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147992529\n  level: 0\n  id: 147992529\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 443 压缩字符串\n  uuid: eUwbAk5ZESHOdwCJ\n  url: xzyrc9xgzo0aiu10\n  prev_uuid: 4nNqqOCjAxtgfryN\n  sibling_uuid: 5isNHBjoZWJY0rqG\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147875594\n  level: 0\n  id: 147875594\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 509 斐波那契数\n  uuid: 5isNHBjoZWJY0rqG\n  url: vpk2fcb8bc2r1ad5\n  prev_uuid: eUwbAk5ZESHOdwCJ\n  sibling_uuid: hEHSMukKLz8LgdJ4\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147992568\n  level: 0\n  id: 147992568\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 605 种花问题\n  uuid: hEHSMukKLz8LgdJ4\n  url: gtlqi9gf62em4cr1\n  prev_uuid: 5isNHBjoZWJY0rqG\n  sibling_uuid: O8NsEdUMxID6uArM\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147745513\n  level: 0\n  id: 147745513\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 1071 字符串的最大公因子\n  uuid: O8NsEdUMxID6uArM\n  url: rd4ob184gdlope5a\n  prev_uuid: hEHSMukKLz8LgdJ4\n  sibling_uuid: cmYeCXTaXQ4HAG6S\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147740806\n  level: 0\n  id: 147740806\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 1143 最长公共子序列\n  uuid: cmYeCXTaXQ4HAG6S\n  url: kbtwmpzch9x5aqku\n  prev_uuid: O8NsEdUMxID6uArM\n  sibling_uuid: '-YscIPwThxhY7WAF'\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147718465\n  level: 0\n  id: 147718465\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 1431 拥有最多糖果的孩子\n  uuid: '-YscIPwThxhY7WAF'\n  url: dxn5xdxqh1ggc326\n  prev_uuid: cmYeCXTaXQ4HAG6S\n  sibling_uuid: 0oXS9Rh1T3xKhIW5\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147742194\n  level: 0\n  id: 147742194\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 1768 交替合并字符串\n  uuid: 0oXS9Rh1T3xKhIW5\n  url: mzu6pzt99ofgmdyg\n  prev_uuid: '-YscIPwThxhY7WAF'\n  sibling_uuid: ''\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147717947\n  level: 0\n  id: 147717947\n  open_window: 1\n  visible: 1\n",
    "creator_id": 732231,
    "public": 0,
    "items_count": 51,
    "likes_count": 0,
    "watches_count": 0,
    "content_updated_at": "2023-11-23T19:01:46.000Z",
    "created_at": "2023-11-19T17:46:55.000Z",
    "updated_at": "2023-11-23T19:01:46.000Z",
    "user": {
      "id": 732231,
      "type": "User",
      "login": "wcywxq",
      "name": "magic",
      "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/732231/1606968271774-avatar/886ad88b-d2cc-4c9e-a674-f70eb51a679c.png",
      "books_count": 21,
      "public_books_count": 0,
      "followers_count": 0,
      "following_count": 0,
      "public": 1,
      "description": null,
      "created_at": "2020-01-08T14:21:31.000Z",
      "updated_at": "2023-11-22T20:13:30.000Z",
      "work_id": "",
      "_serializer": "v2.user"
    },
    "namespace": "wcywxq/gklbh2",
    "_serializer": "v2.book"
  },
  "user": {
    "id": 732231,
    "type": "User",
    "login": "wcywxq",
    "name": "magic",
    "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/732231/1606968271774-avatar/886ad88b-d2cc-4c9e-a674-f70eb51a679c.png",
    "books_count": 21,
    "public_books_count": 0,
    "followers_count": 0,
    "following_count": 0,
    "public": 1,
    "description": null,
    "created_at": "2020-01-08T14:21:31.000Z",
    "updated_at": "2023-11-22T20:13:30.000Z",
    "work_id": "",
    "_serializer": "v2.user"
  },
  "tags": [],
  "latest_version_id": 2137270032,
  "creator": {
    "id": 732231,
    "type": "User",
    "login": "wcywxq",
    "name": "magic",
    "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/732231/1606968271774-avatar/886ad88b-d2cc-4c9e-a674-f70eb51a679c.png",
    "books_count": 21,
    "public_books_count": 0,
    "followers_count": 0,
    "following_count": 0,
    "public": 1,
    "description": null,
    "created_at": "2020-01-08T14:21:31.000Z",
    "updated_at": "2023-11-22T20:13:30.000Z",
    "work_id": "",
    "_serializer": "v2.user"
  },
  "_serializer": "v2.doc_detail"
}