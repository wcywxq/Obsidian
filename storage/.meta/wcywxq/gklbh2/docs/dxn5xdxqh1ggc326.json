{
  "id": 147742194,
  "slug": "dxn5xdxqh1ggc326",
  "title": "#1431 拥有最多糖果的孩子",
  "description": "1431. 拥有最多糖果的孩子//给你一个数组 candies 和一个整数 extraCandies ，其中 candies[i] 代表第 i 个孩子拥有的糖果数目。  // // 对每一个孩子，检查是否存在一种方案，将额外的 extraCandies 个糖果分配给孩子们之后，此孩子有 最多 ...",
  "cover": "",
  "user_id": 732231,
  "book_id": 44292824,
  "last_editor_id": 732231,
  "format": "lake",
  "body_draft": "<!doctype html><div class=\"lake-content\" typography=\"classic\"><p id=\"uf99d5310\" class=\"ne-p\"><a href=\"https://leetcode.cn/problems/kids-with-the-greatest-number-of-candies\" data-href=\"https://leetcode.cn/problems/kids-with-the-greatest-number-of-candies\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">1431. 拥有最多糖果的孩子</span></a></p><pre data-language=\"javascript\" id=\"iVgub\" class=\"ne-codeblock language-javascript\"><code>//给你一个数组 candies 和一个整数 extraCandies ，其中 candies[i] 代表第 i 个孩子拥有的糖果数目。 \n//\n// 对每一个孩子，检查是否存在一种方案，将额外的 extraCandies 个糖果分配给孩子们之后，此孩子有 最多 的糖果。注意，允许有多个孩子同时拥有 最多\n// 的糖果数目。 \n//\n// \n//\n// 示例 1： \n//\n// 输入：candies = [2,3,5,1,3], extraCandies = 3\n//输出：[true,true,true,false,true] \n//解释：\n//孩子 1 有 2 个糖果，如果他得到所有额外的糖果（3个），那么他总共有 5 个糖果，他将成为拥有最多糖果的孩子。\n//孩子 2 有 3 个糖果，如果他得到至少 2 个额外糖果，那么他将成为拥有最多糖果的孩子。\n//孩子 3 有 5 个糖果，他已经是拥有最多糖果的孩子。\n//孩子 4 有 1 个糖果，即使他得到所有额外的糖果，他也只有 4 个糖果，无法成为拥有糖果最多的孩子。\n//孩子 5 有 3 个糖果，如果他得到至少 2 个额外糖果，那么他将成为拥有最多糖果的孩子。\n// \n//\n// 示例 2： \n//\n// 输入：candies = [4,2,1,1,2], extraCandies = 1\n//输出：[true,false,false,false,false] \n//解释：只有 1 个额外糖果，所以不管额外糖果给谁，只有孩子 1 可以成为拥有糖果最多的孩子。\n// \n//\n// 示例 3： \n//\n// 输入：candies = [12,1,12], extraCandies = 10\n//输出：[true,false,true]\n// \n//\n// \n//\n// 提示： \n//\n// \n// 2 &lt;= candies.length &lt;= 100 \n// 1 &lt;= candies[i] &lt;= 100 \n// 1 &lt;= extraCandies &lt;= 50 \n// \n//\n// Related Topics 数组 👍 177 👎 0\n\n\n//leetcode submit region begin(Prohibit modification and deletion)\n/**\n * @param {number[]} candies\n * @param {number} extraCandies\n * @return {boolean[]}\n */\nvar kidsWithCandies = function (candies, extraCandies) {\n  const max = Math.max.apply([], candies)\n  let res = []\n  for (let i = 0; i &lt; candies.length; i++) {\n    let currentMax = candies[i] + extraCandies\n    res[i] = currentMax &gt;= max\n  }\n  return res\n};\n//leetcode submit region end(Prohibit modification and deletion)\n</code></pre></div>",
  "body": "[1431. 拥有最多糖果的孩子](https://leetcode.cn/problems/kids-with-the-greatest-number-of-candies)\n```javascript\n//给你一个数组 candies 和一个整数 extraCandies ，其中 candies[i] 代表第 i 个孩子拥有的糖果数目。 \n//\n// 对每一个孩子，检查是否存在一种方案，将额外的 extraCandies 个糖果分配给孩子们之后，此孩子有 最多 的糖果。注意，允许有多个孩子同时拥有 最多\n// 的糖果数目。 \n//\n// \n//\n// 示例 1： \n//\n// 输入：candies = [2,3,5,1,3], extraCandies = 3\n//输出：[true,true,true,false,true] \n//解释：\n//孩子 1 有 2 个糖果，如果他得到所有额外的糖果（3个），那么他总共有 5 个糖果，他将成为拥有最多糖果的孩子。\n//孩子 2 有 3 个糖果，如果他得到至少 2 个额外糖果，那么他将成为拥有最多糖果的孩子。\n//孩子 3 有 5 个糖果，他已经是拥有最多糖果的孩子。\n//孩子 4 有 1 个糖果，即使他得到所有额外的糖果，他也只有 4 个糖果，无法成为拥有糖果最多的孩子。\n//孩子 5 有 3 个糖果，如果他得到至少 2 个额外糖果，那么他将成为拥有最多糖果的孩子。\n// \n//\n// 示例 2： \n//\n// 输入：candies = [4,2,1,1,2], extraCandies = 1\n//输出：[true,false,false,false,false] \n//解释：只有 1 个额外糖果，所以不管额外糖果给谁，只有孩子 1 可以成为拥有糖果最多的孩子。\n// \n//\n// 示例 3： \n//\n// 输入：candies = [12,1,12], extraCandies = 10\n//输出：[true,false,true]\n// \n//\n// \n//\n// 提示： \n//\n// \n// 2 <= candies.length <= 100 \n// 1 <= candies[i] <= 100 \n// 1 <= extraCandies <= 50 \n// \n//\n// Related Topics 数组 👍 177 👎 0\n\n\n//leetcode submit region begin(Prohibit modification and deletion)\n/**\n * @param {number[]} candies\n * @param {number} extraCandies\n * @return {boolean[]}\n */\nvar kidsWithCandies = function (candies, extraCandies) {\n  const max = Math.max.apply([], candies)\n  let res = []\n  for (let i = 0; i < candies.length; i++) {\n    let currentMax = candies[i] + extraCandies\n    res[i] = currentMax >= max\n  }\n  return res\n};\n//leetcode submit region end(Prohibit modification and deletion)\n\n```\n",
  "body_html": "<!doctype html><div class=\"lake-content\" typography=\"classic\"><p id=\"uf99d5310\" class=\"ne-p\"><a href=\"https://leetcode.cn/problems/kids-with-the-greatest-number-of-candies\" data-href=\"https://leetcode.cn/problems/kids-with-the-greatest-number-of-candies\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">1431. 拥有最多糖果的孩子</span></a></p><pre data-language=\"javascript\" id=\"iVgub\" class=\"ne-codeblock language-javascript\"><code>//给你一个数组 candies 和一个整数 extraCandies ，其中 candies[i] 代表第 i 个孩子拥有的糖果数目。 \n//\n// 对每一个孩子，检查是否存在一种方案，将额外的 extraCandies 个糖果分配给孩子们之后，此孩子有 最多 的糖果。注意，允许有多个孩子同时拥有 最多\n// 的糖果数目。 \n//\n// \n//\n// 示例 1： \n//\n// 输入：candies = [2,3,5,1,3], extraCandies = 3\n//输出：[true,true,true,false,true] \n//解释：\n//孩子 1 有 2 个糖果，如果他得到所有额外的糖果（3个），那么他总共有 5 个糖果，他将成为拥有最多糖果的孩子。\n//孩子 2 有 3 个糖果，如果他得到至少 2 个额外糖果，那么他将成为拥有最多糖果的孩子。\n//孩子 3 有 5 个糖果，他已经是拥有最多糖果的孩子。\n//孩子 4 有 1 个糖果，即使他得到所有额外的糖果，他也只有 4 个糖果，无法成为拥有糖果最多的孩子。\n//孩子 5 有 3 个糖果，如果他得到至少 2 个额外糖果，那么他将成为拥有最多糖果的孩子。\n// \n//\n// 示例 2： \n//\n// 输入：candies = [4,2,1,1,2], extraCandies = 1\n//输出：[true,false,false,false,false] \n//解释：只有 1 个额外糖果，所以不管额外糖果给谁，只有孩子 1 可以成为拥有糖果最多的孩子。\n// \n//\n// 示例 3： \n//\n// 输入：candies = [12,1,12], extraCandies = 10\n//输出：[true,false,true]\n// \n//\n// \n//\n// 提示： \n//\n// \n// 2 &lt;= candies.length &lt;= 100 \n// 1 &lt;= candies[i] &lt;= 100 \n// 1 &lt;= extraCandies &lt;= 50 \n// \n//\n// Related Topics 数组 👍 177 👎 0\n\n\n//leetcode submit region begin(Prohibit modification and deletion)\n/**\n * @param {number[]} candies\n * @param {number} extraCandies\n * @return {boolean[]}\n */\nvar kidsWithCandies = function (candies, extraCandies) {\n  const max = Math.max.apply([], candies)\n  let res = []\n  for (let i = 0; i &lt; candies.length; i++) {\n    let currentMax = candies[i] + extraCandies\n    res[i] = currentMax &gt;= max\n  }\n  return res\n};\n//leetcode submit region end(Prohibit modification and deletion)\n</code></pre></div>",
  "body_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"viewport\" content=\"adapt\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"paragraphSpacing\" content=\"relax\" /><p data-lake-id=\"uf99d5310\" id=\"uf99d5310\"><a href=\"https://leetcode.cn/problems/kids-with-the-greatest-number-of-candies\" target=\"_blank\" data-lake-id=\"ue42b3b13\" id=\"ue42b3b13\"><span data-lake-id=\"uc536ae02\" id=\"uc536ae02\">1431. 拥有最多糖果的孩子</span></a></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%E7%BB%99%E4%BD%A0%E4%B8%80%E4%B8%AA%E6%95%B0%E7%BB%84%20candies%20%E5%92%8C%E4%B8%80%E4%B8%AA%E6%95%B4%E6%95%B0%20extraCandies%20%EF%BC%8C%E5%85%B6%E4%B8%AD%20candies%5Bi%5D%20%E4%BB%A3%E8%A1%A8%E7%AC%AC%20i%20%E4%B8%AA%E5%AD%A9%E5%AD%90%E6%8B%A5%E6%9C%89%E7%9A%84%E7%B3%96%E6%9E%9C%E6%95%B0%E7%9B%AE%E3%80%82%20%5Cn%2F%2F%5Cn%2F%2F%20%E5%AF%B9%E6%AF%8F%E4%B8%80%E4%B8%AA%E5%AD%A9%E5%AD%90%EF%BC%8C%E6%A3%80%E6%9F%A5%E6%98%AF%E5%90%A6%E5%AD%98%E5%9C%A8%E4%B8%80%E7%A7%8D%E6%96%B9%E6%A1%88%EF%BC%8C%E5%B0%86%E9%A2%9D%E5%A4%96%E7%9A%84%20extraCandies%20%E4%B8%AA%E7%B3%96%E6%9E%9C%E5%88%86%E9%85%8D%E7%BB%99%E5%AD%A9%E5%AD%90%E4%BB%AC%E4%B9%8B%E5%90%8E%EF%BC%8C%E6%AD%A4%E5%AD%A9%E5%AD%90%E6%9C%89%20%E6%9C%80%E5%A4%9A%20%E7%9A%84%E7%B3%96%E6%9E%9C%E3%80%82%E6%B3%A8%E6%84%8F%EF%BC%8C%E5%85%81%E8%AE%B8%E6%9C%89%E5%A4%9A%E4%B8%AA%E5%AD%A9%E5%AD%90%E5%90%8C%E6%97%B6%E6%8B%A5%E6%9C%89%20%E6%9C%80%E5%A4%9A%5Cn%2F%2F%20%E7%9A%84%E7%B3%96%E6%9E%9C%E6%95%B0%E7%9B%AE%E3%80%82%20%5Cn%2F%2F%5Cn%2F%2F%20%5Cn%2F%2F%5Cn%2F%2F%20%E7%A4%BA%E4%BE%8B%201%EF%BC%9A%20%5Cn%2F%2F%5Cn%2F%2F%20%E8%BE%93%E5%85%A5%EF%BC%9Acandies%20%3D%20%5B2%2C3%2C5%2C1%2C3%5D%2C%20extraCandies%20%3D%203%5Cn%2F%2F%E8%BE%93%E5%87%BA%EF%BC%9A%5Btrue%2Ctrue%2Ctrue%2Cfalse%2Ctrue%5D%20%5Cn%2F%2F%E8%A7%A3%E9%87%8A%EF%BC%9A%5Cn%2F%2F%E5%AD%A9%E5%AD%90%201%20%E6%9C%89%202%20%E4%B8%AA%E7%B3%96%E6%9E%9C%EF%BC%8C%E5%A6%82%E6%9E%9C%E4%BB%96%E5%BE%97%E5%88%B0%E6%89%80%E6%9C%89%E9%A2%9D%E5%A4%96%E7%9A%84%E7%B3%96%E6%9E%9C%EF%BC%883%E4%B8%AA%EF%BC%89%EF%BC%8C%E9%82%A3%E4%B9%88%E4%BB%96%E6%80%BB%E5%85%B1%E6%9C%89%205%20%E4%B8%AA%E7%B3%96%E6%9E%9C%EF%BC%8C%E4%BB%96%E5%B0%86%E6%88%90%E4%B8%BA%E6%8B%A5%E6%9C%89%E6%9C%80%E5%A4%9A%E7%B3%96%E6%9E%9C%E7%9A%84%E5%AD%A9%E5%AD%90%E3%80%82%5Cn%2F%2F%E5%AD%A9%E5%AD%90%202%20%E6%9C%89%203%20%E4%B8%AA%E7%B3%96%E6%9E%9C%EF%BC%8C%E5%A6%82%E6%9E%9C%E4%BB%96%E5%BE%97%E5%88%B0%E8%87%B3%E5%B0%91%202%20%E4%B8%AA%E9%A2%9D%E5%A4%96%E7%B3%96%E6%9E%9C%EF%BC%8C%E9%82%A3%E4%B9%88%E4%BB%96%E5%B0%86%E6%88%90%E4%B8%BA%E6%8B%A5%E6%9C%89%E6%9C%80%E5%A4%9A%E7%B3%96%E6%9E%9C%E7%9A%84%E5%AD%A9%E5%AD%90%E3%80%82%5Cn%2F%2F%E5%AD%A9%E5%AD%90%203%20%E6%9C%89%205%20%E4%B8%AA%E7%B3%96%E6%9E%9C%EF%BC%8C%E4%BB%96%E5%B7%B2%E7%BB%8F%E6%98%AF%E6%8B%A5%E6%9C%89%E6%9C%80%E5%A4%9A%E7%B3%96%E6%9E%9C%E7%9A%84%E5%AD%A9%E5%AD%90%E3%80%82%5Cn%2F%2F%E5%AD%A9%E5%AD%90%204%20%E6%9C%89%201%20%E4%B8%AA%E7%B3%96%E6%9E%9C%EF%BC%8C%E5%8D%B3%E4%BD%BF%E4%BB%96%E5%BE%97%E5%88%B0%E6%89%80%E6%9C%89%E9%A2%9D%E5%A4%96%E7%9A%84%E7%B3%96%E6%9E%9C%EF%BC%8C%E4%BB%96%E4%B9%9F%E5%8F%AA%E6%9C%89%204%20%E4%B8%AA%E7%B3%96%E6%9E%9C%EF%BC%8C%E6%97%A0%E6%B3%95%E6%88%90%E4%B8%BA%E6%8B%A5%E6%9C%89%E7%B3%96%E6%9E%9C%E6%9C%80%E5%A4%9A%E7%9A%84%E5%AD%A9%E5%AD%90%E3%80%82%5Cn%2F%2F%E5%AD%A9%E5%AD%90%205%20%E6%9C%89%203%20%E4%B8%AA%E7%B3%96%E6%9E%9C%EF%BC%8C%E5%A6%82%E6%9E%9C%E4%BB%96%E5%BE%97%E5%88%B0%E8%87%B3%E5%B0%91%202%20%E4%B8%AA%E9%A2%9D%E5%A4%96%E7%B3%96%E6%9E%9C%EF%BC%8C%E9%82%A3%E4%B9%88%E4%BB%96%E5%B0%86%E6%88%90%E4%B8%BA%E6%8B%A5%E6%9C%89%E6%9C%80%E5%A4%9A%E7%B3%96%E6%9E%9C%E7%9A%84%E5%AD%A9%E5%AD%90%E3%80%82%5Cn%2F%2F%20%5Cn%2F%2F%5Cn%2F%2F%20%E7%A4%BA%E4%BE%8B%202%EF%BC%9A%20%5Cn%2F%2F%5Cn%2F%2F%20%E8%BE%93%E5%85%A5%EF%BC%9Acandies%20%3D%20%5B4%2C2%2C1%2C1%2C2%5D%2C%20extraCandies%20%3D%201%5Cn%2F%2F%E8%BE%93%E5%87%BA%EF%BC%9A%5Btrue%2Cfalse%2Cfalse%2Cfalse%2Cfalse%5D%20%5Cn%2F%2F%E8%A7%A3%E9%87%8A%EF%BC%9A%E5%8F%AA%E6%9C%89%201%20%E4%B8%AA%E9%A2%9D%E5%A4%96%E7%B3%96%E6%9E%9C%EF%BC%8C%E6%89%80%E4%BB%A5%E4%B8%8D%E7%AE%A1%E9%A2%9D%E5%A4%96%E7%B3%96%E6%9E%9C%E7%BB%99%E8%B0%81%EF%BC%8C%E5%8F%AA%E6%9C%89%E5%AD%A9%E5%AD%90%201%20%E5%8F%AF%E4%BB%A5%E6%88%90%E4%B8%BA%E6%8B%A5%E6%9C%89%E7%B3%96%E6%9E%9C%E6%9C%80%E5%A4%9A%E7%9A%84%E5%AD%A9%E5%AD%90%E3%80%82%5Cn%2F%2F%20%5Cn%2F%2F%5Cn%2F%2F%20%E7%A4%BA%E4%BE%8B%203%EF%BC%9A%20%5Cn%2F%2F%5Cn%2F%2F%20%E8%BE%93%E5%85%A5%EF%BC%9Acandies%20%3D%20%5B12%2C1%2C12%5D%2C%20extraCandies%20%3D%2010%5Cn%2F%2F%E8%BE%93%E5%87%BA%EF%BC%9A%5Btrue%2Cfalse%2Ctrue%5D%5Cn%2F%2F%20%5Cn%2F%2F%5Cn%2F%2F%20%5Cn%2F%2F%5Cn%2F%2F%20%E6%8F%90%E7%A4%BA%EF%BC%9A%20%5Cn%2F%2F%5Cn%2F%2F%20%5Cn%2F%2F%202%20%3C%3D%20candies.length%20%3C%3D%20100%20%5Cn%2F%2F%201%20%3C%3D%20candies%5Bi%5D%20%3C%3D%20100%20%5Cn%2F%2F%201%20%3C%3D%20extraCandies%20%3C%3D%2050%20%5Cn%2F%2F%20%5Cn%2F%2F%5Cn%2F%2F%20Related%20Topics%20%E6%95%B0%E7%BB%84%20%F0%9F%91%8D%20177%20%F0%9F%91%8E%200%5Cn%5Cn%5Cn%2F%2Fleetcode%20submit%20region%20begin(Prohibit%20modification%20and%20deletion)%5Cn%2F**%5Cn%20*%20%40param%20%7Bnumber%5B%5D%7D%20candies%5Cn%20*%20%40param%20%7Bnumber%7D%20extraCandies%5Cn%20*%20%40return%20%7Bboolean%5B%5D%7D%5Cn%20*%2F%5Cnvar%20kidsWithCandies%20%3D%20function%20(candies%2C%20extraCandies)%20%7B%5Cn%20%20const%20max%20%3D%20Math.max.apply(%5B%5D%2C%20candies)%5Cn%20%20let%20res%20%3D%20%5B%5D%5Cn%20%20for%20(let%20i%20%3D%200%3B%20i%20%3C%20candies.length%3B%20i%2B%2B)%20%7B%5Cn%20%20%20%20let%20currentMax%20%3D%20candies%5Bi%5D%20%2B%20extraCandies%5Cn%20%20%20%20res%5Bi%5D%20%3D%20currentMax%20%3E%3D%20max%5Cn%20%20%7D%5Cn%20%20return%20res%5Cn%7D%3B%5Cn%2F%2Fleetcode%20submit%20region%20end(Prohibit%20modification%20and%20deletion)%5Cn%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Bracket%20Lights%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22iVgub%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card>",
  "public": 0,
  "status": 1,
  "likes_count": 0,
  "read_count": 0,
  "hits": 0,
  "comments_count": 0,
  "word_count": 539,
  "created_at": "2023-11-21T14:39:22.000Z",
  "updated_at": "2023-11-23T16:40:44.000Z",
  "content_updated_at": "2023-11-23T16:40:44.000Z",
  "published_at": "2023-11-23T16:40:44.000Z",
  "first_published_at": "2023-11-21T14:39:30.073Z",
  "book": {
    "id": 44292824,
    "type": "Book",
    "slug": "gklbh2",
    "name": "Leetcode",
    "user_id": 732231,
    "description": "",
    "toc_yml": "- type: META\n  count: 51\n  display_level: 1\n  tail_type: UPDATED_AT\n  base_version_id: 374207114\n  published: true\n  max_level: 0\n  last_updated_at: 2023-11-23T17:54:34.576Z\n  version_id: 374207260\n- type: DOC\n  title: LCR 140 训练计划 II (链表中倒数第 k 个节点)\n  uuid: 4gkpTMCOXa9Lm_3y\n  url: gu578y56irbrv7ba\n  prev_uuid: ''\n  sibling_uuid: D9fjaj4GAhOJB3EG\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147992663\n  level: 0\n  id: 147992663\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: '#1 两数之和'\n  uuid: D9fjaj4GAhOJB3EG\n  url: vi0b1e\n  prev_uuid: 4gkpTMCOXa9Lm_3y\n  sibling_uuid: 0yhcscQD-WvS4GPZ\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 11416831\n  level: 0\n  id: 11416831\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: '#2 两数相加'\n  uuid: 0yhcscQD-WvS4GPZ\n  url: ffmgi1\n  prev_uuid: D9fjaj4GAhOJB3EG\n  sibling_uuid: vFsn4Bf4Jh4U32mI\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 11416844\n  level: 0\n  id: 11416844\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: '#3 无重复字符的最长子串'\n  uuid: vFsn4Bf4Jh4U32mI\n  url: mtz77i\n  prev_uuid: 0yhcscQD-WvS4GPZ\n  sibling_uuid: 1t7bsJe3J4tNFVZL\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 11416847\n  level: 0\n  id: 11416847\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: '#4 寻找两个正序数组的中位数'\n  uuid: 1t7bsJe3J4tNFVZL\n  url: gva8o4geqcng2pvt\n  prev_uuid: vFsn4Bf4Jh4U32mI\n  sibling_uuid: 6TorxGBvvbeYOpXd\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147991624\n  level: 0\n  id: 147991624\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: '#5 最长回文子串'\n  uuid: 6TorxGBvvbeYOpXd\n  url: oyeiiunxxy1q8p7r\n  prev_uuid: 1t7bsJe3J4tNFVZL\n  sibling_uuid: Q64oWkEJyWN9W6HA\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147876484\n  level: 0\n  id: 147876484\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: '#15 三数之和'\n  uuid: Q64oWkEJyWN9W6HA\n  url: nkcuzy8lgqbobw49\n  prev_uuid: 6TorxGBvvbeYOpXd\n  sibling_uuid: ZYKfuY36K6GG3JCQ\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147451556\n  level: 0\n  id: 147451556\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: '#20 有效的括号'\n  uuid: ZYKfuY36K6GG3JCQ\n  url: cszxgc1xg44499b7\n  prev_uuid: Q64oWkEJyWN9W6HA\n  sibling_uuid: DUB0D9AKK0likFPP\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147991949\n  level: 0\n  id: 147991949\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: '#21 合并两个有序链表'\n  uuid: DUB0D9AKK0likFPP\n  url: dcidazawmep66kvf\n  prev_uuid: ZYKfuY36K6GG3JCQ\n  sibling_uuid: JGz8qO7-UCqfmKRQ\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147991981\n  level: 0\n  id: 147991981\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: '#31 下一个排列'\n  uuid: JGz8qO7-UCqfmKRQ\n  url: bzdwvakyt0q7h55f\n  prev_uuid: DUB0D9AKK0likFPP\n  sibling_uuid: hJybbEKV2Okjvfrc\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147992039\n  level: 0\n  id: 147992039\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: '#32 最长有效括号'\n  uuid: hJybbEKV2Okjvfrc\n  url: gkx2i4kcuqsp62q3\n  prev_uuid: JGz8qO7-UCqfmKRQ\n  sibling_uuid: P-POKc-Eq_5qhdtz\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147992075\n  level: 0\n  id: 147992075\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: '#39 组合总和'\n  uuid: P-POKc-Eq_5qhdtz\n  url: gii9er6dcbq51d04\n  prev_uuid: hJybbEKV2Okjvfrc\n  sibling_uuid: HMcs-WNiT1LU5pVk\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147992119\n  level: 0\n  id: 147992119\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: '#42 接雨水'\n  uuid: HMcs-WNiT1LU5pVk\n  url: kxktgivrkdl6wz5z\n  prev_uuid: P-POKc-Eq_5qhdtz\n  sibling_uuid: 7gA8hFWs4G74fr6W\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147992139\n  level: 0\n  id: 147992139\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: '#46 全排列'\n  uuid: 7gA8hFWs4G74fr6W\n  url: xxua341nz98mow62\n  prev_uuid: HMcs-WNiT1LU5pVk\n  sibling_uuid: 6SInaQv7zqTeQYUG\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147992165\n  level: 0\n  id: 147992165\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: '#53 最大子序和'\n  uuid: 6SInaQv7zqTeQYUG\n  url: wrfwwaild6gqpi22\n  prev_uuid: 7gA8hFWs4G74fr6W\n  sibling_uuid: zbwrvrvQZhDpHcKC\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147992175\n  level: 0\n  id: 147992175\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: '#56 合并区间'\n  uuid: zbwrvrvQZhDpHcKC\n  url: xr8llnbke55x4fkg\n  prev_uuid: 6SInaQv7zqTeQYUG\n  sibling_uuid: eBOqa-7ikOmOtO9r\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147992185\n  level: 0\n  id: 147992185\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: '#67 二进制求和'\n  uuid: eBOqa-7ikOmOtO9r\n  url: zd7gktt83m37uc1q\n  prev_uuid: zbwrvrvQZhDpHcKC\n  sibling_uuid: lDvlUWzwCFyaopLw\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147992190\n  level: 0\n  id: 147992190\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: '#70 爬楼梯'\n  uuid: lDvlUWzwCFyaopLw\n  url: ru99qh59e3y5cia2\n  prev_uuid: eBOqa-7ikOmOtO9r\n  sibling_uuid: rrwD5FgxzKY4Gpwr\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147992201\n  level: 0\n  id: 147992201\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: '#88 合并两个有序数组'\n  uuid: rrwD5FgxzKY4Gpwr\n  url: szusblg76edira1c\n  prev_uuid: lDvlUWzwCFyaopLw\n  sibling_uuid: 6QxpLgzCGRMJc-J6\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147992021\n  level: 0\n  id: 147992021\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: '#94 二叉树的中序遍历'\n  uuid: 6QxpLgzCGRMJc-J6\n  url: knlpiyei2hl9rzt3\n  prev_uuid: rrwD5FgxzKY4Gpwr\n  sibling_uuid: aFtiTAdnF7CKhtgt\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147992224\n  level: 0\n  id: 147992224\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: '#101 对称二叉树'\n  uuid: aFtiTAdnF7CKhtgt\n  url: aoxk7rmkecx7z4ge\n  prev_uuid: 6QxpLgzCGRMJc-J6\n  sibling_uuid: T603eLVmpywbRmGU\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147992241\n  level: 0\n  id: 147992241\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: '#102 二叉树的层序遍历'\n  uuid: T603eLVmpywbRmGU\n  url: zffm0kp0s6wve8bh\n  prev_uuid: aFtiTAdnF7CKhtgt\n  sibling_uuid: jmy47wNGCp0OMDBw\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147992251\n  level: 0\n  id: 147992251\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: '#104 二叉树的最大深度'\n  uuid: jmy47wNGCp0OMDBw\n  url: xvcbss1txad8x08f\n  prev_uuid: T603eLVmpywbRmGU\n  sibling_uuid: TbQVp_I6xpqwIknG\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147992262\n  level: 0\n  id: 147992262\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: '#111 二叉树的最小深度'\n  uuid: TbQVp_I6xpqwIknG\n  url: gfu8qrvtcc3a60vi\n  prev_uuid: jmy47wNGCp0OMDBw\n  sibling_uuid: 84vPb9Z8OKiDHJgZ\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147992282\n  level: 0\n  id: 147992282\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: '#112 路径总和'\n  uuid: 84vPb9Z8OKiDHJgZ\n  url: lizcps0saeod0pey\n  prev_uuid: TbQVp_I6xpqwIknG\n  sibling_uuid: gsgwoclNI27-MYBk\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147992298\n  level: 0\n  id: 147992298\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: '#121 买卖股票的最佳时机'\n  uuid: gsgwoclNI27-MYBk\n  url: eqag967oiizb6p3i\n  prev_uuid: 84vPb9Z8OKiDHJgZ\n  sibling_uuid: KlLSis2eG5DamkCt\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147992309\n  level: 0\n  id: 147992309\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: '#129 求根到叶子节点数字之和'\n  uuid: KlLSis2eG5DamkCt\n  url: hpwmmdrcgd8zvtmh\n  prev_uuid: gsgwoclNI27-MYBk\n  sibling_uuid: 80Okgq3-oE8vSpC4\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147992322\n  level: 0\n  id: 147992322\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: '#141 环型链表'\n  uuid: 80Okgq3-oE8vSpC4\n  url: drdzvh5hf9g1kmak\n  prev_uuid: KlLSis2eG5DamkCt\n  sibling_uuid: 4xSu26xVAWy5Bhq5\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147992330\n  level: 0\n  id: 147992330\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: '#146 LRU缓存机制'\n  uuid: 4xSu26xVAWy5Bhq5\n  url: pzx6s6b15eoogm9h\n  prev_uuid: 80Okgq3-oE8vSpC4\n  sibling_uuid: cgBOZtnI9VLErmqr\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147992342\n  level: 0\n  id: 147992342\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: '#151 反转字符串中的单词'\n  uuid: cgBOZtnI9VLErmqr\n  url: fqoogl0zhx7wttrd\n  prev_uuid: 4xSu26xVAWy5Bhq5\n  sibling_uuid: 3L1GJnf7HpSxz9a5\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147751033\n  level: 0\n  id: 147751033\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: '#155 最小栈'\n  uuid: 3L1GJnf7HpSxz9a5\n  url: ywtlc7gvif4kuckp\n  prev_uuid: cgBOZtnI9VLErmqr\n  sibling_uuid: g40aZbGc0NtScNSt\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147992376\n  level: 0\n  id: 147992376\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: '#160 相交链表'\n  uuid: g40aZbGc0NtScNSt\n  url: dtfon507inu95297\n  prev_uuid: 3L1GJnf7HpSxz9a5\n  sibling_uuid: VY4pQ951swxUHN4N\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147992387\n  level: 0\n  id: 147992387\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: '#162 寻找峰值'\n  uuid: VY4pQ951swxUHN4N\n  url: csbwdm6dx7o922us\n  prev_uuid: g40aZbGc0NtScNSt\n  sibling_uuid: jRFXsVO2auHn3mBK\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147718381\n  level: 0\n  id: 147718381\n  open_window: 1\n  visible: 0\n- type: DOC\n  title: '#169 多数元素'\n  uuid: jRFXsVO2auHn3mBK\n  url: gbwgs8281hrgu2p5\n  prev_uuid: VY4pQ951swxUHN4N\n  sibling_uuid: M-IW-4k9BYGmwE5A\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147992418\n  level: 0\n  id: 147992418\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: '#200 岛屿数量'\n  uuid: M-IW-4k9BYGmwE5A\n  url: hhrm6w6r9fm90ugh\n  prev_uuid: jRFXsVO2auHn3mBK\n  sibling_uuid: UumAIFlOK6KlxrXu\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147992427\n  level: 0\n  id: 147992427\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: '#206 反转链表'\n  uuid: UumAIFlOK6KlxrXu\n  url: gprthzske3qs9xdi\n  prev_uuid: M-IW-4k9BYGmwE5A\n  sibling_uuid: _ggJN2LjLAazwCEb\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147992433\n  level: 0\n  id: 147992433\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: '#209 长度最小的子数组'\n  uuid: _ggJN2LjLAazwCEb\n  url: dsz8vf1e2w1ui24m\n  prev_uuid: UumAIFlOK6KlxrXu\n  sibling_uuid: '-D0BIBDk_G03exTI'\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147451598\n  level: 0\n  id: 147451598\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: '#215 数组中的第K个最大元素'\n  uuid: '-D0BIBDk_G03exTI'\n  url: idavgg7e0ry9gawk\n  prev_uuid: _ggJN2LjLAazwCEb\n  sibling_uuid: LyX62bT4EPTpESlc\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147876068\n  level: 0\n  id: 147876068\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: '#226 翻转二叉树'\n  uuid: LyX62bT4EPTpESlc\n  url: ss2ir5pkqhohctlb\n  prev_uuid: '-D0BIBDk_G03exTI'\n  sibling_uuid: ASAC50CVabAnrfR5\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147992479\n  level: 0\n  id: 147992479\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: '#238 除自身以外数组的乘积'\n  uuid: ASAC50CVabAnrfR5\n  url: pnbw26bnt40vohxk\n  prev_uuid: LyX62bT4EPTpESlc\n  sibling_uuid: 4ajZIEKjwOjpC_Ri\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147751162\n  level: 0\n  id: 147751162\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: '#322 零钱兑换'\n  uuid: 4ajZIEKjwOjpC_Ri\n  url: evzdsp8i9z9iz1m9\n  prev_uuid: ASAC50CVabAnrfR5\n  sibling_uuid: ybNfKJP90CNQ95up\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147992508\n  level: 0\n  id: 147992508\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: '#334 递增的三元子序列'\n  uuid: ybNfKJP90CNQ95up\n  url: dkktq1ez0d5no8b5\n  prev_uuid: 4ajZIEKjwOjpC_Ri\n  sibling_uuid: izCSq4UA7udwUgGS\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147853149\n  level: 0\n  id: 147853149\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: '#345 反转字符串中的元音字母'\n  uuid: izCSq4UA7udwUgGS\n  url: gqccwkdpgo04oeaf\n  prev_uuid: ybNfKJP90CNQ95up\n  sibling_uuid: 4nNqqOCjAxtgfryN\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147750802\n  level: 0\n  id: 147750802\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: '#415 字符串相加'\n  uuid: 4nNqqOCjAxtgfryN\n  url: sw165ohocfoif7g3\n  prev_uuid: izCSq4UA7udwUgGS\n  sibling_uuid: eUwbAk5ZESHOdwCJ\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147992529\n  level: 0\n  id: 147992529\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: '#443 压缩字符串'\n  uuid: eUwbAk5ZESHOdwCJ\n  url: xzyrc9xgzo0aiu10\n  prev_uuid: 4nNqqOCjAxtgfryN\n  sibling_uuid: 5isNHBjoZWJY0rqG\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147875594\n  level: 0\n  id: 147875594\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: '#509 斐波那契数'\n  uuid: 5isNHBjoZWJY0rqG\n  url: vpk2fcb8bc2r1ad5\n  prev_uuid: eUwbAk5ZESHOdwCJ\n  sibling_uuid: hEHSMukKLz8LgdJ4\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147992568\n  level: 0\n  id: 147992568\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: '#605 种花问题'\n  uuid: hEHSMukKLz8LgdJ4\n  url: gtlqi9gf62em4cr1\n  prev_uuid: 5isNHBjoZWJY0rqG\n  sibling_uuid: O8NsEdUMxID6uArM\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147745513\n  level: 0\n  id: 147745513\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: '#1071 字符串的最大公因子'\n  uuid: O8NsEdUMxID6uArM\n  url: rd4ob184gdlope5a\n  prev_uuid: hEHSMukKLz8LgdJ4\n  sibling_uuid: cmYeCXTaXQ4HAG6S\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147740806\n  level: 0\n  id: 147740806\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: '#1143 最长公共子序列'\n  uuid: cmYeCXTaXQ4HAG6S\n  url: kbtwmpzch9x5aqku\n  prev_uuid: O8NsEdUMxID6uArM\n  sibling_uuid: '-YscIPwThxhY7WAF'\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147718465\n  level: 0\n  id: 147718465\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: '#1431 拥有最多糖果的孩子'\n  uuid: '-YscIPwThxhY7WAF'\n  url: dxn5xdxqh1ggc326\n  prev_uuid: cmYeCXTaXQ4HAG6S\n  sibling_uuid: 0oXS9Rh1T3xKhIW5\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147742194\n  level: 0\n  id: 147742194\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: '#1768 交替合并字符串'\n  uuid: 0oXS9Rh1T3xKhIW5\n  url: mzu6pzt99ofgmdyg\n  prev_uuid: '-YscIPwThxhY7WAF'\n  sibling_uuid: ''\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147717947\n  level: 0\n  id: 147717947\n  open_window: 1\n  visible: 1\n",
    "creator_id": 732231,
    "public": 0,
    "items_count": 51,
    "likes_count": 0,
    "watches_count": 0,
    "content_updated_at": "2023-11-23T18:21:19.834Z",
    "created_at": "2023-11-19T17:46:55.000Z",
    "updated_at": "2023-11-23T18:21:20.000Z",
    "user": {
      "id": 732231,
      "type": "User",
      "login": "wcywxq",
      "name": "magic",
      "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/732231/1606968271774-avatar/886ad88b-d2cc-4c9e-a674-f70eb51a679c.png",
      "books_count": 21,
      "public_books_count": 0,
      "followers_count": 0,
      "following_count": 0,
      "public": 1,
      "description": null,
      "created_at": "2020-01-08T14:21:31.000Z",
      "updated_at": "2023-11-22T20:13:30.000Z",
      "work_id": "",
      "_serializer": "v2.user"
    },
    "namespace": "wcywxq/gklbh2",
    "_serializer": "v2.book"
  },
  "user": {
    "id": 732231,
    "type": "User",
    "login": "wcywxq",
    "name": "magic",
    "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/732231/1606968271774-avatar/886ad88b-d2cc-4c9e-a674-f70eb51a679c.png",
    "books_count": 21,
    "public_books_count": 0,
    "followers_count": 0,
    "following_count": 0,
    "public": 1,
    "description": null,
    "created_at": "2020-01-08T14:21:31.000Z",
    "updated_at": "2023-11-22T20:13:30.000Z",
    "work_id": "",
    "_serializer": "v2.user"
  },
  "tags": [],
  "latest_version_id": 2137269130,
  "creator": {
    "id": 732231,
    "type": "User",
    "login": "wcywxq",
    "name": "magic",
    "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/732231/1606968271774-avatar/886ad88b-d2cc-4c9e-a674-f70eb51a679c.png",
    "books_count": 21,
    "public_books_count": 0,
    "followers_count": 0,
    "following_count": 0,
    "public": 1,
    "description": null,
    "created_at": "2020-01-08T14:21:31.000Z",
    "updated_at": "2023-11-22T20:13:30.000Z",
    "work_id": "",
    "_serializer": "v2.user"
  },
  "_serializer": "v2.doc_detail"
}