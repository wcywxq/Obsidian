{
  "id": 147751162,
  "slug": "pnbw26bnt40vohxk",
  "title": "238 除自身以外数组的乘积",
  "description": "238. 除自身以外数组的乘积题目描述//给你一个整数数组 nums，返回 数组 answer ，其中 answer[i] 等于 nums 中除 nums[i] 之外其余各元素的乘积 。  // // 题目数据 保证 数组 nums之中任意元素的全部前缀元素和后缀的乘积都在 32 位 整数范围...",
  "cover": "",
  "user_id": 732231,
  "book_id": 44292824,
  "last_editor_id": 732231,
  "format": "lake",
  "body_draft": "<!doctype html><div class=\"lake-content\" typography=\"classic\"><p id=\"u982b95e3\" class=\"ne-p\"><a href=\"https://leetcode.cn/problems/product-of-array-except-self\" data-href=\"https://leetcode.cn/problems/product-of-array-except-self\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">238. 除自身以外数组的乘积</span></a></p><h2 id=\"rakRG\"><span class=\"ne-text\">题目描述</span></h2><pre data-language=\"javascript\" id=\"oFWiJ\" class=\"ne-codeblock language-javascript\"><code>//给你一个整数数组 nums，返回 数组 answer ，其中 answer[i] 等于 nums 中除 nums[i] 之外其余各元素的乘积 。 \n//\n// 题目数据 保证 数组 nums之中任意元素的全部前缀元素和后缀的乘积都在 32 位 整数范围内。 \n//\n// 请 不要使用除法，且在 O(n) 时间复杂度内完成此题。 \n//\n// \n//\n// 示例 1: \n//\n// \n//输入: nums = [1,2,3,4]\n//输出: [24,12,8,6]\n// \n//\n// 示例 2: \n//\n// \n//输入: nums = [-1,1,0,-3,3]\n//输出: [0,0,9,0,0]\n// \n//\n// \n//\n// 提示： \n//\n// \n// 2 &lt;= nums.length &lt;= 10⁵ \n// -30 &lt;= nums[i] &lt;= 30 \n// 保证 数组 nums之中任意元素的全部前缀元素和后缀的乘积都在 32 位 整数范围内 \n// \n//\n// \n//\n// 进阶：你可以在 O(1) 的额外空间复杂度内完成这个题目吗？（ 出于对空间复杂度分析的目的，输出数组 不被视为 额外空间。） \n//\n// Related Topics 数组 前缀和 👍 1641 👎 0</code></pre><h2 id=\"p2B24\"><span class=\"ne-text\">题解</span></h2><h3 id=\"ZoBsX\"><span class=\"ne-text\">前缀和 - 左右列表乘积法</span></h3><pre data-language=\"javascript\" id=\"wmdQF\" class=\"ne-codeblock language-javascript\"><code>/**\n * 左右乘积列表法\n * @param {number[]} nums\n * @return {number[]}\n */\nvar productExceptSelf = function (nums) {\n  let len = nums.length\n  const L = new Array(len)\n  const R = new Array(len)\n  const ans = new Array(len)\n\n  // L[i] 表示 i 左侧所有元素乘积\n  L[0] = 1\n  for (let i = 1; i &lt; len; i++) {\n    L[i] = L[i - 1] * nums[i - 1]\n  }\n\n  // R[i] 表示 i 右侧所有元素乘积\n  R[len - 1] = 1\n  for (let i = len - 2; i &gt;= 0; i--) {\n    R[i] = R[i + 1] * nums[i + 1]\n  }\n\n  // 除 i 外其他元素乘积 = L * R\n  for (let i = 0; i &lt; len; i++) {\n    ans[i] = L[i] * R[i]\n  }\n\n  return ans\n}</code></pre><h3 id=\"uX4kY\"><span class=\"ne-text\">优化空间复杂度 O(1)</span></h3><pre data-language=\"javascript\" id=\"AdhkQ\" class=\"ne-codeblock language-javascript\"><code>/**\n * 空间复杂度 O(1)\n * @param {number[]} nums\n * @return {number[]}\n */\nvar productExceptSelf = function (nums) {\n  // 将 L 或 R 数组用输出数组来计算\n  let len = nums.length\n  let ans = new Array(len)\n\n  // ans[i] 表示 i 左侧所有元素的乘积，刚开始 i = 0 左侧无元素，因此 = 1\n  ans[0] = 1\n  for (let i = 1; i &lt; nums.length; i++) {\n    ans[i] = ans[i - 1] * nums[i - 1]\n  }\n  // R 为右侧所有元素的乘积，刚开始右边无元素，因此 = 1\n  let R = 1\n  for (let i = len - 1; i &gt;= 0; i--) {\n    // 对于索引 i，左边乘积为 ans[i]，右边为 R\n    ans[i] *= R\n    // R 需要包含右边所有乘积，所以要累乘\n    R *= nums[i]\n  }\n  return ans\n}</code></pre></div>",
  "body": "[238. 除自身以外数组的乘积](https://leetcode.cn/problems/product-of-array-except-self)\n<a name=\"rakRG\"></a>\n## 题目描述\n```javascript\n//给你一个整数数组 nums，返回 数组 answer ，其中 answer[i] 等于 nums 中除 nums[i] 之外其余各元素的乘积 。 \n//\n// 题目数据 保证 数组 nums之中任意元素的全部前缀元素和后缀的乘积都在 32 位 整数范围内。 \n//\n// 请 不要使用除法，且在 O(n) 时间复杂度内完成此题。 \n//\n// \n//\n// 示例 1: \n//\n// \n//输入: nums = [1,2,3,4]\n//输出: [24,12,8,6]\n// \n//\n// 示例 2: \n//\n// \n//输入: nums = [-1,1,0,-3,3]\n//输出: [0,0,9,0,0]\n// \n//\n// \n//\n// 提示： \n//\n// \n// 2 <= nums.length <= 10⁵ \n// -30 <= nums[i] <= 30 \n// 保证 数组 nums之中任意元素的全部前缀元素和后缀的乘积都在 32 位 整数范围内 \n// \n//\n// \n//\n// 进阶：你可以在 O(1) 的额外空间复杂度内完成这个题目吗？（ 出于对空间复杂度分析的目的，输出数组 不被视为 额外空间。） \n//\n// Related Topics 数组 前缀和 👍 1641 👎 0\n```\n<a name=\"p2B24\"></a>\n## 题解\n<a name=\"ZoBsX\"></a>\n### 前缀和 - 左右列表乘积法\n```javascript\n/**\n * 左右乘积列表法\n * @param {number[]} nums\n * @return {number[]}\n */\nvar productExceptSelf = function (nums) {\n  let len = nums.length\n  const L = new Array(len)\n  const R = new Array(len)\n  const ans = new Array(len)\n\n  // L[i] 表示 i 左侧所有元素乘积\n  L[0] = 1\n  for (let i = 1; i < len; i++) {\n    L[i] = L[i - 1] * nums[i - 1]\n  }\n\n  // R[i] 表示 i 右侧所有元素乘积\n  R[len - 1] = 1\n  for (let i = len - 2; i >= 0; i--) {\n    R[i] = R[i + 1] * nums[i + 1]\n  }\n\n  // 除 i 外其他元素乘积 = L * R\n  for (let i = 0; i < len; i++) {\n    ans[i] = L[i] * R[i]\n  }\n\n  return ans\n}\n```\n<a name=\"uX4kY\"></a>\n### 优化空间复杂度 O(1)\n```javascript\n/**\n * 空间复杂度 O(1)\n * @param {number[]} nums\n * @return {number[]}\n */\nvar productExceptSelf = function (nums) {\n  // 将 L 或 R 数组用输出数组来计算\n  let len = nums.length\n  let ans = new Array(len)\n\n  // ans[i] 表示 i 左侧所有元素的乘积，刚开始 i = 0 左侧无元素，因此 = 1\n  ans[0] = 1\n  for (let i = 1; i < nums.length; i++) {\n    ans[i] = ans[i - 1] * nums[i - 1]\n  }\n  // R 为右侧所有元素的乘积，刚开始右边无元素，因此 = 1\n  let R = 1\n  for (let i = len - 1; i >= 0; i--) {\n    // 对于索引 i，左边乘积为 ans[i]，右边为 R\n    ans[i] *= R\n    // R 需要包含右边所有乘积，所以要累乘\n    R *= nums[i]\n  }\n  return ans\n}\n```\n",
  "body_html": "<!doctype html><div class=\"lake-content\" typography=\"classic\"><p id=\"u982b95e3\" class=\"ne-p\"><a href=\"https://leetcode.cn/problems/product-of-array-except-self\" data-href=\"https://leetcode.cn/problems/product-of-array-except-self\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">238. 除自身以外数组的乘积</span></a></p><h2 id=\"rakRG\"><span class=\"ne-text\">题目描述</span></h2><pre data-language=\"javascript\" id=\"oFWiJ\" class=\"ne-codeblock language-javascript\"><code>//给你一个整数数组 nums，返回 数组 answer ，其中 answer[i] 等于 nums 中除 nums[i] 之外其余各元素的乘积 。 \n//\n// 题目数据 保证 数组 nums之中任意元素的全部前缀元素和后缀的乘积都在 32 位 整数范围内。 \n//\n// 请 不要使用除法，且在 O(n) 时间复杂度内完成此题。 \n//\n// \n//\n// 示例 1: \n//\n// \n//输入: nums = [1,2,3,4]\n//输出: [24,12,8,6]\n// \n//\n// 示例 2: \n//\n// \n//输入: nums = [-1,1,0,-3,3]\n//输出: [0,0,9,0,0]\n// \n//\n// \n//\n// 提示： \n//\n// \n// 2 &lt;= nums.length &lt;= 10⁵ \n// -30 &lt;= nums[i] &lt;= 30 \n// 保证 数组 nums之中任意元素的全部前缀元素和后缀的乘积都在 32 位 整数范围内 \n// \n//\n// \n//\n// 进阶：你可以在 O(1) 的额外空间复杂度内完成这个题目吗？（ 出于对空间复杂度分析的目的，输出数组 不被视为 额外空间。） \n//\n// Related Topics 数组 前缀和 👍 1641 👎 0</code></pre><h2 id=\"p2B24\"><span class=\"ne-text\">题解</span></h2><h3 id=\"ZoBsX\"><span class=\"ne-text\">前缀和 - 左右列表乘积法</span></h3><pre data-language=\"javascript\" id=\"wmdQF\" class=\"ne-codeblock language-javascript\"><code>/**\n * 左右乘积列表法\n * @param {number[]} nums\n * @return {number[]}\n */\nvar productExceptSelf = function (nums) {\n  let len = nums.length\n  const L = new Array(len)\n  const R = new Array(len)\n  const ans = new Array(len)\n\n  // L[i] 表示 i 左侧所有元素乘积\n  L[0] = 1\n  for (let i = 1; i &lt; len; i++) {\n    L[i] = L[i - 1] * nums[i - 1]\n  }\n\n  // R[i] 表示 i 右侧所有元素乘积\n  R[len - 1] = 1\n  for (let i = len - 2; i &gt;= 0; i--) {\n    R[i] = R[i + 1] * nums[i + 1]\n  }\n\n  // 除 i 外其他元素乘积 = L * R\n  for (let i = 0; i &lt; len; i++) {\n    ans[i] = L[i] * R[i]\n  }\n\n  return ans\n}</code></pre><h3 id=\"uX4kY\"><span class=\"ne-text\">优化空间复杂度 O(1)</span></h3><pre data-language=\"javascript\" id=\"AdhkQ\" class=\"ne-codeblock language-javascript\"><code>/**\n * 空间复杂度 O(1)\n * @param {number[]} nums\n * @return {number[]}\n */\nvar productExceptSelf = function (nums) {\n  // 将 L 或 R 数组用输出数组来计算\n  let len = nums.length\n  let ans = new Array(len)\n\n  // ans[i] 表示 i 左侧所有元素的乘积，刚开始 i = 0 左侧无元素，因此 = 1\n  ans[0] = 1\n  for (let i = 1; i &lt; nums.length; i++) {\n    ans[i] = ans[i - 1] * nums[i - 1]\n  }\n  // R 为右侧所有元素的乘积，刚开始右边无元素，因此 = 1\n  let R = 1\n  for (let i = len - 1; i &gt;= 0; i--) {\n    // 对于索引 i，左边乘积为 ans[i]，右边为 R\n    ans[i] *= R\n    // R 需要包含右边所有乘积，所以要累乘\n    R *= nums[i]\n  }\n  return ans\n}</code></pre></div>",
  "body_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"viewport\" content=\"adapt\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"paragraphSpacing\" content=\"relax\" /><p data-lake-id=\"u982b95e3\" id=\"u982b95e3\"><a href=\"https://leetcode.cn/problems/product-of-array-except-self\" target=\"_blank\" data-lake-id=\"u9862a820\" id=\"u9862a820\"><span data-lake-id=\"u909b6299\" id=\"u909b6299\">238. 除自身以外数组的乘积</span></a></p><h2 data-lake-id=\"rakRG\" id=\"rakRG\"><span data-lake-id=\"ud18246e6\" id=\"ud18246e6\">题目描述</span></h2><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%E7%BB%99%E4%BD%A0%E4%B8%80%E4%B8%AA%E6%95%B4%E6%95%B0%E6%95%B0%E7%BB%84%20nums%EF%BC%8C%E8%BF%94%E5%9B%9E%20%E6%95%B0%E7%BB%84%20answer%20%EF%BC%8C%E5%85%B6%E4%B8%AD%20answer%5Bi%5D%20%E7%AD%89%E4%BA%8E%20nums%20%E4%B8%AD%E9%99%A4%20nums%5Bi%5D%20%E4%B9%8B%E5%A4%96%E5%85%B6%E4%BD%99%E5%90%84%E5%85%83%E7%B4%A0%E7%9A%84%E4%B9%98%E7%A7%AF%20%E3%80%82%20%5Cn%2F%2F%5Cn%2F%2F%20%E9%A2%98%E7%9B%AE%E6%95%B0%E6%8D%AE%20%E4%BF%9D%E8%AF%81%20%E6%95%B0%E7%BB%84%20nums%E4%B9%8B%E4%B8%AD%E4%BB%BB%E6%84%8F%E5%85%83%E7%B4%A0%E7%9A%84%E5%85%A8%E9%83%A8%E5%89%8D%E7%BC%80%E5%85%83%E7%B4%A0%E5%92%8C%E5%90%8E%E7%BC%80%E7%9A%84%E4%B9%98%E7%A7%AF%E9%83%BD%E5%9C%A8%2032%20%E4%BD%8D%20%E6%95%B4%E6%95%B0%E8%8C%83%E5%9B%B4%E5%86%85%E3%80%82%20%5Cn%2F%2F%5Cn%2F%2F%20%E8%AF%B7%20%E4%B8%8D%E8%A6%81%E4%BD%BF%E7%94%A8%E9%99%A4%E6%B3%95%EF%BC%8C%E4%B8%94%E5%9C%A8%20O(n)%20%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%86%85%E5%AE%8C%E6%88%90%E6%AD%A4%E9%A2%98%E3%80%82%20%5Cn%2F%2F%5Cn%2F%2F%20%5Cn%2F%2F%5Cn%2F%2F%20%E7%A4%BA%E4%BE%8B%201%3A%20%5Cn%2F%2F%5Cn%2F%2F%20%5Cn%2F%2F%E8%BE%93%E5%85%A5%3A%20nums%20%3D%20%5B1%2C2%2C3%2C4%5D%5Cn%2F%2F%E8%BE%93%E5%87%BA%3A%20%5B24%2C12%2C8%2C6%5D%5Cn%2F%2F%20%5Cn%2F%2F%5Cn%2F%2F%20%E7%A4%BA%E4%BE%8B%202%3A%20%5Cn%2F%2F%5Cn%2F%2F%20%5Cn%2F%2F%E8%BE%93%E5%85%A5%3A%20nums%20%3D%20%5B-1%2C1%2C0%2C-3%2C3%5D%5Cn%2F%2F%E8%BE%93%E5%87%BA%3A%20%5B0%2C0%2C9%2C0%2C0%5D%5Cn%2F%2F%20%5Cn%2F%2F%5Cn%2F%2F%20%5Cn%2F%2F%5Cn%2F%2F%20%E6%8F%90%E7%A4%BA%EF%BC%9A%20%5Cn%2F%2F%5Cn%2F%2F%20%5Cn%2F%2F%202%20%3C%3D%20nums.length%20%3C%3D%2010%E2%81%B5%20%5Cn%2F%2F%20-30%20%3C%3D%20nums%5Bi%5D%20%3C%3D%2030%20%5Cn%2F%2F%20%E4%BF%9D%E8%AF%81%20%E6%95%B0%E7%BB%84%20nums%E4%B9%8B%E4%B8%AD%E4%BB%BB%E6%84%8F%E5%85%83%E7%B4%A0%E7%9A%84%E5%85%A8%E9%83%A8%E5%89%8D%E7%BC%80%E5%85%83%E7%B4%A0%E5%92%8C%E5%90%8E%E7%BC%80%E7%9A%84%E4%B9%98%E7%A7%AF%E9%83%BD%E5%9C%A8%2032%20%E4%BD%8D%20%E6%95%B4%E6%95%B0%E8%8C%83%E5%9B%B4%E5%86%85%20%5Cn%2F%2F%20%5Cn%2F%2F%5Cn%2F%2F%20%5Cn%2F%2F%5Cn%2F%2F%20%E8%BF%9B%E9%98%B6%EF%BC%9A%E4%BD%A0%E5%8F%AF%E4%BB%A5%E5%9C%A8%20O(1)%20%E7%9A%84%E9%A2%9D%E5%A4%96%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%86%85%E5%AE%8C%E6%88%90%E8%BF%99%E4%B8%AA%E9%A2%98%E7%9B%AE%E5%90%97%EF%BC%9F%EF%BC%88%20%E5%87%BA%E4%BA%8E%E5%AF%B9%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90%E7%9A%84%E7%9B%AE%E7%9A%84%EF%BC%8C%E8%BE%93%E5%87%BA%E6%95%B0%E7%BB%84%20%E4%B8%8D%E8%A2%AB%E8%A7%86%E4%B8%BA%20%E9%A2%9D%E5%A4%96%E7%A9%BA%E9%97%B4%E3%80%82%EF%BC%89%20%5Cn%2F%2F%5Cn%2F%2F%20Related%20Topics%20%E6%95%B0%E7%BB%84%20%E5%89%8D%E7%BC%80%E5%92%8C%20%F0%9F%91%8D%201641%20%F0%9F%91%8E%200%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Bracket%20Lights%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22oFWiJ%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h2 data-lake-id=\"p2B24\" id=\"p2B24\"><span data-lake-id=\"u2492a419\" id=\"u2492a419\">题解</span></h2><h3 data-lake-id=\"ZoBsX\" id=\"ZoBsX\"><span data-lake-id=\"u87dd16b9\" id=\"u87dd16b9\">前缀和 - 左右列表乘积法</span></h3><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F**%5Cn%20*%20%E5%B7%A6%E5%8F%B3%E4%B9%98%E7%A7%AF%E5%88%97%E8%A1%A8%E6%B3%95%5Cn%20*%20%40param%20%7Bnumber%5B%5D%7D%20nums%5Cn%20*%20%40return%20%7Bnumber%5B%5D%7D%5Cn%20*%2F%5Cnvar%20productExceptSelf%20%3D%20function%20(nums)%20%7B%5Cn%20%20let%20len%20%3D%20nums.length%5Cn%20%20const%20L%20%3D%20new%20Array(len)%5Cn%20%20const%20R%20%3D%20new%20Array(len)%5Cn%20%20const%20ans%20%3D%20new%20Array(len)%5Cn%5Cn%20%20%2F%2F%20L%5Bi%5D%20%E8%A1%A8%E7%A4%BA%20i%20%E5%B7%A6%E4%BE%A7%E6%89%80%E6%9C%89%E5%85%83%E7%B4%A0%E4%B9%98%E7%A7%AF%5Cn%20%20L%5B0%5D%20%3D%201%5Cn%20%20for%20(let%20i%20%3D%201%3B%20i%20%3C%20len%3B%20i%2B%2B)%20%7B%5Cn%20%20%20%20L%5Bi%5D%20%3D%20L%5Bi%20-%201%5D%20*%20nums%5Bi%20-%201%5D%5Cn%20%20%7D%5Cn%5Cn%20%20%2F%2F%20R%5Bi%5D%20%E8%A1%A8%E7%A4%BA%20i%20%E5%8F%B3%E4%BE%A7%E6%89%80%E6%9C%89%E5%85%83%E7%B4%A0%E4%B9%98%E7%A7%AF%5Cn%20%20R%5Blen%20-%201%5D%20%3D%201%5Cn%20%20for%20(let%20i%20%3D%20len%20-%202%3B%20i%20%3E%3D%200%3B%20i--)%20%7B%5Cn%20%20%20%20R%5Bi%5D%20%3D%20R%5Bi%20%2B%201%5D%20*%20nums%5Bi%20%2B%201%5D%5Cn%20%20%7D%5Cn%5Cn%20%20%2F%2F%20%E9%99%A4%20i%20%E5%A4%96%E5%85%B6%E4%BB%96%E5%85%83%E7%B4%A0%E4%B9%98%E7%A7%AF%20%3D%20L%20*%20R%5Cn%20%20for%20(let%20i%20%3D%200%3B%20i%20%3C%20len%3B%20i%2B%2B)%20%7B%5Cn%20%20%20%20ans%5Bi%5D%20%3D%20L%5Bi%5D%20*%20R%5Bi%5D%5Cn%20%20%7D%5Cn%5Cn%20%20return%20ans%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Bracket%20Lights%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22wmdQF%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h3 data-lake-id=\"uX4kY\" id=\"uX4kY\"><span data-lake-id=\"uc176b678\" id=\"uc176b678\">优化空间复杂度 O(1)</span></h3><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22search%22%3A%22%22%2C%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F**%5Cn%20*%20%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%20O(1)%5Cn%20*%20%40param%20%7Bnumber%5B%5D%7D%20nums%5Cn%20*%20%40return%20%7Bnumber%5B%5D%7D%5Cn%20*%2F%5Cnvar%20productExceptSelf%20%3D%20function%20(nums)%20%7B%5Cn%20%20%2F%2F%20%E5%B0%86%20L%20%E6%88%96%20R%20%E6%95%B0%E7%BB%84%E7%94%A8%E8%BE%93%E5%87%BA%E6%95%B0%E7%BB%84%E6%9D%A5%E8%AE%A1%E7%AE%97%5Cn%20%20let%20len%20%3D%20nums.length%5Cn%20%20let%20ans%20%3D%20new%20Array(len)%5Cn%5Cn%20%20%2F%2F%20ans%5Bi%5D%20%E8%A1%A8%E7%A4%BA%20i%20%E5%B7%A6%E4%BE%A7%E6%89%80%E6%9C%89%E5%85%83%E7%B4%A0%E7%9A%84%E4%B9%98%E7%A7%AF%EF%BC%8C%E5%88%9A%E5%BC%80%E5%A7%8B%20i%20%3D%200%20%E5%B7%A6%E4%BE%A7%E6%97%A0%E5%85%83%E7%B4%A0%EF%BC%8C%E5%9B%A0%E6%AD%A4%20%3D%201%5Cn%20%20ans%5B0%5D%20%3D%201%5Cn%20%20for%20(let%20i%20%3D%201%3B%20i%20%3C%20nums.length%3B%20i%2B%2B)%20%7B%5Cn%20%20%20%20ans%5Bi%5D%20%3D%20ans%5Bi%20-%201%5D%20*%20nums%5Bi%20-%201%5D%5Cn%20%20%7D%5Cn%20%20%2F%2F%20R%20%E4%B8%BA%E5%8F%B3%E4%BE%A7%E6%89%80%E6%9C%89%E5%85%83%E7%B4%A0%E7%9A%84%E4%B9%98%E7%A7%AF%EF%BC%8C%E5%88%9A%E5%BC%80%E5%A7%8B%E5%8F%B3%E8%BE%B9%E6%97%A0%E5%85%83%E7%B4%A0%EF%BC%8C%E5%9B%A0%E6%AD%A4%20%3D%201%5Cn%20%20let%20R%20%3D%201%5Cn%20%20for%20(let%20i%20%3D%20len%20-%201%3B%20i%20%3E%3D%200%3B%20i--)%20%7B%5Cn%20%20%20%20%2F%2F%20%E5%AF%B9%E4%BA%8E%E7%B4%A2%E5%BC%95%20i%EF%BC%8C%E5%B7%A6%E8%BE%B9%E4%B9%98%E7%A7%AF%E4%B8%BA%20ans%5Bi%5D%EF%BC%8C%E5%8F%B3%E8%BE%B9%E4%B8%BA%20R%5Cn%20%20%20%20ans%5Bi%5D%20*%3D%20R%5Cn%20%20%20%20%2F%2F%20R%20%E9%9C%80%E8%A6%81%E5%8C%85%E5%90%AB%E5%8F%B3%E8%BE%B9%E6%89%80%E6%9C%89%E4%B9%98%E7%A7%AF%EF%BC%8C%E6%89%80%E4%BB%A5%E8%A6%81%E7%B4%AF%E4%B9%98%5Cn%20%20%20%20R%20*%3D%20nums%5Bi%5D%5Cn%20%20%7D%5Cn%20%20return%20ans%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22Bracket%20Lights%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22AdhkQ%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card>",
  "public": 0,
  "status": 1,
  "likes_count": 0,
  "read_count": 0,
  "hits": 0,
  "comments_count": 0,
  "word_count": 648,
  "created_at": "2023-11-21T20:33:57.000Z",
  "updated_at": "2023-11-23T19:00:52.000Z",
  "content_updated_at": "2023-11-23T18:21:20.000Z",
  "published_at": "2023-11-23T18:21:20.000Z",
  "first_published_at": "2023-11-21T20:34:25.688Z",
  "book": {
    "id": 44292824,
    "type": "Book",
    "slug": "gklbh2",
    "name": "Leetcode",
    "user_id": 732231,
    "description": "",
    "toc_yml": "- type: META\n  count: 51\n  display_level: 1\n  tail_type: UPDATED_AT\n  base_version_id: 374208920\n  published: true\n  max_level: 0\n  last_updated_at: 2023-11-23T19:01:45.930Z\n  version_id: 374208922\n- type: DOC\n  title: LCR 140 训练计划 II (链表中倒数第 k 个节点)\n  uuid: 4gkpTMCOXa9Lm_3y\n  url: gu578y56irbrv7ba\n  prev_uuid: ''\n  sibling_uuid: D9fjaj4GAhOJB3EG\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147992663\n  level: 0\n  id: 147992663\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 1 两数之和\n  uuid: D9fjaj4GAhOJB3EG\n  url: vi0b1e\n  prev_uuid: 4gkpTMCOXa9Lm_3y\n  sibling_uuid: 0yhcscQD-WvS4GPZ\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 11416831\n  level: 0\n  id: 11416831\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 2 两数相加\n  uuid: 0yhcscQD-WvS4GPZ\n  url: ffmgi1\n  prev_uuid: D9fjaj4GAhOJB3EG\n  sibling_uuid: vFsn4Bf4Jh4U32mI\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 11416844\n  level: 0\n  id: 11416844\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 3 无重复字符的最长子串\n  uuid: vFsn4Bf4Jh4U32mI\n  url: mtz77i\n  prev_uuid: 0yhcscQD-WvS4GPZ\n  sibling_uuid: 1t7bsJe3J4tNFVZL\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 11416847\n  level: 0\n  id: 11416847\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 4 寻找两个正序数组的中位数\n  uuid: 1t7bsJe3J4tNFVZL\n  url: gva8o4geqcng2pvt\n  prev_uuid: vFsn4Bf4Jh4U32mI\n  sibling_uuid: 6TorxGBvvbeYOpXd\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147991624\n  level: 0\n  id: 147991624\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 5 最长回文子串\n  uuid: 6TorxGBvvbeYOpXd\n  url: oyeiiunxxy1q8p7r\n  prev_uuid: 1t7bsJe3J4tNFVZL\n  sibling_uuid: Q64oWkEJyWN9W6HA\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147876484\n  level: 0\n  id: 147876484\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 15 三数之和\n  uuid: Q64oWkEJyWN9W6HA\n  url: nkcuzy8lgqbobw49\n  prev_uuid: 6TorxGBvvbeYOpXd\n  sibling_uuid: ZYKfuY36K6GG3JCQ\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147451556\n  level: 0\n  id: 147451556\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 20 有效的括号\n  uuid: ZYKfuY36K6GG3JCQ\n  url: cszxgc1xg44499b7\n  prev_uuid: Q64oWkEJyWN9W6HA\n  sibling_uuid: DUB0D9AKK0likFPP\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147991949\n  level: 0\n  id: 147991949\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 21 合并两个有序链表\n  uuid: DUB0D9AKK0likFPP\n  url: dcidazawmep66kvf\n  prev_uuid: ZYKfuY36K6GG3JCQ\n  sibling_uuid: JGz8qO7-UCqfmKRQ\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147991981\n  level: 0\n  id: 147991981\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 31 下一个排列\n  uuid: JGz8qO7-UCqfmKRQ\n  url: bzdwvakyt0q7h55f\n  prev_uuid: DUB0D9AKK0likFPP\n  sibling_uuid: hJybbEKV2Okjvfrc\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147992039\n  level: 0\n  id: 147992039\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 32 最长有效括号\n  uuid: hJybbEKV2Okjvfrc\n  url: gkx2i4kcuqsp62q3\n  prev_uuid: JGz8qO7-UCqfmKRQ\n  sibling_uuid: P-POKc-Eq_5qhdtz\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147992075\n  level: 0\n  id: 147992075\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 39 组合总和\n  uuid: P-POKc-Eq_5qhdtz\n  url: gii9er6dcbq51d04\n  prev_uuid: hJybbEKV2Okjvfrc\n  sibling_uuid: HMcs-WNiT1LU5pVk\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147992119\n  level: 0\n  id: 147992119\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 42 接雨水\n  uuid: HMcs-WNiT1LU5pVk\n  url: kxktgivrkdl6wz5z\n  prev_uuid: P-POKc-Eq_5qhdtz\n  sibling_uuid: 7gA8hFWs4G74fr6W\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147992139\n  level: 0\n  id: 147992139\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 46 全排列\n  uuid: 7gA8hFWs4G74fr6W\n  url: xxua341nz98mow62\n  prev_uuid: HMcs-WNiT1LU5pVk\n  sibling_uuid: 6SInaQv7zqTeQYUG\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147992165\n  level: 0\n  id: 147992165\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 53 最大子序和\n  uuid: 6SInaQv7zqTeQYUG\n  url: wrfwwaild6gqpi22\n  prev_uuid: 7gA8hFWs4G74fr6W\n  sibling_uuid: zbwrvrvQZhDpHcKC\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147992175\n  level: 0\n  id: 147992175\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 56 合并区间\n  uuid: zbwrvrvQZhDpHcKC\n  url: xr8llnbke55x4fkg\n  prev_uuid: 6SInaQv7zqTeQYUG\n  sibling_uuid: eBOqa-7ikOmOtO9r\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147992185\n  level: 0\n  id: 147992185\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 67 二进制求和\n  uuid: eBOqa-7ikOmOtO9r\n  url: zd7gktt83m37uc1q\n  prev_uuid: zbwrvrvQZhDpHcKC\n  sibling_uuid: lDvlUWzwCFyaopLw\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147992190\n  level: 0\n  id: 147992190\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 70 爬楼梯\n  uuid: lDvlUWzwCFyaopLw\n  url: ru99qh59e3y5cia2\n  prev_uuid: eBOqa-7ikOmOtO9r\n  sibling_uuid: rrwD5FgxzKY4Gpwr\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147992201\n  level: 0\n  id: 147992201\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 88 合并两个有序数组\n  uuid: rrwD5FgxzKY4Gpwr\n  url: szusblg76edira1c\n  prev_uuid: lDvlUWzwCFyaopLw\n  sibling_uuid: 6QxpLgzCGRMJc-J6\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147992021\n  level: 0\n  id: 147992021\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 94 二叉树的中序遍历\n  uuid: 6QxpLgzCGRMJc-J6\n  url: knlpiyei2hl9rzt3\n  prev_uuid: rrwD5FgxzKY4Gpwr\n  sibling_uuid: aFtiTAdnF7CKhtgt\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147992224\n  level: 0\n  id: 147992224\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 101 对称二叉树\n  uuid: aFtiTAdnF7CKhtgt\n  url: aoxk7rmkecx7z4ge\n  prev_uuid: 6QxpLgzCGRMJc-J6\n  sibling_uuid: T603eLVmpywbRmGU\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147992241\n  level: 0\n  id: 147992241\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 102 二叉树的层序遍历\n  uuid: T603eLVmpywbRmGU\n  url: zffm0kp0s6wve8bh\n  prev_uuid: aFtiTAdnF7CKhtgt\n  sibling_uuid: jmy47wNGCp0OMDBw\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147992251\n  level: 0\n  id: 147992251\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 104 二叉树的最大深度\n  uuid: jmy47wNGCp0OMDBw\n  url: xvcbss1txad8x08f\n  prev_uuid: T603eLVmpywbRmGU\n  sibling_uuid: TbQVp_I6xpqwIknG\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147992262\n  level: 0\n  id: 147992262\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 111 二叉树的最小深度\n  uuid: TbQVp_I6xpqwIknG\n  url: gfu8qrvtcc3a60vi\n  prev_uuid: jmy47wNGCp0OMDBw\n  sibling_uuid: 84vPb9Z8OKiDHJgZ\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147992282\n  level: 0\n  id: 147992282\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 112 路径总和\n  uuid: 84vPb9Z8OKiDHJgZ\n  url: lizcps0saeod0pey\n  prev_uuid: TbQVp_I6xpqwIknG\n  sibling_uuid: gsgwoclNI27-MYBk\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147992298\n  level: 0\n  id: 147992298\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 121 买卖股票的最佳时机\n  uuid: gsgwoclNI27-MYBk\n  url: eqag967oiizb6p3i\n  prev_uuid: 84vPb9Z8OKiDHJgZ\n  sibling_uuid: KlLSis2eG5DamkCt\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147992309\n  level: 0\n  id: 147992309\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 129 求根到叶子节点数字之和\n  uuid: KlLSis2eG5DamkCt\n  url: hpwmmdrcgd8zvtmh\n  prev_uuid: gsgwoclNI27-MYBk\n  sibling_uuid: 80Okgq3-oE8vSpC4\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147992322\n  level: 0\n  id: 147992322\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 141 环型链表\n  uuid: 80Okgq3-oE8vSpC4\n  url: drdzvh5hf9g1kmak\n  prev_uuid: KlLSis2eG5DamkCt\n  sibling_uuid: 4xSu26xVAWy5Bhq5\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147992330\n  level: 0\n  id: 147992330\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 146 LRU缓存机制\n  uuid: 4xSu26xVAWy5Bhq5\n  url: pzx6s6b15eoogm9h\n  prev_uuid: 80Okgq3-oE8vSpC4\n  sibling_uuid: cgBOZtnI9VLErmqr\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147992342\n  level: 0\n  id: 147992342\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 151 反转字符串中的单词\n  uuid: cgBOZtnI9VLErmqr\n  url: fqoogl0zhx7wttrd\n  prev_uuid: 4xSu26xVAWy5Bhq5\n  sibling_uuid: 3L1GJnf7HpSxz9a5\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147751033\n  level: 0\n  id: 147751033\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 155 最小栈\n  uuid: 3L1GJnf7HpSxz9a5\n  url: ywtlc7gvif4kuckp\n  prev_uuid: cgBOZtnI9VLErmqr\n  sibling_uuid: g40aZbGc0NtScNSt\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147992376\n  level: 0\n  id: 147992376\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 160 相交链表\n  uuid: g40aZbGc0NtScNSt\n  url: dtfon507inu95297\n  prev_uuid: 3L1GJnf7HpSxz9a5\n  sibling_uuid: VY4pQ951swxUHN4N\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147992387\n  level: 0\n  id: 147992387\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 162 寻找峰值\n  uuid: VY4pQ951swxUHN4N\n  url: csbwdm6dx7o922us\n  prev_uuid: g40aZbGc0NtScNSt\n  sibling_uuid: jRFXsVO2auHn3mBK\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147718381\n  level: 0\n  id: 147718381\n  open_window: 1\n  visible: 0\n- type: DOC\n  title: 169 多数元素\n  uuid: jRFXsVO2auHn3mBK\n  url: gbwgs8281hrgu2p5\n  prev_uuid: VY4pQ951swxUHN4N\n  sibling_uuid: M-IW-4k9BYGmwE5A\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147992418\n  level: 0\n  id: 147992418\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 200 岛屿数量\n  uuid: M-IW-4k9BYGmwE5A\n  url: hhrm6w6r9fm90ugh\n  prev_uuid: jRFXsVO2auHn3mBK\n  sibling_uuid: UumAIFlOK6KlxrXu\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147992427\n  level: 0\n  id: 147992427\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 206 反转链表\n  uuid: UumAIFlOK6KlxrXu\n  url: gprthzske3qs9xdi\n  prev_uuid: M-IW-4k9BYGmwE5A\n  sibling_uuid: _ggJN2LjLAazwCEb\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147992433\n  level: 0\n  id: 147992433\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 209 长度最小的子数组\n  uuid: _ggJN2LjLAazwCEb\n  url: dsz8vf1e2w1ui24m\n  prev_uuid: UumAIFlOK6KlxrXu\n  sibling_uuid: '-D0BIBDk_G03exTI'\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147451598\n  level: 0\n  id: 147451598\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 215 数组中的第K个最大元素\n  uuid: '-D0BIBDk_G03exTI'\n  url: idavgg7e0ry9gawk\n  prev_uuid: _ggJN2LjLAazwCEb\n  sibling_uuid: LyX62bT4EPTpESlc\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147876068\n  level: 0\n  id: 147876068\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 226 翻转二叉树\n  uuid: LyX62bT4EPTpESlc\n  url: ss2ir5pkqhohctlb\n  prev_uuid: '-D0BIBDk_G03exTI'\n  sibling_uuid: ASAC50CVabAnrfR5\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147992479\n  level: 0\n  id: 147992479\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 238 除自身以外数组的乘积\n  uuid: ASAC50CVabAnrfR5\n  url: pnbw26bnt40vohxk\n  prev_uuid: LyX62bT4EPTpESlc\n  sibling_uuid: 4ajZIEKjwOjpC_Ri\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147751162\n  level: 0\n  id: 147751162\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 322 零钱兑换\n  uuid: 4ajZIEKjwOjpC_Ri\n  url: evzdsp8i9z9iz1m9\n  prev_uuid: ASAC50CVabAnrfR5\n  sibling_uuid: ybNfKJP90CNQ95up\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147992508\n  level: 0\n  id: 147992508\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 334 递增的三元子序列\n  uuid: ybNfKJP90CNQ95up\n  url: dkktq1ez0d5no8b5\n  prev_uuid: 4ajZIEKjwOjpC_Ri\n  sibling_uuid: izCSq4UA7udwUgGS\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147853149\n  level: 0\n  id: 147853149\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 345 反转字符串中的元音字母\n  uuid: izCSq4UA7udwUgGS\n  url: gqccwkdpgo04oeaf\n  prev_uuid: ybNfKJP90CNQ95up\n  sibling_uuid: 4nNqqOCjAxtgfryN\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147750802\n  level: 0\n  id: 147750802\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 415 字符串相加\n  uuid: 4nNqqOCjAxtgfryN\n  url: sw165ohocfoif7g3\n  prev_uuid: izCSq4UA7udwUgGS\n  sibling_uuid: eUwbAk5ZESHOdwCJ\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147992529\n  level: 0\n  id: 147992529\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 443 压缩字符串\n  uuid: eUwbAk5ZESHOdwCJ\n  url: xzyrc9xgzo0aiu10\n  prev_uuid: 4nNqqOCjAxtgfryN\n  sibling_uuid: 5isNHBjoZWJY0rqG\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147875594\n  level: 0\n  id: 147875594\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 509 斐波那契数\n  uuid: 5isNHBjoZWJY0rqG\n  url: vpk2fcb8bc2r1ad5\n  prev_uuid: eUwbAk5ZESHOdwCJ\n  sibling_uuid: hEHSMukKLz8LgdJ4\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147992568\n  level: 0\n  id: 147992568\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 605 种花问题\n  uuid: hEHSMukKLz8LgdJ4\n  url: gtlqi9gf62em4cr1\n  prev_uuid: 5isNHBjoZWJY0rqG\n  sibling_uuid: O8NsEdUMxID6uArM\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147745513\n  level: 0\n  id: 147745513\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 1071 字符串的最大公因子\n  uuid: O8NsEdUMxID6uArM\n  url: rd4ob184gdlope5a\n  prev_uuid: hEHSMukKLz8LgdJ4\n  sibling_uuid: cmYeCXTaXQ4HAG6S\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147740806\n  level: 0\n  id: 147740806\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 1143 最长公共子序列\n  uuid: cmYeCXTaXQ4HAG6S\n  url: kbtwmpzch9x5aqku\n  prev_uuid: O8NsEdUMxID6uArM\n  sibling_uuid: '-YscIPwThxhY7WAF'\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147718465\n  level: 0\n  id: 147718465\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 1431 拥有最多糖果的孩子\n  uuid: '-YscIPwThxhY7WAF'\n  url: dxn5xdxqh1ggc326\n  prev_uuid: cmYeCXTaXQ4HAG6S\n  sibling_uuid: 0oXS9Rh1T3xKhIW5\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147742194\n  level: 0\n  id: 147742194\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 1768 交替合并字符串\n  uuid: 0oXS9Rh1T3xKhIW5\n  url: mzu6pzt99ofgmdyg\n  prev_uuid: '-YscIPwThxhY7WAF'\n  sibling_uuid: ''\n  child_uuid: ''\n  parent_uuid: ''\n  doc_id: 147717947\n  level: 0\n  id: 147717947\n  open_window: 1\n  visible: 1\n",
    "creator_id": 732231,
    "public": 0,
    "items_count": 51,
    "likes_count": 0,
    "watches_count": 0,
    "content_updated_at": "2023-11-23T19:05:02.254Z",
    "created_at": "2023-11-19T17:46:55.000Z",
    "updated_at": "2023-11-23T19:05:02.000Z",
    "user": {
      "id": 732231,
      "type": "User",
      "login": "wcywxq",
      "name": "magic",
      "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/732231/1606968271774-avatar/886ad88b-d2cc-4c9e-a674-f70eb51a679c.png",
      "books_count": 21,
      "public_books_count": 0,
      "followers_count": 0,
      "following_count": 0,
      "public": 1,
      "description": null,
      "created_at": "2020-01-08T14:21:31.000Z",
      "updated_at": "2023-11-23T19:11:28.000Z",
      "work_id": "",
      "_serializer": "v2.user"
    },
    "namespace": "wcywxq/gklbh2",
    "_serializer": "v2.book"
  },
  "user": {
    "id": 732231,
    "type": "User",
    "login": "wcywxq",
    "name": "magic",
    "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/732231/1606968271774-avatar/886ad88b-d2cc-4c9e-a674-f70eb51a679c.png",
    "books_count": 21,
    "public_books_count": 0,
    "followers_count": 0,
    "following_count": 0,
    "public": 1,
    "description": null,
    "created_at": "2020-01-08T14:21:31.000Z",
    "updated_at": "2023-11-23T19:11:28.000Z",
    "work_id": "",
    "_serializer": "v2.user"
  },
  "tags": [],
  "latest_version_id": 2137299463,
  "creator": {
    "id": 732231,
    "type": "User",
    "login": "wcywxq",
    "name": "magic",
    "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/732231/1606968271774-avatar/886ad88b-d2cc-4c9e-a674-f70eb51a679c.png",
    "books_count": 21,
    "public_books_count": 0,
    "followers_count": 0,
    "following_count": 0,
    "public": 1,
    "description": null,
    "created_at": "2020-01-08T14:21:31.000Z",
    "updated_at": "2023-11-23T19:11:28.000Z",
    "work_id": "",
    "_serializer": "v2.user"
  },
  "_serializer": "v2.doc_detail"
}