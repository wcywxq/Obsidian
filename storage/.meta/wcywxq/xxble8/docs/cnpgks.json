{
  "id": 11465980,
  "slug": "cnpgks",
  "title": "graphql",
  "description": "graphql 是一种 api 查询语言。什么是 graphql ?graphql 是一个用于 API 的查询语言，是一个使用基于类型系统来执行查询的服务端运行时的数据（类型系统由你的数据定义）。graphql 并没有和任何特定数据库或者存储引擎进行绑定，而是依靠现有的代码入门一个 graph...",
  "cover": "",
  "user_id": 732231,
  "book_id": 25332296,
  "last_editor_id": 732231,
  "format": "lake",
  "body_draft": "<!doctype html><div class=\"lake-content\" typography=\"traditional\"><p id=\"7d10983d09d39929a6d2fab883e7828f\" class=\"ne-p\"><span class=\"ne-text\">graphql 是一种 api 查询语言。</span></p><h2 id=\"75e71c39\"><span class=\"ne-text\">什么是 graphql ?</span></h2><p id=\"0c4d068e4aede2bc9d552ce387999b01_p_4\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"4ae36d99b0c55f82785eb604256ad6f2_p_5\" class=\"ne-p\"><code class=\"ne-code\"><span class=\"ne-text\">graphql</span></code><span class=\"ne-text\"> 是一个用于 </span><code class=\"ne-code\"><span class=\"ne-text\">API</span></code><span class=\"ne-text\"> 的查询语言，是一个使用基于类型系统来执行查询的服务端运行时的数据（类型系统由你的数据定义）。</span><code class=\"ne-code\"><span class=\"ne-text\">graphql</span></code><span class=\"ne-text\"> 并没有和任何特定数据库或者存储引擎进行绑定，而是依靠现有的代码</span></p></div><p id=\"f23fb9c519ff30bfe03d0b2cc2cac85d_p_6\" class=\"ne-p\"><br></p><h2 id=\"1fa42afe\"><span class=\"ne-text\">入门</span></h2><p id=\"e1b0979b54c1fb29acc1d92ad2159922_p_7\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"b17baaead81d6230290afb9318b5dedf_p_8\" class=\"ne-p\"><span class=\"ne-text\">一个 </span><code class=\"ne-code\"><span class=\"ne-text\">graphql</span></code><span class=\"ne-text\"> 服务是通过定义类型和类型上的字段来创建的，然后给每个类型上的每个字段提供解析函数。例如，一个 </span><code class=\"ne-code\"><span class=\"ne-text\">graphql</span></code><span class=\"ne-text\"> 服务告诉我们当前登陆用户是</span><code class=\"ne-code\"><span class=\"ne-text\">me</span></code><span class=\"ne-text\">，这个用户名称可能像这样：</span></p></div><p id=\"eadc4ec477465f1f239730d987d394b1_p_9\" class=\"ne-p\"><br></p><pre data-language=\"graphql\" id=\"e365f770\" class=\"ne-codeblock language-graphql\">type Query {\n    me: User\n}\n\ntype User {\n    id: ID\n    name: String\n}</pre><p id=\"042da541aac17f869693ba89ebd10d8e_p_10\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"165c4a01e09e9c565c9ddb2d6d1f55dc_p_11\" class=\"ne-p\"><span class=\"ne-text\">一并的还有每个类型上字段的解析函数</span></p></div><p id=\"09a2b5671cf447a1a3529d71c89cf9e1_p_12\" class=\"ne-p\"><br></p><pre data-language=\"javascript\" id=\"f8cd5492\" class=\"ne-codeblock language-javascript\">function Query_me(request) {\n    return request.auth.user\n}\n\nfunction User_name() {\n    return user.getName()\n}</pre><p id=\"2369fafe89fae403079018df6f36b51b_p_13\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"ffaaf8f20408a69db8ec4329523d486a_p_14\" class=\"ne-p\"><span class=\"ne-text\">一旦一个 </span><code class=\"ne-code\"><span class=\"ne-text\">graphql</span></code><span class=\"ne-text\"> 服务运行起来（通常在 </span><code class=\"ne-code\"><span class=\"ne-text\">web</span></code><span class=\"ne-text\"> 服务的一个 </span><code class=\"ne-code\"><span class=\"ne-text\">URL</span></code><span class=\"ne-text\"> 上），它就能接收 </span><code class=\"ne-code\"><span class=\"ne-text\">graphql</span></code><span class=\"ne-text\"> 查询，并验证和执行。接收到的查询首先会被检查确保它只引用了已定义的类型和字段，然后运行执行的解析函数来生成结果。</span></p></div><p id=\"c53070088aadb43ef468f61fca8ca22a_p_15\" class=\"ne-p\"><br></p><pre data-language=\"graphql\" id=\"a5d1c0da\" class=\"ne-codeblock language-graphql\">{\n    me {\n        name\n    }\n}</pre><p id=\"42752743bc6d3f9f6c928fb47989b8c2_p_16\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"80a49bfb60d700955d54f6382c58d083_p_17\" class=\"ne-p\"><span class=\"ne-text\">会产生这样的 </span><code class=\"ne-code\"><span class=\"ne-text\">JSON</span></code><span class=\"ne-text\"> 结果：</span></p></div><p id=\"3f8949dd5527f0c9624c3fd3faefb76f_p_18\" class=\"ne-p\"><br></p><pre data-language=\"graphql\" id=\"dd3cf17b\" class=\"ne-codeblock language-graphql\">{\n    &quot;me&quot;: {\n        &quot;name&quot;: &quot;Luke Skywalker&quot;\n    }\n}</pre><p id=\"bac67e7fcdfb0acc75b3cf54e2dd1141_p_19\" class=\"ne-p\"><br></p><h2 id=\"7170e01a\"><span class=\"ne-text\">查询和变更</span></h2><p id=\"db841a6e995b001085603629a3ace379_p_20\" class=\"ne-p\"><br></p><h3 id=\"daeef0b1\"><span class=\"ne-text\">字段 Fields</span></h3><p id=\"54d418504a63791b75a5f497078fa24a_p_21\" class=\"ne-p\"><br></p><pre data-language=\"graphql\" id=\"62c96a7b\" class=\"ne-codeblock language-graphql\">{\n  hero {\n    name\n  }\n}\n# 生成\n{\n  &quot;data&quot;: {\n    &quot;hero&quot;: {\n      &quot;name&quot;: &quot;R2-D2&quot;\n    }\n  }\n}</pre><p id=\"37928cd1f32681ee4810a9ab9d3c1104_p_22\" class=\"ne-p\"><br></p><pre data-language=\"graphql\" id=\"30f74e81\" class=\"ne-codeblock language-graphql\">{\n  hero {\n    name\n    # 查询可以有备注！\n    friends {\n      name\n    }\n  }\n}\n# 生成\n{\n  &quot;data&quot;: {\n    &quot;hero&quot;: {\n      &quot;name&quot;: &quot;R2-D2&quot;,\n      &quot;friends&quot;: [\n        {\n          &quot;name&quot;: &quot;Luke Skywalker&quot;\n        },\n        {\n          &quot;name&quot;: &quot;Han Solo&quot;\n        },\n        {\n          &quot;name&quot;: &quot;Leia Organa&quot;\n        }\n      ]\n    }\n  }\n}</pre><p id=\"4547a4b65fb57fca5301c6973643450c_p_23\" class=\"ne-p\"><br></p><h3 id=\"4a44f18e\"><span class=\"ne-text\">参数 Arguements</span></h3><p id=\"1f3b4b4a4867a8b756c196b38558d0c4_p_24\" class=\"ne-p\"><br></p><pre data-language=\"graphql\" id=\"cbdc97ba\" class=\"ne-codeblock language-graphql\">{\n  human(id: &quot;1000&quot;) {\n    name\n    height\n  }\n}\n# 生成\n{\n  &quot;data&quot;: {\n    &quot;human&quot;: {\n      &quot;name&quot;: &quot;Luke Skywalker&quot;,\n      &quot;height&quot;: 1.72\n    }\n  }\n}</pre><p id=\"3afe72986fc83f6913935faccbcf69b2_p_25\" class=\"ne-p\"><br></p><pre data-language=\"graphql\" id=\"c09447f7\" class=\"ne-codeblock language-graphql\">{\n  human(id: &quot;1000&quot;) {\n    name\n    height(unit: FOOT)\n  }\n}\n# 生成\n{\n  &quot;data&quot;: {\n    &quot;human&quot;: {\n      &quot;name&quot;: &quot;Luke Skywalker&quot;,\n      &quot;height&quot;: 5.6430448\n    }\n  }\n}</pre><p id=\"b57de0a6a045efefe71d109094be9ddc_p_26\" class=\"ne-p\"><br></p><h3 id=\"ef617325\"><span class=\"ne-text\">别名 Aliases</span></h3><p id=\"4cc44302cfe9be1836a49b383f7e914f_p_27\" class=\"ne-p\"><br></p><pre data-language=\"graphql\" id=\"dd28a211\" class=\"ne-codeblock language-graphql\">{\n  empireHero: hero(episode: EMPIRE) {\n    name\n  }\n  jediHero: hero(episode: JEDI) {\n    name\n  }\n}\n# 生成\n{\n  &quot;data&quot;: {\n    &quot;empireHero&quot;: {\n      &quot;name&quot;: &quot;Luke Skywalker&quot;\n    },\n    &quot;jediHero&quot;: {\n      &quot;name&quot;: &quot;R2-D2&quot;\n    }\n  }\n}</pre><p id=\"d17d837b16c49a0e5c21edc18722e410_p_28\" class=\"ne-p\"><br></p><h3 id=\"ee346038\"><span class=\"ne-text\">片段 Fragments</span></h3><p id=\"d8f02fc6e1d9d5e68b5ff128662a6b29_p_29\" class=\"ne-p\"><br></p><pre data-language=\"graphql\" id=\"894aa6f4\" class=\"ne-codeblock language-graphql\">{\n  leftComparison: hero(episode: EMPIRE) {\n    ...comparisonFields\n  }\n  rightComparison: hero(episode: JEDI) {\n    ...comparisonFields\n  }\n}\n\nfragment comparisonFields on Character {\n  name\n  appearsIn\n  friends {\n    name,\n    id\n  }\n}\n\n# 生成\n{\n  &quot;data&quot;: {\n    &quot;leftComparison&quot;: {\n      &quot;name&quot;: &quot;Luke Skywalker&quot;,\n      &quot;appearsIn&quot;: [\n        &quot;NEWHOPE&quot;,\n        &quot;EMPIRE&quot;,\n        &quot;JEDI&quot;\n      ],\n      &quot;friends&quot;: [\n        {\n          &quot;name&quot;: &quot;Han Solo&quot;,\n          &quot;id&quot;: &quot;1002&quot;\n        },\n        {\n          &quot;name&quot;: &quot;Leia Organa&quot;,\n          &quot;id&quot;: &quot;1003&quot;\n        },\n        {\n          &quot;name&quot;: &quot;C-3PO&quot;,\n          &quot;id&quot;: &quot;2000&quot;\n        },\n        {\n          &quot;name&quot;: &quot;R2-D2&quot;,\n          &quot;id&quot;: &quot;2001&quot;\n        }\n      ]\n    },\n    &quot;rightComparison&quot;: {\n      &quot;name&quot;: &quot;R2-D2&quot;,\n      &quot;appearsIn&quot;: [\n        &quot;NEWHOPE&quot;,\n        &quot;EMPIRE&quot;,\n        &quot;JEDI&quot;\n      ],\n      &quot;friends&quot;: [\n        {\n          &quot;name&quot;: &quot;Luke Skywalker&quot;,\n          &quot;id&quot;: &quot;1000&quot;\n        },\n        {\n          &quot;name&quot;: &quot;Han Solo&quot;,\n          &quot;id&quot;: &quot;1002&quot;\n        },\n        {\n          &quot;name&quot;: &quot;Leia Organa&quot;,\n          &quot;id&quot;: &quot;1003&quot;\n        }\n      ]\n    }\n  }\n}</pre><p id=\"d657ac1e4c3211af4f7dcea889518735_p_30\" class=\"ne-p\"><br></p><h4 id=\"51ba75fd\"><span class=\"ne-text\">在片段内使用变量</span></h4><p id=\"e2e9b10bfede90e88bd47291199e0b55_p_31\" class=\"ne-p\"><br></p><pre data-language=\"graphql\" id=\"053ed84d\" class=\"ne-codeblock language-graphql\"># $first是变量，更改数值之后生成数据会有变化\nquery HeroComparison($first: Int = 4) {\n  leftComparison: hero(episode: EMPIRE) {\n    ...comparisonFields\n  }\n  rightComparison: hero(episode: JEDI) {\n    ...comparisonFields\n  }\n}\n\nfragment comparisonFields on Character {\n  name\n  friendsConnection(first: $first) {\n    totalCount\n    edges {\n      node {\n        name\n      }\n    }\n  }\n}\n\n# 生成\n{\n  &quot;data&quot;: {\n    &quot;leftComparison&quot;: {\n      &quot;name&quot;: &quot;Luke Skywalker&quot;,\n      &quot;friendsConnection&quot;: {\n        &quot;totalCount&quot;: 4,\n        &quot;edges&quot;: [\n          {\n            &quot;node&quot;: {\n              &quot;name&quot;: &quot;Han Solo&quot;\n            }\n          },\n          {\n            &quot;node&quot;: {\n              &quot;name&quot;: &quot;Leia Organa&quot;\n            }\n          },\n          {\n            &quot;node&quot;: {\n              &quot;name&quot;: &quot;C-3PO&quot;\n            }\n          },\n          {\n            &quot;node&quot;: {\n              &quot;name&quot;: &quot;R2-D2&quot;\n            }\n          }\n        ]\n      }\n    },\n    &quot;rightComparison&quot;: {\n      &quot;name&quot;: &quot;R2-D2&quot;,\n      &quot;friendsConnection&quot;: {\n        &quot;totalCount&quot;: 3,\n        &quot;edges&quot;: [\n          {\n            &quot;node&quot;: {\n              &quot;name&quot;: &quot;Luke Skywalker&quot;\n            }\n          },\n          {\n            &quot;node&quot;: {\n              &quot;name&quot;: &quot;Han Solo&quot;\n            }\n          },\n          {\n            &quot;node&quot;: {\n              &quot;name&quot;: &quot;Leia Organa&quot;\n            }\n          }\n        ]\n      }\n    }\n  }\n}</pre><p id=\"bb3e20f1faeaf6bf9497bffd7f381295_p_32\" class=\"ne-p\"><br></p><h3 id=\"a31cc404\"><span class=\"ne-text\">操作名称 Operation name</span></h3><p id=\"73b74e66f7d869f94eb34b57d63eae3f_p_33\" class=\"ne-p\"><br></p><pre data-language=\"graphql\" id=\"997aa65c\" class=\"ne-codeblock language-graphql\"># 示例\nquery HeroNameAndFriends {\n  hero {\n    name\n    friends {\n      name\n    }\n  }\n}\n# 生成\n{\n  &quot;data&quot;: {\n    &quot;hero&quot;: {\n      &quot;name&quot;: &quot;R2-D2&quot;,\n      &quot;friends&quot;: [\n        {\n          &quot;name&quot;: &quot;Luke Skywalker&quot;\n        },\n        {\n          &quot;name&quot;: &quot;Han Solo&quot;\n        },\n        {\n          &quot;name&quot;: &quot;Leia Organa&quot;\n        }\n      ]\n    }\n  }\n}</pre><p id=\"39abba9494ef6da94608fbd0e487aa60_p_34\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"6a46e5ef094e85e613d4766e5b3c8748_li_2\"><span class=\"ne-text\">操作类型</span></li></ul><ul class=\"ne-list-wrap\"><ul ne-level=\"1\" class=\"ne-ul\"><li id=\"dc65ceef9e3ef921229de2a9b5ac6233_li_3\"><code class=\"ne-code\"><span class=\"ne-text\">query</span></code></li></ul></ul><ul class=\"ne-list-wrap\"><ul ne-level=\"1\" class=\"ne-ul\"><li id=\"4abcc59f8a5d402d1b3162e898b169ee_li_4\"><code class=\"ne-code\"><span class=\"ne-text\">mutation</span></code></li></ul></ul><ul class=\"ne-list-wrap\"><ul ne-level=\"1\" class=\"ne-ul\"><li id=\"95e06e6ab2136c73bdda70767a0f054e_li_5\"><code class=\"ne-code\"><span class=\"ne-text\">subscription</span></code></li></ul></ul><ul class=\"ne-ul\"><li id=\"89e4934942179310539aa332e64cd9f1_li_6\"><span class=\"ne-text\">操作名称</span></li></ul><p id=\"86d045d193aa7ac4616d4ea50a0dc92f_p_35\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"65d038ffb113267205f338acc9aa6a8f_p_36\" class=\"ne-p\"><span class=\"ne-text\">有意义和明确的名称</span></p></div><p id=\"ab57135091a86c42cc63ec67ac068a45_p_37\" class=\"ne-p\"><br></p><h3 id=\"1da8f319\"><span class=\"ne-text\">变量 Variables</span></h3><p id=\"82f45866a429f6224b2e92c65bfda254_p_38\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"632eb8694b11a9f48b6802daac7932b0_li_7\"><span class=\"ne-text\">使用变量之前，我们得做三件事</span></li></ul><p id=\"faade82d6cfe8ed09f505bc5d9204fda_p_39\" class=\"ne-p\"><br></p><ol class=\"ne-ol\"><li id=\"16505b5cb7131f5b91ad92e158956949_li_8\"><span class=\"ne-text\">使用 </span><code class=\"ne-code\"><span class=\"ne-text\">$variableName</span></code><span class=\"ne-text\"> 替代查询中的静态值。</span></li></ol><ol start=\"2\" class=\"ne-ol\"><li id=\"f7bd9927099a7c82a4fe5d9e39782cc7_li_9\"><span class=\"ne-text\">声明 </span><code class=\"ne-code\"><span class=\"ne-text\">$variableName</span></code><span class=\"ne-text\"> 为查询接受的变量之一。</span></li></ol><ol start=\"3\" class=\"ne-ol\"><li id=\"9268543fd3ed3cbe4804dcc1618b7629_li_10\"><span class=\"ne-text\">将 </span><code class=\"ne-code\"><span class=\"ne-text\">variableName: value</span></code><span class=\"ne-text\"> 通过传输专用（通常是 JSON）的分离的变量字典中。</span></li></ol><p id=\"17b412f9fc3ec51ada5f566f0d09108c_p_40\" class=\"ne-p\"><br></p><p id=\"5e966930a852b85b1d2992a94dcc7ac8_p_41\" class=\"ne-p\"><span class=\"ne-text\">全部做完之后就像这个样子：</span></p><p id=\"aebb7af96a9ee3c9b7a669f28fef1d7e_p_42\" class=\"ne-p\"><br></p><pre data-language=\"graphql\" id=\"78f392ca\" class=\"ne-codeblock language-graphql\"># { &quot;graphiql&quot;: true, &quot;variables&quot;: { &quot;episode&quot;: JEDI } }\nquery HeroNameAndFriends($episode: Episode) {\n  hero(episode: $episode) {\n    name\n    friends {\n      name\n    }\n  }\n}</pre><p id=\"4930f2b57b08d977b4a7a79433f23490_p_43\" class=\"ne-p\"><br></p><h4 id=\"5aa3dffc\"><span class=\"ne-text\">变量定义 Variable definitions</span></h4><p id=\"157b805d005afe38c7c2d5198b31ee6e_p_44\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><ol class=\"ne-ol\"><li id=\"13950d2fc1ba337be73e0d5f0b8ac917_li_11\"><span class=\"ne-text\">变量前缀必须为 </span><code class=\"ne-code\"><span class=\"ne-text\">$</span></code><span class=\"ne-text\">，后跟其类型</span></li></ol><ol start=\"2\" class=\"ne-ol\"><li id=\"32e7fadac4307b8fa43cd9a40d95d5bd_li_12\"><span class=\"ne-text\">所有声明的变量都必须是 </span><em><span class=\"ne-text\">标量</span></em><span class=\"ne-text\">、</span><em><span class=\"ne-text\">枚举型</span></em><span class=\"ne-text\"> 或者 </span><em><span class=\"ne-text\">输入对象类型</span></em><span class=\"ne-text\">。</span></li></ol><ol start=\"3\" class=\"ne-ol\"><li id=\"15656d4852785db34c8650cbe4d9e502_li_13\"><span class=\"ne-text\">变量定义可以是可选的或者必要的。上例中，</span><code class=\"ne-code\"><span class=\"ne-text\">Episode</span></code><span class=\"ne-text\"> 后并没有 </span><code class=\"ne-code\"><span class=\"ne-text\">!</span></code><span class=\"ne-text\">，因此其是可选的。</span></li></ol></div><p id=\"0e4b859961c17882302ca1144adad96d_p_45\" class=\"ne-p\"><br></p><h4 id=\"a4a32b57\"><span class=\"ne-text\">默认变量 Default variables</span></h4><p id=\"e81b6efc8e2153cf8aa53e3b04d7f22c_p_46\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"d429c0a07e373122bdf8af3f973f3991_p_47\" class=\"ne-p\"><span class=\"ne-text\">可以通过在查询中的类型定义后面附带默认值的方式，将默认值赋给变量。</span></p></div><p id=\"aa95668f5a65b03373d1b0b3f9f8d3a6_p_48\" class=\"ne-p\"><br></p><pre data-language=\"graphql\" id=\"e6f91c72\" class=\"ne-codeblock language-graphql\">query HeroNameAndFriends($episode: Episode = &quot;JEDI&quot;) {\n  hero(episode: $episode) {\n    name\n    friends {\n      name\n    }\n  }\n}</pre><p id=\"233f53790c0b9d757f931748dd4d9e1e_p_49\" class=\"ne-p\"><br></p><h3 id=\"8594c190\"><span class=\"ne-text\">指令（</span><code class=\"ne-code\"><span class=\"ne-text\">Directives</span></code><span class=\"ne-text\">）</span></h3><p id=\"4108a5bc411c7547dc6876b612b07f81_p_50\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"9f78e936a8d57adb44d7dc292826f67b_li_14\"><code class=\"ne-code\"><span class=\"ne-text\">@include(if: Boolean)</span></code><span class=\"ne-text\"> 仅在参数为 </span><code class=\"ne-code\"><span class=\"ne-text\">true</span></code><span class=\"ne-text\"> 时，包含此字段。</span></li></ul><ul class=\"ne-ul\"><li id=\"1e33c8988ee5713b1855b36cd561115b_li_15\"><code class=\"ne-code\"><span class=\"ne-text\">@skip(if: Boolean)</span></code><span class=\"ne-text\"> 如果参数为 </span><code class=\"ne-code\"><span class=\"ne-text\">true</span></code><span class=\"ne-text\">，跳过此字段。</span></li></ul><p id=\"d3ff43f9faa22377838e1e2c0834a861_p_51\" class=\"ne-p\"><br></p><pre data-language=\"graphql\" id=\"804768d6\" class=\"ne-codeblock language-graphql\">query Hero($episode: Episode, $withFriends: Boolean!) {\n  hero(episode: $episode) {\n    name\n    friends @include(if: $withFriends) {\n      name\n    }\n  }\n}\n\n# 传递参数, 修改 withFriends 字段的值会生成不同的结果\n{\n  &quot;episode&quot;: &quot;JEDI&quot;,\n  &quot;withFriends&quot;: true\n}\n\n# 生成\n{\n  &quot;data&quot;: {\n    &quot;hero&quot;: {\n      &quot;name&quot;: &quot;R2-D2&quot;,\n      &quot;friends&quot;: [\n        {\n          &quot;name&quot;: &quot;Luke Skywalker&quot;\n        },\n        {\n          &quot;name&quot;: &quot;Han Solo&quot;\n        },\n        {\n          &quot;name&quot;: &quot;Leia Organa&quot;\n        }\n      ]\n    }\n  }\n}</pre><p id=\"bc2359f7bb1e32241fa27f528e60a125_p_52\" class=\"ne-p\"><br></p><h3 id=\"e07f6c14\"><span class=\"ne-text\">变更（Mutations）</span></h3><p id=\"0c6a7643ebb3931744a90899eb00ce0b_p_53\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"24239d11a4de75fcb21f6bcf9237487b_p_54\" class=\"ne-p\"><code class=\"ne-code\"><span class=\"ne-text\">GraphQL</span></code><span class=\"ne-text\"> 的大部分讨论集中在数据获取，但是任何完整的数据平台也都需要一个改变服务端数据的方法。</span></p></div><p id=\"7188e3d4590c731c34019643bbb3ba96_p_55\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"cbeea614e57c51c583536bed2c735757_p_56\" class=\"ne-p\"><code class=\"ne-code\"><span class=\"ne-text\">REST</span></code><span class=\"ne-text\"> 中，任何请求都可能最后导致一些服务端副作用，但是约定上建议不要使用 </span><code class=\"ne-code\"><span class=\"ne-text\">GET</span></code><span class=\"ne-text\"> 请求来修改数据。</span><code class=\"ne-code\"><span class=\"ne-text\">GraphQL</span></code><span class=\"ne-text\"> 也是类似 —— 技术上而言，任何查询都可以被实现为导致数据写入。然而，建一个约定来规范任何导致写入的操作都应该显式通过变更（</span><code class=\"ne-code\"><span class=\"ne-text\">mutation</span></code><span class=\"ne-text\">）来发送。</span></p></div><p id=\"67592880a847e874a0da3af4d564ef1f_p_57\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"bbb31a4fdee87625ab38ddf58ab95afd_p_58\" class=\"ne-p\"><span class=\"ne-text\">就如同查询一样，如果任何变更字段返回一个对象类型，你也能请求其嵌套字段。获取一个对象变更后的新状态也是十分有用的。我们来看看一个变更例子：</span></p></div><p id=\"1b325e2e939e9ae8679222558eaaceb6_p_59\" class=\"ne-p\"><br></p><pre data-language=\"graphql\" id=\"ef6d777a\" class=\"ne-codeblock language-graphql\">mutation CreateReviewForEpisode($ep: Episode!, $review: ReviewInput!) {\n  createReview(episode: $ep, review: $review) {\n    stars\n    commentary\n  }\n}\n\n# 变更的数据\n{\n  &quot;ep&quot;: &quot;JEDI&quot;,\n  &quot;review&quot;: {\n    &quot;stars&quot;: 5,\n    &quot;commentary&quot;: &quot;This is a great movie!&quot;\n  }\n}\n\n# 生成\n{\n  &quot;data&quot;: {\n    &quot;createReview&quot;: {\n      &quot;stars&quot;: 5,\n      &quot;commentary&quot;: &quot;This is a great movie!&quot;\n    }\n  }\n}</pre><p id=\"daa3e859dfee1b8825cb9c219dcb2526_p_60\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"8c031490175a25a1a892b36b6a304426_p_61\" class=\"ne-p\"><span class=\"ne-text\">注意 </span><code class=\"ne-code\"><span class=\"ne-text\">createReview</span></code><span class=\"ne-text\"> 字段如何返回了新建的 </span><code class=\"ne-code\"><span class=\"ne-text\">review</span></code><span class=\"ne-text\"> 的 </span><code class=\"ne-code\"><span class=\"ne-text\">stars</span></code><span class=\"ne-text\"> 和 </span><code class=\"ne-code\"><span class=\"ne-text\">commentary</span></code><span class=\"ne-text\"> 字段。这在变更已有数据时特别有用，例如，当一个字段自增的时候，我们可以在一个请求中变更并查询这个字段的新值。</span></p></div><p id=\"9b034733f43578c770243b15c945bc07_p_62\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"3a45c5e405b86d3035af46d85e39e167_p_63\" class=\"ne-p\"><span class=\"ne-text\">你也可能注意到，这个例子中，我们传递的 </span><code class=\"ne-code\"><span class=\"ne-text\">review</span></code><span class=\"ne-text\"> 变量并非标量。它是一个</span><em><span class=\"ne-text\">输入对象类型</span></em><span class=\"ne-text\">，一种特殊的对象类型，可以作为参数传递。</span></p></div><p id=\"b3add770127d8c2a5064673aa8a9731f_p_64\" class=\"ne-p\"><br></p><h4 id=\"687c460b\"><span class=\"ne-text\">变更中的多个字段（</span><code class=\"ne-code\"><span class=\"ne-text\">Multiple fields in mutations</span></code><span class=\"ne-text\">）</span></h4><p id=\"2a81d6eed31dfd1dc3c193bbdb75c1a1_p_65\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"55d974d56f4f9a398d08a5b56fd58a19_p_66\" class=\"ne-p\"><span class=\"ne-text\">一个变更也能包含多个字段，一如查询。查询和变更之间名称之外的一个重要区别是：</span><em><span class=\"ne-text\">查询字段时，是并行执行，而变更字段时，是线性执行，一个接着一个。</span></em></p></div><p id=\"152302cc03cd3433e252fd8fbe4bade7_p_67\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"dab78e1bf71c382e9f3552836a53b71c_p_68\" class=\"ne-p\"><span class=\"ne-text\">这意味着如果我们一个请求中发送了两个 </span><code class=\"ne-code\"><span class=\"ne-text\">incrementCredits</span></code><span class=\"ne-text\"> 变更，第一个保证在第二个之前执行，以确保我们不会出现竞态。</span></p></div><p id=\"956e0d4312e941b77cd57ec35c294aff_p_69\" class=\"ne-p\"><br></p><h3 id=\"3b76c582\"><span class=\"ne-text\">内联片段（</span><code class=\"ne-code\"><span class=\"ne-text\">Inline Fragments</span></code><span class=\"ne-text\">）</span></h3><p id=\"67523e0fa28fe87849ce38cd391e3347_p_70\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"1ab91864b863a8487097f91d5c259389_p_71\" class=\"ne-p\"><span class=\"ne-text\">如果你查询的字段返回的是接口或者联合类型，那么你可能需要使用</span><em><span class=\"ne-text\">内联片段</span></em><span class=\"ne-text\">来取出下层具体类型的数据：</span></p></div><p id=\"200b796b4b1f5a36aa12caae6b6fa3d8_p_72\" class=\"ne-p\"><br></p><pre data-language=\"graphql\" id=\"4a3a1bd0\" class=\"ne-codeblock language-graphql\">query HeroForEpisode($ep: Episode!) {\n  hero(episode: $ep) {\n    name\n    ... on Droid {\n      primaryFunction\n    }\n    ... on Human {\n      height\n    }\n  }\n}\n\n# 传递的变量\n{\n  &quot;ep&quot;: &quot;JEDI&quot;\n}\n\n# 生成\n{\n  &quot;data&quot;: {\n    &quot;hero&quot;: {\n      &quot;name&quot;: &quot;R2-D2&quot;,\n      &quot;primaryFunction&quot;: &quot;Astromech&quot;\n    }\n  }\n}</pre><p id=\"7e9db6e1dddd1090f9cbf7742b89f0d6_p_73\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"cdc725a3673128fb375d1a38914155eb_p_74\" class=\"ne-p\"><span class=\"ne-text\">这个查询中，</span><code class=\"ne-code\"><span class=\"ne-text\">hero</span></code><span class=\"ne-text\"> 字段返回 </span><code class=\"ne-code\"><span class=\"ne-text\">Character</span></code><span class=\"ne-text\"> 类型，取决于 </span><code class=\"ne-code\"><span class=\"ne-text\">episode</span></code><span class=\"ne-text\"> 参数，其可能是 </span><code class=\"ne-code\"><span class=\"ne-text\">Human</span></code><span class=\"ne-text\"> 或者 </span><code class=\"ne-code\"><span class=\"ne-text\">Droid</span></code><span class=\"ne-text\"> 类型。在直接选择的情况下，你只能请求 </span><code class=\"ne-code\"><span class=\"ne-text\">Character</span></code><span class=\"ne-text\"> 上存在的字段，譬如 </span><code class=\"ne-code\"><span class=\"ne-text\">name</span></code><span class=\"ne-text\">。</span></p></div><p id=\"cee026a6997be2fe2ca3b5d6e2ce2bf0_p_75\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"b7cd4f7ed03308995a5669d3dd0c4664_p_76\" class=\"ne-p\"><span class=\"ne-text\">如果要请求具体类型上的字段，你需要使用一个类型条件</span><strong><span class=\"ne-text\">内联片段</span></strong><span class=\"ne-text\">。因为第一个片段标注为 </span><code class=\"ne-code\"><span class=\"ne-text\">... on Droid</span></code><span class=\"ne-text\">，</span><code class=\"ne-code\"><span class=\"ne-text\">primaryFunction</span></code><span class=\"ne-text\"> 仅在 </span><code class=\"ne-code\"><span class=\"ne-text\">hero</span></code><span class=\"ne-text\"> 返回的 </span><code class=\"ne-code\"><span class=\"ne-text\">Character</span></code><span class=\"ne-text\"> 为 </span><code class=\"ne-code\"><span class=\"ne-text\">Droid</span></code><span class=\"ne-text\"> 类型时才会执行。同理适用于 </span><code class=\"ne-code\"><span class=\"ne-text\">Human</span></code><span class=\"ne-text\"> 类型的 </span><code class=\"ne-code\"><span class=\"ne-text\">height</span></code><span class=\"ne-text\"> 字段。</span></p></div><p id=\"9fc1a1e32cf7c324fef5888bc3009382_p_77\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"94fc19fa8346e84bea0c21f882653ec5_p_78\" class=\"ne-p\"><span class=\"ne-text\">具名片段也可以用于同样的情况，因为具名片段总是附带了一个类型。</span></p></div><p id=\"f855fcce122120d1233c03106e601338_p_79\" class=\"ne-p\"><br></p><h3 id=\"8651d705\"><span class=\"ne-text\">元字段（</span><code class=\"ne-code\"><span class=\"ne-text\">Meta fields</span></code><span class=\"ne-text\">）</span></h3><p id=\"cacc5e28cdefa24e262c83e0ab2a3ade_p_80\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"bedf9694acf9a99513491d48686ee4a6_p_81\" class=\"ne-p\"><span class=\"ne-text\">某些情况下，你并不知道你将从 </span><code class=\"ne-code\"><span class=\"ne-text\">GraphQL</span></code><span class=\"ne-text\"> 服务获得什么类型，这时候你就需要一些方法在客户端来决定如何处理这些数据。</span><code class=\"ne-code\"><span class=\"ne-text\">GraphQL</span></code><span class=\"ne-text\"> 允许你在查询的任何位置请求 </span><code class=\"ne-code\"><span class=\"ne-text\">__typename</span></code><span class=\"ne-text\">，一个元字段，以获得那个位置的对象类型名称。</span></p></div><p id=\"ede07f6666baf1587414d7171c5dd877_p_82\" class=\"ne-p\"><br></p><pre data-language=\"graphql\" id=\"409d88f9\" class=\"ne-codeblock language-graphql\">{\n  search(text: &quot;an&quot;) {\n    __typename\n    ... on Human {\n      name\n    }\n    ... on Droid {\n      name\n    }\n    ... on Starship {\n      name\n    }\n  }\n}\n# 生成\n{\n  &quot;data&quot;: {\n    &quot;search&quot;: [\n      {\n        &quot;__typename&quot;: &quot;Human&quot;,\n        &quot;name&quot;: &quot;Han Solo&quot;\n      },\n      {\n        &quot;__typename&quot;: &quot;Human&quot;,\n        &quot;name&quot;: &quot;Leia Organa&quot;\n      },\n      {\n        &quot;__typename&quot;: &quot;Starship&quot;,\n        &quot;name&quot;: &quot;TIE Advanced x1&quot;\n      }\n    ]\n  }\n}</pre><p id=\"187832c794b601f7094c1a9b20086a6b_p_83\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"664195112db58f8be24455396b1a89e1_p_84\" class=\"ne-p\"><span class=\"ne-text\">上面的查询中，</span><code class=\"ne-code\"><span class=\"ne-text\">search</span></code><span class=\"ne-text\"> 返回了一个联合类型，其可能是三种选项之一。没有 </span><code class=\"ne-code\"><span class=\"ne-text\">__typename</span></code><span class=\"ne-text\"> 字段的情况下，几乎不可能在客户端分辨开这三个不同的类型。</span></p></div><p id=\"bd02ded472df593f8e23bb50569c5ce4_p_85\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"d312a7d47db1dfda8afdb1a1d2f452cc_p_86\" class=\"ne-p\"><code class=\"ne-code\"><span class=\"ne-text\">GraphQL</span></code><span class=\"ne-text\"> 服务提供了不少元字段，剩下的部分用于描述 </span><a href=\"https://graphql.cn/learn/introspection/\" data-href=\"https://graphql.cn/learn/introspection/\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">内省</span></a><span class=\"ne-text\"> 系统</span></p></div></div>",
  "body": "graphql 是一种 api 查询语言。\n<a name=\"75e71c39\"></a>\n## 什么是 graphql ?\n\n> `graphql` 是一个用于 `API` 的查询语言，是一个使用基于类型系统来执行查询的服务端运行时的数据（类型系统由你的数据定义）。`graphql` 并没有和任何特定数据库或者存储引擎进行绑定，而是依靠现有的代码\n\n\n<a name=\"1fa42afe\"></a>\n## 入门\n\n> 一个 `graphql` 服务是通过定义类型和类型上的字段来创建的，然后给每个类型上的每个字段提供解析函数。例如，一个 `graphql` 服务告诉我们当前登陆用户是`me`，这个用户名称可能像这样：\n\n\n```graphql\ntype Query {\n    me: User\n}\n\ntype User {\n    id: ID\n    name: String\n}\n```\n\n> 一并的还有每个类型上字段的解析函数\n\n\n```javascript\nfunction Query_me(request) {\n    return request.auth.user\n}\n\nfunction User_name() {\n    return user.getName()\n}\n```\n\n> 一旦一个 `graphql` 服务运行起来（通常在 `web` 服务的一个 `URL` 上），它就能接收 `graphql` 查询，并验证和执行。接收到的查询首先会被检查确保它只引用了已定义的类型和字段，然后运行执行的解析函数来生成结果。\n\n\n```graphql\n{\n    me {\n        name\n    }\n}\n```\n\n> 会产生这样的 `JSON` 结果：\n\n\n```graphql\n{\n    \"me\": {\n        \"name\": \"Luke Skywalker\"\n    }\n}\n```\n\n<a name=\"7170e01a\"></a>\n## 查询和变更\n\n<a name=\"daeef0b1\"></a>\n### 字段 Fields\n\n```graphql\n{\n  hero {\n    name\n  }\n}\n# 生成\n{\n  \"data\": {\n    \"hero\": {\n      \"name\": \"R2-D2\"\n    }\n  }\n}\n```\n\n```graphql\n{\n  hero {\n    name\n    # 查询可以有备注！\n    friends {\n      name\n    }\n  }\n}\n# 生成\n{\n  \"data\": {\n    \"hero\": {\n      \"name\": \"R2-D2\",\n      \"friends\": [\n        {\n          \"name\": \"Luke Skywalker\"\n        },\n        {\n          \"name\": \"Han Solo\"\n        },\n        {\n          \"name\": \"Leia Organa\"\n        }\n      ]\n    }\n  }\n}\n```\n\n<a name=\"4a44f18e\"></a>\n### 参数 Arguements\n\n```graphql\n{\n  human(id: \"1000\") {\n    name\n    height\n  }\n}\n# 生成\n{\n  \"data\": {\n    \"human\": {\n      \"name\": \"Luke Skywalker\",\n      \"height\": 1.72\n    }\n  }\n}\n```\n\n```graphql\n{\n  human(id: \"1000\") {\n    name\n    height(unit: FOOT)\n  }\n}\n# 生成\n{\n  \"data\": {\n    \"human\": {\n      \"name\": \"Luke Skywalker\",\n      \"height\": 5.6430448\n    }\n  }\n}\n```\n\n<a name=\"ef617325\"></a>\n### 别名 Aliases\n\n```graphql\n{\n  empireHero: hero(episode: EMPIRE) {\n    name\n  }\n  jediHero: hero(episode: JEDI) {\n    name\n  }\n}\n# 生成\n{\n  \"data\": {\n    \"empireHero\": {\n      \"name\": \"Luke Skywalker\"\n    },\n    \"jediHero\": {\n      \"name\": \"R2-D2\"\n    }\n  }\n}\n```\n\n<a name=\"ee346038\"></a>\n### 片段 Fragments\n\n```graphql\n{\n  leftComparison: hero(episode: EMPIRE) {\n    ...comparisonFields\n  }\n  rightComparison: hero(episode: JEDI) {\n    ...comparisonFields\n  }\n}\n\nfragment comparisonFields on Character {\n  name\n  appearsIn\n  friends {\n    name,\n    id\n  }\n}\n\n# 生成\n{\n  \"data\": {\n    \"leftComparison\": {\n      \"name\": \"Luke Skywalker\",\n      \"appearsIn\": [\n        \"NEWHOPE\",\n        \"EMPIRE\",\n        \"JEDI\"\n      ],\n      \"friends\": [\n        {\n          \"name\": \"Han Solo\",\n          \"id\": \"1002\"\n        },\n        {\n          \"name\": \"Leia Organa\",\n          \"id\": \"1003\"\n        },\n        {\n          \"name\": \"C-3PO\",\n          \"id\": \"2000\"\n        },\n        {\n          \"name\": \"R2-D2\",\n          \"id\": \"2001\"\n        }\n      ]\n    },\n    \"rightComparison\": {\n      \"name\": \"R2-D2\",\n      \"appearsIn\": [\n        \"NEWHOPE\",\n        \"EMPIRE\",\n        \"JEDI\"\n      ],\n      \"friends\": [\n        {\n          \"name\": \"Luke Skywalker\",\n          \"id\": \"1000\"\n        },\n        {\n          \"name\": \"Han Solo\",\n          \"id\": \"1002\"\n        },\n        {\n          \"name\": \"Leia Organa\",\n          \"id\": \"1003\"\n        }\n      ]\n    }\n  }\n}\n```\n\n<a name=\"51ba75fd\"></a>\n#### 在片段内使用变量\n\n```graphql\n# $first是变量，更改数值之后生成数据会有变化\nquery HeroComparison($first: Int = 4) {\n  leftComparison: hero(episode: EMPIRE) {\n    ...comparisonFields\n  }\n  rightComparison: hero(episode: JEDI) {\n    ...comparisonFields\n  }\n}\n\nfragment comparisonFields on Character {\n  name\n  friendsConnection(first: $first) {\n    totalCount\n    edges {\n      node {\n        name\n      }\n    }\n  }\n}\n\n# 生成\n{\n  \"data\": {\n    \"leftComparison\": {\n      \"name\": \"Luke Skywalker\",\n      \"friendsConnection\": {\n        \"totalCount\": 4,\n        \"edges\": [\n          {\n            \"node\": {\n              \"name\": \"Han Solo\"\n            }\n          },\n          {\n            \"node\": {\n              \"name\": \"Leia Organa\"\n            }\n          },\n          {\n            \"node\": {\n              \"name\": \"C-3PO\"\n            }\n          },\n          {\n            \"node\": {\n              \"name\": \"R2-D2\"\n            }\n          }\n        ]\n      }\n    },\n    \"rightComparison\": {\n      \"name\": \"R2-D2\",\n      \"friendsConnection\": {\n        \"totalCount\": 3,\n        \"edges\": [\n          {\n            \"node\": {\n              \"name\": \"Luke Skywalker\"\n            }\n          },\n          {\n            \"node\": {\n              \"name\": \"Han Solo\"\n            }\n          },\n          {\n            \"node\": {\n              \"name\": \"Leia Organa\"\n            }\n          }\n        ]\n      }\n    }\n  }\n}\n```\n\n<a name=\"a31cc404\"></a>\n### 操作名称 Operation name\n\n```graphql\n# 示例\nquery HeroNameAndFriends {\n  hero {\n    name\n    friends {\n      name\n    }\n  }\n}\n# 生成\n{\n  \"data\": {\n    \"hero\": {\n      \"name\": \"R2-D2\",\n      \"friends\": [\n        {\n          \"name\": \"Luke Skywalker\"\n        },\n        {\n          \"name\": \"Han Solo\"\n        },\n        {\n          \"name\": \"Leia Organa\"\n        }\n      ]\n    }\n  }\n}\n```\n\n- 操作类型\n   - `query`\n   - `mutation`\n   - `subscription`\n- 操作名称\n\n> 有意义和明确的名称\n\n\n<a name=\"1da8f319\"></a>\n### 变量 Variables\n\n- 使用变量之前，我们得做三件事\n\n1. 使用 `$variableName` 替代查询中的静态值。\n2. 声明 `$variableName` 为查询接受的变量之一。\n3. 将 `variableName: value` 通过传输专用（通常是 JSON）的分离的变量字典中。\n\n全部做完之后就像这个样子：\n\n```graphql\n# { \"graphiql\": true, \"variables\": { \"episode\": JEDI } }\nquery HeroNameAndFriends($episode: Episode) {\n  hero(episode: $episode) {\n    name\n    friends {\n      name\n    }\n  }\n}\n```\n\n<a name=\"5aa3dffc\"></a>\n#### 变量定义 Variable definitions\n\n> 1. 变量前缀必须为 `$`，后跟其类型\n> 2. 所有声明的变量都必须是 _标量_、_枚举型_ 或者 _输入对象类型_。\n> 3. 变量定义可以是可选的或者必要的。上例中，`Episode` 后并没有 `!`，因此其是可选的。\n\n\n<a name=\"a4a32b57\"></a>\n#### 默认变量 Default variables\n\n> 可以通过在查询中的类型定义后面附带默认值的方式，将默认值赋给变量。\n\n\n```graphql\nquery HeroNameAndFriends($episode: Episode = \"JEDI\") {\n  hero(episode: $episode) {\n    name\n    friends {\n      name\n    }\n  }\n}\n```\n\n<a name=\"8594c190\"></a>\n### 指令（`Directives`）\n\n- `@include(if: Boolean)` 仅在参数为 `true` 时，包含此字段。\n- `@skip(if: Boolean)` 如果参数为 `true`，跳过此字段。\n\n```graphql\nquery Hero($episode: Episode, $withFriends: Boolean!) {\n  hero(episode: $episode) {\n    name\n    friends @include(if: $withFriends) {\n      name\n    }\n  }\n}\n\n# 传递参数, 修改 withFriends 字段的值会生成不同的结果\n{\n  \"episode\": \"JEDI\",\n  \"withFriends\": true\n}\n\n# 生成\n{\n  \"data\": {\n    \"hero\": {\n      \"name\": \"R2-D2\",\n      \"friends\": [\n        {\n          \"name\": \"Luke Skywalker\"\n        },\n        {\n          \"name\": \"Han Solo\"\n        },\n        {\n          \"name\": \"Leia Organa\"\n        }\n      ]\n    }\n  }\n}\n```\n\n<a name=\"e07f6c14\"></a>\n### 变更（Mutations）\n\n> `GraphQL` 的大部分讨论集中在数据获取，但是任何完整的数据平台也都需要一个改变服务端数据的方法。\n\n\n> `REST` 中，任何请求都可能最后导致一些服务端副作用，但是约定上建议不要使用 `GET` 请求来修改数据。`GraphQL` 也是类似 —— 技术上而言，任何查询都可以被实现为导致数据写入。然而，建一个约定来规范任何导致写入的操作都应该显式通过变更（`mutation`）来发送。\n\n\n> 就如同查询一样，如果任何变更字段返回一个对象类型，你也能请求其嵌套字段。获取一个对象变更后的新状态也是十分有用的。我们来看看一个变更例子：\n\n\n```graphql\nmutation CreateReviewForEpisode($ep: Episode!, $review: ReviewInput!) {\n  createReview(episode: $ep, review: $review) {\n    stars\n    commentary\n  }\n}\n\n# 变更的数据\n{\n  \"ep\": \"JEDI\",\n  \"review\": {\n    \"stars\": 5,\n    \"commentary\": \"This is a great movie!\"\n  }\n}\n\n# 生成\n{\n  \"data\": {\n    \"createReview\": {\n      \"stars\": 5,\n      \"commentary\": \"This is a great movie!\"\n    }\n  }\n}\n```\n\n> 注意 `createReview` 字段如何返回了新建的 `review` 的 `stars` 和 `commentary` 字段。这在变更已有数据时特别有用，例如，当一个字段自增的时候，我们可以在一个请求中变更并查询这个字段的新值。\n\n\n> 你也可能注意到，这个例子中，我们传递的 `review` 变量并非标量。它是一个_输入对象类型_，一种特殊的对象类型，可以作为参数传递。\n\n\n<a name=\"687c460b\"></a>\n#### 变更中的多个字段（`Multiple fields in mutations`）\n\n> 一个变更也能包含多个字段，一如查询。查询和变更之间名称之外的一个重要区别是：_查询字段时，是并行执行，而变更字段时，是线性执行，一个接着一个。_\n\n\n> 这意味着如果我们一个请求中发送了两个 `incrementCredits` 变更，第一个保证在第二个之前执行，以确保我们不会出现竞态。\n\n\n<a name=\"3b76c582\"></a>\n### 内联片段（`Inline Fragments`）\n\n> 如果你查询的字段返回的是接口或者联合类型，那么你可能需要使用_内联片段_来取出下层具体类型的数据：\n\n\n```graphql\nquery HeroForEpisode($ep: Episode!) {\n  hero(episode: $ep) {\n    name\n    ... on Droid {\n      primaryFunction\n    }\n    ... on Human {\n      height\n    }\n  }\n}\n\n# 传递的变量\n{\n  \"ep\": \"JEDI\"\n}\n\n# 生成\n{\n  \"data\": {\n    \"hero\": {\n      \"name\": \"R2-D2\",\n      \"primaryFunction\": \"Astromech\"\n    }\n  }\n}\n```\n\n> 这个查询中，`hero` 字段返回 `Character` 类型，取决于 `episode` 参数，其可能是 `Human` 或者 `Droid` 类型。在直接选择的情况下，你只能请求 `Character` 上存在的字段，譬如 `name`。\n\n\n> 如果要请求具体类型上的字段，你需要使用一个类型条件**内联片段**。因为第一个片段标注为 `... on Droid`，`primaryFunction` 仅在 `hero` 返回的 `Character` 为 `Droid` 类型时才会执行。同理适用于 `Human` 类型的 `height` 字段。\n\n\n> 具名片段也可以用于同样的情况，因为具名片段总是附带了一个类型。\n\n\n<a name=\"8651d705\"></a>\n### 元字段（`Meta fields`）\n\n> 某些情况下，你并不知道你将从 `GraphQL` 服务获得什么类型，这时候你就需要一些方法在客户端来决定如何处理这些数据。`GraphQL` 允许你在查询的任何位置请求 `__typename`，一个元字段，以获得那个位置的对象类型名称。\n\n\n```graphql\n{\n  search(text: \"an\") {\n    __typename\n    ... on Human {\n      name\n    }\n    ... on Droid {\n      name\n    }\n    ... on Starship {\n      name\n    }\n  }\n}\n# 生成\n{\n  \"data\": {\n    \"search\": [\n      {\n        \"__typename\": \"Human\",\n        \"name\": \"Han Solo\"\n      },\n      {\n        \"__typename\": \"Human\",\n        \"name\": \"Leia Organa\"\n      },\n      {\n        \"__typename\": \"Starship\",\n        \"name\": \"TIE Advanced x1\"\n      }\n    ]\n  }\n}\n```\n\n> 上面的查询中，`search` 返回了一个联合类型，其可能是三种选项之一。没有 `__typename` 字段的情况下，几乎不可能在客户端分辨开这三个不同的类型。\n\n\n> `GraphQL` 服务提供了不少元字段，剩下的部分用于描述 [内省](https://graphql.cn/learn/introspection/) 系统\n\n",
  "body_html": "<!doctype html><div class=\"lake-content\" typography=\"traditional\"><p id=\"7d10983d09d39929a6d2fab883e7828f\" class=\"ne-p\"><span class=\"ne-text\">graphql 是一种 api 查询语言。</span></p><h2 id=\"75e71c39\"><span class=\"ne-text\">什么是 graphql ?</span></h2><p id=\"0c4d068e4aede2bc9d552ce387999b01_p_4\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"4ae36d99b0c55f82785eb604256ad6f2_p_5\" class=\"ne-p\"><code class=\"ne-code\"><span class=\"ne-text\">graphql</span></code><span class=\"ne-text\"> 是一个用于 </span><code class=\"ne-code\"><span class=\"ne-text\">API</span></code><span class=\"ne-text\"> 的查询语言，是一个使用基于类型系统来执行查询的服务端运行时的数据（类型系统由你的数据定义）。</span><code class=\"ne-code\"><span class=\"ne-text\">graphql</span></code><span class=\"ne-text\"> 并没有和任何特定数据库或者存储引擎进行绑定，而是依靠现有的代码</span></p></div><p id=\"f23fb9c519ff30bfe03d0b2cc2cac85d_p_6\" class=\"ne-p\"><br></p><h2 id=\"1fa42afe\"><span class=\"ne-text\">入门</span></h2><p id=\"e1b0979b54c1fb29acc1d92ad2159922_p_7\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"b17baaead81d6230290afb9318b5dedf_p_8\" class=\"ne-p\"><span class=\"ne-text\">一个 </span><code class=\"ne-code\"><span class=\"ne-text\">graphql</span></code><span class=\"ne-text\"> 服务是通过定义类型和类型上的字段来创建的，然后给每个类型上的每个字段提供解析函数。例如，一个 </span><code class=\"ne-code\"><span class=\"ne-text\">graphql</span></code><span class=\"ne-text\"> 服务告诉我们当前登陆用户是</span><code class=\"ne-code\"><span class=\"ne-text\">me</span></code><span class=\"ne-text\">，这个用户名称可能像这样：</span></p></div><p id=\"eadc4ec477465f1f239730d987d394b1_p_9\" class=\"ne-p\"><br></p><pre data-language=\"graphql\" id=\"e365f770\" class=\"ne-codeblock language-graphql\">type Query {\n    me: User\n}\n\ntype User {\n    id: ID\n    name: String\n}</pre><p id=\"042da541aac17f869693ba89ebd10d8e_p_10\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"165c4a01e09e9c565c9ddb2d6d1f55dc_p_11\" class=\"ne-p\"><span class=\"ne-text\">一并的还有每个类型上字段的解析函数</span></p></div><p id=\"09a2b5671cf447a1a3529d71c89cf9e1_p_12\" class=\"ne-p\"><br></p><pre data-language=\"javascript\" id=\"f8cd5492\" class=\"ne-codeblock language-javascript\">function Query_me(request) {\n    return request.auth.user\n}\n\nfunction User_name() {\n    return user.getName()\n}</pre><p id=\"2369fafe89fae403079018df6f36b51b_p_13\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"ffaaf8f20408a69db8ec4329523d486a_p_14\" class=\"ne-p\"><span class=\"ne-text\">一旦一个 </span><code class=\"ne-code\"><span class=\"ne-text\">graphql</span></code><span class=\"ne-text\"> 服务运行起来（通常在 </span><code class=\"ne-code\"><span class=\"ne-text\">web</span></code><span class=\"ne-text\"> 服务的一个 </span><code class=\"ne-code\"><span class=\"ne-text\">URL</span></code><span class=\"ne-text\"> 上），它就能接收 </span><code class=\"ne-code\"><span class=\"ne-text\">graphql</span></code><span class=\"ne-text\"> 查询，并验证和执行。接收到的查询首先会被检查确保它只引用了已定义的类型和字段，然后运行执行的解析函数来生成结果。</span></p></div><p id=\"c53070088aadb43ef468f61fca8ca22a_p_15\" class=\"ne-p\"><br></p><pre data-language=\"graphql\" id=\"a5d1c0da\" class=\"ne-codeblock language-graphql\">{\n    me {\n        name\n    }\n}</pre><p id=\"42752743bc6d3f9f6c928fb47989b8c2_p_16\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"80a49bfb60d700955d54f6382c58d083_p_17\" class=\"ne-p\"><span class=\"ne-text\">会产生这样的 </span><code class=\"ne-code\"><span class=\"ne-text\">JSON</span></code><span class=\"ne-text\"> 结果：</span></p></div><p id=\"3f8949dd5527f0c9624c3fd3faefb76f_p_18\" class=\"ne-p\"><br></p><pre data-language=\"graphql\" id=\"dd3cf17b\" class=\"ne-codeblock language-graphql\">{\n    &quot;me&quot;: {\n        &quot;name&quot;: &quot;Luke Skywalker&quot;\n    }\n}</pre><p id=\"bac67e7fcdfb0acc75b3cf54e2dd1141_p_19\" class=\"ne-p\"><br></p><h2 id=\"7170e01a\"><span class=\"ne-text\">查询和变更</span></h2><p id=\"db841a6e995b001085603629a3ace379_p_20\" class=\"ne-p\"><br></p><h3 id=\"daeef0b1\"><span class=\"ne-text\">字段 Fields</span></h3><p id=\"54d418504a63791b75a5f497078fa24a_p_21\" class=\"ne-p\"><br></p><pre data-language=\"graphql\" id=\"62c96a7b\" class=\"ne-codeblock language-graphql\">{\n  hero {\n    name\n  }\n}\n# 生成\n{\n  &quot;data&quot;: {\n    &quot;hero&quot;: {\n      &quot;name&quot;: &quot;R2-D2&quot;\n    }\n  }\n}</pre><p id=\"37928cd1f32681ee4810a9ab9d3c1104_p_22\" class=\"ne-p\"><br></p><pre data-language=\"graphql\" id=\"30f74e81\" class=\"ne-codeblock language-graphql\">{\n  hero {\n    name\n    # 查询可以有备注！\n    friends {\n      name\n    }\n  }\n}\n# 生成\n{\n  &quot;data&quot;: {\n    &quot;hero&quot;: {\n      &quot;name&quot;: &quot;R2-D2&quot;,\n      &quot;friends&quot;: [\n        {\n          &quot;name&quot;: &quot;Luke Skywalker&quot;\n        },\n        {\n          &quot;name&quot;: &quot;Han Solo&quot;\n        },\n        {\n          &quot;name&quot;: &quot;Leia Organa&quot;\n        }\n      ]\n    }\n  }\n}</pre><p id=\"4547a4b65fb57fca5301c6973643450c_p_23\" class=\"ne-p\"><br></p><h3 id=\"4a44f18e\"><span class=\"ne-text\">参数 Arguements</span></h3><p id=\"1f3b4b4a4867a8b756c196b38558d0c4_p_24\" class=\"ne-p\"><br></p><pre data-language=\"graphql\" id=\"cbdc97ba\" class=\"ne-codeblock language-graphql\">{\n  human(id: &quot;1000&quot;) {\n    name\n    height\n  }\n}\n# 生成\n{\n  &quot;data&quot;: {\n    &quot;human&quot;: {\n      &quot;name&quot;: &quot;Luke Skywalker&quot;,\n      &quot;height&quot;: 1.72\n    }\n  }\n}</pre><p id=\"3afe72986fc83f6913935faccbcf69b2_p_25\" class=\"ne-p\"><br></p><pre data-language=\"graphql\" id=\"c09447f7\" class=\"ne-codeblock language-graphql\">{\n  human(id: &quot;1000&quot;) {\n    name\n    height(unit: FOOT)\n  }\n}\n# 生成\n{\n  &quot;data&quot;: {\n    &quot;human&quot;: {\n      &quot;name&quot;: &quot;Luke Skywalker&quot;,\n      &quot;height&quot;: 5.6430448\n    }\n  }\n}</pre><p id=\"b57de0a6a045efefe71d109094be9ddc_p_26\" class=\"ne-p\"><br></p><h3 id=\"ef617325\"><span class=\"ne-text\">别名 Aliases</span></h3><p id=\"4cc44302cfe9be1836a49b383f7e914f_p_27\" class=\"ne-p\"><br></p><pre data-language=\"graphql\" id=\"dd28a211\" class=\"ne-codeblock language-graphql\">{\n  empireHero: hero(episode: EMPIRE) {\n    name\n  }\n  jediHero: hero(episode: JEDI) {\n    name\n  }\n}\n# 生成\n{\n  &quot;data&quot;: {\n    &quot;empireHero&quot;: {\n      &quot;name&quot;: &quot;Luke Skywalker&quot;\n    },\n    &quot;jediHero&quot;: {\n      &quot;name&quot;: &quot;R2-D2&quot;\n    }\n  }\n}</pre><p id=\"d17d837b16c49a0e5c21edc18722e410_p_28\" class=\"ne-p\"><br></p><h3 id=\"ee346038\"><span class=\"ne-text\">片段 Fragments</span></h3><p id=\"d8f02fc6e1d9d5e68b5ff128662a6b29_p_29\" class=\"ne-p\"><br></p><pre data-language=\"graphql\" id=\"894aa6f4\" class=\"ne-codeblock language-graphql\">{\n  leftComparison: hero(episode: EMPIRE) {\n    ...comparisonFields\n  }\n  rightComparison: hero(episode: JEDI) {\n    ...comparisonFields\n  }\n}\n\nfragment comparisonFields on Character {\n  name\n  appearsIn\n  friends {\n    name,\n    id\n  }\n}\n\n# 生成\n{\n  &quot;data&quot;: {\n    &quot;leftComparison&quot;: {\n      &quot;name&quot;: &quot;Luke Skywalker&quot;,\n      &quot;appearsIn&quot;: [\n        &quot;NEWHOPE&quot;,\n        &quot;EMPIRE&quot;,\n        &quot;JEDI&quot;\n      ],\n      &quot;friends&quot;: [\n        {\n          &quot;name&quot;: &quot;Han Solo&quot;,\n          &quot;id&quot;: &quot;1002&quot;\n        },\n        {\n          &quot;name&quot;: &quot;Leia Organa&quot;,\n          &quot;id&quot;: &quot;1003&quot;\n        },\n        {\n          &quot;name&quot;: &quot;C-3PO&quot;,\n          &quot;id&quot;: &quot;2000&quot;\n        },\n        {\n          &quot;name&quot;: &quot;R2-D2&quot;,\n          &quot;id&quot;: &quot;2001&quot;\n        }\n      ]\n    },\n    &quot;rightComparison&quot;: {\n      &quot;name&quot;: &quot;R2-D2&quot;,\n      &quot;appearsIn&quot;: [\n        &quot;NEWHOPE&quot;,\n        &quot;EMPIRE&quot;,\n        &quot;JEDI&quot;\n      ],\n      &quot;friends&quot;: [\n        {\n          &quot;name&quot;: &quot;Luke Skywalker&quot;,\n          &quot;id&quot;: &quot;1000&quot;\n        },\n        {\n          &quot;name&quot;: &quot;Han Solo&quot;,\n          &quot;id&quot;: &quot;1002&quot;\n        },\n        {\n          &quot;name&quot;: &quot;Leia Organa&quot;,\n          &quot;id&quot;: &quot;1003&quot;\n        }\n      ]\n    }\n  }\n}</pre><p id=\"d657ac1e4c3211af4f7dcea889518735_p_30\" class=\"ne-p\"><br></p><h4 id=\"51ba75fd\"><span class=\"ne-text\">在片段内使用变量</span></h4><p id=\"e2e9b10bfede90e88bd47291199e0b55_p_31\" class=\"ne-p\"><br></p><pre data-language=\"graphql\" id=\"053ed84d\" class=\"ne-codeblock language-graphql\"># $first是变量，更改数值之后生成数据会有变化\nquery HeroComparison($first: Int = 4) {\n  leftComparison: hero(episode: EMPIRE) {\n    ...comparisonFields\n  }\n  rightComparison: hero(episode: JEDI) {\n    ...comparisonFields\n  }\n}\n\nfragment comparisonFields on Character {\n  name\n  friendsConnection(first: $first) {\n    totalCount\n    edges {\n      node {\n        name\n      }\n    }\n  }\n}\n\n# 生成\n{\n  &quot;data&quot;: {\n    &quot;leftComparison&quot;: {\n      &quot;name&quot;: &quot;Luke Skywalker&quot;,\n      &quot;friendsConnection&quot;: {\n        &quot;totalCount&quot;: 4,\n        &quot;edges&quot;: [\n          {\n            &quot;node&quot;: {\n              &quot;name&quot;: &quot;Han Solo&quot;\n            }\n          },\n          {\n            &quot;node&quot;: {\n              &quot;name&quot;: &quot;Leia Organa&quot;\n            }\n          },\n          {\n            &quot;node&quot;: {\n              &quot;name&quot;: &quot;C-3PO&quot;\n            }\n          },\n          {\n            &quot;node&quot;: {\n              &quot;name&quot;: &quot;R2-D2&quot;\n            }\n          }\n        ]\n      }\n    },\n    &quot;rightComparison&quot;: {\n      &quot;name&quot;: &quot;R2-D2&quot;,\n      &quot;friendsConnection&quot;: {\n        &quot;totalCount&quot;: 3,\n        &quot;edges&quot;: [\n          {\n            &quot;node&quot;: {\n              &quot;name&quot;: &quot;Luke Skywalker&quot;\n            }\n          },\n          {\n            &quot;node&quot;: {\n              &quot;name&quot;: &quot;Han Solo&quot;\n            }\n          },\n          {\n            &quot;node&quot;: {\n              &quot;name&quot;: &quot;Leia Organa&quot;\n            }\n          }\n        ]\n      }\n    }\n  }\n}</pre><p id=\"bb3e20f1faeaf6bf9497bffd7f381295_p_32\" class=\"ne-p\"><br></p><h3 id=\"a31cc404\"><span class=\"ne-text\">操作名称 Operation name</span></h3><p id=\"73b74e66f7d869f94eb34b57d63eae3f_p_33\" class=\"ne-p\"><br></p><pre data-language=\"graphql\" id=\"997aa65c\" class=\"ne-codeblock language-graphql\"># 示例\nquery HeroNameAndFriends {\n  hero {\n    name\n    friends {\n      name\n    }\n  }\n}\n# 生成\n{\n  &quot;data&quot;: {\n    &quot;hero&quot;: {\n      &quot;name&quot;: &quot;R2-D2&quot;,\n      &quot;friends&quot;: [\n        {\n          &quot;name&quot;: &quot;Luke Skywalker&quot;\n        },\n        {\n          &quot;name&quot;: &quot;Han Solo&quot;\n        },\n        {\n          &quot;name&quot;: &quot;Leia Organa&quot;\n        }\n      ]\n    }\n  }\n}</pre><p id=\"39abba9494ef6da94608fbd0e487aa60_p_34\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"6a46e5ef094e85e613d4766e5b3c8748_li_2\"><span class=\"ne-text\">操作类型</span></li></ul><ul class=\"ne-list-wrap\"><ul ne-level=\"1\" class=\"ne-ul\"><li id=\"dc65ceef9e3ef921229de2a9b5ac6233_li_3\"><code class=\"ne-code\"><span class=\"ne-text\">query</span></code></li></ul></ul><ul class=\"ne-list-wrap\"><ul ne-level=\"1\" class=\"ne-ul\"><li id=\"4abcc59f8a5d402d1b3162e898b169ee_li_4\"><code class=\"ne-code\"><span class=\"ne-text\">mutation</span></code></li></ul></ul><ul class=\"ne-list-wrap\"><ul ne-level=\"1\" class=\"ne-ul\"><li id=\"95e06e6ab2136c73bdda70767a0f054e_li_5\"><code class=\"ne-code\"><span class=\"ne-text\">subscription</span></code></li></ul></ul><ul class=\"ne-ul\"><li id=\"89e4934942179310539aa332e64cd9f1_li_6\"><span class=\"ne-text\">操作名称</span></li></ul><p id=\"86d045d193aa7ac4616d4ea50a0dc92f_p_35\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"65d038ffb113267205f338acc9aa6a8f_p_36\" class=\"ne-p\"><span class=\"ne-text\">有意义和明确的名称</span></p></div><p id=\"ab57135091a86c42cc63ec67ac068a45_p_37\" class=\"ne-p\"><br></p><h3 id=\"1da8f319\"><span class=\"ne-text\">变量 Variables</span></h3><p id=\"82f45866a429f6224b2e92c65bfda254_p_38\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"632eb8694b11a9f48b6802daac7932b0_li_7\"><span class=\"ne-text\">使用变量之前，我们得做三件事</span></li></ul><p id=\"faade82d6cfe8ed09f505bc5d9204fda_p_39\" class=\"ne-p\"><br></p><ol class=\"ne-ol\"><li id=\"16505b5cb7131f5b91ad92e158956949_li_8\"><span class=\"ne-text\">使用 </span><code class=\"ne-code\"><span class=\"ne-text\">$variableName</span></code><span class=\"ne-text\"> 替代查询中的静态值。</span></li></ol><ol start=\"2\" class=\"ne-ol\"><li id=\"f7bd9927099a7c82a4fe5d9e39782cc7_li_9\"><span class=\"ne-text\">声明 </span><code class=\"ne-code\"><span class=\"ne-text\">$variableName</span></code><span class=\"ne-text\"> 为查询接受的变量之一。</span></li></ol><ol start=\"3\" class=\"ne-ol\"><li id=\"9268543fd3ed3cbe4804dcc1618b7629_li_10\"><span class=\"ne-text\">将 </span><code class=\"ne-code\"><span class=\"ne-text\">variableName: value</span></code><span class=\"ne-text\"> 通过传输专用（通常是 JSON）的分离的变量字典中。</span></li></ol><p id=\"17b412f9fc3ec51ada5f566f0d09108c_p_40\" class=\"ne-p\"><br></p><p id=\"5e966930a852b85b1d2992a94dcc7ac8_p_41\" class=\"ne-p\"><span class=\"ne-text\">全部做完之后就像这个样子：</span></p><p id=\"aebb7af96a9ee3c9b7a669f28fef1d7e_p_42\" class=\"ne-p\"><br></p><pre data-language=\"graphql\" id=\"78f392ca\" class=\"ne-codeblock language-graphql\"># { &quot;graphiql&quot;: true, &quot;variables&quot;: { &quot;episode&quot;: JEDI } }\nquery HeroNameAndFriends($episode: Episode) {\n  hero(episode: $episode) {\n    name\n    friends {\n      name\n    }\n  }\n}</pre><p id=\"4930f2b57b08d977b4a7a79433f23490_p_43\" class=\"ne-p\"><br></p><h4 id=\"5aa3dffc\"><span class=\"ne-text\">变量定义 Variable definitions</span></h4><p id=\"157b805d005afe38c7c2d5198b31ee6e_p_44\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><ol class=\"ne-ol\"><li id=\"13950d2fc1ba337be73e0d5f0b8ac917_li_11\"><span class=\"ne-text\">变量前缀必须为 </span><code class=\"ne-code\"><span class=\"ne-text\">$</span></code><span class=\"ne-text\">，后跟其类型</span></li></ol><ol start=\"2\" class=\"ne-ol\"><li id=\"32e7fadac4307b8fa43cd9a40d95d5bd_li_12\"><span class=\"ne-text\">所有声明的变量都必须是 </span><em><span class=\"ne-text\">标量</span></em><span class=\"ne-text\">、</span><em><span class=\"ne-text\">枚举型</span></em><span class=\"ne-text\"> 或者 </span><em><span class=\"ne-text\">输入对象类型</span></em><span class=\"ne-text\">。</span></li></ol><ol start=\"3\" class=\"ne-ol\"><li id=\"15656d4852785db34c8650cbe4d9e502_li_13\"><span class=\"ne-text\">变量定义可以是可选的或者必要的。上例中，</span><code class=\"ne-code\"><span class=\"ne-text\">Episode</span></code><span class=\"ne-text\"> 后并没有 </span><code class=\"ne-code\"><span class=\"ne-text\">!</span></code><span class=\"ne-text\">，因此其是可选的。</span></li></ol></div><p id=\"0e4b859961c17882302ca1144adad96d_p_45\" class=\"ne-p\"><br></p><h4 id=\"a4a32b57\"><span class=\"ne-text\">默认变量 Default variables</span></h4><p id=\"e81b6efc8e2153cf8aa53e3b04d7f22c_p_46\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"d429c0a07e373122bdf8af3f973f3991_p_47\" class=\"ne-p\"><span class=\"ne-text\">可以通过在查询中的类型定义后面附带默认值的方式，将默认值赋给变量。</span></p></div><p id=\"aa95668f5a65b03373d1b0b3f9f8d3a6_p_48\" class=\"ne-p\"><br></p><pre data-language=\"graphql\" id=\"e6f91c72\" class=\"ne-codeblock language-graphql\">query HeroNameAndFriends($episode: Episode = &quot;JEDI&quot;) {\n  hero(episode: $episode) {\n    name\n    friends {\n      name\n    }\n  }\n}</pre><p id=\"233f53790c0b9d757f931748dd4d9e1e_p_49\" class=\"ne-p\"><br></p><h3 id=\"8594c190\"><span class=\"ne-text\">指令（</span><code class=\"ne-code\"><span class=\"ne-text\">Directives</span></code><span class=\"ne-text\">）</span></h3><p id=\"4108a5bc411c7547dc6876b612b07f81_p_50\" class=\"ne-p\"><br></p><ul class=\"ne-ul\"><li id=\"9f78e936a8d57adb44d7dc292826f67b_li_14\"><code class=\"ne-code\"><span class=\"ne-text\">@include(if: Boolean)</span></code><span class=\"ne-text\"> 仅在参数为 </span><code class=\"ne-code\"><span class=\"ne-text\">true</span></code><span class=\"ne-text\"> 时，包含此字段。</span></li></ul><ul class=\"ne-ul\"><li id=\"1e33c8988ee5713b1855b36cd561115b_li_15\"><code class=\"ne-code\"><span class=\"ne-text\">@skip(if: Boolean)</span></code><span class=\"ne-text\"> 如果参数为 </span><code class=\"ne-code\"><span class=\"ne-text\">true</span></code><span class=\"ne-text\">，跳过此字段。</span></li></ul><p id=\"d3ff43f9faa22377838e1e2c0834a861_p_51\" class=\"ne-p\"><br></p><pre data-language=\"graphql\" id=\"804768d6\" class=\"ne-codeblock language-graphql\">query Hero($episode: Episode, $withFriends: Boolean!) {\n  hero(episode: $episode) {\n    name\n    friends @include(if: $withFriends) {\n      name\n    }\n  }\n}\n\n# 传递参数, 修改 withFriends 字段的值会生成不同的结果\n{\n  &quot;episode&quot;: &quot;JEDI&quot;,\n  &quot;withFriends&quot;: true\n}\n\n# 生成\n{\n  &quot;data&quot;: {\n    &quot;hero&quot;: {\n      &quot;name&quot;: &quot;R2-D2&quot;,\n      &quot;friends&quot;: [\n        {\n          &quot;name&quot;: &quot;Luke Skywalker&quot;\n        },\n        {\n          &quot;name&quot;: &quot;Han Solo&quot;\n        },\n        {\n          &quot;name&quot;: &quot;Leia Organa&quot;\n        }\n      ]\n    }\n  }\n}</pre><p id=\"bc2359f7bb1e32241fa27f528e60a125_p_52\" class=\"ne-p\"><br></p><h3 id=\"e07f6c14\"><span class=\"ne-text\">变更（Mutations）</span></h3><p id=\"0c6a7643ebb3931744a90899eb00ce0b_p_53\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"24239d11a4de75fcb21f6bcf9237487b_p_54\" class=\"ne-p\"><code class=\"ne-code\"><span class=\"ne-text\">GraphQL</span></code><span class=\"ne-text\"> 的大部分讨论集中在数据获取，但是任何完整的数据平台也都需要一个改变服务端数据的方法。</span></p></div><p id=\"7188e3d4590c731c34019643bbb3ba96_p_55\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"cbeea614e57c51c583536bed2c735757_p_56\" class=\"ne-p\"><code class=\"ne-code\"><span class=\"ne-text\">REST</span></code><span class=\"ne-text\"> 中，任何请求都可能最后导致一些服务端副作用，但是约定上建议不要使用 </span><code class=\"ne-code\"><span class=\"ne-text\">GET</span></code><span class=\"ne-text\"> 请求来修改数据。</span><code class=\"ne-code\"><span class=\"ne-text\">GraphQL</span></code><span class=\"ne-text\"> 也是类似 —— 技术上而言，任何查询都可以被实现为导致数据写入。然而，建一个约定来规范任何导致写入的操作都应该显式通过变更（</span><code class=\"ne-code\"><span class=\"ne-text\">mutation</span></code><span class=\"ne-text\">）来发送。</span></p></div><p id=\"67592880a847e874a0da3af4d564ef1f_p_57\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"bbb31a4fdee87625ab38ddf58ab95afd_p_58\" class=\"ne-p\"><span class=\"ne-text\">就如同查询一样，如果任何变更字段返回一个对象类型，你也能请求其嵌套字段。获取一个对象变更后的新状态也是十分有用的。我们来看看一个变更例子：</span></p></div><p id=\"1b325e2e939e9ae8679222558eaaceb6_p_59\" class=\"ne-p\"><br></p><pre data-language=\"graphql\" id=\"ef6d777a\" class=\"ne-codeblock language-graphql\">mutation CreateReviewForEpisode($ep: Episode!, $review: ReviewInput!) {\n  createReview(episode: $ep, review: $review) {\n    stars\n    commentary\n  }\n}\n\n# 变更的数据\n{\n  &quot;ep&quot;: &quot;JEDI&quot;,\n  &quot;review&quot;: {\n    &quot;stars&quot;: 5,\n    &quot;commentary&quot;: &quot;This is a great movie!&quot;\n  }\n}\n\n# 生成\n{\n  &quot;data&quot;: {\n    &quot;createReview&quot;: {\n      &quot;stars&quot;: 5,\n      &quot;commentary&quot;: &quot;This is a great movie!&quot;\n    }\n  }\n}</pre><p id=\"daa3e859dfee1b8825cb9c219dcb2526_p_60\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"8c031490175a25a1a892b36b6a304426_p_61\" class=\"ne-p\"><span class=\"ne-text\">注意 </span><code class=\"ne-code\"><span class=\"ne-text\">createReview</span></code><span class=\"ne-text\"> 字段如何返回了新建的 </span><code class=\"ne-code\"><span class=\"ne-text\">review</span></code><span class=\"ne-text\"> 的 </span><code class=\"ne-code\"><span class=\"ne-text\">stars</span></code><span class=\"ne-text\"> 和 </span><code class=\"ne-code\"><span class=\"ne-text\">commentary</span></code><span class=\"ne-text\"> 字段。这在变更已有数据时特别有用，例如，当一个字段自增的时候，我们可以在一个请求中变更并查询这个字段的新值。</span></p></div><p id=\"9b034733f43578c770243b15c945bc07_p_62\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"3a45c5e405b86d3035af46d85e39e167_p_63\" class=\"ne-p\"><span class=\"ne-text\">你也可能注意到，这个例子中，我们传递的 </span><code class=\"ne-code\"><span class=\"ne-text\">review</span></code><span class=\"ne-text\"> 变量并非标量。它是一个</span><em><span class=\"ne-text\">输入对象类型</span></em><span class=\"ne-text\">，一种特殊的对象类型，可以作为参数传递。</span></p></div><p id=\"b3add770127d8c2a5064673aa8a9731f_p_64\" class=\"ne-p\"><br></p><h4 id=\"687c460b\"><span class=\"ne-text\">变更中的多个字段（</span><code class=\"ne-code\"><span class=\"ne-text\">Multiple fields in mutations</span></code><span class=\"ne-text\">）</span></h4><p id=\"2a81d6eed31dfd1dc3c193bbdb75c1a1_p_65\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"55d974d56f4f9a398d08a5b56fd58a19_p_66\" class=\"ne-p\"><span class=\"ne-text\">一个变更也能包含多个字段，一如查询。查询和变更之间名称之外的一个重要区别是：</span><em><span class=\"ne-text\">查询字段时，是并行执行，而变更字段时，是线性执行，一个接着一个。</span></em></p></div><p id=\"152302cc03cd3433e252fd8fbe4bade7_p_67\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"dab78e1bf71c382e9f3552836a53b71c_p_68\" class=\"ne-p\"><span class=\"ne-text\">这意味着如果我们一个请求中发送了两个 </span><code class=\"ne-code\"><span class=\"ne-text\">incrementCredits</span></code><span class=\"ne-text\"> 变更，第一个保证在第二个之前执行，以确保我们不会出现竞态。</span></p></div><p id=\"956e0d4312e941b77cd57ec35c294aff_p_69\" class=\"ne-p\"><br></p><h3 id=\"3b76c582\"><span class=\"ne-text\">内联片段（</span><code class=\"ne-code\"><span class=\"ne-text\">Inline Fragments</span></code><span class=\"ne-text\">）</span></h3><p id=\"67523e0fa28fe87849ce38cd391e3347_p_70\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"1ab91864b863a8487097f91d5c259389_p_71\" class=\"ne-p\"><span class=\"ne-text\">如果你查询的字段返回的是接口或者联合类型，那么你可能需要使用</span><em><span class=\"ne-text\">内联片段</span></em><span class=\"ne-text\">来取出下层具体类型的数据：</span></p></div><p id=\"200b796b4b1f5a36aa12caae6b6fa3d8_p_72\" class=\"ne-p\"><br></p><pre data-language=\"graphql\" id=\"4a3a1bd0\" class=\"ne-codeblock language-graphql\">query HeroForEpisode($ep: Episode!) {\n  hero(episode: $ep) {\n    name\n    ... on Droid {\n      primaryFunction\n    }\n    ... on Human {\n      height\n    }\n  }\n}\n\n# 传递的变量\n{\n  &quot;ep&quot;: &quot;JEDI&quot;\n}\n\n# 生成\n{\n  &quot;data&quot;: {\n    &quot;hero&quot;: {\n      &quot;name&quot;: &quot;R2-D2&quot;,\n      &quot;primaryFunction&quot;: &quot;Astromech&quot;\n    }\n  }\n}</pre><p id=\"7e9db6e1dddd1090f9cbf7742b89f0d6_p_73\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"cdc725a3673128fb375d1a38914155eb_p_74\" class=\"ne-p\"><span class=\"ne-text\">这个查询中，</span><code class=\"ne-code\"><span class=\"ne-text\">hero</span></code><span class=\"ne-text\"> 字段返回 </span><code class=\"ne-code\"><span class=\"ne-text\">Character</span></code><span class=\"ne-text\"> 类型，取决于 </span><code class=\"ne-code\"><span class=\"ne-text\">episode</span></code><span class=\"ne-text\"> 参数，其可能是 </span><code class=\"ne-code\"><span class=\"ne-text\">Human</span></code><span class=\"ne-text\"> 或者 </span><code class=\"ne-code\"><span class=\"ne-text\">Droid</span></code><span class=\"ne-text\"> 类型。在直接选择的情况下，你只能请求 </span><code class=\"ne-code\"><span class=\"ne-text\">Character</span></code><span class=\"ne-text\"> 上存在的字段，譬如 </span><code class=\"ne-code\"><span class=\"ne-text\">name</span></code><span class=\"ne-text\">。</span></p></div><p id=\"cee026a6997be2fe2ca3b5d6e2ce2bf0_p_75\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"b7cd4f7ed03308995a5669d3dd0c4664_p_76\" class=\"ne-p\"><span class=\"ne-text\">如果要请求具体类型上的字段，你需要使用一个类型条件</span><strong><span class=\"ne-text\">内联片段</span></strong><span class=\"ne-text\">。因为第一个片段标注为 </span><code class=\"ne-code\"><span class=\"ne-text\">... on Droid</span></code><span class=\"ne-text\">，</span><code class=\"ne-code\"><span class=\"ne-text\">primaryFunction</span></code><span class=\"ne-text\"> 仅在 </span><code class=\"ne-code\"><span class=\"ne-text\">hero</span></code><span class=\"ne-text\"> 返回的 </span><code class=\"ne-code\"><span class=\"ne-text\">Character</span></code><span class=\"ne-text\"> 为 </span><code class=\"ne-code\"><span class=\"ne-text\">Droid</span></code><span class=\"ne-text\"> 类型时才会执行。同理适用于 </span><code class=\"ne-code\"><span class=\"ne-text\">Human</span></code><span class=\"ne-text\"> 类型的 </span><code class=\"ne-code\"><span class=\"ne-text\">height</span></code><span class=\"ne-text\"> 字段。</span></p></div><p id=\"9fc1a1e32cf7c324fef5888bc3009382_p_77\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"94fc19fa8346e84bea0c21f882653ec5_p_78\" class=\"ne-p\"><span class=\"ne-text\">具名片段也可以用于同样的情况，因为具名片段总是附带了一个类型。</span></p></div><p id=\"f855fcce122120d1233c03106e601338_p_79\" class=\"ne-p\"><br></p><h3 id=\"8651d705\"><span class=\"ne-text\">元字段（</span><code class=\"ne-code\"><span class=\"ne-text\">Meta fields</span></code><span class=\"ne-text\">）</span></h3><p id=\"cacc5e28cdefa24e262c83e0ab2a3ade_p_80\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"bedf9694acf9a99513491d48686ee4a6_p_81\" class=\"ne-p\"><span class=\"ne-text\">某些情况下，你并不知道你将从 </span><code class=\"ne-code\"><span class=\"ne-text\">GraphQL</span></code><span class=\"ne-text\"> 服务获得什么类型，这时候你就需要一些方法在客户端来决定如何处理这些数据。</span><code class=\"ne-code\"><span class=\"ne-text\">GraphQL</span></code><span class=\"ne-text\"> 允许你在查询的任何位置请求 </span><code class=\"ne-code\"><span class=\"ne-text\">__typename</span></code><span class=\"ne-text\">，一个元字段，以获得那个位置的对象类型名称。</span></p></div><p id=\"ede07f6666baf1587414d7171c5dd877_p_82\" class=\"ne-p\"><br></p><pre data-language=\"graphql\" id=\"409d88f9\" class=\"ne-codeblock language-graphql\">{\n  search(text: &quot;an&quot;) {\n    __typename\n    ... on Human {\n      name\n    }\n    ... on Droid {\n      name\n    }\n    ... on Starship {\n      name\n    }\n  }\n}\n# 生成\n{\n  &quot;data&quot;: {\n    &quot;search&quot;: [\n      {\n        &quot;__typename&quot;: &quot;Human&quot;,\n        &quot;name&quot;: &quot;Han Solo&quot;\n      },\n      {\n        &quot;__typename&quot;: &quot;Human&quot;,\n        &quot;name&quot;: &quot;Leia Organa&quot;\n      },\n      {\n        &quot;__typename&quot;: &quot;Starship&quot;,\n        &quot;name&quot;: &quot;TIE Advanced x1&quot;\n      }\n    ]\n  }\n}</pre><p id=\"187832c794b601f7094c1a9b20086a6b_p_83\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"664195112db58f8be24455396b1a89e1_p_84\" class=\"ne-p\"><span class=\"ne-text\">上面的查询中，</span><code class=\"ne-code\"><span class=\"ne-text\">search</span></code><span class=\"ne-text\"> 返回了一个联合类型，其可能是三种选项之一。没有 </span><code class=\"ne-code\"><span class=\"ne-text\">__typename</span></code><span class=\"ne-text\"> 字段的情况下，几乎不可能在客户端分辨开这三个不同的类型。</span></p></div><p id=\"bd02ded472df593f8e23bb50569c5ce4_p_85\" class=\"ne-p\"><br></p><div class=\"ne-quote\"><p id=\"d312a7d47db1dfda8afdb1a1d2f452cc_p_86\" class=\"ne-p\"><code class=\"ne-code\"><span class=\"ne-text\">GraphQL</span></code><span class=\"ne-text\"> 服务提供了不少元字段，剩下的部分用于描述 </span><a href=\"https://graphql.cn/learn/introspection/\" data-href=\"https://graphql.cn/learn/introspection/\" target=\"_blank\" class=\"ne-link\"><span class=\"ne-text\">内省</span></a><span class=\"ne-text\"> 系统</span></p></div></div>",
  "body_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"traditional\" /><meta name=\"viewport\" content=\"adapt\" /><p data-lake-id=\"7d10983d09d39929a6d2fab883e7828f\" id=\"7d10983d09d39929a6d2fab883e7828f\"><span data-lake-id=\"u641024ef\" id=\"u641024ef\">graphql 是一种 api 查询语言。</span></p><h2 data-lake-id=\"75e71c39\" id=\"75e71c39\"><span data-lake-id=\"u37a7fd40\" id=\"u37a7fd40\">什么是 graphql ?</span></h2><p data-lake-id=\"0c4d068e4aede2bc9d552ce387999b01_p_4\" id=\"0c4d068e4aede2bc9d552ce387999b01_p_4\"><br></p><blockquote data-lake-id=\"ua8fe381a\" id=\"ua8fe381a\"><p data-lake-id=\"4ae36d99b0c55f82785eb604256ad6f2_p_5\" id=\"4ae36d99b0c55f82785eb604256ad6f2_p_5\"><code data-lake-id=\"ua701f132\" id=\"ua701f132\"><span data-lake-id=\"u4860af12\" id=\"u4860af12\">graphql</span></code><span data-lake-id=\"u83776a08\" id=\"u83776a08\"> 是一个用于 </span><code data-lake-id=\"u8890050b\" id=\"u8890050b\"><span data-lake-id=\"ua09a2e49\" id=\"ua09a2e49\">API</span></code><span data-lake-id=\"ua88bfdfd\" id=\"ua88bfdfd\"> 的查询语言，是一个使用基于类型系统来执行查询的服务端运行时的数据（类型系统由你的数据定义）。</span><code data-lake-id=\"uba30b4c3\" id=\"uba30b4c3\"><span data-lake-id=\"u0fe17402\" id=\"u0fe17402\">graphql</span></code><span data-lake-id=\"uf00fbd23\" id=\"uf00fbd23\"> 并没有和任何特定数据库或者存储引擎进行绑定，而是依靠现有的代码</span></p></blockquote><p data-lake-id=\"f23fb9c519ff30bfe03d0b2cc2cac85d_p_6\" id=\"f23fb9c519ff30bfe03d0b2cc2cac85d_p_6\"><br></p><h2 data-lake-id=\"1fa42afe\" id=\"1fa42afe\"><span data-lake-id=\"u609da783\" id=\"u609da783\">入门</span></h2><p data-lake-id=\"e1b0979b54c1fb29acc1d92ad2159922_p_7\" id=\"e1b0979b54c1fb29acc1d92ad2159922_p_7\"><br></p><blockquote data-lake-id=\"u106fd7f1\" id=\"u106fd7f1\"><p data-lake-id=\"b17baaead81d6230290afb9318b5dedf_p_8\" id=\"b17baaead81d6230290afb9318b5dedf_p_8\"><span data-lake-id=\"u1d3178cd\" id=\"u1d3178cd\">一个 </span><code data-lake-id=\"u7f2b47df\" id=\"u7f2b47df\"><span data-lake-id=\"u9b6403e8\" id=\"u9b6403e8\">graphql</span></code><span data-lake-id=\"u26e87db4\" id=\"u26e87db4\"> 服务是通过定义类型和类型上的字段来创建的，然后给每个类型上的每个字段提供解析函数。例如，一个 </span><code data-lake-id=\"u884fc06a\" id=\"u884fc06a\"><span data-lake-id=\"u1346dcfa\" id=\"u1346dcfa\">graphql</span></code><span data-lake-id=\"u33e0fe74\" id=\"u33e0fe74\"> 服务告诉我们当前登陆用户是</span><code data-lake-id=\"u8c5ff319\" id=\"u8c5ff319\"><span data-lake-id=\"u6307a1df\" id=\"u6307a1df\">me</span></code><span data-lake-id=\"u2fa9beb1\" id=\"u2fa9beb1\">，这个用户名称可能像这样：</span></p></blockquote><p data-lake-id=\"eadc4ec477465f1f239730d987d394b1_p_9\" id=\"eadc4ec477465f1f239730d987d394b1_p_9\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22graphql%22%2C%22code%22%3A%22type%20Query%20%7B%5Cn%20%20%20%20me%3A%20User%5Cn%7D%5Cn%5Cntype%20User%20%7B%5Cn%20%20%20%20id%3A%20ID%5Cn%20%20%20%20name%3A%20String%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22e365f770%22%7D\"></card><p data-lake-id=\"042da541aac17f869693ba89ebd10d8e_p_10\" id=\"042da541aac17f869693ba89ebd10d8e_p_10\"><br></p><blockquote data-lake-id=\"uc0892e18\" id=\"uc0892e18\"><p data-lake-id=\"165c4a01e09e9c565c9ddb2d6d1f55dc_p_11\" id=\"165c4a01e09e9c565c9ddb2d6d1f55dc_p_11\"><span data-lake-id=\"u6c900925\" id=\"u6c900925\">一并的还有每个类型上字段的解析函数</span></p></blockquote><p data-lake-id=\"09a2b5671cf447a1a3529d71c89cf9e1_p_12\" id=\"09a2b5671cf447a1a3529d71c89cf9e1_p_12\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22function%20Query_me(request)%20%7B%5Cn%20%20%20%20return%20request.auth.user%5Cn%7D%5Cn%5Cnfunction%20User_name()%20%7B%5Cn%20%20%20%20return%20user.getName()%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22f8cd5492%22%7D\"></card><p data-lake-id=\"2369fafe89fae403079018df6f36b51b_p_13\" id=\"2369fafe89fae403079018df6f36b51b_p_13\"><br></p><blockquote data-lake-id=\"u9bcd2c08\" id=\"u9bcd2c08\"><p data-lake-id=\"ffaaf8f20408a69db8ec4329523d486a_p_14\" id=\"ffaaf8f20408a69db8ec4329523d486a_p_14\"><span data-lake-id=\"ud198f968\" id=\"ud198f968\">一旦一个 </span><code data-lake-id=\"u3063a5cd\" id=\"u3063a5cd\"><span data-lake-id=\"u794e6497\" id=\"u794e6497\">graphql</span></code><span data-lake-id=\"u70e572cb\" id=\"u70e572cb\"> 服务运行起来（通常在 </span><code data-lake-id=\"u00f6f120\" id=\"u00f6f120\"><span data-lake-id=\"uf76c5d82\" id=\"uf76c5d82\">web</span></code><span data-lake-id=\"u14733796\" id=\"u14733796\"> 服务的一个 </span><code data-lake-id=\"u509a77c4\" id=\"u509a77c4\"><span data-lake-id=\"ud92d5171\" id=\"ud92d5171\">URL</span></code><span data-lake-id=\"u93f3ae5d\" id=\"u93f3ae5d\"> 上），它就能接收 </span><code data-lake-id=\"ucd866be0\" id=\"ucd866be0\"><span data-lake-id=\"u65a851e1\" id=\"u65a851e1\">graphql</span></code><span data-lake-id=\"u5a9d725c\" id=\"u5a9d725c\"> 查询，并验证和执行。接收到的查询首先会被检查确保它只引用了已定义的类型和字段，然后运行执行的解析函数来生成结果。</span></p></blockquote><p data-lake-id=\"c53070088aadb43ef468f61fca8ca22a_p_15\" id=\"c53070088aadb43ef468f61fca8ca22a_p_15\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22graphql%22%2C%22code%22%3A%22%7B%5Cn%20%20%20%20me%20%7B%5Cn%20%20%20%20%20%20%20%20name%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22a5d1c0da%22%7D\"></card><p data-lake-id=\"42752743bc6d3f9f6c928fb47989b8c2_p_16\" id=\"42752743bc6d3f9f6c928fb47989b8c2_p_16\"><br></p><blockquote data-lake-id=\"u0d4471e7\" id=\"u0d4471e7\"><p data-lake-id=\"80a49bfb60d700955d54f6382c58d083_p_17\" id=\"80a49bfb60d700955d54f6382c58d083_p_17\"><span data-lake-id=\"u41c287fb\" id=\"u41c287fb\">会产生这样的 </span><code data-lake-id=\"ubc776968\" id=\"ubc776968\"><span data-lake-id=\"ub45741e7\" id=\"ub45741e7\">JSON</span></code><span data-lake-id=\"ud09623d4\" id=\"ud09623d4\"> 结果：</span></p></blockquote><p data-lake-id=\"3f8949dd5527f0c9624c3fd3faefb76f_p_18\" id=\"3f8949dd5527f0c9624c3fd3faefb76f_p_18\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22graphql%22%2C%22code%22%3A%22%7B%5Cn%20%20%20%20%5C%22me%5C%22%3A%20%7B%5Cn%20%20%20%20%20%20%20%20%5C%22name%5C%22%3A%20%5C%22Luke%20Skywalker%5C%22%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22dd3cf17b%22%7D\"></card><p data-lake-id=\"bac67e7fcdfb0acc75b3cf54e2dd1141_p_19\" id=\"bac67e7fcdfb0acc75b3cf54e2dd1141_p_19\"><br></p><h2 data-lake-id=\"7170e01a\" id=\"7170e01a\"><span data-lake-id=\"u8aa7ac25\" id=\"u8aa7ac25\">查询和变更</span></h2><p data-lake-id=\"db841a6e995b001085603629a3ace379_p_20\" id=\"db841a6e995b001085603629a3ace379_p_20\"><br></p><h3 data-lake-id=\"daeef0b1\" id=\"daeef0b1\"><span data-lake-id=\"ua8d4a2e0\" id=\"ua8d4a2e0\">字段 Fields</span></h3><p data-lake-id=\"54d418504a63791b75a5f497078fa24a_p_21\" id=\"54d418504a63791b75a5f497078fa24a_p_21\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22graphql%22%2C%22code%22%3A%22%7B%5Cn%20%20hero%20%7B%5Cn%20%20%20%20name%5Cn%20%20%7D%5Cn%7D%5Cn%23%20%E7%94%9F%E6%88%90%5Cn%7B%5Cn%20%20%5C%22data%5C%22%3A%20%7B%5Cn%20%20%20%20%5C%22hero%5C%22%3A%20%7B%5Cn%20%20%20%20%20%20%5C%22name%5C%22%3A%20%5C%22R2-D2%5C%22%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%2262c96a7b%22%7D\"></card><p data-lake-id=\"37928cd1f32681ee4810a9ab9d3c1104_p_22\" id=\"37928cd1f32681ee4810a9ab9d3c1104_p_22\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22graphql%22%2C%22code%22%3A%22%7B%5Cn%20%20hero%20%7B%5Cn%20%20%20%20name%5Cn%20%20%20%20%23%20%E6%9F%A5%E8%AF%A2%E5%8F%AF%E4%BB%A5%E6%9C%89%E5%A4%87%E6%B3%A8%EF%BC%81%5Cn%20%20%20%20friends%20%7B%5Cn%20%20%20%20%20%20name%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%7D%5Cn%23%20%E7%94%9F%E6%88%90%5Cn%7B%5Cn%20%20%5C%22data%5C%22%3A%20%7B%5Cn%20%20%20%20%5C%22hero%5C%22%3A%20%7B%5Cn%20%20%20%20%20%20%5C%22name%5C%22%3A%20%5C%22R2-D2%5C%22%2C%5Cn%20%20%20%20%20%20%5C%22friends%5C%22%3A%20%5B%5Cn%20%20%20%20%20%20%20%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%5C%22name%5C%22%3A%20%5C%22Luke%20Skywalker%5C%22%5Cn%20%20%20%20%20%20%20%20%7D%2C%5Cn%20%20%20%20%20%20%20%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%5C%22name%5C%22%3A%20%5C%22Han%20Solo%5C%22%5Cn%20%20%20%20%20%20%20%20%7D%2C%5Cn%20%20%20%20%20%20%20%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%5C%22name%5C%22%3A%20%5C%22Leia%20Organa%5C%22%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%5D%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%2230f74e81%22%7D\"></card><p data-lake-id=\"4547a4b65fb57fca5301c6973643450c_p_23\" id=\"4547a4b65fb57fca5301c6973643450c_p_23\"><br></p><h3 data-lake-id=\"4a44f18e\" id=\"4a44f18e\"><span data-lake-id=\"u5d7a20be\" id=\"u5d7a20be\">参数 Arguements</span></h3><p data-lake-id=\"1f3b4b4a4867a8b756c196b38558d0c4_p_24\" id=\"1f3b4b4a4867a8b756c196b38558d0c4_p_24\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22graphql%22%2C%22code%22%3A%22%7B%5Cn%20%20human(id%3A%20%5C%221000%5C%22)%20%7B%5Cn%20%20%20%20name%5Cn%20%20%20%20height%5Cn%20%20%7D%5Cn%7D%5Cn%23%20%E7%94%9F%E6%88%90%5Cn%7B%5Cn%20%20%5C%22data%5C%22%3A%20%7B%5Cn%20%20%20%20%5C%22human%5C%22%3A%20%7B%5Cn%20%20%20%20%20%20%5C%22name%5C%22%3A%20%5C%22Luke%20Skywalker%5C%22%2C%5Cn%20%20%20%20%20%20%5C%22height%5C%22%3A%201.72%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22cbdc97ba%22%7D\"></card><p data-lake-id=\"3afe72986fc83f6913935faccbcf69b2_p_25\" id=\"3afe72986fc83f6913935faccbcf69b2_p_25\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22graphql%22%2C%22code%22%3A%22%7B%5Cn%20%20human(id%3A%20%5C%221000%5C%22)%20%7B%5Cn%20%20%20%20name%5Cn%20%20%20%20height(unit%3A%20FOOT)%5Cn%20%20%7D%5Cn%7D%5Cn%23%20%E7%94%9F%E6%88%90%5Cn%7B%5Cn%20%20%5C%22data%5C%22%3A%20%7B%5Cn%20%20%20%20%5C%22human%5C%22%3A%20%7B%5Cn%20%20%20%20%20%20%5C%22name%5C%22%3A%20%5C%22Luke%20Skywalker%5C%22%2C%5Cn%20%20%20%20%20%20%5C%22height%5C%22%3A%205.6430448%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22c09447f7%22%7D\"></card><p data-lake-id=\"b57de0a6a045efefe71d109094be9ddc_p_26\" id=\"b57de0a6a045efefe71d109094be9ddc_p_26\"><br></p><h3 data-lake-id=\"ef617325\" id=\"ef617325\"><span data-lake-id=\"uf7f16918\" id=\"uf7f16918\">别名 Aliases</span></h3><p data-lake-id=\"4cc44302cfe9be1836a49b383f7e914f_p_27\" id=\"4cc44302cfe9be1836a49b383f7e914f_p_27\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22graphql%22%2C%22code%22%3A%22%7B%5Cn%20%20empireHero%3A%20hero(episode%3A%20EMPIRE)%20%7B%5Cn%20%20%20%20name%5Cn%20%20%7D%5Cn%20%20jediHero%3A%20hero(episode%3A%20JEDI)%20%7B%5Cn%20%20%20%20name%5Cn%20%20%7D%5Cn%7D%5Cn%23%20%E7%94%9F%E6%88%90%5Cn%7B%5Cn%20%20%5C%22data%5C%22%3A%20%7B%5Cn%20%20%20%20%5C%22empireHero%5C%22%3A%20%7B%5Cn%20%20%20%20%20%20%5C%22name%5C%22%3A%20%5C%22Luke%20Skywalker%5C%22%5Cn%20%20%20%20%7D%2C%5Cn%20%20%20%20%5C%22jediHero%5C%22%3A%20%7B%5Cn%20%20%20%20%20%20%5C%22name%5C%22%3A%20%5C%22R2-D2%5C%22%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22dd28a211%22%7D\"></card><p data-lake-id=\"d17d837b16c49a0e5c21edc18722e410_p_28\" id=\"d17d837b16c49a0e5c21edc18722e410_p_28\"><br></p><h3 data-lake-id=\"ee346038\" id=\"ee346038\"><span data-lake-id=\"u41e28d10\" id=\"u41e28d10\">片段 Fragments</span></h3><p data-lake-id=\"d8f02fc6e1d9d5e68b5ff128662a6b29_p_29\" id=\"d8f02fc6e1d9d5e68b5ff128662a6b29_p_29\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22graphql%22%2C%22code%22%3A%22%7B%5Cn%20%20leftComparison%3A%20hero(episode%3A%20EMPIRE)%20%7B%5Cn%20%20%20%20...comparisonFields%5Cn%20%20%7D%5Cn%20%20rightComparison%3A%20hero(episode%3A%20JEDI)%20%7B%5Cn%20%20%20%20...comparisonFields%5Cn%20%20%7D%5Cn%7D%5Cn%5Cnfragment%20comparisonFields%20on%20Character%20%7B%5Cn%20%20name%5Cn%20%20appearsIn%5Cn%20%20friends%20%7B%5Cn%20%20%20%20name%2C%5Cn%20%20%20%20id%5Cn%20%20%7D%5Cn%7D%5Cn%5Cn%23%20%E7%94%9F%E6%88%90%5Cn%7B%5Cn%20%20%5C%22data%5C%22%3A%20%7B%5Cn%20%20%20%20%5C%22leftComparison%5C%22%3A%20%7B%5Cn%20%20%20%20%20%20%5C%22name%5C%22%3A%20%5C%22Luke%20Skywalker%5C%22%2C%5Cn%20%20%20%20%20%20%5C%22appearsIn%5C%22%3A%20%5B%5Cn%20%20%20%20%20%20%20%20%5C%22NEWHOPE%5C%22%2C%5Cn%20%20%20%20%20%20%20%20%5C%22EMPIRE%5C%22%2C%5Cn%20%20%20%20%20%20%20%20%5C%22JEDI%5C%22%5Cn%20%20%20%20%20%20%5D%2C%5Cn%20%20%20%20%20%20%5C%22friends%5C%22%3A%20%5B%5Cn%20%20%20%20%20%20%20%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%5C%22name%5C%22%3A%20%5C%22Han%20Solo%5C%22%2C%5Cn%20%20%20%20%20%20%20%20%20%20%5C%22id%5C%22%3A%20%5C%221002%5C%22%5Cn%20%20%20%20%20%20%20%20%7D%2C%5Cn%20%20%20%20%20%20%20%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%5C%22name%5C%22%3A%20%5C%22Leia%20Organa%5C%22%2C%5Cn%20%20%20%20%20%20%20%20%20%20%5C%22id%5C%22%3A%20%5C%221003%5C%22%5Cn%20%20%20%20%20%20%20%20%7D%2C%5Cn%20%20%20%20%20%20%20%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%5C%22name%5C%22%3A%20%5C%22C-3PO%5C%22%2C%5Cn%20%20%20%20%20%20%20%20%20%20%5C%22id%5C%22%3A%20%5C%222000%5C%22%5Cn%20%20%20%20%20%20%20%20%7D%2C%5Cn%20%20%20%20%20%20%20%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%5C%22name%5C%22%3A%20%5C%22R2-D2%5C%22%2C%5Cn%20%20%20%20%20%20%20%20%20%20%5C%22id%5C%22%3A%20%5C%222001%5C%22%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%5D%5Cn%20%20%20%20%7D%2C%5Cn%20%20%20%20%5C%22rightComparison%5C%22%3A%20%7B%5Cn%20%20%20%20%20%20%5C%22name%5C%22%3A%20%5C%22R2-D2%5C%22%2C%5Cn%20%20%20%20%20%20%5C%22appearsIn%5C%22%3A%20%5B%5Cn%20%20%20%20%20%20%20%20%5C%22NEWHOPE%5C%22%2C%5Cn%20%20%20%20%20%20%20%20%5C%22EMPIRE%5C%22%2C%5Cn%20%20%20%20%20%20%20%20%5C%22JEDI%5C%22%5Cn%20%20%20%20%20%20%5D%2C%5Cn%20%20%20%20%20%20%5C%22friends%5C%22%3A%20%5B%5Cn%20%20%20%20%20%20%20%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%5C%22name%5C%22%3A%20%5C%22Luke%20Skywalker%5C%22%2C%5Cn%20%20%20%20%20%20%20%20%20%20%5C%22id%5C%22%3A%20%5C%221000%5C%22%5Cn%20%20%20%20%20%20%20%20%7D%2C%5Cn%20%20%20%20%20%20%20%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%5C%22name%5C%22%3A%20%5C%22Han%20Solo%5C%22%2C%5Cn%20%20%20%20%20%20%20%20%20%20%5C%22id%5C%22%3A%20%5C%221002%5C%22%5Cn%20%20%20%20%20%20%20%20%7D%2C%5Cn%20%20%20%20%20%20%20%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%5C%22name%5C%22%3A%20%5C%22Leia%20Organa%5C%22%2C%5Cn%20%20%20%20%20%20%20%20%20%20%5C%22id%5C%22%3A%20%5C%221003%5C%22%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%5D%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22894aa6f4%22%7D\"></card><p data-lake-id=\"d657ac1e4c3211af4f7dcea889518735_p_30\" id=\"d657ac1e4c3211af4f7dcea889518735_p_30\"><br></p><h4 data-lake-id=\"51ba75fd\" id=\"51ba75fd\"><span data-lake-id=\"ua03508c2\" id=\"ua03508c2\">在片段内使用变量</span></h4><p data-lake-id=\"e2e9b10bfede90e88bd47291199e0b55_p_31\" id=\"e2e9b10bfede90e88bd47291199e0b55_p_31\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22graphql%22%2C%22code%22%3A%22%23%20%24first%E6%98%AF%E5%8F%98%E9%87%8F%EF%BC%8C%E6%9B%B4%E6%94%B9%E6%95%B0%E5%80%BC%E4%B9%8B%E5%90%8E%E7%94%9F%E6%88%90%E6%95%B0%E6%8D%AE%E4%BC%9A%E6%9C%89%E5%8F%98%E5%8C%96%5Cnquery%20HeroComparison(%24first%3A%20Int%20%3D%204)%20%7B%5Cn%20%20leftComparison%3A%20hero(episode%3A%20EMPIRE)%20%7B%5Cn%20%20%20%20...comparisonFields%5Cn%20%20%7D%5Cn%20%20rightComparison%3A%20hero(episode%3A%20JEDI)%20%7B%5Cn%20%20%20%20...comparisonFields%5Cn%20%20%7D%5Cn%7D%5Cn%5Cnfragment%20comparisonFields%20on%20Character%20%7B%5Cn%20%20name%5Cn%20%20friendsConnection(first%3A%20%24first)%20%7B%5Cn%20%20%20%20totalCount%5Cn%20%20%20%20edges%20%7B%5Cn%20%20%20%20%20%20node%20%7B%5Cn%20%20%20%20%20%20%20%20name%5Cn%20%20%20%20%20%20%7D%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%7D%5Cn%5Cn%23%20%E7%94%9F%E6%88%90%5Cn%7B%5Cn%20%20%5C%22data%5C%22%3A%20%7B%5Cn%20%20%20%20%5C%22leftComparison%5C%22%3A%20%7B%5Cn%20%20%20%20%20%20%5C%22name%5C%22%3A%20%5C%22Luke%20Skywalker%5C%22%2C%5Cn%20%20%20%20%20%20%5C%22friendsConnection%5C%22%3A%20%7B%5Cn%20%20%20%20%20%20%20%20%5C%22totalCount%5C%22%3A%204%2C%5Cn%20%20%20%20%20%20%20%20%5C%22edges%5C%22%3A%20%5B%5Cn%20%20%20%20%20%20%20%20%20%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%5C%22node%5C%22%3A%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%5C%22name%5C%22%3A%20%5C%22Han%20Solo%5C%22%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%20%20%7D%2C%5Cn%20%20%20%20%20%20%20%20%20%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%5C%22node%5C%22%3A%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%5C%22name%5C%22%3A%20%5C%22Leia%20Organa%5C%22%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%20%20%7D%2C%5Cn%20%20%20%20%20%20%20%20%20%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%5C%22node%5C%22%3A%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%5C%22name%5C%22%3A%20%5C%22C-3PO%5C%22%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%20%20%7D%2C%5Cn%20%20%20%20%20%20%20%20%20%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%5C%22node%5C%22%3A%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%5C%22name%5C%22%3A%20%5C%22R2-D2%5C%22%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%5D%5Cn%20%20%20%20%20%20%7D%5Cn%20%20%20%20%7D%2C%5Cn%20%20%20%20%5C%22rightComparison%5C%22%3A%20%7B%5Cn%20%20%20%20%20%20%5C%22name%5C%22%3A%20%5C%22R2-D2%5C%22%2C%5Cn%20%20%20%20%20%20%5C%22friendsConnection%5C%22%3A%20%7B%5Cn%20%20%20%20%20%20%20%20%5C%22totalCount%5C%22%3A%203%2C%5Cn%20%20%20%20%20%20%20%20%5C%22edges%5C%22%3A%20%5B%5Cn%20%20%20%20%20%20%20%20%20%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%5C%22node%5C%22%3A%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%5C%22name%5C%22%3A%20%5C%22Luke%20Skywalker%5C%22%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%20%20%7D%2C%5Cn%20%20%20%20%20%20%20%20%20%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%5C%22node%5C%22%3A%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%5C%22name%5C%22%3A%20%5C%22Han%20Solo%5C%22%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%20%20%7D%2C%5Cn%20%20%20%20%20%20%20%20%20%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%5C%22node%5C%22%3A%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%5C%22name%5C%22%3A%20%5C%22Leia%20Organa%5C%22%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%5D%5Cn%20%20%20%20%20%20%7D%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22053ed84d%22%7D\"></card><p data-lake-id=\"bb3e20f1faeaf6bf9497bffd7f381295_p_32\" id=\"bb3e20f1faeaf6bf9497bffd7f381295_p_32\"><br></p><h3 data-lake-id=\"a31cc404\" id=\"a31cc404\"><span data-lake-id=\"u248da307\" id=\"u248da307\">操作名称 Operation name</span></h3><p data-lake-id=\"73b74e66f7d869f94eb34b57d63eae3f_p_33\" id=\"73b74e66f7d869f94eb34b57d63eae3f_p_33\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22graphql%22%2C%22code%22%3A%22%23%20%E7%A4%BA%E4%BE%8B%5Cnquery%20HeroNameAndFriends%20%7B%5Cn%20%20hero%20%7B%5Cn%20%20%20%20name%5Cn%20%20%20%20friends%20%7B%5Cn%20%20%20%20%20%20name%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%7D%5Cn%23%20%E7%94%9F%E6%88%90%5Cn%7B%5Cn%20%20%5C%22data%5C%22%3A%20%7B%5Cn%20%20%20%20%5C%22hero%5C%22%3A%20%7B%5Cn%20%20%20%20%20%20%5C%22name%5C%22%3A%20%5C%22R2-D2%5C%22%2C%5Cn%20%20%20%20%20%20%5C%22friends%5C%22%3A%20%5B%5Cn%20%20%20%20%20%20%20%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%5C%22name%5C%22%3A%20%5C%22Luke%20Skywalker%5C%22%5Cn%20%20%20%20%20%20%20%20%7D%2C%5Cn%20%20%20%20%20%20%20%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%5C%22name%5C%22%3A%20%5C%22Han%20Solo%5C%22%5Cn%20%20%20%20%20%20%20%20%7D%2C%5Cn%20%20%20%20%20%20%20%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%5C%22name%5C%22%3A%20%5C%22Leia%20Organa%5C%22%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%5D%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22997aa65c%22%7D\"></card><p data-lake-id=\"39abba9494ef6da94608fbd0e487aa60_p_34\" id=\"39abba9494ef6da94608fbd0e487aa60_p_34\"><br></p><ul list=\"u166ec744\"><li fid=\"uaf708f4a\" data-lake-id=\"6a46e5ef094e85e613d4766e5b3c8748_li_2\" id=\"6a46e5ef094e85e613d4766e5b3c8748_li_2\"><span data-lake-id=\"u94c20623\" id=\"u94c20623\">操作类型</span></li></ul><ul list=\"ubff12606\" data-lake-indent=\"1\"><li fid=\"u07c0de3f\" data-lake-id=\"dc65ceef9e3ef921229de2a9b5ac6233_li_3\" id=\"dc65ceef9e3ef921229de2a9b5ac6233_li_3\"><code data-lake-id=\"uec33ce1e\" id=\"uec33ce1e\"><span data-lake-id=\"u96cc9252\" id=\"u96cc9252\">query</span></code></li></ul><ul list=\"u3c22edef\" data-lake-indent=\"1\"><li fid=\"u472854ec\" data-lake-id=\"4abcc59f8a5d402d1b3162e898b169ee_li_4\" id=\"4abcc59f8a5d402d1b3162e898b169ee_li_4\"><code data-lake-id=\"u1092c74d\" id=\"u1092c74d\"><span data-lake-id=\"u4fbfc51b\" id=\"u4fbfc51b\">mutation</span></code></li></ul><ul list=\"udb40d9dd\" data-lake-indent=\"1\"><li fid=\"ub7e6eaca\" data-lake-id=\"95e06e6ab2136c73bdda70767a0f054e_li_5\" id=\"95e06e6ab2136c73bdda70767a0f054e_li_5\"><code data-lake-id=\"u883bf02c\" id=\"u883bf02c\"><span data-lake-id=\"ubec12823\" id=\"ubec12823\">subscription</span></code></li></ul><ul list=\"u9ca1e8b7\"><li fid=\"u5f31427c\" data-lake-id=\"89e4934942179310539aa332e64cd9f1_li_6\" id=\"89e4934942179310539aa332e64cd9f1_li_6\"><span data-lake-id=\"ua28aa421\" id=\"ua28aa421\">操作名称</span></li></ul><p data-lake-id=\"86d045d193aa7ac4616d4ea50a0dc92f_p_35\" id=\"86d045d193aa7ac4616d4ea50a0dc92f_p_35\"><br></p><blockquote data-lake-id=\"u5a42698b\" id=\"u5a42698b\"><p data-lake-id=\"65d038ffb113267205f338acc9aa6a8f_p_36\" id=\"65d038ffb113267205f338acc9aa6a8f_p_36\"><span data-lake-id=\"u6302305d\" id=\"u6302305d\">有意义和明确的名称</span></p></blockquote><p data-lake-id=\"ab57135091a86c42cc63ec67ac068a45_p_37\" id=\"ab57135091a86c42cc63ec67ac068a45_p_37\"><br></p><h3 data-lake-id=\"1da8f319\" id=\"1da8f319\"><span data-lake-id=\"u610a3d61\" id=\"u610a3d61\">变量 Variables</span></h3><p data-lake-id=\"82f45866a429f6224b2e92c65bfda254_p_38\" id=\"82f45866a429f6224b2e92c65bfda254_p_38\"><br></p><ul list=\"ueeceb023\"><li fid=\"u56c75d42\" data-lake-id=\"632eb8694b11a9f48b6802daac7932b0_li_7\" id=\"632eb8694b11a9f48b6802daac7932b0_li_7\"><span data-lake-id=\"u1eb9f0e8\" id=\"u1eb9f0e8\">使用变量之前，我们得做三件事</span></li></ul><p data-lake-id=\"faade82d6cfe8ed09f505bc5d9204fda_p_39\" id=\"faade82d6cfe8ed09f505bc5d9204fda_p_39\"><br></p><ol list=\"u8d462de3\"><li fid=\"ud1814bea\" data-lake-id=\"16505b5cb7131f5b91ad92e158956949_li_8\" id=\"16505b5cb7131f5b91ad92e158956949_li_8\"><span data-lake-id=\"u20f5a177\" id=\"u20f5a177\">使用 </span><code data-lake-id=\"u77a4d091\" id=\"u77a4d091\"><span data-lake-id=\"ufc33b7cd\" id=\"ufc33b7cd\">$variableName</span></code><span data-lake-id=\"ua6ab6d52\" id=\"ua6ab6d52\"> 替代查询中的静态值。</span></li></ol><ol list=\"u038b40c1\" start=\"2\"><li fid=\"u6d6d7d41\" data-lake-id=\"f7bd9927099a7c82a4fe5d9e39782cc7_li_9\" id=\"f7bd9927099a7c82a4fe5d9e39782cc7_li_9\"><span data-lake-id=\"ub96467ca\" id=\"ub96467ca\">声明 </span><code data-lake-id=\"u3dbc4402\" id=\"u3dbc4402\"><span data-lake-id=\"u01689cdb\" id=\"u01689cdb\">$variableName</span></code><span data-lake-id=\"u6972d62f\" id=\"u6972d62f\"> 为查询接受的变量之一。</span></li></ol><ol list=\"ue7817f31\" start=\"3\"><li fid=\"ub67ff52f\" data-lake-id=\"9268543fd3ed3cbe4804dcc1618b7629_li_10\" id=\"9268543fd3ed3cbe4804dcc1618b7629_li_10\"><span data-lake-id=\"u9e1a1e9a\" id=\"u9e1a1e9a\">将 </span><code data-lake-id=\"u5cc1cba5\" id=\"u5cc1cba5\"><span data-lake-id=\"ub99d6d39\" id=\"ub99d6d39\">variableName: value</span></code><span data-lake-id=\"u6c6cc941\" id=\"u6c6cc941\"> 通过传输专用（通常是 JSON）的分离的变量字典中。</span></li></ol><p data-lake-id=\"17b412f9fc3ec51ada5f566f0d09108c_p_40\" id=\"17b412f9fc3ec51ada5f566f0d09108c_p_40\"><br></p><p data-lake-id=\"5e966930a852b85b1d2992a94dcc7ac8_p_41\" id=\"5e966930a852b85b1d2992a94dcc7ac8_p_41\"><span data-lake-id=\"ubf6cff84\" id=\"ubf6cff84\">全部做完之后就像这个样子：</span></p><p data-lake-id=\"aebb7af96a9ee3c9b7a669f28fef1d7e_p_42\" id=\"aebb7af96a9ee3c9b7a669f28fef1d7e_p_42\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22graphql%22%2C%22code%22%3A%22%23%20%7B%20%5C%22graphiql%5C%22%3A%20true%2C%20%5C%22variables%5C%22%3A%20%7B%20%5C%22episode%5C%22%3A%20JEDI%20%7D%20%7D%5Cnquery%20HeroNameAndFriends(%24episode%3A%20Episode)%20%7B%5Cn%20%20hero(episode%3A%20%24episode)%20%7B%5Cn%20%20%20%20name%5Cn%20%20%20%20friends%20%7B%5Cn%20%20%20%20%20%20name%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%2278f392ca%22%7D\"></card><p data-lake-id=\"4930f2b57b08d977b4a7a79433f23490_p_43\" id=\"4930f2b57b08d977b4a7a79433f23490_p_43\"><br></p><h4 data-lake-id=\"5aa3dffc\" id=\"5aa3dffc\"><span data-lake-id=\"u095a2e90\" id=\"u095a2e90\">变量定义 Variable definitions</span></h4><p data-lake-id=\"157b805d005afe38c7c2d5198b31ee6e_p_44\" id=\"157b805d005afe38c7c2d5198b31ee6e_p_44\"><br></p><blockquote data-lake-id=\"u5d341ab2\" id=\"u5d341ab2\"><ol list=\"u53e91613\"><li fid=\"u2fdf8df2\" data-lake-id=\"13950d2fc1ba337be73e0d5f0b8ac917_li_11\" id=\"13950d2fc1ba337be73e0d5f0b8ac917_li_11\"><span data-lake-id=\"u19409461\" id=\"u19409461\">变量前缀必须为 </span><code data-lake-id=\"u43b0322b\" id=\"u43b0322b\"><span data-lake-id=\"uf559a9a0\" id=\"uf559a9a0\">$</span></code><span data-lake-id=\"ue821ec3b\" id=\"ue821ec3b\">，后跟其类型</span></li></ol><ol list=\"uaa995e72\" start=\"2\"><li fid=\"u8237c5f7\" data-lake-id=\"32e7fadac4307b8fa43cd9a40d95d5bd_li_12\" id=\"32e7fadac4307b8fa43cd9a40d95d5bd_li_12\"><span data-lake-id=\"ue2662e78\" id=\"ue2662e78\">所有声明的变量都必须是 </span><em><span data-lake-id=\"u48f847a2\" id=\"u48f847a2\">标量</span></em><span data-lake-id=\"ue447a364\" id=\"ue447a364\">、</span><em><span data-lake-id=\"uf3f5ae4c\" id=\"uf3f5ae4c\">枚举型</span></em><span data-lake-id=\"ucd3add54\" id=\"ucd3add54\"> 或者 </span><em><span data-lake-id=\"ub93c4ed7\" id=\"ub93c4ed7\">输入对象类型</span></em><span data-lake-id=\"u130fb335\" id=\"u130fb335\">。</span></li></ol><ol list=\"ud305c43a\" start=\"3\"><li fid=\"u76ee8fb8\" data-lake-id=\"15656d4852785db34c8650cbe4d9e502_li_13\" id=\"15656d4852785db34c8650cbe4d9e502_li_13\"><span data-lake-id=\"u6452c25a\" id=\"u6452c25a\">变量定义可以是可选的或者必要的。上例中，</span><code data-lake-id=\"ueccf5882\" id=\"ueccf5882\"><span data-lake-id=\"u99125252\" id=\"u99125252\">Episode</span></code><span data-lake-id=\"u5a1027b0\" id=\"u5a1027b0\"> 后并没有 </span><code data-lake-id=\"uf0b3b9bc\" id=\"uf0b3b9bc\"><span data-lake-id=\"ufd186a9d\" id=\"ufd186a9d\">!</span></code><span data-lake-id=\"ud1bed9ce\" id=\"ud1bed9ce\">，因此其是可选的。</span></li></ol></blockquote><p data-lake-id=\"0e4b859961c17882302ca1144adad96d_p_45\" id=\"0e4b859961c17882302ca1144adad96d_p_45\"><br></p><h4 data-lake-id=\"a4a32b57\" id=\"a4a32b57\"><span data-lake-id=\"u1a1c40ed\" id=\"u1a1c40ed\">默认变量 Default variables</span></h4><p data-lake-id=\"e81b6efc8e2153cf8aa53e3b04d7f22c_p_46\" id=\"e81b6efc8e2153cf8aa53e3b04d7f22c_p_46\"><br></p><blockquote data-lake-id=\"ud0fa9bb5\" id=\"ud0fa9bb5\"><p data-lake-id=\"d429c0a07e373122bdf8af3f973f3991_p_47\" id=\"d429c0a07e373122bdf8af3f973f3991_p_47\"><span data-lake-id=\"ucf81bf47\" id=\"ucf81bf47\">可以通过在查询中的类型定义后面附带默认值的方式，将默认值赋给变量。</span></p></blockquote><p data-lake-id=\"aa95668f5a65b03373d1b0b3f9f8d3a6_p_48\" id=\"aa95668f5a65b03373d1b0b3f9f8d3a6_p_48\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22graphql%22%2C%22code%22%3A%22query%20HeroNameAndFriends(%24episode%3A%20Episode%20%3D%20%5C%22JEDI%5C%22)%20%7B%5Cn%20%20hero(episode%3A%20%24episode)%20%7B%5Cn%20%20%20%20name%5Cn%20%20%20%20friends%20%7B%5Cn%20%20%20%20%20%20name%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22e6f91c72%22%7D\"></card><p data-lake-id=\"233f53790c0b9d757f931748dd4d9e1e_p_49\" id=\"233f53790c0b9d757f931748dd4d9e1e_p_49\"><br></p><h3 data-lake-id=\"8594c190\" id=\"8594c190\"><span data-lake-id=\"u731e40fb\" id=\"u731e40fb\">指令（</span><code data-lake-id=\"u6c4182e5\" id=\"u6c4182e5\"><span data-lake-id=\"u21b0d568\" id=\"u21b0d568\">Directives</span></code><span data-lake-id=\"u2957da1c\" id=\"u2957da1c\">）</span></h3><p data-lake-id=\"4108a5bc411c7547dc6876b612b07f81_p_50\" id=\"4108a5bc411c7547dc6876b612b07f81_p_50\"><br></p><ul list=\"ua1bec27d\"><li fid=\"u54f6e06b\" data-lake-id=\"9f78e936a8d57adb44d7dc292826f67b_li_14\" id=\"9f78e936a8d57adb44d7dc292826f67b_li_14\"><code data-lake-id=\"ua1f36c20\" id=\"ua1f36c20\"><span data-lake-id=\"u5ab9639a\" id=\"u5ab9639a\">@include(if: Boolean)</span></code><span data-lake-id=\"u08f6dbf4\" id=\"u08f6dbf4\"> 仅在参数为 </span><code data-lake-id=\"u35678684\" id=\"u35678684\"><span data-lake-id=\"u8d3b3324\" id=\"u8d3b3324\">true</span></code><span data-lake-id=\"ub3ebeb25\" id=\"ub3ebeb25\"> 时，包含此字段。</span></li></ul><ul list=\"u5ba63f84\"><li fid=\"u436c09c9\" data-lake-id=\"1e33c8988ee5713b1855b36cd561115b_li_15\" id=\"1e33c8988ee5713b1855b36cd561115b_li_15\"><code data-lake-id=\"ud4cfd074\" id=\"ud4cfd074\"><span data-lake-id=\"u6d1caa23\" id=\"u6d1caa23\">@skip(if: Boolean)</span></code><span data-lake-id=\"u0eef2a30\" id=\"u0eef2a30\"> 如果参数为 </span><code data-lake-id=\"ud349ce13\" id=\"ud349ce13\"><span data-lake-id=\"u4d07213e\" id=\"u4d07213e\">true</span></code><span data-lake-id=\"u9b088188\" id=\"u9b088188\">，跳过此字段。</span></li></ul><p data-lake-id=\"d3ff43f9faa22377838e1e2c0834a861_p_51\" id=\"d3ff43f9faa22377838e1e2c0834a861_p_51\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22graphql%22%2C%22code%22%3A%22query%20Hero(%24episode%3A%20Episode%2C%20%24withFriends%3A%20Boolean!)%20%7B%5Cn%20%20hero(episode%3A%20%24episode)%20%7B%5Cn%20%20%20%20name%5Cn%20%20%20%20friends%20%40include(if%3A%20%24withFriends)%20%7B%5Cn%20%20%20%20%20%20name%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%7D%5Cn%5Cn%23%20%E4%BC%A0%E9%80%92%E5%8F%82%E6%95%B0%2C%20%E4%BF%AE%E6%94%B9%20withFriends%20%E5%AD%97%E6%AE%B5%E7%9A%84%E5%80%BC%E4%BC%9A%E7%94%9F%E6%88%90%E4%B8%8D%E5%90%8C%E7%9A%84%E7%BB%93%E6%9E%9C%5Cn%7B%5Cn%20%20%5C%22episode%5C%22%3A%20%5C%22JEDI%5C%22%2C%5Cn%20%20%5C%22withFriends%5C%22%3A%20true%5Cn%7D%5Cn%5Cn%23%20%E7%94%9F%E6%88%90%5Cn%7B%5Cn%20%20%5C%22data%5C%22%3A%20%7B%5Cn%20%20%20%20%5C%22hero%5C%22%3A%20%7B%5Cn%20%20%20%20%20%20%5C%22name%5C%22%3A%20%5C%22R2-D2%5C%22%2C%5Cn%20%20%20%20%20%20%5C%22friends%5C%22%3A%20%5B%5Cn%20%20%20%20%20%20%20%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%5C%22name%5C%22%3A%20%5C%22Luke%20Skywalker%5C%22%5Cn%20%20%20%20%20%20%20%20%7D%2C%5Cn%20%20%20%20%20%20%20%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%5C%22name%5C%22%3A%20%5C%22Han%20Solo%5C%22%5Cn%20%20%20%20%20%20%20%20%7D%2C%5Cn%20%20%20%20%20%20%20%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%5C%22name%5C%22%3A%20%5C%22Leia%20Organa%5C%22%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%5D%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22804768d6%22%7D\"></card><p data-lake-id=\"bc2359f7bb1e32241fa27f528e60a125_p_52\" id=\"bc2359f7bb1e32241fa27f528e60a125_p_52\"><br></p><h3 data-lake-id=\"e07f6c14\" id=\"e07f6c14\"><span data-lake-id=\"ue22f125d\" id=\"ue22f125d\">变更（Mutations）</span></h3><p data-lake-id=\"0c6a7643ebb3931744a90899eb00ce0b_p_53\" id=\"0c6a7643ebb3931744a90899eb00ce0b_p_53\"><br></p><blockquote data-lake-id=\"u2a144ed7\" id=\"u2a144ed7\"><p data-lake-id=\"24239d11a4de75fcb21f6bcf9237487b_p_54\" id=\"24239d11a4de75fcb21f6bcf9237487b_p_54\"><code data-lake-id=\"u15427f18\" id=\"u15427f18\"><span data-lake-id=\"u589d6648\" id=\"u589d6648\">GraphQL</span></code><span data-lake-id=\"u1a774a41\" id=\"u1a774a41\"> 的大部分讨论集中在数据获取，但是任何完整的数据平台也都需要一个改变服务端数据的方法。</span></p></blockquote><p data-lake-id=\"7188e3d4590c731c34019643bbb3ba96_p_55\" id=\"7188e3d4590c731c34019643bbb3ba96_p_55\"><br></p><blockquote data-lake-id=\"u93bd88ce\" id=\"u93bd88ce\"><p data-lake-id=\"cbeea614e57c51c583536bed2c735757_p_56\" id=\"cbeea614e57c51c583536bed2c735757_p_56\"><code data-lake-id=\"uc7e2a9e0\" id=\"uc7e2a9e0\"><span data-lake-id=\"u6fa6387d\" id=\"u6fa6387d\">REST</span></code><span data-lake-id=\"u52e37a42\" id=\"u52e37a42\"> 中，任何请求都可能最后导致一些服务端副作用，但是约定上建议不要使用 </span><code data-lake-id=\"u33a6203a\" id=\"u33a6203a\"><span data-lake-id=\"u30922556\" id=\"u30922556\">GET</span></code><span data-lake-id=\"u41f2dce6\" id=\"u41f2dce6\"> 请求来修改数据。</span><code data-lake-id=\"u1eaadba9\" id=\"u1eaadba9\"><span data-lake-id=\"u252080cb\" id=\"u252080cb\">GraphQL</span></code><span data-lake-id=\"uc063c7f2\" id=\"uc063c7f2\"> 也是类似 —— 技术上而言，任何查询都可以被实现为导致数据写入。然而，建一个约定来规范任何导致写入的操作都应该显式通过变更（</span><code data-lake-id=\"ucb3bb254\" id=\"ucb3bb254\"><span data-lake-id=\"ue0b84c4d\" id=\"ue0b84c4d\">mutation</span></code><span data-lake-id=\"ua5f26615\" id=\"ua5f26615\">）来发送。</span></p></blockquote><p data-lake-id=\"67592880a847e874a0da3af4d564ef1f_p_57\" id=\"67592880a847e874a0da3af4d564ef1f_p_57\"><br></p><blockquote data-lake-id=\"ud0165e4d\" id=\"ud0165e4d\"><p data-lake-id=\"bbb31a4fdee87625ab38ddf58ab95afd_p_58\" id=\"bbb31a4fdee87625ab38ddf58ab95afd_p_58\"><span data-lake-id=\"u5b1f5bed\" id=\"u5b1f5bed\">就如同查询一样，如果任何变更字段返回一个对象类型，你也能请求其嵌套字段。获取一个对象变更后的新状态也是十分有用的。我们来看看一个变更例子：</span></p></blockquote><p data-lake-id=\"1b325e2e939e9ae8679222558eaaceb6_p_59\" id=\"1b325e2e939e9ae8679222558eaaceb6_p_59\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22graphql%22%2C%22code%22%3A%22mutation%20CreateReviewForEpisode(%24ep%3A%20Episode!%2C%20%24review%3A%20ReviewInput!)%20%7B%5Cn%20%20createReview(episode%3A%20%24ep%2C%20review%3A%20%24review)%20%7B%5Cn%20%20%20%20stars%5Cn%20%20%20%20commentary%5Cn%20%20%7D%5Cn%7D%5Cn%5Cn%23%20%E5%8F%98%E6%9B%B4%E7%9A%84%E6%95%B0%E6%8D%AE%5Cn%7B%5Cn%20%20%5C%22ep%5C%22%3A%20%5C%22JEDI%5C%22%2C%5Cn%20%20%5C%22review%5C%22%3A%20%7B%5Cn%20%20%20%20%5C%22stars%5C%22%3A%205%2C%5Cn%20%20%20%20%5C%22commentary%5C%22%3A%20%5C%22This%20is%20a%20great%20movie!%5C%22%5Cn%20%20%7D%5Cn%7D%5Cn%5Cn%23%20%E7%94%9F%E6%88%90%5Cn%7B%5Cn%20%20%5C%22data%5C%22%3A%20%7B%5Cn%20%20%20%20%5C%22createReview%5C%22%3A%20%7B%5Cn%20%20%20%20%20%20%5C%22stars%5C%22%3A%205%2C%5Cn%20%20%20%20%20%20%5C%22commentary%5C%22%3A%20%5C%22This%20is%20a%20great%20movie!%5C%22%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22ef6d777a%22%7D\"></card><p data-lake-id=\"daa3e859dfee1b8825cb9c219dcb2526_p_60\" id=\"daa3e859dfee1b8825cb9c219dcb2526_p_60\"><br></p><blockquote data-lake-id=\"u5a3d8014\" id=\"u5a3d8014\"><p data-lake-id=\"8c031490175a25a1a892b36b6a304426_p_61\" id=\"8c031490175a25a1a892b36b6a304426_p_61\"><span data-lake-id=\"ubd7af7be\" id=\"ubd7af7be\">注意 </span><code data-lake-id=\"u0467e975\" id=\"u0467e975\"><span data-lake-id=\"uee78cda0\" id=\"uee78cda0\">createReview</span></code><span data-lake-id=\"u610d4dd7\" id=\"u610d4dd7\"> 字段如何返回了新建的 </span><code data-lake-id=\"u26a9c777\" id=\"u26a9c777\"><span data-lake-id=\"u1eae6e7f\" id=\"u1eae6e7f\">review</span></code><span data-lake-id=\"ue48d1501\" id=\"ue48d1501\"> 的 </span><code data-lake-id=\"ue04e0806\" id=\"ue04e0806\"><span data-lake-id=\"u9f4215a0\" id=\"u9f4215a0\">stars</span></code><span data-lake-id=\"u4869ab08\" id=\"u4869ab08\"> 和 </span><code data-lake-id=\"u6ebc2cf8\" id=\"u6ebc2cf8\"><span data-lake-id=\"u1e47568c\" id=\"u1e47568c\">commentary</span></code><span data-lake-id=\"u5419836f\" id=\"u5419836f\"> 字段。这在变更已有数据时特别有用，例如，当一个字段自增的时候，我们可以在一个请求中变更并查询这个字段的新值。</span></p></blockquote><p data-lake-id=\"9b034733f43578c770243b15c945bc07_p_62\" id=\"9b034733f43578c770243b15c945bc07_p_62\"><br></p><blockquote data-lake-id=\"uaff13594\" id=\"uaff13594\"><p data-lake-id=\"3a45c5e405b86d3035af46d85e39e167_p_63\" id=\"3a45c5e405b86d3035af46d85e39e167_p_63\"><span data-lake-id=\"u9bf5d2ae\" id=\"u9bf5d2ae\">你也可能注意到，这个例子中，我们传递的 </span><code data-lake-id=\"u47a59368\" id=\"u47a59368\"><span data-lake-id=\"uea4b9088\" id=\"uea4b9088\">review</span></code><span data-lake-id=\"ub0ff7c37\" id=\"ub0ff7c37\"> 变量并非标量。它是一个</span><em><span data-lake-id=\"uab9f2d7b\" id=\"uab9f2d7b\">输入对象类型</span></em><span data-lake-id=\"uc6363f26\" id=\"uc6363f26\">，一种特殊的对象类型，可以作为参数传递。</span></p></blockquote><p data-lake-id=\"b3add770127d8c2a5064673aa8a9731f_p_64\" id=\"b3add770127d8c2a5064673aa8a9731f_p_64\"><br></p><h4 data-lake-id=\"687c460b\" id=\"687c460b\"><span data-lake-id=\"u161af50c\" id=\"u161af50c\">变更中的多个字段（</span><code data-lake-id=\"ufc99fe8e\" id=\"ufc99fe8e\"><span data-lake-id=\"ue56e5f5b\" id=\"ue56e5f5b\">Multiple fields in mutations</span></code><span data-lake-id=\"u1268834e\" id=\"u1268834e\">）</span></h4><p data-lake-id=\"2a81d6eed31dfd1dc3c193bbdb75c1a1_p_65\" id=\"2a81d6eed31dfd1dc3c193bbdb75c1a1_p_65\"><br></p><blockquote data-lake-id=\"uc5cad23e\" id=\"uc5cad23e\"><p data-lake-id=\"55d974d56f4f9a398d08a5b56fd58a19_p_66\" id=\"55d974d56f4f9a398d08a5b56fd58a19_p_66\"><span data-lake-id=\"u14621ecc\" id=\"u14621ecc\">一个变更也能包含多个字段，一如查询。查询和变更之间名称之外的一个重要区别是：</span><em><span data-lake-id=\"u2ef9b392\" id=\"u2ef9b392\">查询字段时，是并行执行，而变更字段时，是线性执行，一个接着一个。</span></em></p></blockquote><p data-lake-id=\"152302cc03cd3433e252fd8fbe4bade7_p_67\" id=\"152302cc03cd3433e252fd8fbe4bade7_p_67\"><br></p><blockquote data-lake-id=\"u5b8c8ae8\" id=\"u5b8c8ae8\"><p data-lake-id=\"dab78e1bf71c382e9f3552836a53b71c_p_68\" id=\"dab78e1bf71c382e9f3552836a53b71c_p_68\"><span data-lake-id=\"u095a873a\" id=\"u095a873a\">这意味着如果我们一个请求中发送了两个 </span><code data-lake-id=\"u62432e21\" id=\"u62432e21\"><span data-lake-id=\"u249bc513\" id=\"u249bc513\">incrementCredits</span></code><span data-lake-id=\"u41bd27a8\" id=\"u41bd27a8\"> 变更，第一个保证在第二个之前执行，以确保我们不会出现竞态。</span></p></blockquote><p data-lake-id=\"956e0d4312e941b77cd57ec35c294aff_p_69\" id=\"956e0d4312e941b77cd57ec35c294aff_p_69\"><br></p><h3 data-lake-id=\"3b76c582\" id=\"3b76c582\"><span data-lake-id=\"u4be894fd\" id=\"u4be894fd\">内联片段（</span><code data-lake-id=\"ua30ba645\" id=\"ua30ba645\"><span data-lake-id=\"u4bbf6e9f\" id=\"u4bbf6e9f\">Inline Fragments</span></code><span data-lake-id=\"u83407821\" id=\"u83407821\">）</span></h3><p data-lake-id=\"67523e0fa28fe87849ce38cd391e3347_p_70\" id=\"67523e0fa28fe87849ce38cd391e3347_p_70\"><br></p><blockquote data-lake-id=\"u0c3f98bc\" id=\"u0c3f98bc\"><p data-lake-id=\"1ab91864b863a8487097f91d5c259389_p_71\" id=\"1ab91864b863a8487097f91d5c259389_p_71\"><span data-lake-id=\"uf836b985\" id=\"uf836b985\">如果你查询的字段返回的是接口或者联合类型，那么你可能需要使用</span><em><span data-lake-id=\"u330d8840\" id=\"u330d8840\">内联片段</span></em><span data-lake-id=\"uc9c50a94\" id=\"uc9c50a94\">来取出下层具体类型的数据：</span></p></blockquote><p data-lake-id=\"200b796b4b1f5a36aa12caae6b6fa3d8_p_72\" id=\"200b796b4b1f5a36aa12caae6b6fa3d8_p_72\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22graphql%22%2C%22code%22%3A%22query%20HeroForEpisode(%24ep%3A%20Episode!)%20%7B%5Cn%20%20hero(episode%3A%20%24ep)%20%7B%5Cn%20%20%20%20name%5Cn%20%20%20%20...%20on%20Droid%20%7B%5Cn%20%20%20%20%20%20primaryFunction%5Cn%20%20%20%20%7D%5Cn%20%20%20%20...%20on%20Human%20%7B%5Cn%20%20%20%20%20%20height%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%7D%5Cn%5Cn%23%20%E4%BC%A0%E9%80%92%E7%9A%84%E5%8F%98%E9%87%8F%5Cn%7B%5Cn%20%20%5C%22ep%5C%22%3A%20%5C%22JEDI%5C%22%5Cn%7D%5Cn%5Cn%23%20%E7%94%9F%E6%88%90%5Cn%7B%5Cn%20%20%5C%22data%5C%22%3A%20%7B%5Cn%20%20%20%20%5C%22hero%5C%22%3A%20%7B%5Cn%20%20%20%20%20%20%5C%22name%5C%22%3A%20%5C%22R2-D2%5C%22%2C%5Cn%20%20%20%20%20%20%5C%22primaryFunction%5C%22%3A%20%5C%22Astromech%5C%22%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%224a3a1bd0%22%7D\"></card><p data-lake-id=\"7e9db6e1dddd1090f9cbf7742b89f0d6_p_73\" id=\"7e9db6e1dddd1090f9cbf7742b89f0d6_p_73\"><br></p><blockquote data-lake-id=\"u165c879f\" id=\"u165c879f\"><p data-lake-id=\"cdc725a3673128fb375d1a38914155eb_p_74\" id=\"cdc725a3673128fb375d1a38914155eb_p_74\"><span data-lake-id=\"u38a929ed\" id=\"u38a929ed\">这个查询中，</span><code data-lake-id=\"u43c435bc\" id=\"u43c435bc\"><span data-lake-id=\"u938ecc93\" id=\"u938ecc93\">hero</span></code><span data-lake-id=\"u03c79a57\" id=\"u03c79a57\"> 字段返回 </span><code data-lake-id=\"uf25ca0e8\" id=\"uf25ca0e8\"><span data-lake-id=\"u010e849f\" id=\"u010e849f\">Character</span></code><span data-lake-id=\"u63db5979\" id=\"u63db5979\"> 类型，取决于 </span><code data-lake-id=\"u2780fefd\" id=\"u2780fefd\"><span data-lake-id=\"u174546da\" id=\"u174546da\">episode</span></code><span data-lake-id=\"u37218750\" id=\"u37218750\"> 参数，其可能是 </span><code data-lake-id=\"udeae5d64\" id=\"udeae5d64\"><span data-lake-id=\"uff16f89f\" id=\"uff16f89f\">Human</span></code><span data-lake-id=\"u07ec76c6\" id=\"u07ec76c6\"> 或者 </span><code data-lake-id=\"u57bceb8a\" id=\"u57bceb8a\"><span data-lake-id=\"uab7e7133\" id=\"uab7e7133\">Droid</span></code><span data-lake-id=\"u6c2d0033\" id=\"u6c2d0033\"> 类型。在直接选择的情况下，你只能请求 </span><code data-lake-id=\"uddce717a\" id=\"uddce717a\"><span data-lake-id=\"u8def5a56\" id=\"u8def5a56\">Character</span></code><span data-lake-id=\"u5b289186\" id=\"u5b289186\"> 上存在的字段，譬如 </span><code data-lake-id=\"ucda270ea\" id=\"ucda270ea\"><span data-lake-id=\"ua1208368\" id=\"ua1208368\">name</span></code><span data-lake-id=\"ub6eb2e7f\" id=\"ub6eb2e7f\">。</span></p></blockquote><p data-lake-id=\"cee026a6997be2fe2ca3b5d6e2ce2bf0_p_75\" id=\"cee026a6997be2fe2ca3b5d6e2ce2bf0_p_75\"><br></p><blockquote data-lake-id=\"u6e777e46\" id=\"u6e777e46\"><p data-lake-id=\"b7cd4f7ed03308995a5669d3dd0c4664_p_76\" id=\"b7cd4f7ed03308995a5669d3dd0c4664_p_76\"><span data-lake-id=\"ua4ca8552\" id=\"ua4ca8552\">如果要请求具体类型上的字段，你需要使用一个类型条件</span><strong><span data-lake-id=\"u78b0c172\" id=\"u78b0c172\">内联片段</span></strong><span data-lake-id=\"u7e471cc1\" id=\"u7e471cc1\">。因为第一个片段标注为 </span><code data-lake-id=\"u6cd0822b\" id=\"u6cd0822b\"><span data-lake-id=\"u302d9c93\" id=\"u302d9c93\">... on Droid</span></code><span data-lake-id=\"u5f4ace09\" id=\"u5f4ace09\">，</span><code data-lake-id=\"u61d7830e\" id=\"u61d7830e\"><span data-lake-id=\"ub9a8c745\" id=\"ub9a8c745\">primaryFunction</span></code><span data-lake-id=\"u9bdbcf1a\" id=\"u9bdbcf1a\"> 仅在 </span><code data-lake-id=\"u0b6d9c83\" id=\"u0b6d9c83\"><span data-lake-id=\"u989c1eb4\" id=\"u989c1eb4\">hero</span></code><span data-lake-id=\"u491001bb\" id=\"u491001bb\"> 返回的 </span><code data-lake-id=\"u656d12bb\" id=\"u656d12bb\"><span data-lake-id=\"uc8eba4bb\" id=\"uc8eba4bb\">Character</span></code><span data-lake-id=\"u48b9576a\" id=\"u48b9576a\"> 为 </span><code data-lake-id=\"uc2f8e186\" id=\"uc2f8e186\"><span data-lake-id=\"u8e4cbcca\" id=\"u8e4cbcca\">Droid</span></code><span data-lake-id=\"u471cb002\" id=\"u471cb002\"> 类型时才会执行。同理适用于 </span><code data-lake-id=\"u1726e564\" id=\"u1726e564\"><span data-lake-id=\"u005f4f23\" id=\"u005f4f23\">Human</span></code><span data-lake-id=\"u61854489\" id=\"u61854489\"> 类型的 </span><code data-lake-id=\"ub6555a91\" id=\"ub6555a91\"><span data-lake-id=\"u6f612a14\" id=\"u6f612a14\">height</span></code><span data-lake-id=\"u20d89500\" id=\"u20d89500\"> 字段。</span></p></blockquote><p data-lake-id=\"9fc1a1e32cf7c324fef5888bc3009382_p_77\" id=\"9fc1a1e32cf7c324fef5888bc3009382_p_77\"><br></p><blockquote data-lake-id=\"u4feea49e\" id=\"u4feea49e\"><p data-lake-id=\"94fc19fa8346e84bea0c21f882653ec5_p_78\" id=\"94fc19fa8346e84bea0c21f882653ec5_p_78\"><span data-lake-id=\"udd650c6a\" id=\"udd650c6a\">具名片段也可以用于同样的情况，因为具名片段总是附带了一个类型。</span></p></blockquote><p data-lake-id=\"f855fcce122120d1233c03106e601338_p_79\" id=\"f855fcce122120d1233c03106e601338_p_79\"><br></p><h3 data-lake-id=\"8651d705\" id=\"8651d705\"><span data-lake-id=\"u1d6962c0\" id=\"u1d6962c0\">元字段（</span><code data-lake-id=\"u42ac7f4f\" id=\"u42ac7f4f\"><span data-lake-id=\"u7501dce3\" id=\"u7501dce3\">Meta fields</span></code><span data-lake-id=\"ua9747a4f\" id=\"ua9747a4f\">）</span></h3><p data-lake-id=\"cacc5e28cdefa24e262c83e0ab2a3ade_p_80\" id=\"cacc5e28cdefa24e262c83e0ab2a3ade_p_80\"><br></p><blockquote data-lake-id=\"u50aec088\" id=\"u50aec088\"><p data-lake-id=\"bedf9694acf9a99513491d48686ee4a6_p_81\" id=\"bedf9694acf9a99513491d48686ee4a6_p_81\"><span data-lake-id=\"ub504244e\" id=\"ub504244e\">某些情况下，你并不知道你将从 </span><code data-lake-id=\"uc7732d8e\" id=\"uc7732d8e\"><span data-lake-id=\"ub69edb81\" id=\"ub69edb81\">GraphQL</span></code><span data-lake-id=\"u83dd4176\" id=\"u83dd4176\"> 服务获得什么类型，这时候你就需要一些方法在客户端来决定如何处理这些数据。</span><code data-lake-id=\"u1a47cae2\" id=\"u1a47cae2\"><span data-lake-id=\"u098da731\" id=\"u098da731\">GraphQL</span></code><span data-lake-id=\"ud2792f71\" id=\"ud2792f71\"> 允许你在查询的任何位置请求 </span><code data-lake-id=\"uee249d33\" id=\"uee249d33\"><span data-lake-id=\"u6d0a00d6\" id=\"u6d0a00d6\">__typename</span></code><span data-lake-id=\"ua95a6041\" id=\"ua95a6041\">，一个元字段，以获得那个位置的对象类型名称。</span></p></blockquote><p data-lake-id=\"ede07f6666baf1587414d7171c5dd877_p_82\" id=\"ede07f6666baf1587414d7171c5dd877_p_82\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22graphql%22%2C%22code%22%3A%22%7B%5Cn%20%20search(text%3A%20%5C%22an%5C%22)%20%7B%5Cn%20%20%20%20__typename%5Cn%20%20%20%20...%20on%20Human%20%7B%5Cn%20%20%20%20%20%20name%5Cn%20%20%20%20%7D%5Cn%20%20%20%20...%20on%20Droid%20%7B%5Cn%20%20%20%20%20%20name%5Cn%20%20%20%20%7D%5Cn%20%20%20%20...%20on%20Starship%20%7B%5Cn%20%20%20%20%20%20name%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%7D%5Cn%23%20%E7%94%9F%E6%88%90%5Cn%7B%5Cn%20%20%5C%22data%5C%22%3A%20%7B%5Cn%20%20%20%20%5C%22search%5C%22%3A%20%5B%5Cn%20%20%20%20%20%20%7B%5Cn%20%20%20%20%20%20%20%20%5C%22__typename%5C%22%3A%20%5C%22Human%5C%22%2C%5Cn%20%20%20%20%20%20%20%20%5C%22name%5C%22%3A%20%5C%22Han%20Solo%5C%22%5Cn%20%20%20%20%20%20%7D%2C%5Cn%20%20%20%20%20%20%7B%5Cn%20%20%20%20%20%20%20%20%5C%22__typename%5C%22%3A%20%5C%22Human%5C%22%2C%5Cn%20%20%20%20%20%20%20%20%5C%22name%5C%22%3A%20%5C%22Leia%20Organa%5C%22%5Cn%20%20%20%20%20%20%7D%2C%5Cn%20%20%20%20%20%20%7B%5Cn%20%20%20%20%20%20%20%20%5C%22__typename%5C%22%3A%20%5C%22Starship%5C%22%2C%5Cn%20%20%20%20%20%20%20%20%5C%22name%5C%22%3A%20%5C%22TIE%20Advanced%20x1%5C%22%5Cn%20%20%20%20%20%20%7D%5Cn%20%20%20%20%5D%5Cn%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22409d88f9%22%7D\"></card><p data-lake-id=\"187832c794b601f7094c1a9b20086a6b_p_83\" id=\"187832c794b601f7094c1a9b20086a6b_p_83\"><br></p><blockquote data-lake-id=\"u4d851f9b\" id=\"u4d851f9b\"><p data-lake-id=\"664195112db58f8be24455396b1a89e1_p_84\" id=\"664195112db58f8be24455396b1a89e1_p_84\"><span data-lake-id=\"ua4e9dd12\" id=\"ua4e9dd12\">上面的查询中，</span><code data-lake-id=\"uefec079e\" id=\"uefec079e\"><span data-lake-id=\"u5784df5b\" id=\"u5784df5b\">search</span></code><span data-lake-id=\"u16cf750f\" id=\"u16cf750f\"> 返回了一个联合类型，其可能是三种选项之一。没有 </span><code data-lake-id=\"u29afeaa0\" id=\"u29afeaa0\"><span data-lake-id=\"u943ce387\" id=\"u943ce387\">__typename</span></code><span data-lake-id=\"u1b266407\" id=\"u1b266407\"> 字段的情况下，几乎不可能在客户端分辨开这三个不同的类型。</span></p></blockquote><p data-lake-id=\"bd02ded472df593f8e23bb50569c5ce4_p_85\" id=\"bd02ded472df593f8e23bb50569c5ce4_p_85\"><br></p><blockquote data-lake-id=\"u7b255d13\" id=\"u7b255d13\"><p data-lake-id=\"d312a7d47db1dfda8afdb1a1d2f452cc_p_86\" id=\"d312a7d47db1dfda8afdb1a1d2f452cc_p_86\"><code data-lake-id=\"u0386b70f\" id=\"u0386b70f\"><span data-lake-id=\"u2ed084e7\" id=\"u2ed084e7\">GraphQL</span></code><span data-lake-id=\"u1c9a0e25\" id=\"u1c9a0e25\"> 服务提供了不少元字段，剩下的部分用于描述 </span><a href=\"https://graphql.cn/learn/introspection/\" target=\"_blank\" data-lake-id=\"u4ffd5db0\" id=\"u4ffd5db0\"><span data-lake-id=\"u37218cda\" id=\"u37218cda\">内省</span></a><span data-lake-id=\"ufff5fae2\" id=\"ufff5fae2\"> 系统</span></p></blockquote>",
  "public": 0,
  "status": 1,
  "likes_count": 0,
  "read_count": 0,
  "hits": 0,
  "comments_count": 0,
  "word_count": 2242,
  "created_at": "2020-08-10T05:36:33.000Z",
  "updated_at": "2022-03-13T10:09:28.000Z",
  "content_updated_at": "2022-03-03T15:27:01.000Z",
  "published_at": "2022-03-03T15:27:01.000Z",
  "first_published_at": "2020-08-10T05:36:33.000Z",
  "book": {
    "id": 25332296,
    "type": "Book",
    "slug": "xxble8",
    "name": "前端技术文章",
    "user_id": 732231,
    "description": "记录前端相关的技术性文章",
    "toc_yml": "- type: META\n  count: 35\n  display_level: 1\n  tail_type: UPDATED_AT\n  base_version_id: 212554542\n  published: true\n  max_level: 2\n  last_updated_at: 2022-06-15T01:16:18.992Z\n  version_id: 213246417\n- type: TITLE\n  title: 包管理\n  uuid: _QuaGpvQyXOJqViR\n  url: ''\n  parent_uuid: ''\n  doc_id: ''\n  level: 0\n  id: ''\n  open_window: 1\n  visible: 1\n  child_uuid: rCzMi2OLxQeldZoL\n  sibling_uuid: esTqfZ-VIsO4KK9Q\n- type: DOC\n  title: verdaccio\n  uuid: rCzMi2OLxQeldZoL\n  url: tbmwax\n  parent_uuid: _QuaGpvQyXOJqViR\n  doc_id: 76715838\n  level: 1\n  id: 76715838\n  open_window: 0\n  visible: 1\n  prev_uuid: _QuaGpvQyXOJqViR\n  sibling_uuid: cv09hDGqlf4qMuLA\n- type: DOC\n  title: npm 包发布/卸载\n  uuid: cv09hDGqlf4qMuLA\n  url: zirrw6\n  parent_uuid: _QuaGpvQyXOJqViR\n  doc_id: 69834306\n  level: 1\n  id: 69834306\n  open_window: 0\n  visible: 1\n  prev_uuid: rCzMi2OLxQeldZoL\n- type: TITLE\n  title: 算法\n  uuid: esTqfZ-VIsO4KK9Q\n  url: ''\n  parent_uuid: ''\n  doc_id: ''\n  level: 0\n  id: ''\n  open_window: 1\n  visible: 1\n  prev_uuid: _QuaGpvQyXOJqViR\n  child_uuid: Ogc2uBwNrDY5GME-\n  sibling_uuid: tk3brROhNFOdvu5c\n- type: DOC\n  title: 常用排序算法\n  uuid: Ogc2uBwNrDY5GME-\n  url: cwwn2a\n  parent_uuid: esTqfZ-VIsO4KK9Q\n  doc_id: 69585869\n  level: 1\n  id: 69585869\n  open_window: 0\n  visible: 1\n  prev_uuid: esTqfZ-VIsO4KK9Q\n- type: TITLE\n  title: 前端三架马车(html、css、javaScript)\n  uuid: tk3brROhNFOdvu5c\n  url: ''\n  parent_uuid: ''\n  doc_id: ''\n  level: 0\n  id: ''\n  open_window: 1\n  visible: 1\n  prev_uuid: esTqfZ-VIsO4KK9Q\n  child_uuid: 89gjblQgjF0QZj7N\n  sibling_uuid: AnAUOtoVl35Ctf-m\n- type: DOC\n  title: 正则表达式梳理\n  uuid: 89gjblQgjF0QZj7N\n  url: ygg1li\n  parent_uuid: tk3brROhNFOdvu5c\n  doc_id: 69445939\n  level: 1\n  id: 69445939\n  open_window: 0\n  visible: 1\n  prev_uuid: tk3brROhNFOdvu5c\n  sibling_uuid: s4St0Tz5-SfLvKIX\n- type: DOC\n  title: 前端自动化测试\n  uuid: s4St0Tz5-SfLvKIX\n  url: tuiqkt\n  parent_uuid: tk3brROhNFOdvu5c\n  doc_id: 32924996\n  level: 1\n  id: 32924996\n  open_window: 1\n  visible: 1\n  prev_uuid: 89gjblQgjF0QZj7N\n  sibling_uuid: dxTurh6P_eb0zy_L\n- type: DOC\n  title: 从图片裁剪了解 javaScript 二进制常用 api\n  uuid: dxTurh6P_eb0zy_L\n  url: dflyyg\n  parent_uuid: tk3brROhNFOdvu5c\n  doc_id: 11942849\n  level: 1\n  id: 11942849\n  open_window: 1\n  visible: 1\n  prev_uuid: s4St0Tz5-SfLvKIX\n  sibling_uuid: zMSTSZz39xp5h8EQ\n- type: DOC\n  title: Hybrid 简介\n  uuid: zMSTSZz39xp5h8EQ\n  url: wgdslk\n  parent_uuid: tk3brROhNFOdvu5c\n  doc_id: 11444492\n  level: 1\n  id: 11444492\n  open_window: 1\n  visible: 1\n  prev_uuid: dxTurh6P_eb0zy_L\n  sibling_uuid: vT0QKWss3m0hDXF_\n- type: DOC\n  title: 渐进式 web 应用程序 pwa 简介\n  uuid: vT0QKWss3m0hDXF_\n  url: fm39qi\n  parent_uuid: tk3brROhNFOdvu5c\n  doc_id: 11444574\n  level: 1\n  id: 11444574\n  open_window: 1\n  visible: 1\n  prev_uuid: zMSTSZz39xp5h8EQ\n  sibling_uuid: BN9ltP3u0AoFK0fF\n- type: DOC\n  title: H5 相关问题收集\n  uuid: BN9ltP3u0AoFK0fF\n  url: gxfam0\n  parent_uuid: tk3brROhNFOdvu5c\n  doc_id: 11465630\n  level: 1\n  id: 11465630\n  open_window: 1\n  visible: 1\n  prev_uuid: vT0QKWss3m0hDXF_\n  sibling_uuid: 9AamH2OW8UgEfrja\n- type: DOC\n  title: 元素隐藏问题\n  uuid: 9AamH2OW8UgEfrja\n  url: ecvr1k\n  parent_uuid: tk3brROhNFOdvu5c\n  doc_id: 11432332\n  level: 1\n  id: 11432332\n  open_window: 1\n  visible: 1\n  prev_uuid: BN9ltP3u0AoFK0fF\n  sibling_uuid: nx-R8OiSdFKMbNkp\n- type: DOC\n  title: 外边距合并问题\n  uuid: nx-R8OiSdFKMbNkp\n  url: vsuafl\n  parent_uuid: tk3brROhNFOdvu5c\n  doc_id: 11432306\n  level: 1\n  id: 11432306\n  open_window: 1\n  visible: 1\n  prev_uuid: 9AamH2OW8UgEfrja\n- type: TITLE\n  title: 三大框架\n  uuid: AnAUOtoVl35Ctf-m\n  url: ''\n  parent_uuid: ''\n  doc_id: ''\n  level: 0\n  id: ''\n  open_window: 1\n  visible: 1\n  prev_uuid: tk3brROhNFOdvu5c\n  child_uuid: d5-PKpnqrDERp5XH\n  sibling_uuid: T6Dd_ALAOey1mOT2\n- type: TITLE\n  title: Vue\n  uuid: d5-PKpnqrDERp5XH\n  url: ''\n  parent_uuid: AnAUOtoVl35Ctf-m\n  doc_id: ''\n  level: 1\n  id: ''\n  open_window: 1\n  visible: 1\n  prev_uuid: AnAUOtoVl35Ctf-m\n  sibling_uuid: 4iLlxHU6lkSzDraZ\n- type: TITLE\n  title: React\n  uuid: 4iLlxHU6lkSzDraZ\n  url: ''\n  parent_uuid: AnAUOtoVl35Ctf-m\n  doc_id: ''\n  level: 1\n  id: ''\n  open_window: 1\n  visible: 1\n  prev_uuid: d5-PKpnqrDERp5XH\n  child_uuid: YWc6qlQILrlxUTHD\n  sibling_uuid: ARWJ2u2tTxx00ebt\n- type: DOC\n  title: React Hooks 的一些特性\n  uuid: YWc6qlQILrlxUTHD\n  url: ydrldx\n  parent_uuid: 4iLlxHU6lkSzDraZ\n  doc_id: 32985727\n  level: 2\n  id: 32985727\n  open_window: 1\n  visible: 1\n  prev_uuid: 4iLlxHU6lkSzDraZ\n  sibling_uuid: ddokQtvYayoQdAz4\n- type: DOC\n  title: 编写 React 组件时常见的 5 个错误\n  uuid: ddokQtvYayoQdAz4\n  url: lscqxu\n  parent_uuid: 4iLlxHU6lkSzDraZ\n  doc_id: 32985721\n  level: 2\n  id: 32985721\n  open_window: 1\n  visible: 1\n  prev_uuid: YWc6qlQILrlxUTHD\n  sibling_uuid: 30Wx9_DYfG0kg9QA\n- type: DOC\n  title: React16 文档\n  uuid: 30Wx9_DYfG0kg9QA\n  url: di9gc4\n  parent_uuid: 4iLlxHU6lkSzDraZ\n  doc_id: 11440297\n  level: 2\n  id: 11440297\n  open_window: 1\n  visible: 1\n  prev_uuid: ddokQtvYayoQdAz4\n  sibling_uuid: aMQJEwPDNep085nZ\n- type: DOC\n  title: React 常见面试题\n  uuid: aMQJEwPDNep085nZ\n  url: qf8r3p\n  parent_uuid: 4iLlxHU6lkSzDraZ\n  doc_id: 68063610\n  level: 2\n  id: 68063610\n  open_window: 0\n  visible: 1\n  prev_uuid: 30Wx9_DYfG0kg9QA\n- type: TITLE\n  title: Angular\n  uuid: ARWJ2u2tTxx00ebt\n  url: ''\n  parent_uuid: AnAUOtoVl35Ctf-m\n  doc_id: ''\n  level: 1\n  id: ''\n  open_window: 1\n  visible: 1\n  prev_uuid: 4iLlxHU6lkSzDraZ\n- type: DOC\n  title: TS\n  uuid: T6Dd_ALAOey1mOT2\n  url: pggx4l\n  parent_uuid: ''\n  doc_id: 70125357\n  level: 0\n  id: 70125357\n  open_window: 0\n  visible: 1\n  prev_uuid: AnAUOtoVl35Ctf-m\n  sibling_uuid: quDnA_CtXFJewZef\n- type: TITLE\n  title: 构建工具\n  uuid: quDnA_CtXFJewZef\n  url: ''\n  parent_uuid: ''\n  doc_id: ''\n  level: 0\n  id: ''\n  open_window: 1\n  visible: 1\n  prev_uuid: T6Dd_ALAOey1mOT2\n  child_uuid: ko6UTJnvyRxJxFks\n  sibling_uuid: Nvq-1t47zI5eZ5K2\n- type: TITLE\n  title: Webpack\n  uuid: ko6UTJnvyRxJxFks\n  url: ''\n  parent_uuid: quDnA_CtXFJewZef\n  doc_id: ''\n  level: 1\n  id: ''\n  open_window: 1\n  visible: 1\n  prev_uuid: quDnA_CtXFJewZef\n  sibling_uuid: mF0ZJuTxvQYAlc-6\n- type: TITLE\n  title: Vite\n  uuid: mF0ZJuTxvQYAlc-6\n  url: ''\n  parent_uuid: quDnA_CtXFJewZef\n  doc_id: ''\n  level: 1\n  id: ''\n  open_window: 1\n  visible: 1\n  prev_uuid: ko6UTJnvyRxJxFks\n- type: TITLE\n  title: Node\n  uuid: Nvq-1t47zI5eZ5K2\n  url: ''\n  parent_uuid: ''\n  doc_id: ''\n  level: 0\n  id: ''\n  open_window: 1\n  visible: 1\n  prev_uuid: quDnA_CtXFJewZef\n  child_uuid: N9McFxnJzAZ1joGk\n  sibling_uuid: 2ip6Vh79GxkcT9qC\n- type: DOC\n  title: 传统部署\n  uuid: N9McFxnJzAZ1joGk\n  url: gzrbf3\n  parent_uuid: Nvq-1t47zI5eZ5K2\n  doc_id: 11465755\n  level: 1\n  id: 11465755\n  open_window: 1\n  visible: 1\n  prev_uuid: Nvq-1t47zI5eZ5K2\n  sibling_uuid: iav0UTEn9wp9P6wQ\n- type: DOC\n  title: graphql\n  uuid: iav0UTEn9wp9P6wQ\n  url: cnpgks\n  parent_uuid: Nvq-1t47zI5eZ5K2\n  doc_id: 11465980\n  level: 1\n  id: 11465980\n  open_window: 1\n  visible: 1\n  prev_uuid: N9McFxnJzAZ1joGk\n- type: TITLE\n  title: 面试精选文章\n  uuid: 2ip6Vh79GxkcT9qC\n  url: ''\n  parent_uuid: ''\n  doc_id: ''\n  level: 0\n  id: ''\n  open_window: 1\n  visible: 1\n  prev_uuid: Nvq-1t47zI5eZ5K2\n  child_uuid: e-Y2Xaz9wC8qUoRT\n- type: DOC\n  title: Css 精选\n  uuid: e-Y2Xaz9wC8qUoRT\n  url: wcrp5i\n  parent_uuid: 2ip6Vh79GxkcT9qC\n  doc_id: 69585398\n  level: 1\n  id: 69585398\n  open_window: 0\n  visible: 1\n  prev_uuid: 2ip6Vh79GxkcT9qC\n  sibling_uuid: dKE7-48QzE7EMFuU\n- type: DOC\n  title: Html 精选\n  uuid: dKE7-48QzE7EMFuU\n  url: if2bzn\n  parent_uuid: 2ip6Vh79GxkcT9qC\n  doc_id: 69585313\n  level: 1\n  id: 69585313\n  open_window: 0\n  visible: 1\n  prev_uuid: e-Y2Xaz9wC8qUoRT\n  sibling_uuid: DMqan83XPeKFCVOy\n- type: DOC\n  title: JavaScript 精选\n  uuid: DMqan83XPeKFCVOy\n  url: omn9xg\n  parent_uuid: 2ip6Vh79GxkcT9qC\n  doc_id: 69584814\n  level: 1\n  id: 69584814\n  open_window: 0\n  visible: 1\n  prev_uuid: dKE7-48QzE7EMFuU\n  sibling_uuid: kuWh1bH6rb88i7up\n- type: DOC\n  title: 计算机网络精选\n  uuid: kuWh1bH6rb88i7up\n  url: uyhudu\n  parent_uuid: 2ip6Vh79GxkcT9qC\n  doc_id: 69584083\n  level: 1\n  id: 69584083\n  open_window: 0\n  visible: 1\n  prev_uuid: DMqan83XPeKFCVOy\n  sibling_uuid: MVGimszERfJIqa5_\n- type: DOC\n  title: 操作系统精选\n  uuid: MVGimszERfJIqa5_\n  url: nyvkbg\n  parent_uuid: 2ip6Vh79GxkcT9qC\n  doc_id: 69584018\n  level: 1\n  id: 69584018\n  open_window: 0\n  visible: 1\n  prev_uuid: kuWh1bH6rb88i7up\n",
    "creator_id": 732231,
    "public": 0,
    "items_count": 23,
    "likes_count": 0,
    "watches_count": 1,
    "content_updated_at": "2022-06-15T01:16:19.043Z",
    "created_at": "2022-03-13T09:55:39.000Z",
    "updated_at": "2023-11-11T18:11:38.000Z",
    "user": {
      "id": 732231,
      "type": "User",
      "login": "wcywxq",
      "name": "magic",
      "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/732231/1606968271774-avatar/886ad88b-d2cc-4c9e-a674-f70eb51a679c.png",
      "books_count": 21,
      "public_books_count": 0,
      "followers_count": 0,
      "following_count": 0,
      "public": 1,
      "description": null,
      "created_at": "2020-01-08T14:21:31.000Z",
      "updated_at": "2023-11-22T20:13:30.000Z",
      "work_id": "",
      "_serializer": "v2.user"
    },
    "namespace": "wcywxq/xxble8",
    "_serializer": "v2.book"
  },
  "user": {
    "id": 732231,
    "type": "User",
    "login": "wcywxq",
    "name": "magic",
    "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/732231/1606968271774-avatar/886ad88b-d2cc-4c9e-a674-f70eb51a679c.png",
    "books_count": 21,
    "public_books_count": 0,
    "followers_count": 0,
    "following_count": 0,
    "public": 1,
    "description": null,
    "created_at": "2020-01-08T14:21:31.000Z",
    "updated_at": "2023-11-22T20:13:30.000Z",
    "work_id": "",
    "_serializer": "v2.user"
  },
  "tags": [],
  "latest_version_id": 848344049,
  "creator": {
    "id": 732231,
    "type": "User",
    "login": "wcywxq",
    "name": "magic",
    "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/732231/1606968271774-avatar/886ad88b-d2cc-4c9e-a674-f70eb51a679c.png",
    "books_count": 21,
    "public_books_count": 0,
    "followers_count": 0,
    "following_count": 0,
    "public": 1,
    "description": null,
    "created_at": "2020-01-08T14:21:31.000Z",
    "updated_at": "2023-11-22T20:13:30.000Z",
    "work_id": "",
    "_serializer": "v2.user"
  },
  "_serializer": "v2.doc_detail"
}