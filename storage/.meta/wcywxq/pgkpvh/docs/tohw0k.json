{
  "id": 77021687,
  "slug": "tohw0k",
  "title": "洗牌算法",
  "description": "代码模版洗牌算法的正确性原则：产生的结果必须有 n! 种可能，否则就是错误的// 得到一个在闭区间 [min, max] 内的随机整数 int randInt(int min, int max);  // 第一种写法 void shuffle(int[] arr) {     int n = ...",
  "cover": "",
  "user_id": 732231,
  "book_id": 27818302,
  "last_editor_id": 732231,
  "format": "lake",
  "body_draft": "",
  "body": "<a name=\"wN5qR\"></a>\n## 代码模版\n> 洗牌算法的正确性原则：产生的结果必须有 n! 种可能，否则就是错误的\n\n```cpp\n// 得到一个在闭区间 [min, max] 内的随机整数\nint randInt(int min, int max);\n\n// 第一种写法\nvoid shuffle(int[] arr) {\n    int n = arr.length();\n    /******** 区别只有这两行 ********/\n    for (int i = 0 ; i < n; i++) {\n        // 从 i 到最后随机选一个元素\n        int rand = randInt(i, n - 1);\n        /*************************/\n        swap(arr[i], arr[rand]);\n    }\n}\n\n// 第二种写法\nfor (int i = 0 ; i < n - 1; i++)\n    int rand = randInt(i, n - 1);\n\n// 第三种写法\nfor (int i = n - 1 ; i >= 0; i--)\n    int rand = randInt(0, i);\n\n// 第四种写法\nfor (int i = n - 1 ; i > 0; i--)\n    int rand = randInt(0, i);\n```\n\n---\n\n<a name=\"Fisher-Yates\"></a>\n## Fisher-Yates\n\n先看最经典的 [Fisher-Yates](http://en.wikipedia.org/wiki/Fisher-Yates_shuffle) 的洗牌算法<br />这里有一个该算法的[可视化实现](https://bost.ocks.org/mike/shuffle/)<br />其算法思想就是 **从原始数组中随机抽取一个新的元素到新数组中**\n\n1. 从还没处理的数组（假如还剩 n 个）中，产生一个[0, n]之间的随机数 random\n2. 从剩下的 n 个元素中把第 random 个元素取出到新数组中\n3. 删除原数组第 random 个元素\n4. 重复第 2 3 步直到所有元素取完\n5. 最终返回一个新的打乱的数组\n\n按步骤一步一步来就很简单的实现<br />\n\n```javascript\nfunction shuffle(arr) {\n    var result = []\n    while (arr.length > 0) {\n        let index = Math.floor(Math.random() * arr.length)\n        result.push(arr.splice(index, 1))\n    }\n    return result\n}\n\nfunction shuffle(arr) {\n    for (let i = 0; i < arr.length; ++i) {\n        const index = Math.floor(Math.random() * (arr.length - i)) + i\n        ;[arr[i], arr[index]] = [arr[index], arr[i]]\n    }\n    return this.nums\n}\n```\n\n这种算法要去除原数组 arr 中的元素，所以时间复杂度为 O(n2))\n\n<a name=\"ab672078\"></a>\n## Knuth-Durstenfeld Shuffle\n\nFisher-Yates 洗牌算法的一个变种是 Knuth Shuffle<br />**每次从未处理的数组中随机取一个元素，然后把该元素放到数组的尾部，即数组的尾部放的就是已经处理过的元素**，这是一种原地打乱的算法，每个元素随机概率也相等，时间复杂度从 Fisher 算法的 O(n2)提升到了 O(n)\n\n1. 选取数组(长度 n)中最后一个元素(arr[length-1])，将其与 n 个元素中的任意一个交换，此时最后一个元素已经确定\n2. 选取倒数第二个元素(arr[length-2])，将其与 n-1 个元素中的任意一个交换\n3. 重复第 1 2 步，直到剩下 1 个元素为止\n\n```javascript\nfunction shuffle(arr) {\n    var length = arr.length,\n        temp,\n        random\n    while (0 != length) {\n        random = Math.floor(Math.random() * length)\n        length--\n        // swap\n        temp = arr[length]\n        arr[length] = arr[random]\n        arr[random] = temp\n    }\n    return arr\n}\n```\n\nDurstenfeld Shuffle 的算法是从数组第一个开始，和 Knuth 的区别是遍历的方向不同\n\n<a name=\"Other\"></a>\n## Other\n\n<a name=\"4f0db99a\"></a>\n### Array.sort()\n\n利用 Array 的 sort 方法可以更简洁的实现打乱，对于数量小的数组来说足够。因为随着数组元素增加，随机性会变差。\n\n```javascript\n;[1, 2, 3, 4, 5, 6].sort(function () {\n    return 0.5 - Math.random()\n})\n```\n\n",
  "body_html": "<!doctype html><h2 id=\"wN5qR\"><span>代码模版</span></h2><blockquote><p data-lake-id=\"u20500674\"><span>洗牌算法的正确性原则：</span><span class=\"lake-fontsize-12\" style=\"color: #262626;\">产生的结果必须有 n! 种可能，否则就是错误的</span></p></blockquote><pre data-lang=\"cpp\"><code>// 得到一个在闭区间 [min, max] 内的随机整数\nint randInt(int min, int max);\n\n// 第一种写法\nvoid shuffle(int[] arr) {\n    int n = arr.length();\n    /******** 区别只有这两行 ********/\n    for (int i = 0 ; i &lt; n; i++) {\n        // 从 i 到最后随机选一个元素\n        int rand = randInt(i, n - 1);\n        /*************************/\n        swap(arr[i], arr[rand]);\n    }\n}\n\n// 第二种写法\nfor (int i = 0 ; i &lt; n - 1; i++)\n    int rand = randInt(i, n - 1);\n\n// 第三种写法\nfor (int i = n - 1 ; i &gt;= 0; i--)\n    int rand = randInt(0, i);\n\n// 第四种写法\nfor (int i = n - 1 ; i &gt; 0; i--)\n    int rand = randInt(0, i);</code></pre><hr /><h2 id=\"Fisher-Yates\"><span>Fisher-Yates</span></h2><p data-lake-id=\"u6cc7a64e\"><br /></p><p data-lake-id=\"ua0ceffa2\"><span>先看最经典的 </span><a href=\"http://en.wikipedia.org/wiki/Fisher-Yates_shuffle\" target=\"_blank\"><span>Fisher-Yates</span></a><span> 的洗牌算法<br /></span><span>这里有一个该算法的</span><a href=\"https://bost.ocks.org/mike/shuffle/\" target=\"_blank\"><span>可视化实现</span></a><span><br /></span><span>其算法思想就是 </span><strong><span>从原始数组中随机抽取一个新的元素到新数组中</span></strong></p><p data-lake-id=\"u0ca428bc\"><br /></p><ol><li><span>从还没处理的数组（假如还剩 n 个）中，产生一个[0, n]之间的随机数 random</span></li><li><span>从剩下的 n 个元素中把第 random 个元素取出到新数组中</span></li><li><span>删除原数组第 random 个元素</span></li><li><span>重复第 2 3 步直到所有元素取完</span></li><li><span>最终返回一个新的打乱的数组</span></li></ol><p data-lake-id=\"u1ca12532\"><br /></p><p data-lake-id=\"ucea0b7c3\"><span>按步骤一步一步来就很简单的实现<br /></span><span>​</span></p><p data-lake-id=\"u75f8211d\"><br /></p><pre data-lang=\"javascript\"><code>function shuffle(arr) {\n    var result = []\n    while (arr.length &gt; 0) {\n        let index = Math.floor(Math.random() * arr.length)\n        result.push(arr.splice(index, 1))\n    }\n    return result\n}\n\nfunction shuffle(arr) {\n    for (let i = 0; i &lt; arr.length; ++i) {\n        const index = Math.floor(Math.random() * (arr.length - i)) + i\n        ;[arr[i], arr[index]] = [arr[index], arr[i]]\n    }\n    return this.nums\n}</code></pre><p data-lake-id=\"uef441624\"><br /></p><p data-lake-id=\"uf6c2418b\"><span>这种算法要去除原数组 arr 中的元素，所以时间复杂度为 O(n2)</span><sup><span>​</span></sup><span>)</span></p><p data-lake-id=\"uf32486eb\"><br /></p><h2 id=\"ab672078\"><span>Knuth-Durstenfeld Shuffle</span></h2><p data-lake-id=\"u9f636457\"><br /></p><p data-lake-id=\"u5fe7c85e\"><span>Fisher-Yates 洗牌算法的一个变种是 Knuth Shuffle<br /></span><strong><span>每次从未处理的数组中随机取一个元素，然后把该元素放到数组的尾部，即数组的尾部放的就是已经处理过的元素</span></strong><span>，这是一种原地打乱的算法，每个元素随机概率也相等，时间复杂度从 Fisher 算法的 O(n2)提升到了 O(n)</span></p><p data-lake-id=\"u1afaaf22\"><br /></p><ol><li><span>选取数组(长度 n)中最后一个元素(arr[length-1])，将其与 n 个元素中的任意一个交换，此时最后一个元素已经确定</span></li><li><span>选取倒数第二个元素(arr[length-2])，将其与 n-1 个元素中的任意一个交换</span></li><li><span>重复第 1 2 步，直到剩下 1 个元素为止</span></li></ol><p data-lake-id=\"u6048f476\"><br /></p><pre data-lang=\"javascript\"><code>function shuffle(arr) {\n    var length = arr.length,\n        temp,\n        random\n    while (0 != length) {\n        random = Math.floor(Math.random() * length)\n        length--\n        // swap\n        temp = arr[length]\n        arr[length] = arr[random]\n        arr[random] = temp\n    }\n    return arr\n}</code></pre><p data-lake-id=\"ud1b2a153\"><br /></p><p data-lake-id=\"u8138ada5\"><span>Durstenfeld Shuffle 的算法是从数组第一个开始，和 Knuth 的区别是遍历的方向不同</span></p><p data-lake-id=\"u574d257c\"><br /></p><h2 id=\"Other\"><span>Other</span></h2><p data-lake-id=\"ucf82026f\"><br /></p><h3 id=\"4f0db99a\"><span>Array.sort()</span></h3><p data-lake-id=\"u18b3f1a4\"><br /></p><p data-lake-id=\"ud2462f0f\"><span>利用 Array 的 sort 方法可以更简洁的实现打乱，对于数量小的数组来说足够。因为随着数组元素增加，随机性会变差。</span></p><p data-lake-id=\"u498f2bac\"><br /></p><pre data-lang=\"javascript\"><code>;[1, 2, 3, 4, 5, 6].sort(function () {\n    return 0.5 - Math.random()\n})</code></pre><p data-lake-id=\"u456d067b\"><br /></p>",
  "body_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"viewport\" content=\"adapt\" /><h2 data-lake-id=\"wN5qR\" id=\"wN5qR\"><span data-lake-id=\"u9d95a437\" id=\"u9d95a437\">代码模版</span></h2><blockquote data-lake-id=\"ue25bdfda\" id=\"ue25bdfda\"><p data-lake-id=\"u20500674\" id=\"u20500674\"><span data-lake-id=\"u069beb39\" id=\"u069beb39\">洗牌算法的正确性原则：</span><span data-lake-id=\"u66f3bb1e\" id=\"u66f3bb1e\" class=\"lake-fontsize-12\" style=\"color: rgb(38, 38, 38)\">产生的结果必须有 n! 种可能，否则就是错误的</span></p></blockquote><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22cpp%22%2C%22code%22%3A%22%2F%2F%20%E5%BE%97%E5%88%B0%E4%B8%80%E4%B8%AA%E5%9C%A8%E9%97%AD%E5%8C%BA%E9%97%B4%20%5Bmin%2C%20max%5D%20%E5%86%85%E7%9A%84%E9%9A%8F%E6%9C%BA%E6%95%B4%E6%95%B0%5Cnint%20randInt(int%20min%2C%20int%20max)%3B%5Cn%5Cn%2F%2F%20%E7%AC%AC%E4%B8%80%E7%A7%8D%E5%86%99%E6%B3%95%5Cnvoid%20shuffle(int%5B%5D%20arr)%20%7B%5Cn%20%20%20%20int%20n%20%3D%20arr.length()%3B%5Cn%20%20%20%20%2F********%20%E5%8C%BA%E5%88%AB%E5%8F%AA%E6%9C%89%E8%BF%99%E4%B8%A4%E8%A1%8C%20********%2F%5Cn%20%20%20%20for%20(int%20i%20%3D%200%20%3B%20i%20%3C%20n%3B%20i%2B%2B)%20%7B%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E4%BB%8E%20i%20%E5%88%B0%E6%9C%80%E5%90%8E%E9%9A%8F%E6%9C%BA%E9%80%89%E4%B8%80%E4%B8%AA%E5%85%83%E7%B4%A0%5Cn%20%20%20%20%20%20%20%20int%20rand%20%3D%20randInt(i%2C%20n%20-%201)%3B%5Cn%20%20%20%20%20%20%20%20%2F*************************%2F%5Cn%20%20%20%20%20%20%20%20swap(arr%5Bi%5D%2C%20arr%5Brand%5D)%3B%5Cn%20%20%20%20%7D%5Cn%7D%5Cn%5Cn%2F%2F%20%E7%AC%AC%E4%BA%8C%E7%A7%8D%E5%86%99%E6%B3%95%5Cnfor%20(int%20i%20%3D%200%20%3B%20i%20%3C%20n%20-%201%3B%20i%2B%2B)%5Cn%20%20%20%20int%20rand%20%3D%20randInt(i%2C%20n%20-%201)%3B%5Cn%5Cn%2F%2F%20%E7%AC%AC%E4%B8%89%E7%A7%8D%E5%86%99%E6%B3%95%5Cnfor%20(int%20i%20%3D%20n%20-%201%20%3B%20i%20%3E%3D%200%3B%20i--)%5Cn%20%20%20%20int%20rand%20%3D%20randInt(0%2C%20i)%3B%5Cn%5Cn%2F%2F%20%E7%AC%AC%E5%9B%9B%E7%A7%8D%E5%86%99%E6%B3%95%5Cnfor%20(int%20i%20%3D%20n%20-%201%20%3B%20i%20%3E%200%3B%20i--)%5Cn%20%20%20%20int%20rand%20%3D%20randInt(0%2C%20i)%3B%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22bH2oc%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><card type=\"block\" name=\"hr\" value=\"data:%7B%22id%22%3A%22jrkE4%22%7D\"></card><h2 data-lake-id=\"Fisher-Yates\" id=\"Fisher-Yates\"><span data-lake-id=\"ubc0fc5df\" id=\"ubc0fc5df\">Fisher-Yates</span></h2><p data-lake-id=\"u6cc7a64e\" id=\"u6cc7a64e\"><br></p><p data-lake-id=\"ua0ceffa2\" id=\"ua0ceffa2\"><span data-lake-id=\"u96f3b2c6\" id=\"u96f3b2c6\">先看最经典的 </span><a href=\"http://en.wikipedia.org/wiki/Fisher-Yates_shuffle\" target=\"_blank\" data-lake-id=\"ua238188d\" id=\"ua238188d\"><span data-lake-id=\"u334334a3\" id=\"u334334a3\">Fisher-Yates</span></a><span data-lake-id=\"ue33dd6a6\" id=\"ue33dd6a6\"> 的洗牌算法<br /></span><span data-lake-id=\"u09fad171\" id=\"u09fad171\">这里有一个该算法的</span><a href=\"https://bost.ocks.org/mike/shuffle/\" target=\"_blank\" data-lake-id=\"u85ad9f92\" id=\"u85ad9f92\"><span data-lake-id=\"u5f305fcb\" id=\"u5f305fcb\">可视化实现</span></a><span data-lake-id=\"u8d4a601e\" id=\"u8d4a601e\"><br /></span><span data-lake-id=\"u6ceaf069\" id=\"u6ceaf069\">其算法思想就是 </span><strong><span data-lake-id=\"udca14459\" id=\"udca14459\">从原始数组中随机抽取一个新的元素到新数组中</span></strong></p><p data-lake-id=\"u0ca428bc\" id=\"u0ca428bc\"><br></p><ol list=\"uc7d98ff2\"><li fid=\"u91fa15ee\" data-lake-id=\"u388663be\" id=\"u388663be\"><span data-lake-id=\"ubec43c7c\" id=\"ubec43c7c\">从还没处理的数组（假如还剩 n 个）中，产生一个[0, n]之间的随机数 random</span></li><li fid=\"u91fa15ee\" data-lake-id=\"ucdb65396\" id=\"ucdb65396\"><span data-lake-id=\"uaee82ffc\" id=\"uaee82ffc\">从剩下的 n 个元素中把第 random 个元素取出到新数组中</span></li><li fid=\"u91fa15ee\" data-lake-id=\"ubf3166b0\" id=\"ubf3166b0\"><span data-lake-id=\"u3410d90b\" id=\"u3410d90b\">删除原数组第 random 个元素</span></li><li fid=\"u91fa15ee\" data-lake-id=\"u5b8ba7ae\" id=\"u5b8ba7ae\"><span data-lake-id=\"ufa9478d7\" id=\"ufa9478d7\">重复第 2 3 步直到所有元素取完</span></li><li fid=\"u91fa15ee\" data-lake-id=\"ueabe9be0\" id=\"ueabe9be0\"><span data-lake-id=\"u5bd9d394\" id=\"u5bd9d394\">最终返回一个新的打乱的数组</span></li></ol><p data-lake-id=\"u1ca12532\" id=\"u1ca12532\"><br></p><p data-lake-id=\"ucea0b7c3\" id=\"ucea0b7c3\"><span data-lake-id=\"u1274df56\" id=\"u1274df56\">按步骤一步一步来就很简单的实现<br /></span><span data-lake-id=\"uc91832ab\" id=\"uc91832ab\">​</span></p><p data-lake-id=\"u75f8211d\" id=\"u75f8211d\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22function%20shuffle(arr)%20%7B%5Cn%20%20%20%20var%20result%20%3D%20%5B%5D%5Cn%20%20%20%20while%20(arr.length%20%3E%200)%20%7B%5Cn%20%20%20%20%20%20%20%20let%20index%20%3D%20Math.floor(Math.random()%20*%20arr.length)%5Cn%20%20%20%20%20%20%20%20result.push(arr.splice(index%2C%201))%5Cn%20%20%20%20%7D%5Cn%20%20%20%20return%20result%5Cn%7D%5Cn%5Cnfunction%20shuffle(arr)%20%7B%5Cn%20%20%20%20for%20(let%20i%20%3D%200%3B%20i%20%3C%20arr.length%3B%20%2B%2Bi)%20%7B%5Cn%20%20%20%20%20%20%20%20const%20index%20%3D%20Math.floor(Math.random()%20*%20(arr.length%20-%20i))%20%2B%20i%5Cn%20%20%20%20%20%20%20%20%3B%5Barr%5Bi%5D%2C%20arr%5Bindex%5D%5D%20%3D%20%5Barr%5Bindex%5D%2C%20arr%5Bi%5D%5D%5Cn%20%20%20%20%7D%5Cn%20%20%20%20return%20this.nums%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22id%22%3A%22fdc44f4a%22%7D\"></card><p data-lake-id=\"uef441624\" id=\"uef441624\"><br></p><p data-lake-id=\"uf6c2418b\" id=\"uf6c2418b\"><span data-lake-id=\"u6d187bfe\" id=\"u6d187bfe\">这种算法要去除原数组 arr 中的元素，所以时间复杂度为 O(n2)</span><sup><span data-lake-id=\"u58bcfeaf\" id=\"u58bcfeaf\">​</span></sup><span data-lake-id=\"u44e494a0\" id=\"u44e494a0\">)</span></p><p data-lake-id=\"uf32486eb\" id=\"uf32486eb\"><br></p><h2 data-lake-id=\"ab672078\" id=\"ab672078\"><span data-lake-id=\"uc2760b9e\" id=\"uc2760b9e\">Knuth-Durstenfeld Shuffle</span></h2><p data-lake-id=\"u9f636457\" id=\"u9f636457\"><br></p><p data-lake-id=\"u5fe7c85e\" id=\"u5fe7c85e\"><span data-lake-id=\"u9245fbc0\" id=\"u9245fbc0\">Fisher-Yates 洗牌算法的一个变种是 Knuth Shuffle<br /></span><strong><span data-lake-id=\"u54493408\" id=\"u54493408\">每次从未处理的数组中随机取一个元素，然后把该元素放到数组的尾部，即数组的尾部放的就是已经处理过的元素</span></strong><span data-lake-id=\"ub268eee3\" id=\"ub268eee3\">，这是一种原地打乱的算法，每个元素随机概率也相等，时间复杂度从 Fisher 算法的 O(n2)提升到了 O(n)</span></p><p data-lake-id=\"u1afaaf22\" id=\"u1afaaf22\"><br></p><ol list=\"u11ef5b7e\"><li fid=\"uac1c3f48\" data-lake-id=\"uf2980484\" id=\"uf2980484\"><span data-lake-id=\"ue324b831\" id=\"ue324b831\">选取数组(长度 n)中最后一个元素(arr[length-1])，将其与 n 个元素中的任意一个交换，此时最后一个元素已经确定</span></li><li fid=\"uac1c3f48\" data-lake-id=\"ue626caa3\" id=\"ue626caa3\"><span data-lake-id=\"u0bcf7f01\" id=\"u0bcf7f01\">选取倒数第二个元素(arr[length-2])，将其与 n-1 个元素中的任意一个交换</span></li><li fid=\"uac1c3f48\" data-lake-id=\"u667a7ff9\" id=\"u667a7ff9\"><span data-lake-id=\"u5d6118a4\" id=\"u5d6118a4\">重复第 1 2 步，直到剩下 1 个元素为止</span></li></ol><p data-lake-id=\"u6048f476\" id=\"u6048f476\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22function%20shuffle(arr)%20%7B%5Cn%20%20%20%20var%20length%20%3D%20arr.length%2C%5Cn%20%20%20%20%20%20%20%20temp%2C%5Cn%20%20%20%20%20%20%20%20random%5Cn%20%20%20%20while%20(0%20!%3D%20length)%20%7B%5Cn%20%20%20%20%20%20%20%20random%20%3D%20Math.floor(Math.random()%20*%20length)%5Cn%20%20%20%20%20%20%20%20length--%5Cn%20%20%20%20%20%20%20%20%2F%2F%20swap%5Cn%20%20%20%20%20%20%20%20temp%20%3D%20arr%5Blength%5D%5Cn%20%20%20%20%20%20%20%20arr%5Blength%5D%20%3D%20arr%5Brandom%5D%5Cn%20%20%20%20%20%20%20%20arr%5Brandom%5D%20%3D%20temp%5Cn%20%20%20%20%7D%5Cn%20%20%20%20return%20arr%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22id%22%3A%22a9f96d3b%22%7D\"></card><p data-lake-id=\"ud1b2a153\" id=\"ud1b2a153\"><br></p><p data-lake-id=\"u8138ada5\" id=\"u8138ada5\"><span data-lake-id=\"u2bb22a15\" id=\"u2bb22a15\">Durstenfeld Shuffle 的算法是从数组第一个开始，和 Knuth 的区别是遍历的方向不同</span></p><p data-lake-id=\"u574d257c\" id=\"u574d257c\"><br></p><h2 data-lake-id=\"Other\" id=\"Other\"><span data-lake-id=\"ucb091d0e\" id=\"ucb091d0e\">Other</span></h2><p data-lake-id=\"ucf82026f\" id=\"ucf82026f\"><br></p><h3 data-lake-id=\"4f0db99a\" id=\"4f0db99a\"><span data-lake-id=\"u9879809e\" id=\"u9879809e\">Array.sort()</span></h3><p data-lake-id=\"u18b3f1a4\" id=\"u18b3f1a4\"><br></p><p data-lake-id=\"ud2462f0f\" id=\"ud2462f0f\"><span data-lake-id=\"u28721a79\" id=\"u28721a79\">利用 Array 的 sort 方法可以更简洁的实现打乱，对于数量小的数组来说足够。因为随着数组元素增加，随机性会变差。</span></p><p data-lake-id=\"u498f2bac\" id=\"u498f2bac\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%3B%5B1%2C%202%2C%203%2C%204%2C%205%2C%206%5D.sort(function%20()%20%7B%5Cn%20%20%20%20return%200.5%20-%20Math.random()%5Cn%7D)%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22id%22%3A%22a03a2ca7%22%7D\"></card><p data-lake-id=\"u456d067b\" id=\"u456d067b\"><br></p>",
  "public": 0,
  "status": 1,
  "likes_count": 0,
  "read_count": 0,
  "hits": 0,
  "comments_count": 0,
  "word_count": 752,
  "created_at": "2022-05-11T15:01:57.000Z",
  "updated_at": "2022-05-11T15:08:07.000Z",
  "content_updated_at": "2022-05-11T15:01:57.000Z",
  "published_at": "2022-05-11T15:01:57.000Z",
  "first_published_at": "2022-05-11T15:01:57.395Z",
  "book": {
    "id": 27818302,
    "type": "Book",
    "slug": "pgkpvh",
    "name": "前端面试知识梳理",
    "user_id": 732231,
    "description": "",
    "toc_yml": "- type: META\n  count: 74\n  display_level: 1\n  tail_type: UPDATED_AT\n  base_version_id: 203636985\n  published: true\n  max_level: 1\n  last_updated_at: 2022-05-11T15:02:51.310Z\n  version_id: 203637675\n- type: TITLE\n  title: 基础 api 实现\n  uuid: 8cOHMB0GUaMGEJAZ\n  url: ''\n  prev_uuid: ''\n  sibling_uuid: XzzPhY1bnt-jy6Uq\n  child_uuid: tkSYK-Ar5LWNbwCs\n  parent_uuid: ''\n  doc_id: ''\n  level: 0\n  id: ''\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 实现 es6 的 extends\n  uuid: tkSYK-Ar5LWNbwCs\n  url: vtqbgk\n  prev_uuid: 8cOHMB0GUaMGEJAZ\n  sibling_uuid: iZbjvIrZWQPncGf4\n  child_uuid: ''\n  parent_uuid: 8cOHMB0GUaMGEJAZ\n  doc_id: 77021830\n  level: 1\n  id: 77021830\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 实现 ajax\n  uuid: iZbjvIrZWQPncGf4\n  url: cq5ws4\n  prev_uuid: tkSYK-Ar5LWNbwCs\n  sibling_uuid: GQ98GFTcsA6oX5fu\n  child_uuid: ''\n  parent_uuid: 8cOHMB0GUaMGEJAZ\n  doc_id: 77021696\n  level: 1\n  id: 77021696\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 实现 call、apply、bind\n  uuid: GQ98GFTcsA6oX5fu\n  url: ybrsyw\n  prev_uuid: iZbjvIrZWQPncGf4\n  sibling_uuid: 8mxtq-HrdjGBfE1K\n  child_uuid: ''\n  parent_uuid: 8cOHMB0GUaMGEJAZ\n  doc_id: 77021715\n  level: 1\n  id: 77021715\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 实现 new 关键字\n  uuid: 8mxtq-HrdjGBfE1K\n  url: pldu2b\n  prev_uuid: GQ98GFTcsA6oX5fu\n  sibling_uuid: DTHsD8sppgSTGUG-\n  child_uuid: ''\n  parent_uuid: 8cOHMB0GUaMGEJAZ\n  doc_id: 77021706\n  level: 1\n  id: 77021706\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 函数柯理化\n  uuid: DTHsD8sppgSTGUG-\n  url: yo9cx5\n  prev_uuid: 8mxtq-HrdjGBfE1K\n  sibling_uuid: TaRHTWpqD3Ef8QHU\n  child_uuid: ''\n  parent_uuid: 8cOHMB0GUaMGEJAZ\n  doc_id: 77021634\n  level: 1\n  id: 77021634\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 浅拷贝和深拷贝\n  uuid: TaRHTWpqD3Ef8QHU\n  url: ufks1z\n  prev_uuid: DTHsD8sppgSTGUG-\n  sibling_uuid: 4Z30CA9ZXVdeKnnL\n  child_uuid: ''\n  parent_uuid: 8cOHMB0GUaMGEJAZ\n  doc_id: 77021640\n  level: 1\n  id: 77021640\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 实现 instanceof\n  uuid: 4Z30CA9ZXVdeKnnL\n  url: ba4wuo\n  prev_uuid: TaRHTWpqD3Ef8QHU\n  sibling_uuid: 2MBif8wnmvigRAxT\n  child_uuid: ''\n  parent_uuid: 8cOHMB0GUaMGEJAZ\n  doc_id: 77021689\n  level: 1\n  id: 77021689\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 手动实现定时器\n  uuid: 2MBif8wnmvigRAxT\n  url: wf9bwg\n  prev_uuid: 4Z30CA9ZXVdeKnnL\n  sibling_uuid: 8f6jGaWidUBFSNN7\n  child_uuid: ''\n  parent_uuid: 8cOHMB0GUaMGEJAZ\n  doc_id: 77021645\n  level: 1\n  id: 77021645\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: sleep 函数实现\n  uuid: 8f6jGaWidUBFSNN7\n  url: ngwrak\n  prev_uuid: 2MBif8wnmvigRAxT\n  sibling_uuid: lXeuN-kwl51AKTO0\n  child_uuid: ''\n  parent_uuid: 8cOHMB0GUaMGEJAZ\n  doc_id: 77021787\n  level: 1\n  id: 77021787\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 实现 JSON.stringify\n  uuid: lXeuN-kwl51AKTO0\n  url: mtoe2n\n  prev_uuid: 8f6jGaWidUBFSNN7\n  sibling_uuid: hVvT5-pJ5qVvYNrK\n  child_uuid: ''\n  parent_uuid: 8cOHMB0GUaMGEJAZ\n  doc_id: 77021785\n  level: 1\n  id: 77021785\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: js 通用类型获取\n  uuid: hVvT5-pJ5qVvYNrK\n  url: tll6lm\n  prev_uuid: lXeuN-kwl51AKTO0\n  sibling_uuid: ''\n  child_uuid: ''\n  parent_uuid: 8cOHMB0GUaMGEJAZ\n  doc_id: 77021802\n  level: 1\n  id: 77021802\n  open_window: 0\n  visible: 1\n- type: TITLE\n  title: 防抖和节流\n  uuid: XzzPhY1bnt-jy6Uq\n  url: ''\n  prev_uuid: 8cOHMB0GUaMGEJAZ\n  sibling_uuid: PkyQAjgp1TOfRd_2\n  child_uuid: AQvBtgwRPd2U2nSA\n  parent_uuid: ''\n  doc_id: ''\n  level: 0\n  id: ''\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 防抖\n  uuid: AQvBtgwRPd2U2nSA\n  url: enlngv\n  prev_uuid: XzzPhY1bnt-jy6Uq\n  sibling_uuid: nlhlSMjYGwG8o1jH\n  child_uuid: ''\n  parent_uuid: XzzPhY1bnt-jy6Uq\n  doc_id: 77021614\n  level: 1\n  id: 77021614\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 节流\n  uuid: nlhlSMjYGwG8o1jH\n  url: griz0t\n  prev_uuid: AQvBtgwRPd2U2nSA\n  sibling_uuid: ''\n  child_uuid: ''\n  parent_uuid: XzzPhY1bnt-jy6Uq\n  doc_id: 77021626\n  level: 1\n  id: 77021626\n  open_window: 0\n  visible: 1\n- type: TITLE\n  title: 数组相关\n  uuid: PkyQAjgp1TOfRd_2\n  url: ''\n  prev_uuid: XzzPhY1bnt-jy6Uq\n  sibling_uuid: 5NjAYoIgV-DfXemF\n  child_uuid: xTSsZIKFI9Di3LBH\n  parent_uuid: ''\n  doc_id: ''\n  level: 0\n  id: ''\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 数组转树\n  uuid: xTSsZIKFI9Di3LBH\n  url: bzgequ\n  prev_uuid: PkyQAjgp1TOfRd_2\n  sibling_uuid: Z_6uIAB9XA6raQPD\n  child_uuid: ''\n  parent_uuid: PkyQAjgp1TOfRd_2\n  doc_id: 77021833\n  level: 1\n  id: 77021833\n  open_window: 0\n  visible: 0\n- type: DOC\n  title: 树转数组\n  uuid: Z_6uIAB9XA6raQPD\n  url: xycpzl\n  prev_uuid: xTSsZIKFI9Di3LBH\n  sibling_uuid: hoLauQ33F3aF2wq7\n  child_uuid: ''\n  parent_uuid: PkyQAjgp1TOfRd_2\n  doc_id: 77021835\n  level: 1\n  id: 77021835\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 数组常用方法\n  uuid: hoLauQ33F3aF2wq7\n  url: owtewn\n  prev_uuid: Z_6uIAB9XA6raQPD\n  sibling_uuid: rvc_A-WMsWds7EBa\n  child_uuid: ''\n  parent_uuid: PkyQAjgp1TOfRd_2\n  doc_id: 77021725\n  level: 1\n  id: 77021725\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 数组去重实现\n  uuid: rvc_A-WMsWds7EBa\n  url: gq2z9n\n  prev_uuid: hoLauQ33F3aF2wq7\n  sibling_uuid: NB4bY-etxMWq1YWS\n  child_uuid: ''\n  parent_uuid: PkyQAjgp1TOfRd_2\n  doc_id: 77021623\n  level: 1\n  id: 77021623\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 数组扁平化实现\n  uuid: NB4bY-etxMWq1YWS\n  url: doeryg\n  prev_uuid: rvc_A-WMsWds7EBa\n  sibling_uuid: DBoiy0L7Hhm_Zrkf\n  child_uuid: ''\n  parent_uuid: PkyQAjgp1TOfRd_2\n  doc_id: 77021607\n  level: 1\n  id: 77021607\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 类数组转换为数组\n  uuid: DBoiy0L7Hhm_Zrkf\n  url: csgagn\n  prev_uuid: NB4bY-etxMWq1YWS\n  sibling_uuid: E4WkD_rpaai_v3HK\n  child_uuid: ''\n  parent_uuid: PkyQAjgp1TOfRd_2\n  doc_id: 77021754\n  level: 1\n  id: 77021754\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 实现数组乱序输出\n  uuid: E4WkD_rpaai_v3HK\n  url: xlrgnu\n  prev_uuid: DBoiy0L7Hhm_Zrkf\n  sibling_uuid: OkcuvyhOMA6N0ex4\n  child_uuid: ''\n  parent_uuid: PkyQAjgp1TOfRd_2\n  doc_id: 77021731\n  level: 1\n  id: 77021731\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 查找二维数组的目标值\n  uuid: OkcuvyhOMA6N0ex4\n  url: tmw2ny\n  prev_uuid: E4WkD_rpaai_v3HK\n  sibling_uuid: F8K4-6VRqHrupctd\n  child_uuid: ''\n  parent_uuid: PkyQAjgp1TOfRd_2\n  doc_id: 77021789\n  level: 1\n  id: 77021789\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 二维数组斜向打印\n  uuid: F8K4-6VRqHrupctd\n  url: aqw6my\n  prev_uuid: OkcuvyhOMA6N0ex4\n  sibling_uuid: ''\n  child_uuid: ''\n  parent_uuid: PkyQAjgp1TOfRd_2\n  doc_id: 77021780\n  level: 1\n  id: 77021780\n  open_window: 0\n  visible: 1\n- type: TITLE\n  title: 字符串相关\n  uuid: 5NjAYoIgV-DfXemF\n  url: ''\n  prev_uuid: PkyQAjgp1TOfRd_2\n  sibling_uuid: Q34_kLhQ_uWoQw46\n  child_uuid: XNjX12HqmJBUHjy7\n  parent_uuid: ''\n  doc_id: ''\n  level: 0\n  id: ''\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 实现字符串的 repeat 方法\n  uuid: XNjX12HqmJBUHjy7\n  url: hxelqc\n  prev_uuid: 5NjAYoIgV-DfXemF\n  sibling_uuid: ''\n  child_uuid: ''\n  parent_uuid: 5NjAYoIgV-DfXemF\n  doc_id: 77021740\n  level: 1\n  id: 77021740\n  open_window: 0\n  visible: 1\n- type: TITLE\n  title: promise相关\n  uuid: Q34_kLhQ_uWoQw46\n  url: ''\n  prev_uuid: 5NjAYoIgV-DfXemF\n  sibling_uuid: aXqdYGJNJ1HlijwX\n  child_uuid: fuTj4su1VjBeHDO5\n  parent_uuid: ''\n  doc_id: ''\n  level: 0\n  id: ''\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 实现 Promise A+\n  uuid: fuTj4su1VjBeHDO5\n  url: fl6cgx\n  prev_uuid: Q34_kLhQ_uWoQw46\n  sibling_uuid: IOPLb2N42d3OZ0Zq\n  child_uuid: ''\n  parent_uuid: Q34_kLhQ_uWoQw46\n  doc_id: 77021620\n  level: 1\n  id: 77021620\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: Promise  常用方法实现\n  uuid: IOPLb2N42d3OZ0Zq\n  url: vd2h4l\n  prev_uuid: fuTj4su1VjBeHDO5\n  sibling_uuid: vKLkkDq-XoJwsqMW\n  child_uuid: ''\n  parent_uuid: Q34_kLhQ_uWoQw46\n  doc_id: 77021632\n  level: 1\n  id: 77021632\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: Promise 并发控制\n  uuid: vKLkkDq-XoJwsqMW\n  url: gd3193\n  prev_uuid: IOPLb2N42d3OZ0Zq\n  sibling_uuid: rYJ2dherst1MyK0I\n  child_uuid: ''\n  parent_uuid: Q34_kLhQ_uWoQw46\n  doc_id: 77021662\n  level: 1\n  id: 77021662\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: Promise 缓存\n  uuid: rYJ2dherst1MyK0I\n  url: sgcusf\n  prev_uuid: vKLkkDq-XoJwsqMW\n  sibling_uuid: xZ5UrxtCjhBJxiXK\n  child_uuid: ''\n  parent_uuid: Q34_kLhQ_uWoQw46\n  doc_id: 77021679\n  level: 1\n  id: 77021679\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 异步串行输出\n  uuid: xZ5UrxtCjhBJxiXK\n  url: um4g6z\n  prev_uuid: rYJ2dherst1MyK0I\n  sibling_uuid: fZuICDZLsFJSo57b\n  child_uuid: ''\n  parent_uuid: Q34_kLhQ_uWoQw46\n  doc_id: 77021649\n  level: 1\n  id: 77021649\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 带并发的异步调度器 Scheduler\n  uuid: fZuICDZLsFJSo57b\n  url: kbkc8e\n  prev_uuid: xZ5UrxtCjhBJxiXK\n  sibling_uuid: ''\n  child_uuid: ''\n  parent_uuid: Q34_kLhQ_uWoQw46\n  doc_id: 77021700\n  level: 1\n  id: 77021700\n  open_window: 0\n  visible: 1\n- type: TITLE\n  title: 数据处理\n  uuid: aXqdYGJNJ1HlijwX\n  url: ''\n  prev_uuid: Q34_kLhQ_uWoQw46\n  sibling_uuid: oj23-2V9egz1L0Ic\n  child_uuid: SxxBIhY4HFEaNF8V\n  parent_uuid: ''\n  doc_id: ''\n  level: 0\n  id: ''\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 解析 url 参数对象\n  uuid: SxxBIhY4HFEaNF8V\n  url: rxw8qp\n  prev_uuid: aXqdYGJNJ1HlijwX\n  sibling_uuid: yiD9ldSpBGzQNQxQ\n  child_uuid: ''\n  parent_uuid: aXqdYGJNJ1HlijwX\n  doc_id: 77021764\n  level: 1\n  id: 77021764\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 实现日期格式化函数\n  uuid: yiD9ldSpBGzQNQxQ\n  url: shzfyg\n  prev_uuid: SxxBIhY4HFEaNF8V\n  sibling_uuid: _3QVaw5COwwvCXZv\n  child_uuid: ''\n  parent_uuid: aXqdYGJNJ1HlijwX\n  doc_id: 77021710\n  level: 1\n  id: 77021710\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 交换 a、b 的值，不使用临时变量\n  uuid: _3QVaw5COwwvCXZv\n  url: xw17tv\n  prev_uuid: yiD9ldSpBGzQNQxQ\n  sibling_uuid: Mq5fe2v7j2INDdvL\n  child_uuid: ''\n  parent_uuid: aXqdYGJNJ1HlijwX\n  doc_id: 77021736\n  level: 1\n  id: 77021736\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 获取两个数之间的任意随机数\n  uuid: Mq5fe2v7j2INDdvL\n  url: vhngph\n  prev_uuid: _3QVaw5COwwvCXZv\n  sibling_uuid: 8Chl_bOMaALA1jhP\n  child_uuid: ''\n  parent_uuid: aXqdYGJNJ1HlijwX\n  doc_id: 77021688\n  level: 1\n  id: 77021688\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 将数字千分位用逗号隔开\n  uuid: 8Chl_bOMaALA1jhP\n  url: vphpea\n  prev_uuid: Mq5fe2v7j2INDdvL\n  sibling_uuid: MLI7v9Et4dIn7XiV\n  child_uuid: ''\n  parent_uuid: aXqdYGJNJ1HlijwX\n  doc_id: 77021743\n  level: 1\n  id: 77021743\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 实现非负大整数相加\n  uuid: MLI7v9Et4dIn7XiV\n  url: xlvd0g\n  prev_uuid: 8Chl_bOMaALA1jhP\n  sibling_uuid: mVWcb08QaDpa9PNH\n  child_uuid: ''\n  parent_uuid: aXqdYGJNJ1HlijwX\n  doc_id: 77021748\n  level: 1\n  id: 77021748\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 判断对象是否存在循环引用\n  uuid: mVWcb08QaDpa9PNH\n  url: phqdmd\n  prev_uuid: MLI7v9Et4dIn7XiV\n  sibling_uuid: ''\n  child_uuid: ''\n  parent_uuid: aXqdYGJNJ1HlijwX\n  doc_id: 77021768\n  level: 1\n  id: 77021768\n  open_window: 0\n  visible: 1\n- type: TITLE\n  title: 框架\n  uuid: oj23-2V9egz1L0Ic\n  url: ''\n  prev_uuid: aXqdYGJNJ1HlijwX\n  sibling_uuid: BTeDPodj0NU8fRW3\n  child_uuid: t5HRubL3aXPLNoG6\n  parent_uuid: ''\n  doc_id: ''\n  level: 0\n  id: ''\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 发布订阅模式\n  uuid: t5HRubL3aXPLNoG6\n  url: ezcdgo\n  prev_uuid: oj23-2V9egz1L0Ic\n  sibling_uuid: EqMT4jazWkuKJX1v\n  child_uuid: ''\n  parent_uuid: oj23-2V9egz1L0Ic\n  doc_id: 77021611\n  level: 1\n  id: 77021611\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 观察者模式\n  uuid: EqMT4jazWkuKJX1v\n  url: dwziom\n  prev_uuid: t5HRubL3aXPLNoG6\n  sibling_uuid: O5OEkYSpde-8we8V\n  child_uuid: ''\n  parent_uuid: oj23-2V9egz1L0Ic\n  doc_id: 77021795\n  level: 1\n  id: 77021795\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 简易版 vue2\n  uuid: O5OEkYSpde-8we8V\n  url: indxog\n  prev_uuid: EqMT4jazWkuKJX1v\n  sibling_uuid: XOQaAmtLM_gvM85t\n  child_uuid: ''\n  parent_uuid: oj23-2V9egz1L0Ic\n  doc_id: 77021636\n  level: 1\n  id: 77021636\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 简易版 vue3\n  uuid: XOQaAmtLM_gvM85t\n  url: an017i\n  prev_uuid: O5OEkYSpde-8we8V\n  sibling_uuid: ciSabdz5MTC1wbC7\n  child_uuid: ''\n  parent_uuid: oj23-2V9egz1L0Ic\n  doc_id: 77021804\n  level: 1\n  id: 77021804\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 简易版 vuex\n  uuid: ciSabdz5MTC1wbC7\n  url: myzomg\n  prev_uuid: XOQaAmtLM_gvM85t\n  sibling_uuid: ''\n  child_uuid: ''\n  parent_uuid: oj23-2V9egz1L0Ic\n  doc_id: 77021704\n  level: 1\n  id: 77021704\n  open_window: 0\n  visible: 1\n- type: TITLE\n  title: 应用场景\n  uuid: BTeDPodj0NU8fRW3\n  url: ''\n  prev_uuid: oj23-2V9egz1L0Ic\n  sibling_uuid: KKJ-BzUK3K9FxUJ2\n  child_uuid: U1oF7BfjBGNpWa79\n  parent_uuid: ''\n  doc_id: ''\n  level: 0\n  id: ''\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 通过调用 addRemote 实现 add\n  uuid: U1oF7BfjBGNpWa79\n  url: edff3s\n  prev_uuid: BTeDPodj0NU8fRW3\n  sibling_uuid: RMAn78BGFgyI8W6c\n  child_uuid: ''\n  parent_uuid: BTeDPodj0NU8fRW3\n  doc_id: 77021816\n  level: 1\n  id: 77021816\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 倒计时\n  uuid: RMAn78BGFgyI8W6c\n  url: uwleof\n  prev_uuid: U1oF7BfjBGNpWa79\n  sibling_uuid: aYlobR47xz0qHkhF\n  child_uuid: ''\n  parent_uuid: BTeDPodj0NU8fRW3\n  doc_id: 77021810\n  level: 1\n  id: 77021810\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 版本号比较\n  uuid: aYlobR47xz0qHkhF\n  url: cynvvd\n  prev_uuid: RMAn78BGFgyI8W6c\n  sibling_uuid: N0u_B_WnmtCeQwFI\n  child_uuid: ''\n  parent_uuid: BTeDPodj0NU8fRW3\n  doc_id: 77021792\n  level: 1\n  id: 77021792\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 实现简单路由\n  uuid: N0u_B_WnmtCeQwFI\n  url: zzc9k3\n  prev_uuid: aYlobR47xz0qHkhF\n  sibling_uuid: es8IUmiyOTWzwKa9\n  child_uuid: ''\n  parent_uuid: BTeDPodj0NU8fRW3\n  doc_id: 77021784\n  level: 1\n  id: 77021784\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 长列表虚拟滚动\n  uuid: es8IUmiyOTWzwKa9\n  url: wsmws7\n  prev_uuid: N0u_B_WnmtCeQwFI\n  sibling_uuid: yKn9f3BKX1S3tsyK\n  child_uuid: ''\n  parent_uuid: BTeDPodj0NU8fRW3\n  doc_id: 77021653\n  level: 1\n  id: 77021653\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 围圈报数问题\n  uuid: yKn9f3BKX1S3tsyK\n  url: gkoa19\n  prev_uuid: es8IUmiyOTWzwKa9\n  sibling_uuid: zmiKBP3HABO6Ig_9\n  child_uuid: ''\n  parent_uuid: BTeDPodj0NU8fRW3\n  doc_id: 77021761\n  level: 1\n  id: 77021761\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 查找文章中出现频率最高的词\n  uuid: zmiKBP3HABO6Ig_9\n  url: rln2y3\n  prev_uuid: yKn9f3BKX1S3tsyK\n  sibling_uuid: cDzdEkch3JypwTh2\n  child_uuid: ''\n  parent_uuid: BTeDPodj0NU8fRW3\n  doc_id: 77021772\n  level: 1\n  id: 77021772\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: Promise 每隔 1s 输出 1、2、3\n  uuid: cDzdEkch3JypwTh2\n  url: yg55el\n  prev_uuid: zmiKBP3HABO6Ig_9\n  sibling_uuid: II7sWIfm_eSWwKfq\n  child_uuid: ''\n  parent_uuid: BTeDPodj0NU8fRW3\n  doc_id: 77021821\n  level: 1\n  id: 77021821\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 循环打印红黄绿\n  uuid: II7sWIfm_eSWwKfq\n  url: wyhgfz\n  prev_uuid: cDzdEkch3JypwTh2\n  sibling_uuid: 0hKcnD9qnLeCTq4Q\n  child_uuid: ''\n  parent_uuid: BTeDPodj0NU8fRW3\n  doc_id: 77021776\n  level: 1\n  id: 77021776\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 封装一个异步加载图片的方法\n  uuid: 0hKcnD9qnLeCTq4Q\n  url: orxq0m\n  prev_uuid: II7sWIfm_eSWwKfq\n  sibling_uuid: b7lf8zlMeqorWGgi\n  child_uuid: ''\n  parent_uuid: BTeDPodj0NU8fRW3\n  doc_id: 77021825\n  level: 1\n  id: 77021825\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 实现 mergePromise 函数\n  uuid: b7lf8zlMeqorWGgi\n  url: apqplp\n  prev_uuid: 0hKcnD9qnLeCTq4Q\n  sibling_uuid: EZZ2GBqZ-B1LUsam\n  child_uuid: ''\n  parent_uuid: BTeDPodj0NU8fRW3\n  doc_id: 77021819\n  level: 1\n  id: 77021819\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 图片加载数量限制\n  uuid: EZZ2GBqZ-B1LUsam\n  url: xz2gy5\n  prev_uuid: b7lf8zlMeqorWGgi\n  sibling_uuid: '-8N7uf1xcBmFXSQI'\n  child_uuid: ''\n  parent_uuid: BTeDPodj0NU8fRW3\n  doc_id: 77021664\n  level: 1\n  id: 77021664\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 文本中识别敏感词、表情包、链接、数字、字母并高亮\n  uuid: '-8N7uf1xcBmFXSQI'\n  url: athu4p\n  prev_uuid: EZZ2GBqZ-B1LUsam\n  sibling_uuid: F_Fz97LW3aSxLLnr\n  child_uuid: ''\n  parent_uuid: BTeDPodj0NU8fRW3\n  doc_id: 77021666\n  level: 1\n  id: 77021666\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 图片格式转换为 webp\n  uuid: F_Fz97LW3aSxLLnr\n  url: cwlftq\n  prev_uuid: '-8N7uf1xcBmFXSQI'\n  sibling_uuid: wfz5QMLK_eAEtlFz\n  child_uuid: ''\n  parent_uuid: BTeDPodj0NU8fRW3\n  doc_id: 77021647\n  level: 1\n  id: 77021647\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 计算对象占用的字节数\n  uuid: wfz5QMLK_eAEtlFz\n  url: gx1y1y\n  prev_uuid: F_Fz97LW3aSxLLnr\n  sibling_uuid: rKjJYSK4ytL18T9L\n  child_uuid: ''\n  parent_uuid: BTeDPodj0NU8fRW3\n  doc_id: 77021669\n  level: 1\n  id: 77021669\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 给 xhr 添加 hook，实现在各个阶段打印日志\n  uuid: rKjJYSK4ytL18T9L\n  url: dm9n4g\n  prev_uuid: wfz5QMLK_eAEtlFz\n  sibling_uuid: zZADZWaE-olCAOjQ\n  child_uuid: ''\n  parent_uuid: BTeDPodj0NU8fRW3\n  doc_id: 77021658\n  level: 1\n  id: 77021658\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 明信片问题\n  uuid: zZADZWaE-olCAOjQ\n  url: mnsw3z\n  prev_uuid: rKjJYSK4ytL18T9L\n  sibling_uuid: ''\n  child_uuid: ''\n  parent_uuid: BTeDPodj0NU8fRW3\n  doc_id: 77021807\n  level: 1\n  id: 77021807\n  open_window: 0\n  visible: 1\n- type: TITLE\n  title: 常用算法实现\n  uuid: KKJ-BzUK3K9FxUJ2\n  url: ''\n  prev_uuid: BTeDPodj0NU8fRW3\n  sibling_uuid: ''\n  child_uuid: z8xQMUujFU-0OTsg\n  parent_uuid: ''\n  doc_id: ''\n  level: 0\n  id: ''\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 二分查找\n  uuid: z8xQMUujFU-0OTsg\n  url: pywta0\n  prev_uuid: KKJ-BzUK3K9FxUJ2\n  sibling_uuid: _b3VVGX3aAQ_rvuS\n  child_uuid: ''\n  parent_uuid: KKJ-BzUK3K9FxUJ2\n  doc_id: 77021798\n  level: 1\n  id: 77021798\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 排序\n  uuid: _b3VVGX3aAQ_rvuS\n  url: ivvld9\n  prev_uuid: z8xQMUujFU-0OTsg\n  sibling_uuid: eRQoWM79y_Mwbg2D\n  child_uuid: ''\n  parent_uuid: KKJ-BzUK3K9FxUJ2\n  doc_id: 77021670\n  level: 1\n  id: 77021670\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 动态规划和贪心算法\n  uuid: eRQoWM79y_Mwbg2D\n  url: pyig7m\n  prev_uuid: _b3VVGX3aAQ_rvuS\n  sibling_uuid: tr1DuV5ACUbyp8j-\n  child_uuid: ''\n  parent_uuid: KKJ-BzUK3K9FxUJ2\n  doc_id: 77021676\n  level: 1\n  id: 77021676\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 洗牌算法\n  uuid: tr1DuV5ACUbyp8j-\n  url: tohw0k\n  prev_uuid: eRQoWM79y_Mwbg2D\n  sibling_uuid: x9xEaoi_A59UZjS5\n  child_uuid: ''\n  parent_uuid: KKJ-BzUK3K9FxUJ2\n  doc_id: 77021687\n  level: 1\n  id: 77021687\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: LRU(最少置换算法)\n  uuid: x9xEaoi_A59UZjS5\n  url: tmwgql\n  prev_uuid: tr1DuV5ACUbyp8j-\n  sibling_uuid: XsgMUe05eXycAX93\n  child_uuid: ''\n  parent_uuid: KKJ-BzUK3K9FxUJ2\n  doc_id: 77021694\n  level: 1\n  id: 77021694\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 斐波那契数列\n  uuid: XsgMUe05eXycAX93\n  url: bq7f7e\n  prev_uuid: x9xEaoi_A59UZjS5\n  sibling_uuid: T0orOt1CWhzdAczU\n  child_uuid: ''\n  parent_uuid: KKJ-BzUK3K9FxUJ2\n  doc_id: 77021683\n  level: 1\n  id: 77021683\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 大数相加\n  uuid: T0orOt1CWhzdAczU\n  url: ln6fpo\n  prev_uuid: XsgMUe05eXycAX93\n  sibling_uuid: ''\n  child_uuid: ''\n  parent_uuid: KKJ-BzUK3K9FxUJ2\n  doc_id: 77021693\n  level: 1\n  id: 77021693\n  open_window: 0\n  visible: 1\n",
    "creator_id": 732231,
    "public": 0,
    "items_count": 65,
    "likes_count": 0,
    "watches_count": 1,
    "content_updated_at": "2023-01-06T09:17:32.188Z",
    "created_at": "2022-05-11T14:43:59.000Z",
    "updated_at": "2023-11-11T18:10:33.000Z",
    "user": {
      "id": 732231,
      "type": "User",
      "login": "wcywxq",
      "name": "magic",
      "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/732231/1606968271774-avatar/886ad88b-d2cc-4c9e-a674-f70eb51a679c.png",
      "books_count": 21,
      "public_books_count": 0,
      "followers_count": 0,
      "following_count": 0,
      "public": 1,
      "description": null,
      "created_at": "2020-01-08T14:21:31.000Z",
      "updated_at": "2023-11-22T20:13:30.000Z",
      "work_id": "",
      "_serializer": "v2.user"
    },
    "namespace": "wcywxq/pgkpvh",
    "_serializer": "v2.book"
  },
  "user": {
    "id": 732231,
    "type": "User",
    "login": "wcywxq",
    "name": "magic",
    "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/732231/1606968271774-avatar/886ad88b-d2cc-4c9e-a674-f70eb51a679c.png",
    "books_count": 21,
    "public_books_count": 0,
    "followers_count": 0,
    "following_count": 0,
    "public": 1,
    "description": null,
    "created_at": "2020-01-08T14:21:31.000Z",
    "updated_at": "2023-11-22T20:13:30.000Z",
    "work_id": "",
    "_serializer": "v2.user"
  },
  "tags": [],
  "latest_version_id": 984849200,
  "creator": {
    "id": 732231,
    "type": "User",
    "login": "wcywxq",
    "name": "magic",
    "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/732231/1606968271774-avatar/886ad88b-d2cc-4c9e-a674-f70eb51a679c.png",
    "books_count": 21,
    "public_books_count": 0,
    "followers_count": 0,
    "following_count": 0,
    "public": 1,
    "description": null,
    "created_at": "2020-01-08T14:21:31.000Z",
    "updated_at": "2023-11-22T20:13:30.000Z",
    "work_id": "",
    "_serializer": "v2.user"
  },
  "_serializer": "v2.doc_detail"
}