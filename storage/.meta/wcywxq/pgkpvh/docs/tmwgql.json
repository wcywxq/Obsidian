{
  "id": 77021694,
  "slug": "tmwgql",
  "title": "LRU(最少置换算法)",
  "description": "描述：运用你所掌握的数据结构，设计和实现一个  LRU (最近最少使用) 缓存机制 。 实现 LRUCache 类：LRUCache(int capacity) 以正整数作为容量 capacity 初始化 LRU 缓存int get(int key) 如果关键字 key 存在于缓存中，则返回关...",
  "cover": "",
  "user_id": 732231,
  "book_id": 27818302,
  "last_editor_id": 732231,
  "format": "lake",
  "body_draft": "",
  "body": "**描述**：运用你所掌握的数据结构，设计和实现一个  LRU (最近最少使用) 缓存机制 。 实现 LRUCache 类：\n\n1. LRUCache(int capacity) 以正整数作为容量 capacity 初始化 LRU 缓存\n2. int get(int key) 如果关键字 key 存在于缓存中，则返回关键字的值，否则返回 -1 。\n3. void put(int key, int value) 如果关键字已经存在，则变更其数据值；如果关键字不存在，则插入该组「关键字-值」。当缓存容量达到上限时，它应该在写入新数据之前删除最久未使用的数据值，从而为新的数据值留出空间。\n\n题目要求的1和2相对简单，主要是条件3，当缓存容量达到上限时，它应该在写入新数据之前删除最久未使用的数据值。容量和条件1相呼应，关键是怎么理解最久未使用呢?\n\n1. 读和写都是在使用数据\n2. 假设不管是读还是写，我们都把对应的key值放到数组的末尾，那么是不是意味着数组的头部就是最久未使用的了呢？\n<a name=\"feoeM\"></a>\n## 数组\n```javascript\nfunction LRU(length) {\n    this.length = length\n    this.arr = []\n}\n\nLRU.prototype.get = function (key) {\n    let index = this.arr.findIndex(item => (item.key === key))\n    if (index == -1) return -1\n\n    const result = this.arr.splice(index, 1)\n\n    this.arr.push(result)\n\n    return result.val\n}\n\nLRU.prototype.set = function (key, val) {\n    let index = this.arr.findIndex(item => (item.key === key))\n    if (index !== -1) {\n        this.arr.splice(index, 1)\n    }\n    this.arr.push({\n        key,\n        val\n    })\n\n    if (this.arr.length > this.length) {\n        this.arr.shift()\n    }\n}\n```\n<a name=\"xkNUK\"></a>\n## 数组 && 对象实现方式\n```javascript\nvar LRUCache = function (capacity) {\n  // 用数组记录读和写的顺序\n  this.keys = []\n  // 用对象来保存key value值\n  this.cache = {}\n  // 容量\n  this.capacity = capacity\n}\n\nLRUCache.prototype.get = function (key) {\n  // 如果存在\n  if (this.cache[key]) {\n    // 先删除原来的位置\n    remove(this.keys, key)\n    // 再移动到最后一个，以保持最新访问\n    this.keys.push(key)\n    // 返回值\n    return this.cache[key]\n  }\n  return -1\n}\n\nLRUCache.prototype.put = function (key, value) {\n  if (this.cache[key]) {\n    // 存在的时候先更新值\n    this.cache[key] = value\n    // 再更新位置到最后一个\n    remove(this.keys, key)\n\n    this.keys.push(key)\n  } else {\n    // 不存在的时候加入\n    this.keys.push(key)\n    this.cache[key] = value\n    // 容量如果超过了最大值，则删除最久未使用的（也就是数组中的第一个key）\n    if (this.keys.length > this.capacity) {\n      removeCache(this.cache, this.keys, this.keys[0])\n    }\n  }\n}\n\n// 移出数组中的key\nfunction remove(arr, key) {\n  if (arr.length) {\n    const index = arr.indexOf(key)\n\n    if (index > -1) {\n      return arr.splice(index, 1)\n    }\n  }\n}\n\n// 移除缓存中 key\nfunction removeCache(cache, keys, key) {\n  cache[key] = null\n  remove(keys, key)\n}\n\nconst lRUCache = new LRUCache(2)\n\nconsole.log(lRUCache.put(1, 1)) // 缓存是 {1=1}\nconsole.log(lRUCache.put(2, 2)) // 缓存是 {1=1, 2=2}\nconsole.log(lRUCache.get(1))    // 返回 1\nconsole.log(lRUCache.put(3, 3)) // 该操作会使得关键字 2 作废，缓存是 {1=1, 3=3}\nconsole.log(lRUCache.get(2))    // 返回 -1 (未找到)\nconsole.log(lRUCache.put(4, 4)) // 该操作会使得关键字 1 作废，缓存是 {4=4, 3=3}\nconsole.log(lRUCache.get(1) )   // 返回 -1 (未找到)\nconsole.log(lRUCache.get(3))    // 返回 3\nconsole.log(lRUCache.get(4) )   // 返回 4\n```\n<a name=\"g2Amg\"></a>\n## Map 实现方式\n:::info\n第一种实现方式，我们借助了数组来存储每次key被访问（get、set）的顺序，这样实现比较麻烦一些，有没有其他方案，让我们更加便捷一些，不需要额外维护数组呢？借助 Map 设置值时可以保持顺序性，处理LRU算法将会及其方便\n:::\n```javascript\n/**\n * @param {number} capacity\n */\nvar LRUCache = function (capacity) {\n  this.cache = new Map()\n  this.capacity = capacity\n};\n\n/** \n * @param {number} key\n * @return {number}\n */\nLRUCache.prototype.get = function (key) {\n  if (this.cache.has(key)) {\n    const value = this.cache.get(key)\n    // 更新位置\n    this.cache.delete(key)\n    this.cache.set(key, value)\n\n    return value\n  }\n\n  return -1\n};\n\n/** \n * @param {number} key \n * @param {number} value\n * @return {void}\n */\nLRUCache.prototype.put = function (key, value) {\n  // 已经存在的情况下，更新其位置到”最新“即可\n  // 先删除，后插入\n  if (this.cache.has(key)) {\n    this.cache.delete(key)\n  } else {\n    // 插入数据前先判断，size是否符合capacity\n    // 已经>=capacity，需要把最开始插入的数据删除掉\n    // keys()方法得到一个可遍历对象,执行next()拿到一个形如{ value: 'xxx', done: false }的对象\n    if (this.cache.size >= this.capacity) {\n      this.cache.delete(this.cache.keys().next().value)\n    }\n  }\n\n  this.cache.set(key, value)\n};\n\nconst lRUCache = new LRUCache(2)\n\nconsole.log(lRUCache.put(1, 1)) // 缓存是 {1=1}\nconsole.log(lRUCache.put(2, 2)) // 缓存是 {1=1, 2=2}\nconsole.log(lRUCache.get(1))    // 返回 1\nconsole.log(lRUCache.put(3, 3)) // 该操作会使得关键字 2 作废，缓存是 {1=1, 3=3}\nconsole.log(lRUCache.get(2))    // 返回 -1 (未找到)\nconsole.log(lRUCache.put(4, 4)) // 该操作会使得关键字 1 作废，缓存是 {4=4, 3=3}\nconsole.log(lRUCache.get(1) )   // 返回 -1 (未找到)\nconsole.log(lRUCache.get(3))    // 返回 3\nconsole.log(lRUCache.get(4) )   // 返回 4\n```\n",
  "body_html": "<!doctype html><p data-lake-id=\"u6b640302\"><strong><span>描述</span></strong><span>：运用你所掌握的数据结构，设计和实现一个  LRU (最近最少使用) 缓存机制 。 实现 LRUCache 类：</span></p><ol><li><span>LRUCache(int capacity) 以</span><span>正整数</span><span>作为容量 capacity 初始化 LRU 缓存</span></li><li><span>int get(int key) </span><span>如果关键字 key 存在于缓存中，则返回关键字的值，否则返回 -1 </span><span>。</span></li><li><span>void put(int key, int value) </span><span>如果关键字已经存在，则变更其数据值</span><span>；</span><span>如果关键字不存在，则插入该组「关键字-值」</span><span>。</span><span>当缓存容量达到上限时，它应该在写入新数据之前删除最久未使用的数据值</span><span>，从而为新的数据值留出空间。</span></li></ol><p data-lake-id=\"u847018af\"><br /></p><p data-lake-id=\"u18622857\"><span>题目要求的1和2相对简单，主要是条件3，</span><span>当缓存容量达到上限时，它应该在写入新数据之前删除最久未使用的数据值</span><span>。容量和条件1相呼应，关键是怎么理解</span><span>最久未使用</span><span>呢?</span></p><ol><li><span>读和写都是在使用数据</span></li><li><span>假设不管是读还是写，我们都把对应的key值放到数组的末尾，那么是不是意味着数组的头部就是最久未使用的了呢？</span></li></ol><h2 id=\"feoeM\"><span>数组</span></h2><pre data-lang=\"javascript\"><code>function LRU(length) {\n    this.length = length\n    this.arr = []\n}\n\nLRU.prototype.get = function (key) {\n    let index = this.arr.findIndex(item =&gt; (item.key === key))\n    if (index == -1) return -1\n\n    const result = this.arr.splice(index, 1)\n\n    this.arr.push(result)\n\n    return result.val\n}\n\nLRU.prototype.set = function (key, val) {\n    let index = this.arr.findIndex(item =&gt; (item.key === key))\n    if (index !== -1) {\n        this.arr.splice(index, 1)\n    }\n    this.arr.push({\n        key,\n        val\n    })\n\n    if (this.arr.length &gt; this.length) {\n        this.arr.shift()\n    }\n}</code></pre><h2 id=\"xkNUK\"><span>数组 &amp;&amp; 对象实现方式</span></h2><pre data-lang=\"javascript\"><code>var LRUCache = function (capacity) {\n  // 用数组记录读和写的顺序\n  this.keys = []\n  // 用对象来保存key value值\n  this.cache = {}\n  // 容量\n  this.capacity = capacity\n}\n\nLRUCache.prototype.get = function (key) {\n  // 如果存在\n  if (this.cache[key]) {\n    // 先删除原来的位置\n    remove(this.keys, key)\n    // 再移动到最后一个，以保持最新访问\n    this.keys.push(key)\n    // 返回值\n    return this.cache[key]\n  }\n  return -1\n}\n\nLRUCache.prototype.put = function (key, value) {\n  if (this.cache[key]) {\n    // 存在的时候先更新值\n    this.cache[key] = value\n    // 再更新位置到最后一个\n    remove(this.keys, key)\n\n    this.keys.push(key)\n  } else {\n    // 不存在的时候加入\n    this.keys.push(key)\n    this.cache[key] = value\n    // 容量如果超过了最大值，则删除最久未使用的（也就是数组中的第一个key）\n    if (this.keys.length &gt; this.capacity) {\n      removeCache(this.cache, this.keys, this.keys[0])\n    }\n  }\n}\n\n// 移出数组中的key\nfunction remove(arr, key) {\n  if (arr.length) {\n    const index = arr.indexOf(key)\n\n    if (index &gt; -1) {\n      return arr.splice(index, 1)\n    }\n  }\n}\n\n// 移除缓存中 key\nfunction removeCache(cache, keys, key) {\n  cache[key] = null\n  remove(keys, key)\n}\n\nconst lRUCache = new LRUCache(2)\n\nconsole.log(lRUCache.put(1, 1)) // 缓存是 {1=1}\nconsole.log(lRUCache.put(2, 2)) // 缓存是 {1=1, 2=2}\nconsole.log(lRUCache.get(1))    // 返回 1\nconsole.log(lRUCache.put(3, 3)) // 该操作会使得关键字 2 作废，缓存是 {1=1, 3=3}\nconsole.log(lRUCache.get(2))    // 返回 -1 (未找到)\nconsole.log(lRUCache.put(4, 4)) // 该操作会使得关键字 1 作废，缓存是 {4=4, 3=3}\nconsole.log(lRUCache.get(1) )   // 返回 -1 (未找到)\nconsole.log(lRUCache.get(3))    // 返回 3\nconsole.log(lRUCache.get(4) )   // 返回 4</code></pre><h2 id=\"g2Amg\"><span>Map 实现方式</span></h2><blockquote class=\"lake-alert lake-alert-info\"><p data-lake-id=\"u45495aee\"><span>第一种实现方式，我们借助了数组来存储每次key被访问（get、set）的顺序，这样实现比较麻烦一些，有没有其他方案，让我们更加便捷一些，不需要额外维护数组呢？借助 Map 设置值时可以保持顺序性，处理LRU算法将会及其方便</span></p></blockquote><pre data-lang=\"javascript\"><code>/**\n * @param {number} capacity\n */\nvar LRUCache = function (capacity) {\n  this.cache = new Map()\n  this.capacity = capacity\n};\n\n/** \n * @param {number} key\n * @return {number}\n */\nLRUCache.prototype.get = function (key) {\n  if (this.cache.has(key)) {\n    const value = this.cache.get(key)\n    // 更新位置\n    this.cache.delete(key)\n    this.cache.set(key, value)\n\n    return value\n  }\n\n  return -1\n};\n\n/** \n * @param {number} key \n * @param {number} value\n * @return {void}\n */\nLRUCache.prototype.put = function (key, value) {\n  // 已经存在的情况下，更新其位置到”最新“即可\n  // 先删除，后插入\n  if (this.cache.has(key)) {\n    this.cache.delete(key)\n  } else {\n    // 插入数据前先判断，size是否符合capacity\n    // 已经&gt;=capacity，需要把最开始插入的数据删除掉\n    // keys()方法得到一个可遍历对象,执行next()拿到一个形如{ value: 'xxx', done: false }的对象\n    if (this.cache.size &gt;= this.capacity) {\n      this.cache.delete(this.cache.keys().next().value)\n    }\n  }\n\n  this.cache.set(key, value)\n};\n\nconst lRUCache = new LRUCache(2)\n\nconsole.log(lRUCache.put(1, 1)) // 缓存是 {1=1}\nconsole.log(lRUCache.put(2, 2)) // 缓存是 {1=1, 2=2}\nconsole.log(lRUCache.get(1))    // 返回 1\nconsole.log(lRUCache.put(3, 3)) // 该操作会使得关键字 2 作废，缓存是 {1=1, 3=3}\nconsole.log(lRUCache.get(2))    // 返回 -1 (未找到)\nconsole.log(lRUCache.put(4, 4)) // 该操作会使得关键字 1 作废，缓存是 {4=4, 3=3}\nconsole.log(lRUCache.get(1) )   // 返回 -1 (未找到)\nconsole.log(lRUCache.get(3))    // 返回 3\nconsole.log(lRUCache.get(4) )   // 返回 4</code></pre>",
  "body_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"viewport\" content=\"adapt\" /><p data-lake-id=\"u6b640302\" id=\"u6b640302\"><strong><span data-lake-id=\"u5ad0568d\" id=\"u5ad0568d\">描述</span></strong><span data-lake-id=\"u66e0d168\" id=\"u66e0d168\">：运用你所掌握的数据结构，设计和实现一个  LRU (最近最少使用) 缓存机制 。 实现 LRUCache 类：</span></p><ol list=\"ucde40714\"><li fid=\"u80b95952\" data-lake-id=\"u5e4e3bc6\" id=\"u5e4e3bc6\"><span data-lake-id=\"ub3d3e7ac\" id=\"ub3d3e7ac\">LRUCache(int capacity) 以</span><span data-lake-id=\"uc7356781\" id=\"uc7356781\">正整数</span><span data-lake-id=\"u84afd819\" id=\"u84afd819\">作为容量 capacity 初始化 LRU 缓存</span></li><li fid=\"u80b95952\" data-lake-id=\"ua40eeb65\" id=\"ua40eeb65\"><span data-lake-id=\"udddb608d\" id=\"udddb608d\">int get(int key) </span><span data-lake-id=\"u2b8b260e\" id=\"u2b8b260e\">如果关键字 key 存在于缓存中，则返回关键字的值，否则返回 -1 </span><span data-lake-id=\"ud34449c7\" id=\"ud34449c7\">。</span></li><li fid=\"u80b95952\" data-lake-id=\"u262e1e28\" id=\"u262e1e28\"><span data-lake-id=\"u9dc4c6bb\" id=\"u9dc4c6bb\">void put(int key, int value) </span><span data-lake-id=\"ue12218e1\" id=\"ue12218e1\">如果关键字已经存在，则变更其数据值</span><span data-lake-id=\"ub0849e13\" id=\"ub0849e13\">；</span><span data-lake-id=\"u52810aba\" id=\"u52810aba\">如果关键字不存在，则插入该组「关键字-值」</span><span data-lake-id=\"uf88ca473\" id=\"uf88ca473\">。</span><span data-lake-id=\"u37ec3e1d\" id=\"u37ec3e1d\">当缓存容量达到上限时，它应该在写入新数据之前删除最久未使用的数据值</span><span data-lake-id=\"u2f4192f3\" id=\"u2f4192f3\">，从而为新的数据值留出空间。</span></li></ol><p data-lake-id=\"u847018af\" id=\"u847018af\"><br></p><p data-lake-id=\"u18622857\" id=\"u18622857\"><span data-lake-id=\"u3f8f9d46\" id=\"u3f8f9d46\">题目要求的1和2相对简单，主要是条件3，</span><span data-lake-id=\"ud911edc4\" id=\"ud911edc4\">当缓存容量达到上限时，它应该在写入新数据之前删除最久未使用的数据值</span><span data-lake-id=\"u67473624\" id=\"u67473624\">。容量和条件1相呼应，关键是怎么理解</span><span data-lake-id=\"u19d23d9b\" id=\"u19d23d9b\">最久未使用</span><span data-lake-id=\"ua9b1c0a0\" id=\"ua9b1c0a0\">呢?</span></p><ol list=\"u01b873a2\"><li fid=\"uab114ed1\" data-lake-id=\"ud8353e53\" id=\"ud8353e53\"><span data-lake-id=\"ubaa73c4b\" id=\"ubaa73c4b\">读和写都是在使用数据</span></li><li fid=\"uab114ed1\" data-lake-id=\"ud2497924\" id=\"ud2497924\"><span data-lake-id=\"u698d500a\" id=\"u698d500a\">假设不管是读还是写，我们都把对应的key值放到数组的末尾，那么是不是意味着数组的头部就是最久未使用的了呢？</span></li></ol><h2 data-lake-id=\"feoeM\" id=\"feoeM\"><span data-lake-id=\"u38841b95\" id=\"u38841b95\">数组</span></h2><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22function%20LRU(length)%20%7B%5Cn%20%20%20%20this.length%20%3D%20length%5Cn%20%20%20%20this.arr%20%3D%20%5B%5D%5Cn%7D%5Cn%5CnLRU.prototype.get%20%3D%20function%20(key)%20%7B%5Cn%20%20%20%20let%20index%20%3D%20this.arr.findIndex(item%20%3D%3E%20(item.key%20%3D%3D%3D%20key))%5Cn%20%20%20%20if%20(index%20%3D%3D%20-1)%20return%20-1%5Cn%5Cn%20%20%20%20const%20result%20%3D%20this.arr.splice(index%2C%201)%5Cn%5Cn%20%20%20%20this.arr.push(result)%5Cn%5Cn%20%20%20%20return%20result.val%5Cn%7D%5Cn%5CnLRU.prototype.set%20%3D%20function%20(key%2C%20val)%20%7B%5Cn%20%20%20%20let%20index%20%3D%20this.arr.findIndex(item%20%3D%3E%20(item.key%20%3D%3D%3D%20key))%5Cn%20%20%20%20if%20(index%20!%3D%3D%20-1)%20%7B%5Cn%20%20%20%20%20%20%20%20this.arr.splice(index%2C%201)%5Cn%20%20%20%20%7D%5Cn%20%20%20%20this.arr.push(%7B%5Cn%20%20%20%20%20%20%20%20key%2C%5Cn%20%20%20%20%20%20%20%20val%5Cn%20%20%20%20%7D)%5Cn%5Cn%20%20%20%20if%20(this.arr.length%20%3E%20this.length)%20%7B%5Cn%20%20%20%20%20%20%20%20this.arr.shift()%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22eIjlK%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h2 data-lake-id=\"xkNUK\" id=\"xkNUK\"><span data-lake-id=\"ufd799975\" id=\"ufd799975\">数组 &amp;&amp; 对象实现方式</span></h2><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22var%20LRUCache%20%3D%20function%20(capacity)%20%7B%5Cn%20%20%2F%2F%20%E7%94%A8%E6%95%B0%E7%BB%84%E8%AE%B0%E5%BD%95%E8%AF%BB%E5%92%8C%E5%86%99%E7%9A%84%E9%A1%BA%E5%BA%8F%5Cn%20%20this.keys%20%3D%20%5B%5D%5Cn%20%20%2F%2F%20%E7%94%A8%E5%AF%B9%E8%B1%A1%E6%9D%A5%E4%BF%9D%E5%AD%98key%20value%E5%80%BC%5Cn%20%20this.cache%20%3D%20%7B%7D%5Cn%20%20%2F%2F%20%E5%AE%B9%E9%87%8F%5Cn%20%20this.capacity%20%3D%20capacity%5Cn%7D%5Cn%5CnLRUCache.prototype.get%20%3D%20function%20(key)%20%7B%5Cn%20%20%2F%2F%20%E5%A6%82%E6%9E%9C%E5%AD%98%E5%9C%A8%5Cn%20%20if%20(this.cache%5Bkey%5D)%20%7B%5Cn%20%20%20%20%2F%2F%20%E5%85%88%E5%88%A0%E9%99%A4%E5%8E%9F%E6%9D%A5%E7%9A%84%E4%BD%8D%E7%BD%AE%5Cn%20%20%20%20remove(this.keys%2C%20key)%5Cn%20%20%20%20%2F%2F%20%E5%86%8D%E7%A7%BB%E5%8A%A8%E5%88%B0%E6%9C%80%E5%90%8E%E4%B8%80%E4%B8%AA%EF%BC%8C%E4%BB%A5%E4%BF%9D%E6%8C%81%E6%9C%80%E6%96%B0%E8%AE%BF%E9%97%AE%5Cn%20%20%20%20this.keys.push(key)%5Cn%20%20%20%20%2F%2F%20%E8%BF%94%E5%9B%9E%E5%80%BC%5Cn%20%20%20%20return%20this.cache%5Bkey%5D%5Cn%20%20%7D%5Cn%20%20return%20-1%5Cn%7D%5Cn%5CnLRUCache.prototype.put%20%3D%20function%20(key%2C%20value)%20%7B%5Cn%20%20if%20(this.cache%5Bkey%5D)%20%7B%5Cn%20%20%20%20%2F%2F%20%E5%AD%98%E5%9C%A8%E7%9A%84%E6%97%B6%E5%80%99%E5%85%88%E6%9B%B4%E6%96%B0%E5%80%BC%5Cn%20%20%20%20this.cache%5Bkey%5D%20%3D%20value%5Cn%20%20%20%20%2F%2F%20%E5%86%8D%E6%9B%B4%E6%96%B0%E4%BD%8D%E7%BD%AE%E5%88%B0%E6%9C%80%E5%90%8E%E4%B8%80%E4%B8%AA%5Cn%20%20%20%20remove(this.keys%2C%20key)%5Cn%5Cn%20%20%20%20this.keys.push(key)%5Cn%20%20%7D%20else%20%7B%5Cn%20%20%20%20%2F%2F%20%E4%B8%8D%E5%AD%98%E5%9C%A8%E7%9A%84%E6%97%B6%E5%80%99%E5%8A%A0%E5%85%A5%5Cn%20%20%20%20this.keys.push(key)%5Cn%20%20%20%20this.cache%5Bkey%5D%20%3D%20value%5Cn%20%20%20%20%2F%2F%20%E5%AE%B9%E9%87%8F%E5%A6%82%E6%9E%9C%E8%B6%85%E8%BF%87%E4%BA%86%E6%9C%80%E5%A4%A7%E5%80%BC%EF%BC%8C%E5%88%99%E5%88%A0%E9%99%A4%E6%9C%80%E4%B9%85%E6%9C%AA%E4%BD%BF%E7%94%A8%E7%9A%84%EF%BC%88%E4%B9%9F%E5%B0%B1%E6%98%AF%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AAkey%EF%BC%89%5Cn%20%20%20%20if%20(this.keys.length%20%3E%20this.capacity)%20%7B%5Cn%20%20%20%20%20%20removeCache(this.cache%2C%20this.keys%2C%20this.keys%5B0%5D)%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%7D%5Cn%5Cn%2F%2F%20%E7%A7%BB%E5%87%BA%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84key%5Cnfunction%20remove(arr%2C%20key)%20%7B%5Cn%20%20if%20(arr.length)%20%7B%5Cn%20%20%20%20const%20index%20%3D%20arr.indexOf(key)%5Cn%5Cn%20%20%20%20if%20(index%20%3E%20-1)%20%7B%5Cn%20%20%20%20%20%20return%20arr.splice(index%2C%201)%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%7D%5Cn%5Cn%2F%2F%20%E7%A7%BB%E9%99%A4%E7%BC%93%E5%AD%98%E4%B8%AD%20key%5Cnfunction%20removeCache(cache%2C%20keys%2C%20key)%20%7B%5Cn%20%20cache%5Bkey%5D%20%3D%20null%5Cn%20%20remove(keys%2C%20key)%5Cn%7D%5Cn%5Cnconst%20lRUCache%20%3D%20new%20LRUCache(2)%5Cn%5Cnconsole.log(lRUCache.put(1%2C%201))%20%2F%2F%20%E7%BC%93%E5%AD%98%E6%98%AF%20%7B1%3D1%7D%5Cnconsole.log(lRUCache.put(2%2C%202))%20%2F%2F%20%E7%BC%93%E5%AD%98%E6%98%AF%20%7B1%3D1%2C%202%3D2%7D%5Cnconsole.log(lRUCache.get(1))%20%20%20%20%2F%2F%20%E8%BF%94%E5%9B%9E%201%5Cnconsole.log(lRUCache.put(3%2C%203))%20%2F%2F%20%E8%AF%A5%E6%93%8D%E4%BD%9C%E4%BC%9A%E4%BD%BF%E5%BE%97%E5%85%B3%E9%94%AE%E5%AD%97%202%20%E4%BD%9C%E5%BA%9F%EF%BC%8C%E7%BC%93%E5%AD%98%E6%98%AF%20%7B1%3D1%2C%203%3D3%7D%5Cnconsole.log(lRUCache.get(2))%20%20%20%20%2F%2F%20%E8%BF%94%E5%9B%9E%20-1%20(%E6%9C%AA%E6%89%BE%E5%88%B0)%5Cnconsole.log(lRUCache.put(4%2C%204))%20%2F%2F%20%E8%AF%A5%E6%93%8D%E4%BD%9C%E4%BC%9A%E4%BD%BF%E5%BE%97%E5%85%B3%E9%94%AE%E5%AD%97%201%20%E4%BD%9C%E5%BA%9F%EF%BC%8C%E7%BC%93%E5%AD%98%E6%98%AF%20%7B4%3D4%2C%203%3D3%7D%5Cnconsole.log(lRUCache.get(1)%20)%20%20%20%2F%2F%20%E8%BF%94%E5%9B%9E%20-1%20(%E6%9C%AA%E6%89%BE%E5%88%B0)%5Cnconsole.log(lRUCache.get(3))%20%20%20%20%2F%2F%20%E8%BF%94%E5%9B%9E%203%5Cnconsole.log(lRUCache.get(4)%20)%20%20%20%2F%2F%20%E8%BF%94%E5%9B%9E%204%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22uoqSy%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h2 data-lake-id=\"g2Amg\" id=\"g2Amg\"><span data-lake-id=\"u45eed959\" id=\"u45eed959\">Map 实现方式</span></h2><blockquote data-lake-id=\"udf5f7dbc\" id=\"udf5f7dbc\" class=\"lake-alert lake-alert-info\"><p data-lake-id=\"u45495aee\" id=\"u45495aee\"><span data-lake-id=\"ub0f1ae7b\" id=\"ub0f1ae7b\">第一种实现方式，我们借助了数组来存储每次key被访问（get、set）的顺序，这样实现比较麻烦一些，有没有其他方案，让我们更加便捷一些，不需要额外维护数组呢？借助 Map 设置值时可以保持顺序性，处理LRU算法将会及其方便</span></p></blockquote><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F**%5Cn%20*%20%40param%20%7Bnumber%7D%20capacity%5Cn%20*%2F%5Cnvar%20LRUCache%20%3D%20function%20(capacity)%20%7B%5Cn%20%20this.cache%20%3D%20new%20Map()%5Cn%20%20this.capacity%20%3D%20capacity%5Cn%7D%3B%5Cn%5Cn%2F**%20%5Cn%20*%20%40param%20%7Bnumber%7D%20key%5Cn%20*%20%40return%20%7Bnumber%7D%5Cn%20*%2F%5CnLRUCache.prototype.get%20%3D%20function%20(key)%20%7B%5Cn%20%20if%20(this.cache.has(key))%20%7B%5Cn%20%20%20%20const%20value%20%3D%20this.cache.get(key)%5Cn%20%20%20%20%2F%2F%20%E6%9B%B4%E6%96%B0%E4%BD%8D%E7%BD%AE%5Cn%20%20%20%20this.cache.delete(key)%5Cn%20%20%20%20this.cache.set(key%2C%20value)%5Cn%5Cn%20%20%20%20return%20value%5Cn%20%20%7D%5Cn%5Cn%20%20return%20-1%5Cn%7D%3B%5Cn%5Cn%2F**%20%5Cn%20*%20%40param%20%7Bnumber%7D%20key%20%5Cn%20*%20%40param%20%7Bnumber%7D%20value%5Cn%20*%20%40return%20%7Bvoid%7D%5Cn%20*%2F%5CnLRUCache.prototype.put%20%3D%20function%20(key%2C%20value)%20%7B%5Cn%20%20%2F%2F%20%E5%B7%B2%E7%BB%8F%E5%AD%98%E5%9C%A8%E7%9A%84%E6%83%85%E5%86%B5%E4%B8%8B%EF%BC%8C%E6%9B%B4%E6%96%B0%E5%85%B6%E4%BD%8D%E7%BD%AE%E5%88%B0%E2%80%9D%E6%9C%80%E6%96%B0%E2%80%9C%E5%8D%B3%E5%8F%AF%5Cn%20%20%2F%2F%20%E5%85%88%E5%88%A0%E9%99%A4%EF%BC%8C%E5%90%8E%E6%8F%92%E5%85%A5%5Cn%20%20if%20(this.cache.has(key))%20%7B%5Cn%20%20%20%20this.cache.delete(key)%5Cn%20%20%7D%20else%20%7B%5Cn%20%20%20%20%2F%2F%20%E6%8F%92%E5%85%A5%E6%95%B0%E6%8D%AE%E5%89%8D%E5%85%88%E5%88%A4%E6%96%AD%EF%BC%8Csize%E6%98%AF%E5%90%A6%E7%AC%A6%E5%90%88capacity%5Cn%20%20%20%20%2F%2F%20%E5%B7%B2%E7%BB%8F%3E%3Dcapacity%EF%BC%8C%E9%9C%80%E8%A6%81%E6%8A%8A%E6%9C%80%E5%BC%80%E5%A7%8B%E6%8F%92%E5%85%A5%E7%9A%84%E6%95%B0%E6%8D%AE%E5%88%A0%E9%99%A4%E6%8E%89%5Cn%20%20%20%20%2F%2F%20keys()%E6%96%B9%E6%B3%95%E5%BE%97%E5%88%B0%E4%B8%80%E4%B8%AA%E5%8F%AF%E9%81%8D%E5%8E%86%E5%AF%B9%E8%B1%A1%2C%E6%89%A7%E8%A1%8Cnext()%E6%8B%BF%E5%88%B0%E4%B8%80%E4%B8%AA%E5%BD%A2%E5%A6%82%7B%20value%3A%20'xxx'%2C%20done%3A%20false%20%7D%E7%9A%84%E5%AF%B9%E8%B1%A1%5Cn%20%20%20%20if%20(this.cache.size%20%3E%3D%20this.capacity)%20%7B%5Cn%20%20%20%20%20%20this.cache.delete(this.cache.keys().next().value)%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%5Cn%20%20this.cache.set(key%2C%20value)%5Cn%7D%3B%5Cn%5Cnconst%20lRUCache%20%3D%20new%20LRUCache(2)%5Cn%5Cnconsole.log(lRUCache.put(1%2C%201))%20%2F%2F%20%E7%BC%93%E5%AD%98%E6%98%AF%20%7B1%3D1%7D%5Cnconsole.log(lRUCache.put(2%2C%202))%20%2F%2F%20%E7%BC%93%E5%AD%98%E6%98%AF%20%7B1%3D1%2C%202%3D2%7D%5Cnconsole.log(lRUCache.get(1))%20%20%20%20%2F%2F%20%E8%BF%94%E5%9B%9E%201%5Cnconsole.log(lRUCache.put(3%2C%203))%20%2F%2F%20%E8%AF%A5%E6%93%8D%E4%BD%9C%E4%BC%9A%E4%BD%BF%E5%BE%97%E5%85%B3%E9%94%AE%E5%AD%97%202%20%E4%BD%9C%E5%BA%9F%EF%BC%8C%E7%BC%93%E5%AD%98%E6%98%AF%20%7B1%3D1%2C%203%3D3%7D%5Cnconsole.log(lRUCache.get(2))%20%20%20%20%2F%2F%20%E8%BF%94%E5%9B%9E%20-1%20(%E6%9C%AA%E6%89%BE%E5%88%B0)%5Cnconsole.log(lRUCache.put(4%2C%204))%20%2F%2F%20%E8%AF%A5%E6%93%8D%E4%BD%9C%E4%BC%9A%E4%BD%BF%E5%BE%97%E5%85%B3%E9%94%AE%E5%AD%97%201%20%E4%BD%9C%E5%BA%9F%EF%BC%8C%E7%BC%93%E5%AD%98%E6%98%AF%20%7B4%3D4%2C%203%3D3%7D%5Cnconsole.log(lRUCache.get(1)%20)%20%20%20%2F%2F%20%E8%BF%94%E5%9B%9E%20-1%20(%E6%9C%AA%E6%89%BE%E5%88%B0)%5Cnconsole.log(lRUCache.get(3))%20%20%20%20%2F%2F%20%E8%BF%94%E5%9B%9E%203%5Cnconsole.log(lRUCache.get(4)%20)%20%20%20%2F%2F%20%E8%BF%94%E5%9B%9E%204%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22F1boP%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card>",
  "public": 0,
  "status": 1,
  "likes_count": 0,
  "read_count": 0,
  "hits": 0,
  "comments_count": 0,
  "word_count": 1132,
  "created_at": "2022-05-11T15:02:03.000Z",
  "updated_at": "2022-05-11T15:08:07.000Z",
  "content_updated_at": "2022-05-11T15:02:03.000Z",
  "published_at": "2022-05-11T15:02:03.000Z",
  "first_published_at": "2022-05-11T15:02:02.509Z",
  "book": {
    "id": 27818302,
    "type": "Book",
    "slug": "pgkpvh",
    "name": "前端面试知识梳理",
    "user_id": 732231,
    "description": "",
    "toc_yml": "- type: META\n  count: 74\n  display_level: 1\n  tail_type: UPDATED_AT\n  base_version_id: 203636985\n  published: true\n  max_level: 1\n  last_updated_at: 2022-05-11T15:02:51.310Z\n  version_id: 203637675\n- type: TITLE\n  title: 基础 api 实现\n  uuid: 8cOHMB0GUaMGEJAZ\n  url: ''\n  prev_uuid: ''\n  sibling_uuid: XzzPhY1bnt-jy6Uq\n  child_uuid: tkSYK-Ar5LWNbwCs\n  parent_uuid: ''\n  doc_id: ''\n  level: 0\n  id: ''\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 实现 es6 的 extends\n  uuid: tkSYK-Ar5LWNbwCs\n  url: vtqbgk\n  prev_uuid: 8cOHMB0GUaMGEJAZ\n  sibling_uuid: iZbjvIrZWQPncGf4\n  child_uuid: ''\n  parent_uuid: 8cOHMB0GUaMGEJAZ\n  doc_id: 77021830\n  level: 1\n  id: 77021830\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 实现 ajax\n  uuid: iZbjvIrZWQPncGf4\n  url: cq5ws4\n  prev_uuid: tkSYK-Ar5LWNbwCs\n  sibling_uuid: GQ98GFTcsA6oX5fu\n  child_uuid: ''\n  parent_uuid: 8cOHMB0GUaMGEJAZ\n  doc_id: 77021696\n  level: 1\n  id: 77021696\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 实现 call、apply、bind\n  uuid: GQ98GFTcsA6oX5fu\n  url: ybrsyw\n  prev_uuid: iZbjvIrZWQPncGf4\n  sibling_uuid: 8mxtq-HrdjGBfE1K\n  child_uuid: ''\n  parent_uuid: 8cOHMB0GUaMGEJAZ\n  doc_id: 77021715\n  level: 1\n  id: 77021715\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 实现 new 关键字\n  uuid: 8mxtq-HrdjGBfE1K\n  url: pldu2b\n  prev_uuid: GQ98GFTcsA6oX5fu\n  sibling_uuid: DTHsD8sppgSTGUG-\n  child_uuid: ''\n  parent_uuid: 8cOHMB0GUaMGEJAZ\n  doc_id: 77021706\n  level: 1\n  id: 77021706\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 函数柯理化\n  uuid: DTHsD8sppgSTGUG-\n  url: yo9cx5\n  prev_uuid: 8mxtq-HrdjGBfE1K\n  sibling_uuid: TaRHTWpqD3Ef8QHU\n  child_uuid: ''\n  parent_uuid: 8cOHMB0GUaMGEJAZ\n  doc_id: 77021634\n  level: 1\n  id: 77021634\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 浅拷贝和深拷贝\n  uuid: TaRHTWpqD3Ef8QHU\n  url: ufks1z\n  prev_uuid: DTHsD8sppgSTGUG-\n  sibling_uuid: 4Z30CA9ZXVdeKnnL\n  child_uuid: ''\n  parent_uuid: 8cOHMB0GUaMGEJAZ\n  doc_id: 77021640\n  level: 1\n  id: 77021640\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 实现 instanceof\n  uuid: 4Z30CA9ZXVdeKnnL\n  url: ba4wuo\n  prev_uuid: TaRHTWpqD3Ef8QHU\n  sibling_uuid: 2MBif8wnmvigRAxT\n  child_uuid: ''\n  parent_uuid: 8cOHMB0GUaMGEJAZ\n  doc_id: 77021689\n  level: 1\n  id: 77021689\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 手动实现定时器\n  uuid: 2MBif8wnmvigRAxT\n  url: wf9bwg\n  prev_uuid: 4Z30CA9ZXVdeKnnL\n  sibling_uuid: 8f6jGaWidUBFSNN7\n  child_uuid: ''\n  parent_uuid: 8cOHMB0GUaMGEJAZ\n  doc_id: 77021645\n  level: 1\n  id: 77021645\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: sleep 函数实现\n  uuid: 8f6jGaWidUBFSNN7\n  url: ngwrak\n  prev_uuid: 2MBif8wnmvigRAxT\n  sibling_uuid: lXeuN-kwl51AKTO0\n  child_uuid: ''\n  parent_uuid: 8cOHMB0GUaMGEJAZ\n  doc_id: 77021787\n  level: 1\n  id: 77021787\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 实现 JSON.stringify\n  uuid: lXeuN-kwl51AKTO0\n  url: mtoe2n\n  prev_uuid: 8f6jGaWidUBFSNN7\n  sibling_uuid: hVvT5-pJ5qVvYNrK\n  child_uuid: ''\n  parent_uuid: 8cOHMB0GUaMGEJAZ\n  doc_id: 77021785\n  level: 1\n  id: 77021785\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: js 通用类型获取\n  uuid: hVvT5-pJ5qVvYNrK\n  url: tll6lm\n  prev_uuid: lXeuN-kwl51AKTO0\n  sibling_uuid: ''\n  child_uuid: ''\n  parent_uuid: 8cOHMB0GUaMGEJAZ\n  doc_id: 77021802\n  level: 1\n  id: 77021802\n  open_window: 0\n  visible: 1\n- type: TITLE\n  title: 防抖和节流\n  uuid: XzzPhY1bnt-jy6Uq\n  url: ''\n  prev_uuid: 8cOHMB0GUaMGEJAZ\n  sibling_uuid: PkyQAjgp1TOfRd_2\n  child_uuid: AQvBtgwRPd2U2nSA\n  parent_uuid: ''\n  doc_id: ''\n  level: 0\n  id: ''\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 防抖\n  uuid: AQvBtgwRPd2U2nSA\n  url: enlngv\n  prev_uuid: XzzPhY1bnt-jy6Uq\n  sibling_uuid: nlhlSMjYGwG8o1jH\n  child_uuid: ''\n  parent_uuid: XzzPhY1bnt-jy6Uq\n  doc_id: 77021614\n  level: 1\n  id: 77021614\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 节流\n  uuid: nlhlSMjYGwG8o1jH\n  url: griz0t\n  prev_uuid: AQvBtgwRPd2U2nSA\n  sibling_uuid: ''\n  child_uuid: ''\n  parent_uuid: XzzPhY1bnt-jy6Uq\n  doc_id: 77021626\n  level: 1\n  id: 77021626\n  open_window: 0\n  visible: 1\n- type: TITLE\n  title: 数组相关\n  uuid: PkyQAjgp1TOfRd_2\n  url: ''\n  prev_uuid: XzzPhY1bnt-jy6Uq\n  sibling_uuid: 5NjAYoIgV-DfXemF\n  child_uuid: xTSsZIKFI9Di3LBH\n  parent_uuid: ''\n  doc_id: ''\n  level: 0\n  id: ''\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 数组转树\n  uuid: xTSsZIKFI9Di3LBH\n  url: bzgequ\n  prev_uuid: PkyQAjgp1TOfRd_2\n  sibling_uuid: Z_6uIAB9XA6raQPD\n  child_uuid: ''\n  parent_uuid: PkyQAjgp1TOfRd_2\n  doc_id: 77021833\n  level: 1\n  id: 77021833\n  open_window: 0\n  visible: 0\n- type: DOC\n  title: 树转数组\n  uuid: Z_6uIAB9XA6raQPD\n  url: xycpzl\n  prev_uuid: xTSsZIKFI9Di3LBH\n  sibling_uuid: hoLauQ33F3aF2wq7\n  child_uuid: ''\n  parent_uuid: PkyQAjgp1TOfRd_2\n  doc_id: 77021835\n  level: 1\n  id: 77021835\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 数组常用方法\n  uuid: hoLauQ33F3aF2wq7\n  url: owtewn\n  prev_uuid: Z_6uIAB9XA6raQPD\n  sibling_uuid: rvc_A-WMsWds7EBa\n  child_uuid: ''\n  parent_uuid: PkyQAjgp1TOfRd_2\n  doc_id: 77021725\n  level: 1\n  id: 77021725\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 数组去重实现\n  uuid: rvc_A-WMsWds7EBa\n  url: gq2z9n\n  prev_uuid: hoLauQ33F3aF2wq7\n  sibling_uuid: NB4bY-etxMWq1YWS\n  child_uuid: ''\n  parent_uuid: PkyQAjgp1TOfRd_2\n  doc_id: 77021623\n  level: 1\n  id: 77021623\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 数组扁平化实现\n  uuid: NB4bY-etxMWq1YWS\n  url: doeryg\n  prev_uuid: rvc_A-WMsWds7EBa\n  sibling_uuid: DBoiy0L7Hhm_Zrkf\n  child_uuid: ''\n  parent_uuid: PkyQAjgp1TOfRd_2\n  doc_id: 77021607\n  level: 1\n  id: 77021607\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 类数组转换为数组\n  uuid: DBoiy0L7Hhm_Zrkf\n  url: csgagn\n  prev_uuid: NB4bY-etxMWq1YWS\n  sibling_uuid: E4WkD_rpaai_v3HK\n  child_uuid: ''\n  parent_uuid: PkyQAjgp1TOfRd_2\n  doc_id: 77021754\n  level: 1\n  id: 77021754\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 实现数组乱序输出\n  uuid: E4WkD_rpaai_v3HK\n  url: xlrgnu\n  prev_uuid: DBoiy0L7Hhm_Zrkf\n  sibling_uuid: OkcuvyhOMA6N0ex4\n  child_uuid: ''\n  parent_uuid: PkyQAjgp1TOfRd_2\n  doc_id: 77021731\n  level: 1\n  id: 77021731\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 查找二维数组的目标值\n  uuid: OkcuvyhOMA6N0ex4\n  url: tmw2ny\n  prev_uuid: E4WkD_rpaai_v3HK\n  sibling_uuid: F8K4-6VRqHrupctd\n  child_uuid: ''\n  parent_uuid: PkyQAjgp1TOfRd_2\n  doc_id: 77021789\n  level: 1\n  id: 77021789\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 二维数组斜向打印\n  uuid: F8K4-6VRqHrupctd\n  url: aqw6my\n  prev_uuid: OkcuvyhOMA6N0ex4\n  sibling_uuid: ''\n  child_uuid: ''\n  parent_uuid: PkyQAjgp1TOfRd_2\n  doc_id: 77021780\n  level: 1\n  id: 77021780\n  open_window: 0\n  visible: 1\n- type: TITLE\n  title: 字符串相关\n  uuid: 5NjAYoIgV-DfXemF\n  url: ''\n  prev_uuid: PkyQAjgp1TOfRd_2\n  sibling_uuid: Q34_kLhQ_uWoQw46\n  child_uuid: XNjX12HqmJBUHjy7\n  parent_uuid: ''\n  doc_id: ''\n  level: 0\n  id: ''\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 实现字符串的 repeat 方法\n  uuid: XNjX12HqmJBUHjy7\n  url: hxelqc\n  prev_uuid: 5NjAYoIgV-DfXemF\n  sibling_uuid: ''\n  child_uuid: ''\n  parent_uuid: 5NjAYoIgV-DfXemF\n  doc_id: 77021740\n  level: 1\n  id: 77021740\n  open_window: 0\n  visible: 1\n- type: TITLE\n  title: promise相关\n  uuid: Q34_kLhQ_uWoQw46\n  url: ''\n  prev_uuid: 5NjAYoIgV-DfXemF\n  sibling_uuid: aXqdYGJNJ1HlijwX\n  child_uuid: fuTj4su1VjBeHDO5\n  parent_uuid: ''\n  doc_id: ''\n  level: 0\n  id: ''\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 实现 Promise A+\n  uuid: fuTj4su1VjBeHDO5\n  url: fl6cgx\n  prev_uuid: Q34_kLhQ_uWoQw46\n  sibling_uuid: IOPLb2N42d3OZ0Zq\n  child_uuid: ''\n  parent_uuid: Q34_kLhQ_uWoQw46\n  doc_id: 77021620\n  level: 1\n  id: 77021620\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: Promise  常用方法实现\n  uuid: IOPLb2N42d3OZ0Zq\n  url: vd2h4l\n  prev_uuid: fuTj4su1VjBeHDO5\n  sibling_uuid: vKLkkDq-XoJwsqMW\n  child_uuid: ''\n  parent_uuid: Q34_kLhQ_uWoQw46\n  doc_id: 77021632\n  level: 1\n  id: 77021632\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: Promise 并发控制\n  uuid: vKLkkDq-XoJwsqMW\n  url: gd3193\n  prev_uuid: IOPLb2N42d3OZ0Zq\n  sibling_uuid: rYJ2dherst1MyK0I\n  child_uuid: ''\n  parent_uuid: Q34_kLhQ_uWoQw46\n  doc_id: 77021662\n  level: 1\n  id: 77021662\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: Promise 缓存\n  uuid: rYJ2dherst1MyK0I\n  url: sgcusf\n  prev_uuid: vKLkkDq-XoJwsqMW\n  sibling_uuid: xZ5UrxtCjhBJxiXK\n  child_uuid: ''\n  parent_uuid: Q34_kLhQ_uWoQw46\n  doc_id: 77021679\n  level: 1\n  id: 77021679\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 异步串行输出\n  uuid: xZ5UrxtCjhBJxiXK\n  url: um4g6z\n  prev_uuid: rYJ2dherst1MyK0I\n  sibling_uuid: fZuICDZLsFJSo57b\n  child_uuid: ''\n  parent_uuid: Q34_kLhQ_uWoQw46\n  doc_id: 77021649\n  level: 1\n  id: 77021649\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 带并发的异步调度器 Scheduler\n  uuid: fZuICDZLsFJSo57b\n  url: kbkc8e\n  prev_uuid: xZ5UrxtCjhBJxiXK\n  sibling_uuid: ''\n  child_uuid: ''\n  parent_uuid: Q34_kLhQ_uWoQw46\n  doc_id: 77021700\n  level: 1\n  id: 77021700\n  open_window: 0\n  visible: 1\n- type: TITLE\n  title: 数据处理\n  uuid: aXqdYGJNJ1HlijwX\n  url: ''\n  prev_uuid: Q34_kLhQ_uWoQw46\n  sibling_uuid: oj23-2V9egz1L0Ic\n  child_uuid: SxxBIhY4HFEaNF8V\n  parent_uuid: ''\n  doc_id: ''\n  level: 0\n  id: ''\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 解析 url 参数对象\n  uuid: SxxBIhY4HFEaNF8V\n  url: rxw8qp\n  prev_uuid: aXqdYGJNJ1HlijwX\n  sibling_uuid: yiD9ldSpBGzQNQxQ\n  child_uuid: ''\n  parent_uuid: aXqdYGJNJ1HlijwX\n  doc_id: 77021764\n  level: 1\n  id: 77021764\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 实现日期格式化函数\n  uuid: yiD9ldSpBGzQNQxQ\n  url: shzfyg\n  prev_uuid: SxxBIhY4HFEaNF8V\n  sibling_uuid: _3QVaw5COwwvCXZv\n  child_uuid: ''\n  parent_uuid: aXqdYGJNJ1HlijwX\n  doc_id: 77021710\n  level: 1\n  id: 77021710\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 交换 a、b 的值，不使用临时变量\n  uuid: _3QVaw5COwwvCXZv\n  url: xw17tv\n  prev_uuid: yiD9ldSpBGzQNQxQ\n  sibling_uuid: Mq5fe2v7j2INDdvL\n  child_uuid: ''\n  parent_uuid: aXqdYGJNJ1HlijwX\n  doc_id: 77021736\n  level: 1\n  id: 77021736\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 获取两个数之间的任意随机数\n  uuid: Mq5fe2v7j2INDdvL\n  url: vhngph\n  prev_uuid: _3QVaw5COwwvCXZv\n  sibling_uuid: 8Chl_bOMaALA1jhP\n  child_uuid: ''\n  parent_uuid: aXqdYGJNJ1HlijwX\n  doc_id: 77021688\n  level: 1\n  id: 77021688\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 将数字千分位用逗号隔开\n  uuid: 8Chl_bOMaALA1jhP\n  url: vphpea\n  prev_uuid: Mq5fe2v7j2INDdvL\n  sibling_uuid: MLI7v9Et4dIn7XiV\n  child_uuid: ''\n  parent_uuid: aXqdYGJNJ1HlijwX\n  doc_id: 77021743\n  level: 1\n  id: 77021743\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 实现非负大整数相加\n  uuid: MLI7v9Et4dIn7XiV\n  url: xlvd0g\n  prev_uuid: 8Chl_bOMaALA1jhP\n  sibling_uuid: mVWcb08QaDpa9PNH\n  child_uuid: ''\n  parent_uuid: aXqdYGJNJ1HlijwX\n  doc_id: 77021748\n  level: 1\n  id: 77021748\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 判断对象是否存在循环引用\n  uuid: mVWcb08QaDpa9PNH\n  url: phqdmd\n  prev_uuid: MLI7v9Et4dIn7XiV\n  sibling_uuid: ''\n  child_uuid: ''\n  parent_uuid: aXqdYGJNJ1HlijwX\n  doc_id: 77021768\n  level: 1\n  id: 77021768\n  open_window: 0\n  visible: 1\n- type: TITLE\n  title: 框架\n  uuid: oj23-2V9egz1L0Ic\n  url: ''\n  prev_uuid: aXqdYGJNJ1HlijwX\n  sibling_uuid: BTeDPodj0NU8fRW3\n  child_uuid: t5HRubL3aXPLNoG6\n  parent_uuid: ''\n  doc_id: ''\n  level: 0\n  id: ''\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 发布订阅模式\n  uuid: t5HRubL3aXPLNoG6\n  url: ezcdgo\n  prev_uuid: oj23-2V9egz1L0Ic\n  sibling_uuid: EqMT4jazWkuKJX1v\n  child_uuid: ''\n  parent_uuid: oj23-2V9egz1L0Ic\n  doc_id: 77021611\n  level: 1\n  id: 77021611\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 观察者模式\n  uuid: EqMT4jazWkuKJX1v\n  url: dwziom\n  prev_uuid: t5HRubL3aXPLNoG6\n  sibling_uuid: O5OEkYSpde-8we8V\n  child_uuid: ''\n  parent_uuid: oj23-2V9egz1L0Ic\n  doc_id: 77021795\n  level: 1\n  id: 77021795\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 简易版 vue2\n  uuid: O5OEkYSpde-8we8V\n  url: indxog\n  prev_uuid: EqMT4jazWkuKJX1v\n  sibling_uuid: XOQaAmtLM_gvM85t\n  child_uuid: ''\n  parent_uuid: oj23-2V9egz1L0Ic\n  doc_id: 77021636\n  level: 1\n  id: 77021636\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 简易版 vue3\n  uuid: XOQaAmtLM_gvM85t\n  url: an017i\n  prev_uuid: O5OEkYSpde-8we8V\n  sibling_uuid: ciSabdz5MTC1wbC7\n  child_uuid: ''\n  parent_uuid: oj23-2V9egz1L0Ic\n  doc_id: 77021804\n  level: 1\n  id: 77021804\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 简易版 vuex\n  uuid: ciSabdz5MTC1wbC7\n  url: myzomg\n  prev_uuid: XOQaAmtLM_gvM85t\n  sibling_uuid: ''\n  child_uuid: ''\n  parent_uuid: oj23-2V9egz1L0Ic\n  doc_id: 77021704\n  level: 1\n  id: 77021704\n  open_window: 0\n  visible: 1\n- type: TITLE\n  title: 应用场景\n  uuid: BTeDPodj0NU8fRW3\n  url: ''\n  prev_uuid: oj23-2V9egz1L0Ic\n  sibling_uuid: KKJ-BzUK3K9FxUJ2\n  child_uuid: U1oF7BfjBGNpWa79\n  parent_uuid: ''\n  doc_id: ''\n  level: 0\n  id: ''\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 通过调用 addRemote 实现 add\n  uuid: U1oF7BfjBGNpWa79\n  url: edff3s\n  prev_uuid: BTeDPodj0NU8fRW3\n  sibling_uuid: RMAn78BGFgyI8W6c\n  child_uuid: ''\n  parent_uuid: BTeDPodj0NU8fRW3\n  doc_id: 77021816\n  level: 1\n  id: 77021816\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 倒计时\n  uuid: RMAn78BGFgyI8W6c\n  url: uwleof\n  prev_uuid: U1oF7BfjBGNpWa79\n  sibling_uuid: aYlobR47xz0qHkhF\n  child_uuid: ''\n  parent_uuid: BTeDPodj0NU8fRW3\n  doc_id: 77021810\n  level: 1\n  id: 77021810\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 版本号比较\n  uuid: aYlobR47xz0qHkhF\n  url: cynvvd\n  prev_uuid: RMAn78BGFgyI8W6c\n  sibling_uuid: N0u_B_WnmtCeQwFI\n  child_uuid: ''\n  parent_uuid: BTeDPodj0NU8fRW3\n  doc_id: 77021792\n  level: 1\n  id: 77021792\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 实现简单路由\n  uuid: N0u_B_WnmtCeQwFI\n  url: zzc9k3\n  prev_uuid: aYlobR47xz0qHkhF\n  sibling_uuid: es8IUmiyOTWzwKa9\n  child_uuid: ''\n  parent_uuid: BTeDPodj0NU8fRW3\n  doc_id: 77021784\n  level: 1\n  id: 77021784\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 长列表虚拟滚动\n  uuid: es8IUmiyOTWzwKa9\n  url: wsmws7\n  prev_uuid: N0u_B_WnmtCeQwFI\n  sibling_uuid: yKn9f3BKX1S3tsyK\n  child_uuid: ''\n  parent_uuid: BTeDPodj0NU8fRW3\n  doc_id: 77021653\n  level: 1\n  id: 77021653\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 围圈报数问题\n  uuid: yKn9f3BKX1S3tsyK\n  url: gkoa19\n  prev_uuid: es8IUmiyOTWzwKa9\n  sibling_uuid: zmiKBP3HABO6Ig_9\n  child_uuid: ''\n  parent_uuid: BTeDPodj0NU8fRW3\n  doc_id: 77021761\n  level: 1\n  id: 77021761\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 查找文章中出现频率最高的词\n  uuid: zmiKBP3HABO6Ig_9\n  url: rln2y3\n  prev_uuid: yKn9f3BKX1S3tsyK\n  sibling_uuid: cDzdEkch3JypwTh2\n  child_uuid: ''\n  parent_uuid: BTeDPodj0NU8fRW3\n  doc_id: 77021772\n  level: 1\n  id: 77021772\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: Promise 每隔 1s 输出 1、2、3\n  uuid: cDzdEkch3JypwTh2\n  url: yg55el\n  prev_uuid: zmiKBP3HABO6Ig_9\n  sibling_uuid: II7sWIfm_eSWwKfq\n  child_uuid: ''\n  parent_uuid: BTeDPodj0NU8fRW3\n  doc_id: 77021821\n  level: 1\n  id: 77021821\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 循环打印红黄绿\n  uuid: II7sWIfm_eSWwKfq\n  url: wyhgfz\n  prev_uuid: cDzdEkch3JypwTh2\n  sibling_uuid: 0hKcnD9qnLeCTq4Q\n  child_uuid: ''\n  parent_uuid: BTeDPodj0NU8fRW3\n  doc_id: 77021776\n  level: 1\n  id: 77021776\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 封装一个异步加载图片的方法\n  uuid: 0hKcnD9qnLeCTq4Q\n  url: orxq0m\n  prev_uuid: II7sWIfm_eSWwKfq\n  sibling_uuid: b7lf8zlMeqorWGgi\n  child_uuid: ''\n  parent_uuid: BTeDPodj0NU8fRW3\n  doc_id: 77021825\n  level: 1\n  id: 77021825\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 实现 mergePromise 函数\n  uuid: b7lf8zlMeqorWGgi\n  url: apqplp\n  prev_uuid: 0hKcnD9qnLeCTq4Q\n  sibling_uuid: EZZ2GBqZ-B1LUsam\n  child_uuid: ''\n  parent_uuid: BTeDPodj0NU8fRW3\n  doc_id: 77021819\n  level: 1\n  id: 77021819\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 图片加载数量限制\n  uuid: EZZ2GBqZ-B1LUsam\n  url: xz2gy5\n  prev_uuid: b7lf8zlMeqorWGgi\n  sibling_uuid: '-8N7uf1xcBmFXSQI'\n  child_uuid: ''\n  parent_uuid: BTeDPodj0NU8fRW3\n  doc_id: 77021664\n  level: 1\n  id: 77021664\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 文本中识别敏感词、表情包、链接、数字、字母并高亮\n  uuid: '-8N7uf1xcBmFXSQI'\n  url: athu4p\n  prev_uuid: EZZ2GBqZ-B1LUsam\n  sibling_uuid: F_Fz97LW3aSxLLnr\n  child_uuid: ''\n  parent_uuid: BTeDPodj0NU8fRW3\n  doc_id: 77021666\n  level: 1\n  id: 77021666\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 图片格式转换为 webp\n  uuid: F_Fz97LW3aSxLLnr\n  url: cwlftq\n  prev_uuid: '-8N7uf1xcBmFXSQI'\n  sibling_uuid: wfz5QMLK_eAEtlFz\n  child_uuid: ''\n  parent_uuid: BTeDPodj0NU8fRW3\n  doc_id: 77021647\n  level: 1\n  id: 77021647\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 计算对象占用的字节数\n  uuid: wfz5QMLK_eAEtlFz\n  url: gx1y1y\n  prev_uuid: F_Fz97LW3aSxLLnr\n  sibling_uuid: rKjJYSK4ytL18T9L\n  child_uuid: ''\n  parent_uuid: BTeDPodj0NU8fRW3\n  doc_id: 77021669\n  level: 1\n  id: 77021669\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 给 xhr 添加 hook，实现在各个阶段打印日志\n  uuid: rKjJYSK4ytL18T9L\n  url: dm9n4g\n  prev_uuid: wfz5QMLK_eAEtlFz\n  sibling_uuid: zZADZWaE-olCAOjQ\n  child_uuid: ''\n  parent_uuid: BTeDPodj0NU8fRW3\n  doc_id: 77021658\n  level: 1\n  id: 77021658\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 明信片问题\n  uuid: zZADZWaE-olCAOjQ\n  url: mnsw3z\n  prev_uuid: rKjJYSK4ytL18T9L\n  sibling_uuid: ''\n  child_uuid: ''\n  parent_uuid: BTeDPodj0NU8fRW3\n  doc_id: 77021807\n  level: 1\n  id: 77021807\n  open_window: 0\n  visible: 1\n- type: TITLE\n  title: 常用算法实现\n  uuid: KKJ-BzUK3K9FxUJ2\n  url: ''\n  prev_uuid: BTeDPodj0NU8fRW3\n  sibling_uuid: ''\n  child_uuid: z8xQMUujFU-0OTsg\n  parent_uuid: ''\n  doc_id: ''\n  level: 0\n  id: ''\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 二分查找\n  uuid: z8xQMUujFU-0OTsg\n  url: pywta0\n  prev_uuid: KKJ-BzUK3K9FxUJ2\n  sibling_uuid: _b3VVGX3aAQ_rvuS\n  child_uuid: ''\n  parent_uuid: KKJ-BzUK3K9FxUJ2\n  doc_id: 77021798\n  level: 1\n  id: 77021798\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 排序\n  uuid: _b3VVGX3aAQ_rvuS\n  url: ivvld9\n  prev_uuid: z8xQMUujFU-0OTsg\n  sibling_uuid: eRQoWM79y_Mwbg2D\n  child_uuid: ''\n  parent_uuid: KKJ-BzUK3K9FxUJ2\n  doc_id: 77021670\n  level: 1\n  id: 77021670\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 动态规划和贪心算法\n  uuid: eRQoWM79y_Mwbg2D\n  url: pyig7m\n  prev_uuid: _b3VVGX3aAQ_rvuS\n  sibling_uuid: tr1DuV5ACUbyp8j-\n  child_uuid: ''\n  parent_uuid: KKJ-BzUK3K9FxUJ2\n  doc_id: 77021676\n  level: 1\n  id: 77021676\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 洗牌算法\n  uuid: tr1DuV5ACUbyp8j-\n  url: tohw0k\n  prev_uuid: eRQoWM79y_Mwbg2D\n  sibling_uuid: x9xEaoi_A59UZjS5\n  child_uuid: ''\n  parent_uuid: KKJ-BzUK3K9FxUJ2\n  doc_id: 77021687\n  level: 1\n  id: 77021687\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: LRU(最少置换算法)\n  uuid: x9xEaoi_A59UZjS5\n  url: tmwgql\n  prev_uuid: tr1DuV5ACUbyp8j-\n  sibling_uuid: XsgMUe05eXycAX93\n  child_uuid: ''\n  parent_uuid: KKJ-BzUK3K9FxUJ2\n  doc_id: 77021694\n  level: 1\n  id: 77021694\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 斐波那契数列\n  uuid: XsgMUe05eXycAX93\n  url: bq7f7e\n  prev_uuid: x9xEaoi_A59UZjS5\n  sibling_uuid: T0orOt1CWhzdAczU\n  child_uuid: ''\n  parent_uuid: KKJ-BzUK3K9FxUJ2\n  doc_id: 77021683\n  level: 1\n  id: 77021683\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 大数相加\n  uuid: T0orOt1CWhzdAczU\n  url: ln6fpo\n  prev_uuid: XsgMUe05eXycAX93\n  sibling_uuid: ''\n  child_uuid: ''\n  parent_uuid: KKJ-BzUK3K9FxUJ2\n  doc_id: 77021693\n  level: 1\n  id: 77021693\n  open_window: 0\n  visible: 1\n",
    "creator_id": 732231,
    "public": 0,
    "items_count": 65,
    "likes_count": 0,
    "watches_count": 1,
    "content_updated_at": "2023-01-06T09:17:32.188Z",
    "created_at": "2022-05-11T14:43:59.000Z",
    "updated_at": "2023-11-11T18:10:33.000Z",
    "user": {
      "id": 732231,
      "type": "User",
      "login": "wcywxq",
      "name": "magic",
      "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/732231/1606968271774-avatar/886ad88b-d2cc-4c9e-a674-f70eb51a679c.png",
      "books_count": 21,
      "public_books_count": 0,
      "followers_count": 0,
      "following_count": 0,
      "public": 1,
      "description": null,
      "created_at": "2020-01-08T14:21:31.000Z",
      "updated_at": "2023-11-23T19:11:28.000Z",
      "work_id": "",
      "_serializer": "v2.user"
    },
    "namespace": "wcywxq/pgkpvh",
    "_serializer": "v2.book"
  },
  "user": {
    "id": 732231,
    "type": "User",
    "login": "wcywxq",
    "name": "magic",
    "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/732231/1606968271774-avatar/886ad88b-d2cc-4c9e-a674-f70eb51a679c.png",
    "books_count": 21,
    "public_books_count": 0,
    "followers_count": 0,
    "following_count": 0,
    "public": 1,
    "description": null,
    "created_at": "2020-01-08T14:21:31.000Z",
    "updated_at": "2023-11-23T19:11:28.000Z",
    "work_id": "",
    "_serializer": "v2.user"
  },
  "tags": [],
  "latest_version_id": 984849335,
  "creator": {
    "id": 732231,
    "type": "User",
    "login": "wcywxq",
    "name": "magic",
    "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/732231/1606968271774-avatar/886ad88b-d2cc-4c9e-a674-f70eb51a679c.png",
    "books_count": 21,
    "public_books_count": 0,
    "followers_count": 0,
    "following_count": 0,
    "public": 1,
    "description": null,
    "created_at": "2020-01-08T14:21:31.000Z",
    "updated_at": "2023-11-23T19:11:28.000Z",
    "work_id": "",
    "_serializer": "v2.user"
  },
  "_serializer": "v2.doc_detail"
}