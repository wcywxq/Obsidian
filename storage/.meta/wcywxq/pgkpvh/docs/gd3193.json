{
  "id": 77021662,
  "slug": "gd3193",
  "title": "Promise 并发控制",
  "description": "并发控制函数// 模拟异步请求 const request = url => new Promise(resolve => { \tsetTimeout(() => {   \tresolve(`任务 ${url.padEnd(10, ' ')} 完成`)   }, 1000) })  // 并发...",
  "cover": "",
  "user_id": 732231,
  "book_id": 27818302,
  "last_editor_id": 732231,
  "format": "lake",
  "body_draft": "",
  "body": "<a name=\"ULPRh\"></a>\n## 并发控制函数\n\n```javascript\n// 模拟异步请求\nconst request = url => new Promise(resolve => {\n\tsetTimeout(() => {\n  \tresolve(`任务 ${url.padEnd(10, ' ')} 完成`)\n  }, 1000)\n})\n\n// 并发控制函数\nasync function asyncPool(max = 3, tasks = [], fn = () => Promise.resolve()) {\n\t// 待执行任务数组\n  // 正在执行的任务数组\n  let pool = []\n  for (let i = 0; i < tasks.length; i++) {\n  \t// 生成异步任务\n    const task = fn(tasks[i])\n    // 添加到正在执行的任务数组\n    pool.push(task)\n    task.then(data => {\n    \t// 当任务执行完毕，将其从正在执行任务数组中移除\n      console.log(`${data}; 当前并发数: ${pool.length}`)\n      pool.splice(pool.indexOf(task), 1)\n    })\n    \n    // 当并发池满了，就先去执行并发池中的任务，有任务执行完成后，再继续循环\n    if (pool.length === max) {\n    \tawait Promise.race(pool)\n    }\n  }\n}\n\nconst tasks = new Array(10).fill('').map((task, i) => `url - ${i + 1}`)\nasyncPool(3, tasks, request)\n```\n<a name=\"Hlqg7\"></a>\n## \n<a name=\"VJDtr\"></a>\n## async-pool 源码实现\n\n核心思路：\n\n1. 先初始化 `limit` 个 `promise` 实例，将他们放到 `executing` 数组中\n2. 使用 `Promise.race` 等待这 `limit` 个 `promise` 实例的执行结果\n3. 一旦某一个 `promise` 的状态发生变更，就将其从 `executing` 中删除，然后再执行循环生成新的 `promise`，放入 `executing` 中\n4. 重复 2、3 两个步骤，直到所有的 `promise` 都被执行完\n5. 最后使用 `Promise.all` 返回所有 `promise` 实例的执行结果\n<a name=\"Q0xPD\"></a>\n### es6 实现\n```javascript\nfunction asyncPool(poolLimit, array, iteratorFn) {\n\tlet i = 0\n  const ret = []\n  const executing = []\n  const enqueue = function() {\n  \tif (i === array.length) return Promise.resolve()\n    const item = array[i++]\n    const p = Promise.resolve().then(() => iteratorFn(item, array))\n    ret.push(p)\n    let r = Promise.resolve()\n    if (poolLimit <= array.length) {\n    \tconst e = p.then(() => executing.splice(executing.indexOf(e), 1))\n      executing.push(e)\n      if (executing.length >= poolLimit) {\n      \tr = Promise.race(executing)\n      }\n    }\n    return r.then(() => enqueue())\n  }\n  return enqueue().then(() => Promise.all(ret))\n}\n```\n<a name=\"MhPML\"></a>\n### es7 实现\n```javascript\nasync function asyncPool(poolLimit, array, iteratorFn) {\n\tconst ret = []\n  const executing = []\n  for (const item of array) {\n  \tconst p = Promise.resolve().then(() => iteratorFn(item, array))\n    ret.push(p)\n    if (poolLimit <= array.length) {\n      // then 回调中，当这个 promise 状态变为 fulfilled 后，将其从正在执行的 promise 列表 executing 中删除\n    \tconst e = p.then(() => executing.splice(executing.indexOf(e), 1))\n      executing.push(e)\n      if (executing.length >= poolLimit) {\n        // 一旦正在执行的 promise 列表数量等于限制数，就使用 Promise.race 等待某一个 promise 状态发生变更\n        // 状态变更后，就会执行上面 then 的回调，将该 promise 从 executing 中删除\n        // 然后再进入到下一次 for 循环，生成新的 promise 进行补充\n      \tawait Promise.race(executing)\n      }\n    }\n  }\n  return Promise.all(ret)\n}\n```\n\n\n",
  "body_html": "<!doctype html><h2 id=\"ULPRh\"><span>并发控制函数</span></h2><p data-lake-id=\"u8c05dd5b\"><br /></p><pre data-lang=\"javascript\"><code>// 模拟异步请求\nconst request = url =&gt; new Promise(resolve =&gt; {\n\tsetTimeout(() =&gt; {\n  \tresolve(`任务 ${url.padEnd(10, ' ')} 完成`)\n  }, 1000)\n})\n\n// 并发控制函数\nasync function asyncPool(max = 3, tasks = [], fn = () =&gt; Promise.resolve()) {\n\t// 待执行任务数组\n  // 正在执行的任务数组\n  let pool = []\n  for (let i = 0; i &lt; tasks.length; i++) {\n  \t// 生成异步任务\n    const task = fn(tasks[i])\n    // 添加到正在执行的任务数组\n    pool.push(task)\n    task.then(data =&gt; {\n    \t// 当任务执行完毕，将其从正在执行任务数组中移除\n      console.log(`${data}; 当前并发数: ${pool.length}`)\n      pool.splice(pool.indexOf(task), 1)\n    })\n    \n    // 当并发池满了，就先去执行并发池中的任务，有任务执行完成后，再继续循环\n    if (pool.length === max) {\n    \tawait Promise.race(pool)\n    }\n  }\n}\n\nconst tasks = new Array(10).fill('').map((task, i) =&gt; `url - ${i + 1}`)\nasyncPool(3, tasks, request)</code></pre><h2 id=\"Hlqg7\"><br /></h2><h2 id=\"VJDtr\"><span>async-pool 源码实现</span></h2><p data-lake-id=\"u2d0e7d4f\"><br /></p><p data-lake-id=\"u3f2dd641\"><span>核心思路：</span></p><ol><li><span>先初始化 </span><code><span>limit</span></code><span> 个 </span><code><span>promise</span></code><span> 实例，将他们放到 </span><code><span>executing</span></code><span> 数组中</span></li><li><span>使用 </span><code><span>Promise.race</span></code><span> 等待这 </span><code><span>limit</span></code><span> 个 </span><code><span>promise</span></code><span> 实例的执行结果</span></li><li><span>一旦某一个 </span><code><span>promise</span></code><span> 的状态发生变更，就将其从 </span><code><span>executing</span></code><span> 中删除，然后再执行循环生成新的 </span><code><span>promise</span></code><span>，放入 </span><code><span>executing</span></code><span> 中</span></li><li><span>重复 2、3 两个步骤，直到所有的 </span><code><span>promise</span></code><span> 都被执行完</span></li><li><span>最后使用 </span><code><span>Promise.all</span></code><span> 返回所有 </span><code><span>promise</span></code><span> 实例的执行结果</span></li></ol><h3 id=\"Q0xPD\"><span>es6 实现</span></h3><pre data-lang=\"javascript\"><code>function asyncPool(poolLimit, array, iteratorFn) {\n\tlet i = 0\n  const ret = []\n  const executing = []\n  const enqueue = function() {\n  \tif (i === array.length) return Promise.resolve()\n    const item = array[i++]\n    const p = Promise.resolve().then(() =&gt; iteratorFn(item, array))\n    ret.push(p)\n    let r = Promise.resolve()\n    if (poolLimit &lt;= array.length) {\n    \tconst e = p.then(() =&gt; executing.splice(executing.indexOf(e), 1))\n      executing.push(e)\n      if (executing.length &gt;= poolLimit) {\n      \tr = Promise.race(executing)\n      }\n    }\n    return r.then(() =&gt; enqueue())\n  }\n  return enqueue().then(() =&gt; Promise.all(ret))\n}</code></pre><h3 id=\"MhPML\"><span>es7 实现</span></h3><pre data-lang=\"javascript\"><code>async function asyncPool(poolLimit, array, iteratorFn) {\n\tconst ret = []\n  const executing = []\n  for (const item of array) {\n  \tconst p = Promise.resolve().then(() =&gt; iteratorFn(item, array))\n    ret.push(p)\n    if (poolLimit &lt;= array.length) {\n      // then 回调中，当这个 promise 状态变为 fulfilled 后，将其从正在执行的 promise 列表 executing 中删除\n    \tconst e = p.then(() =&gt; executing.splice(executing.indexOf(e), 1))\n      executing.push(e)\n      if (executing.length &gt;= poolLimit) {\n        // 一旦正在执行的 promise 列表数量等于限制数，就使用 Promise.race 等待某一个 promise 状态发生变更\n        // 状态变更后，就会执行上面 then 的回调，将该 promise 从 executing 中删除\n        // 然后再进入到下一次 for 循环，生成新的 promise 进行补充\n      \tawait Promise.race(executing)\n      }\n    }\n  }\n  return Promise.all(ret)\n}</code></pre><p data-lake-id=\"uf8cb5711\"><br /></p><p data-lake-id=\"u8e91f9cc\"><br /></p>",
  "body_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"viewport\" content=\"adapt\" /><h2 data-lake-id=\"ULPRh\" id=\"ULPRh\"><span data-lake-id=\"u9af014f7\" id=\"u9af014f7\">并发控制函数</span></h2><p data-lake-id=\"u8c05dd5b\" id=\"u8c05dd5b\"><br></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%20%E6%A8%A1%E6%8B%9F%E5%BC%82%E6%AD%A5%E8%AF%B7%E6%B1%82%5Cnconst%20request%20%3D%20url%20%3D%3E%20new%20Promise(resolve%20%3D%3E%20%7B%5Cn%5CtsetTimeout(()%20%3D%3E%20%7B%5Cn%20%20%5Ctresolve(%60%E4%BB%BB%E5%8A%A1%20%24%7Burl.padEnd(10%2C%20'%20')%7D%20%E5%AE%8C%E6%88%90%60)%5Cn%20%20%7D%2C%201000)%5Cn%7D)%5Cn%5Cn%2F%2F%20%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6%E5%87%BD%E6%95%B0%5Cnasync%20function%20asyncPool(max%20%3D%203%2C%20tasks%20%3D%20%5B%5D%2C%20fn%20%3D%20()%20%3D%3E%20Promise.resolve())%20%7B%5Cn%5Ct%2F%2F%20%E5%BE%85%E6%89%A7%E8%A1%8C%E4%BB%BB%E5%8A%A1%E6%95%B0%E7%BB%84%5Cn%20%20%2F%2F%20%E6%AD%A3%E5%9C%A8%E6%89%A7%E8%A1%8C%E7%9A%84%E4%BB%BB%E5%8A%A1%E6%95%B0%E7%BB%84%5Cn%20%20let%20pool%20%3D%20%5B%5D%5Cn%20%20for%20(let%20i%20%3D%200%3B%20i%20%3C%20tasks.length%3B%20i%2B%2B)%20%7B%5Cn%20%20%5Ct%2F%2F%20%E7%94%9F%E6%88%90%E5%BC%82%E6%AD%A5%E4%BB%BB%E5%8A%A1%5Cn%20%20%20%20const%20task%20%3D%20fn(tasks%5Bi%5D)%5Cn%20%20%20%20%2F%2F%20%E6%B7%BB%E5%8A%A0%E5%88%B0%E6%AD%A3%E5%9C%A8%E6%89%A7%E8%A1%8C%E7%9A%84%E4%BB%BB%E5%8A%A1%E6%95%B0%E7%BB%84%5Cn%20%20%20%20pool.push(task)%5Cn%20%20%20%20task.then(data%20%3D%3E%20%7B%5Cn%20%20%20%20%5Ct%2F%2F%20%E5%BD%93%E4%BB%BB%E5%8A%A1%E6%89%A7%E8%A1%8C%E5%AE%8C%E6%AF%95%EF%BC%8C%E5%B0%86%E5%85%B6%E4%BB%8E%E6%AD%A3%E5%9C%A8%E6%89%A7%E8%A1%8C%E4%BB%BB%E5%8A%A1%E6%95%B0%E7%BB%84%E4%B8%AD%E7%A7%BB%E9%99%A4%5Cn%20%20%20%20%20%20console.log(%60%24%7Bdata%7D%3B%20%E5%BD%93%E5%89%8D%E5%B9%B6%E5%8F%91%E6%95%B0%3A%20%24%7Bpool.length%7D%60)%5Cn%20%20%20%20%20%20pool.splice(pool.indexOf(task)%2C%201)%5Cn%20%20%20%20%7D)%5Cn%20%20%20%20%5Cn%20%20%20%20%2F%2F%20%E5%BD%93%E5%B9%B6%E5%8F%91%E6%B1%A0%E6%BB%A1%E4%BA%86%EF%BC%8C%E5%B0%B1%E5%85%88%E5%8E%BB%E6%89%A7%E8%A1%8C%E5%B9%B6%E5%8F%91%E6%B1%A0%E4%B8%AD%E7%9A%84%E4%BB%BB%E5%8A%A1%EF%BC%8C%E6%9C%89%E4%BB%BB%E5%8A%A1%E6%89%A7%E8%A1%8C%E5%AE%8C%E6%88%90%E5%90%8E%EF%BC%8C%E5%86%8D%E7%BB%A7%E7%BB%AD%E5%BE%AA%E7%8E%AF%5Cn%20%20%20%20if%20(pool.length%20%3D%3D%3D%20max)%20%7B%5Cn%20%20%20%20%5Ctawait%20Promise.race(pool)%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%7D%5Cn%5Cnconst%20tasks%20%3D%20new%20Array(10).fill('').map((task%2C%20i)%20%3D%3E%20%60url%20-%20%24%7Bi%20%2B%201%7D%60)%5CnasyncPool(3%2C%20tasks%2C%20request)%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22rGD89%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h2 data-lake-id=\"Hlqg7\" id=\"Hlqg7\"><br></h2><h2 data-lake-id=\"VJDtr\" id=\"VJDtr\"><span data-lake-id=\"u2d5a9d2e\" id=\"u2d5a9d2e\">async-pool 源码实现</span></h2><p data-lake-id=\"u2d0e7d4f\" id=\"u2d0e7d4f\"><br></p><p data-lake-id=\"u3f2dd641\" id=\"u3f2dd641\"><span data-lake-id=\"u220932bf\" id=\"u220932bf\">核心思路：</span></p><ol list=\"uda244e79\"><li fid=\"u9767be16\" data-lake-id=\"ub47c44d2\" id=\"ub47c44d2\"><span data-lake-id=\"u7ca8c90f\" id=\"u7ca8c90f\">先初始化 </span><code data-lake-id=\"u1422ef17\" id=\"u1422ef17\"><span data-lake-id=\"u95671824\" id=\"u95671824\">limit</span></code><span data-lake-id=\"u408cd1e0\" id=\"u408cd1e0\"> 个 </span><code data-lake-id=\"u7ddcc507\" id=\"u7ddcc507\"><span data-lake-id=\"ud3288020\" id=\"ud3288020\">promise</span></code><span data-lake-id=\"u3379b1a9\" id=\"u3379b1a9\"> 实例，将他们放到 </span><code data-lake-id=\"u023f0807\" id=\"u023f0807\"><span data-lake-id=\"u0fcef322\" id=\"u0fcef322\">executing</span></code><span data-lake-id=\"u7ea10b1c\" id=\"u7ea10b1c\"> 数组中</span></li><li fid=\"u9767be16\" data-lake-id=\"u4bc45c41\" id=\"u4bc45c41\"><span data-lake-id=\"u05e29a7c\" id=\"u05e29a7c\">使用 </span><code data-lake-id=\"uc06ac836\" id=\"uc06ac836\"><span data-lake-id=\"u6f10fe38\" id=\"u6f10fe38\">Promise.race</span></code><span data-lake-id=\"u2e11eb25\" id=\"u2e11eb25\"> 等待这 </span><code data-lake-id=\"u368e2417\" id=\"u368e2417\"><span data-lake-id=\"u450f52b9\" id=\"u450f52b9\">limit</span></code><span data-lake-id=\"ua21a26db\" id=\"ua21a26db\"> 个 </span><code data-lake-id=\"u4f14e9bb\" id=\"u4f14e9bb\"><span data-lake-id=\"uc55a8f52\" id=\"uc55a8f52\">promise</span></code><span data-lake-id=\"ud066e94f\" id=\"ud066e94f\"> 实例的执行结果</span></li><li fid=\"u9767be16\" data-lake-id=\"ub526d893\" id=\"ub526d893\"><span data-lake-id=\"u48157a19\" id=\"u48157a19\">一旦某一个 </span><code data-lake-id=\"uc7e40529\" id=\"uc7e40529\"><span data-lake-id=\"u99b7c568\" id=\"u99b7c568\">promise</span></code><span data-lake-id=\"u9786632d\" id=\"u9786632d\"> 的状态发生变更，就将其从 </span><code data-lake-id=\"ud58efc08\" id=\"ud58efc08\"><span data-lake-id=\"ue14f7b27\" id=\"ue14f7b27\">executing</span></code><span data-lake-id=\"ua697d5a6\" id=\"ua697d5a6\"> 中删除，然后再执行循环生成新的 </span><code data-lake-id=\"uef2a178d\" id=\"uef2a178d\"><span data-lake-id=\"uefb10b23\" id=\"uefb10b23\">promise</span></code><span data-lake-id=\"u55f7c28a\" id=\"u55f7c28a\">，放入 </span><code data-lake-id=\"u209a25c5\" id=\"u209a25c5\"><span data-lake-id=\"u5f7317fd\" id=\"u5f7317fd\">executing</span></code><span data-lake-id=\"u3551ee5b\" id=\"u3551ee5b\"> 中</span></li><li fid=\"u9767be16\" data-lake-id=\"ub6605f2e\" id=\"ub6605f2e\"><span data-lake-id=\"u9cd49937\" id=\"u9cd49937\">重复 2、3 两个步骤，直到所有的 </span><code data-lake-id=\"ua171d978\" id=\"ua171d978\"><span data-lake-id=\"uc3d6e3e5\" id=\"uc3d6e3e5\">promise</span></code><span data-lake-id=\"u71e34416\" id=\"u71e34416\"> 都被执行完</span></li><li fid=\"u9767be16\" data-lake-id=\"u207f780a\" id=\"u207f780a\"><span data-lake-id=\"ue0e2baaf\" id=\"ue0e2baaf\">最后使用 </span><code data-lake-id=\"ubd4bb3e6\" id=\"ubd4bb3e6\"><span data-lake-id=\"u5483a7d7\" id=\"u5483a7d7\">Promise.all</span></code><span data-lake-id=\"u856448ed\" id=\"u856448ed\"> 返回所有 </span><code data-lake-id=\"u466f5537\" id=\"u466f5537\"><span data-lake-id=\"uc5da67a0\" id=\"uc5da67a0\">promise</span></code><span data-lake-id=\"u7e2999d4\" id=\"u7e2999d4\"> 实例的执行结果</span></li></ol><h3 data-lake-id=\"Q0xPD\" id=\"Q0xPD\"><span data-lake-id=\"u4528b059\" id=\"u4528b059\">es6 实现</span></h3><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22function%20asyncPool(poolLimit%2C%20array%2C%20iteratorFn)%20%7B%5Cn%5Ctlet%20i%20%3D%200%5Cn%20%20const%20ret%20%3D%20%5B%5D%5Cn%20%20const%20executing%20%3D%20%5B%5D%5Cn%20%20const%20enqueue%20%3D%20function()%20%7B%5Cn%20%20%5Ctif%20(i%20%3D%3D%3D%20array.length)%20return%20Promise.resolve()%5Cn%20%20%20%20const%20item%20%3D%20array%5Bi%2B%2B%5D%5Cn%20%20%20%20const%20p%20%3D%20Promise.resolve().then(()%20%3D%3E%20iteratorFn(item%2C%20array))%5Cn%20%20%20%20ret.push(p)%5Cn%20%20%20%20let%20r%20%3D%20Promise.resolve()%5Cn%20%20%20%20if%20(poolLimit%20%3C%3D%20array.length)%20%7B%5Cn%20%20%20%20%5Ctconst%20e%20%3D%20p.then(()%20%3D%3E%20executing.splice(executing.indexOf(e)%2C%201))%5Cn%20%20%20%20%20%20executing.push(e)%5Cn%20%20%20%20%20%20if%20(executing.length%20%3E%3D%20poolLimit)%20%7B%5Cn%20%20%20%20%20%20%5Ctr%20%3D%20Promise.race(executing)%5Cn%20%20%20%20%20%20%7D%5Cn%20%20%20%20%7D%5Cn%20%20%20%20return%20r.then(()%20%3D%3E%20enqueue())%5Cn%20%20%7D%5Cn%20%20return%20enqueue().then(()%20%3D%3E%20Promise.all(ret))%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22pypjS%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h3 data-lake-id=\"MhPML\" id=\"MhPML\"><span data-lake-id=\"u98d142c0\" id=\"u98d142c0\">es7 实现</span></h3><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22async%20function%20asyncPool(poolLimit%2C%20array%2C%20iteratorFn)%20%7B%5Cn%5Ctconst%20ret%20%3D%20%5B%5D%5Cn%20%20const%20executing%20%3D%20%5B%5D%5Cn%20%20for%20(const%20item%20of%20array)%20%7B%5Cn%20%20%5Ctconst%20p%20%3D%20Promise.resolve().then(()%20%3D%3E%20iteratorFn(item%2C%20array))%5Cn%20%20%20%20ret.push(p)%5Cn%20%20%20%20if%20(poolLimit%20%3C%3D%20array.length)%20%7B%5Cn%20%20%20%20%20%20%2F%2F%20then%20%E5%9B%9E%E8%B0%83%E4%B8%AD%EF%BC%8C%E5%BD%93%E8%BF%99%E4%B8%AA%20promise%20%E7%8A%B6%E6%80%81%E5%8F%98%E4%B8%BA%20fulfilled%20%E5%90%8E%EF%BC%8C%E5%B0%86%E5%85%B6%E4%BB%8E%E6%AD%A3%E5%9C%A8%E6%89%A7%E8%A1%8C%E7%9A%84%20promise%20%E5%88%97%E8%A1%A8%20executing%20%E4%B8%AD%E5%88%A0%E9%99%A4%5Cn%20%20%20%20%5Ctconst%20e%20%3D%20p.then(()%20%3D%3E%20executing.splice(executing.indexOf(e)%2C%201))%5Cn%20%20%20%20%20%20executing.push(e)%5Cn%20%20%20%20%20%20if%20(executing.length%20%3E%3D%20poolLimit)%20%7B%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E4%B8%80%E6%97%A6%E6%AD%A3%E5%9C%A8%E6%89%A7%E8%A1%8C%E7%9A%84%20promise%20%E5%88%97%E8%A1%A8%E6%95%B0%E9%87%8F%E7%AD%89%E4%BA%8E%E9%99%90%E5%88%B6%E6%95%B0%EF%BC%8C%E5%B0%B1%E4%BD%BF%E7%94%A8%20Promise.race%20%E7%AD%89%E5%BE%85%E6%9F%90%E4%B8%80%E4%B8%AA%20promise%20%E7%8A%B6%E6%80%81%E5%8F%91%E7%94%9F%E5%8F%98%E6%9B%B4%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E7%8A%B6%E6%80%81%E5%8F%98%E6%9B%B4%E5%90%8E%EF%BC%8C%E5%B0%B1%E4%BC%9A%E6%89%A7%E8%A1%8C%E4%B8%8A%E9%9D%A2%20then%20%E7%9A%84%E5%9B%9E%E8%B0%83%EF%BC%8C%E5%B0%86%E8%AF%A5%20promise%20%E4%BB%8E%20executing%20%E4%B8%AD%E5%88%A0%E9%99%A4%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E7%84%B6%E5%90%8E%E5%86%8D%E8%BF%9B%E5%85%A5%E5%88%B0%E4%B8%8B%E4%B8%80%E6%AC%A1%20for%20%E5%BE%AA%E7%8E%AF%EF%BC%8C%E7%94%9F%E6%88%90%E6%96%B0%E7%9A%84%20promise%20%E8%BF%9B%E8%A1%8C%E8%A1%A5%E5%85%85%5Cn%20%20%20%20%20%20%5Ctawait%20Promise.race(executing)%5Cn%20%20%20%20%20%20%7D%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%20%20return%20Promise.all(ret)%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22gIdvD%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"uf8cb5711\" id=\"uf8cb5711\"><br></p><p data-lake-id=\"u8e91f9cc\" id=\"u8e91f9cc\"><br></p>",
  "public": 0,
  "status": 1,
  "likes_count": 0,
  "read_count": 0,
  "hits": 0,
  "comments_count": 0,
  "word_count": 588,
  "created_at": "2022-05-11T15:01:47.000Z",
  "updated_at": "2022-05-11T15:08:07.000Z",
  "content_updated_at": "2022-05-11T15:01:47.000Z",
  "published_at": "2022-05-11T15:01:47.000Z",
  "first_published_at": "2022-05-11T15:01:46.561Z",
  "book": {
    "id": 27818302,
    "type": "Book",
    "slug": "pgkpvh",
    "name": "前端面试知识梳理",
    "user_id": 732231,
    "description": "",
    "toc_yml": "- type: META\n  count: 74\n  display_level: 1\n  tail_type: UPDATED_AT\n  base_version_id: 203636985\n  published: true\n  max_level: 1\n  last_updated_at: 2022-05-11T15:02:51.310Z\n  version_id: 203637675\n- type: TITLE\n  title: 基础 api 实现\n  uuid: 8cOHMB0GUaMGEJAZ\n  url: ''\n  prev_uuid: ''\n  sibling_uuid: XzzPhY1bnt-jy6Uq\n  child_uuid: tkSYK-Ar5LWNbwCs\n  parent_uuid: ''\n  doc_id: ''\n  level: 0\n  id: ''\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 实现 es6 的 extends\n  uuid: tkSYK-Ar5LWNbwCs\n  url: vtqbgk\n  prev_uuid: 8cOHMB0GUaMGEJAZ\n  sibling_uuid: iZbjvIrZWQPncGf4\n  child_uuid: ''\n  parent_uuid: 8cOHMB0GUaMGEJAZ\n  doc_id: 77021830\n  level: 1\n  id: 77021830\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 实现 ajax\n  uuid: iZbjvIrZWQPncGf4\n  url: cq5ws4\n  prev_uuid: tkSYK-Ar5LWNbwCs\n  sibling_uuid: GQ98GFTcsA6oX5fu\n  child_uuid: ''\n  parent_uuid: 8cOHMB0GUaMGEJAZ\n  doc_id: 77021696\n  level: 1\n  id: 77021696\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 实现 call、apply、bind\n  uuid: GQ98GFTcsA6oX5fu\n  url: ybrsyw\n  prev_uuid: iZbjvIrZWQPncGf4\n  sibling_uuid: 8mxtq-HrdjGBfE1K\n  child_uuid: ''\n  parent_uuid: 8cOHMB0GUaMGEJAZ\n  doc_id: 77021715\n  level: 1\n  id: 77021715\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 实现 new 关键字\n  uuid: 8mxtq-HrdjGBfE1K\n  url: pldu2b\n  prev_uuid: GQ98GFTcsA6oX5fu\n  sibling_uuid: DTHsD8sppgSTGUG-\n  child_uuid: ''\n  parent_uuid: 8cOHMB0GUaMGEJAZ\n  doc_id: 77021706\n  level: 1\n  id: 77021706\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 函数柯理化\n  uuid: DTHsD8sppgSTGUG-\n  url: yo9cx5\n  prev_uuid: 8mxtq-HrdjGBfE1K\n  sibling_uuid: TaRHTWpqD3Ef8QHU\n  child_uuid: ''\n  parent_uuid: 8cOHMB0GUaMGEJAZ\n  doc_id: 77021634\n  level: 1\n  id: 77021634\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 浅拷贝和深拷贝\n  uuid: TaRHTWpqD3Ef8QHU\n  url: ufks1z\n  prev_uuid: DTHsD8sppgSTGUG-\n  sibling_uuid: 4Z30CA9ZXVdeKnnL\n  child_uuid: ''\n  parent_uuid: 8cOHMB0GUaMGEJAZ\n  doc_id: 77021640\n  level: 1\n  id: 77021640\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 实现 instanceof\n  uuid: 4Z30CA9ZXVdeKnnL\n  url: ba4wuo\n  prev_uuid: TaRHTWpqD3Ef8QHU\n  sibling_uuid: 2MBif8wnmvigRAxT\n  child_uuid: ''\n  parent_uuid: 8cOHMB0GUaMGEJAZ\n  doc_id: 77021689\n  level: 1\n  id: 77021689\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 手动实现定时器\n  uuid: 2MBif8wnmvigRAxT\n  url: wf9bwg\n  prev_uuid: 4Z30CA9ZXVdeKnnL\n  sibling_uuid: 8f6jGaWidUBFSNN7\n  child_uuid: ''\n  parent_uuid: 8cOHMB0GUaMGEJAZ\n  doc_id: 77021645\n  level: 1\n  id: 77021645\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: sleep 函数实现\n  uuid: 8f6jGaWidUBFSNN7\n  url: ngwrak\n  prev_uuid: 2MBif8wnmvigRAxT\n  sibling_uuid: lXeuN-kwl51AKTO0\n  child_uuid: ''\n  parent_uuid: 8cOHMB0GUaMGEJAZ\n  doc_id: 77021787\n  level: 1\n  id: 77021787\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 实现 JSON.stringify\n  uuid: lXeuN-kwl51AKTO0\n  url: mtoe2n\n  prev_uuid: 8f6jGaWidUBFSNN7\n  sibling_uuid: hVvT5-pJ5qVvYNrK\n  child_uuid: ''\n  parent_uuid: 8cOHMB0GUaMGEJAZ\n  doc_id: 77021785\n  level: 1\n  id: 77021785\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: js 通用类型获取\n  uuid: hVvT5-pJ5qVvYNrK\n  url: tll6lm\n  prev_uuid: lXeuN-kwl51AKTO0\n  sibling_uuid: ''\n  child_uuid: ''\n  parent_uuid: 8cOHMB0GUaMGEJAZ\n  doc_id: 77021802\n  level: 1\n  id: 77021802\n  open_window: 0\n  visible: 1\n- type: TITLE\n  title: 防抖和节流\n  uuid: XzzPhY1bnt-jy6Uq\n  url: ''\n  prev_uuid: 8cOHMB0GUaMGEJAZ\n  sibling_uuid: PkyQAjgp1TOfRd_2\n  child_uuid: AQvBtgwRPd2U2nSA\n  parent_uuid: ''\n  doc_id: ''\n  level: 0\n  id: ''\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 防抖\n  uuid: AQvBtgwRPd2U2nSA\n  url: enlngv\n  prev_uuid: XzzPhY1bnt-jy6Uq\n  sibling_uuid: nlhlSMjYGwG8o1jH\n  child_uuid: ''\n  parent_uuid: XzzPhY1bnt-jy6Uq\n  doc_id: 77021614\n  level: 1\n  id: 77021614\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 节流\n  uuid: nlhlSMjYGwG8o1jH\n  url: griz0t\n  prev_uuid: AQvBtgwRPd2U2nSA\n  sibling_uuid: ''\n  child_uuid: ''\n  parent_uuid: XzzPhY1bnt-jy6Uq\n  doc_id: 77021626\n  level: 1\n  id: 77021626\n  open_window: 0\n  visible: 1\n- type: TITLE\n  title: 数组相关\n  uuid: PkyQAjgp1TOfRd_2\n  url: ''\n  prev_uuid: XzzPhY1bnt-jy6Uq\n  sibling_uuid: 5NjAYoIgV-DfXemF\n  child_uuid: xTSsZIKFI9Di3LBH\n  parent_uuid: ''\n  doc_id: ''\n  level: 0\n  id: ''\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 数组转树\n  uuid: xTSsZIKFI9Di3LBH\n  url: bzgequ\n  prev_uuid: PkyQAjgp1TOfRd_2\n  sibling_uuid: Z_6uIAB9XA6raQPD\n  child_uuid: ''\n  parent_uuid: PkyQAjgp1TOfRd_2\n  doc_id: 77021833\n  level: 1\n  id: 77021833\n  open_window: 0\n  visible: 0\n- type: DOC\n  title: 树转数组\n  uuid: Z_6uIAB9XA6raQPD\n  url: xycpzl\n  prev_uuid: xTSsZIKFI9Di3LBH\n  sibling_uuid: hoLauQ33F3aF2wq7\n  child_uuid: ''\n  parent_uuid: PkyQAjgp1TOfRd_2\n  doc_id: 77021835\n  level: 1\n  id: 77021835\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 数组常用方法\n  uuid: hoLauQ33F3aF2wq7\n  url: owtewn\n  prev_uuid: Z_6uIAB9XA6raQPD\n  sibling_uuid: rvc_A-WMsWds7EBa\n  child_uuid: ''\n  parent_uuid: PkyQAjgp1TOfRd_2\n  doc_id: 77021725\n  level: 1\n  id: 77021725\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 数组去重实现\n  uuid: rvc_A-WMsWds7EBa\n  url: gq2z9n\n  prev_uuid: hoLauQ33F3aF2wq7\n  sibling_uuid: NB4bY-etxMWq1YWS\n  child_uuid: ''\n  parent_uuid: PkyQAjgp1TOfRd_2\n  doc_id: 77021623\n  level: 1\n  id: 77021623\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 数组扁平化实现\n  uuid: NB4bY-etxMWq1YWS\n  url: doeryg\n  prev_uuid: rvc_A-WMsWds7EBa\n  sibling_uuid: DBoiy0L7Hhm_Zrkf\n  child_uuid: ''\n  parent_uuid: PkyQAjgp1TOfRd_2\n  doc_id: 77021607\n  level: 1\n  id: 77021607\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 类数组转换为数组\n  uuid: DBoiy0L7Hhm_Zrkf\n  url: csgagn\n  prev_uuid: NB4bY-etxMWq1YWS\n  sibling_uuid: E4WkD_rpaai_v3HK\n  child_uuid: ''\n  parent_uuid: PkyQAjgp1TOfRd_2\n  doc_id: 77021754\n  level: 1\n  id: 77021754\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 实现数组乱序输出\n  uuid: E4WkD_rpaai_v3HK\n  url: xlrgnu\n  prev_uuid: DBoiy0L7Hhm_Zrkf\n  sibling_uuid: OkcuvyhOMA6N0ex4\n  child_uuid: ''\n  parent_uuid: PkyQAjgp1TOfRd_2\n  doc_id: 77021731\n  level: 1\n  id: 77021731\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 查找二维数组的目标值\n  uuid: OkcuvyhOMA6N0ex4\n  url: tmw2ny\n  prev_uuid: E4WkD_rpaai_v3HK\n  sibling_uuid: F8K4-6VRqHrupctd\n  child_uuid: ''\n  parent_uuid: PkyQAjgp1TOfRd_2\n  doc_id: 77021789\n  level: 1\n  id: 77021789\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 二维数组斜向打印\n  uuid: F8K4-6VRqHrupctd\n  url: aqw6my\n  prev_uuid: OkcuvyhOMA6N0ex4\n  sibling_uuid: ''\n  child_uuid: ''\n  parent_uuid: PkyQAjgp1TOfRd_2\n  doc_id: 77021780\n  level: 1\n  id: 77021780\n  open_window: 0\n  visible: 1\n- type: TITLE\n  title: 字符串相关\n  uuid: 5NjAYoIgV-DfXemF\n  url: ''\n  prev_uuid: PkyQAjgp1TOfRd_2\n  sibling_uuid: Q34_kLhQ_uWoQw46\n  child_uuid: XNjX12HqmJBUHjy7\n  parent_uuid: ''\n  doc_id: ''\n  level: 0\n  id: ''\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 实现字符串的 repeat 方法\n  uuid: XNjX12HqmJBUHjy7\n  url: hxelqc\n  prev_uuid: 5NjAYoIgV-DfXemF\n  sibling_uuid: ''\n  child_uuid: ''\n  parent_uuid: 5NjAYoIgV-DfXemF\n  doc_id: 77021740\n  level: 1\n  id: 77021740\n  open_window: 0\n  visible: 1\n- type: TITLE\n  title: promise相关\n  uuid: Q34_kLhQ_uWoQw46\n  url: ''\n  prev_uuid: 5NjAYoIgV-DfXemF\n  sibling_uuid: aXqdYGJNJ1HlijwX\n  child_uuid: fuTj4su1VjBeHDO5\n  parent_uuid: ''\n  doc_id: ''\n  level: 0\n  id: ''\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 实现 Promise A+\n  uuid: fuTj4su1VjBeHDO5\n  url: fl6cgx\n  prev_uuid: Q34_kLhQ_uWoQw46\n  sibling_uuid: IOPLb2N42d3OZ0Zq\n  child_uuid: ''\n  parent_uuid: Q34_kLhQ_uWoQw46\n  doc_id: 77021620\n  level: 1\n  id: 77021620\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: Promise  常用方法实现\n  uuid: IOPLb2N42d3OZ0Zq\n  url: vd2h4l\n  prev_uuid: fuTj4su1VjBeHDO5\n  sibling_uuid: vKLkkDq-XoJwsqMW\n  child_uuid: ''\n  parent_uuid: Q34_kLhQ_uWoQw46\n  doc_id: 77021632\n  level: 1\n  id: 77021632\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: Promise 并发控制\n  uuid: vKLkkDq-XoJwsqMW\n  url: gd3193\n  prev_uuid: IOPLb2N42d3OZ0Zq\n  sibling_uuid: rYJ2dherst1MyK0I\n  child_uuid: ''\n  parent_uuid: Q34_kLhQ_uWoQw46\n  doc_id: 77021662\n  level: 1\n  id: 77021662\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: Promise 缓存\n  uuid: rYJ2dherst1MyK0I\n  url: sgcusf\n  prev_uuid: vKLkkDq-XoJwsqMW\n  sibling_uuid: xZ5UrxtCjhBJxiXK\n  child_uuid: ''\n  parent_uuid: Q34_kLhQ_uWoQw46\n  doc_id: 77021679\n  level: 1\n  id: 77021679\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 异步串行输出\n  uuid: xZ5UrxtCjhBJxiXK\n  url: um4g6z\n  prev_uuid: rYJ2dherst1MyK0I\n  sibling_uuid: fZuICDZLsFJSo57b\n  child_uuid: ''\n  parent_uuid: Q34_kLhQ_uWoQw46\n  doc_id: 77021649\n  level: 1\n  id: 77021649\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 带并发的异步调度器 Scheduler\n  uuid: fZuICDZLsFJSo57b\n  url: kbkc8e\n  prev_uuid: xZ5UrxtCjhBJxiXK\n  sibling_uuid: ''\n  child_uuid: ''\n  parent_uuid: Q34_kLhQ_uWoQw46\n  doc_id: 77021700\n  level: 1\n  id: 77021700\n  open_window: 0\n  visible: 1\n- type: TITLE\n  title: 数据处理\n  uuid: aXqdYGJNJ1HlijwX\n  url: ''\n  prev_uuid: Q34_kLhQ_uWoQw46\n  sibling_uuid: oj23-2V9egz1L0Ic\n  child_uuid: SxxBIhY4HFEaNF8V\n  parent_uuid: ''\n  doc_id: ''\n  level: 0\n  id: ''\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 解析 url 参数对象\n  uuid: SxxBIhY4HFEaNF8V\n  url: rxw8qp\n  prev_uuid: aXqdYGJNJ1HlijwX\n  sibling_uuid: yiD9ldSpBGzQNQxQ\n  child_uuid: ''\n  parent_uuid: aXqdYGJNJ1HlijwX\n  doc_id: 77021764\n  level: 1\n  id: 77021764\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 实现日期格式化函数\n  uuid: yiD9ldSpBGzQNQxQ\n  url: shzfyg\n  prev_uuid: SxxBIhY4HFEaNF8V\n  sibling_uuid: _3QVaw5COwwvCXZv\n  child_uuid: ''\n  parent_uuid: aXqdYGJNJ1HlijwX\n  doc_id: 77021710\n  level: 1\n  id: 77021710\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 交换 a、b 的值，不使用临时变量\n  uuid: _3QVaw5COwwvCXZv\n  url: xw17tv\n  prev_uuid: yiD9ldSpBGzQNQxQ\n  sibling_uuid: Mq5fe2v7j2INDdvL\n  child_uuid: ''\n  parent_uuid: aXqdYGJNJ1HlijwX\n  doc_id: 77021736\n  level: 1\n  id: 77021736\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 获取两个数之间的任意随机数\n  uuid: Mq5fe2v7j2INDdvL\n  url: vhngph\n  prev_uuid: _3QVaw5COwwvCXZv\n  sibling_uuid: 8Chl_bOMaALA1jhP\n  child_uuid: ''\n  parent_uuid: aXqdYGJNJ1HlijwX\n  doc_id: 77021688\n  level: 1\n  id: 77021688\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 将数字千分位用逗号隔开\n  uuid: 8Chl_bOMaALA1jhP\n  url: vphpea\n  prev_uuid: Mq5fe2v7j2INDdvL\n  sibling_uuid: MLI7v9Et4dIn7XiV\n  child_uuid: ''\n  parent_uuid: aXqdYGJNJ1HlijwX\n  doc_id: 77021743\n  level: 1\n  id: 77021743\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 实现非负大整数相加\n  uuid: MLI7v9Et4dIn7XiV\n  url: xlvd0g\n  prev_uuid: 8Chl_bOMaALA1jhP\n  sibling_uuid: mVWcb08QaDpa9PNH\n  child_uuid: ''\n  parent_uuid: aXqdYGJNJ1HlijwX\n  doc_id: 77021748\n  level: 1\n  id: 77021748\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 判断对象是否存在循环引用\n  uuid: mVWcb08QaDpa9PNH\n  url: phqdmd\n  prev_uuid: MLI7v9Et4dIn7XiV\n  sibling_uuid: ''\n  child_uuid: ''\n  parent_uuid: aXqdYGJNJ1HlijwX\n  doc_id: 77021768\n  level: 1\n  id: 77021768\n  open_window: 0\n  visible: 1\n- type: TITLE\n  title: 框架\n  uuid: oj23-2V9egz1L0Ic\n  url: ''\n  prev_uuid: aXqdYGJNJ1HlijwX\n  sibling_uuid: BTeDPodj0NU8fRW3\n  child_uuid: t5HRubL3aXPLNoG6\n  parent_uuid: ''\n  doc_id: ''\n  level: 0\n  id: ''\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 发布订阅模式\n  uuid: t5HRubL3aXPLNoG6\n  url: ezcdgo\n  prev_uuid: oj23-2V9egz1L0Ic\n  sibling_uuid: EqMT4jazWkuKJX1v\n  child_uuid: ''\n  parent_uuid: oj23-2V9egz1L0Ic\n  doc_id: 77021611\n  level: 1\n  id: 77021611\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 观察者模式\n  uuid: EqMT4jazWkuKJX1v\n  url: dwziom\n  prev_uuid: t5HRubL3aXPLNoG6\n  sibling_uuid: O5OEkYSpde-8we8V\n  child_uuid: ''\n  parent_uuid: oj23-2V9egz1L0Ic\n  doc_id: 77021795\n  level: 1\n  id: 77021795\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 简易版 vue2\n  uuid: O5OEkYSpde-8we8V\n  url: indxog\n  prev_uuid: EqMT4jazWkuKJX1v\n  sibling_uuid: XOQaAmtLM_gvM85t\n  child_uuid: ''\n  parent_uuid: oj23-2V9egz1L0Ic\n  doc_id: 77021636\n  level: 1\n  id: 77021636\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 简易版 vue3\n  uuid: XOQaAmtLM_gvM85t\n  url: an017i\n  prev_uuid: O5OEkYSpde-8we8V\n  sibling_uuid: ciSabdz5MTC1wbC7\n  child_uuid: ''\n  parent_uuid: oj23-2V9egz1L0Ic\n  doc_id: 77021804\n  level: 1\n  id: 77021804\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 简易版 vuex\n  uuid: ciSabdz5MTC1wbC7\n  url: myzomg\n  prev_uuid: XOQaAmtLM_gvM85t\n  sibling_uuid: ''\n  child_uuid: ''\n  parent_uuid: oj23-2V9egz1L0Ic\n  doc_id: 77021704\n  level: 1\n  id: 77021704\n  open_window: 0\n  visible: 1\n- type: TITLE\n  title: 应用场景\n  uuid: BTeDPodj0NU8fRW3\n  url: ''\n  prev_uuid: oj23-2V9egz1L0Ic\n  sibling_uuid: KKJ-BzUK3K9FxUJ2\n  child_uuid: U1oF7BfjBGNpWa79\n  parent_uuid: ''\n  doc_id: ''\n  level: 0\n  id: ''\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 通过调用 addRemote 实现 add\n  uuid: U1oF7BfjBGNpWa79\n  url: edff3s\n  prev_uuid: BTeDPodj0NU8fRW3\n  sibling_uuid: RMAn78BGFgyI8W6c\n  child_uuid: ''\n  parent_uuid: BTeDPodj0NU8fRW3\n  doc_id: 77021816\n  level: 1\n  id: 77021816\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 倒计时\n  uuid: RMAn78BGFgyI8W6c\n  url: uwleof\n  prev_uuid: U1oF7BfjBGNpWa79\n  sibling_uuid: aYlobR47xz0qHkhF\n  child_uuid: ''\n  parent_uuid: BTeDPodj0NU8fRW3\n  doc_id: 77021810\n  level: 1\n  id: 77021810\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 版本号比较\n  uuid: aYlobR47xz0qHkhF\n  url: cynvvd\n  prev_uuid: RMAn78BGFgyI8W6c\n  sibling_uuid: N0u_B_WnmtCeQwFI\n  child_uuid: ''\n  parent_uuid: BTeDPodj0NU8fRW3\n  doc_id: 77021792\n  level: 1\n  id: 77021792\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 实现简单路由\n  uuid: N0u_B_WnmtCeQwFI\n  url: zzc9k3\n  prev_uuid: aYlobR47xz0qHkhF\n  sibling_uuid: es8IUmiyOTWzwKa9\n  child_uuid: ''\n  parent_uuid: BTeDPodj0NU8fRW3\n  doc_id: 77021784\n  level: 1\n  id: 77021784\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 长列表虚拟滚动\n  uuid: es8IUmiyOTWzwKa9\n  url: wsmws7\n  prev_uuid: N0u_B_WnmtCeQwFI\n  sibling_uuid: yKn9f3BKX1S3tsyK\n  child_uuid: ''\n  parent_uuid: BTeDPodj0NU8fRW3\n  doc_id: 77021653\n  level: 1\n  id: 77021653\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 围圈报数问题\n  uuid: yKn9f3BKX1S3tsyK\n  url: gkoa19\n  prev_uuid: es8IUmiyOTWzwKa9\n  sibling_uuid: zmiKBP3HABO6Ig_9\n  child_uuid: ''\n  parent_uuid: BTeDPodj0NU8fRW3\n  doc_id: 77021761\n  level: 1\n  id: 77021761\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 查找文章中出现频率最高的词\n  uuid: zmiKBP3HABO6Ig_9\n  url: rln2y3\n  prev_uuid: yKn9f3BKX1S3tsyK\n  sibling_uuid: cDzdEkch3JypwTh2\n  child_uuid: ''\n  parent_uuid: BTeDPodj0NU8fRW3\n  doc_id: 77021772\n  level: 1\n  id: 77021772\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: Promise 每隔 1s 输出 1、2、3\n  uuid: cDzdEkch3JypwTh2\n  url: yg55el\n  prev_uuid: zmiKBP3HABO6Ig_9\n  sibling_uuid: II7sWIfm_eSWwKfq\n  child_uuid: ''\n  parent_uuid: BTeDPodj0NU8fRW3\n  doc_id: 77021821\n  level: 1\n  id: 77021821\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 循环打印红黄绿\n  uuid: II7sWIfm_eSWwKfq\n  url: wyhgfz\n  prev_uuid: cDzdEkch3JypwTh2\n  sibling_uuid: 0hKcnD9qnLeCTq4Q\n  child_uuid: ''\n  parent_uuid: BTeDPodj0NU8fRW3\n  doc_id: 77021776\n  level: 1\n  id: 77021776\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 封装一个异步加载图片的方法\n  uuid: 0hKcnD9qnLeCTq4Q\n  url: orxq0m\n  prev_uuid: II7sWIfm_eSWwKfq\n  sibling_uuid: b7lf8zlMeqorWGgi\n  child_uuid: ''\n  parent_uuid: BTeDPodj0NU8fRW3\n  doc_id: 77021825\n  level: 1\n  id: 77021825\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 实现 mergePromise 函数\n  uuid: b7lf8zlMeqorWGgi\n  url: apqplp\n  prev_uuid: 0hKcnD9qnLeCTq4Q\n  sibling_uuid: EZZ2GBqZ-B1LUsam\n  child_uuid: ''\n  parent_uuid: BTeDPodj0NU8fRW3\n  doc_id: 77021819\n  level: 1\n  id: 77021819\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 图片加载数量限制\n  uuid: EZZ2GBqZ-B1LUsam\n  url: xz2gy5\n  prev_uuid: b7lf8zlMeqorWGgi\n  sibling_uuid: '-8N7uf1xcBmFXSQI'\n  child_uuid: ''\n  parent_uuid: BTeDPodj0NU8fRW3\n  doc_id: 77021664\n  level: 1\n  id: 77021664\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 文本中识别敏感词、表情包、链接、数字、字母并高亮\n  uuid: '-8N7uf1xcBmFXSQI'\n  url: athu4p\n  prev_uuid: EZZ2GBqZ-B1LUsam\n  sibling_uuid: F_Fz97LW3aSxLLnr\n  child_uuid: ''\n  parent_uuid: BTeDPodj0NU8fRW3\n  doc_id: 77021666\n  level: 1\n  id: 77021666\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 图片格式转换为 webp\n  uuid: F_Fz97LW3aSxLLnr\n  url: cwlftq\n  prev_uuid: '-8N7uf1xcBmFXSQI'\n  sibling_uuid: wfz5QMLK_eAEtlFz\n  child_uuid: ''\n  parent_uuid: BTeDPodj0NU8fRW3\n  doc_id: 77021647\n  level: 1\n  id: 77021647\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 计算对象占用的字节数\n  uuid: wfz5QMLK_eAEtlFz\n  url: gx1y1y\n  prev_uuid: F_Fz97LW3aSxLLnr\n  sibling_uuid: rKjJYSK4ytL18T9L\n  child_uuid: ''\n  parent_uuid: BTeDPodj0NU8fRW3\n  doc_id: 77021669\n  level: 1\n  id: 77021669\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 给 xhr 添加 hook，实现在各个阶段打印日志\n  uuid: rKjJYSK4ytL18T9L\n  url: dm9n4g\n  prev_uuid: wfz5QMLK_eAEtlFz\n  sibling_uuid: zZADZWaE-olCAOjQ\n  child_uuid: ''\n  parent_uuid: BTeDPodj0NU8fRW3\n  doc_id: 77021658\n  level: 1\n  id: 77021658\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 明信片问题\n  uuid: zZADZWaE-olCAOjQ\n  url: mnsw3z\n  prev_uuid: rKjJYSK4ytL18T9L\n  sibling_uuid: ''\n  child_uuid: ''\n  parent_uuid: BTeDPodj0NU8fRW3\n  doc_id: 77021807\n  level: 1\n  id: 77021807\n  open_window: 0\n  visible: 1\n- type: TITLE\n  title: 常用算法实现\n  uuid: KKJ-BzUK3K9FxUJ2\n  url: ''\n  prev_uuid: BTeDPodj0NU8fRW3\n  sibling_uuid: ''\n  child_uuid: z8xQMUujFU-0OTsg\n  parent_uuid: ''\n  doc_id: ''\n  level: 0\n  id: ''\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 二分查找\n  uuid: z8xQMUujFU-0OTsg\n  url: pywta0\n  prev_uuid: KKJ-BzUK3K9FxUJ2\n  sibling_uuid: _b3VVGX3aAQ_rvuS\n  child_uuid: ''\n  parent_uuid: KKJ-BzUK3K9FxUJ2\n  doc_id: 77021798\n  level: 1\n  id: 77021798\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 排序\n  uuid: _b3VVGX3aAQ_rvuS\n  url: ivvld9\n  prev_uuid: z8xQMUujFU-0OTsg\n  sibling_uuid: eRQoWM79y_Mwbg2D\n  child_uuid: ''\n  parent_uuid: KKJ-BzUK3K9FxUJ2\n  doc_id: 77021670\n  level: 1\n  id: 77021670\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 动态规划和贪心算法\n  uuid: eRQoWM79y_Mwbg2D\n  url: pyig7m\n  prev_uuid: _b3VVGX3aAQ_rvuS\n  sibling_uuid: tr1DuV5ACUbyp8j-\n  child_uuid: ''\n  parent_uuid: KKJ-BzUK3K9FxUJ2\n  doc_id: 77021676\n  level: 1\n  id: 77021676\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 洗牌算法\n  uuid: tr1DuV5ACUbyp8j-\n  url: tohw0k\n  prev_uuid: eRQoWM79y_Mwbg2D\n  sibling_uuid: x9xEaoi_A59UZjS5\n  child_uuid: ''\n  parent_uuid: KKJ-BzUK3K9FxUJ2\n  doc_id: 77021687\n  level: 1\n  id: 77021687\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: LRU(最少置换算法)\n  uuid: x9xEaoi_A59UZjS5\n  url: tmwgql\n  prev_uuid: tr1DuV5ACUbyp8j-\n  sibling_uuid: XsgMUe05eXycAX93\n  child_uuid: ''\n  parent_uuid: KKJ-BzUK3K9FxUJ2\n  doc_id: 77021694\n  level: 1\n  id: 77021694\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 斐波那契数列\n  uuid: XsgMUe05eXycAX93\n  url: bq7f7e\n  prev_uuid: x9xEaoi_A59UZjS5\n  sibling_uuid: T0orOt1CWhzdAczU\n  child_uuid: ''\n  parent_uuid: KKJ-BzUK3K9FxUJ2\n  doc_id: 77021683\n  level: 1\n  id: 77021683\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 大数相加\n  uuid: T0orOt1CWhzdAczU\n  url: ln6fpo\n  prev_uuid: XsgMUe05eXycAX93\n  sibling_uuid: ''\n  child_uuid: ''\n  parent_uuid: KKJ-BzUK3K9FxUJ2\n  doc_id: 77021693\n  level: 1\n  id: 77021693\n  open_window: 0\n  visible: 1\n",
    "creator_id": 732231,
    "public": 0,
    "items_count": 65,
    "likes_count": 0,
    "watches_count": 1,
    "content_updated_at": "2023-01-06T09:17:32.188Z",
    "created_at": "2022-05-11T14:43:59.000Z",
    "updated_at": "2023-11-11T18:10:33.000Z",
    "user": {
      "id": 732231,
      "type": "User",
      "login": "wcywxq",
      "name": "magic",
      "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/732231/1606968271774-avatar/886ad88b-d2cc-4c9e-a674-f70eb51a679c.png",
      "books_count": 21,
      "public_books_count": 0,
      "followers_count": 0,
      "following_count": 0,
      "public": 1,
      "description": null,
      "created_at": "2020-01-08T14:21:31.000Z",
      "updated_at": "2023-11-23T19:11:28.000Z",
      "work_id": "",
      "_serializer": "v2.user"
    },
    "namespace": "wcywxq/pgkpvh",
    "_serializer": "v2.book"
  },
  "user": {
    "id": 732231,
    "type": "User",
    "login": "wcywxq",
    "name": "magic",
    "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/732231/1606968271774-avatar/886ad88b-d2cc-4c9e-a674-f70eb51a679c.png",
    "books_count": 21,
    "public_books_count": 0,
    "followers_count": 0,
    "following_count": 0,
    "public": 1,
    "description": null,
    "created_at": "2020-01-08T14:21:31.000Z",
    "updated_at": "2023-11-23T19:11:28.000Z",
    "work_id": "",
    "_serializer": "v2.user"
  },
  "tags": [],
  "latest_version_id": 984848885,
  "creator": {
    "id": 732231,
    "type": "User",
    "login": "wcywxq",
    "name": "magic",
    "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/732231/1606968271774-avatar/886ad88b-d2cc-4c9e-a674-f70eb51a679c.png",
    "books_count": 21,
    "public_books_count": 0,
    "followers_count": 0,
    "following_count": 0,
    "public": 1,
    "description": null,
    "created_at": "2020-01-08T14:21:31.000Z",
    "updated_at": "2023-11-23T19:11:28.000Z",
    "work_id": "",
    "_serializer": "v2.user"
  },
  "_serializer": "v2.doc_detail"
}