{
  "id": 77021700,
  "slug": "kbkc8e",
  "title": "带并发的异步调度器 Scheduler",
  "description": "/*   JS实现一个带并发限制的异步调度器Scheduler，保证同时运行的任务最多有两个。   完善下面代码的Scheduler类，使以下程序能够正常输出：   class Scheduler {     add(promiseCreator) { ... }     // ...   }...",
  "cover": "",
  "user_id": 732231,
  "book_id": 27818302,
  "last_editor_id": 732231,
  "format": "lake",
  "body_draft": "",
  "body": "```javascript\n/*\n  JS实现一个带并发限制的异步调度器Scheduler，保证同时运行的任务最多有两个。\n  完善下面代码的Scheduler类，使以下程序能够正常输出：\n  class Scheduler {\n    add(promiseCreator) { ... }\n    // ...\n  }\n\n  const timeout = time => {\n    return new Promise(resolve => {\n      setTimeout(resolve, time)\n    }\n  })\n\n  const scheduler = new Scheduler()\n\n  const addTask = (time,order) => {\n    scheduler.add(() => timeout(time).then(()=>console.log(order)))\n  }\n\n  addTask(1000, '1')\n  addTask(500, '2')\n  addTask(300, '3')\n  addTask(400, '4')\n\n  // output: 2 3 1 4\n  整个的完整执行流程：\n\n  起始1、2两个任务开始执行\n  500ms时，2任务执行完毕，输出2，任务3开始执行\n  800ms时，3任务执行完毕，输出3，任务4开始执行\n  1000ms时，1任务执行完毕，输出1，此时只剩下4任务在执行\n  1200ms时，4任务执行完毕，输出4\n*/\n```\n> \n> 实现一个带并发限制的异步调度器 Scheduler，保证同时运行的任务最多有两个\n\n\n:::info\n**解析**：看完题目之后，大概会这几个问题存在\n\n1. 如何才能保证同时只有2个任务在处于执行中？\n2. 当某个任务执行结束之后，下一步如何知道应该执行哪个任务？\n:::\n**问题1**：只需要用一个计数器来控制即可，每开始一个任务计数器+1，结束之后计数器-1，保证计数器一定<=2。<br />**问题2**：按照题目要求，任务的执行是有顺序的，只是任务的结束时间是不确定的，所以下一个任务一定是按照这样的顺序来\n> 任务1 => 任务2 => 任务3 => 任务4\n\n利用数组队列的性质，将任务挨个推入队列，前面的任务执行结束之后，将队首的任务取出来执行即可。\n```javascript\nclass Scheduler {\n  constructor () {\n    this.queue = []\n    this.maxCount = 2\n    this.runCount = 0\n  }\n  // promiseCreator执行后返回的是一个Promise\n  add(promiseCreator) {\n    // 小于等于2，直接执行\n    this.queue.push(promiseCreator)\n    // 每次添加的时候都会尝试去执行任务\n    this.runQueue()\n  }\n\n  runQueue () {\n    // 队列中还有任务才会被执行\n    if (this.queue.length && this.runCount < this.maxCount) {\n      // 执行先加入队列的函数\n      const promiseCreator = this.queue.shift()\n      // 开始执行任务 计数+1    \n      this.runCount += 1\n      // 假设任务都执行成功，当然也可以做一下catch\n      promiseCreator().then(() => {\n        // 任务执行完毕，计数-1\n        this.runCount -= 1\n        // 尝试进行下一次任务\n        this.runQueue()\n      })\n    }\n  }\n}\n   \nconst timeout = time => {\n  return new Promise(resolve => {\n    setTimeout(resolve, time)\n  })\n}\n  \nconst scheduler = new Scheduler()\n  \nconst addTask = (time,order) => {\n  scheduler.add(() => timeout(time).then(()=>console.log(order)))\n}\n\naddTask(1000, '1')\naddTask(500, '2')\naddTask(300, '3')\naddTask(400, '4')\n\n// 2\n// 3\n// 1\n// 4\n```\n\n- 另一种实现\n```javascript\nclass Scheduler {\n  constructor() {\n    this.waitTasks = []; // 待执行的任务队列\n    this.excutingTasks = []; // 正在执行的任务队列\n    this.maxExcutingNum = 2; // 允许同时运行的任务数量\n  }\n\n  add(promiseMaker) {\n    if (this.excutingTasks.length < this.maxExcutingNum) {\n      this.run(promiseMaker);\n    } else {\n      this.waitTasks.push(promiseMaker);\n    }\n  }\n\n  run(promiseMaker) {\n    const len = this.excutingTasks.push(promiseMaker);\n    const index = len - 1;\n    promiseMaker().then(() => {\n      this.excutingTasks.splice(index, 1);\n      if (this.waitTasks.length > 0) {\n        this.run(this.waitTasks.shift());\n      }\n    });\n  }\n}\n```\n\n",
  "body_html": "<!doctype html><pre data-lang=\"javascript\"><code>/*\n  JS实现一个带并发限制的异步调度器Scheduler，保证同时运行的任务最多有两个。\n  完善下面代码的Scheduler类，使以下程序能够正常输出：\n  class Scheduler {\n    add(promiseCreator) { ... }\n    // ...\n  }\n\n  const timeout = time =&gt; {\n    return new Promise(resolve =&gt; {\n      setTimeout(resolve, time)\n    }\n  })\n\n  const scheduler = new Scheduler()\n\n  const addTask = (time,order) =&gt; {\n    scheduler.add(() =&gt; timeout(time).then(()=&gt;console.log(order)))\n  }\n\n  addTask(1000, '1')\n  addTask(500, '2')\n  addTask(300, '3')\n  addTask(400, '4')\n\n  // output: 2 3 1 4\n  整个的完整执行流程：\n\n  起始1、2两个任务开始执行\n  500ms时，2任务执行完毕，输出2，任务3开始执行\n  800ms时，3任务执行完毕，输出3，任务4开始执行\n  1000ms时，1任务执行完毕，输出1，此时只剩下4任务在执行\n  1200ms时，4任务执行完毕，输出4\n*/</code></pre><blockquote><p data-lake-id=\"u144f4b90\"><span>​</span><br /></p><p data-lake-id=\"u96f7bc99\"><span>实现一个带并发限制的异步调度器 Scheduler，保证同时运行的任务最多有两个</span></p></blockquote><p data-lake-id=\"u04c1b8d5\"><span>​</span><br /></p><blockquote class=\"lake-alert lake-alert-info\"><p data-lake-id=\"u41a0c652\"><strong><span>解析</span></strong><span>：看完题目之后，大概会这几个问题存在</span></p><ol><li><span>如何才能保证同时只有2个任务在处于执行中？</span></li><li><span>当某个任务执行结束之后，下一步如何知道应该执行哪个任务？</span></li></ol></blockquote><p data-lake-id=\"u256118a6\"><strong><span>问题1</span></strong><span>：只需要用一个计数器来控制即可，每开始一个任务计数器+1，结束之后计数器-1，保证计数器一定&lt;=2。</span></p><p data-lake-id=\"u2ed3ea9d\"><strong><span>问题2</span></strong><span>：按照题目要求，任务的执行是有顺序的，只是任务的结束时间是不确定的，所以下一个任务一定是按照这样的顺序来</span></p><blockquote><p data-lake-id=\"u319ed407\"><span>任务1 =&gt; 任务2 =&gt; 任务3 =&gt; 任务4</span></p></blockquote><p data-lake-id=\"u0dc3c5f8\"><span>利用数组队列的性质，将任务挨个推入队列，前面的任务执行结束之后，将队首的任务取出来执行即可。</span></p><pre data-lang=\"javascript\"><code>class Scheduler {\n  constructor () {\n    this.queue = []\n    this.maxCount = 2\n    this.runCount = 0\n  }\n  // promiseCreator执行后返回的是一个Promise\n  add(promiseCreator) {\n    // 小于等于2，直接执行\n    this.queue.push(promiseCreator)\n    // 每次添加的时候都会尝试去执行任务\n    this.runQueue()\n  }\n\n  runQueue () {\n    // 队列中还有任务才会被执行\n    if (this.queue.length &amp;&amp; this.runCount &lt; this.maxCount) {\n      // 执行先加入队列的函数\n      const promiseCreator = this.queue.shift()\n      // 开始执行任务 计数+1    \n      this.runCount += 1\n      // 假设任务都执行成功，当然也可以做一下catch\n      promiseCreator().then(() =&gt; {\n        // 任务执行完毕，计数-1\n        this.runCount -= 1\n        // 尝试进行下一次任务\n        this.runQueue()\n      })\n    }\n  }\n}\n   \nconst timeout = time =&gt; {\n  return new Promise(resolve =&gt; {\n    setTimeout(resolve, time)\n  })\n}\n  \nconst scheduler = new Scheduler()\n  \nconst addTask = (time,order) =&gt; {\n  scheduler.add(() =&gt; timeout(time).then(()=&gt;console.log(order)))\n}\n\naddTask(1000, '1')\naddTask(500, '2')\naddTask(300, '3')\naddTask(400, '4')\n\n// 2\n// 3\n// 1\n// 4</code></pre><ul><li><span>另一种实现</span></li></ul><pre data-lang=\"javascript\"><code>class Scheduler {\n  constructor() {\n    this.waitTasks = []; // 待执行的任务队列\n    this.excutingTasks = []; // 正在执行的任务队列\n    this.maxExcutingNum = 2; // 允许同时运行的任务数量\n  }\n\n  add(promiseMaker) {\n    if (this.excutingTasks.length &lt; this.maxExcutingNum) {\n      this.run(promiseMaker);\n    } else {\n      this.waitTasks.push(promiseMaker);\n    }\n  }\n\n  run(promiseMaker) {\n    const len = this.excutingTasks.push(promiseMaker);\n    const index = len - 1;\n    promiseMaker().then(() =&gt; {\n      this.excutingTasks.splice(index, 1);\n      if (this.waitTasks.length &gt; 0) {\n        this.run(this.waitTasks.shift());\n      }\n    });\n  }\n}</code></pre><p data-lake-id=\"u8288ac46\"><br /></p>",
  "body_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"viewport\" content=\"adapt\" /><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F*%5Cn%20%20JS%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E5%B8%A6%E5%B9%B6%E5%8F%91%E9%99%90%E5%88%B6%E7%9A%84%E5%BC%82%E6%AD%A5%E8%B0%83%E5%BA%A6%E5%99%A8Scheduler%EF%BC%8C%E4%BF%9D%E8%AF%81%E5%90%8C%E6%97%B6%E8%BF%90%E8%A1%8C%E7%9A%84%E4%BB%BB%E5%8A%A1%E6%9C%80%E5%A4%9A%E6%9C%89%E4%B8%A4%E4%B8%AA%E3%80%82%5Cn%20%20%E5%AE%8C%E5%96%84%E4%B8%8B%E9%9D%A2%E4%BB%A3%E7%A0%81%E7%9A%84Scheduler%E7%B1%BB%EF%BC%8C%E4%BD%BF%E4%BB%A5%E4%B8%8B%E7%A8%8B%E5%BA%8F%E8%83%BD%E5%A4%9F%E6%AD%A3%E5%B8%B8%E8%BE%93%E5%87%BA%EF%BC%9A%5Cn%20%20class%20Scheduler%20%7B%5Cn%20%20%20%20add(promiseCreator)%20%7B%20...%20%7D%5Cn%20%20%20%20%2F%2F%20...%5Cn%20%20%7D%5Cn%5Cn%20%20const%20timeout%20%3D%20time%20%3D%3E%20%7B%5Cn%20%20%20%20return%20new%20Promise(resolve%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20setTimeout(resolve%2C%20time)%5Cn%20%20%20%20%7D%5Cn%20%20%7D)%5Cn%5Cn%20%20const%20scheduler%20%3D%20new%20Scheduler()%5Cn%5Cn%20%20const%20addTask%20%3D%20(time%2Corder)%20%3D%3E%20%7B%5Cn%20%20%20%20scheduler.add(()%20%3D%3E%20timeout(time).then(()%3D%3Econsole.log(order)))%5Cn%20%20%7D%5Cn%5Cn%20%20addTask(1000%2C%20'1')%5Cn%20%20addTask(500%2C%20'2')%5Cn%20%20addTask(300%2C%20'3')%5Cn%20%20addTask(400%2C%20'4')%5Cn%5Cn%20%20%2F%2F%20output%3A%202%203%201%204%5Cn%20%20%E6%95%B4%E4%B8%AA%E7%9A%84%E5%AE%8C%E6%95%B4%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B%EF%BC%9A%5Cn%5Cn%20%20%E8%B5%B7%E5%A7%8B1%E3%80%812%E4%B8%A4%E4%B8%AA%E4%BB%BB%E5%8A%A1%E5%BC%80%E5%A7%8B%E6%89%A7%E8%A1%8C%5Cn%20%20500ms%E6%97%B6%EF%BC%8C2%E4%BB%BB%E5%8A%A1%E6%89%A7%E8%A1%8C%E5%AE%8C%E6%AF%95%EF%BC%8C%E8%BE%93%E5%87%BA2%EF%BC%8C%E4%BB%BB%E5%8A%A13%E5%BC%80%E5%A7%8B%E6%89%A7%E8%A1%8C%5Cn%20%20800ms%E6%97%B6%EF%BC%8C3%E4%BB%BB%E5%8A%A1%E6%89%A7%E8%A1%8C%E5%AE%8C%E6%AF%95%EF%BC%8C%E8%BE%93%E5%87%BA3%EF%BC%8C%E4%BB%BB%E5%8A%A14%E5%BC%80%E5%A7%8B%E6%89%A7%E8%A1%8C%5Cn%20%201000ms%E6%97%B6%EF%BC%8C1%E4%BB%BB%E5%8A%A1%E6%89%A7%E8%A1%8C%E5%AE%8C%E6%AF%95%EF%BC%8C%E8%BE%93%E5%87%BA1%EF%BC%8C%E6%AD%A4%E6%97%B6%E5%8F%AA%E5%89%A9%E4%B8%8B4%E4%BB%BB%E5%8A%A1%E5%9C%A8%E6%89%A7%E8%A1%8C%5Cn%20%201200ms%E6%97%B6%EF%BC%8C4%E4%BB%BB%E5%8A%A1%E6%89%A7%E8%A1%8C%E5%AE%8C%E6%AF%95%EF%BC%8C%E8%BE%93%E5%87%BA4%5Cn*%2F%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22xVOdN%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><blockquote data-lake-id=\"u7ebed3b3\" id=\"u7ebed3b3\"><p data-lake-id=\"u144f4b90\" id=\"u144f4b90\"><span data-lake-id=\"ub90f4055\" id=\"ub90f4055\">​</span><br></p><p data-lake-id=\"u96f7bc99\" id=\"u96f7bc99\"><span data-lake-id=\"u09d6de56\" id=\"u09d6de56\">实现一个带并发限制的异步调度器 Scheduler，保证同时运行的任务最多有两个</span></p></blockquote><p data-lake-id=\"u04c1b8d5\" id=\"u04c1b8d5\"><span data-lake-id=\"u9fe69a7b\" id=\"u9fe69a7b\">​</span><br></p><blockquote data-lake-id=\"u2f4e5ce3\" id=\"u2f4e5ce3\" class=\"lake-alert lake-alert-info\"><p data-lake-id=\"u41a0c652\" id=\"u41a0c652\"><strong><span data-lake-id=\"uac0d0662\" id=\"uac0d0662\">解析</span></strong><span data-lake-id=\"uc5e7ff9e\" id=\"uc5e7ff9e\">：看完题目之后，大概会这几个问题存在</span></p><ol list=\"u62717de1\"><li fid=\"u282a922d\" data-lake-id=\"u837028a8\" id=\"u837028a8\"><span data-lake-id=\"ub88f9bfc\" id=\"ub88f9bfc\">如何才能保证同时只有2个任务在处于执行中？</span></li><li fid=\"u282a922d\" data-lake-id=\"uebb55f83\" id=\"uebb55f83\"><span data-lake-id=\"u594dddce\" id=\"u594dddce\">当某个任务执行结束之后，下一步如何知道应该执行哪个任务？</span></li></ol></blockquote><p data-lake-id=\"u256118a6\" id=\"u256118a6\"><strong><span data-lake-id=\"uc21d22a3\" id=\"uc21d22a3\">问题1</span></strong><span data-lake-id=\"ua6a6910e\" id=\"ua6a6910e\">：只需要用一个计数器来控制即可，每开始一个任务计数器+1，结束之后计数器-1，保证计数器一定&lt;=2。</span></p><p data-lake-id=\"u2ed3ea9d\" id=\"u2ed3ea9d\"><strong><span data-lake-id=\"ud2353ca5\" id=\"ud2353ca5\">问题2</span></strong><span data-lake-id=\"udb185260\" id=\"udb185260\">：按照题目要求，任务的执行是有顺序的，只是任务的结束时间是不确定的，所以下一个任务一定是按照这样的顺序来</span></p><blockquote data-lake-id=\"u5423a451\" id=\"u5423a451\"><p data-lake-id=\"u319ed407\" id=\"u319ed407\"><span data-lake-id=\"uafe48b0c\" id=\"uafe48b0c\">任务1 =&gt; 任务2 =&gt; 任务3 =&gt; 任务4</span></p></blockquote><p data-lake-id=\"u0dc3c5f8\" id=\"u0dc3c5f8\"><span data-lake-id=\"u4265ae5d\" id=\"u4265ae5d\">利用数组队列的性质，将任务挨个推入队列，前面的任务执行结束之后，将队首的任务取出来执行即可。</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22class%20Scheduler%20%7B%5Cn%20%20constructor%20()%20%7B%5Cn%20%20%20%20this.queue%20%3D%20%5B%5D%5Cn%20%20%20%20this.maxCount%20%3D%202%5Cn%20%20%20%20this.runCount%20%3D%200%5Cn%20%20%7D%5Cn%20%20%2F%2F%20promiseCreator%E6%89%A7%E8%A1%8C%E5%90%8E%E8%BF%94%E5%9B%9E%E7%9A%84%E6%98%AF%E4%B8%80%E4%B8%AAPromise%5Cn%20%20add(promiseCreator)%20%7B%5Cn%20%20%20%20%2F%2F%20%E5%B0%8F%E4%BA%8E%E7%AD%89%E4%BA%8E2%EF%BC%8C%E7%9B%B4%E6%8E%A5%E6%89%A7%E8%A1%8C%5Cn%20%20%20%20this.queue.push(promiseCreator)%5Cn%20%20%20%20%2F%2F%20%E6%AF%8F%E6%AC%A1%E6%B7%BB%E5%8A%A0%E7%9A%84%E6%97%B6%E5%80%99%E9%83%BD%E4%BC%9A%E5%B0%9D%E8%AF%95%E5%8E%BB%E6%89%A7%E8%A1%8C%E4%BB%BB%E5%8A%A1%5Cn%20%20%20%20this.runQueue()%5Cn%20%20%7D%5Cn%5Cn%20%20runQueue%20()%20%7B%5Cn%20%20%20%20%2F%2F%20%E9%98%9F%E5%88%97%E4%B8%AD%E8%BF%98%E6%9C%89%E4%BB%BB%E5%8A%A1%E6%89%8D%E4%BC%9A%E8%A2%AB%E6%89%A7%E8%A1%8C%5Cn%20%20%20%20if%20(this.queue.length%20%26%26%20this.runCount%20%3C%20this.maxCount)%20%7B%5Cn%20%20%20%20%20%20%2F%2F%20%E6%89%A7%E8%A1%8C%E5%85%88%E5%8A%A0%E5%85%A5%E9%98%9F%E5%88%97%E7%9A%84%E5%87%BD%E6%95%B0%5Cn%20%20%20%20%20%20const%20promiseCreator%20%3D%20this.queue.shift()%5Cn%20%20%20%20%20%20%2F%2F%20%E5%BC%80%E5%A7%8B%E6%89%A7%E8%A1%8C%E4%BB%BB%E5%8A%A1%20%E8%AE%A1%E6%95%B0%2B1%20%20%20%20%5Cn%20%20%20%20%20%20this.runCount%20%2B%3D%201%5Cn%20%20%20%20%20%20%2F%2F%20%E5%81%87%E8%AE%BE%E4%BB%BB%E5%8A%A1%E9%83%BD%E6%89%A7%E8%A1%8C%E6%88%90%E5%8A%9F%EF%BC%8C%E5%BD%93%E7%84%B6%E4%B9%9F%E5%8F%AF%E4%BB%A5%E5%81%9A%E4%B8%80%E4%B8%8Bcatch%5Cn%20%20%20%20%20%20promiseCreator().then(()%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E4%BB%BB%E5%8A%A1%E6%89%A7%E8%A1%8C%E5%AE%8C%E6%AF%95%EF%BC%8C%E8%AE%A1%E6%95%B0-1%5Cn%20%20%20%20%20%20%20%20this.runCount%20-%3D%201%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E5%B0%9D%E8%AF%95%E8%BF%9B%E8%A1%8C%E4%B8%8B%E4%B8%80%E6%AC%A1%E4%BB%BB%E5%8A%A1%5Cn%20%20%20%20%20%20%20%20this.runQueue()%5Cn%20%20%20%20%20%20%7D)%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%7D%5Cn%20%20%20%5Cnconst%20timeout%20%3D%20time%20%3D%3E%20%7B%5Cn%20%20return%20new%20Promise(resolve%20%3D%3E%20%7B%5Cn%20%20%20%20setTimeout(resolve%2C%20time)%5Cn%20%20%7D)%5Cn%7D%5Cn%20%20%5Cnconst%20scheduler%20%3D%20new%20Scheduler()%5Cn%20%20%5Cnconst%20addTask%20%3D%20(time%2Corder)%20%3D%3E%20%7B%5Cn%20%20scheduler.add(()%20%3D%3E%20timeout(time).then(()%3D%3Econsole.log(order)))%5Cn%7D%5Cn%5CnaddTask(1000%2C%20'1')%5CnaddTask(500%2C%20'2')%5CnaddTask(300%2C%20'3')%5CnaddTask(400%2C%20'4')%5Cn%5Cn%2F%2F%202%5Cn%2F%2F%203%5Cn%2F%2F%201%5Cn%2F%2F%204%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22BRvuV%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><ul list=\"uaa4e63b0\"><li fid=\"u746a0461\" data-lake-id=\"uba82bf6f\" id=\"uba82bf6f\"><span data-lake-id=\"uf42ba2ef\" id=\"uf42ba2ef\">另一种实现</span></li></ul><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22class%20Scheduler%20%7B%5Cn%20%20constructor()%20%7B%5Cn%20%20%20%20this.waitTasks%20%3D%20%5B%5D%3B%20%2F%2F%20%E5%BE%85%E6%89%A7%E8%A1%8C%E7%9A%84%E4%BB%BB%E5%8A%A1%E9%98%9F%E5%88%97%5Cn%20%20%20%20this.excutingTasks%20%3D%20%5B%5D%3B%20%2F%2F%20%E6%AD%A3%E5%9C%A8%E6%89%A7%E8%A1%8C%E7%9A%84%E4%BB%BB%E5%8A%A1%E9%98%9F%E5%88%97%5Cn%20%20%20%20this.maxExcutingNum%20%3D%202%3B%20%2F%2F%20%E5%85%81%E8%AE%B8%E5%90%8C%E6%97%B6%E8%BF%90%E8%A1%8C%E7%9A%84%E4%BB%BB%E5%8A%A1%E6%95%B0%E9%87%8F%5Cn%20%20%7D%5Cn%5Cn%20%20add(promiseMaker)%20%7B%5Cn%20%20%20%20if%20(this.excutingTasks.length%20%3C%20this.maxExcutingNum)%20%7B%5Cn%20%20%20%20%20%20this.run(promiseMaker)%3B%5Cn%20%20%20%20%7D%20else%20%7B%5Cn%20%20%20%20%20%20this.waitTasks.push(promiseMaker)%3B%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%5Cn%20%20run(promiseMaker)%20%7B%5Cn%20%20%20%20const%20len%20%3D%20this.excutingTasks.push(promiseMaker)%3B%5Cn%20%20%20%20const%20index%20%3D%20len%20-%201%3B%5Cn%20%20%20%20promiseMaker().then(()%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20this.excutingTasks.splice(index%2C%201)%3B%5Cn%20%20%20%20%20%20if%20(this.waitTasks.length%20%3E%200)%20%7B%5Cn%20%20%20%20%20%20%20%20this.run(this.waitTasks.shift())%3B%5Cn%20%20%20%20%20%20%7D%5Cn%20%20%20%20%7D)%3B%5Cn%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22heightLimit%22%3Atrue%2C%22id%22%3A%22Oqpxq%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u8288ac46\" id=\"u8288ac46\"><br></p>",
  "public": 0,
  "status": 1,
  "likes_count": 0,
  "read_count": 0,
  "hits": 0,
  "comments_count": 0,
  "word_count": 785,
  "created_at": "2022-05-11T15:02:05.000Z",
  "updated_at": "2022-05-11T15:08:06.000Z",
  "content_updated_at": "2022-05-11T15:02:05.000Z",
  "published_at": "2022-05-11T15:02:05.000Z",
  "first_published_at": "2022-05-11T15:02:05.091Z",
  "book": {
    "id": 27818302,
    "type": "Book",
    "slug": "pgkpvh",
    "name": "前端面试知识梳理",
    "user_id": 732231,
    "description": "",
    "toc_yml": "- type: META\n  count: 74\n  display_level: 1\n  tail_type: UPDATED_AT\n  base_version_id: 203636985\n  published: true\n  max_level: 1\n  last_updated_at: 2022-05-11T15:02:51.310Z\n  version_id: 203637675\n- type: TITLE\n  title: 基础 api 实现\n  uuid: 8cOHMB0GUaMGEJAZ\n  url: ''\n  prev_uuid: ''\n  sibling_uuid: XzzPhY1bnt-jy6Uq\n  child_uuid: tkSYK-Ar5LWNbwCs\n  parent_uuid: ''\n  doc_id: ''\n  level: 0\n  id: ''\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 实现 es6 的 extends\n  uuid: tkSYK-Ar5LWNbwCs\n  url: vtqbgk\n  prev_uuid: 8cOHMB0GUaMGEJAZ\n  sibling_uuid: iZbjvIrZWQPncGf4\n  child_uuid: ''\n  parent_uuid: 8cOHMB0GUaMGEJAZ\n  doc_id: 77021830\n  level: 1\n  id: 77021830\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 实现 ajax\n  uuid: iZbjvIrZWQPncGf4\n  url: cq5ws4\n  prev_uuid: tkSYK-Ar5LWNbwCs\n  sibling_uuid: GQ98GFTcsA6oX5fu\n  child_uuid: ''\n  parent_uuid: 8cOHMB0GUaMGEJAZ\n  doc_id: 77021696\n  level: 1\n  id: 77021696\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 实现 call、apply、bind\n  uuid: GQ98GFTcsA6oX5fu\n  url: ybrsyw\n  prev_uuid: iZbjvIrZWQPncGf4\n  sibling_uuid: 8mxtq-HrdjGBfE1K\n  child_uuid: ''\n  parent_uuid: 8cOHMB0GUaMGEJAZ\n  doc_id: 77021715\n  level: 1\n  id: 77021715\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 实现 new 关键字\n  uuid: 8mxtq-HrdjGBfE1K\n  url: pldu2b\n  prev_uuid: GQ98GFTcsA6oX5fu\n  sibling_uuid: DTHsD8sppgSTGUG-\n  child_uuid: ''\n  parent_uuid: 8cOHMB0GUaMGEJAZ\n  doc_id: 77021706\n  level: 1\n  id: 77021706\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 函数柯理化\n  uuid: DTHsD8sppgSTGUG-\n  url: yo9cx5\n  prev_uuid: 8mxtq-HrdjGBfE1K\n  sibling_uuid: TaRHTWpqD3Ef8QHU\n  child_uuid: ''\n  parent_uuid: 8cOHMB0GUaMGEJAZ\n  doc_id: 77021634\n  level: 1\n  id: 77021634\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 浅拷贝和深拷贝\n  uuid: TaRHTWpqD3Ef8QHU\n  url: ufks1z\n  prev_uuid: DTHsD8sppgSTGUG-\n  sibling_uuid: 4Z30CA9ZXVdeKnnL\n  child_uuid: ''\n  parent_uuid: 8cOHMB0GUaMGEJAZ\n  doc_id: 77021640\n  level: 1\n  id: 77021640\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 实现 instanceof\n  uuid: 4Z30CA9ZXVdeKnnL\n  url: ba4wuo\n  prev_uuid: TaRHTWpqD3Ef8QHU\n  sibling_uuid: 2MBif8wnmvigRAxT\n  child_uuid: ''\n  parent_uuid: 8cOHMB0GUaMGEJAZ\n  doc_id: 77021689\n  level: 1\n  id: 77021689\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 手动实现定时器\n  uuid: 2MBif8wnmvigRAxT\n  url: wf9bwg\n  prev_uuid: 4Z30CA9ZXVdeKnnL\n  sibling_uuid: 8f6jGaWidUBFSNN7\n  child_uuid: ''\n  parent_uuid: 8cOHMB0GUaMGEJAZ\n  doc_id: 77021645\n  level: 1\n  id: 77021645\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: sleep 函数实现\n  uuid: 8f6jGaWidUBFSNN7\n  url: ngwrak\n  prev_uuid: 2MBif8wnmvigRAxT\n  sibling_uuid: lXeuN-kwl51AKTO0\n  child_uuid: ''\n  parent_uuid: 8cOHMB0GUaMGEJAZ\n  doc_id: 77021787\n  level: 1\n  id: 77021787\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 实现 JSON.stringify\n  uuid: lXeuN-kwl51AKTO0\n  url: mtoe2n\n  prev_uuid: 8f6jGaWidUBFSNN7\n  sibling_uuid: hVvT5-pJ5qVvYNrK\n  child_uuid: ''\n  parent_uuid: 8cOHMB0GUaMGEJAZ\n  doc_id: 77021785\n  level: 1\n  id: 77021785\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: js 通用类型获取\n  uuid: hVvT5-pJ5qVvYNrK\n  url: tll6lm\n  prev_uuid: lXeuN-kwl51AKTO0\n  sibling_uuid: ''\n  child_uuid: ''\n  parent_uuid: 8cOHMB0GUaMGEJAZ\n  doc_id: 77021802\n  level: 1\n  id: 77021802\n  open_window: 0\n  visible: 1\n- type: TITLE\n  title: 防抖和节流\n  uuid: XzzPhY1bnt-jy6Uq\n  url: ''\n  prev_uuid: 8cOHMB0GUaMGEJAZ\n  sibling_uuid: PkyQAjgp1TOfRd_2\n  child_uuid: AQvBtgwRPd2U2nSA\n  parent_uuid: ''\n  doc_id: ''\n  level: 0\n  id: ''\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 防抖\n  uuid: AQvBtgwRPd2U2nSA\n  url: enlngv\n  prev_uuid: XzzPhY1bnt-jy6Uq\n  sibling_uuid: nlhlSMjYGwG8o1jH\n  child_uuid: ''\n  parent_uuid: XzzPhY1bnt-jy6Uq\n  doc_id: 77021614\n  level: 1\n  id: 77021614\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 节流\n  uuid: nlhlSMjYGwG8o1jH\n  url: griz0t\n  prev_uuid: AQvBtgwRPd2U2nSA\n  sibling_uuid: ''\n  child_uuid: ''\n  parent_uuid: XzzPhY1bnt-jy6Uq\n  doc_id: 77021626\n  level: 1\n  id: 77021626\n  open_window: 0\n  visible: 1\n- type: TITLE\n  title: 数组相关\n  uuid: PkyQAjgp1TOfRd_2\n  url: ''\n  prev_uuid: XzzPhY1bnt-jy6Uq\n  sibling_uuid: 5NjAYoIgV-DfXemF\n  child_uuid: xTSsZIKFI9Di3LBH\n  parent_uuid: ''\n  doc_id: ''\n  level: 0\n  id: ''\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 数组转树\n  uuid: xTSsZIKFI9Di3LBH\n  url: bzgequ\n  prev_uuid: PkyQAjgp1TOfRd_2\n  sibling_uuid: Z_6uIAB9XA6raQPD\n  child_uuid: ''\n  parent_uuid: PkyQAjgp1TOfRd_2\n  doc_id: 77021833\n  level: 1\n  id: 77021833\n  open_window: 0\n  visible: 0\n- type: DOC\n  title: 树转数组\n  uuid: Z_6uIAB9XA6raQPD\n  url: xycpzl\n  prev_uuid: xTSsZIKFI9Di3LBH\n  sibling_uuid: hoLauQ33F3aF2wq7\n  child_uuid: ''\n  parent_uuid: PkyQAjgp1TOfRd_2\n  doc_id: 77021835\n  level: 1\n  id: 77021835\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 数组常用方法\n  uuid: hoLauQ33F3aF2wq7\n  url: owtewn\n  prev_uuid: Z_6uIAB9XA6raQPD\n  sibling_uuid: rvc_A-WMsWds7EBa\n  child_uuid: ''\n  parent_uuid: PkyQAjgp1TOfRd_2\n  doc_id: 77021725\n  level: 1\n  id: 77021725\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 数组去重实现\n  uuid: rvc_A-WMsWds7EBa\n  url: gq2z9n\n  prev_uuid: hoLauQ33F3aF2wq7\n  sibling_uuid: NB4bY-etxMWq1YWS\n  child_uuid: ''\n  parent_uuid: PkyQAjgp1TOfRd_2\n  doc_id: 77021623\n  level: 1\n  id: 77021623\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 数组扁平化实现\n  uuid: NB4bY-etxMWq1YWS\n  url: doeryg\n  prev_uuid: rvc_A-WMsWds7EBa\n  sibling_uuid: DBoiy0L7Hhm_Zrkf\n  child_uuid: ''\n  parent_uuid: PkyQAjgp1TOfRd_2\n  doc_id: 77021607\n  level: 1\n  id: 77021607\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 类数组转换为数组\n  uuid: DBoiy0L7Hhm_Zrkf\n  url: csgagn\n  prev_uuid: NB4bY-etxMWq1YWS\n  sibling_uuid: E4WkD_rpaai_v3HK\n  child_uuid: ''\n  parent_uuid: PkyQAjgp1TOfRd_2\n  doc_id: 77021754\n  level: 1\n  id: 77021754\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 实现数组乱序输出\n  uuid: E4WkD_rpaai_v3HK\n  url: xlrgnu\n  prev_uuid: DBoiy0L7Hhm_Zrkf\n  sibling_uuid: OkcuvyhOMA6N0ex4\n  child_uuid: ''\n  parent_uuid: PkyQAjgp1TOfRd_2\n  doc_id: 77021731\n  level: 1\n  id: 77021731\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 查找二维数组的目标值\n  uuid: OkcuvyhOMA6N0ex4\n  url: tmw2ny\n  prev_uuid: E4WkD_rpaai_v3HK\n  sibling_uuid: F8K4-6VRqHrupctd\n  child_uuid: ''\n  parent_uuid: PkyQAjgp1TOfRd_2\n  doc_id: 77021789\n  level: 1\n  id: 77021789\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 二维数组斜向打印\n  uuid: F8K4-6VRqHrupctd\n  url: aqw6my\n  prev_uuid: OkcuvyhOMA6N0ex4\n  sibling_uuid: ''\n  child_uuid: ''\n  parent_uuid: PkyQAjgp1TOfRd_2\n  doc_id: 77021780\n  level: 1\n  id: 77021780\n  open_window: 0\n  visible: 1\n- type: TITLE\n  title: 字符串相关\n  uuid: 5NjAYoIgV-DfXemF\n  url: ''\n  prev_uuid: PkyQAjgp1TOfRd_2\n  sibling_uuid: Q34_kLhQ_uWoQw46\n  child_uuid: XNjX12HqmJBUHjy7\n  parent_uuid: ''\n  doc_id: ''\n  level: 0\n  id: ''\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 实现字符串的 repeat 方法\n  uuid: XNjX12HqmJBUHjy7\n  url: hxelqc\n  prev_uuid: 5NjAYoIgV-DfXemF\n  sibling_uuid: ''\n  child_uuid: ''\n  parent_uuid: 5NjAYoIgV-DfXemF\n  doc_id: 77021740\n  level: 1\n  id: 77021740\n  open_window: 0\n  visible: 1\n- type: TITLE\n  title: promise相关\n  uuid: Q34_kLhQ_uWoQw46\n  url: ''\n  prev_uuid: 5NjAYoIgV-DfXemF\n  sibling_uuid: aXqdYGJNJ1HlijwX\n  child_uuid: fuTj4su1VjBeHDO5\n  parent_uuid: ''\n  doc_id: ''\n  level: 0\n  id: ''\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 实现 Promise A+\n  uuid: fuTj4su1VjBeHDO5\n  url: fl6cgx\n  prev_uuid: Q34_kLhQ_uWoQw46\n  sibling_uuid: IOPLb2N42d3OZ0Zq\n  child_uuid: ''\n  parent_uuid: Q34_kLhQ_uWoQw46\n  doc_id: 77021620\n  level: 1\n  id: 77021620\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: Promise  常用方法实现\n  uuid: IOPLb2N42d3OZ0Zq\n  url: vd2h4l\n  prev_uuid: fuTj4su1VjBeHDO5\n  sibling_uuid: vKLkkDq-XoJwsqMW\n  child_uuid: ''\n  parent_uuid: Q34_kLhQ_uWoQw46\n  doc_id: 77021632\n  level: 1\n  id: 77021632\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: Promise 并发控制\n  uuid: vKLkkDq-XoJwsqMW\n  url: gd3193\n  prev_uuid: IOPLb2N42d3OZ0Zq\n  sibling_uuid: rYJ2dherst1MyK0I\n  child_uuid: ''\n  parent_uuid: Q34_kLhQ_uWoQw46\n  doc_id: 77021662\n  level: 1\n  id: 77021662\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: Promise 缓存\n  uuid: rYJ2dherst1MyK0I\n  url: sgcusf\n  prev_uuid: vKLkkDq-XoJwsqMW\n  sibling_uuid: xZ5UrxtCjhBJxiXK\n  child_uuid: ''\n  parent_uuid: Q34_kLhQ_uWoQw46\n  doc_id: 77021679\n  level: 1\n  id: 77021679\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 异步串行输出\n  uuid: xZ5UrxtCjhBJxiXK\n  url: um4g6z\n  prev_uuid: rYJ2dherst1MyK0I\n  sibling_uuid: fZuICDZLsFJSo57b\n  child_uuid: ''\n  parent_uuid: Q34_kLhQ_uWoQw46\n  doc_id: 77021649\n  level: 1\n  id: 77021649\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 带并发的异步调度器 Scheduler\n  uuid: fZuICDZLsFJSo57b\n  url: kbkc8e\n  prev_uuid: xZ5UrxtCjhBJxiXK\n  sibling_uuid: ''\n  child_uuid: ''\n  parent_uuid: Q34_kLhQ_uWoQw46\n  doc_id: 77021700\n  level: 1\n  id: 77021700\n  open_window: 0\n  visible: 1\n- type: TITLE\n  title: 数据处理\n  uuid: aXqdYGJNJ1HlijwX\n  url: ''\n  prev_uuid: Q34_kLhQ_uWoQw46\n  sibling_uuid: oj23-2V9egz1L0Ic\n  child_uuid: SxxBIhY4HFEaNF8V\n  parent_uuid: ''\n  doc_id: ''\n  level: 0\n  id: ''\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 解析 url 参数对象\n  uuid: SxxBIhY4HFEaNF8V\n  url: rxw8qp\n  prev_uuid: aXqdYGJNJ1HlijwX\n  sibling_uuid: yiD9ldSpBGzQNQxQ\n  child_uuid: ''\n  parent_uuid: aXqdYGJNJ1HlijwX\n  doc_id: 77021764\n  level: 1\n  id: 77021764\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 实现日期格式化函数\n  uuid: yiD9ldSpBGzQNQxQ\n  url: shzfyg\n  prev_uuid: SxxBIhY4HFEaNF8V\n  sibling_uuid: _3QVaw5COwwvCXZv\n  child_uuid: ''\n  parent_uuid: aXqdYGJNJ1HlijwX\n  doc_id: 77021710\n  level: 1\n  id: 77021710\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 交换 a、b 的值，不使用临时变量\n  uuid: _3QVaw5COwwvCXZv\n  url: xw17tv\n  prev_uuid: yiD9ldSpBGzQNQxQ\n  sibling_uuid: Mq5fe2v7j2INDdvL\n  child_uuid: ''\n  parent_uuid: aXqdYGJNJ1HlijwX\n  doc_id: 77021736\n  level: 1\n  id: 77021736\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 获取两个数之间的任意随机数\n  uuid: Mq5fe2v7j2INDdvL\n  url: vhngph\n  prev_uuid: _3QVaw5COwwvCXZv\n  sibling_uuid: 8Chl_bOMaALA1jhP\n  child_uuid: ''\n  parent_uuid: aXqdYGJNJ1HlijwX\n  doc_id: 77021688\n  level: 1\n  id: 77021688\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 将数字千分位用逗号隔开\n  uuid: 8Chl_bOMaALA1jhP\n  url: vphpea\n  prev_uuid: Mq5fe2v7j2INDdvL\n  sibling_uuid: MLI7v9Et4dIn7XiV\n  child_uuid: ''\n  parent_uuid: aXqdYGJNJ1HlijwX\n  doc_id: 77021743\n  level: 1\n  id: 77021743\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 实现非负大整数相加\n  uuid: MLI7v9Et4dIn7XiV\n  url: xlvd0g\n  prev_uuid: 8Chl_bOMaALA1jhP\n  sibling_uuid: mVWcb08QaDpa9PNH\n  child_uuid: ''\n  parent_uuid: aXqdYGJNJ1HlijwX\n  doc_id: 77021748\n  level: 1\n  id: 77021748\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 判断对象是否存在循环引用\n  uuid: mVWcb08QaDpa9PNH\n  url: phqdmd\n  prev_uuid: MLI7v9Et4dIn7XiV\n  sibling_uuid: ''\n  child_uuid: ''\n  parent_uuid: aXqdYGJNJ1HlijwX\n  doc_id: 77021768\n  level: 1\n  id: 77021768\n  open_window: 0\n  visible: 1\n- type: TITLE\n  title: 框架\n  uuid: oj23-2V9egz1L0Ic\n  url: ''\n  prev_uuid: aXqdYGJNJ1HlijwX\n  sibling_uuid: BTeDPodj0NU8fRW3\n  child_uuid: t5HRubL3aXPLNoG6\n  parent_uuid: ''\n  doc_id: ''\n  level: 0\n  id: ''\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 发布订阅模式\n  uuid: t5HRubL3aXPLNoG6\n  url: ezcdgo\n  prev_uuid: oj23-2V9egz1L0Ic\n  sibling_uuid: EqMT4jazWkuKJX1v\n  child_uuid: ''\n  parent_uuid: oj23-2V9egz1L0Ic\n  doc_id: 77021611\n  level: 1\n  id: 77021611\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 观察者模式\n  uuid: EqMT4jazWkuKJX1v\n  url: dwziom\n  prev_uuid: t5HRubL3aXPLNoG6\n  sibling_uuid: O5OEkYSpde-8we8V\n  child_uuid: ''\n  parent_uuid: oj23-2V9egz1L0Ic\n  doc_id: 77021795\n  level: 1\n  id: 77021795\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 简易版 vue2\n  uuid: O5OEkYSpde-8we8V\n  url: indxog\n  prev_uuid: EqMT4jazWkuKJX1v\n  sibling_uuid: XOQaAmtLM_gvM85t\n  child_uuid: ''\n  parent_uuid: oj23-2V9egz1L0Ic\n  doc_id: 77021636\n  level: 1\n  id: 77021636\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 简易版 vue3\n  uuid: XOQaAmtLM_gvM85t\n  url: an017i\n  prev_uuid: O5OEkYSpde-8we8V\n  sibling_uuid: ciSabdz5MTC1wbC7\n  child_uuid: ''\n  parent_uuid: oj23-2V9egz1L0Ic\n  doc_id: 77021804\n  level: 1\n  id: 77021804\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 简易版 vuex\n  uuid: ciSabdz5MTC1wbC7\n  url: myzomg\n  prev_uuid: XOQaAmtLM_gvM85t\n  sibling_uuid: ''\n  child_uuid: ''\n  parent_uuid: oj23-2V9egz1L0Ic\n  doc_id: 77021704\n  level: 1\n  id: 77021704\n  open_window: 0\n  visible: 1\n- type: TITLE\n  title: 应用场景\n  uuid: BTeDPodj0NU8fRW3\n  url: ''\n  prev_uuid: oj23-2V9egz1L0Ic\n  sibling_uuid: KKJ-BzUK3K9FxUJ2\n  child_uuid: U1oF7BfjBGNpWa79\n  parent_uuid: ''\n  doc_id: ''\n  level: 0\n  id: ''\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 通过调用 addRemote 实现 add\n  uuid: U1oF7BfjBGNpWa79\n  url: edff3s\n  prev_uuid: BTeDPodj0NU8fRW3\n  sibling_uuid: RMAn78BGFgyI8W6c\n  child_uuid: ''\n  parent_uuid: BTeDPodj0NU8fRW3\n  doc_id: 77021816\n  level: 1\n  id: 77021816\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 倒计时\n  uuid: RMAn78BGFgyI8W6c\n  url: uwleof\n  prev_uuid: U1oF7BfjBGNpWa79\n  sibling_uuid: aYlobR47xz0qHkhF\n  child_uuid: ''\n  parent_uuid: BTeDPodj0NU8fRW3\n  doc_id: 77021810\n  level: 1\n  id: 77021810\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 版本号比较\n  uuid: aYlobR47xz0qHkhF\n  url: cynvvd\n  prev_uuid: RMAn78BGFgyI8W6c\n  sibling_uuid: N0u_B_WnmtCeQwFI\n  child_uuid: ''\n  parent_uuid: BTeDPodj0NU8fRW3\n  doc_id: 77021792\n  level: 1\n  id: 77021792\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 实现简单路由\n  uuid: N0u_B_WnmtCeQwFI\n  url: zzc9k3\n  prev_uuid: aYlobR47xz0qHkhF\n  sibling_uuid: es8IUmiyOTWzwKa9\n  child_uuid: ''\n  parent_uuid: BTeDPodj0NU8fRW3\n  doc_id: 77021784\n  level: 1\n  id: 77021784\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 长列表虚拟滚动\n  uuid: es8IUmiyOTWzwKa9\n  url: wsmws7\n  prev_uuid: N0u_B_WnmtCeQwFI\n  sibling_uuid: yKn9f3BKX1S3tsyK\n  child_uuid: ''\n  parent_uuid: BTeDPodj0NU8fRW3\n  doc_id: 77021653\n  level: 1\n  id: 77021653\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 围圈报数问题\n  uuid: yKn9f3BKX1S3tsyK\n  url: gkoa19\n  prev_uuid: es8IUmiyOTWzwKa9\n  sibling_uuid: zmiKBP3HABO6Ig_9\n  child_uuid: ''\n  parent_uuid: BTeDPodj0NU8fRW3\n  doc_id: 77021761\n  level: 1\n  id: 77021761\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 查找文章中出现频率最高的词\n  uuid: zmiKBP3HABO6Ig_9\n  url: rln2y3\n  prev_uuid: yKn9f3BKX1S3tsyK\n  sibling_uuid: cDzdEkch3JypwTh2\n  child_uuid: ''\n  parent_uuid: BTeDPodj0NU8fRW3\n  doc_id: 77021772\n  level: 1\n  id: 77021772\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: Promise 每隔 1s 输出 1、2、3\n  uuid: cDzdEkch3JypwTh2\n  url: yg55el\n  prev_uuid: zmiKBP3HABO6Ig_9\n  sibling_uuid: II7sWIfm_eSWwKfq\n  child_uuid: ''\n  parent_uuid: BTeDPodj0NU8fRW3\n  doc_id: 77021821\n  level: 1\n  id: 77021821\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 循环打印红黄绿\n  uuid: II7sWIfm_eSWwKfq\n  url: wyhgfz\n  prev_uuid: cDzdEkch3JypwTh2\n  sibling_uuid: 0hKcnD9qnLeCTq4Q\n  child_uuid: ''\n  parent_uuid: BTeDPodj0NU8fRW3\n  doc_id: 77021776\n  level: 1\n  id: 77021776\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 封装一个异步加载图片的方法\n  uuid: 0hKcnD9qnLeCTq4Q\n  url: orxq0m\n  prev_uuid: II7sWIfm_eSWwKfq\n  sibling_uuid: b7lf8zlMeqorWGgi\n  child_uuid: ''\n  parent_uuid: BTeDPodj0NU8fRW3\n  doc_id: 77021825\n  level: 1\n  id: 77021825\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 实现 mergePromise 函数\n  uuid: b7lf8zlMeqorWGgi\n  url: apqplp\n  prev_uuid: 0hKcnD9qnLeCTq4Q\n  sibling_uuid: EZZ2GBqZ-B1LUsam\n  child_uuid: ''\n  parent_uuid: BTeDPodj0NU8fRW3\n  doc_id: 77021819\n  level: 1\n  id: 77021819\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 图片加载数量限制\n  uuid: EZZ2GBqZ-B1LUsam\n  url: xz2gy5\n  prev_uuid: b7lf8zlMeqorWGgi\n  sibling_uuid: '-8N7uf1xcBmFXSQI'\n  child_uuid: ''\n  parent_uuid: BTeDPodj0NU8fRW3\n  doc_id: 77021664\n  level: 1\n  id: 77021664\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 文本中识别敏感词、表情包、链接、数字、字母并高亮\n  uuid: '-8N7uf1xcBmFXSQI'\n  url: athu4p\n  prev_uuid: EZZ2GBqZ-B1LUsam\n  sibling_uuid: F_Fz97LW3aSxLLnr\n  child_uuid: ''\n  parent_uuid: BTeDPodj0NU8fRW3\n  doc_id: 77021666\n  level: 1\n  id: 77021666\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 图片格式转换为 webp\n  uuid: F_Fz97LW3aSxLLnr\n  url: cwlftq\n  prev_uuid: '-8N7uf1xcBmFXSQI'\n  sibling_uuid: wfz5QMLK_eAEtlFz\n  child_uuid: ''\n  parent_uuid: BTeDPodj0NU8fRW3\n  doc_id: 77021647\n  level: 1\n  id: 77021647\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 计算对象占用的字节数\n  uuid: wfz5QMLK_eAEtlFz\n  url: gx1y1y\n  prev_uuid: F_Fz97LW3aSxLLnr\n  sibling_uuid: rKjJYSK4ytL18T9L\n  child_uuid: ''\n  parent_uuid: BTeDPodj0NU8fRW3\n  doc_id: 77021669\n  level: 1\n  id: 77021669\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 给 xhr 添加 hook，实现在各个阶段打印日志\n  uuid: rKjJYSK4ytL18T9L\n  url: dm9n4g\n  prev_uuid: wfz5QMLK_eAEtlFz\n  sibling_uuid: zZADZWaE-olCAOjQ\n  child_uuid: ''\n  parent_uuid: BTeDPodj0NU8fRW3\n  doc_id: 77021658\n  level: 1\n  id: 77021658\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 明信片问题\n  uuid: zZADZWaE-olCAOjQ\n  url: mnsw3z\n  prev_uuid: rKjJYSK4ytL18T9L\n  sibling_uuid: ''\n  child_uuid: ''\n  parent_uuid: BTeDPodj0NU8fRW3\n  doc_id: 77021807\n  level: 1\n  id: 77021807\n  open_window: 0\n  visible: 1\n- type: TITLE\n  title: 常用算法实现\n  uuid: KKJ-BzUK3K9FxUJ2\n  url: ''\n  prev_uuid: BTeDPodj0NU8fRW3\n  sibling_uuid: ''\n  child_uuid: z8xQMUujFU-0OTsg\n  parent_uuid: ''\n  doc_id: ''\n  level: 0\n  id: ''\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 二分查找\n  uuid: z8xQMUujFU-0OTsg\n  url: pywta0\n  prev_uuid: KKJ-BzUK3K9FxUJ2\n  sibling_uuid: _b3VVGX3aAQ_rvuS\n  child_uuid: ''\n  parent_uuid: KKJ-BzUK3K9FxUJ2\n  doc_id: 77021798\n  level: 1\n  id: 77021798\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 排序\n  uuid: _b3VVGX3aAQ_rvuS\n  url: ivvld9\n  prev_uuid: z8xQMUujFU-0OTsg\n  sibling_uuid: eRQoWM79y_Mwbg2D\n  child_uuid: ''\n  parent_uuid: KKJ-BzUK3K9FxUJ2\n  doc_id: 77021670\n  level: 1\n  id: 77021670\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 动态规划和贪心算法\n  uuid: eRQoWM79y_Mwbg2D\n  url: pyig7m\n  prev_uuid: _b3VVGX3aAQ_rvuS\n  sibling_uuid: tr1DuV5ACUbyp8j-\n  child_uuid: ''\n  parent_uuid: KKJ-BzUK3K9FxUJ2\n  doc_id: 77021676\n  level: 1\n  id: 77021676\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 洗牌算法\n  uuid: tr1DuV5ACUbyp8j-\n  url: tohw0k\n  prev_uuid: eRQoWM79y_Mwbg2D\n  sibling_uuid: x9xEaoi_A59UZjS5\n  child_uuid: ''\n  parent_uuid: KKJ-BzUK3K9FxUJ2\n  doc_id: 77021687\n  level: 1\n  id: 77021687\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: LRU(最少置换算法)\n  uuid: x9xEaoi_A59UZjS5\n  url: tmwgql\n  prev_uuid: tr1DuV5ACUbyp8j-\n  sibling_uuid: XsgMUe05eXycAX93\n  child_uuid: ''\n  parent_uuid: KKJ-BzUK3K9FxUJ2\n  doc_id: 77021694\n  level: 1\n  id: 77021694\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 斐波那契数列\n  uuid: XsgMUe05eXycAX93\n  url: bq7f7e\n  prev_uuid: x9xEaoi_A59UZjS5\n  sibling_uuid: T0orOt1CWhzdAczU\n  child_uuid: ''\n  parent_uuid: KKJ-BzUK3K9FxUJ2\n  doc_id: 77021683\n  level: 1\n  id: 77021683\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 大数相加\n  uuid: T0orOt1CWhzdAczU\n  url: ln6fpo\n  prev_uuid: XsgMUe05eXycAX93\n  sibling_uuid: ''\n  child_uuid: ''\n  parent_uuid: KKJ-BzUK3K9FxUJ2\n  doc_id: 77021693\n  level: 1\n  id: 77021693\n  open_window: 0\n  visible: 1\n",
    "creator_id": 732231,
    "public": 0,
    "items_count": 65,
    "likes_count": 0,
    "watches_count": 1,
    "content_updated_at": "2023-01-06T09:17:32.188Z",
    "created_at": "2022-05-11T14:43:59.000Z",
    "updated_at": "2023-11-11T18:10:33.000Z",
    "user": {
      "id": 732231,
      "type": "User",
      "login": "wcywxq",
      "name": "magic",
      "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/732231/1606968271774-avatar/886ad88b-d2cc-4c9e-a674-f70eb51a679c.png",
      "books_count": 21,
      "public_books_count": 0,
      "followers_count": 0,
      "following_count": 0,
      "public": 1,
      "description": null,
      "created_at": "2020-01-08T14:21:31.000Z",
      "updated_at": "2023-11-23T19:11:28.000Z",
      "work_id": "",
      "_serializer": "v2.user"
    },
    "namespace": "wcywxq/pgkpvh",
    "_serializer": "v2.book"
  },
  "user": {
    "id": 732231,
    "type": "User",
    "login": "wcywxq",
    "name": "magic",
    "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/732231/1606968271774-avatar/886ad88b-d2cc-4c9e-a674-f70eb51a679c.png",
    "books_count": 21,
    "public_books_count": 0,
    "followers_count": 0,
    "following_count": 0,
    "public": 1,
    "description": null,
    "created_at": "2020-01-08T14:21:31.000Z",
    "updated_at": "2023-11-23T19:11:28.000Z",
    "work_id": "",
    "_serializer": "v2.user"
  },
  "tags": [],
  "latest_version_id": 984849405,
  "creator": {
    "id": 732231,
    "type": "User",
    "login": "wcywxq",
    "name": "magic",
    "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/732231/1606968271774-avatar/886ad88b-d2cc-4c9e-a674-f70eb51a679c.png",
    "books_count": 21,
    "public_books_count": 0,
    "followers_count": 0,
    "following_count": 0,
    "public": 1,
    "description": null,
    "created_at": "2020-01-08T14:21:31.000Z",
    "updated_at": "2023-11-23T19:11:28.000Z",
    "work_id": "",
    "_serializer": "v2.user"
  },
  "_serializer": "v2.doc_detail"
}