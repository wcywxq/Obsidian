{
  "id": 77021785,
  "slug": "mtoe2n",
  "title": "实现 JSON.stringify",
  "description": "JSON.stringify()  方法将一个 JavaScript 对象或值转换为 JSON 字符串，如果指定了一个 replacer 函数，则可以选择性地替换值，或者指定的 replacer 是数组，则可选择性地仅包含数组指定的属性。MDNconst jsonstringify = dat...",
  "cover": "",
  "user_id": 732231,
  "book_id": 27818302,
  "last_editor_id": 732231,
  "format": "lake",
  "body_draft": "",
  "body": "JSON.stringify()  方法将一个 JavaScript 对象或值转换为 JSON 字符串，如果指定了一个 replacer 函数，则可以选择性地替换值，或者指定的 replacer 是数组，则可选择性地仅包含数组指定的属性。[MDN](https://link.juejin.cn?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FJavaScript%2FReference%2FGlobal_Objects%2FJSON%2Fstringify)\n```javascript\nconst jsonstringify = data => {\n    // 确认一个对象是否存在循环引用\n    const isCyclic = obj => {\n        // 使用Set数据类型来存储已经检测过的对象\n        let stackSet = new Set()\n        let detected = false\n\n        const detect = obj => {\n            // 不是对象类型的话，可以直接跳过\n            if (obj && typeof obj != \"object\") {\n                return\n            }\n            // 当要检查的对象已经存在于stackSet中时，表示存在循环引用\n            if (stackSet.has(obj)) {\n                return (detected = true)\n            }\n            // 将当前obj存如stackSet\n            stackSet.add(obj)\n\n            for (let key in obj) {\n                // 对obj下的属性进行挨个检测\n                if (obj.hasOwnProperty(key)) {\n                    detect(obj[key])\n                }\n            }\n            // 平级检测完成之后，将当前对象删除，防止误判\n            /*\n              例如：对象的属性指向同一引用，如果不删除的话，会被认为是循环引用\n              let tempObj = {\n                name: '前端胖头鱼'\n              }\n              let obj4 = {\n                obj1: tempObj,\n                obj2: tempObj\n              }\n            */\n            stackSet.delete(obj)\n        }\n\n        detect(obj)\n\n        return detected\n    }\n\n    // 特性七:\n    // 对包含循环引用的对象（对象之间相互引用，形成无限循环）执行此方法，会抛出错误。\n    if (isCyclic(data)) {\n        throw new TypeError(\"Converting circular structure to JSON\")\n    }\n\n    // 特性九:\n    // 当尝试去转换 BigInt 类型的值会抛出错误\n    if (typeof data === \"bigint\") {\n        throw new TypeError(\"Do not know how to serialize a BigInt\")\n    }\n\n    const type = typeof data\n    const commonKeys1 = [\"undefined\", \"function\", \"symbol\"]\n    const getType = s => {\n        return Object.prototype.toString\n            .call(s)\n            .replace(/\\[object (.*?)\\]/, \"$1\")\n            .toLowerCase()\n    }\n\n    // 非对象\n    if (type !== \"object\" || data === null) {\n        let result = data\n        // 特性四：\n        // NaN 和 Infinity 格式的数值及 null 都会被当做 null。\n        if ([NaN, Infinity, null].includes(data)) {\n            result = \"null\"\n            // 特性一：\n            // `undefined`、`任意的函数`以及`symbol值`被`单独转换`时，会返回 undefined\n        } else if (commonKeys1.includes(type)) {\n            // 直接得到undefined，并不是一个字符串'undefined'\n            return undefined\n        } else if (type === \"string\") {\n            result = '\"' + data + '\"'\n        }\n\n        return String(result)\n    } else if (type === \"object\") {\n        // 特性五:\n        // 转换值如果有 toJSON() 方法，该方法定义什么值将被序列化\n        // 特性六:\n        // Date 日期调用了 toJSON() 将其转换为了 string 字符串（同Date.toISOString()），因此会被当做字符串处理。\n        if (typeof data.toJSON === \"function\") {\n            return jsonstringify(data.toJSON())\n        } else if (Array.isArray(data)) {\n            let result = data.map(it => {\n                // 特性一:\n                // `undefined`、`任意的函数`以及`symbol值`出现在`数组`中时会被转换成 `null`\n                return commonKeys1.includes(typeof it) ? \"null\" : jsonstringify(it)\n            })\n\n            return `[${result}]`.replace(/'/g, '\"')\n        } else {\n            // 特性二：\n            // 布尔值、数字、字符串的包装对象在序列化过程中会自动转换成对应的原始值。\n            if ([\"boolean\", \"number\"].includes(getType(data))) {\n                return String(data)\n            } else if (getType(data) === \"string\") {\n                return '\"' + data + '\"'\n            } else {\n                let result = []\n                // 特性八\n                // 其他类型的对象，包括 Map/Set/WeakMap/WeakSet，仅会序列化可枚举的属性\n                Object.keys(data).forEach(key => {\n                    // 特性三:\n                    // 所有以symbol为属性键的属性都会被完全忽略掉，即便 replacer 参数中强制指定包含了它们。\n                    if (typeof key !== \"symbol\") {\n                        const value = data[key]\n                        // 特性一\n                        // `undefined`、`任意的函数`以及`symbol值`，出现在`非数组对象`的属性值中时在序列化过程中会被忽略\n                        if (!commonKeys1.includes(typeof value)) {\n                            result.push(`\"${key}\":${jsonstringify(value)}`)\n                        }\n                    }\n                })\n\n                return `{${result}}`.replace(/'/, '\"')\n            }\n        }\n    }\n}\n\n// 各种测试\n\n// 1. 测试一下基本输出\nconsole.log(jsonstringify(undefined)) // undefined\nconsole.log(jsonstringify(() => {})) // undefined\nconsole.log(jsonstringify(Symbol(\"前端胖头鱼\"))) // undefined\nconsole.log(jsonstringify(NaN)) // null\nconsole.log(jsonstringify(Infinity)) // null\nconsole.log(jsonstringify(null)) // null\nconsole.log(\n    jsonstringify({\n        name: \"前端胖头鱼\",\n        toJSON() {\n            return {\n                name: \"前端胖头鱼2\",\n                sex: \"boy\"\n            }\n        }\n    })\n)\n// {\"name\":\"前端胖头鱼2\",\"sex\":\"boy\"}\n\n// 2. 和原生的JSON.stringify转换进行比较\nconsole.log(jsonstringify(null) === JSON.stringify(null))\n// true\nconsole.log(jsonstringify(undefined) === JSON.stringify(undefined))\n// true\nconsole.log(jsonstringify(false) === JSON.stringify(false))\n// true\nconsole.log(jsonstringify(NaN) === JSON.stringify(NaN))\n// true\nconsole.log(jsonstringify(Infinity) === JSON.stringify(Infinity))\n// true\nlet str = \"前端胖头鱼\"\nconsole.log(jsonstringify(str) === JSON.stringify(str))\n// true\nlet reg = new RegExp(\"w\")\nconsole.log(jsonstringify(reg) === JSON.stringify(reg))\n// true\nlet date = new Date()\nconsole.log(jsonstringify(date) === JSON.stringify(date))\n// true\nlet sym = Symbol(\"前端胖头鱼\")\nconsole.log(jsonstringify(sym) === JSON.stringify(sym))\n// true\nlet array = [1, 2, 3]\nconsole.log(jsonstringify(array) === JSON.stringify(array))\n// true\nlet obj = {\n    name: \"前端胖头鱼\",\n    age: 18,\n    attr: [\"coding\", 123],\n    date: new Date(),\n    uni: Symbol(2),\n    sayHi: function () {\n        console.log(\"hello world\")\n    },\n    info: {\n        age: 16,\n        intro: {\n            money: undefined,\n            job: null\n        }\n    },\n    pakingObj: {\n        boolean: new Boolean(false),\n        string: new String(\"前端胖头鱼\"),\n        number: new Number(1)\n    }\n}\nconsole.log(jsonstringify(obj) === JSON.stringify(obj))\n// true\nconsole.log(jsonstringify(obj))\n// {\"name\":\"前端胖头鱼\",\"age\":18,\"attr\":[\"coding\",123],\"date\":\"2021-10-06T14:59:58.306Z\",\"info\":{\"age\":16,\"intro\":{\"job\":null}},\"pakingObj\":{\"boolean\":false,\"string\":\"前端胖头鱼\",\"number\":1}}\nconsole.log(JSON.stringify(obj))\n// {\"name\":\"前端胖头鱼\",\"age\":18,\"attr\":[\"coding\",123],\"date\":\"2021-10-06T14:59:58.306Z\",\"info\":{\"age\":16,\"intro\":{\"job\":null}},\"pakingObj\":{\"boolean\":false,\"string\":\"前端胖头鱼\",\"number\":1}}\n\n// 3. 测试可遍历对象\nlet enumerableObj = {}\n\nObject.defineProperties(enumerableObj, {\n    name: {\n        value: \"前端胖头鱼\",\n        enumerable: true\n    },\n    sex: {\n        value: \"boy\",\n        enumerable: false\n    }\n})\n\nconsole.log(jsonstringify(enumerableObj))\n// {\"name\":\"前端胖头鱼\"}\n\n// 4. 测试循环引用和Bigint\n\nlet obj1 = { a: \"aa\" }\nlet obj2 = { name: \"前端胖头鱼\", a: obj1, b: obj1 }\nobj2.obj = obj2\n\nconsole.log(jsonstringify(obj2))\n// TypeError: Converting circular structure to JSON\nconsole.log(jsonStringify(BigInt(1)))\n// TypeError: Do not know how to serialize a BigInt\n```\n",
  "body_html": "<!doctype html><p data-lake-id=\"u37cdc475\"><span>JSON.stringify()  方法将一个 JavaScript 对象或值转换为 JSON 字符串，如果指定了一个 replacer 函数，则可以选择性地替换值，或者指定的 replacer 是数组，则可选择性地仅包含数组指定的属性。</span><a href=\"https://link.juejin.cn?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FJavaScript%2FReference%2FGlobal_Objects%2FJSON%2Fstringify\" target=\"_blank\"><span>MDN</span></a></p><pre data-lang=\"javascript\"><code>const jsonstringify = data =&gt; {\n    // 确认一个对象是否存在循环引用\n    const isCyclic = obj =&gt; {\n        // 使用Set数据类型来存储已经检测过的对象\n        let stackSet = new Set()\n        let detected = false\n\n        const detect = obj =&gt; {\n            // 不是对象类型的话，可以直接跳过\n            if (obj &amp;&amp; typeof obj != &quot;object&quot;) {\n                return\n            }\n            // 当要检查的对象已经存在于stackSet中时，表示存在循环引用\n            if (stackSet.has(obj)) {\n                return (detected = true)\n            }\n            // 将当前obj存如stackSet\n            stackSet.add(obj)\n\n            for (let key in obj) {\n                // 对obj下的属性进行挨个检测\n                if (obj.hasOwnProperty(key)) {\n                    detect(obj[key])\n                }\n            }\n            // 平级检测完成之后，将当前对象删除，防止误判\n            /*\n              例如：对象的属性指向同一引用，如果不删除的话，会被认为是循环引用\n              let tempObj = {\n                name: '前端胖头鱼'\n              }\n              let obj4 = {\n                obj1: tempObj,\n                obj2: tempObj\n              }\n            */\n            stackSet.delete(obj)\n        }\n\n        detect(obj)\n\n        return detected\n    }\n\n    // 特性七:\n    // 对包含循环引用的对象（对象之间相互引用，形成无限循环）执行此方法，会抛出错误。\n    if (isCyclic(data)) {\n        throw new TypeError(&quot;Converting circular structure to JSON&quot;)\n    }\n\n    // 特性九:\n    // 当尝试去转换 BigInt 类型的值会抛出错误\n    if (typeof data === &quot;bigint&quot;) {\n        throw new TypeError(&quot;Do not know how to serialize a BigInt&quot;)\n    }\n\n    const type = typeof data\n    const commonKeys1 = [&quot;undefined&quot;, &quot;function&quot;, &quot;symbol&quot;]\n    const getType = s =&gt; {\n        return Object.prototype.toString\n            .call(s)\n            .replace(/\\[object (.*?)\\]/, &quot;$1&quot;)\n            .toLowerCase()\n    }\n\n    // 非对象\n    if (type !== &quot;object&quot; || data === null) {\n        let result = data\n        // 特性四：\n        // NaN 和 Infinity 格式的数值及 null 都会被当做 null。\n        if ([NaN, Infinity, null].includes(data)) {\n            result = &quot;null&quot;\n            // 特性一：\n            // `undefined`、`任意的函数`以及`symbol值`被`单独转换`时，会返回 undefined\n        } else if (commonKeys1.includes(type)) {\n            // 直接得到undefined，并不是一个字符串'undefined'\n            return undefined\n        } else if (type === &quot;string&quot;) {\n            result = '&quot;' + data + '&quot;'\n        }\n\n        return String(result)\n    } else if (type === &quot;object&quot;) {\n        // 特性五:\n        // 转换值如果有 toJSON() 方法，该方法定义什么值将被序列化\n        // 特性六:\n        // Date 日期调用了 toJSON() 将其转换为了 string 字符串（同Date.toISOString()），因此会被当做字符串处理。\n        if (typeof data.toJSON === &quot;function&quot;) {\n            return jsonstringify(data.toJSON())\n        } else if (Array.isArray(data)) {\n            let result = data.map(it =&gt; {\n                // 特性一:\n                // `undefined`、`任意的函数`以及`symbol值`出现在`数组`中时会被转换成 `null`\n                return commonKeys1.includes(typeof it) ? &quot;null&quot; : jsonstringify(it)\n            })\n\n            return `[${result}]`.replace(/'/g, '&quot;')\n        } else {\n            // 特性二：\n            // 布尔值、数字、字符串的包装对象在序列化过程中会自动转换成对应的原始值。\n            if ([&quot;boolean&quot;, &quot;number&quot;].includes(getType(data))) {\n                return String(data)\n            } else if (getType(data) === &quot;string&quot;) {\n                return '&quot;' + data + '&quot;'\n            } else {\n                let result = []\n                // 特性八\n                // 其他类型的对象，包括 Map/Set/WeakMap/WeakSet，仅会序列化可枚举的属性\n                Object.keys(data).forEach(key =&gt; {\n                    // 特性三:\n                    // 所有以symbol为属性键的属性都会被完全忽略掉，即便 replacer 参数中强制指定包含了它们。\n                    if (typeof key !== &quot;symbol&quot;) {\n                        const value = data[key]\n                        // 特性一\n                        // `undefined`、`任意的函数`以及`symbol值`，出现在`非数组对象`的属性值中时在序列化过程中会被忽略\n                        if (!commonKeys1.includes(typeof value)) {\n                            result.push(`&quot;${key}&quot;:${jsonstringify(value)}`)\n                        }\n                    }\n                })\n\n                return `{${result}}`.replace(/'/, '&quot;')\n            }\n        }\n    }\n}\n\n// 各种测试\n\n// 1. 测试一下基本输出\nconsole.log(jsonstringify(undefined)) // undefined\nconsole.log(jsonstringify(() =&gt; {})) // undefined\nconsole.log(jsonstringify(Symbol(&quot;前端胖头鱼&quot;))) // undefined\nconsole.log(jsonstringify(NaN)) // null\nconsole.log(jsonstringify(Infinity)) // null\nconsole.log(jsonstringify(null)) // null\nconsole.log(\n    jsonstringify({\n        name: &quot;前端胖头鱼&quot;,\n        toJSON() {\n            return {\n                name: &quot;前端胖头鱼2&quot;,\n                sex: &quot;boy&quot;\n            }\n        }\n    })\n)\n// {&quot;name&quot;:&quot;前端胖头鱼2&quot;,&quot;sex&quot;:&quot;boy&quot;}\n\n// 2. 和原生的JSON.stringify转换进行比较\nconsole.log(jsonstringify(null) === JSON.stringify(null))\n// true\nconsole.log(jsonstringify(undefined) === JSON.stringify(undefined))\n// true\nconsole.log(jsonstringify(false) === JSON.stringify(false))\n// true\nconsole.log(jsonstringify(NaN) === JSON.stringify(NaN))\n// true\nconsole.log(jsonstringify(Infinity) === JSON.stringify(Infinity))\n// true\nlet str = &quot;前端胖头鱼&quot;\nconsole.log(jsonstringify(str) === JSON.stringify(str))\n// true\nlet reg = new RegExp(&quot;w&quot;)\nconsole.log(jsonstringify(reg) === JSON.stringify(reg))\n// true\nlet date = new Date()\nconsole.log(jsonstringify(date) === JSON.stringify(date))\n// true\nlet sym = Symbol(&quot;前端胖头鱼&quot;)\nconsole.log(jsonstringify(sym) === JSON.stringify(sym))\n// true\nlet array = [1, 2, 3]\nconsole.log(jsonstringify(array) === JSON.stringify(array))\n// true\nlet obj = {\n    name: &quot;前端胖头鱼&quot;,\n    age: 18,\n    attr: [&quot;coding&quot;, 123],\n    date: new Date(),\n    uni: Symbol(2),\n    sayHi: function () {\n        console.log(&quot;hello world&quot;)\n    },\n    info: {\n        age: 16,\n        intro: {\n            money: undefined,\n            job: null\n        }\n    },\n    pakingObj: {\n        boolean: new Boolean(false),\n        string: new String(&quot;前端胖头鱼&quot;),\n        number: new Number(1)\n    }\n}\nconsole.log(jsonstringify(obj) === JSON.stringify(obj))\n// true\nconsole.log(jsonstringify(obj))\n// {&quot;name&quot;:&quot;前端胖头鱼&quot;,&quot;age&quot;:18,&quot;attr&quot;:[&quot;coding&quot;,123],&quot;date&quot;:&quot;2021-10-06T14:59:58.306Z&quot;,&quot;info&quot;:{&quot;age&quot;:16,&quot;intro&quot;:{&quot;job&quot;:null}},&quot;pakingObj&quot;:{&quot;boolean&quot;:false,&quot;string&quot;:&quot;前端胖头鱼&quot;,&quot;number&quot;:1}}\nconsole.log(JSON.stringify(obj))\n// {&quot;name&quot;:&quot;前端胖头鱼&quot;,&quot;age&quot;:18,&quot;attr&quot;:[&quot;coding&quot;,123],&quot;date&quot;:&quot;2021-10-06T14:59:58.306Z&quot;,&quot;info&quot;:{&quot;age&quot;:16,&quot;intro&quot;:{&quot;job&quot;:null}},&quot;pakingObj&quot;:{&quot;boolean&quot;:false,&quot;string&quot;:&quot;前端胖头鱼&quot;,&quot;number&quot;:1}}\n\n// 3. 测试可遍历对象\nlet enumerableObj = {}\n\nObject.defineProperties(enumerableObj, {\n    name: {\n        value: &quot;前端胖头鱼&quot;,\n        enumerable: true\n    },\n    sex: {\n        value: &quot;boy&quot;,\n        enumerable: false\n    }\n})\n\nconsole.log(jsonstringify(enumerableObj))\n// {&quot;name&quot;:&quot;前端胖头鱼&quot;}\n\n// 4. 测试循环引用和Bigint\n\nlet obj1 = { a: &quot;aa&quot; }\nlet obj2 = { name: &quot;前端胖头鱼&quot;, a: obj1, b: obj1 }\nobj2.obj = obj2\n\nconsole.log(jsonstringify(obj2))\n// TypeError: Converting circular structure to JSON\nconsole.log(jsonStringify(BigInt(1)))\n// TypeError: Do not know how to serialize a BigInt</code></pre>",
  "body_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"viewport\" content=\"adapt\" /><p data-lake-id=\"u37cdc475\" id=\"u37cdc475\"><span data-lake-id=\"u46550e2e\" id=\"u46550e2e\">JSON.stringify()  方法将一个 JavaScript 对象或值转换为 JSON 字符串，如果指定了一个 replacer 函数，则可以选择性地替换值，或者指定的 replacer 是数组，则可选择性地仅包含数组指定的属性。</span><a href=\"https://link.juejin.cn?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FJavaScript%2FReference%2FGlobal_Objects%2FJSON%2Fstringify\" target=\"_blank\" data-lake-id=\"u81647b4b\" id=\"u81647b4b\"><span data-lake-id=\"u5df99f4c\" id=\"u5df99f4c\">MDN</span></a></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22const%20jsonstringify%20%3D%20data%20%3D%3E%20%7B%5Cn%20%20%20%20%2F%2F%20%E7%A1%AE%E8%AE%A4%E4%B8%80%E4%B8%AA%E5%AF%B9%E8%B1%A1%E6%98%AF%E5%90%A6%E5%AD%98%E5%9C%A8%E5%BE%AA%E7%8E%AF%E5%BC%95%E7%94%A8%5Cn%20%20%20%20const%20isCyclic%20%3D%20obj%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E4%BD%BF%E7%94%A8Set%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E6%9D%A5%E5%AD%98%E5%82%A8%E5%B7%B2%E7%BB%8F%E6%A3%80%E6%B5%8B%E8%BF%87%E7%9A%84%E5%AF%B9%E8%B1%A1%5Cn%20%20%20%20%20%20%20%20let%20stackSet%20%3D%20new%20Set()%5Cn%20%20%20%20%20%20%20%20let%20detected%20%3D%20false%5Cn%5Cn%20%20%20%20%20%20%20%20const%20detect%20%3D%20obj%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E4%B8%8D%E6%98%AF%E5%AF%B9%E8%B1%A1%E7%B1%BB%E5%9E%8B%E7%9A%84%E8%AF%9D%EF%BC%8C%E5%8F%AF%E4%BB%A5%E7%9B%B4%E6%8E%A5%E8%B7%B3%E8%BF%87%5Cn%20%20%20%20%20%20%20%20%20%20%20%20if%20(obj%20%26%26%20typeof%20obj%20!%3D%20%5C%22object%5C%22)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E5%BD%93%E8%A6%81%E6%A3%80%E6%9F%A5%E7%9A%84%E5%AF%B9%E8%B1%A1%E5%B7%B2%E7%BB%8F%E5%AD%98%E5%9C%A8%E4%BA%8EstackSet%E4%B8%AD%E6%97%B6%EF%BC%8C%E8%A1%A8%E7%A4%BA%E5%AD%98%E5%9C%A8%E5%BE%AA%E7%8E%AF%E5%BC%95%E7%94%A8%5Cn%20%20%20%20%20%20%20%20%20%20%20%20if%20(stackSet.has(obj))%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20(detected%20%3D%20true)%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E5%B0%86%E5%BD%93%E5%89%8Dobj%E5%AD%98%E5%A6%82stackSet%5Cn%20%20%20%20%20%20%20%20%20%20%20%20stackSet.add(obj)%5Cn%5Cn%20%20%20%20%20%20%20%20%20%20%20%20for%20(let%20key%20in%20obj)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E5%AF%B9obj%E4%B8%8B%E7%9A%84%E5%B1%9E%E6%80%A7%E8%BF%9B%E8%A1%8C%E6%8C%A8%E4%B8%AA%E6%A3%80%E6%B5%8B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20if%20(obj.hasOwnProperty(key))%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20detect(obj%5Bkey%5D)%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E5%B9%B3%E7%BA%A7%E6%A3%80%E6%B5%8B%E5%AE%8C%E6%88%90%E4%B9%8B%E5%90%8E%EF%BC%8C%E5%B0%86%E5%BD%93%E5%89%8D%E5%AF%B9%E8%B1%A1%E5%88%A0%E9%99%A4%EF%BC%8C%E9%98%B2%E6%AD%A2%E8%AF%AF%E5%88%A4%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F*%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%E4%BE%8B%E5%A6%82%EF%BC%9A%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%B1%9E%E6%80%A7%E6%8C%87%E5%90%91%E5%90%8C%E4%B8%80%E5%BC%95%E7%94%A8%EF%BC%8C%E5%A6%82%E6%9E%9C%E4%B8%8D%E5%88%A0%E9%99%A4%E7%9A%84%E8%AF%9D%EF%BC%8C%E4%BC%9A%E8%A2%AB%E8%AE%A4%E4%B8%BA%E6%98%AF%E5%BE%AA%E7%8E%AF%E5%BC%95%E7%94%A8%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20let%20tempObj%20%3D%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20name%3A%20'%E5%89%8D%E7%AB%AF%E8%83%96%E5%A4%B4%E9%B1%BC'%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20let%20obj4%20%3D%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20obj1%3A%20tempObj%2C%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20obj2%3A%20tempObj%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%20%20%20%20*%2F%5Cn%20%20%20%20%20%20%20%20%20%20%20%20stackSet.delete(obj)%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%20%20%20%20detect(obj)%5Cn%5Cn%20%20%20%20%20%20%20%20return%20detected%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%2F%2F%20%E7%89%B9%E6%80%A7%E4%B8%83%3A%5Cn%20%20%20%20%2F%2F%20%E5%AF%B9%E5%8C%85%E5%90%AB%E5%BE%AA%E7%8E%AF%E5%BC%95%E7%94%A8%E7%9A%84%E5%AF%B9%E8%B1%A1%EF%BC%88%E5%AF%B9%E8%B1%A1%E4%B9%8B%E9%97%B4%E7%9B%B8%E4%BA%92%E5%BC%95%E7%94%A8%EF%BC%8C%E5%BD%A2%E6%88%90%E6%97%A0%E9%99%90%E5%BE%AA%E7%8E%AF%EF%BC%89%E6%89%A7%E8%A1%8C%E6%AD%A4%E6%96%B9%E6%B3%95%EF%BC%8C%E4%BC%9A%E6%8A%9B%E5%87%BA%E9%94%99%E8%AF%AF%E3%80%82%5Cn%20%20%20%20if%20(isCyclic(data))%20%7B%5Cn%20%20%20%20%20%20%20%20throw%20new%20TypeError(%5C%22Converting%20circular%20structure%20to%20JSON%5C%22)%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%2F%2F%20%E7%89%B9%E6%80%A7%E4%B9%9D%3A%5Cn%20%20%20%20%2F%2F%20%E5%BD%93%E5%B0%9D%E8%AF%95%E5%8E%BB%E8%BD%AC%E6%8D%A2%20BigInt%20%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%80%BC%E4%BC%9A%E6%8A%9B%E5%87%BA%E9%94%99%E8%AF%AF%5Cn%20%20%20%20if%20(typeof%20data%20%3D%3D%3D%20%5C%22bigint%5C%22)%20%7B%5Cn%20%20%20%20%20%20%20%20throw%20new%20TypeError(%5C%22Do%20not%20know%20how%20to%20serialize%20a%20BigInt%5C%22)%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20const%20type%20%3D%20typeof%20data%5Cn%20%20%20%20const%20commonKeys1%20%3D%20%5B%5C%22undefined%5C%22%2C%20%5C%22function%5C%22%2C%20%5C%22symbol%5C%22%5D%5Cn%20%20%20%20const%20getType%20%3D%20s%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20%20%20return%20Object.prototype.toString%5Cn%20%20%20%20%20%20%20%20%20%20%20%20.call(s)%5Cn%20%20%20%20%20%20%20%20%20%20%20%20.replace(%2F%5C%5C%5Bobject%20(.*%3F)%5C%5C%5D%2F%2C%20%5C%22%241%5C%22)%5Cn%20%20%20%20%20%20%20%20%20%20%20%20.toLowerCase()%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%2F%2F%20%E9%9D%9E%E5%AF%B9%E8%B1%A1%5Cn%20%20%20%20if%20(type%20!%3D%3D%20%5C%22object%5C%22%20%7C%7C%20data%20%3D%3D%3D%20null)%20%7B%5Cn%20%20%20%20%20%20%20%20let%20result%20%3D%20data%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E7%89%B9%E6%80%A7%E5%9B%9B%EF%BC%9A%5Cn%20%20%20%20%20%20%20%20%2F%2F%20NaN%20%E5%92%8C%20Infinity%20%E6%A0%BC%E5%BC%8F%E7%9A%84%E6%95%B0%E5%80%BC%E5%8F%8A%20null%20%E9%83%BD%E4%BC%9A%E8%A2%AB%E5%BD%93%E5%81%9A%20null%E3%80%82%5Cn%20%20%20%20%20%20%20%20if%20(%5BNaN%2C%20Infinity%2C%20null%5D.includes(data))%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20result%20%3D%20%5C%22null%5C%22%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E7%89%B9%E6%80%A7%E4%B8%80%EF%BC%9A%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%60undefined%60%E3%80%81%60%E4%BB%BB%E6%84%8F%E7%9A%84%E5%87%BD%E6%95%B0%60%E4%BB%A5%E5%8F%8A%60symbol%E5%80%BC%60%E8%A2%AB%60%E5%8D%95%E7%8B%AC%E8%BD%AC%E6%8D%A2%60%E6%97%B6%EF%BC%8C%E4%BC%9A%E8%BF%94%E5%9B%9E%20undefined%5Cn%20%20%20%20%20%20%20%20%7D%20else%20if%20(commonKeys1.includes(type))%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E7%9B%B4%E6%8E%A5%E5%BE%97%E5%88%B0undefined%EF%BC%8C%E5%B9%B6%E4%B8%8D%E6%98%AF%E4%B8%80%E4%B8%AA%E5%AD%97%E7%AC%A6%E4%B8%B2'undefined'%5Cn%20%20%20%20%20%20%20%20%20%20%20%20return%20undefined%5Cn%20%20%20%20%20%20%20%20%7D%20else%20if%20(type%20%3D%3D%3D%20%5C%22string%5C%22)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20result%20%3D%20'%5C%22'%20%2B%20data%20%2B%20'%5C%22'%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%20%20%20%20return%20String(result)%5Cn%20%20%20%20%7D%20else%20if%20(type%20%3D%3D%3D%20%5C%22object%5C%22)%20%7B%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E7%89%B9%E6%80%A7%E4%BA%94%3A%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E8%BD%AC%E6%8D%A2%E5%80%BC%E5%A6%82%E6%9E%9C%E6%9C%89%20toJSON()%20%E6%96%B9%E6%B3%95%EF%BC%8C%E8%AF%A5%E6%96%B9%E6%B3%95%E5%AE%9A%E4%B9%89%E4%BB%80%E4%B9%88%E5%80%BC%E5%B0%86%E8%A2%AB%E5%BA%8F%E5%88%97%E5%8C%96%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E7%89%B9%E6%80%A7%E5%85%AD%3A%5Cn%20%20%20%20%20%20%20%20%2F%2F%20Date%20%E6%97%A5%E6%9C%9F%E8%B0%83%E7%94%A8%E4%BA%86%20toJSON()%20%E5%B0%86%E5%85%B6%E8%BD%AC%E6%8D%A2%E4%B8%BA%E4%BA%86%20string%20%E5%AD%97%E7%AC%A6%E4%B8%B2%EF%BC%88%E5%90%8CDate.toISOString()%EF%BC%89%EF%BC%8C%E5%9B%A0%E6%AD%A4%E4%BC%9A%E8%A2%AB%E5%BD%93%E5%81%9A%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A4%84%E7%90%86%E3%80%82%5Cn%20%20%20%20%20%20%20%20if%20(typeof%20data.toJSON%20%3D%3D%3D%20%5C%22function%5C%22)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20return%20jsonstringify(data.toJSON())%5Cn%20%20%20%20%20%20%20%20%7D%20else%20if%20(Array.isArray(data))%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20let%20result%20%3D%20data.map(it%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E7%89%B9%E6%80%A7%E4%B8%80%3A%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%60undefined%60%E3%80%81%60%E4%BB%BB%E6%84%8F%E7%9A%84%E5%87%BD%E6%95%B0%60%E4%BB%A5%E5%8F%8A%60symbol%E5%80%BC%60%E5%87%BA%E7%8E%B0%E5%9C%A8%60%E6%95%B0%E7%BB%84%60%E4%B8%AD%E6%97%B6%E4%BC%9A%E8%A2%AB%E8%BD%AC%E6%8D%A2%E6%88%90%C2%A0%60null%60%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20commonKeys1.includes(typeof%20it)%20%3F%20%5C%22null%5C%22%20%3A%20jsonstringify(it)%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D)%5Cn%5Cn%20%20%20%20%20%20%20%20%20%20%20%20return%20%60%5B%24%7Bresult%7D%5D%60.replace(%2F'%2Fg%2C%20'%5C%22')%5Cn%20%20%20%20%20%20%20%20%7D%20else%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E7%89%B9%E6%80%A7%E4%BA%8C%EF%BC%9A%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E5%B8%83%E5%B0%94%E5%80%BC%E3%80%81%E6%95%B0%E5%AD%97%E3%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E5%8C%85%E8%A3%85%E5%AF%B9%E8%B1%A1%E5%9C%A8%E5%BA%8F%E5%88%97%E5%8C%96%E8%BF%87%E7%A8%8B%E4%B8%AD%E4%BC%9A%E8%87%AA%E5%8A%A8%E8%BD%AC%E6%8D%A2%E6%88%90%E5%AF%B9%E5%BA%94%E7%9A%84%E5%8E%9F%E5%A7%8B%E5%80%BC%E3%80%82%5Cn%20%20%20%20%20%20%20%20%20%20%20%20if%20(%5B%5C%22boolean%5C%22%2C%20%5C%22number%5C%22%5D.includes(getType(data)))%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20String(data)%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%20else%20if%20(getType(data)%20%3D%3D%3D%20%5C%22string%5C%22)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20'%5C%22'%20%2B%20data%20%2B%20'%5C%22'%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%20else%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20let%20result%20%3D%20%5B%5D%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E7%89%B9%E6%80%A7%E5%85%AB%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E5%85%B6%E4%BB%96%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%AF%B9%E8%B1%A1%EF%BC%8C%E5%8C%85%E6%8B%AC%20Map%2FSet%2FWeakMap%2FWeakSet%EF%BC%8C%E4%BB%85%E4%BC%9A%E5%BA%8F%E5%88%97%E5%8C%96%E5%8F%AF%E6%9E%9A%E4%B8%BE%E7%9A%84%E5%B1%9E%E6%80%A7%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20Object.keys(data).forEach(key%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E7%89%B9%E6%80%A7%E4%B8%89%3A%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E6%89%80%E6%9C%89%E4%BB%A5symbol%E4%B8%BA%E5%B1%9E%E6%80%A7%E9%94%AE%E7%9A%84%E5%B1%9E%E6%80%A7%E9%83%BD%E4%BC%9A%E8%A2%AB%E5%AE%8C%E5%85%A8%E5%BF%BD%E7%95%A5%E6%8E%89%EF%BC%8C%E5%8D%B3%E4%BE%BF%20replacer%20%E5%8F%82%E6%95%B0%E4%B8%AD%E5%BC%BA%E5%88%B6%E6%8C%87%E5%AE%9A%E5%8C%85%E5%90%AB%E4%BA%86%E5%AE%83%E4%BB%AC%E3%80%82%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20if%20(typeof%20key%20!%3D%3D%20%5C%22symbol%5C%22)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20const%20value%20%3D%20data%5Bkey%5D%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E7%89%B9%E6%80%A7%E4%B8%80%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%60undefined%60%E3%80%81%60%E4%BB%BB%E6%84%8F%E7%9A%84%E5%87%BD%E6%95%B0%60%E4%BB%A5%E5%8F%8A%60symbol%E5%80%BC%60%EF%BC%8C%E5%87%BA%E7%8E%B0%E5%9C%A8%60%E9%9D%9E%E6%95%B0%E7%BB%84%E5%AF%B9%E8%B1%A1%60%E7%9A%84%E5%B1%9E%E6%80%A7%E5%80%BC%E4%B8%AD%E6%97%B6%E5%9C%A8%E5%BA%8F%E5%88%97%E5%8C%96%E8%BF%87%E7%A8%8B%E4%B8%AD%E4%BC%9A%E8%A2%AB%E5%BF%BD%E7%95%A5%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20if%20(!commonKeys1.includes(typeof%20value))%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20result.push(%60%5C%22%24%7Bkey%7D%5C%22%3A%24%7Bjsonstringify(value)%7D%60)%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D)%5Cn%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20%60%7B%24%7Bresult%7D%7D%60.replace(%2F'%2F%2C%20'%5C%22')%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%7D%5Cn%7D%5Cn%5Cn%2F%2F%20%E5%90%84%E7%A7%8D%E6%B5%8B%E8%AF%95%5Cn%5Cn%2F%2F%201.%20%E6%B5%8B%E8%AF%95%E4%B8%80%E4%B8%8B%E5%9F%BA%E6%9C%AC%E8%BE%93%E5%87%BA%5Cnconsole.log(jsonstringify(undefined))%20%2F%2F%20undefined%5Cnconsole.log(jsonstringify(()%20%3D%3E%20%7B%7D))%20%2F%2F%20undefined%5Cnconsole.log(jsonstringify(Symbol(%5C%22%E5%89%8D%E7%AB%AF%E8%83%96%E5%A4%B4%E9%B1%BC%5C%22)))%20%2F%2F%20undefined%5Cnconsole.log(jsonstringify(NaN))%20%2F%2F%20null%5Cnconsole.log(jsonstringify(Infinity))%20%2F%2F%20null%5Cnconsole.log(jsonstringify(null))%20%2F%2F%20null%5Cnconsole.log(%5Cn%20%20%20%20jsonstringify(%7B%5Cn%20%20%20%20%20%20%20%20name%3A%20%5C%22%E5%89%8D%E7%AB%AF%E8%83%96%E5%A4%B4%E9%B1%BC%5C%22%2C%5Cn%20%20%20%20%20%20%20%20toJSON()%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20return%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20name%3A%20%5C%22%E5%89%8D%E7%AB%AF%E8%83%96%E5%A4%B4%E9%B1%BC2%5C%22%2C%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20sex%3A%20%5C%22boy%5C%22%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%7D)%5Cn)%5Cn%2F%2F%20%7B%5C%22name%5C%22%3A%5C%22%E5%89%8D%E7%AB%AF%E8%83%96%E5%A4%B4%E9%B1%BC2%5C%22%2C%5C%22sex%5C%22%3A%5C%22boy%5C%22%7D%5Cn%5Cn%2F%2F%202.%20%E5%92%8C%E5%8E%9F%E7%94%9F%E7%9A%84JSON.stringify%E8%BD%AC%E6%8D%A2%E8%BF%9B%E8%A1%8C%E6%AF%94%E8%BE%83%5Cnconsole.log(jsonstringify(null)%20%3D%3D%3D%20JSON.stringify(null))%5Cn%2F%2F%20true%5Cnconsole.log(jsonstringify(undefined)%20%3D%3D%3D%20JSON.stringify(undefined))%5Cn%2F%2F%20true%5Cnconsole.log(jsonstringify(false)%20%3D%3D%3D%20JSON.stringify(false))%5Cn%2F%2F%20true%5Cnconsole.log(jsonstringify(NaN)%20%3D%3D%3D%20JSON.stringify(NaN))%5Cn%2F%2F%20true%5Cnconsole.log(jsonstringify(Infinity)%20%3D%3D%3D%20JSON.stringify(Infinity))%5Cn%2F%2F%20true%5Cnlet%20str%20%3D%20%5C%22%E5%89%8D%E7%AB%AF%E8%83%96%E5%A4%B4%E9%B1%BC%5C%22%5Cnconsole.log(jsonstringify(str)%20%3D%3D%3D%20JSON.stringify(str))%5Cn%2F%2F%20true%5Cnlet%20reg%20%3D%20new%20RegExp(%5C%22w%5C%22)%5Cnconsole.log(jsonstringify(reg)%20%3D%3D%3D%20JSON.stringify(reg))%5Cn%2F%2F%20true%5Cnlet%20date%20%3D%20new%20Date()%5Cnconsole.log(jsonstringify(date)%20%3D%3D%3D%20JSON.stringify(date))%5Cn%2F%2F%20true%5Cnlet%20sym%20%3D%20Symbol(%5C%22%E5%89%8D%E7%AB%AF%E8%83%96%E5%A4%B4%E9%B1%BC%5C%22)%5Cnconsole.log(jsonstringify(sym)%20%3D%3D%3D%20JSON.stringify(sym))%5Cn%2F%2F%20true%5Cnlet%20array%20%3D%20%5B1%2C%202%2C%203%5D%5Cnconsole.log(jsonstringify(array)%20%3D%3D%3D%20JSON.stringify(array))%5Cn%2F%2F%20true%5Cnlet%20obj%20%3D%20%7B%5Cn%20%20%20%20name%3A%20%5C%22%E5%89%8D%E7%AB%AF%E8%83%96%E5%A4%B4%E9%B1%BC%5C%22%2C%5Cn%20%20%20%20age%3A%2018%2C%5Cn%20%20%20%20attr%3A%20%5B%5C%22coding%5C%22%2C%20123%5D%2C%5Cn%20%20%20%20date%3A%20new%20Date()%2C%5Cn%20%20%20%20uni%3A%20Symbol(2)%2C%5Cn%20%20%20%20sayHi%3A%20function%20()%20%7B%5Cn%20%20%20%20%20%20%20%20console.log(%5C%22hello%20world%5C%22)%5Cn%20%20%20%20%7D%2C%5Cn%20%20%20%20info%3A%20%7B%5Cn%20%20%20%20%20%20%20%20age%3A%2016%2C%5Cn%20%20%20%20%20%20%20%20intro%3A%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20money%3A%20undefined%2C%5Cn%20%20%20%20%20%20%20%20%20%20%20%20job%3A%20null%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%7D%2C%5Cn%20%20%20%20pakingObj%3A%20%7B%5Cn%20%20%20%20%20%20%20%20boolean%3A%20new%20Boolean(false)%2C%5Cn%20%20%20%20%20%20%20%20string%3A%20new%20String(%5C%22%E5%89%8D%E7%AB%AF%E8%83%96%E5%A4%B4%E9%B1%BC%5C%22)%2C%5Cn%20%20%20%20%20%20%20%20number%3A%20new%20Number(1)%5Cn%20%20%20%20%7D%5Cn%7D%5Cnconsole.log(jsonstringify(obj)%20%3D%3D%3D%20JSON.stringify(obj))%5Cn%2F%2F%20true%5Cnconsole.log(jsonstringify(obj))%5Cn%2F%2F%20%7B%5C%22name%5C%22%3A%5C%22%E5%89%8D%E7%AB%AF%E8%83%96%E5%A4%B4%E9%B1%BC%5C%22%2C%5C%22age%5C%22%3A18%2C%5C%22attr%5C%22%3A%5B%5C%22coding%5C%22%2C123%5D%2C%5C%22date%5C%22%3A%5C%222021-10-06T14%3A59%3A58.306Z%5C%22%2C%5C%22info%5C%22%3A%7B%5C%22age%5C%22%3A16%2C%5C%22intro%5C%22%3A%7B%5C%22job%5C%22%3Anull%7D%7D%2C%5C%22pakingObj%5C%22%3A%7B%5C%22boolean%5C%22%3Afalse%2C%5C%22string%5C%22%3A%5C%22%E5%89%8D%E7%AB%AF%E8%83%96%E5%A4%B4%E9%B1%BC%5C%22%2C%5C%22number%5C%22%3A1%7D%7D%5Cnconsole.log(JSON.stringify(obj))%5Cn%2F%2F%20%7B%5C%22name%5C%22%3A%5C%22%E5%89%8D%E7%AB%AF%E8%83%96%E5%A4%B4%E9%B1%BC%5C%22%2C%5C%22age%5C%22%3A18%2C%5C%22attr%5C%22%3A%5B%5C%22coding%5C%22%2C123%5D%2C%5C%22date%5C%22%3A%5C%222021-10-06T14%3A59%3A58.306Z%5C%22%2C%5C%22info%5C%22%3A%7B%5C%22age%5C%22%3A16%2C%5C%22intro%5C%22%3A%7B%5C%22job%5C%22%3Anull%7D%7D%2C%5C%22pakingObj%5C%22%3A%7B%5C%22boolean%5C%22%3Afalse%2C%5C%22string%5C%22%3A%5C%22%E5%89%8D%E7%AB%AF%E8%83%96%E5%A4%B4%E9%B1%BC%5C%22%2C%5C%22number%5C%22%3A1%7D%7D%5Cn%5Cn%2F%2F%203.%20%E6%B5%8B%E8%AF%95%E5%8F%AF%E9%81%8D%E5%8E%86%E5%AF%B9%E8%B1%A1%5Cnlet%20enumerableObj%20%3D%20%7B%7D%5Cn%5CnObject.defineProperties(enumerableObj%2C%20%7B%5Cn%20%20%20%20name%3A%20%7B%5Cn%20%20%20%20%20%20%20%20value%3A%20%5C%22%E5%89%8D%E7%AB%AF%E8%83%96%E5%A4%B4%E9%B1%BC%5C%22%2C%5Cn%20%20%20%20%20%20%20%20enumerable%3A%20true%5Cn%20%20%20%20%7D%2C%5Cn%20%20%20%20sex%3A%20%7B%5Cn%20%20%20%20%20%20%20%20value%3A%20%5C%22boy%5C%22%2C%5Cn%20%20%20%20%20%20%20%20enumerable%3A%20false%5Cn%20%20%20%20%7D%5Cn%7D)%5Cn%5Cnconsole.log(jsonstringify(enumerableObj))%5Cn%2F%2F%20%7B%5C%22name%5C%22%3A%5C%22%E5%89%8D%E7%AB%AF%E8%83%96%E5%A4%B4%E9%B1%BC%5C%22%7D%5Cn%5Cn%2F%2F%204.%20%E6%B5%8B%E8%AF%95%E5%BE%AA%E7%8E%AF%E5%BC%95%E7%94%A8%E5%92%8CBigint%5Cn%5Cnlet%20obj1%20%3D%20%7B%20a%3A%20%5C%22aa%5C%22%20%7D%5Cnlet%20obj2%20%3D%20%7B%20name%3A%20%5C%22%E5%89%8D%E7%AB%AF%E8%83%96%E5%A4%B4%E9%B1%BC%5C%22%2C%20a%3A%20obj1%2C%20b%3A%20obj1%20%7D%5Cnobj2.obj%20%3D%20obj2%5Cn%5Cnconsole.log(jsonstringify(obj2))%5Cn%2F%2F%20TypeError%3A%20Converting%20circular%20structure%20to%20JSON%5Cnconsole.log(jsonStringify(BigInt(1)))%5Cn%2F%2F%20TypeError%3A%20Do%20not%20know%20how%20to%20serialize%20a%20BigInt%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22vegYU%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card>",
  "public": 0,
  "status": 1,
  "likes_count": 0,
  "read_count": 0,
  "hits": 0,
  "comments_count": 0,
  "word_count": 1276,
  "created_at": "2022-05-11T15:02:30.000Z",
  "updated_at": "2022-05-11T15:08:05.000Z",
  "content_updated_at": "2022-05-11T15:02:30.000Z",
  "published_at": "2022-05-11T15:02:30.000Z",
  "first_published_at": "2022-05-11T15:02:29.576Z",
  "book": {
    "id": 27818302,
    "type": "Book",
    "slug": "pgkpvh",
    "name": "前端面试知识梳理",
    "user_id": 732231,
    "description": "",
    "toc_yml": "- type: META\n  count: 74\n  display_level: 1\n  tail_type: UPDATED_AT\n  base_version_id: 203636985\n  published: true\n  max_level: 1\n  last_updated_at: 2022-05-11T15:02:51.310Z\n  version_id: 203637675\n- type: TITLE\n  title: 基础 api 实现\n  uuid: 8cOHMB0GUaMGEJAZ\n  url: ''\n  prev_uuid: ''\n  sibling_uuid: XzzPhY1bnt-jy6Uq\n  child_uuid: tkSYK-Ar5LWNbwCs\n  parent_uuid: ''\n  doc_id: ''\n  level: 0\n  id: ''\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 实现 es6 的 extends\n  uuid: tkSYK-Ar5LWNbwCs\n  url: vtqbgk\n  prev_uuid: 8cOHMB0GUaMGEJAZ\n  sibling_uuid: iZbjvIrZWQPncGf4\n  child_uuid: ''\n  parent_uuid: 8cOHMB0GUaMGEJAZ\n  doc_id: 77021830\n  level: 1\n  id: 77021830\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 实现 ajax\n  uuid: iZbjvIrZWQPncGf4\n  url: cq5ws4\n  prev_uuid: tkSYK-Ar5LWNbwCs\n  sibling_uuid: GQ98GFTcsA6oX5fu\n  child_uuid: ''\n  parent_uuid: 8cOHMB0GUaMGEJAZ\n  doc_id: 77021696\n  level: 1\n  id: 77021696\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 实现 call、apply、bind\n  uuid: GQ98GFTcsA6oX5fu\n  url: ybrsyw\n  prev_uuid: iZbjvIrZWQPncGf4\n  sibling_uuid: 8mxtq-HrdjGBfE1K\n  child_uuid: ''\n  parent_uuid: 8cOHMB0GUaMGEJAZ\n  doc_id: 77021715\n  level: 1\n  id: 77021715\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 实现 new 关键字\n  uuid: 8mxtq-HrdjGBfE1K\n  url: pldu2b\n  prev_uuid: GQ98GFTcsA6oX5fu\n  sibling_uuid: DTHsD8sppgSTGUG-\n  child_uuid: ''\n  parent_uuid: 8cOHMB0GUaMGEJAZ\n  doc_id: 77021706\n  level: 1\n  id: 77021706\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 函数柯理化\n  uuid: DTHsD8sppgSTGUG-\n  url: yo9cx5\n  prev_uuid: 8mxtq-HrdjGBfE1K\n  sibling_uuid: TaRHTWpqD3Ef8QHU\n  child_uuid: ''\n  parent_uuid: 8cOHMB0GUaMGEJAZ\n  doc_id: 77021634\n  level: 1\n  id: 77021634\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 浅拷贝和深拷贝\n  uuid: TaRHTWpqD3Ef8QHU\n  url: ufks1z\n  prev_uuid: DTHsD8sppgSTGUG-\n  sibling_uuid: 4Z30CA9ZXVdeKnnL\n  child_uuid: ''\n  parent_uuid: 8cOHMB0GUaMGEJAZ\n  doc_id: 77021640\n  level: 1\n  id: 77021640\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 实现 instanceof\n  uuid: 4Z30CA9ZXVdeKnnL\n  url: ba4wuo\n  prev_uuid: TaRHTWpqD3Ef8QHU\n  sibling_uuid: 2MBif8wnmvigRAxT\n  child_uuid: ''\n  parent_uuid: 8cOHMB0GUaMGEJAZ\n  doc_id: 77021689\n  level: 1\n  id: 77021689\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 手动实现定时器\n  uuid: 2MBif8wnmvigRAxT\n  url: wf9bwg\n  prev_uuid: 4Z30CA9ZXVdeKnnL\n  sibling_uuid: 8f6jGaWidUBFSNN7\n  child_uuid: ''\n  parent_uuid: 8cOHMB0GUaMGEJAZ\n  doc_id: 77021645\n  level: 1\n  id: 77021645\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: sleep 函数实现\n  uuid: 8f6jGaWidUBFSNN7\n  url: ngwrak\n  prev_uuid: 2MBif8wnmvigRAxT\n  sibling_uuid: lXeuN-kwl51AKTO0\n  child_uuid: ''\n  parent_uuid: 8cOHMB0GUaMGEJAZ\n  doc_id: 77021787\n  level: 1\n  id: 77021787\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 实现 JSON.stringify\n  uuid: lXeuN-kwl51AKTO0\n  url: mtoe2n\n  prev_uuid: 8f6jGaWidUBFSNN7\n  sibling_uuid: hVvT5-pJ5qVvYNrK\n  child_uuid: ''\n  parent_uuid: 8cOHMB0GUaMGEJAZ\n  doc_id: 77021785\n  level: 1\n  id: 77021785\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: js 通用类型获取\n  uuid: hVvT5-pJ5qVvYNrK\n  url: tll6lm\n  prev_uuid: lXeuN-kwl51AKTO0\n  sibling_uuid: ''\n  child_uuid: ''\n  parent_uuid: 8cOHMB0GUaMGEJAZ\n  doc_id: 77021802\n  level: 1\n  id: 77021802\n  open_window: 0\n  visible: 1\n- type: TITLE\n  title: 防抖和节流\n  uuid: XzzPhY1bnt-jy6Uq\n  url: ''\n  prev_uuid: 8cOHMB0GUaMGEJAZ\n  sibling_uuid: PkyQAjgp1TOfRd_2\n  child_uuid: AQvBtgwRPd2U2nSA\n  parent_uuid: ''\n  doc_id: ''\n  level: 0\n  id: ''\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 防抖\n  uuid: AQvBtgwRPd2U2nSA\n  url: enlngv\n  prev_uuid: XzzPhY1bnt-jy6Uq\n  sibling_uuid: nlhlSMjYGwG8o1jH\n  child_uuid: ''\n  parent_uuid: XzzPhY1bnt-jy6Uq\n  doc_id: 77021614\n  level: 1\n  id: 77021614\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 节流\n  uuid: nlhlSMjYGwG8o1jH\n  url: griz0t\n  prev_uuid: AQvBtgwRPd2U2nSA\n  sibling_uuid: ''\n  child_uuid: ''\n  parent_uuid: XzzPhY1bnt-jy6Uq\n  doc_id: 77021626\n  level: 1\n  id: 77021626\n  open_window: 0\n  visible: 1\n- type: TITLE\n  title: 数组相关\n  uuid: PkyQAjgp1TOfRd_2\n  url: ''\n  prev_uuid: XzzPhY1bnt-jy6Uq\n  sibling_uuid: 5NjAYoIgV-DfXemF\n  child_uuid: xTSsZIKFI9Di3LBH\n  parent_uuid: ''\n  doc_id: ''\n  level: 0\n  id: ''\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 数组转树\n  uuid: xTSsZIKFI9Di3LBH\n  url: bzgequ\n  prev_uuid: PkyQAjgp1TOfRd_2\n  sibling_uuid: Z_6uIAB9XA6raQPD\n  child_uuid: ''\n  parent_uuid: PkyQAjgp1TOfRd_2\n  doc_id: 77021833\n  level: 1\n  id: 77021833\n  open_window: 0\n  visible: 0\n- type: DOC\n  title: 树转数组\n  uuid: Z_6uIAB9XA6raQPD\n  url: xycpzl\n  prev_uuid: xTSsZIKFI9Di3LBH\n  sibling_uuid: hoLauQ33F3aF2wq7\n  child_uuid: ''\n  parent_uuid: PkyQAjgp1TOfRd_2\n  doc_id: 77021835\n  level: 1\n  id: 77021835\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 数组常用方法\n  uuid: hoLauQ33F3aF2wq7\n  url: owtewn\n  prev_uuid: Z_6uIAB9XA6raQPD\n  sibling_uuid: rvc_A-WMsWds7EBa\n  child_uuid: ''\n  parent_uuid: PkyQAjgp1TOfRd_2\n  doc_id: 77021725\n  level: 1\n  id: 77021725\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 数组去重实现\n  uuid: rvc_A-WMsWds7EBa\n  url: gq2z9n\n  prev_uuid: hoLauQ33F3aF2wq7\n  sibling_uuid: NB4bY-etxMWq1YWS\n  child_uuid: ''\n  parent_uuid: PkyQAjgp1TOfRd_2\n  doc_id: 77021623\n  level: 1\n  id: 77021623\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 数组扁平化实现\n  uuid: NB4bY-etxMWq1YWS\n  url: doeryg\n  prev_uuid: rvc_A-WMsWds7EBa\n  sibling_uuid: DBoiy0L7Hhm_Zrkf\n  child_uuid: ''\n  parent_uuid: PkyQAjgp1TOfRd_2\n  doc_id: 77021607\n  level: 1\n  id: 77021607\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 类数组转换为数组\n  uuid: DBoiy0L7Hhm_Zrkf\n  url: csgagn\n  prev_uuid: NB4bY-etxMWq1YWS\n  sibling_uuid: E4WkD_rpaai_v3HK\n  child_uuid: ''\n  parent_uuid: PkyQAjgp1TOfRd_2\n  doc_id: 77021754\n  level: 1\n  id: 77021754\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 实现数组乱序输出\n  uuid: E4WkD_rpaai_v3HK\n  url: xlrgnu\n  prev_uuid: DBoiy0L7Hhm_Zrkf\n  sibling_uuid: OkcuvyhOMA6N0ex4\n  child_uuid: ''\n  parent_uuid: PkyQAjgp1TOfRd_2\n  doc_id: 77021731\n  level: 1\n  id: 77021731\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 查找二维数组的目标值\n  uuid: OkcuvyhOMA6N0ex4\n  url: tmw2ny\n  prev_uuid: E4WkD_rpaai_v3HK\n  sibling_uuid: F8K4-6VRqHrupctd\n  child_uuid: ''\n  parent_uuid: PkyQAjgp1TOfRd_2\n  doc_id: 77021789\n  level: 1\n  id: 77021789\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 二维数组斜向打印\n  uuid: F8K4-6VRqHrupctd\n  url: aqw6my\n  prev_uuid: OkcuvyhOMA6N0ex4\n  sibling_uuid: ''\n  child_uuid: ''\n  parent_uuid: PkyQAjgp1TOfRd_2\n  doc_id: 77021780\n  level: 1\n  id: 77021780\n  open_window: 0\n  visible: 1\n- type: TITLE\n  title: 字符串相关\n  uuid: 5NjAYoIgV-DfXemF\n  url: ''\n  prev_uuid: PkyQAjgp1TOfRd_2\n  sibling_uuid: Q34_kLhQ_uWoQw46\n  child_uuid: XNjX12HqmJBUHjy7\n  parent_uuid: ''\n  doc_id: ''\n  level: 0\n  id: ''\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 实现字符串的 repeat 方法\n  uuid: XNjX12HqmJBUHjy7\n  url: hxelqc\n  prev_uuid: 5NjAYoIgV-DfXemF\n  sibling_uuid: ''\n  child_uuid: ''\n  parent_uuid: 5NjAYoIgV-DfXemF\n  doc_id: 77021740\n  level: 1\n  id: 77021740\n  open_window: 0\n  visible: 1\n- type: TITLE\n  title: promise相关\n  uuid: Q34_kLhQ_uWoQw46\n  url: ''\n  prev_uuid: 5NjAYoIgV-DfXemF\n  sibling_uuid: aXqdYGJNJ1HlijwX\n  child_uuid: fuTj4su1VjBeHDO5\n  parent_uuid: ''\n  doc_id: ''\n  level: 0\n  id: ''\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 实现 Promise A+\n  uuid: fuTj4su1VjBeHDO5\n  url: fl6cgx\n  prev_uuid: Q34_kLhQ_uWoQw46\n  sibling_uuid: IOPLb2N42d3OZ0Zq\n  child_uuid: ''\n  parent_uuid: Q34_kLhQ_uWoQw46\n  doc_id: 77021620\n  level: 1\n  id: 77021620\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: Promise  常用方法实现\n  uuid: IOPLb2N42d3OZ0Zq\n  url: vd2h4l\n  prev_uuid: fuTj4su1VjBeHDO5\n  sibling_uuid: vKLkkDq-XoJwsqMW\n  child_uuid: ''\n  parent_uuid: Q34_kLhQ_uWoQw46\n  doc_id: 77021632\n  level: 1\n  id: 77021632\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: Promise 并发控制\n  uuid: vKLkkDq-XoJwsqMW\n  url: gd3193\n  prev_uuid: IOPLb2N42d3OZ0Zq\n  sibling_uuid: rYJ2dherst1MyK0I\n  child_uuid: ''\n  parent_uuid: Q34_kLhQ_uWoQw46\n  doc_id: 77021662\n  level: 1\n  id: 77021662\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: Promise 缓存\n  uuid: rYJ2dherst1MyK0I\n  url: sgcusf\n  prev_uuid: vKLkkDq-XoJwsqMW\n  sibling_uuid: xZ5UrxtCjhBJxiXK\n  child_uuid: ''\n  parent_uuid: Q34_kLhQ_uWoQw46\n  doc_id: 77021679\n  level: 1\n  id: 77021679\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 异步串行输出\n  uuid: xZ5UrxtCjhBJxiXK\n  url: um4g6z\n  prev_uuid: rYJ2dherst1MyK0I\n  sibling_uuid: fZuICDZLsFJSo57b\n  child_uuid: ''\n  parent_uuid: Q34_kLhQ_uWoQw46\n  doc_id: 77021649\n  level: 1\n  id: 77021649\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 带并发的异步调度器 Scheduler\n  uuid: fZuICDZLsFJSo57b\n  url: kbkc8e\n  prev_uuid: xZ5UrxtCjhBJxiXK\n  sibling_uuid: ''\n  child_uuid: ''\n  parent_uuid: Q34_kLhQ_uWoQw46\n  doc_id: 77021700\n  level: 1\n  id: 77021700\n  open_window: 0\n  visible: 1\n- type: TITLE\n  title: 数据处理\n  uuid: aXqdYGJNJ1HlijwX\n  url: ''\n  prev_uuid: Q34_kLhQ_uWoQw46\n  sibling_uuid: oj23-2V9egz1L0Ic\n  child_uuid: SxxBIhY4HFEaNF8V\n  parent_uuid: ''\n  doc_id: ''\n  level: 0\n  id: ''\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 解析 url 参数对象\n  uuid: SxxBIhY4HFEaNF8V\n  url: rxw8qp\n  prev_uuid: aXqdYGJNJ1HlijwX\n  sibling_uuid: yiD9ldSpBGzQNQxQ\n  child_uuid: ''\n  parent_uuid: aXqdYGJNJ1HlijwX\n  doc_id: 77021764\n  level: 1\n  id: 77021764\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 实现日期格式化函数\n  uuid: yiD9ldSpBGzQNQxQ\n  url: shzfyg\n  prev_uuid: SxxBIhY4HFEaNF8V\n  sibling_uuid: _3QVaw5COwwvCXZv\n  child_uuid: ''\n  parent_uuid: aXqdYGJNJ1HlijwX\n  doc_id: 77021710\n  level: 1\n  id: 77021710\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 交换 a、b 的值，不使用临时变量\n  uuid: _3QVaw5COwwvCXZv\n  url: xw17tv\n  prev_uuid: yiD9ldSpBGzQNQxQ\n  sibling_uuid: Mq5fe2v7j2INDdvL\n  child_uuid: ''\n  parent_uuid: aXqdYGJNJ1HlijwX\n  doc_id: 77021736\n  level: 1\n  id: 77021736\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 获取两个数之间的任意随机数\n  uuid: Mq5fe2v7j2INDdvL\n  url: vhngph\n  prev_uuid: _3QVaw5COwwvCXZv\n  sibling_uuid: 8Chl_bOMaALA1jhP\n  child_uuid: ''\n  parent_uuid: aXqdYGJNJ1HlijwX\n  doc_id: 77021688\n  level: 1\n  id: 77021688\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 将数字千分位用逗号隔开\n  uuid: 8Chl_bOMaALA1jhP\n  url: vphpea\n  prev_uuid: Mq5fe2v7j2INDdvL\n  sibling_uuid: MLI7v9Et4dIn7XiV\n  child_uuid: ''\n  parent_uuid: aXqdYGJNJ1HlijwX\n  doc_id: 77021743\n  level: 1\n  id: 77021743\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 实现非负大整数相加\n  uuid: MLI7v9Et4dIn7XiV\n  url: xlvd0g\n  prev_uuid: 8Chl_bOMaALA1jhP\n  sibling_uuid: mVWcb08QaDpa9PNH\n  child_uuid: ''\n  parent_uuid: aXqdYGJNJ1HlijwX\n  doc_id: 77021748\n  level: 1\n  id: 77021748\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 判断对象是否存在循环引用\n  uuid: mVWcb08QaDpa9PNH\n  url: phqdmd\n  prev_uuid: MLI7v9Et4dIn7XiV\n  sibling_uuid: ''\n  child_uuid: ''\n  parent_uuid: aXqdYGJNJ1HlijwX\n  doc_id: 77021768\n  level: 1\n  id: 77021768\n  open_window: 0\n  visible: 1\n- type: TITLE\n  title: 框架\n  uuid: oj23-2V9egz1L0Ic\n  url: ''\n  prev_uuid: aXqdYGJNJ1HlijwX\n  sibling_uuid: BTeDPodj0NU8fRW3\n  child_uuid: t5HRubL3aXPLNoG6\n  parent_uuid: ''\n  doc_id: ''\n  level: 0\n  id: ''\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 发布订阅模式\n  uuid: t5HRubL3aXPLNoG6\n  url: ezcdgo\n  prev_uuid: oj23-2V9egz1L0Ic\n  sibling_uuid: EqMT4jazWkuKJX1v\n  child_uuid: ''\n  parent_uuid: oj23-2V9egz1L0Ic\n  doc_id: 77021611\n  level: 1\n  id: 77021611\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 观察者模式\n  uuid: EqMT4jazWkuKJX1v\n  url: dwziom\n  prev_uuid: t5HRubL3aXPLNoG6\n  sibling_uuid: O5OEkYSpde-8we8V\n  child_uuid: ''\n  parent_uuid: oj23-2V9egz1L0Ic\n  doc_id: 77021795\n  level: 1\n  id: 77021795\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 简易版 vue2\n  uuid: O5OEkYSpde-8we8V\n  url: indxog\n  prev_uuid: EqMT4jazWkuKJX1v\n  sibling_uuid: XOQaAmtLM_gvM85t\n  child_uuid: ''\n  parent_uuid: oj23-2V9egz1L0Ic\n  doc_id: 77021636\n  level: 1\n  id: 77021636\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 简易版 vue3\n  uuid: XOQaAmtLM_gvM85t\n  url: an017i\n  prev_uuid: O5OEkYSpde-8we8V\n  sibling_uuid: ciSabdz5MTC1wbC7\n  child_uuid: ''\n  parent_uuid: oj23-2V9egz1L0Ic\n  doc_id: 77021804\n  level: 1\n  id: 77021804\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 简易版 vuex\n  uuid: ciSabdz5MTC1wbC7\n  url: myzomg\n  prev_uuid: XOQaAmtLM_gvM85t\n  sibling_uuid: ''\n  child_uuid: ''\n  parent_uuid: oj23-2V9egz1L0Ic\n  doc_id: 77021704\n  level: 1\n  id: 77021704\n  open_window: 0\n  visible: 1\n- type: TITLE\n  title: 应用场景\n  uuid: BTeDPodj0NU8fRW3\n  url: ''\n  prev_uuid: oj23-2V9egz1L0Ic\n  sibling_uuid: KKJ-BzUK3K9FxUJ2\n  child_uuid: U1oF7BfjBGNpWa79\n  parent_uuid: ''\n  doc_id: ''\n  level: 0\n  id: ''\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 通过调用 addRemote 实现 add\n  uuid: U1oF7BfjBGNpWa79\n  url: edff3s\n  prev_uuid: BTeDPodj0NU8fRW3\n  sibling_uuid: RMAn78BGFgyI8W6c\n  child_uuid: ''\n  parent_uuid: BTeDPodj0NU8fRW3\n  doc_id: 77021816\n  level: 1\n  id: 77021816\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 倒计时\n  uuid: RMAn78BGFgyI8W6c\n  url: uwleof\n  prev_uuid: U1oF7BfjBGNpWa79\n  sibling_uuid: aYlobR47xz0qHkhF\n  child_uuid: ''\n  parent_uuid: BTeDPodj0NU8fRW3\n  doc_id: 77021810\n  level: 1\n  id: 77021810\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 版本号比较\n  uuid: aYlobR47xz0qHkhF\n  url: cynvvd\n  prev_uuid: RMAn78BGFgyI8W6c\n  sibling_uuid: N0u_B_WnmtCeQwFI\n  child_uuid: ''\n  parent_uuid: BTeDPodj0NU8fRW3\n  doc_id: 77021792\n  level: 1\n  id: 77021792\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 实现简单路由\n  uuid: N0u_B_WnmtCeQwFI\n  url: zzc9k3\n  prev_uuid: aYlobR47xz0qHkhF\n  sibling_uuid: es8IUmiyOTWzwKa9\n  child_uuid: ''\n  parent_uuid: BTeDPodj0NU8fRW3\n  doc_id: 77021784\n  level: 1\n  id: 77021784\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 长列表虚拟滚动\n  uuid: es8IUmiyOTWzwKa9\n  url: wsmws7\n  prev_uuid: N0u_B_WnmtCeQwFI\n  sibling_uuid: yKn9f3BKX1S3tsyK\n  child_uuid: ''\n  parent_uuid: BTeDPodj0NU8fRW3\n  doc_id: 77021653\n  level: 1\n  id: 77021653\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 围圈报数问题\n  uuid: yKn9f3BKX1S3tsyK\n  url: gkoa19\n  prev_uuid: es8IUmiyOTWzwKa9\n  sibling_uuid: zmiKBP3HABO6Ig_9\n  child_uuid: ''\n  parent_uuid: BTeDPodj0NU8fRW3\n  doc_id: 77021761\n  level: 1\n  id: 77021761\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 查找文章中出现频率最高的词\n  uuid: zmiKBP3HABO6Ig_9\n  url: rln2y3\n  prev_uuid: yKn9f3BKX1S3tsyK\n  sibling_uuid: cDzdEkch3JypwTh2\n  child_uuid: ''\n  parent_uuid: BTeDPodj0NU8fRW3\n  doc_id: 77021772\n  level: 1\n  id: 77021772\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: Promise 每隔 1s 输出 1、2、3\n  uuid: cDzdEkch3JypwTh2\n  url: yg55el\n  prev_uuid: zmiKBP3HABO6Ig_9\n  sibling_uuid: II7sWIfm_eSWwKfq\n  child_uuid: ''\n  parent_uuid: BTeDPodj0NU8fRW3\n  doc_id: 77021821\n  level: 1\n  id: 77021821\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 循环打印红黄绿\n  uuid: II7sWIfm_eSWwKfq\n  url: wyhgfz\n  prev_uuid: cDzdEkch3JypwTh2\n  sibling_uuid: 0hKcnD9qnLeCTq4Q\n  child_uuid: ''\n  parent_uuid: BTeDPodj0NU8fRW3\n  doc_id: 77021776\n  level: 1\n  id: 77021776\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 封装一个异步加载图片的方法\n  uuid: 0hKcnD9qnLeCTq4Q\n  url: orxq0m\n  prev_uuid: II7sWIfm_eSWwKfq\n  sibling_uuid: b7lf8zlMeqorWGgi\n  child_uuid: ''\n  parent_uuid: BTeDPodj0NU8fRW3\n  doc_id: 77021825\n  level: 1\n  id: 77021825\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 实现 mergePromise 函数\n  uuid: b7lf8zlMeqorWGgi\n  url: apqplp\n  prev_uuid: 0hKcnD9qnLeCTq4Q\n  sibling_uuid: EZZ2GBqZ-B1LUsam\n  child_uuid: ''\n  parent_uuid: BTeDPodj0NU8fRW3\n  doc_id: 77021819\n  level: 1\n  id: 77021819\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 图片加载数量限制\n  uuid: EZZ2GBqZ-B1LUsam\n  url: xz2gy5\n  prev_uuid: b7lf8zlMeqorWGgi\n  sibling_uuid: '-8N7uf1xcBmFXSQI'\n  child_uuid: ''\n  parent_uuid: BTeDPodj0NU8fRW3\n  doc_id: 77021664\n  level: 1\n  id: 77021664\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 文本中识别敏感词、表情包、链接、数字、字母并高亮\n  uuid: '-8N7uf1xcBmFXSQI'\n  url: athu4p\n  prev_uuid: EZZ2GBqZ-B1LUsam\n  sibling_uuid: F_Fz97LW3aSxLLnr\n  child_uuid: ''\n  parent_uuid: BTeDPodj0NU8fRW3\n  doc_id: 77021666\n  level: 1\n  id: 77021666\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 图片格式转换为 webp\n  uuid: F_Fz97LW3aSxLLnr\n  url: cwlftq\n  prev_uuid: '-8N7uf1xcBmFXSQI'\n  sibling_uuid: wfz5QMLK_eAEtlFz\n  child_uuid: ''\n  parent_uuid: BTeDPodj0NU8fRW3\n  doc_id: 77021647\n  level: 1\n  id: 77021647\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 计算对象占用的字节数\n  uuid: wfz5QMLK_eAEtlFz\n  url: gx1y1y\n  prev_uuid: F_Fz97LW3aSxLLnr\n  sibling_uuid: rKjJYSK4ytL18T9L\n  child_uuid: ''\n  parent_uuid: BTeDPodj0NU8fRW3\n  doc_id: 77021669\n  level: 1\n  id: 77021669\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 给 xhr 添加 hook，实现在各个阶段打印日志\n  uuid: rKjJYSK4ytL18T9L\n  url: dm9n4g\n  prev_uuid: wfz5QMLK_eAEtlFz\n  sibling_uuid: zZADZWaE-olCAOjQ\n  child_uuid: ''\n  parent_uuid: BTeDPodj0NU8fRW3\n  doc_id: 77021658\n  level: 1\n  id: 77021658\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 明信片问题\n  uuid: zZADZWaE-olCAOjQ\n  url: mnsw3z\n  prev_uuid: rKjJYSK4ytL18T9L\n  sibling_uuid: ''\n  child_uuid: ''\n  parent_uuid: BTeDPodj0NU8fRW3\n  doc_id: 77021807\n  level: 1\n  id: 77021807\n  open_window: 0\n  visible: 1\n- type: TITLE\n  title: 常用算法实现\n  uuid: KKJ-BzUK3K9FxUJ2\n  url: ''\n  prev_uuid: BTeDPodj0NU8fRW3\n  sibling_uuid: ''\n  child_uuid: z8xQMUujFU-0OTsg\n  parent_uuid: ''\n  doc_id: ''\n  level: 0\n  id: ''\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 二分查找\n  uuid: z8xQMUujFU-0OTsg\n  url: pywta0\n  prev_uuid: KKJ-BzUK3K9FxUJ2\n  sibling_uuid: _b3VVGX3aAQ_rvuS\n  child_uuid: ''\n  parent_uuid: KKJ-BzUK3K9FxUJ2\n  doc_id: 77021798\n  level: 1\n  id: 77021798\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 排序\n  uuid: _b3VVGX3aAQ_rvuS\n  url: ivvld9\n  prev_uuid: z8xQMUujFU-0OTsg\n  sibling_uuid: eRQoWM79y_Mwbg2D\n  child_uuid: ''\n  parent_uuid: KKJ-BzUK3K9FxUJ2\n  doc_id: 77021670\n  level: 1\n  id: 77021670\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 动态规划和贪心算法\n  uuid: eRQoWM79y_Mwbg2D\n  url: pyig7m\n  prev_uuid: _b3VVGX3aAQ_rvuS\n  sibling_uuid: tr1DuV5ACUbyp8j-\n  child_uuid: ''\n  parent_uuid: KKJ-BzUK3K9FxUJ2\n  doc_id: 77021676\n  level: 1\n  id: 77021676\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 洗牌算法\n  uuid: tr1DuV5ACUbyp8j-\n  url: tohw0k\n  prev_uuid: eRQoWM79y_Mwbg2D\n  sibling_uuid: x9xEaoi_A59UZjS5\n  child_uuid: ''\n  parent_uuid: KKJ-BzUK3K9FxUJ2\n  doc_id: 77021687\n  level: 1\n  id: 77021687\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: LRU(最少置换算法)\n  uuid: x9xEaoi_A59UZjS5\n  url: tmwgql\n  prev_uuid: tr1DuV5ACUbyp8j-\n  sibling_uuid: XsgMUe05eXycAX93\n  child_uuid: ''\n  parent_uuid: KKJ-BzUK3K9FxUJ2\n  doc_id: 77021694\n  level: 1\n  id: 77021694\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 斐波那契数列\n  uuid: XsgMUe05eXycAX93\n  url: bq7f7e\n  prev_uuid: x9xEaoi_A59UZjS5\n  sibling_uuid: T0orOt1CWhzdAczU\n  child_uuid: ''\n  parent_uuid: KKJ-BzUK3K9FxUJ2\n  doc_id: 77021683\n  level: 1\n  id: 77021683\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 大数相加\n  uuid: T0orOt1CWhzdAczU\n  url: ln6fpo\n  prev_uuid: XsgMUe05eXycAX93\n  sibling_uuid: ''\n  child_uuid: ''\n  parent_uuid: KKJ-BzUK3K9FxUJ2\n  doc_id: 77021693\n  level: 1\n  id: 77021693\n  open_window: 0\n  visible: 1\n",
    "creator_id": 732231,
    "public": 0,
    "items_count": 65,
    "likes_count": 0,
    "watches_count": 1,
    "content_updated_at": "2023-01-06T09:17:32.188Z",
    "created_at": "2022-05-11T14:43:59.000Z",
    "updated_at": "2023-11-11T18:10:33.000Z",
    "user": {
      "id": 732231,
      "type": "User",
      "login": "wcywxq",
      "name": "magic",
      "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/732231/1606968271774-avatar/886ad88b-d2cc-4c9e-a674-f70eb51a679c.png",
      "books_count": 21,
      "public_books_count": 0,
      "followers_count": 0,
      "following_count": 0,
      "public": 1,
      "description": null,
      "created_at": "2020-01-08T14:21:31.000Z",
      "updated_at": "2023-11-22T20:13:30.000Z",
      "work_id": "",
      "_serializer": "v2.user"
    },
    "namespace": "wcywxq/pgkpvh",
    "_serializer": "v2.book"
  },
  "user": {
    "id": 732231,
    "type": "User",
    "login": "wcywxq",
    "name": "magic",
    "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/732231/1606968271774-avatar/886ad88b-d2cc-4c9e-a674-f70eb51a679c.png",
    "books_count": 21,
    "public_books_count": 0,
    "followers_count": 0,
    "following_count": 0,
    "public": 1,
    "description": null,
    "created_at": "2020-01-08T14:21:31.000Z",
    "updated_at": "2023-11-22T20:13:30.000Z",
    "work_id": "",
    "_serializer": "v2.user"
  },
  "tags": [],
  "latest_version_id": 984850070,
  "creator": {
    "id": 732231,
    "type": "User",
    "login": "wcywxq",
    "name": "magic",
    "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/732231/1606968271774-avatar/886ad88b-d2cc-4c9e-a674-f70eb51a679c.png",
    "books_count": 21,
    "public_books_count": 0,
    "followers_count": 0,
    "following_count": 0,
    "public": 1,
    "description": null,
    "created_at": "2020-01-08T14:21:31.000Z",
    "updated_at": "2023-11-22T20:13:30.000Z",
    "work_id": "",
    "_serializer": "v2.user"
  },
  "_serializer": "v2.doc_detail"
}