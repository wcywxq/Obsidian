{
  "id": 77021640,
  "slug": "ufks1z",
  "title": "浅拷贝和深拷贝",
  "description": "浅拷贝浅拷贝是指，一个新的对象对原始对象的属性值进行精确地拷贝，如果拷贝的是基本数据类型，拷贝的就是基本数据类型的值，如果是引用数据类型，拷贝的就是内存地址。如果其中一个对象的引用内存地址发生改变，另一个对象也会发生变化。对象浅拷贝的一般实现function shallowCopy(obj) ...",
  "cover": "",
  "user_id": 732231,
  "book_id": 27818302,
  "last_editor_id": 732231,
  "format": "lake",
  "body_draft": "",
  "body": "<a name=\"nNdEX\"></a>\n## 浅拷贝\n浅拷贝是指，一个新的对象对原始对象的属性值进行精确地拷贝，如果拷贝的是基本数据类型，拷贝的就是基本数据类型的值，如果是引用数据类型，拷贝的就是内存地址。如果其中一个对象的引用内存地址发生改变，另一个对象也会发生变化。\n<a name=\"E3Zmt\"></a>\n### 对象浅拷贝的一般实现\n```javascript\nfunction shallowCopy(obj) {\n  // 只拷贝对象\n  if (!obj || typeof obj !== 'object') return\n  let newObj = obj instanceof Array ? [] : {}\n  for (let key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      newObj[key] = obj[key]\n    }\n  }\n  return newObj\n}\n```\n<a name=\"kmUvB\"></a>\n### 利用 Object.assign 实现对象浅拷贝\n```javascript\nlet target = { a: 1 }\nlet object2 = { b: 2 }\nlet object3 = { c: 3 }\nObject.assign(target, object2, object3)\nconsole.log(target)  // { a: 1, b: 2, c: 3 }\n```\n<a name=\"YGNLe\"></a>\n### 扩展运算符实现数组浅拷贝\n```javascript\nlet obj1 = { a: 1, b: { c: 1 } }\nlet obj2 = { ...obj1 }\nobj1.a = 2\nconsole.log(obj1) // { a: 2, b: { c: 1 } }\nconsole.log(obj2) // { a: 1, b: { c: 1 } }\nobj1.b.c = 2\nconsole.log(obj1) // { a: 2, b: { c: 2 } }\nconsole.log(obj2) // { a: 1, b: { c: 2 } }\n```\n<a name=\"Aygcq\"></a>\n### 数组方法实现数组浅拷贝\n<a name=\"X8htw\"></a>\n#### Array.prototype.slice\n```javascript\nlet arr = [1, 2, 3, 4]\nconsole.log(arr.slice()) // [1, 2, 3, 4]\nconsole.log(arr.slice() === arr) //false\n```\n<a name=\"F90vM\"></a>\n#### Array.prototype.contact\n```javascript\nlet arr = [1, 2, 3, 4]\nconsole.log(arr.concat()) // [1, 2, 3, 4]\nconsole.log(arr.concat() === arr) // false\n```\n<a name=\"n1PHB\"></a>\n## 深拷贝\n深拷贝相对浅拷贝而言，如果遇到属性值为引用类型的时候，它新建一个引用类型并将对应的值复制给它，因此对象获得的一个新的引用类型而不是一个原有类型的引用。深拷贝对于一些对象可以使用 `JSON` 的两个函数来实现，但是由于 `JSON` 的对象格式比 `js` 的对象格式更加严格，所以如果属性值里边出现函数或者 `Symbol` 类型的值时，会转换失败\n<a name=\"OsLVQ\"></a>\n### 对象深拷贝的一般实现\n```javascript\n// 只考虑普通对象属性，不考虑内置对象和函数\nfunction deepCopy(obj) {\n  if (!obj || typeof obj !== \"object\") return\n  let newObj = obj instanceof Array ? [] : {}\n  for (let k in obj) {\n    if (obj.hasOwnProperty(k) && typeof obj[k] === \"object\") {\n      newObj[k] = deepCopy(obj[k])\n    } else {\n      newObj[k] = obj[k]\n    }\n  }\n  return newObj\n}\n```\n<a name=\"XVakx\"></a>\n### JSON.stringify\n\n- `JSON.parse(JSON.stringify(obj))`是目前比较常用的深拷贝方法之一，它的原理就是利用 `JSON.stringify` 将 `js` 对象序列化（`JSON`字符串），再使用 `JSON.parse` 来反序列化(还原) `js` 对象。\n- 这个方法可以简单粗暴的实现深拷贝，但是还存在问题，拷贝的对象中如果有 **函数**，**undefined**，**symbol**，当使用过 `JSON.stringify()` 进行处理之后，都会消失。\n```javascript\nlet obj1 = {\n  a: 0,\n  b: {\n    c: 0\n  }\n}\nlet obj2 = JSON.parse(JSON.stringify(obj1))\nobj1.a = 1\nobj1.b.c = 1\nconsole.log(obj1) // { a: 1, b: { c: 1 } }\nconsole.log(obj2) // { a: 0, b: { c: 0 } }\n\n```\n<a name=\"prF1n\"></a>\n### lodash 的 _.cloneDeep 方法实现对象深拷贝\n```javascript\nvar _ = require('lodash');\nvar obj1 = {\n    a: 1,\n    b: { f: { g: 1 } },\n    c: [1, 2, 3]\n};\nvar obj2 = _.cloneDeep(obj1);\nconsole.log(obj1.b.f === obj2.b.f);// false\n```\n",
  "body_html": "<!doctype html><h2 id=\"nNdEX\"><span>浅拷贝</span></h2><p data-lake-id=\"u20728139\"><span>浅拷贝是指，一个新的对象对原始对象的属性值进行精确地拷贝，如果拷贝的是基本数据类型，拷贝的就是基本数据类型的值，如果是引用数据类型，拷贝的就是内存地址。如果其中一个对象的引用内存地址发生改变，另一个对象也会发生变化。</span></p><h3 id=\"E3Zmt\"><span>对象浅拷贝的一般实现</span></h3><pre data-lang=\"javascript\"><code>function shallowCopy(obj) {\n  // 只拷贝对象\n  if (!obj || typeof obj !== 'object') return\n  let newObj = obj instanceof Array ? [] : {}\n  for (let key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      newObj[key] = obj[key]\n    }\n  }\n  return newObj\n}</code></pre><h3 id=\"kmUvB\"><span>利用 Object.assign 实现对象浅拷贝</span></h3><pre data-lang=\"javascript\"><code>let target = { a: 1 }\nlet object2 = { b: 2 }\nlet object3 = { c: 3 }\nObject.assign(target, object2, object3)\nconsole.log(target)  // { a: 1, b: 2, c: 3 }</code></pre><h3 id=\"YGNLe\"><span>扩展运算符实现数组浅拷贝</span></h3><pre data-lang=\"javascript\"><code>let obj1 = { a: 1, b: { c: 1 } }\nlet obj2 = { ...obj1 }\nobj1.a = 2\nconsole.log(obj1) // { a: 2, b: { c: 1 } }\nconsole.log(obj2) // { a: 1, b: { c: 1 } }\nobj1.b.c = 2\nconsole.log(obj1) // { a: 2, b: { c: 2 } }\nconsole.log(obj2) // { a: 1, b: { c: 2 } }</code></pre><h3 id=\"Aygcq\"><span>数组方法实现数组浅拷贝</span></h3><h4 id=\"X8htw\"><span>Array.prototype.slice</span></h4><pre data-lang=\"javascript\"><code>let arr = [1, 2, 3, 4]\nconsole.log(arr.slice()) // [1, 2, 3, 4]\nconsole.log(arr.slice() === arr) //false</code></pre><h4 id=\"F90vM\"><span>Array.prototype.contact</span></h4><pre data-lang=\"javascript\"><code>let arr = [1, 2, 3, 4]\nconsole.log(arr.concat()) // [1, 2, 3, 4]\nconsole.log(arr.concat() === arr) // false</code></pre><h2 id=\"n1PHB\"><span>深拷贝</span></h2><p data-lake-id=\"u9d640273\"><span>深拷贝相对浅拷贝而言，如果遇到属性值为引用类型的时候，它新建一个引用类型并将对应的值复制给它，因此对象获得的一个新的引用类型而不是一个原有类型的引用。深拷贝对于一些对象可以使用 </span><code><span>JSON</span></code><span> 的两个函数来实现，但是由于 </span><code><span>JSON</span></code><span> 的对象格式比 </span><code><span>js</span></code><span> 的对象格式更加严格，所以如果属性值里边出现函数或者 </span><code><span>Symbol</span></code><span> 类型的值时，会转换失败</span></p><h3 id=\"OsLVQ\"><span>对象深拷贝的一般实现</span></h3><pre data-lang=\"javascript\"><code>// 只考虑普通对象属性，不考虑内置对象和函数\nfunction deepCopy(obj) {\n  if (!obj || typeof obj !== &quot;object&quot;) return\n  let newObj = obj instanceof Array ? [] : {}\n  for (let k in obj) {\n    if (obj.hasOwnProperty(k) &amp;&amp; typeof obj[k] === &quot;object&quot;) {\n      newObj[k] = deepCopy(obj[k])\n    } else {\n      newObj[k] = obj[k]\n    }\n  }\n  return newObj\n}</code></pre><h3 id=\"XVakx\"><span>JSON.stringify</span></h3><ul><li><code><span>JSON.parse(JSON.stringify(obj))</span></code><span>是目前比较常用的深拷贝方法之一，它的原理就是利用 </span><code><span>JSON.stringify</span></code><span> 将 </span><code><span>js</span></code><span> 对象序列化（</span><code><span>JSON</span></code><span>字符串），再使用 </span><code><span>JSON.parse</span></code><span> 来反序列化(还原) </span><code><span>js</span></code><span> 对象。</span></li><li><span>这个方法可以简单粗暴的实现深拷贝，但是还存在问题，拷贝的对象中如果有 </span><strong><span>函数</span></strong><span>，</span><strong><span>undefined</span></strong><span>，</span><strong><span>symbol</span></strong><span>，当使用过 </span><code><span>JSON.stringify()</span></code><span> 进行处理之后，都会消失。</span></li></ul><pre data-lang=\"javascript\"><code>let obj1 = {\n  a: 0,\n  b: {\n    c: 0\n  }\n}\nlet obj2 = JSON.parse(JSON.stringify(obj1))\nobj1.a = 1\nobj1.b.c = 1\nconsole.log(obj1) // { a: 1, b: { c: 1 } }\nconsole.log(obj2) // { a: 0, b: { c: 0 } }\n</code></pre><h3 id=\"prF1n\"><span>lodash 的 _.cloneDeep 方法实现对象深拷贝</span></h3><pre data-lang=\"javascript\"><code>var _ = require('lodash');\nvar obj1 = {\n    a: 1,\n    b: { f: { g: 1 } },\n    c: [1, 2, 3]\n};\nvar obj2 = _.cloneDeep(obj1);\nconsole.log(obj1.b.f === obj2.b.f);// false</code></pre>",
  "body_lake": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"viewport\" content=\"adapt\" /><h2 data-lake-id=\"nNdEX\" id=\"nNdEX\"><span data-lake-id=\"u27330469\" id=\"u27330469\">浅拷贝</span></h2><p data-lake-id=\"u20728139\" id=\"u20728139\"><span data-lake-id=\"u757f03ff\" id=\"u757f03ff\">浅拷贝是指，一个新的对象对原始对象的属性值进行精确地拷贝，如果拷贝的是基本数据类型，拷贝的就是基本数据类型的值，如果是引用数据类型，拷贝的就是内存地址。如果其中一个对象的引用内存地址发生改变，另一个对象也会发生变化。</span></p><h3 data-lake-id=\"E3Zmt\" id=\"E3Zmt\"><span data-lake-id=\"u946a449a\" id=\"u946a449a\">对象浅拷贝的一般实现</span></h3><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22function%20shallowCopy(obj)%20%7B%5Cn%20%20%2F%2F%20%E5%8F%AA%E6%8B%B7%E8%B4%9D%E5%AF%B9%E8%B1%A1%5Cn%20%20if%20(!obj%20%7C%7C%20typeof%20obj%20!%3D%3D%20'object')%20return%5Cn%20%20let%20newObj%20%3D%20obj%20instanceof%20Array%20%3F%20%5B%5D%20%3A%20%7B%7D%5Cn%20%20for%20(let%20key%20in%20obj)%20%7B%5Cn%20%20%20%20if%20(obj.hasOwnProperty(key))%20%7B%5Cn%20%20%20%20%20%20newObj%5Bkey%5D%20%3D%20obj%5Bkey%5D%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%20%20return%20newObj%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22Rm0sX%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h3 data-lake-id=\"kmUvB\" id=\"kmUvB\"><span data-lake-id=\"ua654d29e\" id=\"ua654d29e\">利用 Object.assign 实现对象浅拷贝</span></h3><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22let%20target%20%3D%20%7B%20a%3A%201%20%7D%5Cnlet%20object2%20%3D%20%7B%20b%3A%202%20%7D%5Cnlet%20object3%20%3D%20%7B%20c%3A%203%20%7D%5CnObject.assign(target%2C%20object2%2C%20object3)%5Cnconsole.log(target)%20%20%2F%2F%20%7B%20a%3A%201%2C%20b%3A%202%2C%20c%3A%203%20%7D%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22T7qQC%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h3 data-lake-id=\"YGNLe\" id=\"YGNLe\"><span data-lake-id=\"u20c5c59d\" id=\"u20c5c59d\">扩展运算符实现数组浅拷贝</span></h3><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22let%20obj1%20%3D%20%7B%20a%3A%201%2C%20b%3A%20%7B%20c%3A%201%20%7D%20%7D%5Cnlet%20obj2%20%3D%20%7B%20...obj1%20%7D%5Cnobj1.a%20%3D%202%5Cnconsole.log(obj1)%20%2F%2F%20%7B%20a%3A%202%2C%20b%3A%20%7B%20c%3A%201%20%7D%20%7D%5Cnconsole.log(obj2)%20%2F%2F%20%7B%20a%3A%201%2C%20b%3A%20%7B%20c%3A%201%20%7D%20%7D%5Cnobj1.b.c%20%3D%202%5Cnconsole.log(obj1)%20%2F%2F%20%7B%20a%3A%202%2C%20b%3A%20%7B%20c%3A%202%20%7D%20%7D%5Cnconsole.log(obj2)%20%2F%2F%20%7B%20a%3A%201%2C%20b%3A%20%7B%20c%3A%202%20%7D%20%7D%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22VoWC0%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h3 data-lake-id=\"Aygcq\" id=\"Aygcq\"><span data-lake-id=\"ub48a7f27\" id=\"ub48a7f27\">数组方法实现数组浅拷贝</span></h3><h4 data-lake-id=\"X8htw\" id=\"X8htw\"><span data-lake-id=\"uf44f748c\" id=\"uf44f748c\">Array.prototype.slice</span></h4><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22let%20arr%20%3D%20%5B1%2C%202%2C%203%2C%204%5D%5Cnconsole.log(arr.slice())%20%2F%2F%20%5B1%2C%202%2C%203%2C%204%5D%5Cnconsole.log(arr.slice()%20%3D%3D%3D%20arr)%20%2F%2Ffalse%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22Gk6Cj%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h4 data-lake-id=\"F90vM\" id=\"F90vM\"><span data-lake-id=\"u17bb4ea0\" id=\"u17bb4ea0\">Array.prototype.contact</span></h4><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22let%20arr%20%3D%20%5B1%2C%202%2C%203%2C%204%5D%5Cnconsole.log(arr.concat())%20%2F%2F%20%5B1%2C%202%2C%203%2C%204%5D%5Cnconsole.log(arr.concat()%20%3D%3D%3D%20arr)%20%2F%2F%20false%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22YymN7%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h2 data-lake-id=\"n1PHB\" id=\"n1PHB\"><span data-lake-id=\"u01ee1a4f\" id=\"u01ee1a4f\">深拷贝</span></h2><p data-lake-id=\"u9d640273\" id=\"u9d640273\"><span data-lake-id=\"ue1a35bf1\" id=\"ue1a35bf1\">深拷贝相对浅拷贝而言，如果遇到属性值为引用类型的时候，它新建一个引用类型并将对应的值复制给它，因此对象获得的一个新的引用类型而不是一个原有类型的引用。深拷贝对于一些对象可以使用 </span><code data-lake-id=\"u00cc8d8b\" id=\"u00cc8d8b\"><span data-lake-id=\"uff2a68ae\" id=\"uff2a68ae\">JSON</span></code><span data-lake-id=\"u665f2574\" id=\"u665f2574\"> 的两个函数来实现，但是由于 </span><code data-lake-id=\"ub5b80a31\" id=\"ub5b80a31\"><span data-lake-id=\"u151d7762\" id=\"u151d7762\">JSON</span></code><span data-lake-id=\"u3103b9c9\" id=\"u3103b9c9\"> 的对象格式比 </span><code data-lake-id=\"u2a1f89f0\" id=\"u2a1f89f0\"><span data-lake-id=\"u9df31aa2\" id=\"u9df31aa2\">js</span></code><span data-lake-id=\"u219fcad0\" id=\"u219fcad0\"> 的对象格式更加严格，所以如果属性值里边出现函数或者 </span><code data-lake-id=\"u16cf4747\" id=\"u16cf4747\"><span data-lake-id=\"ufa64df75\" id=\"ufa64df75\">Symbol</span></code><span data-lake-id=\"u579fe273\" id=\"u579fe273\"> 类型的值时，会转换失败</span></p><h3 data-lake-id=\"OsLVQ\" id=\"OsLVQ\"><span data-lake-id=\"u373df142\" id=\"u373df142\">对象深拷贝的一般实现</span></h3><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%20%E5%8F%AA%E8%80%83%E8%99%91%E6%99%AE%E9%80%9A%E5%AF%B9%E8%B1%A1%E5%B1%9E%E6%80%A7%EF%BC%8C%E4%B8%8D%E8%80%83%E8%99%91%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1%E5%92%8C%E5%87%BD%E6%95%B0%5Cnfunction%20deepCopy(obj)%20%7B%5Cn%20%20if%20(!obj%20%7C%7C%20typeof%20obj%20!%3D%3D%20%5C%22object%5C%22)%20return%5Cn%20%20let%20newObj%20%3D%20obj%20instanceof%20Array%20%3F%20%5B%5D%20%3A%20%7B%7D%5Cn%20%20for%20(let%20k%20in%20obj)%20%7B%5Cn%20%20%20%20if%20(obj.hasOwnProperty(k)%20%26%26%20typeof%20obj%5Bk%5D%20%3D%3D%3D%20%5C%22object%5C%22)%20%7B%5Cn%20%20%20%20%20%20newObj%5Bk%5D%20%3D%20deepCopy(obj%5Bk%5D)%5Cn%20%20%20%20%7D%20else%20%7B%5Cn%20%20%20%20%20%20newObj%5Bk%5D%20%3D%20obj%5Bk%5D%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%20%20return%20newObj%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22DKOLA%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h3 data-lake-id=\"XVakx\" id=\"XVakx\"><span data-lake-id=\"u55a364f3\" id=\"u55a364f3\">JSON.stringify</span></h3><ul list=\"uddcfa279\"><li fid=\"u71e1a54e\" data-lake-id=\"uff92c9f1\" id=\"uff92c9f1\"><code data-lake-id=\"u6df4fc1b\" id=\"u6df4fc1b\"><span data-lake-id=\"u672aca32\" id=\"u672aca32\">JSON.parse(JSON.stringify(obj))</span></code><span data-lake-id=\"u2c8d728d\" id=\"u2c8d728d\">是目前比较常用的深拷贝方法之一，它的原理就是利用 </span><code data-lake-id=\"uabb76fc1\" id=\"uabb76fc1\"><span data-lake-id=\"udfcbcead\" id=\"udfcbcead\">JSON.stringify</span></code><span data-lake-id=\"u92867fa5\" id=\"u92867fa5\"> 将 </span><code data-lake-id=\"u23fcb409\" id=\"u23fcb409\"><span data-lake-id=\"u3503425d\" id=\"u3503425d\">js</span></code><span data-lake-id=\"u23af54da\" id=\"u23af54da\"> 对象序列化（</span><code data-lake-id=\"u90718133\" id=\"u90718133\"><span data-lake-id=\"u6098ffcc\" id=\"u6098ffcc\">JSON</span></code><span data-lake-id=\"u58cca661\" id=\"u58cca661\">字符串），再使用 </span><code data-lake-id=\"u35b48c98\" id=\"u35b48c98\"><span data-lake-id=\"uadef2278\" id=\"uadef2278\">JSON.parse</span></code><span data-lake-id=\"u08998c44\" id=\"u08998c44\"> 来反序列化(还原) </span><code data-lake-id=\"u28418575\" id=\"u28418575\"><span data-lake-id=\"ubcf5e679\" id=\"ubcf5e679\">js</span></code><span data-lake-id=\"u17ed9520\" id=\"u17ed9520\"> 对象。</span></li><li fid=\"u71e1a54e\" data-lake-id=\"ue1e931a6\" id=\"ue1e931a6\"><span data-lake-id=\"u9ce7ef38\" id=\"u9ce7ef38\">这个方法可以简单粗暴的实现深拷贝，但是还存在问题，拷贝的对象中如果有 </span><strong><span data-lake-id=\"ub3d6b5c3\" id=\"ub3d6b5c3\">函数</span></strong><span data-lake-id=\"u9d0df161\" id=\"u9d0df161\">，</span><strong><span data-lake-id=\"u22308e7c\" id=\"u22308e7c\">undefined</span></strong><span data-lake-id=\"uf382ea4c\" id=\"uf382ea4c\">，</span><strong><span data-lake-id=\"u9f0c932d\" id=\"u9f0c932d\">symbol</span></strong><span data-lake-id=\"u9530d027\" id=\"u9530d027\">，当使用过 </span><code data-lake-id=\"u784fb839\" id=\"u784fb839\"><span data-lake-id=\"uebcf60fa\" id=\"uebcf60fa\">JSON.stringify()</span></code><span data-lake-id=\"ucab183d9\" id=\"ucab183d9\"> 进行处理之后，都会消失。</span></li></ul><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22let%20obj1%20%3D%20%7B%5Cn%20%20a%3A%200%2C%5Cn%20%20b%3A%20%7B%5Cn%20%20%20%20c%3A%200%5Cn%20%20%7D%5Cn%7D%5Cnlet%20obj2%20%3D%20JSON.parse(JSON.stringify(obj1))%5Cnobj1.a%20%3D%201%5Cnobj1.b.c%20%3D%201%5Cnconsole.log(obj1)%20%2F%2F%20%7B%20a%3A%201%2C%20b%3A%20%7B%20c%3A%201%20%7D%20%7D%5Cnconsole.log(obj2)%20%2F%2F%20%7B%20a%3A%200%2C%20b%3A%20%7B%20c%3A%200%20%7D%20%7D%5Cn%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22o7Cyz%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h3 data-lake-id=\"prF1n\" id=\"prF1n\"><span data-lake-id=\"ue31e96fe\" id=\"ue31e96fe\">lodash 的 _.cloneDeep 方法实现对象深拷贝</span></h3><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22var%20_%20%3D%20require('lodash')%3B%5Cnvar%20obj1%20%3D%20%7B%5Cn%20%20%20%20a%3A%201%2C%5Cn%20%20%20%20b%3A%20%7B%20f%3A%20%7B%20g%3A%201%20%7D%20%7D%2C%5Cn%20%20%20%20c%3A%20%5B1%2C%202%2C%203%5D%5Cn%7D%3B%5Cnvar%20obj2%20%3D%20_.cloneDeep(obj1)%3B%5Cnconsole.log(obj1.b.f%20%3D%3D%3D%20obj2.b.f)%3B%2F%2F%20false%22%2C%22autoWrap%22%3Afalse%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22One%20Dark%20Pro%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22LgYlo%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card>",
  "public": 0,
  "status": 1,
  "likes_count": 0,
  "read_count": 0,
  "hits": 0,
  "comments_count": 0,
  "word_count": 770,
  "created_at": "2022-05-11T15:01:39.000Z",
  "updated_at": "2022-05-11T15:08:08.000Z",
  "content_updated_at": "2022-05-11T15:01:39.000Z",
  "published_at": "2022-05-11T15:01:39.000Z",
  "first_published_at": "2022-05-11T15:01:38.763Z",
  "book": {
    "id": 27818302,
    "type": "Book",
    "slug": "pgkpvh",
    "name": "前端面试知识梳理",
    "user_id": 732231,
    "description": "",
    "toc_yml": "- type: META\n  count: 74\n  display_level: 1\n  tail_type: UPDATED_AT\n  base_version_id: 203636985\n  published: true\n  max_level: 1\n  last_updated_at: 2022-05-11T15:02:51.310Z\n  version_id: 203637675\n- type: TITLE\n  title: 基础 api 实现\n  uuid: 8cOHMB0GUaMGEJAZ\n  url: ''\n  prev_uuid: ''\n  sibling_uuid: XzzPhY1bnt-jy6Uq\n  child_uuid: tkSYK-Ar5LWNbwCs\n  parent_uuid: ''\n  doc_id: ''\n  level: 0\n  id: ''\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 实现 es6 的 extends\n  uuid: tkSYK-Ar5LWNbwCs\n  url: vtqbgk\n  prev_uuid: 8cOHMB0GUaMGEJAZ\n  sibling_uuid: iZbjvIrZWQPncGf4\n  child_uuid: ''\n  parent_uuid: 8cOHMB0GUaMGEJAZ\n  doc_id: 77021830\n  level: 1\n  id: 77021830\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 实现 ajax\n  uuid: iZbjvIrZWQPncGf4\n  url: cq5ws4\n  prev_uuid: tkSYK-Ar5LWNbwCs\n  sibling_uuid: GQ98GFTcsA6oX5fu\n  child_uuid: ''\n  parent_uuid: 8cOHMB0GUaMGEJAZ\n  doc_id: 77021696\n  level: 1\n  id: 77021696\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 实现 call、apply、bind\n  uuid: GQ98GFTcsA6oX5fu\n  url: ybrsyw\n  prev_uuid: iZbjvIrZWQPncGf4\n  sibling_uuid: 8mxtq-HrdjGBfE1K\n  child_uuid: ''\n  parent_uuid: 8cOHMB0GUaMGEJAZ\n  doc_id: 77021715\n  level: 1\n  id: 77021715\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 实现 new 关键字\n  uuid: 8mxtq-HrdjGBfE1K\n  url: pldu2b\n  prev_uuid: GQ98GFTcsA6oX5fu\n  sibling_uuid: DTHsD8sppgSTGUG-\n  child_uuid: ''\n  parent_uuid: 8cOHMB0GUaMGEJAZ\n  doc_id: 77021706\n  level: 1\n  id: 77021706\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 函数柯理化\n  uuid: DTHsD8sppgSTGUG-\n  url: yo9cx5\n  prev_uuid: 8mxtq-HrdjGBfE1K\n  sibling_uuid: TaRHTWpqD3Ef8QHU\n  child_uuid: ''\n  parent_uuid: 8cOHMB0GUaMGEJAZ\n  doc_id: 77021634\n  level: 1\n  id: 77021634\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 浅拷贝和深拷贝\n  uuid: TaRHTWpqD3Ef8QHU\n  url: ufks1z\n  prev_uuid: DTHsD8sppgSTGUG-\n  sibling_uuid: 4Z30CA9ZXVdeKnnL\n  child_uuid: ''\n  parent_uuid: 8cOHMB0GUaMGEJAZ\n  doc_id: 77021640\n  level: 1\n  id: 77021640\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 实现 instanceof\n  uuid: 4Z30CA9ZXVdeKnnL\n  url: ba4wuo\n  prev_uuid: TaRHTWpqD3Ef8QHU\n  sibling_uuid: 2MBif8wnmvigRAxT\n  child_uuid: ''\n  parent_uuid: 8cOHMB0GUaMGEJAZ\n  doc_id: 77021689\n  level: 1\n  id: 77021689\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 手动实现定时器\n  uuid: 2MBif8wnmvigRAxT\n  url: wf9bwg\n  prev_uuid: 4Z30CA9ZXVdeKnnL\n  sibling_uuid: 8f6jGaWidUBFSNN7\n  child_uuid: ''\n  parent_uuid: 8cOHMB0GUaMGEJAZ\n  doc_id: 77021645\n  level: 1\n  id: 77021645\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: sleep 函数实现\n  uuid: 8f6jGaWidUBFSNN7\n  url: ngwrak\n  prev_uuid: 2MBif8wnmvigRAxT\n  sibling_uuid: lXeuN-kwl51AKTO0\n  child_uuid: ''\n  parent_uuid: 8cOHMB0GUaMGEJAZ\n  doc_id: 77021787\n  level: 1\n  id: 77021787\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 实现 JSON.stringify\n  uuid: lXeuN-kwl51AKTO0\n  url: mtoe2n\n  prev_uuid: 8f6jGaWidUBFSNN7\n  sibling_uuid: hVvT5-pJ5qVvYNrK\n  child_uuid: ''\n  parent_uuid: 8cOHMB0GUaMGEJAZ\n  doc_id: 77021785\n  level: 1\n  id: 77021785\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: js 通用类型获取\n  uuid: hVvT5-pJ5qVvYNrK\n  url: tll6lm\n  prev_uuid: lXeuN-kwl51AKTO0\n  sibling_uuid: ''\n  child_uuid: ''\n  parent_uuid: 8cOHMB0GUaMGEJAZ\n  doc_id: 77021802\n  level: 1\n  id: 77021802\n  open_window: 0\n  visible: 1\n- type: TITLE\n  title: 防抖和节流\n  uuid: XzzPhY1bnt-jy6Uq\n  url: ''\n  prev_uuid: 8cOHMB0GUaMGEJAZ\n  sibling_uuid: PkyQAjgp1TOfRd_2\n  child_uuid: AQvBtgwRPd2U2nSA\n  parent_uuid: ''\n  doc_id: ''\n  level: 0\n  id: ''\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 防抖\n  uuid: AQvBtgwRPd2U2nSA\n  url: enlngv\n  prev_uuid: XzzPhY1bnt-jy6Uq\n  sibling_uuid: nlhlSMjYGwG8o1jH\n  child_uuid: ''\n  parent_uuid: XzzPhY1bnt-jy6Uq\n  doc_id: 77021614\n  level: 1\n  id: 77021614\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 节流\n  uuid: nlhlSMjYGwG8o1jH\n  url: griz0t\n  prev_uuid: AQvBtgwRPd2U2nSA\n  sibling_uuid: ''\n  child_uuid: ''\n  parent_uuid: XzzPhY1bnt-jy6Uq\n  doc_id: 77021626\n  level: 1\n  id: 77021626\n  open_window: 0\n  visible: 1\n- type: TITLE\n  title: 数组相关\n  uuid: PkyQAjgp1TOfRd_2\n  url: ''\n  prev_uuid: XzzPhY1bnt-jy6Uq\n  sibling_uuid: 5NjAYoIgV-DfXemF\n  child_uuid: xTSsZIKFI9Di3LBH\n  parent_uuid: ''\n  doc_id: ''\n  level: 0\n  id: ''\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 数组转树\n  uuid: xTSsZIKFI9Di3LBH\n  url: bzgequ\n  prev_uuid: PkyQAjgp1TOfRd_2\n  sibling_uuid: Z_6uIAB9XA6raQPD\n  child_uuid: ''\n  parent_uuid: PkyQAjgp1TOfRd_2\n  doc_id: 77021833\n  level: 1\n  id: 77021833\n  open_window: 0\n  visible: 0\n- type: DOC\n  title: 树转数组\n  uuid: Z_6uIAB9XA6raQPD\n  url: xycpzl\n  prev_uuid: xTSsZIKFI9Di3LBH\n  sibling_uuid: hoLauQ33F3aF2wq7\n  child_uuid: ''\n  parent_uuid: PkyQAjgp1TOfRd_2\n  doc_id: 77021835\n  level: 1\n  id: 77021835\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 数组常用方法\n  uuid: hoLauQ33F3aF2wq7\n  url: owtewn\n  prev_uuid: Z_6uIAB9XA6raQPD\n  sibling_uuid: rvc_A-WMsWds7EBa\n  child_uuid: ''\n  parent_uuid: PkyQAjgp1TOfRd_2\n  doc_id: 77021725\n  level: 1\n  id: 77021725\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 数组去重实现\n  uuid: rvc_A-WMsWds7EBa\n  url: gq2z9n\n  prev_uuid: hoLauQ33F3aF2wq7\n  sibling_uuid: NB4bY-etxMWq1YWS\n  child_uuid: ''\n  parent_uuid: PkyQAjgp1TOfRd_2\n  doc_id: 77021623\n  level: 1\n  id: 77021623\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 数组扁平化实现\n  uuid: NB4bY-etxMWq1YWS\n  url: doeryg\n  prev_uuid: rvc_A-WMsWds7EBa\n  sibling_uuid: DBoiy0L7Hhm_Zrkf\n  child_uuid: ''\n  parent_uuid: PkyQAjgp1TOfRd_2\n  doc_id: 77021607\n  level: 1\n  id: 77021607\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 类数组转换为数组\n  uuid: DBoiy0L7Hhm_Zrkf\n  url: csgagn\n  prev_uuid: NB4bY-etxMWq1YWS\n  sibling_uuid: E4WkD_rpaai_v3HK\n  child_uuid: ''\n  parent_uuid: PkyQAjgp1TOfRd_2\n  doc_id: 77021754\n  level: 1\n  id: 77021754\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 实现数组乱序输出\n  uuid: E4WkD_rpaai_v3HK\n  url: xlrgnu\n  prev_uuid: DBoiy0L7Hhm_Zrkf\n  sibling_uuid: OkcuvyhOMA6N0ex4\n  child_uuid: ''\n  parent_uuid: PkyQAjgp1TOfRd_2\n  doc_id: 77021731\n  level: 1\n  id: 77021731\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 查找二维数组的目标值\n  uuid: OkcuvyhOMA6N0ex4\n  url: tmw2ny\n  prev_uuid: E4WkD_rpaai_v3HK\n  sibling_uuid: F8K4-6VRqHrupctd\n  child_uuid: ''\n  parent_uuid: PkyQAjgp1TOfRd_2\n  doc_id: 77021789\n  level: 1\n  id: 77021789\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 二维数组斜向打印\n  uuid: F8K4-6VRqHrupctd\n  url: aqw6my\n  prev_uuid: OkcuvyhOMA6N0ex4\n  sibling_uuid: ''\n  child_uuid: ''\n  parent_uuid: PkyQAjgp1TOfRd_2\n  doc_id: 77021780\n  level: 1\n  id: 77021780\n  open_window: 0\n  visible: 1\n- type: TITLE\n  title: 字符串相关\n  uuid: 5NjAYoIgV-DfXemF\n  url: ''\n  prev_uuid: PkyQAjgp1TOfRd_2\n  sibling_uuid: Q34_kLhQ_uWoQw46\n  child_uuid: XNjX12HqmJBUHjy7\n  parent_uuid: ''\n  doc_id: ''\n  level: 0\n  id: ''\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 实现字符串的 repeat 方法\n  uuid: XNjX12HqmJBUHjy7\n  url: hxelqc\n  prev_uuid: 5NjAYoIgV-DfXemF\n  sibling_uuid: ''\n  child_uuid: ''\n  parent_uuid: 5NjAYoIgV-DfXemF\n  doc_id: 77021740\n  level: 1\n  id: 77021740\n  open_window: 0\n  visible: 1\n- type: TITLE\n  title: promise相关\n  uuid: Q34_kLhQ_uWoQw46\n  url: ''\n  prev_uuid: 5NjAYoIgV-DfXemF\n  sibling_uuid: aXqdYGJNJ1HlijwX\n  child_uuid: fuTj4su1VjBeHDO5\n  parent_uuid: ''\n  doc_id: ''\n  level: 0\n  id: ''\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 实现 Promise A+\n  uuid: fuTj4su1VjBeHDO5\n  url: fl6cgx\n  prev_uuid: Q34_kLhQ_uWoQw46\n  sibling_uuid: IOPLb2N42d3OZ0Zq\n  child_uuid: ''\n  parent_uuid: Q34_kLhQ_uWoQw46\n  doc_id: 77021620\n  level: 1\n  id: 77021620\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: Promise  常用方法实现\n  uuid: IOPLb2N42d3OZ0Zq\n  url: vd2h4l\n  prev_uuid: fuTj4su1VjBeHDO5\n  sibling_uuid: vKLkkDq-XoJwsqMW\n  child_uuid: ''\n  parent_uuid: Q34_kLhQ_uWoQw46\n  doc_id: 77021632\n  level: 1\n  id: 77021632\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: Promise 并发控制\n  uuid: vKLkkDq-XoJwsqMW\n  url: gd3193\n  prev_uuid: IOPLb2N42d3OZ0Zq\n  sibling_uuid: rYJ2dherst1MyK0I\n  child_uuid: ''\n  parent_uuid: Q34_kLhQ_uWoQw46\n  doc_id: 77021662\n  level: 1\n  id: 77021662\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: Promise 缓存\n  uuid: rYJ2dherst1MyK0I\n  url: sgcusf\n  prev_uuid: vKLkkDq-XoJwsqMW\n  sibling_uuid: xZ5UrxtCjhBJxiXK\n  child_uuid: ''\n  parent_uuid: Q34_kLhQ_uWoQw46\n  doc_id: 77021679\n  level: 1\n  id: 77021679\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 异步串行输出\n  uuid: xZ5UrxtCjhBJxiXK\n  url: um4g6z\n  prev_uuid: rYJ2dherst1MyK0I\n  sibling_uuid: fZuICDZLsFJSo57b\n  child_uuid: ''\n  parent_uuid: Q34_kLhQ_uWoQw46\n  doc_id: 77021649\n  level: 1\n  id: 77021649\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 带并发的异步调度器 Scheduler\n  uuid: fZuICDZLsFJSo57b\n  url: kbkc8e\n  prev_uuid: xZ5UrxtCjhBJxiXK\n  sibling_uuid: ''\n  child_uuid: ''\n  parent_uuid: Q34_kLhQ_uWoQw46\n  doc_id: 77021700\n  level: 1\n  id: 77021700\n  open_window: 0\n  visible: 1\n- type: TITLE\n  title: 数据处理\n  uuid: aXqdYGJNJ1HlijwX\n  url: ''\n  prev_uuid: Q34_kLhQ_uWoQw46\n  sibling_uuid: oj23-2V9egz1L0Ic\n  child_uuid: SxxBIhY4HFEaNF8V\n  parent_uuid: ''\n  doc_id: ''\n  level: 0\n  id: ''\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 解析 url 参数对象\n  uuid: SxxBIhY4HFEaNF8V\n  url: rxw8qp\n  prev_uuid: aXqdYGJNJ1HlijwX\n  sibling_uuid: yiD9ldSpBGzQNQxQ\n  child_uuid: ''\n  parent_uuid: aXqdYGJNJ1HlijwX\n  doc_id: 77021764\n  level: 1\n  id: 77021764\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 实现日期格式化函数\n  uuid: yiD9ldSpBGzQNQxQ\n  url: shzfyg\n  prev_uuid: SxxBIhY4HFEaNF8V\n  sibling_uuid: _3QVaw5COwwvCXZv\n  child_uuid: ''\n  parent_uuid: aXqdYGJNJ1HlijwX\n  doc_id: 77021710\n  level: 1\n  id: 77021710\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 交换 a、b 的值，不使用临时变量\n  uuid: _3QVaw5COwwvCXZv\n  url: xw17tv\n  prev_uuid: yiD9ldSpBGzQNQxQ\n  sibling_uuid: Mq5fe2v7j2INDdvL\n  child_uuid: ''\n  parent_uuid: aXqdYGJNJ1HlijwX\n  doc_id: 77021736\n  level: 1\n  id: 77021736\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 获取两个数之间的任意随机数\n  uuid: Mq5fe2v7j2INDdvL\n  url: vhngph\n  prev_uuid: _3QVaw5COwwvCXZv\n  sibling_uuid: 8Chl_bOMaALA1jhP\n  child_uuid: ''\n  parent_uuid: aXqdYGJNJ1HlijwX\n  doc_id: 77021688\n  level: 1\n  id: 77021688\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 将数字千分位用逗号隔开\n  uuid: 8Chl_bOMaALA1jhP\n  url: vphpea\n  prev_uuid: Mq5fe2v7j2INDdvL\n  sibling_uuid: MLI7v9Et4dIn7XiV\n  child_uuid: ''\n  parent_uuid: aXqdYGJNJ1HlijwX\n  doc_id: 77021743\n  level: 1\n  id: 77021743\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 实现非负大整数相加\n  uuid: MLI7v9Et4dIn7XiV\n  url: xlvd0g\n  prev_uuid: 8Chl_bOMaALA1jhP\n  sibling_uuid: mVWcb08QaDpa9PNH\n  child_uuid: ''\n  parent_uuid: aXqdYGJNJ1HlijwX\n  doc_id: 77021748\n  level: 1\n  id: 77021748\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 判断对象是否存在循环引用\n  uuid: mVWcb08QaDpa9PNH\n  url: phqdmd\n  prev_uuid: MLI7v9Et4dIn7XiV\n  sibling_uuid: ''\n  child_uuid: ''\n  parent_uuid: aXqdYGJNJ1HlijwX\n  doc_id: 77021768\n  level: 1\n  id: 77021768\n  open_window: 0\n  visible: 1\n- type: TITLE\n  title: 框架\n  uuid: oj23-2V9egz1L0Ic\n  url: ''\n  prev_uuid: aXqdYGJNJ1HlijwX\n  sibling_uuid: BTeDPodj0NU8fRW3\n  child_uuid: t5HRubL3aXPLNoG6\n  parent_uuid: ''\n  doc_id: ''\n  level: 0\n  id: ''\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 发布订阅模式\n  uuid: t5HRubL3aXPLNoG6\n  url: ezcdgo\n  prev_uuid: oj23-2V9egz1L0Ic\n  sibling_uuid: EqMT4jazWkuKJX1v\n  child_uuid: ''\n  parent_uuid: oj23-2V9egz1L0Ic\n  doc_id: 77021611\n  level: 1\n  id: 77021611\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 观察者模式\n  uuid: EqMT4jazWkuKJX1v\n  url: dwziom\n  prev_uuid: t5HRubL3aXPLNoG6\n  sibling_uuid: O5OEkYSpde-8we8V\n  child_uuid: ''\n  parent_uuid: oj23-2V9egz1L0Ic\n  doc_id: 77021795\n  level: 1\n  id: 77021795\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 简易版 vue2\n  uuid: O5OEkYSpde-8we8V\n  url: indxog\n  prev_uuid: EqMT4jazWkuKJX1v\n  sibling_uuid: XOQaAmtLM_gvM85t\n  child_uuid: ''\n  parent_uuid: oj23-2V9egz1L0Ic\n  doc_id: 77021636\n  level: 1\n  id: 77021636\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 简易版 vue3\n  uuid: XOQaAmtLM_gvM85t\n  url: an017i\n  prev_uuid: O5OEkYSpde-8we8V\n  sibling_uuid: ciSabdz5MTC1wbC7\n  child_uuid: ''\n  parent_uuid: oj23-2V9egz1L0Ic\n  doc_id: 77021804\n  level: 1\n  id: 77021804\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 简易版 vuex\n  uuid: ciSabdz5MTC1wbC7\n  url: myzomg\n  prev_uuid: XOQaAmtLM_gvM85t\n  sibling_uuid: ''\n  child_uuid: ''\n  parent_uuid: oj23-2V9egz1L0Ic\n  doc_id: 77021704\n  level: 1\n  id: 77021704\n  open_window: 0\n  visible: 1\n- type: TITLE\n  title: 应用场景\n  uuid: BTeDPodj0NU8fRW3\n  url: ''\n  prev_uuid: oj23-2V9egz1L0Ic\n  sibling_uuid: KKJ-BzUK3K9FxUJ2\n  child_uuid: U1oF7BfjBGNpWa79\n  parent_uuid: ''\n  doc_id: ''\n  level: 0\n  id: ''\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 通过调用 addRemote 实现 add\n  uuid: U1oF7BfjBGNpWa79\n  url: edff3s\n  prev_uuid: BTeDPodj0NU8fRW3\n  sibling_uuid: RMAn78BGFgyI8W6c\n  child_uuid: ''\n  parent_uuid: BTeDPodj0NU8fRW3\n  doc_id: 77021816\n  level: 1\n  id: 77021816\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 倒计时\n  uuid: RMAn78BGFgyI8W6c\n  url: uwleof\n  prev_uuid: U1oF7BfjBGNpWa79\n  sibling_uuid: aYlobR47xz0qHkhF\n  child_uuid: ''\n  parent_uuid: BTeDPodj0NU8fRW3\n  doc_id: 77021810\n  level: 1\n  id: 77021810\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 版本号比较\n  uuid: aYlobR47xz0qHkhF\n  url: cynvvd\n  prev_uuid: RMAn78BGFgyI8W6c\n  sibling_uuid: N0u_B_WnmtCeQwFI\n  child_uuid: ''\n  parent_uuid: BTeDPodj0NU8fRW3\n  doc_id: 77021792\n  level: 1\n  id: 77021792\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 实现简单路由\n  uuid: N0u_B_WnmtCeQwFI\n  url: zzc9k3\n  prev_uuid: aYlobR47xz0qHkhF\n  sibling_uuid: es8IUmiyOTWzwKa9\n  child_uuid: ''\n  parent_uuid: BTeDPodj0NU8fRW3\n  doc_id: 77021784\n  level: 1\n  id: 77021784\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 长列表虚拟滚动\n  uuid: es8IUmiyOTWzwKa9\n  url: wsmws7\n  prev_uuid: N0u_B_WnmtCeQwFI\n  sibling_uuid: yKn9f3BKX1S3tsyK\n  child_uuid: ''\n  parent_uuid: BTeDPodj0NU8fRW3\n  doc_id: 77021653\n  level: 1\n  id: 77021653\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 围圈报数问题\n  uuid: yKn9f3BKX1S3tsyK\n  url: gkoa19\n  prev_uuid: es8IUmiyOTWzwKa9\n  sibling_uuid: zmiKBP3HABO6Ig_9\n  child_uuid: ''\n  parent_uuid: BTeDPodj0NU8fRW3\n  doc_id: 77021761\n  level: 1\n  id: 77021761\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 查找文章中出现频率最高的词\n  uuid: zmiKBP3HABO6Ig_9\n  url: rln2y3\n  prev_uuid: yKn9f3BKX1S3tsyK\n  sibling_uuid: cDzdEkch3JypwTh2\n  child_uuid: ''\n  parent_uuid: BTeDPodj0NU8fRW3\n  doc_id: 77021772\n  level: 1\n  id: 77021772\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: Promise 每隔 1s 输出 1、2、3\n  uuid: cDzdEkch3JypwTh2\n  url: yg55el\n  prev_uuid: zmiKBP3HABO6Ig_9\n  sibling_uuid: II7sWIfm_eSWwKfq\n  child_uuid: ''\n  parent_uuid: BTeDPodj0NU8fRW3\n  doc_id: 77021821\n  level: 1\n  id: 77021821\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 循环打印红黄绿\n  uuid: II7sWIfm_eSWwKfq\n  url: wyhgfz\n  prev_uuid: cDzdEkch3JypwTh2\n  sibling_uuid: 0hKcnD9qnLeCTq4Q\n  child_uuid: ''\n  parent_uuid: BTeDPodj0NU8fRW3\n  doc_id: 77021776\n  level: 1\n  id: 77021776\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 封装一个异步加载图片的方法\n  uuid: 0hKcnD9qnLeCTq4Q\n  url: orxq0m\n  prev_uuid: II7sWIfm_eSWwKfq\n  sibling_uuid: b7lf8zlMeqorWGgi\n  child_uuid: ''\n  parent_uuid: BTeDPodj0NU8fRW3\n  doc_id: 77021825\n  level: 1\n  id: 77021825\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 实现 mergePromise 函数\n  uuid: b7lf8zlMeqorWGgi\n  url: apqplp\n  prev_uuid: 0hKcnD9qnLeCTq4Q\n  sibling_uuid: EZZ2GBqZ-B1LUsam\n  child_uuid: ''\n  parent_uuid: BTeDPodj0NU8fRW3\n  doc_id: 77021819\n  level: 1\n  id: 77021819\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 图片加载数量限制\n  uuid: EZZ2GBqZ-B1LUsam\n  url: xz2gy5\n  prev_uuid: b7lf8zlMeqorWGgi\n  sibling_uuid: '-8N7uf1xcBmFXSQI'\n  child_uuid: ''\n  parent_uuid: BTeDPodj0NU8fRW3\n  doc_id: 77021664\n  level: 1\n  id: 77021664\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 文本中识别敏感词、表情包、链接、数字、字母并高亮\n  uuid: '-8N7uf1xcBmFXSQI'\n  url: athu4p\n  prev_uuid: EZZ2GBqZ-B1LUsam\n  sibling_uuid: F_Fz97LW3aSxLLnr\n  child_uuid: ''\n  parent_uuid: BTeDPodj0NU8fRW3\n  doc_id: 77021666\n  level: 1\n  id: 77021666\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 图片格式转换为 webp\n  uuid: F_Fz97LW3aSxLLnr\n  url: cwlftq\n  prev_uuid: '-8N7uf1xcBmFXSQI'\n  sibling_uuid: wfz5QMLK_eAEtlFz\n  child_uuid: ''\n  parent_uuid: BTeDPodj0NU8fRW3\n  doc_id: 77021647\n  level: 1\n  id: 77021647\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 计算对象占用的字节数\n  uuid: wfz5QMLK_eAEtlFz\n  url: gx1y1y\n  prev_uuid: F_Fz97LW3aSxLLnr\n  sibling_uuid: rKjJYSK4ytL18T9L\n  child_uuid: ''\n  parent_uuid: BTeDPodj0NU8fRW3\n  doc_id: 77021669\n  level: 1\n  id: 77021669\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 给 xhr 添加 hook，实现在各个阶段打印日志\n  uuid: rKjJYSK4ytL18T9L\n  url: dm9n4g\n  prev_uuid: wfz5QMLK_eAEtlFz\n  sibling_uuid: zZADZWaE-olCAOjQ\n  child_uuid: ''\n  parent_uuid: BTeDPodj0NU8fRW3\n  doc_id: 77021658\n  level: 1\n  id: 77021658\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 明信片问题\n  uuid: zZADZWaE-olCAOjQ\n  url: mnsw3z\n  prev_uuid: rKjJYSK4ytL18T9L\n  sibling_uuid: ''\n  child_uuid: ''\n  parent_uuid: BTeDPodj0NU8fRW3\n  doc_id: 77021807\n  level: 1\n  id: 77021807\n  open_window: 0\n  visible: 1\n- type: TITLE\n  title: 常用算法实现\n  uuid: KKJ-BzUK3K9FxUJ2\n  url: ''\n  prev_uuid: BTeDPodj0NU8fRW3\n  sibling_uuid: ''\n  child_uuid: z8xQMUujFU-0OTsg\n  parent_uuid: ''\n  doc_id: ''\n  level: 0\n  id: ''\n  open_window: 1\n  visible: 1\n- type: DOC\n  title: 二分查找\n  uuid: z8xQMUujFU-0OTsg\n  url: pywta0\n  prev_uuid: KKJ-BzUK3K9FxUJ2\n  sibling_uuid: _b3VVGX3aAQ_rvuS\n  child_uuid: ''\n  parent_uuid: KKJ-BzUK3K9FxUJ2\n  doc_id: 77021798\n  level: 1\n  id: 77021798\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 排序\n  uuid: _b3VVGX3aAQ_rvuS\n  url: ivvld9\n  prev_uuid: z8xQMUujFU-0OTsg\n  sibling_uuid: eRQoWM79y_Mwbg2D\n  child_uuid: ''\n  parent_uuid: KKJ-BzUK3K9FxUJ2\n  doc_id: 77021670\n  level: 1\n  id: 77021670\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 动态规划和贪心算法\n  uuid: eRQoWM79y_Mwbg2D\n  url: pyig7m\n  prev_uuid: _b3VVGX3aAQ_rvuS\n  sibling_uuid: tr1DuV5ACUbyp8j-\n  child_uuid: ''\n  parent_uuid: KKJ-BzUK3K9FxUJ2\n  doc_id: 77021676\n  level: 1\n  id: 77021676\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 洗牌算法\n  uuid: tr1DuV5ACUbyp8j-\n  url: tohw0k\n  prev_uuid: eRQoWM79y_Mwbg2D\n  sibling_uuid: x9xEaoi_A59UZjS5\n  child_uuid: ''\n  parent_uuid: KKJ-BzUK3K9FxUJ2\n  doc_id: 77021687\n  level: 1\n  id: 77021687\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: LRU(最少置换算法)\n  uuid: x9xEaoi_A59UZjS5\n  url: tmwgql\n  prev_uuid: tr1DuV5ACUbyp8j-\n  sibling_uuid: XsgMUe05eXycAX93\n  child_uuid: ''\n  parent_uuid: KKJ-BzUK3K9FxUJ2\n  doc_id: 77021694\n  level: 1\n  id: 77021694\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 斐波那契数列\n  uuid: XsgMUe05eXycAX93\n  url: bq7f7e\n  prev_uuid: x9xEaoi_A59UZjS5\n  sibling_uuid: T0orOt1CWhzdAczU\n  child_uuid: ''\n  parent_uuid: KKJ-BzUK3K9FxUJ2\n  doc_id: 77021683\n  level: 1\n  id: 77021683\n  open_window: 0\n  visible: 1\n- type: DOC\n  title: 大数相加\n  uuid: T0orOt1CWhzdAczU\n  url: ln6fpo\n  prev_uuid: XsgMUe05eXycAX93\n  sibling_uuid: ''\n  child_uuid: ''\n  parent_uuid: KKJ-BzUK3K9FxUJ2\n  doc_id: 77021693\n  level: 1\n  id: 77021693\n  open_window: 0\n  visible: 1\n",
    "creator_id": 732231,
    "public": 0,
    "items_count": 65,
    "likes_count": 0,
    "watches_count": 1,
    "content_updated_at": "2023-01-06T09:17:32.188Z",
    "created_at": "2022-05-11T14:43:59.000Z",
    "updated_at": "2023-11-11T18:10:33.000Z",
    "user": {
      "id": 732231,
      "type": "User",
      "login": "wcywxq",
      "name": "magic",
      "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/732231/1606968271774-avatar/886ad88b-d2cc-4c9e-a674-f70eb51a679c.png",
      "books_count": 21,
      "public_books_count": 0,
      "followers_count": 0,
      "following_count": 0,
      "public": 1,
      "description": null,
      "created_at": "2020-01-08T14:21:31.000Z",
      "updated_at": "2023-11-23T19:11:28.000Z",
      "work_id": "",
      "_serializer": "v2.user"
    },
    "namespace": "wcywxq/pgkpvh",
    "_serializer": "v2.book"
  },
  "user": {
    "id": 732231,
    "type": "User",
    "login": "wcywxq",
    "name": "magic",
    "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/732231/1606968271774-avatar/886ad88b-d2cc-4c9e-a674-f70eb51a679c.png",
    "books_count": 21,
    "public_books_count": 0,
    "followers_count": 0,
    "following_count": 0,
    "public": 1,
    "description": null,
    "created_at": "2020-01-08T14:21:31.000Z",
    "updated_at": "2023-11-23T19:11:28.000Z",
    "work_id": "",
    "_serializer": "v2.user"
  },
  "tags": [],
  "latest_version_id": 984848668,
  "creator": {
    "id": 732231,
    "type": "User",
    "login": "wcywxq",
    "name": "magic",
    "avatar_url": "https://cdn.nlark.com/yuque/0/2020/png/732231/1606968271774-avatar/886ad88b-d2cc-4c9e-a674-f70eb51a679c.png",
    "books_count": 21,
    "public_books_count": 0,
    "followers_count": 0,
    "following_count": 0,
    "public": 1,
    "description": null,
    "created_at": "2020-01-08T14:21:31.000Z",
    "updated_at": "2023-11-23T19:11:28.000Z",
    "work_id": "",
    "_serializer": "v2.user"
  },
  "_serializer": "v2.doc_detail"
}